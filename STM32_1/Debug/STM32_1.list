
STM32_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f3c  0800fbf0  0800fbf0  0001fbf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b2c  08010b2c  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08010b2c  08010b2c  00020b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b34  08010b34  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b34  08010b34  00020b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b38  08010b38  00020b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08010b3c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          000052bc  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200054b4  200054b4  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f684  00000000  00000000  000302ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004676  00000000  00000000  0004f932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c58  00000000  00000000  00053fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001620  00000000  00000000  00055c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026f36  00000000  00000000  00057220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020eac  00000000  00000000  0007e156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e8249  00000000  00000000  0009f002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008960  00000000  00000000  0018724c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0018fbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fbd8 	.word	0x0800fbd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800fbd8 	.word	0x0800fbd8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <comm_init>:

void uart_ack(uint8_t id);

/* Functions */

void comm_init(UART_HandleTypeDef* uart, Instruction* curInstObjRef, CompleteError* cpltErrObjRef) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	instructionId = 0;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <comm_init+0x78>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
	ack_tx = 0;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <comm_init+0x7c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]

	huart3Ptr = uart;
 8000ebc:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <comm_init+0x80>)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6013      	str	r3, [r2, #0]
	curInstPtr = curInstObjRef;
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <comm_init+0x84>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	6013      	str	r3, [r2, #0]
	cpltErrPtr = cpltErrObjRef;
 8000ec8:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <comm_init+0x88>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]

	curInstPtr->id = 0;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <comm_init+0x84>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
	curInstPtr->type = INST_TYPE_UNDEFINED;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <comm_init+0x84>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2202      	movs	r2, #2
 8000edc:	705a      	strb	r2, [r3, #1]
	curInstPtr->val = 0;
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <comm_init+0x84>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	805a      	strh	r2, [r3, #2]

	cpltErrPtr->id = 0;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <comm_init+0x88>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
	cpltErrPtr->type = CPLTERR_TYPE_UNDEFINED;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <comm_init+0x88>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	705a      	strb	r2, [r3, #1]
	cpltErrPtr->pos_x = 0;
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <comm_init+0x88>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2200      	movs	r2, #0
 8000efc:	805a      	strh	r2, [r3, #2]
	cpltErrPtr->pos_y = 0;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <comm_init+0x88>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2200      	movs	r2, #0
 8000f04:	809a      	strh	r2, [r3, #4]
	cpltErrPtr->finished = 1;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <comm_init+0x88>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	719a      	strb	r2, [r3, #6]

	return;
 8000f0e:	bf00      	nop
}
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000214 	.word	0x20000214
 8000f20:	20000215 	.word	0x20000215
 8000f24:	20000228 	.word	0x20000228
 8000f28:	2000022c 	.word	0x2000022c
 8000f2c:	20000230 	.word	0x20000230

08000f30 <uart_send_cam>:
		}*/
	}
	return HAL_OK;
}

HAL_StatusTypeDef uart_send_cam(uint8_t obstacle_id) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	if ((obstacle_id != 1) && (obstacle_id != 2)) return HAL_ERROR;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d004      	beq.n	8000f4a <uart_send_cam+0x1a>
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d001      	beq.n	8000f4a <uart_send_cam+0x1a>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e014      	b.n	8000f74 <uart_send_cam+0x44>
	uartbuf[0] = 0x43;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <uart_send_cam+0x4c>)
 8000f4c:	2243      	movs	r2, #67	; 0x43
 8000f4e:	701a      	strb	r2, [r3, #0]
	uartbuf[1] = 0x41;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <uart_send_cam+0x4c>)
 8000f52:	2241      	movs	r2, #65	; 0x41
 8000f54:	705a      	strb	r2, [r3, #1]
	uartbuf[2] = 0x4D;
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <uart_send_cam+0x4c>)
 8000f58:	224d      	movs	r2, #77	; 0x4d
 8000f5a:	709a      	strb	r2, [r3, #2]
	uartbuf[3] = obstacle_id;
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <uart_send_cam+0x4c>)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	70d3      	strb	r3, [r2, #3]
	return HAL_UART_Transmit(huart3Ptr, (uint8_t*)uartbuf, 4, UART_ACK_MAX_DELAY);
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <uart_send_cam+0x50>)
 8000f64:	6818      	ldr	r0, [r3, #0]
 8000f66:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	4903      	ldr	r1, [pc, #12]	; (8000f7c <uart_send_cam+0x4c>)
 8000f6e:	f008 f83a 	bl	8008fe6 <HAL_UART_Transmit>
 8000f72:	4603      	mov	r3, r0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000218 	.word	0x20000218
 8000f80:	20000228 	.word	0x20000228

08000f84 <uart_receive_cam>:
	}
	//uart_ack(instructionId);
	return HAL_ERROR;
}

uint8_t uart_receive_cam(const uint8_t* buf) {
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	uint8_t id = buf[3];
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3303      	adds	r3, #3
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	73fb      	strb	r3, [r7, #15]
	if (buf[0] == 0x00) {	// LEFT
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <uart_receive_cam+0x1c>
		return 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e006      	b.n	8000fae <uart_receive_cam+0x2a>
	}
	else if (buf[0] == 0xFF) {	// RIGHT
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2bff      	cmp	r3, #255	; 0xff
 8000fa6:	d101      	bne.n	8000fac <uart_receive_cam+0x28>
		return 2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e000      	b.n	8000fae <uart_receive_cam+0x2a>
	}
	return 0xFF;
 8000fac:	23ff      	movs	r3, #255	; 0xff
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <imu_init>:

/*+++++++++++++++++++++++++++++++++++*/

/*----------------------------------------------------------------*/

uint8_t imu_init(I2C_HandleTypeDef* hi2c_ptr) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	hi2c1_ptr = hi2c_ptr;
 8000fc4:	4a37      	ldr	r2, [pc, #220]	; (80010a4 <imu_init+0xe8>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]

	// Reset chip
	if (!write_one_byte(0, B0_PWR_MGMT_1, 0x80 | 0x41)) return 1;
 8000fca:	22c1      	movs	r2, #193	; 0xc1
 8000fcc:	2106      	movs	r1, #6
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f8ac 	bl	800112c <write_one_byte>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <imu_init+0x22>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e05d      	b.n	800109a <imu_init+0xde>

	cur_bank = get_cur_bank();
 8000fde:	f000 f907 	bl	80011f0 <get_cur_bank>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <imu_init+0xec>)
 8000fe8:	701a      	strb	r2, [r3, #0]

	HAL_Delay(100);
 8000fea:	2064      	movs	r0, #100	; 0x64
 8000fec:	f003 feb4 	bl	8004d58 <HAL_Delay>
	uint8_t who_am_i = read_one_byte(0, 0);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 f862 	bl	80010bc <read_one_byte>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]
	if (who_am_i != 0xEA) { 	// read WHO_AM_I register, should receive 0xEA
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2bea      	cmp	r3, #234	; 0xea
 8001000:	d001      	beq.n	8001006 <imu_init+0x4a>
		return 2;
 8001002:	2302      	movs	r3, #2
 8001004:	e049      	b.n	800109a <imu_init+0xde>
	}

	// Wake up chip
	if (!write_one_byte(0, B0_PWR_MGMT_1, ~0x40 & 0x41)) return 3;
 8001006:	2201      	movs	r2, #1
 8001008:	2106      	movs	r1, #6
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f88e 	bl	800112c <write_one_byte>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <imu_init+0x5e>
 8001016:	2303      	movs	r3, #3
 8001018:	e03f      	b.n	800109a <imu_init+0xde>
	HAL_Delay(50);
 800101a:	2032      	movs	r0, #50	; 0x32
 800101c:	f003 fe9c 	bl	8004d58 <HAL_Delay>

	// Enables ODR start-time alignment when any of the following registers is written: GYRO_SMPLRT_DIV,
	// ACCEL_SMPLRT_DIV_1, ACCEL_SMPLRT_DIV_2, I2C_MST_ODR_CONFIG.
	if (!write_one_byte(2, B2_ODR_ALIGN_EN, 0x01)) return 4;
 8001020:	2201      	movs	r2, #1
 8001022:	2109      	movs	r1, #9
 8001024:	2002      	movs	r0, #2
 8001026:	f000 f881 	bl	800112c <write_one_byte>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <imu_init+0x78>
 8001030:	2304      	movs	r3, #4
 8001032:	e032      	b.n	800109a <imu_init+0xde>
	HAL_Delay(50);
 8001034:	2032      	movs	r0, #50	; 0x32
 8001036:	f003 fe8f 	bl	8004d58 <HAL_Delay>

	// Set accel low pass filter
	//if (!write_one_byte(2, B2_ACCEL_CONFIG, (ACCEL_DLPFCFG_val << 3) | ACCEL_FCHOICE_val)) return 5;

	// Set gyro low pass filter and scale
	if (!write_one_byte(2, B2_GYRO_CONFIG_1, (((GYRO_DLPFCFG_val << 2) | GYRO_FS_SEL_val) << 1) | GYRO_FCHOICE_val)) return 6;
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <imu_init+0xf0>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <imu_init+0xf4>)
 8001042:	7812      	ldrb	r2, [r2, #0]
 8001044:	4313      	orrs	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	b25a      	sxtb	r2, r3
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <imu_init+0xf8>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b25b      	sxtb	r3, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	461a      	mov	r2, r3
 8001058:	2101      	movs	r1, #1
 800105a:	2002      	movs	r0, #2
 800105c:	f000 f866 	bl	800112c <write_one_byte>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <imu_init+0xae>
 8001066:	2306      	movs	r3, #6
 8001068:	e017      	b.n	800109a <imu_init+0xde>
	HAL_Delay(50);
 800106a:	2032      	movs	r0, #50	; 0x32
 800106c:	f003 fe74 	bl	8004d58 <HAL_Delay>
	//if (ACCEL_SMPLRT_DIV_val > 0x0FFF) ACCEL_SMPLRT_DIV_val = 0x0FFF;
	//if (!write_one_byte(2, B2_ACCEL_SMPLRT_DIV_1, (uint8_t)(ACCEL_SMPLRT_DIV_val >> 8))) return 7;
	//if (!write_one_byte(2, B2_ACCEL_SMPLRT_DIV_2, (uint8_t)(ACCEL_SMPLRT_DIV_val & 0x00FF))) return 8;

	// Set gyro sample rate divider
	if (!write_one_byte(2, B2_GYRO_SMPLRT_DIV, GYRO_SMPLRT_DIV_val)) return 9;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <imu_init+0xfc>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	2100      	movs	r1, #0
 8001078:	2002      	movs	r0, #2
 800107a:	f000 f857 	bl	800112c <write_one_byte>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <imu_init+0xcc>
 8001084:	2309      	movs	r3, #9
 8001086:	e008      	b.n	800109a <imu_init+0xde>
	HAL_Delay(50);
 8001088:	2032      	movs	r0, #50	; 0x32
 800108a:	f003 fe65 	bl	8004d58 <HAL_Delay>

	// Caliberate accelerometer (eliminate bias)
	//accel_caliberate();

	// Caliberate gyroscope (eliminate bias)
	gyro_caliberate();
 800108e:	f000 f943 	bl	8001318 <gyro_caliberate>
	HAL_Delay(50);
 8001092:	2032      	movs	r0, #50	; 0x32
 8001094:	f003 fe60 	bl	8004d58 <HAL_Delay>

	return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000234 	.word	0x20000234
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000002 	.word	0x20000002
 80010b0:	20000238 	.word	0x20000238
 80010b4:	20000001 	.word	0x20000001
 80010b8:	20000239 	.word	0x20000239

080010bc <read_one_byte>:

uint8_t read_one_byte(uint8_t bank, uint8_t regAddr) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]

	if (!select_bank(bank)) return 0;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f85a 	bl	8001188 <select_bank>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <read_one_byte+0x22>
 80010da:	2300      	movs	r3, #0
 80010dc:	e020      	b.n	8001120 <read_one_byte+0x64>
	uint8_t buf[1];

	uint8_t reg = regAddr;
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	72fb      	strb	r3, [r7, #11]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <read_one_byte+0x6c>)
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	f107 020b 	add.w	r2, r7, #11
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	21d0      	movs	r1, #208	; 0xd0
 80010f4:	f004 fef2 	bl	8005edc <HAL_I2C_Master_Transmit>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10f      	bne.n	800111e <read_one_byte+0x62>
		if (HAL_I2C_Master_Receive(hi2c1_ptr, IMU_I2C_ADDR, buf, 1, I2C_MAX_DELAY) == HAL_OK) {
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <read_one_byte+0x6c>)
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	f107 020c 	add.w	r2, r7, #12
 8001106:	f241 3388 	movw	r3, #5000	; 0x1388
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	21d0      	movs	r1, #208	; 0xd0
 8001110:	f004 ffe2 	bl	80060d8 <HAL_I2C_Master_Receive>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <read_one_byte+0x62>
			return buf[0];
 800111a:	7b3b      	ldrb	r3, [r7, #12]
 800111c:	e000      	b.n	8001120 <read_one_byte+0x64>
		}
	}
	return 0;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000234 	.word	0x20000234

0800112c <write_one_byte>:

uint8_t write_one_byte(uint8_t bank, uint8_t regAddr, uint8_t data) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af02      	add	r7, sp, #8
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	460b      	mov	r3, r1
 8001138:	71bb      	strb	r3, [r7, #6]
 800113a:	4613      	mov	r3, r2
 800113c:	717b      	strb	r3, [r7, #5]

	if (!select_bank(bank)) return 0;
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f821 	bl	8001188 <select_bank>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <write_one_byte+0x24>
 800114c:	2300      	movs	r3, #0
 800114e:	e014      	b.n	800117a <write_one_byte+0x4e>
	uint8_t buf[2];
	buf[0] = regAddr;
 8001150:	79bb      	ldrb	r3, [r7, #6]
 8001152:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 8001154:	797b      	ldrb	r3, [r7, #5]
 8001156:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, buf, 2, HAL_MAX_DELAY) == HAL_OK) {
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <write_one_byte+0x58>)
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	f107 020c 	add.w	r2, r7, #12
 8001160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2302      	movs	r3, #2
 8001168:	21d0      	movs	r1, #208	; 0xd0
 800116a:	f004 feb7 	bl	8005edc <HAL_I2C_Master_Transmit>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <write_one_byte+0x4c>
		return 1;
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <write_one_byte+0x4e>
	}
	return 0;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000234 	.word	0x20000234

08001188 <select_bank>:

uint8_t select_bank(uint8_t bank) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af02      	add	r7, sp, #8
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]

	if (bank > 3) return 0;
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b03      	cmp	r3, #3
 8001196:	d901      	bls.n	800119c <select_bank+0x14>
 8001198:	2300      	movs	r3, #0
 800119a:	e020      	b.n	80011de <select_bank+0x56>
	if (cur_bank == bank) return 1;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <select_bank+0x60>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d101      	bne.n	80011aa <select_bank+0x22>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e019      	b.n	80011de <select_bank+0x56>
	uint8_t buf[2];
	buf[0] = REG_BANK_SEL;
 80011aa:	237f      	movs	r3, #127	; 0x7f
 80011ac:	733b      	strb	r3, [r7, #12]
	buf[1] = bank << 4;
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, buf, 2, HAL_MAX_DELAY) == HAL_OK) {
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <select_bank+0x64>)
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	f107 020c 	add.w	r2, r7, #12
 80011be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2302      	movs	r3, #2
 80011c6:	21d0      	movs	r1, #208	; 0xd0
 80011c8:	f004 fe88 	bl	8005edc <HAL_I2C_Master_Transmit>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d104      	bne.n	80011dc <select_bank+0x54>
		cur_bank = bank;
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <select_bank+0x60>)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	7013      	strb	r3, [r2, #0]
		return 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <select_bank+0x56>
	}
	return 0;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000234 	.word	0x20000234

080011f0 <get_cur_bank>:

uint8_t get_cur_bank() {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af02      	add	r7, sp, #8
	uint8_t buf[1];

	uint8_t reg = REG_BANK_SEL;
 80011f6:	237f      	movs	r3, #127	; 0x7f
 80011f8:	70fb      	strb	r3, [r7, #3]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <get_cur_bank+0x58>)
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	1cfa      	adds	r2, r7, #3
 8001200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	21d0      	movs	r1, #208	; 0xd0
 800120a:	f004 fe67 	bl	8005edc <HAL_I2C_Master_Transmit>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d113      	bne.n	800123c <get_cur_bank+0x4c>
		if (HAL_I2C_Master_Receive(hi2c1_ptr, IMU_I2C_ADDR, buf, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <get_cur_bank+0x58>)
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	1d3a      	adds	r2, r7, #4
 800121a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	21d0      	movs	r1, #208	; 0xd0
 8001224:	f004 ff58 	bl	80060d8 <HAL_I2C_Master_Receive>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d106      	bne.n	800123c <get_cur_bank+0x4c>
			return (buf[0] >> 4) & 0x3;
 800122e:	793b      	ldrb	r3, [r7, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	e000      	b.n	800123e <get_cur_bank+0x4e>
		}
	}
	return 4;
 800123c:	2304      	movs	r3, #4
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000234 	.word	0x20000234

0800124c <read_raw_gyro_x>:
	write_one_byte(1, B1_YA_OFFS_L, accel_bias_y_l);
	write_one_byte(1, B1_ZA_OFFS_H, accel_bias_z_h);
	write_one_byte(1, B1_ZA_OFFS_L, accel_bias_z_l);
}

int16_t read_raw_gyro_x() {
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_XOUT_H) << 8) | read_one_byte(0, B0_GYRO_XOUT_L));
 8001252:	2133      	movs	r1, #51	; 0x33
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff ff31 	bl	80010bc <read_one_byte>
 800125a:	4603      	mov	r3, r0
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b21c      	sxth	r4, r3
 8001260:	2134      	movs	r1, #52	; 0x34
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff ff2a 	bl	80010bc <read_one_byte>
 8001268:	4603      	mov	r3, r0
 800126a:	b21b      	sxth	r3, r3
 800126c:	4323      	orrs	r3, r4
 800126e:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bd90      	pop	{r4, r7, pc}

0800127c <read_raw_gyro_y>:
	int16_t raw = read_raw_gyro_x();
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
	return result;
}

int16_t read_raw_gyro_y() {
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_YOUT_H) << 8) | read_one_byte(0, B0_GYRO_YOUT_L));
 8001282:	2135      	movs	r1, #53	; 0x35
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff ff19 	bl	80010bc <read_one_byte>
 800128a:	4603      	mov	r3, r0
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b21c      	sxth	r4, r3
 8001290:	2136      	movs	r1, #54	; 0x36
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff ff12 	bl	80010bc <read_one_byte>
 8001298:	4603      	mov	r3, r0
 800129a:	b21b      	sxth	r3, r3
 800129c:	4323      	orrs	r3, r4
 800129e:	80fb      	strh	r3, [r7, #6]
	return raw;
 80012a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}

080012ac <read_raw_gyro_z>:
	int16_t raw = read_raw_gyro_y();
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
	return result;
}

int16_t read_raw_gyro_z() {
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_ZOUT_H) << 8) | read_one_byte(0, B0_GYRO_ZOUT_L));
 80012b2:	2137      	movs	r1, #55	; 0x37
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff ff01 	bl	80010bc <read_one_byte>
 80012ba:	4603      	mov	r3, r0
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b21c      	sxth	r4, r3
 80012c0:	2138      	movs	r1, #56	; 0x38
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fefa 	bl	80010bc <read_one_byte>
 80012c8:	4603      	mov	r3, r0
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4323      	orrs	r3, r4
 80012ce:	80fb      	strh	r3, [r7, #6]
	return raw;
 80012d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd90      	pop	{r4, r7, pc}

080012dc <read_gyro_z>:

float read_gyro_z() {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
	int16_t raw = read_raw_gyro_z();
 80012e2:	f7ff ffe3 	bl	80012ac <read_raw_gyro_z>
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
 80012ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001314 <read_gyro_z+0x38>
 80012fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fe:	edc7 7a00 	vstr	s15, [r7]
	return result;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	ee07 3a90 	vmov	s15, r3
}
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	43030000 	.word	0x43030000

08001318 <gyro_caliberate>:
	gyro->x = read_gyro_x();
	gyro->y = read_gyro_y();
	gyro->z = read_gyro_z();
}

void gyro_caliberate() {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
	int32_t gyro_bias_x = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
	int32_t gyro_bias_y = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
	int32_t gyro_bias_z = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	e017      	b.n	8001360 <gyro_caliberate+0x48>
		gyro_bias_x += read_raw_gyro_x();
 8001330:	f7ff ff8c 	bl	800124c <read_raw_gyro_x>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	4413      	add	r3, r2
 800133c:	617b      	str	r3, [r7, #20]
		gyro_bias_y += read_raw_gyro_y();
 800133e:	f7ff ff9d 	bl	800127c <read_raw_gyro_y>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4413      	add	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
		gyro_bias_z += read_raw_gyro_z();
 800134c:	f7ff ffae 	bl	80012ac <read_raw_gyro_z>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3301      	adds	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b63      	cmp	r3, #99	; 0x63
 8001364:	dde4      	ble.n	8001330 <gyro_caliberate+0x18>
	}
	gyro_bias_x /= 100;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	4a31      	ldr	r2, [pc, #196]	; (8001430 <gyro_caliberate+0x118>)
 800136a:	fb82 1203 	smull	r1, r2, r2, r3
 800136e:	1152      	asrs	r2, r2, #5
 8001370:	17db      	asrs	r3, r3, #31
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	617b      	str	r3, [r7, #20]
	gyro_bias_y /= 100;
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4a2d      	ldr	r2, [pc, #180]	; (8001430 <gyro_caliberate+0x118>)
 800137a:	fb82 1203 	smull	r1, r2, r2, r3
 800137e:	1152      	asrs	r2, r2, #5
 8001380:	17db      	asrs	r3, r3, #31
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	613b      	str	r3, [r7, #16]
	gyro_bias_z /= 100;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4a29      	ldr	r2, [pc, #164]	; (8001430 <gyro_caliberate+0x118>)
 800138a:	fb82 1203 	smull	r1, r2, r2, r3
 800138e:	1152      	asrs	r2, r2, #5
 8001390:	17db      	asrs	r3, r3, #31
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	60fb      	str	r3, [r7, #12]
	// Step size for offset register: 0.0305 dps/LSB; Offset = Measurement / 4;
	gyro_bias_x = -gyro_bias_x / 4;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	425b      	negs	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	da00      	bge.n	80013a0 <gyro_caliberate+0x88>
 800139e:	3303      	adds	r3, #3
 80013a0:	109b      	asrs	r3, r3, #2
 80013a2:	617b      	str	r3, [r7, #20]
	gyro_bias_y = -gyro_bias_y / 4;
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	425b      	negs	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	da00      	bge.n	80013ae <gyro_caliberate+0x96>
 80013ac:	3303      	adds	r3, #3
 80013ae:	109b      	asrs	r3, r3, #2
 80013b0:	613b      	str	r3, [r7, #16]
	gyro_bias_z = -gyro_bias_z / 4;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	425b      	negs	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	da00      	bge.n	80013bc <gyro_caliberate+0xa4>
 80013ba:	3303      	adds	r3, #3
 80013bc:	109b      	asrs	r3, r3, #2
 80013be:	60fb      	str	r3, [r7, #12]
	/*gyro_bias_x = -gyro_bias_x * 2;
	gyro_bias_y = -gyro_bias_y * 2;
	gyro_bias_z = -gyro_bias_z * 2;*/
	// Separate gyro_bias into 2 parts: [15:8] and [7:0]
	uint8_t gyro_bias_x_h = (uint8_t)(gyro_bias_x >> 8);
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	121b      	asrs	r3, r3, #8
 80013c4:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_bias_x_l = (uint8_t)gyro_bias_x;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	71bb      	strb	r3, [r7, #6]
	uint8_t gyro_bias_y_h = (uint8_t)(gyro_bias_y >> 8);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	121b      	asrs	r3, r3, #8
 80013ce:	717b      	strb	r3, [r7, #5]
	uint8_t gyro_bias_y_l = (uint8_t)gyro_bias_y;
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	713b      	strb	r3, [r7, #4]
	uint8_t gyro_bias_z_h = (uint8_t)(gyro_bias_z >> 8);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	121b      	asrs	r3, r3, #8
 80013d8:	70fb      	strb	r3, [r7, #3]
	uint8_t gyro_bias_z_l = (uint8_t)gyro_bias_z;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	70bb      	strb	r3, [r7, #2]
	// Write to registers
	write_one_byte(2, B2_XG_OFFS_USRH, gyro_bias_x_h);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	461a      	mov	r2, r3
 80013e2:	2103      	movs	r1, #3
 80013e4:	2002      	movs	r0, #2
 80013e6:	f7ff fea1 	bl	800112c <write_one_byte>
	write_one_byte(2, B2_XG_OFFS_USRL, gyro_bias_x_l);
 80013ea:	79bb      	ldrb	r3, [r7, #6]
 80013ec:	461a      	mov	r2, r3
 80013ee:	2104      	movs	r1, #4
 80013f0:	2002      	movs	r0, #2
 80013f2:	f7ff fe9b 	bl	800112c <write_one_byte>
	write_one_byte(2, B2_YG_OFFS_USRH, gyro_bias_y_h);
 80013f6:	797b      	ldrb	r3, [r7, #5]
 80013f8:	461a      	mov	r2, r3
 80013fa:	2105      	movs	r1, #5
 80013fc:	2002      	movs	r0, #2
 80013fe:	f7ff fe95 	bl	800112c <write_one_byte>
	write_one_byte(2, B2_YG_OFFS_USRL, gyro_bias_y_l);
 8001402:	793b      	ldrb	r3, [r7, #4]
 8001404:	461a      	mov	r2, r3
 8001406:	2106      	movs	r1, #6
 8001408:	2002      	movs	r0, #2
 800140a:	f7ff fe8f 	bl	800112c <write_one_byte>
	write_one_byte(2, B2_ZG_OFFS_USRH, gyro_bias_z_h);
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	461a      	mov	r2, r3
 8001412:	2107      	movs	r1, #7
 8001414:	2002      	movs	r0, #2
 8001416:	f7ff fe89 	bl	800112c <write_one_byte>
	write_one_byte(2, B2_ZG_OFFS_USRL, gyro_bias_z_l);
 800141a:	78bb      	ldrb	r3, [r7, #2]
 800141c:	461a      	mov	r2, r3
 800141e:	2108      	movs	r1, #8
 8001420:	2002      	movs	r0, #2
 8001422:	f7ff fe83 	bl	800112c <write_one_byte>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	51eb851f 	.word	0x51eb851f

08001434 <calcOri>:

float calcOri(uint32_t* lastSampleTime, float lastSampleOri) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	ed87 0a00 	vstr	s0, [r7]
	float angular_speed = 0;
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
	angular_speed += read_gyro_z();
 8001446:	f7ff ff49 	bl	80012dc <read_gyro_z>
 800144a:	eeb0 7a40 	vmov.f32	s14, s0
 800144e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001452:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001456:	edc7 7a05 	vstr	s15, [r7, #20]
	if (abs(angular_speed) < MIN_ANG_SPD)
 800145a:	edd7 7a05 	vldr	s15, [r7, #20]
 800145e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001462:	ee17 3a90 	vmov	r3, s15
 8001466:	2b00      	cmp	r3, #0
 8001468:	bfb8      	it	lt
 800146a:	425b      	neglt	r3, r3
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001474:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001480:	d502      	bpl.n	8001488 <calcOri+0x54>
		angular_speed = 0;
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
	uint32_t curTime = HAL_GetTick();
 8001488:	f003 fc5a 	bl	8004d40 <HAL_GetTick>
 800148c:	60f8      	str	r0, [r7, #12]
	uint16_t dt = curTime - (*lastSampleTime);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	b29a      	uxth	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	817b      	strh	r3, [r7, #10]
	*lastSampleTime = curTime;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	601a      	str	r2, [r3, #0]
	float result = lastSampleOri + angular_speed * dt / 1000;
 80014a2:	897b      	ldrh	r3, [r7, #10]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b4:	eddf 6a19 	vldr	s13, [pc, #100]	; 800151c <calcOri+0xe8>
 80014b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014bc:	ed97 7a00 	vldr	s14, [r7]
 80014c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c4:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result >= 360)
 80014c8:	e007      	b.n	80014da <calcOri+0xa6>
		result -= 360;
 80014ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ce:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001520 <calcOri+0xec>
 80014d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014d6:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result >= 360)
 80014da:	edd7 7a04 	vldr	s15, [r7, #16]
 80014de:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001520 <calcOri+0xec>
 80014e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	daee      	bge.n	80014ca <calcOri+0x96>
	while (result < 0)
 80014ec:	e007      	b.n	80014fe <calcOri+0xca>
		result += 360;
 80014ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80014f2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001520 <calcOri+0xec>
 80014f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014fa:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result < 0)
 80014fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001502:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	d4f0      	bmi.n	80014ee <calcOri+0xba>
	return result;
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	ee07 3a90 	vmov	s15, r3
}
 8001512:	eeb0 0a67 	vmov.f32	s0, s15
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	447a0000 	.word	0x447a0000
 8001520:	43b40000 	.word	0x43b40000

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152a:	f003 fba3 	bl	8004c74 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152e:	f000 f8d9 	bl	80016e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001532:	f000 fca5 	bl	8001e80 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001536:	f000 fba5 	bl	8001c84 <MX_TIM8_Init>
  MX_I2C1_Init();
 800153a:	f000 f9d5 	bl	80018e8 <MX_I2C1_Init>
  MX_TIM2_Init();
 800153e:	f000 fac3 	bl	8001ac8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001542:	f000 fb15 	bl	8001b70 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001546:	f000 f9fd 	bl	8001944 <MX_TIM1_Init>
  MX_TIM6_Init();
 800154a:	f000 fb65 	bl	8001c18 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 800154e:	f000 fc6d 	bl	8001e2c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001552:	f000 fc41 	bl	8001dd8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001556:	f000 f923 	bl	80017a0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800155a:	f000 f973 	bl	8001844 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800155e:	f002 fe0b 	bl	8004178 <OLED_Init>
  uint8_t imuerr = imu_init(&hi2c1);
 8001562:	483c      	ldr	r0, [pc, #240]	; (8001654 <main+0x130>)
 8001564:	f7ff fd2a 	bl	8000fbc <imu_init>
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
  if (imuerr != 0) {
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00e      	beq.n	8001590 <main+0x6c>
	  OLED_Clear();
 8001572:	f002 fcdd 	bl	8003f30 <OLED_Clear>
		sprintf(oledbuf, "Imu err: %d", imuerr);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	461a      	mov	r2, r3
 800157a:	4937      	ldr	r1, [pc, #220]	; (8001658 <main+0x134>)
 800157c:	4837      	ldr	r0, [pc, #220]	; (800165c <main+0x138>)
 800157e:	f00c f8c3 	bl	800d708 <siprintf>
		OLED_ShowString(10, 15, &oledbuf[0]);
 8001582:	4a36      	ldr	r2, [pc, #216]	; (800165c <main+0x138>)
 8001584:	210f      	movs	r1, #15
 8001586:	200a      	movs	r0, #10
 8001588:	f002 fdc4 	bl	8004114 <OLED_ShowString>
		OLED_Refresh_Gram();
 800158c:	f002 fc4e 	bl	8003e2c <OLED_Refresh_Gram>
  }
  HAL_TIM_Base_Start(&htim6);
 8001590:	4833      	ldr	r0, [pc, #204]	; (8001660 <main+0x13c>)
 8001592:	f005 ffc5 	bl	8007520 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001596:	2100      	movs	r1, #0
 8001598:	4832      	ldr	r0, [pc, #200]	; (8001664 <main+0x140>)
 800159a:	f006 f9a5 	bl	80078e8 <HAL_TIM_IC_Start_IT>
  comm_init(&huart3, &curInst, &cpltErr);
 800159e:	4a32      	ldr	r2, [pc, #200]	; (8001668 <main+0x144>)
 80015a0:	4932      	ldr	r1, [pc, #200]	; (800166c <main+0x148>)
 80015a2:	4833      	ldr	r0, [pc, #204]	; (8001670 <main+0x14c>)
 80015a4:	f7ff fc7e 	bl	8000ea4 <comm_init>
  HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ae:	4831      	ldr	r0, [pc, #196]	; (8001674 <main+0x150>)
 80015b0:	f004 fb36 	bl	8005c20 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart3, (uint8_t*) buf, UART_PACKET_SIZE);
 80015b4:	2204      	movs	r2, #4
 80015b6:	4930      	ldr	r1, [pc, #192]	; (8001678 <main+0x154>)
 80015b8:	482d      	ldr	r0, [pc, #180]	; (8001670 <main+0x14c>)
 80015ba:	f007 fda6 	bl	800910a <HAL_UART_Receive_IT>
  mtr_init(&htim8, &htim2, &htim3, &mtrA, &mtrB, &mtrAPID, &mtrBPID, &backupObj, &orientation, &ori_semaphoreHandle);
 80015be:	4b2f      	ldr	r3, [pc, #188]	; (800167c <main+0x158>)
 80015c0:	9305      	str	r3, [sp, #20]
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <main+0x15c>)
 80015c4:	9304      	str	r3, [sp, #16]
 80015c6:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <main+0x160>)
 80015c8:	9303      	str	r3, [sp, #12]
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <main+0x164>)
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	4b2f      	ldr	r3, [pc, #188]	; (800168c <main+0x168>)
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <main+0x16c>)
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <main+0x170>)
 80015d8:	4a2f      	ldr	r2, [pc, #188]	; (8001698 <main+0x174>)
 80015da:	4930      	ldr	r1, [pc, #192]	; (800169c <main+0x178>)
 80015dc:	4830      	ldr	r0, [pc, #192]	; (80016a0 <main+0x17c>)
 80015de:	f001 fd37 	bl	8003050 <mtr_init>
  servoInit(&htim1);
 80015e2:	4820      	ldr	r0, [pc, #128]	; (8001664 <main+0x140>)
 80015e4:	f002 fec2 	bl	800436c <servoInit>
  //HAL_UART_Receive_IT(&huart1, (uint8_t*) buf, UART_PACKET_SIZE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015e8:	f008 fd5c 	bl	800a0a4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ori_semaphore */
  ori_semaphoreHandle = osSemaphoreNew(1, 1, &ori_semaphore_attributes);
 80015ec:	4a2d      	ldr	r2, [pc, #180]	; (80016a4 <main+0x180>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	2001      	movs	r0, #1
 80015f2:	f008 fe4e 	bl	800a292 <osSemaphoreNew>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a20      	ldr	r2, [pc, #128]	; (800167c <main+0x158>)
 80015fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015fc:	4a2a      	ldr	r2, [pc, #168]	; (80016a8 <main+0x184>)
 80015fe:	2100      	movs	r1, #0
 8001600:	482a      	ldr	r0, [pc, #168]	; (80016ac <main+0x188>)
 8001602:	f008 fd99 	bl	800a138 <osThreadNew>
 8001606:	4603      	mov	r3, r0
 8001608:	4a29      	ldr	r2, [pc, #164]	; (80016b0 <main+0x18c>)
 800160a:	6013      	str	r3, [r2, #0]

  /* creation of motorServo */
  motorServoHandle = osThreadNew(StartMotorServo, NULL, &motorServo_attributes);
 800160c:	4a29      	ldr	r2, [pc, #164]	; (80016b4 <main+0x190>)
 800160e:	2100      	movs	r1, #0
 8001610:	4829      	ldr	r0, [pc, #164]	; (80016b8 <main+0x194>)
 8001612:	f008 fd91 	bl	800a138 <osThreadNew>
 8001616:	4603      	mov	r3, r0
 8001618:	4a28      	ldr	r2, [pc, #160]	; (80016bc <main+0x198>)
 800161a:	6013      	str	r3, [r2, #0]

  /* creation of imu */
  imuHandle = osThreadNew(StartIMU, NULL, &imu_attributes);
 800161c:	4a28      	ldr	r2, [pc, #160]	; (80016c0 <main+0x19c>)
 800161e:	2100      	movs	r1, #0
 8001620:	4828      	ldr	r0, [pc, #160]	; (80016c4 <main+0x1a0>)
 8001622:	f008 fd89 	bl	800a138 <osThreadNew>
 8001626:	4603      	mov	r3, r0
 8001628:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <main+0x1a4>)
 800162a:	6013      	str	r3, [r2, #0]

  /* creation of uart */
  uartHandle = osThreadNew(StartUART, NULL, &uart_attributes);
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <main+0x1a8>)
 800162e:	2100      	movs	r1, #0
 8001630:	4827      	ldr	r0, [pc, #156]	; (80016d0 <main+0x1ac>)
 8001632:	f008 fd81 	bl	800a138 <osThreadNew>
 8001636:	4603      	mov	r3, r0
 8001638:	4a26      	ldr	r2, [pc, #152]	; (80016d4 <main+0x1b0>)
 800163a:	6013      	str	r3, [r2, #0]

  /* creation of ultrasound */
  ultrasoundHandle = osThreadNew(StartUS, NULL, &ultrasound_attributes);
 800163c:	4a26      	ldr	r2, [pc, #152]	; (80016d8 <main+0x1b4>)
 800163e:	2100      	movs	r1, #0
 8001640:	4826      	ldr	r0, [pc, #152]	; (80016dc <main+0x1b8>)
 8001642:	f008 fd79 	bl	800a138 <osThreadNew>
 8001646:	4603      	mov	r3, r0
 8001648:	4a25      	ldr	r2, [pc, #148]	; (80016e0 <main+0x1bc>)
 800164a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800164c:	f008 fd4e 	bl	800a0ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001650:	e7fe      	b.n	8001650 <main+0x12c>
 8001652:	bf00      	nop
 8001654:	200002cc 	.word	0x200002cc
 8001658:	0800fc30 	.word	0x0800fc30
 800165c:	20000540 	.word	0x20000540
 8001660:	200003f8 	.word	0x200003f8
 8001664:	20000320 	.word	0x20000320
 8001668:	2000057c 	.word	0x2000057c
 800166c:	20000578 	.word	0x20000578
 8001670:	200004cc 	.word	0x200004cc
 8001674:	40021000 	.word	0x40021000
 8001678:	20000554 	.word	0x20000554
 800167c:	20000524 	.word	0x20000524
 8001680:	20000528 	.word	0x20000528
 8001684:	200005d4 	.word	0x200005d4
 8001688:	200005b4 	.word	0x200005b4
 800168c:	20000594 	.word	0x20000594
 8001690:	2000058c 	.word	0x2000058c
 8001694:	20000584 	.word	0x20000584
 8001698:	200003b0 	.word	0x200003b0
 800169c:	20000368 	.word	0x20000368
 80016a0:	20000440 	.word	0x20000440
 80016a4:	0800fd30 	.word	0x0800fd30
 80016a8:	0800fc7c 	.word	0x0800fc7c
 80016ac:	0800239d 	.word	0x0800239d
 80016b0:	20000510 	.word	0x20000510
 80016b4:	0800fca0 	.word	0x0800fca0
 80016b8:	080023b1 	.word	0x080023b1
 80016bc:	20000514 	.word	0x20000514
 80016c0:	0800fcc4 	.word	0x0800fcc4
 80016c4:	08002fc1 	.word	0x08002fc1
 80016c8:	20000518 	.word	0x20000518
 80016cc:	0800fce8 	.word	0x0800fce8
 80016d0:	08002ff1 	.word	0x08002ff1
 80016d4:	2000051c 	.word	0x2000051c
 80016d8:	0800fd0c 	.word	0x0800fd0c
 80016dc:	08003005 	.word	0x08003005
 80016e0:	20000520 	.word	0x20000520

080016e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b094      	sub	sp, #80	; 0x50
 80016e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 0320 	add.w	r3, r7, #32
 80016ee:	2230      	movs	r2, #48	; 0x30
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00c f8ea 	bl	800d8cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <SystemClock_Config+0xb4>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	4a21      	ldr	r2, [pc, #132]	; (8001798 <SystemClock_Config+0xb4>)
 8001712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001716:	6413      	str	r3, [r2, #64]	; 0x40
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <SystemClock_Config+0xb4>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <SystemClock_Config+0xb8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <SystemClock_Config+0xb8>)
 800172e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <SystemClock_Config+0xb8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001740:	2302      	movs	r3, #2
 8001742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001744:	2301      	movs	r3, #1
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001748:	2310      	movs	r3, #16
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800174c:	2300      	movs	r3, #0
 800174e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	4618      	mov	r0, r3
 8001756:	f005 fa3b 	bl	8006bd0 <HAL_RCC_OscConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001760:	f001 fc70 	bl	8003044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001764:	230f      	movs	r3, #15
 8001766:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f005 fc9e 	bl	80070c0 <HAL_RCC_ClockConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800178a:	f001 fc5b 	bl	8003044 <Error_Handler>
  }
}
 800178e:	bf00      	nop
 8001790:	3750      	adds	r7, #80	; 0x50
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40007000 	.word	0x40007000

080017a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017a6:	463b      	mov	r3, r7
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <MX_ADC1_Init+0x98>)
 80017b4:	4a21      	ldr	r2, [pc, #132]	; (800183c <MX_ADC1_Init+0x9c>)
 80017b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <MX_ADC1_Init+0x98>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017be:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <MX_ADC1_Init+0x98>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <MX_ADC1_Init+0x98>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <MX_ADC1_Init+0x98>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <MX_ADC1_Init+0x98>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <MX_ADC1_Init+0x98>)
 80017da:	2200      	movs	r2, #0
 80017dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <MX_ADC1_Init+0x98>)
 80017e0:	4a17      	ldr	r2, [pc, #92]	; (8001840 <MX_ADC1_Init+0xa0>)
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <MX_ADC1_Init+0x98>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <MX_ADC1_Init+0x98>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_ADC1_Init+0x98>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <MX_ADC1_Init+0x98>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017fe:	480e      	ldr	r0, [pc, #56]	; (8001838 <MX_ADC1_Init+0x98>)
 8001800:	f003 face 	bl	8004da0 <HAL_ADC_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800180a:	f001 fc1b 	bl	8003044 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800180e:	230b      	movs	r3, #11
 8001810:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001812:	2301      	movs	r3, #1
 8001814:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800181a:	463b      	mov	r3, r7
 800181c:	4619      	mov	r1, r3
 800181e:	4806      	ldr	r0, [pc, #24]	; (8001838 <MX_ADC1_Init+0x98>)
 8001820:	f003 fca0 	bl	8005164 <HAL_ADC_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800182a:	f001 fc0b 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000023c 	.word	0x2000023c
 800183c:	40012000 	.word	0x40012000
 8001840:	0f000001 	.word	0x0f000001

08001844 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800184a:	463b      	mov	r3, r7
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <MX_ADC2_Init+0x98>)
 8001858:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <MX_ADC2_Init+0x9c>)
 800185a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <MX_ADC2_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <MX_ADC2_Init+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <MX_ADC2_Init+0x98>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MX_ADC2_Init+0x98>)
 8001870:	2201      	movs	r2, #1
 8001872:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <MX_ADC2_Init+0x98>)
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <MX_ADC2_Init+0x98>)
 800187e:	2200      	movs	r2, #0
 8001880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <MX_ADC2_Init+0x98>)
 8001884:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <MX_ADC2_Init+0xa0>)
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <MX_ADC2_Init+0x98>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <MX_ADC2_Init+0x98>)
 8001890:	2201      	movs	r2, #1
 8001892:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_ADC2_Init+0x98>)
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_ADC2_Init+0x98>)
 800189e:	2201      	movs	r2, #1
 80018a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018a2:	480e      	ldr	r0, [pc, #56]	; (80018dc <MX_ADC2_Init+0x98>)
 80018a4:	f003 fa7c 	bl	8004da0 <HAL_ADC_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80018ae:	f001 fbc9 	bl	8003044 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80018b2:	230c      	movs	r3, #12
 80018b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018b6:	2301      	movs	r3, #1
 80018b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018be:	463b      	mov	r3, r7
 80018c0:	4619      	mov	r1, r3
 80018c2:	4806      	ldr	r0, [pc, #24]	; (80018dc <MX_ADC2_Init+0x98>)
 80018c4:	f003 fc4e 	bl	8005164 <HAL_ADC_ConfigChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80018ce:	f001 fbb9 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000284 	.word	0x20000284
 80018e0:	40012100 	.word	0x40012100
 80018e4:	0f000001 	.word	0x0f000001

080018e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <MX_I2C1_Init+0x50>)
 80018ee:	4a13      	ldr	r2, [pc, #76]	; (800193c <MX_I2C1_Init+0x54>)
 80018f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_I2C1_Init+0x50>)
 80018f4:	4a12      	ldr	r2, [pc, #72]	; (8001940 <MX_I2C1_Init+0x58>)
 80018f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_I2C1_Init+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_I2C1_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_I2C1_Init+0x50>)
 8001906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800190a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <MX_I2C1_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_I2C1_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <MX_I2C1_Init+0x50>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_I2C1_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <MX_I2C1_Init+0x50>)
 8001926:	f004 f995 	bl	8005c54 <HAL_I2C_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001930:	f001 fb88 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200002cc 	.word	0x200002cc
 800193c:	40005400 	.word	0x40005400
 8001940:	000186a0 	.word	0x000186a0

08001944 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b09a      	sub	sp, #104	; 0x68
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001962:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	615a      	str	r2, [r3, #20]
 8001982:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2220      	movs	r2, #32
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f00b ff9e 	bl	800d8cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 8001992:	4a4c      	ldr	r2, [pc, #304]	; (8001ac4 <MX_TIM1_Init+0x180>)
 8001994:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001996:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 8001998:	220f      	movs	r2, #15
 800199a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199c:	4b48      	ldr	r3, [pc, #288]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80019a2:	4b47      	ldr	r3, [pc, #284]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 80019a4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019aa:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019b0:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019b6:	4b42      	ldr	r3, [pc, #264]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019bc:	4840      	ldr	r0, [pc, #256]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 80019be:	f005 fd5f 	bl	8007480 <HAL_TIM_Base_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80019c8:	f001 fb3c 	bl	8003044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019d6:	4619      	mov	r1, r3
 80019d8:	4839      	ldr	r0, [pc, #228]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 80019da:	f006 fc67 	bl	80082ac <HAL_TIM_ConfigClockSource>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80019e4:	f001 fb2e 	bl	8003044 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80019e8:	4835      	ldr	r0, [pc, #212]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 80019ea:	f005 ff23 	bl	8007834 <HAL_TIM_IC_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80019f4:	f001 fb26 	bl	8003044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019f8:	4831      	ldr	r0, [pc, #196]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 80019fa:	f005 fdf9 	bl	80075f0 <HAL_TIM_PWM_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a04:	f001 fb1e 	bl	8003044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a14:	4619      	mov	r1, r3
 8001a16:	482a      	ldr	r0, [pc, #168]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 8001a18:	f007 f9b6 	bl	8008d88 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8001a22:	f001 fb0f 	bl	8003044 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001a26:	230a      	movs	r3, #10
 8001a28:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4820      	ldr	r0, [pc, #128]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 8001a40:	f006 fad6 	bl	8007ff0 <HAL_TIM_IC_ConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001a4a:	f001 fafb 	bl	8003044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4e:	2360      	movs	r3, #96	; 0x60
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4814      	ldr	r0, [pc, #80]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 8001a70:	f006 fb5a 	bl	8008128 <HAL_TIM_PWM_ConfigChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001a7a:	f001 fae3 	bl	8003044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 8001aa2:	f007 f9ed 	bl	8008e80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001aac:	f001 faca 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ab0:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <MX_TIM1_Init+0x17c>)
 8001ab2:	f002 febd 	bl	8004830 <HAL_TIM_MspPostInit>

}
 8001ab6:	bf00      	nop
 8001ab8:	3768      	adds	r7, #104	; 0x68
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000320 	.word	0x20000320
 8001ac4:	40010000 	.word	0x40010000

08001ac8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	2224      	movs	r2, #36	; 0x24
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f00b fef8 	bl	800d8cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <MX_TIM2_Init+0xa4>)
 8001ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <MX_TIM2_Init+0xa4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <MX_TIM2_Init+0xa4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <MX_TIM2_Init+0xa4>)
 8001afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <MX_TIM2_Init+0xa4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <MX_TIM2_Init+0xa4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b10:	2302      	movs	r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b14:	2301      	movs	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b1c:	230a      	movs	r3, #10
 8001b1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001b20:	2302      	movs	r3, #2
 8001b22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b24:	2301      	movs	r3, #1
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001b2c:	230a      	movs	r3, #10
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	4619      	mov	r1, r3
 8001b36:	480d      	ldr	r0, [pc, #52]	; (8001b6c <MX_TIM2_Init+0xa4>)
 8001b38:	f005 fffe 	bl	8007b38 <HAL_TIM_Encoder_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b42:	f001 fa7f 	bl	8003044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <MX_TIM2_Init+0xa4>)
 8001b54:	f007 f918 	bl	8008d88 <HAL_TIMEx_MasterConfigSynchronization>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b5e:	f001 fa71 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	3730      	adds	r7, #48	; 0x30
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000368 	.word	0x20000368

08001b70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08c      	sub	sp, #48	; 0x30
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	2224      	movs	r2, #36	; 0x24
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00b fea4 	bl	800d8cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b8c:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <MX_TIM3_Init+0xa0>)
 8001b8e:	4a21      	ldr	r2, [pc, #132]	; (8001c14 <MX_TIM3_Init+0xa4>)
 8001b90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b92:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <MX_TIM3_Init+0xa0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <MX_TIM3_Init+0xa0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <MX_TIM3_Init+0xa0>)
 8001ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_TIM3_Init+0xa0>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <MX_TIM3_Init+0xa0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001bc2:	230a      	movs	r3, #10
 8001bc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001bd2:	230a      	movs	r3, #10
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	4619      	mov	r1, r3
 8001bdc:	480c      	ldr	r0, [pc, #48]	; (8001c10 <MX_TIM3_Init+0xa0>)
 8001bde:	f005 ffab 	bl	8007b38 <HAL_TIM_Encoder_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001be8:	f001 fa2c 	bl	8003044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_TIM3_Init+0xa0>)
 8001bfa:	f007 f8c5 	bl	8008d88 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c04:	f001 fa1e 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	3730      	adds	r7, #48	; 0x30
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200003b0 	.word	0x200003b0
 8001c14:	40000400 	.word	0x40000400

08001c18 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1e:	463b      	mov	r3, r7
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_TIM6_Init+0x64>)
 8001c28:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <MX_TIM6_Init+0x68>)
 8001c2a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <MX_TIM6_Init+0x64>)
 8001c2e:	220f      	movs	r2, #15
 8001c30:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_TIM6_Init+0x64>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <MX_TIM6_Init+0x64>)
 8001c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_TIM6_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c46:	480d      	ldr	r0, [pc, #52]	; (8001c7c <MX_TIM6_Init+0x64>)
 8001c48:	f005 fc1a 	bl	8007480 <HAL_TIM_Base_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001c52:	f001 f9f7 	bl	8003044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c5e:	463b      	mov	r3, r7
 8001c60:	4619      	mov	r1, r3
 8001c62:	4806      	ldr	r0, [pc, #24]	; (8001c7c <MX_TIM6_Init+0x64>)
 8001c64:	f007 f890 	bl	8008d88 <HAL_TIMEx_MasterConfigSynchronization>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c6e:	f001 f9e9 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200003f8 	.word	0x200003f8
 8001c80:	40001000 	.word	0x40001000

08001c84 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b096      	sub	sp, #88	; 0x58
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	611a      	str	r2, [r3, #16]
 8001cb2:	615a      	str	r2, [r3, #20]
 8001cb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2220      	movs	r2, #32
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f00b fe05 	bl	800d8cc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <MX_TIM8_Init+0x14c>)
 8001cc4:	4a43      	ldr	r2, [pc, #268]	; (8001dd4 <MX_TIM8_Init+0x150>)
 8001cc6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001cc8:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <MX_TIM8_Init+0x14c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cce:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <MX_TIM8_Init+0x14c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001cd4:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <MX_TIM8_Init+0x14c>)
 8001cd6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001cda:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cdc:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <MX_TIM8_Init+0x14c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <MX_TIM8_Init+0x14c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce8:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <MX_TIM8_Init+0x14c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001cee:	4838      	ldr	r0, [pc, #224]	; (8001dd0 <MX_TIM8_Init+0x14c>)
 8001cf0:	f005 fbc6 	bl	8007480 <HAL_TIM_Base_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001cfa:	f001 f9a3 	bl	8003044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d02:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4831      	ldr	r0, [pc, #196]	; (8001dd0 <MX_TIM8_Init+0x14c>)
 8001d0c:	f006 face 	bl	80082ac <HAL_TIM_ConfigClockSource>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001d16:	f001 f995 	bl	8003044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d1a:	482d      	ldr	r0, [pc, #180]	; (8001dd0 <MX_TIM8_Init+0x14c>)
 8001d1c:	f005 fc68 	bl	80075f0 <HAL_TIM_PWM_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001d26:	f001 f98d 	bl	8003044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d36:	4619      	mov	r1, r3
 8001d38:	4825      	ldr	r0, [pc, #148]	; (8001dd0 <MX_TIM8_Init+0x14c>)
 8001d3a:	f007 f825 	bl	8008d88 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001d44:	f001 f97e 	bl	8003044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d48:	2360      	movs	r3, #96	; 0x60
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d54:	2300      	movs	r3, #0
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d60:	2300      	movs	r3, #0
 8001d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d68:	2200      	movs	r2, #0
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <MX_TIM8_Init+0x14c>)
 8001d6e:	f006 f9db 	bl	8008128 <HAL_TIM_PWM_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001d78:	f001 f964 	bl	8003044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d80:	2204      	movs	r2, #4
 8001d82:	4619      	mov	r1, r3
 8001d84:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <MX_TIM8_Init+0x14c>)
 8001d86:	f006 f9cf 	bl	8008128 <HAL_TIM_PWM_ConfigChannel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001d90:	f001 f958 	bl	8003044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001da8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <MX_TIM8_Init+0x14c>)
 8001db8:	f007 f862 	bl	8008e80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001dc2:	f001 f93f 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	3758      	adds	r7, #88	; 0x58
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000440 	.word	0x20000440
 8001dd4:	40010400 	.word	0x40010400

08001dd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <MX_USART1_UART_Init+0x50>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001e10:	f007 f89c 	bl	8008f4c <HAL_UART_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e1a:	f001 f913 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000488 	.word	0x20000488
 8001e28:	40011000 	.word	0x40011000

08001e2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <MX_USART3_UART_Init+0x50>)
 8001e34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e52:	220c      	movs	r2, #12
 8001e54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e64:	f007 f872 	bl	8008f4c <HAL_UART_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e6e:	f001 f8e9 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200004cc 	.word	0x200004cc
 8001e7c:	40004800 	.word	0x40004800

08001e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <MX_GPIO_Init+0x104>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a39      	ldr	r2, [pc, #228]	; (8001f84 <MX_GPIO_Init+0x104>)
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <MX_GPIO_Init+0x104>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <MX_GPIO_Init+0x104>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a32      	ldr	r2, [pc, #200]	; (8001f84 <MX_GPIO_Init+0x104>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <MX_GPIO_Init+0x104>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <MX_GPIO_Init+0x104>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <MX_GPIO_Init+0x104>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <MX_GPIO_Init+0x104>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <MX_GPIO_Init+0x104>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a24      	ldr	r2, [pc, #144]	; (8001f84 <MX_GPIO_Init+0x104>)
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <MX_GPIO_Init+0x104>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001f06:	2200      	movs	r2, #0
 8001f08:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001f0c:	481e      	ldr	r0, [pc, #120]	; (8001f88 <MX_GPIO_Init+0x108>)
 8001f0e:	f003 fe87 	bl	8005c20 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001f12:	2200      	movs	r2, #0
 8001f14:	213c      	movs	r1, #60	; 0x3c
 8001f16:	481d      	ldr	r0, [pc, #116]	; (8001f8c <MX_GPIO_Init+0x10c>)
 8001f18:	f003 fe82 	bl	8005c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2110      	movs	r1, #16
 8001f20:	481b      	ldr	r0, [pc, #108]	; (8001f90 <MX_GPIO_Init+0x110>)
 8001f22:	f003 fe7d 	bl	8005c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 PE7 PE8
                           LED3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001f26:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001f2a:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4812      	ldr	r0, [pc, #72]	; (8001f88 <MX_GPIO_Init+0x108>)
 8001f40:	f003 fcd2 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001f44:	233c      	movs	r3, #60	; 0x3c
 8001f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f50:	2302      	movs	r3, #2
 8001f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480c      	ldr	r0, [pc, #48]	; (8001f8c <MX_GPIO_Init+0x10c>)
 8001f5c:	f003 fcc4 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 8001f60:	2310      	movs	r3, #16
 8001f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f64:	2301      	movs	r3, #1
 8001f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	4806      	ldr	r0, [pc, #24]	; (8001f90 <MX_GPIO_Init+0x110>)
 8001f78:	f003 fcb6 	bl	80058e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f7c:	bf00      	nop
 8001f7e:	3728      	adds	r7, #40	; 0x28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020400 	.word	0x40020400
 8001f94:	00000000 	.word	0x00000000

08001f98 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {		// Ultrasound Echo
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a89      	ldr	r2, [pc, #548]	; (80021c8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	f040 80f0 	bne.w	800218a <HAL_TIM_IC_CaptureCallback+0x1f2>
		if (echo_upEdge > 20000) {
 8001faa:	4b88      	ldr	r3, [pc, #544]	; (80021cc <HAL_TIM_IC_CaptureCallback+0x234>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d908      	bls.n	8001fc8 <HAL_TIM_IC_CaptureCallback+0x30>
			echo_upEdge = (uint16_t)HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f006 fa3f 	bl	800843c <HAL_TIM_ReadCapturedValue>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	4b82      	ldr	r3, [pc, #520]	; (80021cc <HAL_TIM_IC_CaptureCallback+0x234>)
 8001fc4:	801a      	strh	r2, [r3, #0]
 8001fc6:	e0e0      	b.n	800218a <HAL_TIM_IC_CaptureCallback+0x1f2>
		}
		else {
			echo_downEdge = (uint16_t)HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f006 fa36 	bl	800843c <HAL_TIM_ReadCapturedValue>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b7e      	ldr	r3, [pc, #504]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001fd6:	801a      	strh	r2, [r3, #0]
			if (echo_upEdge > echo_downEdge) {
 8001fd8:	4b7c      	ldr	r3, [pc, #496]	; (80021cc <HAL_TIM_IC_CaptureCallback+0x234>)
 8001fda:	881a      	ldrh	r2, [r3, #0]
 8001fdc:	4b7c      	ldr	r3, [pc, #496]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d90c      	bls.n	8001ffe <HAL_TIM_IC_CaptureCallback+0x66>
				echo = (echo_downEdge + 20000) - echo_upEdge;
 8001fe4:	4b7a      	ldr	r3, [pc, #488]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001fe6:	881a      	ldrh	r2, [r3, #0]
 8001fe8:	4b78      	ldr	r3, [pc, #480]	; (80021cc <HAL_TIM_IC_CaptureCallback+0x234>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8001ff4:	3320      	adds	r3, #32
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001ffa:	801a      	strh	r2, [r3, #0]
 8001ffc:	e007      	b.n	800200e <HAL_TIM_IC_CaptureCallback+0x76>
			}
			else {
				echo = echo_downEdge - echo_upEdge;
 8001ffe:	4b74      	ldr	r3, [pc, #464]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8002000:	881a      	ldrh	r2, [r3, #0]
 8002002:	4b72      	ldr	r3, [pc, #456]	; (80021cc <HAL_TIM_IC_CaptureCallback+0x234>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b72      	ldr	r3, [pc, #456]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800200c:	801a      	strh	r2, [r3, #0]
			}
			echo_upEdge = 65535;
 800200e:	4b6f      	ldr	r3, [pc, #444]	; (80021cc <HAL_TIM_IC_CaptureCallback+0x234>)
 8002010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002014:	801a      	strh	r2, [r3, #0]
			echo_downEdge = 65535;
 8002016:	4b6e      	ldr	r3, [pc, #440]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8002018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201c:	801a      	strh	r2, [r3, #0]
			sprintf(oledbuf, "Dist: %5.1f", echo * 0.01715f);
			OLED_ShowString(10, 15, &oledbuf[0]);
			OLED_Refresh_Gram();*/

			// Calculate distance
			if (reqDist > 0) {
 800201e:	4b6e      	ldr	r3, [pc, #440]	; (80021d8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f340 8089 	ble.w	800213a <HAL_TIM_IC_CaptureCallback+0x1a2>
				if (((abs(lastEcho1 - echo) > 300) || (abs(lastEcho2 - echo) > 300)) || (abs(lastEcho1 - lastEcho2) > 300)) {	// System not stabilised yet, wait
 8002028:	4b6c      	ldr	r3, [pc, #432]	; (80021dc <HAL_TIM_IC_CaptureCallback+0x244>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b69      	ldr	r3, [pc, #420]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	bfb8      	it	lt
 8002038:	425b      	neglt	r3, r3
 800203a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800203e:	dc17      	bgt.n	8002070 <HAL_TIM_IC_CaptureCallback+0xd8>
 8002040:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	bfb8      	it	lt
 8002050:	425b      	neglt	r3, r3
 8002052:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002056:	dc0b      	bgt.n	8002070 <HAL_TIM_IC_CaptureCallback+0xd8>
 8002058:	4b60      	ldr	r3, [pc, #384]	; (80021dc <HAL_TIM_IC_CaptureCallback+0x244>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	4b60      	ldr	r3, [pc, #384]	; (80021e0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	bfb8      	it	lt
 8002068:	425b      	neglt	r3, r3
 800206a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800206e:	dd08      	ble.n	8002082 <HAL_TIM_IC_CaptureCallback+0xea>
					lastEcho2 = lastEcho1;
 8002070:	4b5a      	ldr	r3, [pc, #360]	; (80021dc <HAL_TIM_IC_CaptureCallback+0x244>)
 8002072:	881a      	ldrh	r2, [r3, #0]
 8002074:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8002076:	801a      	strh	r2, [r3, #0]
					lastEcho1 = echo;
 8002078:	4b56      	ldr	r3, [pc, #344]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800207a:	881a      	ldrh	r2, [r3, #0]
 800207c:	4b57      	ldr	r3, [pc, #348]	; (80021dc <HAL_TIM_IC_CaptureCallback+0x244>)
 800207e:	801a      	strh	r2, [r3, #0]
					return;
 8002080:	e09a      	b.n	80021b8 <HAL_TIM_IC_CaptureCallback+0x220>
				}
				if (us_alert < 5) {
 8002082:	4b58      	ldr	r3, [pc, #352]	; (80021e4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b04      	cmp	r3, #4
 8002088:	d830      	bhi.n	80020ec <HAL_TIM_IC_CaptureCallback+0x154>
					if (distToObstacle > 9999) {
 800208a:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800208c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002090:	a34b      	add	r3, pc, #300	; (adr r3, 80021c0 <HAL_TIM_IC_CaptureCallback+0x228>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe fd3f 	bl	8000b18 <__aeabi_dcmpgt>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_TIM_IC_CaptureCallback+0x116>
						distToObstacle = 0;
 80020a0:	4951      	ldr	r1, [pc, #324]	; (80021e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	e9c1 2300 	strd	r2, r3, [r1]
					}
					distToObstacle += echo * 0.01715f;
 80020ae:	4b49      	ldr	r3, [pc, #292]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	ee07 3a90 	vmov	s15, r3
 80020b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ba:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80021ec <HAL_TIM_IC_CaptureCallback+0x254>
 80020be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020c2:	ee17 0a90 	vmov	r0, s15
 80020c6:	f7fe fa3f 	bl	8000548 <__aeabi_f2d>
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80020cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d0:	f7fe f8dc 	bl	800028c <__adddf3>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4943      	ldr	r1, [pc, #268]	; (80021e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80020da:	e9c1 2300 	strd	r2, r3, [r1]
					us_alert++;
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	3301      	adds	r3, #1
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e04e      	b.n	800218a <HAL_TIM_IC_CaptureCallback+0x1f2>
				}
				else {
					distToObstacle /= 5;
 80020ec:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80020ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <HAL_TIM_IC_CaptureCallback+0x258>)
 80020f8:	f7fe fba8 	bl	800084c <__aeabi_ddiv>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4939      	ldr	r1, [pc, #228]	; (80021e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8002102:	e9c1 2300 	strd	r2, r3, [r1]
					us_alert = 0;
 8002106:	4b37      	ldr	r3, [pc, #220]	; (80021e4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
					if (distToObstacle < distToObstacle_min) {
 800210c:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800210e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002112:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	f7fe fce0 	bl	8000adc <__aeabi_dcmplt>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <HAL_TIM_IC_CaptureCallback+0x194>
						reqDist = -1;
 8002122:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8002124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e002      	b.n	8002132 <HAL_TIM_IC_CaptureCallback+0x19a>
					}
					else {
						reqDist = 0;
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_TIM_IC_CaptureCallback+0x240>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
					}
					distReady = 1;
 8002132:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002134:	2201      	movs	r2, #1
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	e027      	b.n	800218a <HAL_TIM_IC_CaptureCallback+0x1f2>
				}
			}
			else if (reqDist == 0) {
 800213a:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <HAL_TIM_IC_CaptureCallback+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d123      	bne.n	800218a <HAL_TIM_IC_CaptureCallback+0x1f2>
				if (!cpltErr.finished) {	// Car is running, needs passive measurement
 8002142:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <HAL_TIM_IC_CaptureCallback+0x264>)
 8002144:	799b      	ldrb	r3, [r3, #6]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d11f      	bne.n	800218a <HAL_TIM_IC_CaptureCallback+0x1f2>
					if (echo * 0.01715f <= distToObstacle_min) {
 800214a:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002156:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80021ec <HAL_TIM_IC_CaptureCallback+0x254>
 800215a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800215e:	ee17 0a90 	vmov	r0, s15
 8002162:	f7fe f9f1 	bl	8000548 <__aeabi_f2d>
 8002166:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216c:	f7fe fcc0 	bl	8000af0 <__aeabi_dcmple>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <HAL_TIM_IC_CaptureCallback+0x1f2>
						stopPID();
 8002176:	f001 fb79 	bl	800386c <stopPID>
						mtrA.suspend = SUS_STOP;
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <HAL_TIM_IC_CaptureCallback+0x268>)
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
						mtrB.suspend = SUS_STOP;
 8002180:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
						// Activate active measurement to confirm
						usEnableActiveMeasure();
 8002186:	f000 f8a3 	bl	80022d0 <usEnableActiveMeasure>
					}
				}
			}
		}
	}
	if (htim == &htim2) {		// Motor A's interrupt
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <HAL_TIM_IC_CaptureCallback+0x270>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d108      	bne.n	80021a4 <HAL_TIM_IC_CaptureCallback+0x20c>
		mtrAPID.count = -(int16_t)__HAL_TIM_GET_COUNTER(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	b29b      	uxth	r3, r3
 800219a:	425b      	negs	r3, r3
 800219c:	b29b      	uxth	r3, r3
 800219e:	b21a      	sxth	r2, r3
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_TIM_IC_CaptureCallback+0x274>)
 80021a2:	801a      	strh	r2, [r3, #0]
	}
	if (htim == &htim3) {		// Motor B's interrupt
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a1a      	ldr	r2, [pc, #104]	; (8002210 <HAL_TIM_IC_CaptureCallback+0x278>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d105      	bne.n	80021b8 <HAL_TIM_IC_CaptureCallback+0x220>
		mtrBPID.count = (int16_t)__HAL_TIM_GET_COUNTER(htim);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	b21a      	sxth	r2, r3
 80021b4:	4b17      	ldr	r3, [pc, #92]	; (8002214 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80021b6:	801a      	strh	r2, [r3, #0]
	}
}
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	00000000 	.word	0x00000000
 80021c4:	40c38780 	.word	0x40c38780
 80021c8:	20000320 	.word	0x20000320
 80021cc:	20000004 	.word	0x20000004
 80021d0:	20000006 	.word	0x20000006
 80021d4:	20000568 	.word	0x20000568
 80021d8:	20000570 	.word	0x20000570
 80021dc:	2000056a 	.word	0x2000056a
 80021e0:	2000056c 	.word	0x2000056c
 80021e4:	2000056e 	.word	0x2000056e
 80021e8:	20000008 	.word	0x20000008
 80021ec:	3c8c7e28 	.word	0x3c8c7e28
 80021f0:	40140000 	.word	0x40140000
 80021f4:	20000018 	.word	0x20000018
 80021f8:	20000574 	.word	0x20000574
 80021fc:	2000057c 	.word	0x2000057c
 8002200:	20000584 	.word	0x20000584
 8002204:	2000058c 	.word	0x2000058c
 8002208:	20000368 	.word	0x20000368
 800220c:	20000594 	.word	0x20000594
 8002210:	200003b0 	.word	0x200003b0
 8002214:	200005b4 	.word	0x200005b4

08002218 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af02      	add	r7, sp, #8
 800221e:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	//MX_USART3_UART_Init();
	turnDir = uart_receive_cam((uint8_t*) buf);
 8002220:	481b      	ldr	r0, [pc, #108]	; (8002290 <HAL_UART_RxCpltCallback+0x78>)
 8002222:	f7fe feaf 	bl	8000f84 <uart_receive_cam>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_UART_RxCpltCallback+0x7c>)
 800222c:	701a      	strb	r2, [r3, #0]
	OLED_Clear();
 800222e:	f001 fe7f 	bl	8003f30 <OLED_Clear>
	sprintf(oledbuf, "%2x %2x %2x %2x", buf[0], buf[1], buf[2], buf[3]);
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <HAL_UART_RxCpltCallback+0x78>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_UART_RxCpltCallback+0x78>)
 800223a:	785b      	ldrb	r3, [r3, #1]
 800223c:	4618      	mov	r0, r3
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <HAL_UART_RxCpltCallback+0x78>)
 8002240:	789b      	ldrb	r3, [r3, #2]
 8002242:	461a      	mov	r2, r3
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_UART_RxCpltCallback+0x78>)
 8002246:	78db      	ldrb	r3, [r3, #3]
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	9200      	str	r2, [sp, #0]
 800224c:	4603      	mov	r3, r0
 800224e:	460a      	mov	r2, r1
 8002250:	4911      	ldr	r1, [pc, #68]	; (8002298 <HAL_UART_RxCpltCallback+0x80>)
 8002252:	4812      	ldr	r0, [pc, #72]	; (800229c <HAL_UART_RxCpltCallback+0x84>)
 8002254:	f00b fa58 	bl	800d708 <siprintf>
	OLED_ShowString(10, 15, &oledbuf[0]);
 8002258:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_UART_RxCpltCallback+0x84>)
 800225a:	210f      	movs	r1, #15
 800225c:	200a      	movs	r0, #10
 800225e:	f001 ff59 	bl	8004114 <OLED_ShowString>
	OLED_Refresh_Gram();
 8002262:	f001 fde3 	bl	8003e2c <OLED_Refresh_Gram>
	//huart->RxState = HAL_UART_STATE_READY;
	buf[0] = 0;
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_UART_RxCpltCallback+0x78>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
	buf[1] = 0;
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_UART_RxCpltCallback+0x78>)
 800226e:	2200      	movs	r2, #0
 8002270:	705a      	strb	r2, [r3, #1]
	buf[2] = 0;
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <HAL_UART_RxCpltCallback+0x78>)
 8002274:	2200      	movs	r2, #0
 8002276:	709a      	strb	r2, [r3, #2]
	buf[3] = 0;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_UART_RxCpltCallback+0x78>)
 800227a:	2200      	movs	r2, #0
 800227c:	70da      	strb	r2, [r3, #3]

	HAL_UART_Receive_IT(huart, (uint8_t*) buf, UART_PACKET_SIZE);
 800227e:	2204      	movs	r2, #4
 8002280:	4903      	ldr	r1, [pc, #12]	; (8002290 <HAL_UART_RxCpltCallback+0x78>)
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f006 ff41 	bl	800910a <HAL_UART_Receive_IT>
		sprintf(oledbuf, "Fin: %d", cpltErr.finished);
		OLED_ShowString(10, 45, &oledbuf[0]);
		OLED_Refresh_Gram();
	}
	*/
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000554 	.word	0x20000554
 8002294:	20000010 	.word	0x20000010
 8002298:	0800fc3c 	.word	0x0800fc3c
 800229c:	20000540 	.word	0x20000540

080022a0 <Delay_us>:

void Delay_us(uint16_t us) {
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <Delay_us+0x2c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2200      	movs	r2, #0
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < us);
 80022b2:	bf00      	nop
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <Delay_us+0x2c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d3f9      	bcc.n	80022b4 <Delay_us+0x14>
	return;
 80022c0:	bf00      	nop
}
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	200003f8 	.word	0x200003f8

080022d0 <usEnableActiveMeasure>:

void usEnableActiveMeasure() {
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
	distReady = 0;
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <usEnableActiveMeasure+0x30>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
	distToObstacle = 10000;
 80022da:	490a      	ldr	r1, [pc, #40]	; (8002304 <usEnableActiveMeasure+0x34>)
 80022dc:	a306      	add	r3, pc, #24	; (adr r3, 80022f8 <usEnableActiveMeasure+0x28>)
 80022de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e2:	e9c1 2300 	strd	r2, r3, [r1]
	reqDist = 1;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <usEnableActiveMeasure+0x38>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	00000000 	.word	0x00000000
 80022fc:	40c38800 	.word	0x40c38800
 8002300:	20000574 	.word	0x20000574
 8002304:	20000008 	.word	0x20000008
 8002308:	20000570 	.word	0x20000570

0800230c <getIRReading>:

int getIRReading(uint8_t ir) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
	int retval;
	for (int i = 0; i < 5; i++) {
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	e02b      	b.n	8002374 <getIRReading+0x68>
		if (ir == LEFT) {
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d111      	bne.n	8002346 <getIRReading+0x3a>
			HAL_ADC_Start(&hadc2);
 8002322:	481b      	ldr	r0, [pc, #108]	; (8002390 <getIRReading+0x84>)
 8002324:	f002 fd80 	bl	8004e28 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc2, 10);
 8002328:	210a      	movs	r1, #10
 800232a:	4819      	ldr	r0, [pc, #100]	; (8002390 <getIRReading+0x84>)
 800232c:	f002 fe81 	bl	8005032 <HAL_ADC_PollForConversion>
			retval += HAL_ADC_GetValue(&hadc2);
 8002330:	4817      	ldr	r0, [pc, #92]	; (8002390 <getIRReading+0x84>)
 8002332:	f002 ff09 	bl	8005148 <HAL_ADC_GetValue>
 8002336:	4602      	mov	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
			HAL_ADC_Stop(&hadc2);
 800233e:	4814      	ldr	r0, [pc, #80]	; (8002390 <getIRReading+0x84>)
 8002340:	f002 fe44 	bl	8004fcc <HAL_ADC_Stop>
 8002344:	e013      	b.n	800236e <getIRReading+0x62>
		}
		else if (ir == RIGHT) {
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d110      	bne.n	800236e <getIRReading+0x62>
			HAL_ADC_Start(&hadc1);
 800234c:	4811      	ldr	r0, [pc, #68]	; (8002394 <getIRReading+0x88>)
 800234e:	f002 fd6b 	bl	8004e28 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 10);
 8002352:	210a      	movs	r1, #10
 8002354:	480f      	ldr	r0, [pc, #60]	; (8002394 <getIRReading+0x88>)
 8002356:	f002 fe6c 	bl	8005032 <HAL_ADC_PollForConversion>
			retval += HAL_ADC_GetValue(&hadc1);
 800235a:	480e      	ldr	r0, [pc, #56]	; (8002394 <getIRReading+0x88>)
 800235c:	f002 fef4 	bl	8005148 <HAL_ADC_GetValue>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4413      	add	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
			HAL_ADC_Stop(&hadc1);
 8002368:	480a      	ldr	r0, [pc, #40]	; (8002394 <getIRReading+0x88>)
 800236a:	f002 fe2f 	bl	8004fcc <HAL_ADC_Stop>
	for (int i = 0; i < 5; i++) {
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	3301      	adds	r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b04      	cmp	r3, #4
 8002378:	ddd0      	ble.n	800231c <getIRReading+0x10>
		}
	}
	return retval/5;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4a06      	ldr	r2, [pc, #24]	; (8002398 <getIRReading+0x8c>)
 800237e:	fb82 1203 	smull	r1, r2, r2, r3
 8002382:	1052      	asrs	r2, r2, #1
 8002384:	17db      	asrs	r3, r3, #31
 8002386:	1ad3      	subs	r3, r2, r3
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000284 	.word	0x20000284
 8002394:	2000023c 	.word	0x2000023c
 8002398:	66666667 	.word	0x66666667

0800239c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 80023a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80023a8:	f007 ff58 	bl	800a25c <osDelay>
 80023ac:	e7fa      	b.n	80023a4 <StartDefaultTask+0x8>
	...

080023b0 <StartMotorServo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorServo */
void StartMotorServo(void *argument)
{
 80023b0:	b5b0      	push	{r4, r5, r7, lr}
 80023b2:	b08e      	sub	sp, #56	; 0x38
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorServo */
	uint8_t carTurnOk = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t selectedIr = 0xFF;
 80023be:	23ff      	movs	r3, #255	; 0xff
 80023c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	double distPreRun = 0;
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double distPostRun = 0;
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//return;
  /* Infinite loop */
  for(;;)
  {
	  // Step 1: Move towards 1st obstacle, safe distance = 30 - 35 cm from obstacle
	  distToObstacle_min = 30;
 80023dc:	49b0      	ldr	r1, [pc, #704]	; (80026a0 <StartMotorServo+0x2f0>)
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	4bb0      	ldr	r3, [pc, #704]	; (80026a4 <StartMotorServo+0x2f4>)
 80023e4:	e9c1 2300 	strd	r2, r3, [r1]
	  do {
		  // Request us distance
		  usEnableActiveMeasure();
 80023e8:	f7ff ff72 	bl	80022d0 <usEnableActiveMeasure>
		  while (!distReady) osDelay(10);
 80023ec:	e002      	b.n	80023f4 <StartMotorServo+0x44>
 80023ee:	200a      	movs	r0, #10
 80023f0:	f007 ff34 	bl	800a25c <osDelay>
 80023f4:	4bac      	ldr	r3, [pc, #688]	; (80026a8 <StartMotorServo+0x2f8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f8      	beq.n	80023ee <StartMotorServo+0x3e>
		  if (distPreRun == 0) {
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002408:	f7fe fb5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <StartMotorServo+0x6c>
			  distPreRun = distToObstacle;
 8002412:	4ba6      	ldr	r3, [pc, #664]	; (80026ac <StartMotorServo+0x2fc>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  }
		  if ((distToObstacle - distToObstacle_min > -1) && (distToObstacle - distToObstacle_min < 1)) {
 800241c:	4ba3      	ldr	r3, [pc, #652]	; (80026ac <StartMotorServo+0x2fc>)
 800241e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002422:	4b9f      	ldr	r3, [pc, #636]	; (80026a0 <StartMotorServo+0x2f0>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fd ff2e 	bl	8000288 <__aeabi_dsub>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	4b9d      	ldr	r3, [pc, #628]	; (80026b0 <StartMotorServo+0x300>)
 800243a:	f7fe fb6d 	bl	8000b18 <__aeabi_dcmpgt>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d014      	beq.n	800246e <StartMotorServo+0xbe>
 8002444:	4b99      	ldr	r3, [pc, #612]	; (80026ac <StartMotorServo+0x2fc>)
 8002446:	e9d3 0100 	ldrd	r0, r1, [r3]
 800244a:	4b95      	ldr	r3, [pc, #596]	; (80026a0 <StartMotorServo+0x2f0>)
 800244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002450:	f7fd ff1a 	bl	8000288 <__aeabi_dsub>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	4b94      	ldr	r3, [pc, #592]	; (80026b4 <StartMotorServo+0x304>)
 8002462:	f7fe fb3b 	bl	8000adc <__aeabi_dcmplt>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 808e 	bne.w	800258a <StartMotorServo+0x1da>
			  break;
		  }
		  cpltErr.finished = 0;
 800246e:	4b92      	ldr	r3, [pc, #584]	; (80026b8 <StartMotorServo+0x308>)
 8002470:	2200      	movs	r2, #0
 8002472:	719a      	strb	r2, [r3, #6]
		  pos_y += mtr_mov_cm(distToObstacle - distToObstacle_min);
 8002474:	4b8d      	ldr	r3, [pc, #564]	; (80026ac <StartMotorServo+0x2fc>)
 8002476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800247a:	4b89      	ldr	r3, [pc, #548]	; (80026a0 <StartMotorServo+0x2f0>)
 800247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002480:	f7fd ff02 	bl	8000288 <__aeabi_dsub>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	ec43 2b17 	vmov	d7, r2, r3
 800248c:	eeb0 0a47 	vmov.f32	s0, s14
 8002490:	eef0 0a67 	vmov.f32	s1, s15
 8002494:	f001 f8ec 	bl	8003670 <mtr_mov_cm>
 8002498:	ec51 0b10 	vmov	r0, r1, d0
 800249c:	4b87      	ldr	r3, [pc, #540]	; (80026bc <StartMotorServo+0x30c>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	f7fd fef3 	bl	800028c <__adddf3>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4984      	ldr	r1, [pc, #528]	; (80026bc <StartMotorServo+0x30c>)
 80024ac:	e9c1 2300 	strd	r2, r3, [r1]
		  cpltErr.finished = 1;
 80024b0:	4b81      	ldr	r3, [pc, #516]	; (80026b8 <StartMotorServo+0x308>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	719a      	strb	r2, [r3, #6]
		  while ((mtrA.suspend) || (mtrB.suspend)) {	// Operation is interrupted by us
 80024b6:	e034      	b.n	8002522 <StartMotorServo+0x172>
			  while (!distReady) osDelay(10);
 80024b8:	200a      	movs	r0, #10
 80024ba:	f007 fecf 	bl	800a25c <osDelay>
 80024be:	4b7a      	ldr	r3, [pc, #488]	; (80026a8 <StartMotorServo+0x2f8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f8      	beq.n	80024b8 <StartMotorServo+0x108>
			  reqDist = -1;
 80024c6:	4b7e      	ldr	r3, [pc, #504]	; (80026c0 <StartMotorServo+0x310>)
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024cc:	601a      	str	r2, [r3, #0]
			  mtrA.suspend = SUS_OFF;
 80024ce:	4b7d      	ldr	r3, [pc, #500]	; (80026c4 <StartMotorServo+0x314>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
			  mtrB.suspend = SUS_OFF;
 80024d4:	4b7c      	ldr	r3, [pc, #496]	; (80026c8 <StartMotorServo+0x318>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
			  cpltErr.finished = 0;
 80024da:	4b77      	ldr	r3, [pc, #476]	; (80026b8 <StartMotorServo+0x308>)
 80024dc:	2200      	movs	r2, #0
 80024de:	719a      	strb	r2, [r3, #6]
			  pos_y += mtr_mov_cm(distToObstacle - distToObstacle_min);
 80024e0:	4b72      	ldr	r3, [pc, #456]	; (80026ac <StartMotorServo+0x2fc>)
 80024e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e6:	4b6e      	ldr	r3, [pc, #440]	; (80026a0 <StartMotorServo+0x2f0>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	f7fd fecc 	bl	8000288 <__aeabi_dsub>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	ec43 2b17 	vmov	d7, r2, r3
 80024f8:	eeb0 0a47 	vmov.f32	s0, s14
 80024fc:	eef0 0a67 	vmov.f32	s1, s15
 8002500:	f001 f8b6 	bl	8003670 <mtr_mov_cm>
 8002504:	ec51 0b10 	vmov	r0, r1, d0
 8002508:	4b6c      	ldr	r3, [pc, #432]	; (80026bc <StartMotorServo+0x30c>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fd febd 	bl	800028c <__adddf3>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4969      	ldr	r1, [pc, #420]	; (80026bc <StartMotorServo+0x30c>)
 8002518:	e9c1 2300 	strd	r2, r3, [r1]
			  cpltErr.finished = 1;
 800251c:	4b66      	ldr	r3, [pc, #408]	; (80026b8 <StartMotorServo+0x308>)
 800251e:	2201      	movs	r2, #1
 8002520:	719a      	strb	r2, [r3, #6]
		  while ((mtrA.suspend) || (mtrB.suspend)) {	// Operation is interrupted by us
 8002522:	4b68      	ldr	r3, [pc, #416]	; (80026c4 <StartMotorServo+0x314>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1c9      	bne.n	80024be <StartMotorServo+0x10e>
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <StartMotorServo+0x318>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1c5      	bne.n	80024be <StartMotorServo+0x10e>
		  }
		  usEnableActiveMeasure();
 8002532:	f7ff fecd 	bl	80022d0 <usEnableActiveMeasure>
		  while (!distReady) osDelay(10);
 8002536:	e002      	b.n	800253e <StartMotorServo+0x18e>
 8002538:	200a      	movs	r0, #10
 800253a:	f007 fe8f 	bl	800a25c <osDelay>
 800253e:	4b5a      	ldr	r3, [pc, #360]	; (80026a8 <StartMotorServo+0x2f8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f8      	beq.n	8002538 <StartMotorServo+0x188>
	  } while((distToObstacle < distToObstacle_min) || (distToObstacle > distToObstacle_min + 5));
 8002546:	4b59      	ldr	r3, [pc, #356]	; (80026ac <StartMotorServo+0x2fc>)
 8002548:	e9d3 0100 	ldrd	r0, r1, [r3]
 800254c:	4b54      	ldr	r3, [pc, #336]	; (80026a0 <StartMotorServo+0x2f0>)
 800254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002552:	f7fe fac3 	bl	8000adc <__aeabi_dcmplt>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	f47f af45 	bne.w	80023e8 <StartMotorServo+0x38>
 800255e:	4b50      	ldr	r3, [pc, #320]	; (80026a0 <StartMotorServo+0x2f0>)
 8002560:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	4b58      	ldr	r3, [pc, #352]	; (80026cc <StartMotorServo+0x31c>)
 800256a:	f7fd fe8f 	bl	800028c <__adddf3>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4610      	mov	r0, r2
 8002574:	4619      	mov	r1, r3
 8002576:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <StartMotorServo+0x2fc>)
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	f7fe faae 	bl	8000adc <__aeabi_dcmplt>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	f47f af30 	bne.w	80023e8 <StartMotorServo+0x38>
 8002588:	e000      	b.n	800258c <StartMotorServo+0x1dc>
			  break;
 800258a:	bf00      	nop
	  distPostRun = distToObstacle;
 800258c:	4b47      	ldr	r3, [pc, #284]	; (80026ac <StartMotorServo+0x2fc>)
 800258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002592:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  pos_y += distPreRun - distPostRun;
 8002596:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800259a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800259e:	f7fd fe73 	bl	8000288 <__aeabi_dsub>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	4b44      	ldr	r3, [pc, #272]	; (80026bc <StartMotorServo+0x30c>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fd fe6c 	bl	800028c <__adddf3>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4940      	ldr	r1, [pc, #256]	; (80026bc <StartMotorServo+0x30c>)
 80025ba:	e9c1 2300 	strd	r2, r3, [r1]

	  // Step 2: Request camera and wait for result
	  uart_send_cam(1);
 80025be:	2001      	movs	r0, #1
 80025c0:	f7fe fcb6 	bl	8000f30 <uart_send_cam>
	  turnDir = LEFT;		// Testing only
 80025c4:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <StartMotorServo+0x320>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
	  while (turnDir == 0xFF);
 80025ca:	bf00      	nop
 80025cc:	4b40      	ldr	r3, [pc, #256]	; (80026d0 <StartMotorServo+0x320>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2bff      	cmp	r3, #255	; 0xff
 80025d2:	d0fb      	beq.n	80025cc <StartMotorServo+0x21c>

	  // Step 3: Turn past 1st obstacle (10x10)
	  reqDist = -1;
 80025d4:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <StartMotorServo+0x310>)
 80025d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025da:	601a      	str	r2, [r3, #0]
	  if (turnDir == LEFT) {
 80025dc:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <StartMotorServo+0x320>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d125      	bne.n	8002630 <StartMotorServo+0x280>
		  cpltErr.finished = 0;
 80025e4:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <StartMotorServo+0x308>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	719a      	strb	r2, [r3, #6]
		  carTurn(1, 45);
 80025ea:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80026d4 <StartMotorServo+0x324>
 80025ee:	2001      	movs	r0, #1
 80025f0:	f001 faec 	bl	8003bcc <carTurn>
		  carTurn(1, 255);
 80025f4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80026d8 <StartMotorServo+0x328>
 80025f8:	2001      	movs	r0, #1
 80025fa:	f001 fae7 	bl	8003bcc <carTurn>
		  mtr_mov_cm(7);
 80025fe:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8002688 <StartMotorServo+0x2d8>
 8002602:	f001 f835 	bl	8003670 <mtr_mov_cm>
		  turn(60);
 8002606:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80026dc <StartMotorServo+0x32c>
 800260a:	f001 f965 	bl	80038d8 <turn>
		  cpltErr.finished = 1;
 800260e:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <StartMotorServo+0x308>)
 8002610:	2201      	movs	r2, #1
 8002612:	719a      	strb	r2, [r3, #6]
		  pos_y += 96.5;
 8002614:	4b29      	ldr	r3, [pc, #164]	; (80026bc <StartMotorServo+0x30c>)
 8002616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800261a:	a31d      	add	r3, pc, #116	; (adr r3, 8002690 <StartMotorServo+0x2e0>)
 800261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002620:	f7fd fe34 	bl	800028c <__adddf3>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4924      	ldr	r1, [pc, #144]	; (80026bc <StartMotorServo+0x30c>)
 800262a:	e9c1 2300 	strd	r2, r3, [r1]
 800262e:	e028      	b.n	8002682 <StartMotorServo+0x2d2>
	  }
	  else if (turnDir == RIGHT) {
 8002630:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <StartMotorServo+0x320>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d124      	bne.n	8002682 <StartMotorServo+0x2d2>
		  // Not implemented yet
		  cpltErr.finished = 0;
 8002638:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <StartMotorServo+0x308>)
 800263a:	2200      	movs	r2, #0
 800263c:	719a      	strb	r2, [r3, #6]
		  carTurn(1, 315);
 800263e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80026e0 <StartMotorServo+0x330>
 8002642:	2001      	movs	r0, #1
 8002644:	f001 fac2 	bl	8003bcc <carTurn>
		  carTurn(1, 105);
 8002648:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80026e4 <StartMotorServo+0x334>
 800264c:	2001      	movs	r0, #1
 800264e:	f001 fabd 	bl	8003bcc <carTurn>
		  mtr_mov_cm(7);
 8002652:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8002688 <StartMotorServo+0x2d8>
 8002656:	f001 f80b 	bl	8003670 <mtr_mov_cm>
		  turn(300);
 800265a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80026e8 <StartMotorServo+0x338>
 800265e:	f001 f93b 	bl	80038d8 <turn>
		  cpltErr.finished = 1;
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <StartMotorServo+0x308>)
 8002664:	2201      	movs	r2, #1
 8002666:	719a      	strb	r2, [r3, #6]
		  pos_y += 104.3;
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <StartMotorServo+0x30c>)
 800266a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800266e:	a30a      	add	r3, pc, #40	; (adr r3, 8002698 <StartMotorServo+0x2e8>)
 8002670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002674:	f7fd fe0a 	bl	800028c <__adddf3>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	490f      	ldr	r1, [pc, #60]	; (80026bc <StartMotorServo+0x30c>)
 800267e:	e9c1 2300 	strd	r2, r3, [r1]
	  }

	  // Step 4: Move towards 2nd obstacle, safe distance = 40 - 45 cm from obstacle (if carTurnOk)
	  // 25 - 30 cm from obstacle (if not carTurnOk)
	  usEnableActiveMeasure();
 8002682:	f7ff fe25 	bl	80022d0 <usEnableActiveMeasure>
	  while (!distReady) osDelay(10);
 8002686:	e034      	b.n	80026f2 <StartMotorServo+0x342>
 8002688:	00000000 	.word	0x00000000
 800268c:	401c0000 	.word	0x401c0000
 8002690:	00000000 	.word	0x00000000
 8002694:	40582000 	.word	0x40582000
 8002698:	33333333 	.word	0x33333333
 800269c:	405a1333 	.word	0x405a1333
 80026a0:	20000018 	.word	0x20000018
 80026a4:	403e0000 	.word	0x403e0000
 80026a8:	20000574 	.word	0x20000574
 80026ac:	20000008 	.word	0x20000008
 80026b0:	bff00000 	.word	0xbff00000
 80026b4:	3ff00000 	.word	0x3ff00000
 80026b8:	2000057c 	.word	0x2000057c
 80026bc:	20000538 	.word	0x20000538
 80026c0:	20000570 	.word	0x20000570
 80026c4:	20000584 	.word	0x20000584
 80026c8:	2000058c 	.word	0x2000058c
 80026cc:	40140000 	.word	0x40140000
 80026d0:	20000010 	.word	0x20000010
 80026d4:	42340000 	.word	0x42340000
 80026d8:	437f0000 	.word	0x437f0000
 80026dc:	42700000 	.word	0x42700000
 80026e0:	439d8000 	.word	0x439d8000
 80026e4:	42d20000 	.word	0x42d20000
 80026e8:	43960000 	.word	0x43960000
 80026ec:	200a      	movs	r0, #10
 80026ee:	f007 fdb5 	bl	800a25c <osDelay>
 80026f2:	4ba1      	ldr	r3, [pc, #644]	; (8002978 <StartMotorServo+0x5c8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f8      	beq.n	80026ec <StartMotorServo+0x33c>
	  distPreRun = distToObstacle;
 80026fa:	4ba0      	ldr	r3, [pc, #640]	; (800297c <StartMotorServo+0x5cc>)
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  if (distToObstacle <= 35) {
 8002704:	4b9d      	ldr	r3, [pc, #628]	; (800297c <StartMotorServo+0x5cc>)
 8002706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b9c      	ldr	r3, [pc, #624]	; (8002980 <StartMotorServo+0x5d0>)
 8002710:	f7fe f9ee 	bl	8000af0 <__aeabi_dcmple>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <StartMotorServo+0x37e>
		  carTurnOk = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  distToObstacle_min = 16;
 8002720:	4998      	ldr	r1, [pc, #608]	; (8002984 <StartMotorServo+0x5d4>)
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	4b98      	ldr	r3, [pc, #608]	; (8002988 <StartMotorServo+0x5d8>)
 8002728:	e9c1 2300 	strd	r2, r3, [r1]
 800272c:	e008      	b.n	8002740 <StartMotorServo+0x390>
	  }
	  else {
		  carTurnOk = 1;
 800272e:	2301      	movs	r3, #1
 8002730:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  distToObstacle_min = 45;
 8002734:	4993      	ldr	r1, [pc, #588]	; (8002984 <StartMotorServo+0x5d4>)
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	4b94      	ldr	r3, [pc, #592]	; (800298c <StartMotorServo+0x5dc>)
 800273c:	e9c1 2300 	strd	r2, r3, [r1]
	  }

	  do {
		  usEnableActiveMeasure();
 8002740:	f7ff fdc6 	bl	80022d0 <usEnableActiveMeasure>
		  while (!distReady) osDelay(10);
 8002744:	e002      	b.n	800274c <StartMotorServo+0x39c>
 8002746:	200a      	movs	r0, #10
 8002748:	f007 fd88 	bl	800a25c <osDelay>
 800274c:	4b8a      	ldr	r3, [pc, #552]	; (8002978 <StartMotorServo+0x5c8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f8      	beq.n	8002746 <StartMotorServo+0x396>
		  if ((distToObstacle - distToObstacle_min > -1) && (distToObstacle - distToObstacle_min < 1)) {
 8002754:	4b89      	ldr	r3, [pc, #548]	; (800297c <StartMotorServo+0x5cc>)
 8002756:	e9d3 0100 	ldrd	r0, r1, [r3]
 800275a:	4b8a      	ldr	r3, [pc, #552]	; (8002984 <StartMotorServo+0x5d4>)
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	f7fd fd92 	bl	8000288 <__aeabi_dsub>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	4b87      	ldr	r3, [pc, #540]	; (8002990 <StartMotorServo+0x5e0>)
 8002772:	f7fe f9d1 	bl	8000b18 <__aeabi_dcmpgt>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d014      	beq.n	80027a6 <StartMotorServo+0x3f6>
 800277c:	4b7f      	ldr	r3, [pc, #508]	; (800297c <StartMotorServo+0x5cc>)
 800277e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002782:	4b80      	ldr	r3, [pc, #512]	; (8002984 <StartMotorServo+0x5d4>)
 8002784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002788:	f7fd fd7e 	bl	8000288 <__aeabi_dsub>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	4b7e      	ldr	r3, [pc, #504]	; (8002994 <StartMotorServo+0x5e4>)
 800279a:	f7fe f99f 	bl	8000adc <__aeabi_dcmplt>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f040 808e 	bne.w	80028c2 <StartMotorServo+0x512>
			  break;
		  }
		  cpltErr.finished = 0;
 80027a6:	4b7c      	ldr	r3, [pc, #496]	; (8002998 <StartMotorServo+0x5e8>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	719a      	strb	r2, [r3, #6]
		  pos_y += mtr_mov_cm(distToObstacle - distToObstacle_min);
 80027ac:	4b73      	ldr	r3, [pc, #460]	; (800297c <StartMotorServo+0x5cc>)
 80027ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027b2:	4b74      	ldr	r3, [pc, #464]	; (8002984 <StartMotorServo+0x5d4>)
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	f7fd fd66 	bl	8000288 <__aeabi_dsub>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	ec43 2b17 	vmov	d7, r2, r3
 80027c4:	eeb0 0a47 	vmov.f32	s0, s14
 80027c8:	eef0 0a67 	vmov.f32	s1, s15
 80027cc:	f000 ff50 	bl	8003670 <mtr_mov_cm>
 80027d0:	ec51 0b10 	vmov	r0, r1, d0
 80027d4:	4b71      	ldr	r3, [pc, #452]	; (800299c <StartMotorServo+0x5ec>)
 80027d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027da:	f7fd fd57 	bl	800028c <__adddf3>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	496e      	ldr	r1, [pc, #440]	; (800299c <StartMotorServo+0x5ec>)
 80027e4:	e9c1 2300 	strd	r2, r3, [r1]
		  cpltErr.finished = 1;
 80027e8:	4b6b      	ldr	r3, [pc, #428]	; (8002998 <StartMotorServo+0x5e8>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	719a      	strb	r2, [r3, #6]
		  while ((mtrA.suspend) || (mtrB.suspend)) {	// Operation is interrupted by us
 80027ee:	e034      	b.n	800285a <StartMotorServo+0x4aa>
			  while (!distReady) osDelay(10);
 80027f0:	200a      	movs	r0, #10
 80027f2:	f007 fd33 	bl	800a25c <osDelay>
 80027f6:	4b60      	ldr	r3, [pc, #384]	; (8002978 <StartMotorServo+0x5c8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f8      	beq.n	80027f0 <StartMotorServo+0x440>
			  reqDist = -1;
 80027fe:	4b68      	ldr	r3, [pc, #416]	; (80029a0 <StartMotorServo+0x5f0>)
 8002800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002804:	601a      	str	r2, [r3, #0]
			  mtrA.suspend = SUS_OFF;
 8002806:	4b67      	ldr	r3, [pc, #412]	; (80029a4 <StartMotorServo+0x5f4>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
			  mtrB.suspend = SUS_OFF;
 800280c:	4b66      	ldr	r3, [pc, #408]	; (80029a8 <StartMotorServo+0x5f8>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
			  cpltErr.finished = 0;
 8002812:	4b61      	ldr	r3, [pc, #388]	; (8002998 <StartMotorServo+0x5e8>)
 8002814:	2200      	movs	r2, #0
 8002816:	719a      	strb	r2, [r3, #6]
			  pos_y += mtr_mov_cm(distToObstacle - distToObstacle_min);
 8002818:	4b58      	ldr	r3, [pc, #352]	; (800297c <StartMotorServo+0x5cc>)
 800281a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800281e:	4b59      	ldr	r3, [pc, #356]	; (8002984 <StartMotorServo+0x5d4>)
 8002820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002824:	f7fd fd30 	bl	8000288 <__aeabi_dsub>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	ec43 2b17 	vmov	d7, r2, r3
 8002830:	eeb0 0a47 	vmov.f32	s0, s14
 8002834:	eef0 0a67 	vmov.f32	s1, s15
 8002838:	f000 ff1a 	bl	8003670 <mtr_mov_cm>
 800283c:	ec51 0b10 	vmov	r0, r1, d0
 8002840:	4b56      	ldr	r3, [pc, #344]	; (800299c <StartMotorServo+0x5ec>)
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	f7fd fd21 	bl	800028c <__adddf3>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4953      	ldr	r1, [pc, #332]	; (800299c <StartMotorServo+0x5ec>)
 8002850:	e9c1 2300 	strd	r2, r3, [r1]
			  cpltErr.finished = 1;
 8002854:	4b50      	ldr	r3, [pc, #320]	; (8002998 <StartMotorServo+0x5e8>)
 8002856:	2201      	movs	r2, #1
 8002858:	719a      	strb	r2, [r3, #6]
		  while ((mtrA.suspend) || (mtrB.suspend)) {	// Operation is interrupted by us
 800285a:	4b52      	ldr	r3, [pc, #328]	; (80029a4 <StartMotorServo+0x5f4>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1c9      	bne.n	80027f6 <StartMotorServo+0x446>
 8002862:	4b51      	ldr	r3, [pc, #324]	; (80029a8 <StartMotorServo+0x5f8>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1c5      	bne.n	80027f6 <StartMotorServo+0x446>
		  }
		  usEnableActiveMeasure();
 800286a:	f7ff fd31 	bl	80022d0 <usEnableActiveMeasure>
		  while (!distReady) osDelay(10);
 800286e:	e002      	b.n	8002876 <StartMotorServo+0x4c6>
 8002870:	200a      	movs	r0, #10
 8002872:	f007 fcf3 	bl	800a25c <osDelay>
 8002876:	4b40      	ldr	r3, [pc, #256]	; (8002978 <StartMotorServo+0x5c8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f8      	beq.n	8002870 <StartMotorServo+0x4c0>
	  } while((distToObstacle < distToObstacle_min) || (distToObstacle > distToObstacle_min + 5));
 800287e:	4b3f      	ldr	r3, [pc, #252]	; (800297c <StartMotorServo+0x5cc>)
 8002880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002884:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <StartMotorServo+0x5d4>)
 8002886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288a:	f7fe f927 	bl	8000adc <__aeabi_dcmplt>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	f47f af55 	bne.w	8002740 <StartMotorServo+0x390>
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <StartMotorServo+0x5d4>)
 8002898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	4b42      	ldr	r3, [pc, #264]	; (80029ac <StartMotorServo+0x5fc>)
 80028a2:	f7fd fcf3 	bl	800028c <__adddf3>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	4b33      	ldr	r3, [pc, #204]	; (800297c <StartMotorServo+0x5cc>)
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	f7fe f912 	bl	8000adc <__aeabi_dcmplt>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f47f af40 	bne.w	8002740 <StartMotorServo+0x390>
 80028c0:	e000      	b.n	80028c4 <StartMotorServo+0x514>
			  break;
 80028c2:	bf00      	nop
	  distPostRun = distToObstacle;
 80028c4:	4b2d      	ldr	r3, [pc, #180]	; (800297c <StartMotorServo+0x5cc>)
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  pos_y += distPreRun - distPostRun;
 80028ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028d6:	f7fd fcd7 	bl	8000288 <__aeabi_dsub>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	4b2e      	ldr	r3, [pc, #184]	; (800299c <StartMotorServo+0x5ec>)
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	f7fd fcd0 	bl	800028c <__adddf3>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	492a      	ldr	r1, [pc, #168]	; (800299c <StartMotorServo+0x5ec>)
 80028f2:	e9c1 2300 	strd	r2, r3, [r1]

	  // Step 5: Request camera and wait for result
	  turnDir = 0xFF;
 80028f6:	4b2e      	ldr	r3, [pc, #184]	; (80029b0 <StartMotorServo+0x600>)
 80028f8:	22ff      	movs	r2, #255	; 0xff
 80028fa:	701a      	strb	r2, [r3, #0]
	  uart_send_cam(2);
 80028fc:	2002      	movs	r0, #2
 80028fe:	f7fe fb17 	bl	8000f30 <uart_send_cam>
	  turnDir = RIGHT;		// Testing only
 8002902:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <StartMotorServo+0x600>)
 8002904:	2202      	movs	r2, #2
 8002906:	701a      	strb	r2, [r3, #0]
	  while (turnDir == 0xFF);
 8002908:	bf00      	nop
 800290a:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <StartMotorServo+0x600>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2bff      	cmp	r3, #255	; 0xff
 8002910:	d0fb      	beq.n	800290a <StartMotorServo+0x55a>

	  // Step 6: Go around 2nd obstacle
	  reqDist = -1;
 8002912:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <StartMotorServo+0x5f0>)
 8002914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002918:	601a      	str	r2, [r3, #0]
	  if (turnDir == LEFT) {
 800291a:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <StartMotorServo+0x600>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d164      	bne.n	80029ec <StartMotorServo+0x63c>
		  cpltErr.finished = 0;
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <StartMotorServo+0x5e8>)
 8002924:	2200      	movs	r2, #0
 8002926:	719a      	strb	r2, [r3, #6]
		  if (carTurnOk) {
 8002928:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800292c:	2b00      	cmp	r3, #0
 800292e:	d045      	beq.n	80029bc <StartMotorServo+0x60c>
			  carTurn(1, 90);
 8002930:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80029b8 <StartMotorServo+0x608>
 8002934:	2001      	movs	r0, #1
 8002936:	f001 f949 	bl	8003bcc <carTurn>
			  pos_x += -45;
 800293a:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <StartMotorServo+0x604>)
 800293c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <StartMotorServo+0x5dc>)
 8002946:	f7fd fc9f 	bl	8000288 <__aeabi_dsub>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4919      	ldr	r1, [pc, #100]	; (80029b4 <StartMotorServo+0x604>)
 8002950:	e9c1 2300 	strd	r2, r3, [r1]
			  pos_y += 39.5;
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <StartMotorServo+0x5ec>)
 8002956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800295a:	a305      	add	r3, pc, #20	; (adr r3, 8002970 <StartMotorServo+0x5c0>)
 800295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002960:	f7fd fc94 	bl	800028c <__adddf3>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	490c      	ldr	r1, [pc, #48]	; (800299c <StartMotorServo+0x5ec>)
 800296a:	e9c1 2300 	strd	r2, r3, [r1]
 800296e:	e036      	b.n	80029de <StartMotorServo+0x62e>
 8002970:	00000000 	.word	0x00000000
 8002974:	4043c000 	.word	0x4043c000
 8002978:	20000574 	.word	0x20000574
 800297c:	20000008 	.word	0x20000008
 8002980:	40418000 	.word	0x40418000
 8002984:	20000018 	.word	0x20000018
 8002988:	40300000 	.word	0x40300000
 800298c:	40468000 	.word	0x40468000
 8002990:	bff00000 	.word	0xbff00000
 8002994:	3ff00000 	.word	0x3ff00000
 8002998:	2000057c 	.word	0x2000057c
 800299c:	20000538 	.word	0x20000538
 80029a0:	20000570 	.word	0x20000570
 80029a4:	20000584 	.word	0x20000584
 80029a8:	2000058c 	.word	0x2000058c
 80029ac:	40140000 	.word	0x40140000
 80029b0:	20000010 	.word	0x20000010
 80029b4:	20000530 	.word	0x20000530
 80029b8:	42b40000 	.word	0x42b40000
		  }
		  else {
			  turn(90);
 80029bc:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80029b8 <StartMotorServo+0x608>
 80029c0:	f000 ff8a 	bl	80038d8 <turn>
			  pos_x += -10.3;
 80029c4:	4ba8      	ldr	r3, [pc, #672]	; (8002c68 <StartMotorServo+0x8b8>)
 80029c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029ca:	a39f      	add	r3, pc, #636	; (adr r3, 8002c48 <StartMotorServo+0x898>)
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	f7fd fc5a 	bl	8000288 <__aeabi_dsub>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	49a3      	ldr	r1, [pc, #652]	; (8002c68 <StartMotorServo+0x8b8>)
 80029da:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  cpltErr.finished = 1;
 80029de:	4ba3      	ldr	r3, [pc, #652]	; (8002c6c <StartMotorServo+0x8bc>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	719a      	strb	r2, [r3, #6]
		  selectedIr = RIGHT;
 80029e4:	2302      	movs	r3, #2
 80029e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80029ea:	e041      	b.n	8002a70 <StartMotorServo+0x6c0>
	  }
	  else if (turnDir == RIGHT) {
 80029ec:	4ba0      	ldr	r3, [pc, #640]	; (8002c70 <StartMotorServo+0x8c0>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d13d      	bne.n	8002a70 <StartMotorServo+0x6c0>
		  cpltErr.finished = 0;
 80029f4:	4b9d      	ldr	r3, [pc, #628]	; (8002c6c <StartMotorServo+0x8bc>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	719a      	strb	r2, [r3, #6]
		  if (carTurnOk) {
 80029fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d01f      	beq.n	8002a42 <StartMotorServo+0x692>
			  carTurn(1, 270);
 8002a02:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 8002c74 <StartMotorServo+0x8c4>
 8002a06:	2001      	movs	r0, #1
 8002a08:	f001 f8e0 	bl	8003bcc <carTurn>
			  pos_x += 43.25;
 8002a0c:	4b96      	ldr	r3, [pc, #600]	; (8002c68 <StartMotorServo+0x8b8>)
 8002a0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a12:	a38f      	add	r3, pc, #572	; (adr r3, 8002c50 <StartMotorServo+0x8a0>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	f7fd fc38 	bl	800028c <__adddf3>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4991      	ldr	r1, [pc, #580]	; (8002c68 <StartMotorServo+0x8b8>)
 8002a22:	e9c1 2300 	strd	r2, r3, [r1]
			  pos_y += 30.75;
 8002a26:	4b94      	ldr	r3, [pc, #592]	; (8002c78 <StartMotorServo+0x8c8>)
 8002a28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	4b92      	ldr	r3, [pc, #584]	; (8002c7c <StartMotorServo+0x8cc>)
 8002a32:	f7fd fc2b 	bl	800028c <__adddf3>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	498f      	ldr	r1, [pc, #572]	; (8002c78 <StartMotorServo+0x8c8>)
 8002a3c:	e9c1 2300 	strd	r2, r3, [r1]
 8002a40:	e010      	b.n	8002a64 <StartMotorServo+0x6b4>
		  }
		  else {
			  turn(270);
 8002a42:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8002c74 <StartMotorServo+0x8c4>
 8002a46:	f000 ff47 	bl	80038d8 <turn>
			  pos_x += 15.7;
 8002a4a:	4b87      	ldr	r3, [pc, #540]	; (8002c68 <StartMotorServo+0x8b8>)
 8002a4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a50:	a381      	add	r3, pc, #516	; (adr r3, 8002c58 <StartMotorServo+0x8a8>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	f7fd fc19 	bl	800028c <__adddf3>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4982      	ldr	r1, [pc, #520]	; (8002c68 <StartMotorServo+0x8b8>)
 8002a60:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  cpltErr.finished = 1;
 8002a64:	4b81      	ldr	r3, [pc, #516]	; (8002c6c <StartMotorServo+0x8bc>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	719a      	strb	r2, [r3, #6]
		  selectedIr = LEFT;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	  }

	  // Go to edge of 2nd obstacle
	  ir = getIRReading(selectedIr);
 8002a70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fc49 	bl	800230c <getIRReading>
 8002a7a:	61f8      	str	r0, [r7, #28]
	  mtrA_init(0xFFFF, 0, 0, 0, 1);
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	eddf 0a80 	vldr	s1, [pc, #512]	; 8002c80 <StartMotorServo+0x8d0>
 8002a82:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8002c80 <StartMotorServo+0x8d0>
 8002a86:	2100      	movs	r1, #0
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a8c:	f000 fb72 	bl	8003174 <mtrA_init>
	  mtrB_init(0xFFFF, 0, 0, 0, 1);
 8002a90:	2201      	movs	r2, #1
 8002a92:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8002c80 <StartMotorServo+0x8d0>
 8002a96:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8002c80 <StartMotorServo+0x8d0>
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aa0:	f000 fbce 	bl	8003240 <mtrB_init>
	  if (ir > 800) {
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002aaa:	dd33      	ble.n	8002b14 <StartMotorServo+0x764>
		  while (ir > 800) {
 8002aac:	e014      	b.n	8002ad8 <StartMotorServo+0x728>
			  mtr_SetParamAndMove(&mtrA, DIR_FWD, 3000);
 8002aae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	4873      	ldr	r0, [pc, #460]	; (8002c84 <StartMotorServo+0x8d4>)
 8002ab6:	f000 fce7 	bl	8003488 <mtr_SetParamAndMove>
			  mtr_SetParamAndMove(&mtrB, DIR_FWD, 3000);
 8002aba:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002abe:	2101      	movs	r1, #1
 8002ac0:	4871      	ldr	r0, [pc, #452]	; (8002c88 <StartMotorServo+0x8d8>)
 8002ac2:	f000 fce1 	bl	8003488 <mtr_SetParamAndMove>
			  osDelay(10);
 8002ac6:	200a      	movs	r0, #10
 8002ac8:	f007 fbc8 	bl	800a25c <osDelay>
			  ir = getIRReading(selectedIr);
 8002acc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fc1b 	bl	800230c <getIRReading>
 8002ad6:	61f8      	str	r0, [r7, #28]
		  while (ir > 800) {
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002ade:	dce6      	bgt.n	8002aae <StartMotorServo+0x6fe>
		  }
		  mtr_stop();
 8002ae0:	f000 fc7a 	bl	80033d8 <mtr_stop>
		  distTmp = ((double)((mtrAPID.count + mtrBPID.count) / 2) / CNT_PER_CM);
 8002ae4:	4b69      	ldr	r3, [pc, #420]	; (8002c8c <StartMotorServo+0x8dc>)
 8002ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b68      	ldr	r3, [pc, #416]	; (8002c90 <StartMotorServo+0x8e0>)
 8002aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af2:	4413      	add	r3, r2
 8002af4:	0fda      	lsrs	r2, r3, #31
 8002af6:	4413      	add	r3, r2
 8002af8:	105b      	asrs	r3, r3, #1
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd fd12 	bl	8000524 <__aeabi_i2d>
 8002b00:	a357      	add	r3, pc, #348	; (adr r3, 8002c60 <StartMotorServo+0x8b0>)
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	f7fd fea1 	bl	800084c <__aeabi_ddiv>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002b12:	e036      	b.n	8002b82 <StartMotorServo+0x7d2>
		  //mtr_mov_cm(-5);
	  }
	  else if (ir <= 500) {
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b1a:	dc32      	bgt.n	8002b82 <StartMotorServo+0x7d2>
		  while (ir <= 500) {
 8002b1c:	e014      	b.n	8002b48 <StartMotorServo+0x798>
			  mtr_SetParamAndMove(&mtrA, DIR_BCK, 3000);
 8002b1e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b22:	2100      	movs	r1, #0
 8002b24:	4857      	ldr	r0, [pc, #348]	; (8002c84 <StartMotorServo+0x8d4>)
 8002b26:	f000 fcaf 	bl	8003488 <mtr_SetParamAndMove>
			  mtr_SetParamAndMove(&mtrB, DIR_BCK, 3000);
 8002b2a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4855      	ldr	r0, [pc, #340]	; (8002c88 <StartMotorServo+0x8d8>)
 8002b32:	f000 fca9 	bl	8003488 <mtr_SetParamAndMove>
			  osDelay(10);
 8002b36:	200a      	movs	r0, #10
 8002b38:	f007 fb90 	bl	800a25c <osDelay>
			  ir = getIRReading(selectedIr);
 8002b3c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fbe3 	bl	800230c <getIRReading>
 8002b46:	61f8      	str	r0, [r7, #28]
		  while (ir <= 500) {
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b4e:	dde6      	ble.n	8002b1e <StartMotorServo+0x76e>
		  }
		  mtr_stop();
 8002b50:	f000 fc42 	bl	80033d8 <mtr_stop>
		  distTmp = ((double)((mtrAPID.count + mtrBPID.count) / 2) / CNT_PER_CM);
 8002b54:	4b4d      	ldr	r3, [pc, #308]	; (8002c8c <StartMotorServo+0x8dc>)
 8002b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <StartMotorServo+0x8e0>)
 8002b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b62:	4413      	add	r3, r2
 8002b64:	0fda      	lsrs	r2, r3, #31
 8002b66:	4413      	add	r3, r2
 8002b68:	105b      	asrs	r3, r3, #1
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fcda 	bl	8000524 <__aeabi_i2d>
 8002b70:	a33b      	add	r3, pc, #236	; (adr r3, 8002c60 <StartMotorServo+0x8b0>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd fe69 	bl	800084c <__aeabi_ddiv>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		  //mtr_mov_cm(-5);
	  }
	  if (turnDir == LEFT) {
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <StartMotorServo+0x8c0>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d115      	bne.n	8002bb6 <StartMotorServo+0x806>
		  pos_x -= (distTmp - 10);
 8002b8a:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <StartMotorServo+0x8b8>)
 8002b8c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	4b3f      	ldr	r3, [pc, #252]	; (8002c94 <StartMotorServo+0x8e4>)
 8002b96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b9a:	f7fd fb75 	bl	8000288 <__aeabi_dsub>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	f7fd fb6f 	bl	8000288 <__aeabi_dsub>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	492e      	ldr	r1, [pc, #184]	; (8002c68 <StartMotorServo+0x8b8>)
 8002bb0:	e9c1 2300 	strd	r2, r3, [r1]
 8002bb4:	e018      	b.n	8002be8 <StartMotorServo+0x838>
	  }
	  else if (turnDir == RIGHT) {
 8002bb6:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <StartMotorServo+0x8c0>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d114      	bne.n	8002be8 <StartMotorServo+0x838>
		  pos_x += (distTmp + 10);
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <StartMotorServo+0x8e4>)
 8002bc4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002bc8:	f7fd fb60 	bl	800028c <__adddf3>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <StartMotorServo+0x8b8>)
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	f7fd fb57 	bl	800028c <__adddf3>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4921      	ldr	r1, [pc, #132]	; (8002c68 <StartMotorServo+0x8b8>)
 8002be4:	e9c1 2300 	strd	r2, r3, [r1]
	  }

	  if (turnDir == LEFT) {
 8002be8:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <StartMotorServo+0x8c0>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d157      	bne.n	8002ca0 <StartMotorServo+0x8f0>
		  cpltErr.finished = 0;
 8002bf0:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <StartMotorServo+0x8bc>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	719a      	strb	r2, [r3, #6]
		  carTurn(1, 270);
 8002bf6:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8002c74 <StartMotorServo+0x8c4>
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	f000 ffe6 	bl	8003bcc <carTurn>
		  carTurn(1, 270);
 8002c00:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8002c74 <StartMotorServo+0x8c4>
 8002c04:	2001      	movs	r0, #1
 8002c06:	f000 ffe1 	bl	8003bcc <carTurn>
		  cpltErr.finished = 1;
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <StartMotorServo+0x8bc>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	719a      	strb	r2, [r3, #6]
		  pos_x += 12.5;
 8002c10:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <StartMotorServo+0x8b8>)
 8002c12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <StartMotorServo+0x8e8>)
 8002c1c:	f7fd fb36 	bl	800028c <__adddf3>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4910      	ldr	r1, [pc, #64]	; (8002c68 <StartMotorServo+0x8b8>)
 8002c26:	e9c1 2300 	strd	r2, r3, [r1]
		  pos_y += 74;
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <StartMotorServo+0x8c8>)
 8002c2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <StartMotorServo+0x8ec>)
 8002c36:	f7fd fb29 	bl	800028c <__adddf3>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	490e      	ldr	r1, [pc, #56]	; (8002c78 <StartMotorServo+0x8c8>)
 8002c40:	e9c1 2300 	strd	r2, r3, [r1]
 8002c44:	e05a      	b.n	8002cfc <StartMotorServo+0x94c>
 8002c46:	bf00      	nop
 8002c48:	9999999a 	.word	0x9999999a
 8002c4c:	40249999 	.word	0x40249999
 8002c50:	00000000 	.word	0x00000000
 8002c54:	4045a000 	.word	0x4045a000
 8002c58:	66666666 	.word	0x66666666
 8002c5c:	402f6666 	.word	0x402f6666
 8002c60:	20000000 	.word	0x20000000
 8002c64:	40525106 	.word	0x40525106
 8002c68:	20000530 	.word	0x20000530
 8002c6c:	2000057c 	.word	0x2000057c
 8002c70:	20000010 	.word	0x20000010
 8002c74:	43870000 	.word	0x43870000
 8002c78:	20000538 	.word	0x20000538
 8002c7c:	403ec000 	.word	0x403ec000
 8002c80:	00000000 	.word	0x00000000
 8002c84:	20000584 	.word	0x20000584
 8002c88:	2000058c 	.word	0x2000058c
 8002c8c:	20000594 	.word	0x20000594
 8002c90:	200005b4 	.word	0x200005b4
 8002c94:	40240000 	.word	0x40240000
 8002c98:	40290000 	.word	0x40290000
 8002c9c:	40528000 	.word	0x40528000
	  }
	  else if (turnDir == RIGHT) {
 8002ca0:	4bb5      	ldr	r3, [pc, #724]	; (8002f78 <StartMotorServo+0xbc8>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d129      	bne.n	8002cfc <StartMotorServo+0x94c>
		  cpltErr.finished = 0;
 8002ca8:	4bb4      	ldr	r3, [pc, #720]	; (8002f7c <StartMotorServo+0xbcc>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	719a      	strb	r2, [r3, #6]
		  carTurn(1, 90);
 8002cae:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8002f80 <StartMotorServo+0xbd0>
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f000 ff8a 	bl	8003bcc <carTurn>
		  carTurn(1, 90);
 8002cb8:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8002f80 <StartMotorServo+0xbd0>
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	f000 ff85 	bl	8003bcc <carTurn>
		  cpltErr.finished = 1;
 8002cc2:	4bae      	ldr	r3, [pc, #696]	; (8002f7c <StartMotorServo+0xbcc>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	719a      	strb	r2, [r3, #6]
		  pos_x += -5.5;
 8002cc8:	4bae      	ldr	r3, [pc, #696]	; (8002f84 <StartMotorServo+0xbd4>)
 8002cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	4bad      	ldr	r3, [pc, #692]	; (8002f88 <StartMotorServo+0xbd8>)
 8002cd4:	f7fd fad8 	bl	8000288 <__aeabi_dsub>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	49a9      	ldr	r1, [pc, #676]	; (8002f84 <StartMotorServo+0xbd4>)
 8002cde:	e9c1 2300 	strd	r2, r3, [r1]
		  pos_y += 84.5;
 8002ce2:	4baa      	ldr	r3, [pc, #680]	; (8002f8c <StartMotorServo+0xbdc>)
 8002ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce8:	a39f      	add	r3, pc, #636	; (adr r3, 8002f68 <StartMotorServo+0xbb8>)
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cee:	f7fd facd 	bl	800028c <__adddf3>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	49a5      	ldr	r1, [pc, #660]	; (8002f8c <StartMotorServo+0xbdc>)
 8002cf8:	e9c1 2300 	strd	r2, r3, [r1]
	  }

	  // Back to start of 2nd obstacle
	  ir = getIRReading(selectedIr);
 8002cfc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fb03 	bl	800230c <getIRReading>
 8002d06:	61f8      	str	r0, [r7, #28]
	  do {
		  mtr_SetParamAndMove(&mtrA, DIR_BCK, 3000);
 8002d08:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	48a0      	ldr	r0, [pc, #640]	; (8002f90 <StartMotorServo+0xbe0>)
 8002d10:	f000 fbba 	bl	8003488 <mtr_SetParamAndMove>
		  mtr_SetParamAndMove(&mtrB, DIR_BCK, 3000);
 8002d14:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d18:	2100      	movs	r1, #0
 8002d1a:	489e      	ldr	r0, [pc, #632]	; (8002f94 <StartMotorServo+0xbe4>)
 8002d1c:	f000 fbb4 	bl	8003488 <mtr_SetParamAndMove>
		  osDelay(10);
 8002d20:	200a      	movs	r0, #10
 8002d22:	f007 fa9b 	bl	800a25c <osDelay>
		  ir = getIRReading(selectedIr);
 8002d26:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff faee 	bl	800230c <getIRReading>
 8002d30:	61f8      	str	r0, [r7, #28]
	  } while(ir > 800);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002d38:	dce6      	bgt.n	8002d08 <StartMotorServo+0x958>
	  mtr_stop();
 8002d3a:	f000 fb4d 	bl	80033d8 <mtr_stop>

	  // Fwd to end of 2nd obstacle
	  ir = getIRReading(selectedIr);
 8002d3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fae2 	bl	800230c <getIRReading>
 8002d48:	61f8      	str	r0, [r7, #28]
	  mtrA_init(0xFFFF, 0, 0, 0, 1);
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	eddf 0a92 	vldr	s1, [pc, #584]	; 8002f98 <StartMotorServo+0xbe8>
 8002d50:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8002f98 <StartMotorServo+0xbe8>
 8002d54:	2100      	movs	r1, #0
 8002d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d5a:	f000 fa0b 	bl	8003174 <mtrA_init>
	  mtrB_init(0xFFFF, 0, 0, 0, 1);
 8002d5e:	2201      	movs	r2, #1
 8002d60:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8002f98 <StartMotorServo+0xbe8>
 8002d64:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8002f98 <StartMotorServo+0xbe8>
 8002d68:	2100      	movs	r1, #0
 8002d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d6e:	f000 fa67 	bl	8003240 <mtrB_init>
	  mtr_SetParamAndMove(&mtrA, DIR_FWD, 3000);
 8002d72:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d76:	2101      	movs	r1, #1
 8002d78:	4885      	ldr	r0, [pc, #532]	; (8002f90 <StartMotorServo+0xbe0>)
 8002d7a:	f000 fb85 	bl	8003488 <mtr_SetParamAndMove>
	  mtr_SetParamAndMove(&mtrB, DIR_FWD, 3000);
 8002d7e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d82:	2101      	movs	r1, #1
 8002d84:	4883      	ldr	r0, [pc, #524]	; (8002f94 <StartMotorServo+0xbe4>)
 8002d86:	f000 fb7f 	bl	8003488 <mtr_SetParamAndMove>
	  osDelay(500);
 8002d8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d8e:	f007 fa65 	bl	800a25c <osDelay>
	  while(ir > 800) {
 8002d92:	e008      	b.n	8002da6 <StartMotorServo+0x9f6>
		  osDelay(10);
 8002d94:	200a      	movs	r0, #10
 8002d96:	f007 fa61 	bl	800a25c <osDelay>
		  ir = getIRReading(selectedIr);
 8002d9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fab4 	bl	800230c <getIRReading>
 8002da4:	61f8      	str	r0, [r7, #28]
	  while(ir > 800) {
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002dac:	dcf2      	bgt.n	8002d94 <StartMotorServo+0x9e4>
	  }
	  mtr_stop();
 8002dae:	f000 fb13 	bl	80033d8 <mtr_stop>
	  obs2Width = ((double)((mtrAPID.count + mtrBPID.count) / 2) / CNT_PER_CM);
 8002db2:	4b7a      	ldr	r3, [pc, #488]	; (8002f9c <StartMotorServo+0xbec>)
 8002db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b79      	ldr	r3, [pc, #484]	; (8002fa0 <StartMotorServo+0xbf0>)
 8002dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	0fda      	lsrs	r2, r3, #31
 8002dc4:	4413      	add	r3, r2
 8002dc6:	105b      	asrs	r3, r3, #1
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fbab 	bl	8000524 <__aeabi_i2d>
 8002dce:	a368      	add	r3, pc, #416	; (adr r3, 8002f70 <StartMotorServo+0xbc0>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fd3a 	bl	800084c <__aeabi_ddiv>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  //mtr_mov_cm(-10);

	  if (turnDir == LEFT) {
 8002de0:	4b65      	ldr	r3, [pc, #404]	; (8002f78 <StartMotorServo+0xbc8>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10b      	bne.n	8002e00 <StartMotorServo+0xa50>
		  cpltErr.finished = 0;
 8002de8:	4b64      	ldr	r3, [pc, #400]	; (8002f7c <StartMotorServo+0xbcc>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	719a      	strb	r2, [r3, #6]
		  carTurn(1, 270);
 8002dee:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8002fa4 <StartMotorServo+0xbf4>
 8002df2:	2001      	movs	r0, #1
 8002df4:	f000 feea 	bl	8003bcc <carTurn>
		  cpltErr.finished = 1;
 8002df8:	4b60      	ldr	r3, [pc, #384]	; (8002f7c <StartMotorServo+0xbcc>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	719a      	strb	r2, [r3, #6]
 8002dfe:	e00e      	b.n	8002e1e <StartMotorServo+0xa6e>
	  }
	  else if (turnDir == RIGHT) {
 8002e00:	4b5d      	ldr	r3, [pc, #372]	; (8002f78 <StartMotorServo+0xbc8>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d10a      	bne.n	8002e1e <StartMotorServo+0xa6e>
		  cpltErr.finished = 0;
 8002e08:	4b5c      	ldr	r3, [pc, #368]	; (8002f7c <StartMotorServo+0xbcc>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	719a      	strb	r2, [r3, #6]
		  carTurn(1, 90);
 8002e0e:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8002f80 <StartMotorServo+0xbd0>
 8002e12:	2001      	movs	r0, #1
 8002e14:	f000 feda 	bl	8003bcc <carTurn>
		  cpltErr.finished = 1;
 8002e18:	4b58      	ldr	r3, [pc, #352]	; (8002f7c <StartMotorServo+0xbcc>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	719a      	strb	r2, [r3, #6]
	  }

	  // Step 7: Return home
	  mtr_SetParamAndMove(&mtrA, DIR_FWD, 3000);
 8002e1e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e22:	2101      	movs	r1, #1
 8002e24:	485a      	ldr	r0, [pc, #360]	; (8002f90 <StartMotorServo+0xbe0>)
 8002e26:	f000 fb2f 	bl	8003488 <mtr_SetParamAndMove>
	  mtr_SetParamAndMove(&mtrB, DIR_FWD, 3000);
 8002e2a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e2e:	2101      	movs	r1, #1
 8002e30:	4858      	ldr	r0, [pc, #352]	; (8002f94 <StartMotorServo+0xbe4>)
 8002e32:	f000 fb29 	bl	8003488 <mtr_SetParamAndMove>
	  osDelay(700);
 8002e36:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002e3a:	f007 fa0f 	bl	800a25c <osDelay>
	  if (obs2Width > 65) {
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	4b59      	ldr	r3, [pc, #356]	; (8002fa8 <StartMotorServo+0xbf8>)
 8002e44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e48:	f7fd fe66 	bl	8000b18 <__aeabi_dcmpgt>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d01e      	beq.n	8002e90 <StartMotorServo+0xae0>
		  mtr_stop();
 8002e52:	f000 fac1 	bl	80033d8 <mtr_stop>
		  if (turnDir == LEFT) {
 8002e56:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <StartMotorServo+0xbc8>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10a      	bne.n	8002e74 <StartMotorServo+0xac4>
			  carTurn(1, 315);
 8002e5e:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8002fac <StartMotorServo+0xbfc>
 8002e62:	2001      	movs	r0, #1
 8002e64:	f000 feb2 	bl	8003bcc <carTurn>
			  carTurn(1, 45);
 8002e68:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8002fb0 <StartMotorServo+0xc00>
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f000 fead 	bl	8003bcc <carTurn>
 8002e72:	e00d      	b.n	8002e90 <StartMotorServo+0xae0>
		  }
		  else if (turnDir == RIGHT) {
 8002e74:	4b40      	ldr	r3, [pc, #256]	; (8002f78 <StartMotorServo+0xbc8>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d109      	bne.n	8002e90 <StartMotorServo+0xae0>
			  carTurn(1, 45);
 8002e7c:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8002fb0 <StartMotorServo+0xc00>
 8002e80:	2001      	movs	r0, #1
 8002e82:	f000 fea3 	bl	8003bcc <carTurn>
			  carTurn(1, 315);
 8002e86:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8002fac <StartMotorServo+0xbfc>
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	f000 fe9e 	bl	8003bcc <carTurn>
		  }
	  }
	  mtr_SetParamAndMove(&mtrA, DIR_FWD, 3000);
 8002e90:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e94:	2101      	movs	r1, #1
 8002e96:	483e      	ldr	r0, [pc, #248]	; (8002f90 <StartMotorServo+0xbe0>)
 8002e98:	f000 faf6 	bl	8003488 <mtr_SetParamAndMove>
	  mtr_SetParamAndMove(&mtrB, DIR_FWD, 3000);
 8002e9c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	483c      	ldr	r0, [pc, #240]	; (8002f94 <StartMotorServo+0xbe4>)
 8002ea4:	f000 faf0 	bl	8003488 <mtr_SetParamAndMove>
	  while (ir <= 500) {
 8002ea8:	e008      	b.n	8002ebc <StartMotorServo+0xb0c>
		  osDelay(10);
 8002eaa:	200a      	movs	r0, #10
 8002eac:	f007 f9d6 	bl	800a25c <osDelay>
		  ir = getIRReading(selectedIr);
 8002eb0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fa29 	bl	800230c <getIRReading>
 8002eba:	61f8      	str	r0, [r7, #28]
	  while (ir <= 500) {
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ec2:	ddf2      	ble.n	8002eaa <StartMotorServo+0xafa>
	  }
	  while (ir > 500) {
 8002ec4:	e008      	b.n	8002ed8 <StartMotorServo+0xb28>
		  osDelay(10);
 8002ec6:	200a      	movs	r0, #10
 8002ec8:	f007 f9c8 	bl	800a25c <osDelay>
		  ir = getIRReading(selectedIr);
 8002ecc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fa1b 	bl	800230c <getIRReading>
 8002ed6:	61f8      	str	r0, [r7, #28]
	  while (ir > 500) {
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ede:	dcf2      	bgt.n	8002ec6 <StartMotorServo+0xb16>
	  }
	  mtr_stop();
 8002ee0:	f000 fa7a 	bl	80033d8 <mtr_stop>

	  if (turnDir == LEFT) {
 8002ee4:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <StartMotorServo+0xbc8>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <StartMotorServo+0xb54>
		  cpltErr.finished = 0;
 8002eec:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <StartMotorServo+0xbcc>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	719a      	strb	r2, [r3, #6]
		  carTurn(1, 270);
 8002ef2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8002fa4 <StartMotorServo+0xbf4>
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	f000 fe68 	bl	8003bcc <carTurn>
		  cpltErr.finished = 1;
 8002efc:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <StartMotorServo+0xbcc>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	719a      	strb	r2, [r3, #6]
 8002f02:	e00e      	b.n	8002f22 <StartMotorServo+0xb72>
	  }
	  else if (turnDir == RIGHT) {
 8002f04:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <StartMotorServo+0xbc8>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d10a      	bne.n	8002f22 <StartMotorServo+0xb72>
		  cpltErr.finished = 0;
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <StartMotorServo+0xbcc>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	719a      	strb	r2, [r3, #6]
		  carTurn(1, 90);
 8002f12:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8002f80 <StartMotorServo+0xbd0>
 8002f16:	2001      	movs	r0, #1
 8002f18:	f000 fe58 	bl	8003bcc <carTurn>
		  cpltErr.finished = 1;
 8002f1c:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <StartMotorServo+0xbcc>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	719a      	strb	r2, [r3, #6]
	  }

	  OLED_Clear();
 8002f22:	f001 f805 	bl	8003f30 <OLED_Clear>
	  sprintf(oledbuf, "x: %5.1f", pos_x);
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <StartMotorServo+0xbd4>)
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	4921      	ldr	r1, [pc, #132]	; (8002fb4 <StartMotorServo+0xc04>)
 8002f2e:	4822      	ldr	r0, [pc, #136]	; (8002fb8 <StartMotorServo+0xc08>)
 8002f30:	f00a fbea 	bl	800d708 <siprintf>
	  OLED_ShowString(10, 15, &oledbuf[0]);
 8002f34:	4a20      	ldr	r2, [pc, #128]	; (8002fb8 <StartMotorServo+0xc08>)
 8002f36:	210f      	movs	r1, #15
 8002f38:	200a      	movs	r0, #10
 8002f3a:	f001 f8eb 	bl	8004114 <OLED_ShowString>
	  OLED_Refresh_Gram();
 8002f3e:	f000 ff75 	bl	8003e2c <OLED_Refresh_Gram>

	  sprintf(oledbuf, "y: %5.1f", pos_y);
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <StartMotorServo+0xbdc>)
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	491c      	ldr	r1, [pc, #112]	; (8002fbc <StartMotorServo+0xc0c>)
 8002f4a:	481b      	ldr	r0, [pc, #108]	; (8002fb8 <StartMotorServo+0xc08>)
 8002f4c:	f00a fbdc 	bl	800d708 <siprintf>
	  OLED_ShowString(10, 30, &oledbuf[0]);
 8002f50:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <StartMotorServo+0xc08>)
 8002f52:	211e      	movs	r1, #30
 8002f54:	200a      	movs	r0, #10
 8002f56:	f001 f8dd 	bl	8004114 <OLED_ShowString>
	  OLED_Refresh_Gram();
 8002f5a:	f000 ff67 	bl	8003e2c <OLED_Refresh_Gram>


	  break;
 8002f5e:	bf00      	nop
	  OLED_Refresh_Gram();
	  */
	  //osDelay(500);		// Make sure to give time for UART task to transmit instructions
  }
  /* USER CODE END StartMotorServo */
}
 8002f60:	bf00      	nop
 8002f62:	3738      	adds	r7, #56	; 0x38
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bdb0      	pop	{r4, r5, r7, pc}
 8002f68:	00000000 	.word	0x00000000
 8002f6c:	40552000 	.word	0x40552000
 8002f70:	20000000 	.word	0x20000000
 8002f74:	40525106 	.word	0x40525106
 8002f78:	20000010 	.word	0x20000010
 8002f7c:	2000057c 	.word	0x2000057c
 8002f80:	42b40000 	.word	0x42b40000
 8002f84:	20000530 	.word	0x20000530
 8002f88:	40160000 	.word	0x40160000
 8002f8c:	20000538 	.word	0x20000538
 8002f90:	20000584 	.word	0x20000584
 8002f94:	2000058c 	.word	0x2000058c
 8002f98:	00000000 	.word	0x00000000
 8002f9c:	20000594 	.word	0x20000594
 8002fa0:	200005b4 	.word	0x200005b4
 8002fa4:	43870000 	.word	0x43870000
 8002fa8:	40504000 	.word	0x40504000
 8002fac:	439d8000 	.word	0x439d8000
 8002fb0:	42340000 	.word	0x42340000
 8002fb4:	0800fc4c 	.word	0x0800fc4c
 8002fb8:	20000540 	.word	0x20000540
 8002fbc:	0800fc58 	.word	0x0800fc58

08002fc0 <StartIMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMU */
void StartIMU(void *argument)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMU */
	uint32_t ori_lastSampleTime = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  orientation = calcOri(&ori_lastSampleTime, orientation);
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <StartIMU+0x2c>)
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	f107 030c 	add.w	r3, r7, #12
 8002fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fa2a 	bl	8001434 <calcOri>
 8002fe0:	eef0 7a40 	vmov.f32	s15, s0
 8002fe4:	4b01      	ldr	r3, [pc, #4]	; (8002fec <StartIMU+0x2c>)
 8002fe6:	edc3 7a00 	vstr	s15, [r3]
 8002fea:	e7ef      	b.n	8002fcc <StartIMU+0xc>
 8002fec:	20000528 	.word	0x20000528

08002ff0 <StartUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART */
void StartUART(void *argument)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
			  uart_send();
		  }
		  osDelay(100);
	  }
	  */
	  osDelay(10000);
 8002ff8:	f242 7010 	movw	r0, #10000	; 0x2710
 8002ffc:	f007 f92e 	bl	800a25c <osDelay>
 8003000:	e7fa      	b.n	8002ff8 <StartUART+0x8>
	...

08003004 <StartUS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUS */
void StartUS(void *argument)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUS */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 800300c:	2200      	movs	r2, #0
 800300e:	2110      	movs	r1, #16
 8003010:	480b      	ldr	r0, [pc, #44]	; (8003040 <StartUS+0x3c>)
 8003012:	f002 fe05 	bl	8005c20 <HAL_GPIO_WritePin>
	  osDelay(50);
 8003016:	2032      	movs	r0, #50	; 0x32
 8003018:	f007 f920 	bl	800a25c <osDelay>
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_SET);
 800301c:	2201      	movs	r2, #1
 800301e:	2110      	movs	r1, #16
 8003020:	4807      	ldr	r0, [pc, #28]	; (8003040 <StartUS+0x3c>)
 8003022:	f002 fdfd 	bl	8005c20 <HAL_GPIO_WritePin>
	  Delay_us(10);
 8003026:	200a      	movs	r0, #10
 8003028:	f7ff f93a 	bl	80022a0 <Delay_us>
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 800302c:	2200      	movs	r2, #0
 800302e:	2110      	movs	r1, #16
 8003030:	4803      	ldr	r0, [pc, #12]	; (8003040 <StartUS+0x3c>)
 8003032:	f002 fdf5 	bl	8005c20 <HAL_GPIO_WritePin>
	  osDelay(50);
 8003036:	2032      	movs	r0, #50	; 0x32
 8003038:	f007 f910 	bl	800a25c <osDelay>
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 800303c:	e7e6      	b.n	800300c <StartUS+0x8>
 800303e:	bf00      	nop
 8003040:	40020400 	.word	0x40020400

08003044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003048:	b672      	cpsid	i
}
 800304a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800304c:	e7fe      	b.n	800304c <Error_Handler+0x8>
	...

08003050 <mtr_init>:

/* All functions */

void mtr_init(TIM_HandleTypeDef* pwm_htimPtr, TIM_HandleTypeDef* encodeA_htimPtr, TIM_HandleTypeDef* encodeB_htimPtr,
		MotorData* mtrA, MotorData* mtrB, MotorPIDData* mtrAPID, MotorPIDData* mtrBPID, MotorServoStatus* backupObj,
		float* orientation, osSemaphoreId_t* oriSemHandlePtr) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]

	motorA = mtrA;
 800305e:	4a2b      	ldr	r2, [pc, #172]	; (800310c <mtr_init+0xbc>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6013      	str	r3, [r2, #0]
	motorB = mtrB;
 8003064:	4a2a      	ldr	r2, [pc, #168]	; (8003110 <mtr_init+0xc0>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	6013      	str	r3, [r2, #0]
	motorA->suspend = 0;
 800306a:	4b28      	ldr	r3, [pc, #160]	; (800310c <mtr_init+0xbc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
	motorA->suspend = 0;
 8003072:	4b26      	ldr	r3, [pc, #152]	; (800310c <mtr_init+0xbc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]

	motorAPID = mtrAPID;
 800307a:	4a26      	ldr	r2, [pc, #152]	; (8003114 <mtr_init+0xc4>)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	6013      	str	r3, [r2, #0]
	motorBPID = mtrBPID;
 8003080:	4a25      	ldr	r2, [pc, #148]	; (8003118 <mtr_init+0xc8>)
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	6013      	str	r3, [r2, #0]

	backup = backupObj;
 8003086:	4a25      	ldr	r2, [pc, #148]	; (800311c <mtr_init+0xcc>)
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	6013      	str	r3, [r2, #0]
	backup_reset();
 800308c:	f000 f854 	bl	8003138 <backup_reset>

	ori = orientation;
 8003090:	4a23      	ldr	r2, [pc, #140]	; (8003120 <mtr_init+0xd0>)
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	6013      	str	r3, [r2, #0]
	ori_semaphoreHandlePtr = oriSemHandlePtr;
 8003096:	4a23      	ldr	r2, [pc, #140]	; (8003124 <mtr_init+0xd4>)
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309a:	6013      	str	r3, [r2, #0]

	htim8Ptr = pwm_htimPtr;
 800309c:	4a22      	ldr	r2, [pc, #136]	; (8003128 <mtr_init+0xd8>)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6013      	str	r3, [r2, #0]
	htim2Ptr = encodeA_htimPtr;
 80030a2:	4a22      	ldr	r2, [pc, #136]	; (800312c <mtr_init+0xdc>)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	6013      	str	r3, [r2, #0]
	htim3Ptr = encodeB_htimPtr;
 80030a8:	4a21      	ldr	r2, [pc, #132]	; (8003130 <mtr_init+0xe0>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim8Ptr, PWMA_TIM_CH);
 80030ae:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <mtr_init+0xd8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f004 faf5 	bl	80076a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim8Ptr, PWMB_TIM_CH);
 80030ba:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <mtr_init+0xd8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2104      	movs	r1, #4
 80030c0:	4618      	mov	r0, r3
 80030c2:	f004 faef 	bl	80076a4 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start_IT(htim2Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
 80030c6:	4b19      	ldr	r3, [pc, #100]	; (800312c <mtr_init+0xdc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	213c      	movs	r1, #60	; 0x3c
 80030cc:	4618      	mov	r0, r3
 80030ce:	f004 fdd9 	bl	8007c84 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(htim3Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
 80030d2:	4b17      	ldr	r3, [pc, #92]	; (8003130 <mtr_init+0xe0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	213c      	movs	r1, #60	; 0x3c
 80030d8:	4618      	mov	r0, r3
 80030da:	f004 fdd3 	bl	8007c84 <HAL_TIM_Encoder_Start_IT>

	mtrA_init(0, 0, 0, 0, 1);
 80030de:	2201      	movs	r2, #1
 80030e0:	eddf 0a14 	vldr	s1, [pc, #80]	; 8003134 <mtr_init+0xe4>
 80030e4:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003134 <mtr_init+0xe4>
 80030e8:	2100      	movs	r1, #0
 80030ea:	2000      	movs	r0, #0
 80030ec:	f000 f842 	bl	8003174 <mtrA_init>
	mtrB_init(0, 0, 0, 0, 1);
 80030f0:	2201      	movs	r2, #1
 80030f2:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003134 <mtr_init+0xe4>
 80030f6:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8003134 <mtr_init+0xe4>
 80030fa:	2100      	movs	r1, #0
 80030fc:	2000      	movs	r0, #0
 80030fe:	f000 f89f 	bl	8003240 <mtrB_init>
}
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200005e0 	.word	0x200005e0
 8003110:	200005e4 	.word	0x200005e4
 8003114:	200005e8 	.word	0x200005e8
 8003118:	200005ec 	.word	0x200005ec
 800311c:	200005f0 	.word	0x200005f0
 8003120:	200005f4 	.word	0x200005f4
 8003124:	20000604 	.word	0x20000604
 8003128:	200005f8 	.word	0x200005f8
 800312c:	200005fc 	.word	0x200005fc
 8003130:	20000600 	.word	0x20000600
 8003134:	00000000 	.word	0x00000000

08003138 <backup_reset>:

void backup_reset() {
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
	backup->servoDir = STRAIGHT;
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <backup_reset+0x38>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2201      	movs	r2, #1
 8003142:	701a      	strb	r2, [r3, #0]
	backup->mtrADir = DIR_FWD;
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <backup_reset+0x38>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2201      	movs	r2, #1
 800314a:	705a      	strb	r2, [r3, #1]
	backup->mtrAPWM = 0;
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <backup_reset+0x38>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2200      	movs	r2, #0
 8003152:	605a      	str	r2, [r3, #4]
	backup->mtrBDir = DIR_FWD;
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <backup_reset+0x38>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2201      	movs	r2, #1
 800315a:	709a      	strb	r2, [r3, #2]
	backup->mtrBPWM = 0;
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <backup_reset+0x38>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	200005f0 	.word	0x200005f0

08003174 <mtrA_init>:

void mtrA_init(int16_t target, int16_t Kp, float Kd, float Ki, uint8_t reset_timer) {
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003180:	edc7 0a01 	vstr	s1, [r7, #4]
 8003184:	81fb      	strh	r3, [r7, #14]
 8003186:	460b      	mov	r3, r1
 8003188:	81bb      	strh	r3, [r7, #12]
 800318a:	4613      	mov	r3, r2
 800318c:	70fb      	strb	r3, [r7, #3]

	if (reset_timer)
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d004      	beq.n	800319e <mtrA_init+0x2a>
		__HAL_TIM_SET_COUNTER(htim2Ptr, 0);
 8003194:	4b27      	ldr	r3, [pc, #156]	; (8003234 <mtrA_init+0xc0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	625a      	str	r2, [r3, #36]	; 0x24

	motorA->dir = DIR_FWD;
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <mtrA_init+0xc4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2201      	movs	r2, #1
 80031a4:	705a      	strb	r2, [r3, #1]
	motorA->pwmVal = 0;
 80031a6:	4b24      	ldr	r3, [pc, #144]	; (8003238 <mtrA_init+0xc4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2200      	movs	r2, #0
 80031ac:	605a      	str	r2, [r3, #4]

	motorAPID->count = -(int16_t)__HAL_TIM_GET_COUNTER(htim2Ptr);       		// Counter (signed value)
 80031ae:	4b21      	ldr	r3, [pc, #132]	; (8003234 <mtrA_init+0xc0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	425b      	negs	r3, r3
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	4b1f      	ldr	r3, [pc, #124]	; (800323c <mtrA_init+0xc8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	b212      	sxth	r2, r2
 80031c2:	801a      	strh	r2, [r3, #0]
	motorAPID->target = target;
 80031c4:	4b1d      	ldr	r3, [pc, #116]	; (800323c <mtrA_init+0xc8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	89fa      	ldrh	r2, [r7, #14]
 80031ca:	805a      	strh	r2, [r3, #2]
	motorAPID->error = motorAPID->target - motorAPID->count;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <mtrA_init+0xc8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	4b19      	ldr	r3, [pc, #100]	; (800323c <mtrA_init+0xc8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	4b15      	ldr	r3, [pc, #84]	; (800323c <mtrA_init+0xc8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	b212      	sxth	r2, r2
 80031ea:	809a      	strh	r2, [r3, #4]
	motorAPID->error_area = 0;  		// area under error - to calculate I for PI implementation
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <mtrA_init+0xc8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
	motorAPID->error_old = 0; 			// to calculate D for PID control
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <mtrA_init+0xc8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2200      	movs	r2, #0
 80031fa:	60da      	str	r2, [r3, #12]
	motorAPID->millisOld = HAL_GetTick();			// to calculate I and D for PID control
 80031fc:	f001 fda0 	bl	8004d40 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <mtrA_init+0xc8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	611a      	str	r2, [r3, #16]
	motorAPID->Kp = Kp;
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <mtrA_init+0xc8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003210:	ee07 2a90 	vmov	s15, r2
 8003214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003218:	edc3 7a05 	vstr	s15, [r3, #20]
	motorAPID->Kd = Kd;
 800321c:	4b07      	ldr	r3, [pc, #28]	; (800323c <mtrA_init+0xc8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	619a      	str	r2, [r3, #24]
	motorAPID->Ki = Ki;
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <mtrA_init+0xc8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	61da      	str	r2, [r3, #28]
}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	200005fc 	.word	0x200005fc
 8003238:	200005e0 	.word	0x200005e0
 800323c:	200005e8 	.word	0x200005e8

08003240 <mtrB_init>:

void mtrB_init(int16_t target, int16_t Kp, float Kd, float Ki, uint8_t reset_timer) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	ed87 0a02 	vstr	s0, [r7, #8]
 800324c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003250:	81fb      	strh	r3, [r7, #14]
 8003252:	460b      	mov	r3, r1
 8003254:	81bb      	strh	r3, [r7, #12]
 8003256:	4613      	mov	r3, r2
 8003258:	70fb      	strb	r3, [r7, #3]

	if (reset_timer)
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d004      	beq.n	800326a <mtrB_init+0x2a>
		__HAL_TIM_SET_COUNTER(htim3Ptr, 0);
 8003260:	4b26      	ldr	r3, [pc, #152]	; (80032fc <mtrB_init+0xbc>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

	motorB->dir = DIR_FWD;
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <mtrB_init+0xc0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2201      	movs	r2, #1
 8003270:	705a      	strb	r2, [r3, #1]
	motorB->pwmVal = 0;
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <mtrB_init+0xc0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2200      	movs	r2, #0
 8003278:	605a      	str	r2, [r3, #4]

	motorBPID->count = (int16_t)__HAL_TIM_GET_COUNTER(htim3Ptr);       		// Counter (signed value)
 800327a:	4b20      	ldr	r3, [pc, #128]	; (80032fc <mtrB_init+0xbc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <mtrB_init+0xc4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	b212      	sxth	r2, r2
 8003288:	801a      	strh	r2, [r3, #0]
	motorBPID->target = target;
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <mtrB_init+0xc4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	89fa      	ldrh	r2, [r7, #14]
 8003290:	805a      	strh	r2, [r3, #2]
	motorBPID->error = motorBPID->target - motorBPID->count;
 8003292:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <mtrB_init+0xc4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800329a:	b29a      	uxth	r2, r3
 800329c:	4b19      	ldr	r3, [pc, #100]	; (8003304 <mtrB_init+0xc4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	4b16      	ldr	r3, [pc, #88]	; (8003304 <mtrB_init+0xc4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	b212      	sxth	r2, r2
 80032b0:	809a      	strh	r2, [r3, #4]
	motorBPID->error_area = 0;  		// area under error - to calculate I for PI implementation
 80032b2:	4b14      	ldr	r3, [pc, #80]	; (8003304 <mtrB_init+0xc4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
	motorBPID->error_old = 0; 			// to calculate D for PID control
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <mtrB_init+0xc4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2200      	movs	r2, #0
 80032c0:	60da      	str	r2, [r3, #12]
	motorBPID->millisOld = HAL_GetTick();			// to calculate I and D for PID control
 80032c2:	f001 fd3d 	bl	8004d40 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <mtrB_init+0xc4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	611a      	str	r2, [r3, #16]
	motorBPID->Kp = Kp;
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <mtrB_init+0xc4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80032d6:	ee07 2a90 	vmov	s15, r2
 80032da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032de:	edc3 7a05 	vstr	s15, [r3, #20]
	motorBPID->Kd = Kd;
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <mtrB_init+0xc4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	619a      	str	r2, [r3, #24]
	motorBPID->Ki = Ki;
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <mtrB_init+0xc4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	61da      	str	r2, [r3, #28]
}
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000600 	.word	0x20000600
 8003300:	200005e4 	.word	0x200005e4
 8003304:	200005ec 	.word	0x200005ec

08003308 <mtrA_mov>:

void mtrA_mov(uint8_t direction, uint16_t speed) {
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	460a      	mov	r2, r1
 8003312:	71fb      	strb	r3, [r7, #7]
 8003314:	4613      	mov	r3, r2
 8003316:	80bb      	strh	r3, [r7, #4]

	// Backward
	if (direction == DIR_BCK) {
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10a      	bne.n	8003334 <mtrA_mov+0x2c>
		MOTOR_AIN1_Clr();
 800331e:	2200      	movs	r2, #0
 8003320:	2108      	movs	r1, #8
 8003322:	4811      	ldr	r0, [pc, #68]	; (8003368 <mtrA_mov+0x60>)
 8003324:	f002 fc7c 	bl	8005c20 <HAL_GPIO_WritePin>
		MOTOR_AIN2_Set();
 8003328:	2201      	movs	r2, #1
 800332a:	2104      	movs	r1, #4
 800332c:	480e      	ldr	r0, [pc, #56]	; (8003368 <mtrA_mov+0x60>)
 800332e:	f002 fc77 	bl	8005c20 <HAL_GPIO_WritePin>
 8003332:	e009      	b.n	8003348 <mtrA_mov+0x40>
	}
	// Forward
	else {
		MOTOR_AIN1_Set();
 8003334:	2201      	movs	r2, #1
 8003336:	2108      	movs	r1, #8
 8003338:	480b      	ldr	r0, [pc, #44]	; (8003368 <mtrA_mov+0x60>)
 800333a:	f002 fc71 	bl	8005c20 <HAL_GPIO_WritePin>
		MOTOR_AIN2_Clr();
 800333e:	2200      	movs	r2, #0
 8003340:	2104      	movs	r1, #4
 8003342:	4809      	ldr	r0, [pc, #36]	; (8003368 <mtrA_mov+0x60>)
 8003344:	f002 fc6c 	bl	8005c20 <HAL_GPIO_WritePin>
	}

	// Set speed
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 8003348:	88bb      	ldrh	r3, [r7, #4]
 800334a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800334e:	d302      	bcc.n	8003356 <mtrA_mov+0x4e>
 8003350:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8003354:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim8Ptr, PWMA_TIM_CH, speed);
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <mtrA_mov+0x64>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	88ba      	ldrh	r2, [r7, #4]
 800335e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40020000 	.word	0x40020000
 800336c:	200005f8 	.word	0x200005f8

08003370 <mtrB_mov>:

void mtrB_mov(uint8_t direction, uint16_t speed) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	460a      	mov	r2, r1
 800337a:	71fb      	strb	r3, [r7, #7]
 800337c:	4613      	mov	r3, r2
 800337e:	80bb      	strh	r3, [r7, #4]

	// Backward
	if (direction == DIR_BCK) {
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <mtrB_mov+0x2c>
		MOTOR_BIN1_Clr();
 8003386:	2200      	movs	r2, #0
 8003388:	2110      	movs	r1, #16
 800338a:	4811      	ldr	r0, [pc, #68]	; (80033d0 <mtrB_mov+0x60>)
 800338c:	f002 fc48 	bl	8005c20 <HAL_GPIO_WritePin>
		MOTOR_BIN2_Set();
 8003390:	2201      	movs	r2, #1
 8003392:	2120      	movs	r1, #32
 8003394:	480e      	ldr	r0, [pc, #56]	; (80033d0 <mtrB_mov+0x60>)
 8003396:	f002 fc43 	bl	8005c20 <HAL_GPIO_WritePin>
 800339a:	e009      	b.n	80033b0 <mtrB_mov+0x40>
	}
	// Forward
	else {
		MOTOR_BIN1_Set();
 800339c:	2201      	movs	r2, #1
 800339e:	2110      	movs	r1, #16
 80033a0:	480b      	ldr	r0, [pc, #44]	; (80033d0 <mtrB_mov+0x60>)
 80033a2:	f002 fc3d 	bl	8005c20 <HAL_GPIO_WritePin>
		MOTOR_BIN2_Clr();
 80033a6:	2200      	movs	r2, #0
 80033a8:	2120      	movs	r1, #32
 80033aa:	4809      	ldr	r0, [pc, #36]	; (80033d0 <mtrB_mov+0x60>)
 80033ac:	f002 fc38 	bl	8005c20 <HAL_GPIO_WritePin>
	}

	// Set speed
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 80033b0:	88bb      	ldrh	r3, [r7, #4]
 80033b2:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80033b6:	d302      	bcc.n	80033be <mtrB_mov+0x4e>
 80033b8:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80033bc:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim8Ptr, PWMB_TIM_CH, speed);
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <mtrB_mov+0x64>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	88ba      	ldrh	r2, [r7, #4]
 80033c6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40020000 	.word	0x40020000
 80033d4:	200005f8 	.word	0x200005f8

080033d8 <mtr_stop>:

/* Set params and stop both motors */
void mtr_stop() {
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
	motorA->dir = DIR_FWD;
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <mtr_stop+0x44>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2201      	movs	r2, #1
 80033e2:	705a      	strb	r2, [r3, #1]
	motorA->pwmVal = 0;
 80033e4:	4b0d      	ldr	r3, [pc, #52]	; (800341c <mtr_stop+0x44>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2200      	movs	r2, #0
 80033ea:	605a      	str	r2, [r3, #4]
	motorB->dir = DIR_FWD;
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <mtr_stop+0x48>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2201      	movs	r2, #1
 80033f2:	705a      	strb	r2, [r3, #1]
	motorB->pwmVal = 0;
 80033f4:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <mtr_stop+0x48>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2200      	movs	r2, #0
 80033fa:	605a      	str	r2, [r3, #4]
	mtrA_mov(DIR_FWD, 0);
 80033fc:	2100      	movs	r1, #0
 80033fe:	2001      	movs	r0, #1
 8003400:	f7ff ff82 	bl	8003308 <mtrA_mov>
	mtrB_mov(DIR_FWD, 0);
 8003404:	2100      	movs	r1, #0
 8003406:	2001      	movs	r0, #1
 8003408:	f7ff ffb2 	bl	8003370 <mtrB_mov>
	turnServo(STRAIGHT);
 800340c:	2001      	movs	r0, #1
 800340e:	f000 ff95 	bl	800433c <turnServo>
	osDelay(100);
 8003412:	2064      	movs	r0, #100	; 0x64
 8003414:	f006 ff22 	bl	800a25c <osDelay>
}
 8003418:	bf00      	nop
 800341a:	bd80      	pop	{r7, pc}
 800341c:	200005e0 	.word	0x200005e0
 8003420:	200005e4 	.word	0x200005e4

08003424 <mtr_mov>:

void mtr_mov(MotorData* motor) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	if (motor->suspend > 0) {
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <mtr_mov+0x1a>
		mtr_stop();
 8003434:	f7ff ffd0 	bl	80033d8 <mtr_stop>
		mtr_continue();
 8003438:	f000 f83a 	bl	80034b0 <mtr_continue>
		return;
 800343c:	e01c      	b.n	8003478 <mtr_mov+0x54>
	}
	if (motor == motorA)  {
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <mtr_mov+0x5c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	429a      	cmp	r2, r3
 8003446:	d109      	bne.n	800345c <mtr_mov+0x38>
		mtrA_mov(motor->dir, motor->pwmVal);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	785a      	ldrb	r2, [r3, #1]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	b29b      	uxth	r3, r3
 8003452:	4619      	mov	r1, r3
 8003454:	4610      	mov	r0, r2
 8003456:	f7ff ff57 	bl	8003308 <mtrA_mov>
 800345a:	e00d      	b.n	8003478 <mtr_mov+0x54>
	}
	else if (motor == motorB) {
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <mtr_mov+0x60>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d108      	bne.n	8003478 <mtr_mov+0x54>
		mtrB_mov(motor->dir, motor->pwmVal);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	785a      	ldrb	r2, [r3, #1]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	b29b      	uxth	r3, r3
 8003470:	4619      	mov	r1, r3
 8003472:	4610      	mov	r0, r2
 8003474:	f7ff ff7c 	bl	8003370 <mtrB_mov>
	}
}
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200005e0 	.word	0x200005e0
 8003484:	200005e4 	.word	0x200005e4

08003488 <mtr_SetParamAndMove>:

void mtr_SetParamAndMove(MotorData* motor, uint8_t param_dir, uint32_t param_pwmVal) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	460b      	mov	r3, r1
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	72fb      	strb	r3, [r7, #11]
	motor->dir = param_dir;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	7afa      	ldrb	r2, [r7, #11]
 800349a:	705a      	strb	r2, [r3, #1]
	motor->pwmVal = param_pwmVal;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	605a      	str	r2, [r3, #4]
	mtr_mov(motor);
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7ff ffbe 	bl	8003424 <mtr_mov>
}
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <mtr_continue>:
}

/*
 * Restore movement, is called in mtr_mov() if the suspend status is on
 */
void mtr_continue() {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
	if (!motorA->suspend) return;	// Not suspended or likely an error
 80034b4:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <mtr_continue+0xc4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d058      	beq.n	8003570 <mtr_continue+0xc0>

	if ((motorA->suspend == SUS_BACK) || (motorA->suspend == SUS_STOPPID)) {	// Needs SOSBack
 80034be:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <mtr_continue+0xc4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d004      	beq.n	80034d2 <mtr_continue+0x22>
 80034c8:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <mtr_continue+0xc4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d101      	bne.n	80034d6 <mtr_continue+0x26>
		mtr_SOSBack();
 80034d2:	f000 f857 	bl	8003584 <mtr_SOSBack>
		//HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
	}
	if (motorA->suspend == SUS_STOPPID) {	// Stop PID, do not restore movement
 80034d6:	4b27      	ldr	r3, [pc, #156]	; (8003574 <mtr_continue+0xc4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d102      	bne.n	80034e6 <mtr_continue+0x36>
		stopPID();
 80034e0:	f000 f9c4 	bl	800386c <stopPID>
 80034e4:	e033      	b.n	800354e <mtr_continue+0x9e>
	}
	else {									// Restore movement, in case of SUS_BACK
		turnServo(backup->servoDir);
 80034e6:	4b24      	ldr	r3, [pc, #144]	; (8003578 <mtr_continue+0xc8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 ff25 	bl	800433c <turnServo>
		motorA->dir = backup->mtrADir;
 80034f2:	4b21      	ldr	r3, [pc, #132]	; (8003578 <mtr_continue+0xc8>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4b1f      	ldr	r3, [pc, #124]	; (8003574 <mtr_continue+0xc4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	7852      	ldrb	r2, [r2, #1]
 80034fc:	705a      	strb	r2, [r3, #1]
		motorA->pwmVal = backup->mtrAPWM;
 80034fe:	4b1e      	ldr	r3, [pc, #120]	; (8003578 <mtr_continue+0xc8>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <mtr_continue+0xc4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6852      	ldr	r2, [r2, #4]
 8003508:	605a      	str	r2, [r3, #4]
		motorB->dir = backup->mtrBDir;
 800350a:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <mtr_continue+0xc8>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b1b      	ldr	r3, [pc, #108]	; (800357c <mtr_continue+0xcc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	7892      	ldrb	r2, [r2, #2]
 8003514:	705a      	strb	r2, [r3, #1]
		motorB->pwmVal = backup->mtrBPWM;
 8003516:	4b18      	ldr	r3, [pc, #96]	; (8003578 <mtr_continue+0xc8>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b18      	ldr	r3, [pc, #96]	; (800357c <mtr_continue+0xcc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6892      	ldr	r2, [r2, #8]
 8003520:	605a      	str	r2, [r3, #4]
		mtrA_mov(motorA->dir, motorA->pwmVal);
 8003522:	4b14      	ldr	r3, [pc, #80]	; (8003574 <mtr_continue+0xc4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	785a      	ldrb	r2, [r3, #1]
 8003528:	4b12      	ldr	r3, [pc, #72]	; (8003574 <mtr_continue+0xc4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	b29b      	uxth	r3, r3
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f7ff fee8 	bl	8003308 <mtrA_mov>
		mtrB_mov(motorB->dir, motorB->pwmVal);
 8003538:	4b10      	ldr	r3, [pc, #64]	; (800357c <mtr_continue+0xcc>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	785a      	ldrb	r2, [r3, #1]
 800353e:	4b0f      	ldr	r3, [pc, #60]	; (800357c <mtr_continue+0xcc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	b29b      	uxth	r3, r3
 8003546:	4619      	mov	r1, r3
 8003548:	4610      	mov	r0, r2
 800354a:	f7ff ff11 	bl	8003370 <mtrB_mov>
	}
	backup_reset();
 800354e:	f7ff fdf3 	bl	8003138 <backup_reset>
	motorA->suspend = 0;
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <mtr_continue+0xc4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]
	motorB->suspend = 0;
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <mtr_continue+0xcc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_SET);
 8003562:	2201      	movs	r2, #1
 8003564:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003568:	4805      	ldr	r0, [pc, #20]	; (8003580 <mtr_continue+0xd0>)
 800356a:	f002 fb59 	bl	8005c20 <HAL_GPIO_WritePin>
 800356e:	e000      	b.n	8003572 <mtr_continue+0xc2>
	if (!motorA->suspend) return;	// Not suspended or likely an error
 8003570:	bf00      	nop
}
 8003572:	bd80      	pop	{r7, pc}
 8003574:	200005e0 	.word	0x200005e0
 8003578:	200005f0 	.word	0x200005f0
 800357c:	200005e4 	.word	0x200005e4
 8003580:	40021000 	.word	0x40021000

08003584 <mtr_SOSBack>:

/* Used in emergency cases when car is too close to obstacles only */
float mtr_SOSBack() {
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
	mtrA_mov(DIR_BCK, 1800);
 8003588:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 800358c:	2000      	movs	r0, #0
 800358e:	f7ff febb 	bl	8003308 <mtrA_mov>
	mtrB_mov(DIR_BCK, 1800);
 8003592:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8003596:	2000      	movs	r0, #0
 8003598:	f7ff feea 	bl	8003370 <mtrB_mov>
	osDelay(500);
 800359c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035a0:	f006 fe5c 	bl	800a25c <osDelay>
	mtr_stop();
 80035a4:	f7ff ff18 	bl	80033d8 <mtr_stop>
	return SOSBACK_DIST_CNT / CNT_PER_CM;
 80035a8:	4b02      	ldr	r3, [pc, #8]	; (80035b4 <mtr_SOSBack+0x30>)
 80035aa:	ee07 3a90 	vmov	s15, r3
}
 80035ae:	eeb0 0a67 	vmov.f32	s0, s15
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	c12eb4b4 	.word	0xc12eb4b4

080035b8 <mtr_mov_cnt>:

void mtr_mov_cnt(int target_A, int target_B) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
	mtrA_init((int16_t)target_A, 2, 0.05, 0.0001, 1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	b21b      	sxth	r3, r3
 80035c6:	2201      	movs	r2, #1
 80035c8:	eddf 0a23 	vldr	s1, [pc, #140]	; 8003658 <mtr_mov_cnt+0xa0>
 80035cc:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800365c <mtr_mov_cnt+0xa4>
 80035d0:	2102      	movs	r1, #2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fdce 	bl	8003174 <mtrA_init>
	mtrB_init((int16_t)target_B, 2, 0.05, 0.0001, 1);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	b21b      	sxth	r3, r3
 80035dc:	2201      	movs	r2, #1
 80035de:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8003658 <mtr_mov_cnt+0xa0>
 80035e2:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800365c <mtr_mov_cnt+0xa4>
 80035e6:	2102      	movs	r1, #2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fe29 	bl	8003240 <mtrB_init>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 80035ee:	e019      	b.n	8003624 <mtr_mov_cnt+0x6c>
		PID_Control(motorA, motorAPID);
 80035f0:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <mtr_mov_cnt+0xa8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1b      	ldr	r2, [pc, #108]	; (8003664 <mtr_mov_cnt+0xac>)
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f88a 	bl	8003714 <PID_Control>
		PID_Control(motorB, motorBPID);
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <mtr_mov_cnt+0xb0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a19      	ldr	r2, [pc, #100]	; (800366c <mtr_mov_cnt+0xb4>)
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f882 	bl	8003714 <PID_Control>
		mtr_mov(motorA);
 8003610:	4b13      	ldr	r3, [pc, #76]	; (8003660 <mtr_mov_cnt+0xa8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff05 	bl	8003424 <mtr_mov>
		mtr_mov(motorB);
 800361a:	4b13      	ldr	r3, [pc, #76]	; (8003668 <mtr_mov_cnt+0xb0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff ff00 	bl	8003424 <mtr_mov>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <mtr_mov_cnt+0xac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	bfb8      	it	lt
 8003630:	425b      	neglt	r3, r3
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b32      	cmp	r3, #50	; 0x32
 8003636:	d8db      	bhi.n	80035f0 <mtr_mov_cnt+0x38>
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <mtr_mov_cnt+0xb4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	bfb8      	it	lt
 8003644:	425b      	neglt	r3, r3
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b32      	cmp	r3, #50	; 0x32
 800364a:	d8d1      	bhi.n	80035f0 <mtr_mov_cnt+0x38>
	}
	mtr_stop();
 800364c:	f7ff fec4 	bl	80033d8 <mtr_stop>
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	38d1b717 	.word	0x38d1b717
 800365c:	3d4ccccd 	.word	0x3d4ccccd
 8003660:	200005e0 	.word	0x200005e0
 8003664:	200005e8 	.word	0x200005e8
 8003668:	200005e4 	.word	0x200005e4
 800366c:	200005ec 	.word	0x200005ec

08003670 <mtr_mov_cm>:
	}
	mtr_stop();
}


double mtr_mov_cm(double cm) {
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	ed87 0b00 	vstr	d0, [r7]
	double cnt = cm * CNT_PER_CM;
 800367a:	a324      	add	r3, pc, #144	; (adr r3, 800370c <mtr_mov_cm+0x9c>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003684:	f7fc ffb8 	bl	80005f8 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	cnt = round(cnt);
 8003690:	ed97 0b02 	vldr	d0, [r7, #8]
 8003694:	f00c fa58 	bl	800fb48 <round>
 8003698:	ed87 0b02 	vstr	d0, [r7, #8]
	mtr_mov_cnt((int)cnt, (int)cnt);
 800369c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036a0:	f7fd fa5a 	bl	8000b58 <__aeabi_d2iz>
 80036a4:	4604      	mov	r4, r0
 80036a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036aa:	f7fd fa55 	bl	8000b58 <__aeabi_d2iz>
 80036ae:	4603      	mov	r3, r0
 80036b0:	4619      	mov	r1, r3
 80036b2:	4620      	mov	r0, r4
 80036b4:	f7ff ff80 	bl	80035b8 <mtr_mov_cnt>
	return ((motorAPID->count + motorBPID->count) / 2) / CNT_PER_CM;
 80036b8:	4b11      	ldr	r3, [pc, #68]	; (8003700 <mtr_mov_cm+0x90>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036c0:	461a      	mov	r2, r3
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <mtr_mov_cm+0x94>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ca:	4413      	add	r3, r2
 80036cc:	0fda      	lsrs	r2, r3, #31
 80036ce:	4413      	add	r3, r2
 80036d0:	105b      	asrs	r3, r3, #1
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036da:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003708 <mtr_mov_cm+0x98>
 80036de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036e2:	ee16 0a90 	vmov	r0, s13
 80036e6:	f7fc ff2f 	bl	8000548 <__aeabi_f2d>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	ec43 2b17 	vmov	d7, r2, r3
}
 80036f2:	eeb0 0a47 	vmov.f32	s0, s14
 80036f6:	eef0 0a67 	vmov.f32	s1, s15
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd90      	pop	{r4, r7, pc}
 8003700:	200005e8 	.word	0x200005e8
 8003704:	200005ec 	.word	0x200005ec
 8003708:	42928831 	.word	0x42928831
 800370c:	20000000 	.word	0x20000000
 8003710:	40525106 	.word	0x40525106

08003714 <PID_Control>:

void PID_Control(MotorData* motor, MotorPIDData* motorPID) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
	  //Control Loop
	if (abs(motorPID->error)>MAX_PID_ERR) { //more than 100  difference
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	bfb8      	it	lt
 8003728:	425b      	neglt	r3, r3
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b32      	cmp	r3, #50	; 0x32
 800372e:	f240 8092 	bls.w	8003856 <PID_Control+0x142>
  	    motorPID->error = motorPID->target - motorPID->count;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003738:	b29a      	uxth	r2, r3
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003740:	b29b      	uxth	r3, r3
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	b29b      	uxth	r3, r3
 8003746:	b21a      	sxth	r2, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	809a      	strh	r2, [r3, #4]

  	    if (motorPID->error > 0)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	dd03      	ble.n	800375e <PID_Control+0x4a>
        	motor->dir = DIR_FWD;	// Forward
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	705a      	strb	r2, [r3, #1]
 800375c:	e002      	b.n	8003764 <PID_Control+0x50>
        else
        	motor->dir = DIR_BCK;	// Backward
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	705a      	strb	r2, [r3, #1]

        int32_t millisNow = HAL_GetTick();
 8003764:	f001 faec 	bl	8004d40 <HAL_GetTick>
 8003768:	4603      	mov	r3, r0
 800376a:	617b      	str	r3, [r7, #20]
        int32_t dt = (millisNow - motorPID->millisOld); // time elapsed in millisecond
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	613b      	str	r3, [r7, #16]
        motorPID->millisOld = millisNow; // store the current time for next round
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	611a      	str	r2, [r3, #16]

        motorPID->error_area = motorPID->error_area + motorPID->error * dt; // area under error for Ki
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003786:	4619      	mov	r1, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	441a      	add	r2, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	609a      	str	r2, [r3, #8]

        int32_t error_change = motorPID->error - motorPID->error_old; // change in error
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800379a:	461a      	mov	r2, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	60fb      	str	r3, [r7, #12]
        motorPID->error_old = motorPID->error; //store the error for next round
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037aa:	461a      	mov	r2, r3
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	60da      	str	r2, [r3, #12]
        float error_rate = (float)error_change / dt; // for Kd
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	ee07 3a90 	vmov	s15, r3
 80037c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c8:	edc7 7a02 	vstr	s15, [r7, #8]

        motor->pwmVal = abs((int32_t)(motorPID->error * motorPID->Kp + motorPID->error_area * motorPID->Ki + error_rate * motorPID->Kd)) / 2;  // PID
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80037e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80037f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	edd3 6a06 	vldr	s13, [r3, #24]
 8003804:	edd7 7a02 	vldr	s15, [r7, #8]
 8003808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800380c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003814:	ee17 3a90 	vmov	r3, s15
 8003818:	2b00      	cmp	r3, #0
 800381a:	bfb8      	it	lt
 800381c:	425b      	neglt	r3, r3
 800381e:	0fda      	lsrs	r2, r3, #31
 8003820:	4413      	add	r3, r2
 8003822:	105b      	asrs	r3, r3, #1
 8003824:	461a      	mov	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	605a      	str	r2, [r3, #4]
        osDelay(10);
 800382a:	200a      	movs	r0, #10
 800382c:	f006 fd16 	bl	800a25c <osDelay>
        if (motor->pwmVal > MAX_SPEED)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8003838:	d303      	bcc.n	8003842 <PID_Control+0x12e>
        	motor->pwmVal = MAX_SPEED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003840:	605a      	str	r2, [r3, #4]
        if (motor->pwmVal < MIN_SPEED)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800384a:	d20a      	bcs.n	8003862 <PID_Control+0x14e>
        	motor-> pwmVal = MIN_SPEED;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003852:	605a      	str	r2, [r3, #4]
	} // if loop
	else {
		motor->dir = DIR_FWD;
		motor->pwmVal = 0;
	}
}
 8003854:	e005      	b.n	8003862 <PID_Control+0x14e>
		motor->dir = DIR_FWD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	705a      	strb	r2, [r3, #1]
		motor->pwmVal = 0;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	605a      	str	r2, [r3, #4]
}
 8003862:	bf00      	nop
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <stopPID>:

void stopPID() {
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
	motorAPID->error = 0;
 8003870:	4b16      	ldr	r3, [pc, #88]	; (80038cc <stopPID+0x60>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2200      	movs	r2, #0
 8003876:	809a      	strh	r2, [r3, #4]
	motorBPID->error = 0;
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <stopPID+0x64>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2200      	movs	r2, #0
 800387e:	809a      	strh	r2, [r3, #4]
	motorAPID->target = motorAPID->count;
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <stopPID+0x60>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <stopPID+0x60>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f9b2 2000 	ldrsh.w	r2, [r2]
 800388c:	805a      	strh	r2, [r3, #2]
	motorBPID->target = motorBPID->count;
 800388e:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <stopPID+0x64>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <stopPID+0x64>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f9b2 2000 	ldrsh.w	r2, [r2]
 800389a:	805a      	strh	r2, [r3, #2]
	mtr_stop();
 800389c:	f7ff fd9c 	bl	80033d8 <mtr_stop>
	// Also clear backup
	backup->mtrADir = DIR_FWD;
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <stopPID+0x68>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2201      	movs	r2, #1
 80038a6:	705a      	strb	r2, [r3, #1]
	backup->mtrBDir = DIR_FWD;
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <stopPID+0x68>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2201      	movs	r2, #1
 80038ae:	709a      	strb	r2, [r3, #2]
	backup->mtrAPWM = 0;
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <stopPID+0x68>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2200      	movs	r2, #0
 80038b6:	605a      	str	r2, [r3, #4]
	backup->mtrBPWM = 0;
 80038b8:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <stopPID+0x68>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
	backup->servoDir = STRAIGHT;
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <stopPID+0x68>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]
}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	200005e8 	.word	0x200005e8
 80038d0:	200005ec 	.word	0x200005ec
 80038d4:	200005f0 	.word	0x200005f0

080038d8 <turn>:

void turn(float turning_angle) {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	ed87 0a01 	vstr	s0, [r7, #4]
	if (abs(turning_angle) < MAX_ORI_ERR)		// Too small, turn may not be accurate
 80038e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80038e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038ea:	ee17 3a90 	vmov	r3, s15
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bfb8      	it	lt
 80038f2:	425b      	neglt	r3, r3
 80038f4:	ee07 3a90 	vmov	s15, r3
 80038f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038fc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003908:	f100 814b 	bmi.w	8003ba2 <turn+0x2ca>
		return;
	if ((turning_angle < 0) || (turning_angle >= 360))	// Invalid turning angle
 800390c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003910:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003918:	f100 8145 	bmi.w	8003ba6 <turn+0x2ce>
 800391c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003920:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8003bb0 <turn+0x2d8>
 8003924:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392c:	f280 813b 	bge.w	8003ba6 <turn+0x2ce>
		return;

	float target_ori = (*ori) + turning_angle;
 8003930:	4ba0      	ldr	r3, [pc, #640]	; (8003bb4 <turn+0x2dc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	ed97 7a01 	vldr	s14, [r7, #4]
 800393c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003940:	edc7 7a07 	vstr	s15, [r7, #28]
	while (target_ori >= 360) target_ori -= 360;
 8003944:	e007      	b.n	8003956 <turn+0x7e>
 8003946:	edd7 7a07 	vldr	s15, [r7, #28]
 800394a:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8003bb0 <turn+0x2d8>
 800394e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003952:	edc7 7a07 	vstr	s15, [r7, #28]
 8003956:	edd7 7a07 	vldr	s15, [r7, #28]
 800395a:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8003bb0 <turn+0x2d8>
 800395e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003966:	daee      	bge.n	8003946 <turn+0x6e>
	while (target_ori < 0) target_ori += 360;
 8003968:	e007      	b.n	800397a <turn+0xa2>
 800396a:	edd7 7a07 	vldr	s15, [r7, #28]
 800396e:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8003bb0 <turn+0x2d8>
 8003972:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003976:	edc7 7a07 	vstr	s15, [r7, #28]
 800397a:	edd7 7a07 	vldr	s15, [r7, #28]
 800397e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003986:	d4f0      	bmi.n	800396a <turn+0x92>

	uint8_t near_0 = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	76fb      	strb	r3, [r7, #27]
	if ((target_ori < MAX_ORI_ERR) || (target_ori > 360 - MAX_ORI_ERR)) {
 800398c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003990:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399c:	d408      	bmi.n	80039b0 <turn+0xd8>
 800399e:	edd7 7a07 	vldr	s15, [r7, #28]
 80039a2:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8003bb8 <turn+0x2e0>
 80039a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ae:	dd01      	ble.n	80039b4 <turn+0xdc>
		near_0 = 1;
 80039b0:	2301      	movs	r3, #1
 80039b2:	76fb      	strb	r3, [r7, #27]
	}

	uint8_t mtr_dir = 1;	// 0: stop, 1: fwd, 2: bck
 80039b4:	2301      	movs	r3, #1
 80039b6:	76bb      	strb	r3, [r7, #26]

	while (mtr_dir) {
 80039b8:	e0ec      	b.n	8003b94 <turn+0x2bc>
		if (turning_angle <= 180) {	// Turn left
 80039ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80039be:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003bbc <turn+0x2e4>
 80039c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ca:	d82e      	bhi.n	8003a2a <turn+0x152>
			if (mtr_dir == 1) {
 80039cc:	7ebb      	ldrb	r3, [r7, #26]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d115      	bne.n	80039fe <turn+0x126>
				turnServo(LEFT);
 80039d2:	2000      	movs	r0, #0
 80039d4:	f000 fcb2 	bl	800433c <turnServo>
				mtr_SetParamAndMove(motorA, DIR_FWD, 1200);
 80039d8:	4b79      	ldr	r3, [pc, #484]	; (8003bc0 <turn+0x2e8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80039e0:	2101      	movs	r1, #1
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fd50 	bl	8003488 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_FWD, 1200);
 80039e8:	4b76      	ldr	r3, [pc, #472]	; (8003bc4 <turn+0x2ec>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80039f0:	2101      	movs	r1, #1
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fd48 	bl	8003488 <mtr_SetParamAndMove>
				mtr_dir = 2;
 80039f8:	2302      	movs	r3, #2
 80039fa:	76bb      	strb	r3, [r7, #26]
 80039fc:	e043      	b.n	8003a86 <turn+0x1ae>
			}
			else {
				turnServo(RIGHT);
 80039fe:	2002      	movs	r0, #2
 8003a00:	f000 fc9c 	bl	800433c <turnServo>
				mtr_SetParamAndMove(motorA, DIR_BCK, 1200);
 8003a04:	4b6e      	ldr	r3, [pc, #440]	; (8003bc0 <turn+0x2e8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fd3a 	bl	8003488 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_BCK, 1200);
 8003a14:	4b6b      	ldr	r3, [pc, #428]	; (8003bc4 <turn+0x2ec>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fd32 	bl	8003488 <mtr_SetParamAndMove>
				mtr_dir = 1;
 8003a24:	2301      	movs	r3, #1
 8003a26:	76bb      	strb	r3, [r7, #26]
 8003a28:	e02d      	b.n	8003a86 <turn+0x1ae>
			}
		}
		else {						// Turn right
			if (mtr_dir == 1) {
 8003a2a:	7ebb      	ldrb	r3, [r7, #26]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d115      	bne.n	8003a5c <turn+0x184>
				turnServo(RIGHT);
 8003a30:	2002      	movs	r0, #2
 8003a32:	f000 fc83 	bl	800433c <turnServo>
				mtr_SetParamAndMove(motorA, DIR_FWD, 1200);
 8003a36:	4b62      	ldr	r3, [pc, #392]	; (8003bc0 <turn+0x2e8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003a3e:	2101      	movs	r1, #1
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fd21 	bl	8003488 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_FWD, 1200);
 8003a46:	4b5f      	ldr	r3, [pc, #380]	; (8003bc4 <turn+0x2ec>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003a4e:	2101      	movs	r1, #1
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fd19 	bl	8003488 <mtr_SetParamAndMove>
				mtr_dir = 2;
 8003a56:	2302      	movs	r3, #2
 8003a58:	76bb      	strb	r3, [r7, #26]
 8003a5a:	e014      	b.n	8003a86 <turn+0x1ae>
			}
			else {
				turnServo(LEFT);
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f000 fc6d 	bl	800433c <turnServo>
				mtr_SetParamAndMove(motorA, DIR_BCK, 1200);
 8003a62:	4b57      	ldr	r3, [pc, #348]	; (8003bc0 <turn+0x2e8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fd0b 	bl	8003488 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_BCK, 1200);
 8003a72:	4b54      	ldr	r3, [pc, #336]	; (8003bc4 <turn+0x2ec>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fd03 	bl	8003488 <mtr_SetParamAndMove>
				mtr_dir = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	76bb      	strb	r3, [r7, #26]
			}
		}

		// Poll orientation value and break if needed
		if (!near_0) {
 8003a86:	7efb      	ldrb	r3, [r7, #27]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d12a      	bne.n	8003ae2 <turn+0x20a>
			for (int i = 0; i < 400; i++) {
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e022      	b.n	8003ad8 <turn+0x200>
				if (abs((*ori) - target_ori) < MAX_ORI_ERR) {
 8003a92:	4b48      	ldr	r3, [pc, #288]	; (8003bb4 <turn+0x2dc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	ed93 7a00 	vldr	s14, [r3]
 8003a9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003aa6:	ee17 3a90 	vmov	r3, s15
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bfb8      	it	lt
 8003aae:	425b      	neglt	r3, r3
 8003ab0:	ee07 3a90 	vmov	s15, r3
 8003ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac4:	d502      	bpl.n	8003acc <turn+0x1f4>
					mtr_dir = 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	76bb      	strb	r3, [r7, #26]
					break;
 8003aca:	e061      	b.n	8003b90 <turn+0x2b8>
				}
				osDelay(1);
 8003acc:	2001      	movs	r0, #1
 8003ace:	f006 fbc5 	bl	800a25c <osDelay>
			for (int i = 0; i < 400; i++) {
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003ade:	dbd8      	blt.n	8003a92 <turn+0x1ba>
 8003ae0:	e056      	b.n	8003b90 <turn+0x2b8>
			}
		}
		else {
			float bound_lo, bound_hi;
			if (target_ori > 350) {
 8003ae2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ae6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003bc8 <turn+0x2f0>
 8003aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af2:	dd14      	ble.n	8003b1e <turn+0x246>
				bound_lo = target_ori - MAX_ORI_ERR;
 8003af4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003af8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003afc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b00:	edc7 7a04 	vstr	s15, [r7, #16]
				bound_hi = target_ori + MAX_ORI_ERR - 360;
 8003b04:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b08:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003b0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b10:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003bb0 <turn+0x2d8>
 8003b14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b18:	edc7 7a03 	vstr	s15, [r7, #12]
 8003b1c:	e013      	b.n	8003b46 <turn+0x26e>
			}
			else {
				bound_lo = target_ori - MAX_ORI_ERR + 360;
 8003b1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b22:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003b26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b2a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003bb0 <turn+0x2d8>
 8003b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b32:	edc7 7a04 	vstr	s15, [r7, #16]
				bound_hi = target_ori + MAX_ORI_ERR;
 8003b36:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b3a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003b3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b42:	edc7 7a03 	vstr	s15, [r7, #12]
			}
			for (int i = 0; i < 250; i++) {
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	e01e      	b.n	8003b8a <turn+0x2b2>
				if (((*ori) > bound_lo) || ((*ori) < bound_hi)) {
 8003b4c:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <turn+0x2dc>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	edd3 7a00 	vldr	s15, [r3]
 8003b54:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b60:	d40a      	bmi.n	8003b78 <turn+0x2a0>
 8003b62:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <turn+0x2dc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	edd3 7a00 	vldr	s15, [r3]
 8003b6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b76:	dd02      	ble.n	8003b7e <turn+0x2a6>
					mtr_dir = 0;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	76bb      	strb	r3, [r7, #26]
					break;
 8003b7c:	e008      	b.n	8003b90 <turn+0x2b8>
				}
				osDelay(2);
 8003b7e:	2002      	movs	r0, #2
 8003b80:	f006 fb6c 	bl	800a25c <osDelay>
			for (int i = 0; i < 250; i++) {
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	3301      	adds	r3, #1
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2bf9      	cmp	r3, #249	; 0xf9
 8003b8e:	dddd      	ble.n	8003b4c <turn+0x274>
			}
		}
		mtr_stop();
 8003b90:	f7ff fc22 	bl	80033d8 <mtr_stop>
	while (mtr_dir) {
 8003b94:	7ebb      	ldrb	r3, [r7, #26]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f47f af0f 	bne.w	80039ba <turn+0xe2>
	}
	mtr_stop();
 8003b9c:	f7ff fc1c 	bl	80033d8 <mtr_stop>
 8003ba0:	e002      	b.n	8003ba8 <turn+0x2d0>
		return;
 8003ba2:	bf00      	nop
 8003ba4:	e000      	b.n	8003ba8 <turn+0x2d0>
		return;
 8003ba6:	bf00      	nop
}
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	43b40000 	.word	0x43b40000
 8003bb4:	200005f4 	.word	0x200005f4
 8003bb8:	43b34000 	.word	0x43b34000
 8003bbc:	43340000 	.word	0x43340000
 8003bc0:	200005e0 	.word	0x200005e0
 8003bc4:	200005e4 	.word	0x200005e4
 8003bc8:	43af0000 	.word	0x43af0000

08003bcc <carTurn>:
/*
 * mtr_dir = { 0: stop, 1: fwd, 2: bck }
 * turning_angle only accept 90 (left) or 270 (right)
 */
void carTurn(uint8_t mtr_dir, float turning_angle) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	ed87 0a00 	vstr	s0, [r7]
 8003bd8:	71fb      	strb	r3, [r7, #7]
	// Check validity of parameters
	if ((mtr_dir < 1) || (mtr_dir > 2))
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8113 	beq.w	8003e08 <carTurn+0x23c>
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	f200 810f 	bhi.w	8003e08 <carTurn+0x23c>
	/*if ((turning_angle != 90) && (turning_angle != 270))
		return;
	*/

	// Calculate target orientation
	float target_ori = (*ori) + turning_angle;
 8003bea:	4b89      	ldr	r3, [pc, #548]	; (8003e10 <carTurn+0x244>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	edd3 7a00 	vldr	s15, [r3]
 8003bf2:	ed97 7a00 	vldr	s14, [r7]
 8003bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bfa:	edc7 7a07 	vstr	s15, [r7, #28]
	while (target_ori >= 360) target_ori -= 360;
 8003bfe:	e007      	b.n	8003c10 <carTurn+0x44>
 8003c00:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c04:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003e14 <carTurn+0x248>
 8003c08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c0c:	edc7 7a07 	vstr	s15, [r7, #28]
 8003c10:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c14:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003e14 <carTurn+0x248>
 8003c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c20:	daee      	bge.n	8003c00 <carTurn+0x34>
	while (target_ori < 0) target_ori += 360;
 8003c22:	e007      	b.n	8003c34 <carTurn+0x68>
 8003c24:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c28:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003e14 <carTurn+0x248>
 8003c2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c30:	edc7 7a07 	vstr	s15, [r7, #28]
 8003c34:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c40:	d4f0      	bmi.n	8003c24 <carTurn+0x58>

	// Adjustments for near 0 degree target orientation
	uint8_t near_0 = 0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	76fb      	strb	r3, [r7, #27]
	float bound_lo, bound_hi;
	if ((target_ori < MAX_ORI_ERR) || (target_ori > 360 - MAX_ORI_ERR)) {
 8003c46:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c4a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c56:	d408      	bmi.n	8003c6a <carTurn+0x9e>
 8003c58:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c5c:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8003e18 <carTurn+0x24c>
 8003c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c68:	dd33      	ble.n	8003cd2 <carTurn+0x106>
		near_0 = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	76fb      	strb	r3, [r7, #27]
		if (target_ori > 350) {
 8003c6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c72:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003e1c <carTurn+0x250>
 8003c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7e:	dd14      	ble.n	8003caa <carTurn+0xde>
			bound_lo = target_ori - MAX_ORI_ERR;
 8003c80:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c84:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003c88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c8c:	edc7 7a05 	vstr	s15, [r7, #20]
			bound_hi = target_ori + MAX_ORI_ERR - 360;
 8003c90:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c94:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003c98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c9c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003e14 <carTurn+0x248>
 8003ca0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ca4:	edc7 7a04 	vstr	s15, [r7, #16]
 8003ca8:	e013      	b.n	8003cd2 <carTurn+0x106>
		}
		else {
			bound_lo = target_ori - MAX_ORI_ERR + 360;
 8003caa:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cae:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003cb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cb6:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8003e14 <carTurn+0x248>
 8003cba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cbe:	edc7 7a05 	vstr	s15, [r7, #20]
			bound_hi = target_ori + MAX_ORI_ERR;
 8003cc2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cc6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003cca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cce:	edc7 7a04 	vstr	s15, [r7, #16]
	mtr_stop();
	osDelay(200);
	*/

	// Start servo and motor in turn direction
	if (((turning_angle <= 180) && (mtr_dir == 1)) || ((turning_angle > 180) && (mtr_dir == 2))) {
 8003cd2:	edd7 7a00 	vldr	s15, [r7]
 8003cd6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003e20 <carTurn+0x254>
 8003cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce2:	d802      	bhi.n	8003cea <carTurn+0x11e>
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d00b      	beq.n	8003d02 <carTurn+0x136>
 8003cea:	edd7 7a00 	vldr	s15, [r7]
 8003cee:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003e20 <carTurn+0x254>
 8003cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfa:	dd06      	ble.n	8003d0a <carTurn+0x13e>
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d103      	bne.n	8003d0a <carTurn+0x13e>
		turnServo(LEFT);
 8003d02:	2000      	movs	r0, #0
 8003d04:	f000 fb1a 	bl	800433c <turnServo>
 8003d08:	e002      	b.n	8003d10 <carTurn+0x144>
	}
	else {
		turnServo(RIGHT);
 8003d0a:	2002      	movs	r0, #2
 8003d0c:	f000 fb16 	bl	800433c <turnServo>
	}
	//turnServo(RIGHT);
	osDelay(200);
 8003d10:	20c8      	movs	r0, #200	; 0xc8
 8003d12:	f006 faa3 	bl	800a25c <osDelay>

	int mtrSpeed = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
	if (mtr_dir == 1) {
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d111      	bne.n	8003d44 <carTurn+0x178>
		mtrSpeed = 3800;
 8003d20:	f640 63d8 	movw	r3, #3800	; 0xed8
 8003d24:	60fb      	str	r3, [r7, #12]
		mtr_SetParamAndMove(motorA, DIR_FWD, mtrSpeed);
 8003d26:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <carTurn+0x258>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fbaa 	bl	8003488 <mtr_SetParamAndMove>
		mtr_SetParamAndMove(motorB, DIR_FWD, mtrSpeed);
 8003d34:	4b3c      	ldr	r3, [pc, #240]	; (8003e28 <carTurn+0x25c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fba3 	bl	8003488 <mtr_SetParamAndMove>
 8003d42:	e010      	b.n	8003d66 <carTurn+0x19a>
	}
	else {
		mtrSpeed = 4000;
 8003d44:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003d48:	60fb      	str	r3, [r7, #12]
		mtr_SetParamAndMove(motorA, DIR_BCK, mtrSpeed);
 8003d4a:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <carTurn+0x258>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fb98 	bl	8003488 <mtr_SetParamAndMove>
		mtr_SetParamAndMove(motorB, DIR_BCK, mtrSpeed);
 8003d58:	4b33      	ldr	r3, [pc, #204]	; (8003e28 <carTurn+0x25c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fb91 	bl	8003488 <mtr_SetParamAndMove>
	}

	// Polling orientation and break when target reached
	while (1) {
		if (!near_0) {
 8003d66:	7efb      	ldrb	r3, [r7, #27]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d11a      	bne.n	8003da2 <carTurn+0x1d6>
			if (abs((*ori) - target_ori) < MAX_ORI_ERR) {
 8003d6c:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <carTurn+0x244>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	ed93 7a00 	vldr	s14, [r3]
 8003d74:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d80:	ee17 3a90 	vmov	r3, s15
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bfb8      	it	lt
 8003d88:	425b      	neglt	r3, r3
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d92:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d9e:	d42f      	bmi.n	8003e00 <carTurn+0x234>
 8003da0:	e015      	b.n	8003dce <carTurn+0x202>
				break;
			}
		}
		else {
			if (((*ori) > bound_lo) || ((*ori) < bound_hi)) {
 8003da2:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <carTurn+0x244>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	edd3 7a00 	vldr	s15, [r3]
 8003daa:	ed97 7a05 	vldr	s14, [r7, #20]
 8003dae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db6:	d424      	bmi.n	8003e02 <carTurn+0x236>
 8003db8:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <carTurn+0x244>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	ed97 7a04 	vldr	s14, [r7, #16]
 8003dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dcc:	dc19      	bgt.n	8003e02 <carTurn+0x236>
				break;
			}
		}
		if (mtrSpeed > 1800) {
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003dd4:	dd02      	ble.n	8003ddc <carTurn+0x210>
			mtrSpeed -= 5;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3b05      	subs	r3, #5
 8003dda:	60fb      	str	r3, [r7, #12]
		}
		mtr_SetParamAndMove(motorA, DIR_FWD, mtrSpeed);
 8003ddc:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <carTurn+0x258>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	2101      	movs	r1, #1
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fb4f 	bl	8003488 <mtr_SetParamAndMove>
		mtr_SetParamAndMove(motorB, DIR_FWD, mtrSpeed);
 8003dea:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <carTurn+0x25c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	2101      	movs	r1, #1
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fb48 	bl	8003488 <mtr_SetParamAndMove>
		osDelay(2);
 8003df8:	2002      	movs	r0, #2
 8003dfa:	f006 fa2f 	bl	800a25c <osDelay>
		if (!near_0) {
 8003dfe:	e7b2      	b.n	8003d66 <carTurn+0x19a>
				break;
 8003e00:	bf00      	nop
	}
	mtr_stop();
 8003e02:	f7ff fae9 	bl	80033d8 <mtr_stop>
 8003e06:	e000      	b.n	8003e0a <carTurn+0x23e>
		return;
 8003e08:	bf00      	nop
	}
	else if ((turning_angle == 90) && (mtr_dir == 2)) {
		mtr_mov_cm(-8.2, -8.2);
	}
	*/
}
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	200005f4 	.word	0x200005f4
 8003e14:	43b40000 	.word	0x43b40000
 8003e18:	43b34000 	.word	0x43b34000
 8003e1c:	43af0000 	.word	0x43af0000
 8003e20:	43340000 	.word	0x43340000
 8003e24:	200005e0 	.word	0x200005e0
 8003e28:	200005e4 	.word	0x200005e4

08003e2c <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8003e32:	2300      	movs	r3, #0
 8003e34:	71fb      	strb	r3, [r7, #7]
 8003e36:	e026      	b.n	8003e86 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	3b50      	subs	r3, #80	; 0x50
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 f82b 	bl	8003e9c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8003e46:	2100      	movs	r1, #0
 8003e48:	2000      	movs	r0, #0
 8003e4a:	f000 f827 	bl	8003e9c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8003e4e:	2100      	movs	r1, #0
 8003e50:	2010      	movs	r0, #16
 8003e52:	f000 f823 	bl	8003e9c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8003e56:	2300      	movs	r3, #0
 8003e58:	71bb      	strb	r3, [r7, #6]
 8003e5a:	e00d      	b.n	8003e78 <OLED_Refresh_Gram+0x4c>
 8003e5c:	79ba      	ldrb	r2, [r7, #6]
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	490d      	ldr	r1, [pc, #52]	; (8003e98 <OLED_Refresh_Gram+0x6c>)
 8003e62:	00d2      	lsls	r2, r2, #3
 8003e64:	440a      	add	r2, r1
 8003e66:	4413      	add	r3, r2
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f815 	bl	8003e9c <OLED_WR_Byte>
 8003e72:	79bb      	ldrb	r3, [r7, #6]
 8003e74:	3301      	adds	r3, #1
 8003e76:	71bb      	strb	r3, [r7, #6]
 8003e78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	daed      	bge.n	8003e5c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	3301      	adds	r3, #1
 8003e84:	71fb      	strb	r3, [r7, #7]
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	2b07      	cmp	r3, #7
 8003e8a:	d9d5      	bls.n	8003e38 <OLED_Refresh_Gram+0xc>
	}   
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000608 	.word	0x20000608

08003e9c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	460a      	mov	r2, r1
 8003ea6:	71fb      	strb	r3, [r7, #7]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8003eac:	79bb      	ldrb	r3, [r7, #6]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d006      	beq.n	8003ec0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eb8:	481c      	ldr	r0, [pc, #112]	; (8003f2c <OLED_WR_Byte+0x90>)
 8003eba:	f001 feb1 	bl	8005c20 <HAL_GPIO_WritePin>
 8003ebe:	e005      	b.n	8003ecc <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ec6:	4819      	ldr	r0, [pc, #100]	; (8003f2c <OLED_WR_Byte+0x90>)
 8003ec8:	f001 feaa 	bl	8005c20 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73fb      	strb	r3, [r7, #15]
 8003ed0:	e01e      	b.n	8003f10 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2120      	movs	r1, #32
 8003ed6:	4815      	ldr	r0, [pc, #84]	; (8003f2c <OLED_WR_Byte+0x90>)
 8003ed8:	f001 fea2 	bl	8005c20 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8003edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	da05      	bge.n	8003ef0 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	2140      	movs	r1, #64	; 0x40
 8003ee8:	4810      	ldr	r0, [pc, #64]	; (8003f2c <OLED_WR_Byte+0x90>)
 8003eea:	f001 fe99 	bl	8005c20 <HAL_GPIO_WritePin>
 8003eee:	e004      	b.n	8003efa <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2140      	movs	r1, #64	; 0x40
 8003ef4:	480d      	ldr	r0, [pc, #52]	; (8003f2c <OLED_WR_Byte+0x90>)
 8003ef6:	f001 fe93 	bl	8005c20 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8003efa:	2201      	movs	r2, #1
 8003efc:	2120      	movs	r1, #32
 8003efe:	480b      	ldr	r0, [pc, #44]	; (8003f2c <OLED_WR_Byte+0x90>)
 8003f00:	f001 fe8e 	bl	8005c20 <HAL_GPIO_WritePin>
		dat<<=1;   
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	2b07      	cmp	r3, #7
 8003f14:	d9dd      	bls.n	8003ed2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8003f16:	2201      	movs	r2, #1
 8003f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f1c:	4803      	ldr	r0, [pc, #12]	; (8003f2c <OLED_WR_Byte+0x90>)
 8003f1e:	f001 fe7f 	bl	8005c20 <HAL_GPIO_WritePin>
} 
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40021000 	.word	0x40021000

08003f30 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8003f36:	2300      	movs	r3, #0
 8003f38:	71fb      	strb	r3, [r7, #7]
 8003f3a:	e014      	b.n	8003f66 <OLED_Clear+0x36>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	71bb      	strb	r3, [r7, #6]
 8003f40:	e00a      	b.n	8003f58 <OLED_Clear+0x28>
 8003f42:	79ba      	ldrb	r2, [r7, #6]
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	490c      	ldr	r1, [pc, #48]	; (8003f78 <OLED_Clear+0x48>)
 8003f48:	00d2      	lsls	r2, r2, #3
 8003f4a:	440a      	add	r2, r1
 8003f4c:	4413      	add	r3, r2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	79bb      	ldrb	r3, [r7, #6]
 8003f54:	3301      	adds	r3, #1
 8003f56:	71bb      	strb	r3, [r7, #6]
 8003f58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	daf0      	bge.n	8003f42 <OLED_Clear+0x12>
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	3301      	adds	r3, #1
 8003f64:	71fb      	strb	r3, [r7, #7]
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	2b07      	cmp	r3, #7
 8003f6a:	d9e7      	bls.n	8003f3c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8003f6c:	f7ff ff5e 	bl	8003e2c <OLED_Refresh_Gram>
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000608 	.word	0x20000608

08003f7c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
 8003f86:	460b      	mov	r3, r1
 8003f88:	71bb      	strb	r3, [r7, #6]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8003f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	db41      	blt.n	800401e <OLED_DrawPoint+0xa2>
 8003f9a:	79bb      	ldrb	r3, [r7, #6]
 8003f9c:	2b3f      	cmp	r3, #63	; 0x3f
 8003f9e:	d83e      	bhi.n	800401e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003fa0:	79bb      	ldrb	r3, [r7, #6]
 8003fa2:	08db      	lsrs	r3, r3, #3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f1c3 0307 	rsb	r3, r3, #7
 8003faa:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003fac:	79bb      	ldrb	r3, [r7, #6]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8003fb4:	7b7b      	ldrb	r3, [r7, #13]
 8003fb6:	f1c3 0307 	rsb	r3, r3, #7
 8003fba:	2201      	movs	r2, #1
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8003fc2:	797b      	ldrb	r3, [r7, #5]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d012      	beq.n	8003fee <OLED_DrawPoint+0x72>
 8003fc8:	79fa      	ldrb	r2, [r7, #7]
 8003fca:	7bbb      	ldrb	r3, [r7, #14]
 8003fcc:	4917      	ldr	r1, [pc, #92]	; (800402c <OLED_DrawPoint+0xb0>)
 8003fce:	00d2      	lsls	r2, r2, #3
 8003fd0:	440a      	add	r2, r1
 8003fd2:	4413      	add	r3, r2
 8003fd4:	7818      	ldrb	r0, [r3, #0]
 8003fd6:	79fa      	ldrb	r2, [r7, #7]
 8003fd8:	7bbb      	ldrb	r3, [r7, #14]
 8003fda:	7bf9      	ldrb	r1, [r7, #15]
 8003fdc:	4301      	orrs	r1, r0
 8003fde:	b2c8      	uxtb	r0, r1
 8003fe0:	4912      	ldr	r1, [pc, #72]	; (800402c <OLED_DrawPoint+0xb0>)
 8003fe2:	00d2      	lsls	r2, r2, #3
 8003fe4:	440a      	add	r2, r1
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4602      	mov	r2, r0
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	e018      	b.n	8004020 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8003fee:	79fa      	ldrb	r2, [r7, #7]
 8003ff0:	7bbb      	ldrb	r3, [r7, #14]
 8003ff2:	490e      	ldr	r1, [pc, #56]	; (800402c <OLED_DrawPoint+0xb0>)
 8003ff4:	00d2      	lsls	r2, r2, #3
 8003ff6:	440a      	add	r2, r1
 8003ff8:	4413      	add	r3, r2
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	b25a      	sxtb	r2, r3
 8003ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004002:	43db      	mvns	r3, r3
 8004004:	b25b      	sxtb	r3, r3
 8004006:	4013      	ands	r3, r2
 8004008:	b259      	sxtb	r1, r3
 800400a:	79fa      	ldrb	r2, [r7, #7]
 800400c:	7bbb      	ldrb	r3, [r7, #14]
 800400e:	b2c8      	uxtb	r0, r1
 8004010:	4906      	ldr	r1, [pc, #24]	; (800402c <OLED_DrawPoint+0xb0>)
 8004012:	00d2      	lsls	r2, r2, #3
 8004014:	440a      	add	r2, r1
 8004016:	4413      	add	r3, r2
 8004018:	4602      	mov	r2, r0
 800401a:	701a      	strb	r2, [r3, #0]
 800401c:	e000      	b.n	8004020 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800401e:	bf00      	nop
}
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000608 	.word	0x20000608

08004030 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	4604      	mov	r4, r0
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	461a      	mov	r2, r3
 800403e:	4623      	mov	r3, r4
 8004040:	71fb      	strb	r3, [r7, #7]
 8004042:	4603      	mov	r3, r0
 8004044:	71bb      	strb	r3, [r7, #6]
 8004046:	460b      	mov	r3, r1
 8004048:	717b      	strb	r3, [r7, #5]
 800404a:	4613      	mov	r3, r2
 800404c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800404e:	79bb      	ldrb	r3, [r7, #6]
 8004050:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8004052:	797b      	ldrb	r3, [r7, #5]
 8004054:	3b20      	subs	r3, #32
 8004056:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8004058:	2300      	movs	r3, #0
 800405a:	73bb      	strb	r3, [r7, #14]
 800405c:	e04d      	b.n	80040fa <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800405e:	793b      	ldrb	r3, [r7, #4]
 8004060:	2b0c      	cmp	r3, #12
 8004062:	d10b      	bne.n	800407c <OLED_ShowChar+0x4c>
 8004064:	797a      	ldrb	r2, [r7, #5]
 8004066:	7bb9      	ldrb	r1, [r7, #14]
 8004068:	4828      	ldr	r0, [pc, #160]	; (800410c <OLED_ShowChar+0xdc>)
 800406a:	4613      	mov	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4403      	add	r3, r0
 8004074:	440b      	add	r3, r1
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	73fb      	strb	r3, [r7, #15]
 800407a:	e007      	b.n	800408c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800407c:	797a      	ldrb	r2, [r7, #5]
 800407e:	7bbb      	ldrb	r3, [r7, #14]
 8004080:	4923      	ldr	r1, [pc, #140]	; (8004110 <OLED_ShowChar+0xe0>)
 8004082:	0112      	lsls	r2, r2, #4
 8004084:	440a      	add	r2, r1
 8004086:	4413      	add	r3, r2
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800408c:	2300      	movs	r3, #0
 800408e:	737b      	strb	r3, [r7, #13]
 8004090:	e02d      	b.n	80040ee <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8004092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004096:	2b00      	cmp	r3, #0
 8004098:	da07      	bge.n	80040aa <OLED_ShowChar+0x7a>
 800409a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800409e:	79b9      	ldrb	r1, [r7, #6]
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff ff6a 	bl	8003f7c <OLED_DrawPoint>
 80040a8:	e00c      	b.n	80040c4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80040aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bf0c      	ite	eq
 80040b2:	2301      	moveq	r3, #1
 80040b4:	2300      	movne	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	79b9      	ldrb	r1, [r7, #6]
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff ff5c 	bl	8003f7c <OLED_DrawPoint>
			temp<<=1;
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
			y++;
 80040ca:	79bb      	ldrb	r3, [r7, #6]
 80040cc:	3301      	adds	r3, #1
 80040ce:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80040d0:	79ba      	ldrb	r2, [r7, #6]
 80040d2:	7b3b      	ldrb	r3, [r7, #12]
 80040d4:	1ad2      	subs	r2, r2, r3
 80040d6:	793b      	ldrb	r3, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d105      	bne.n	80040e8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80040dc:	7b3b      	ldrb	r3, [r7, #12]
 80040de:	71bb      	strb	r3, [r7, #6]
				x++;
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	3301      	adds	r3, #1
 80040e4:	71fb      	strb	r3, [r7, #7]
				break;
 80040e6:	e005      	b.n	80040f4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80040e8:	7b7b      	ldrb	r3, [r7, #13]
 80040ea:	3301      	adds	r3, #1
 80040ec:	737b      	strb	r3, [r7, #13]
 80040ee:	7b7b      	ldrb	r3, [r7, #13]
 80040f0:	2b07      	cmp	r3, #7
 80040f2:	d9ce      	bls.n	8004092 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80040f4:	7bbb      	ldrb	r3, [r7, #14]
 80040f6:	3301      	adds	r3, #1
 80040f8:	73bb      	strb	r3, [r7, #14]
 80040fa:	7bba      	ldrb	r2, [r7, #14]
 80040fc:	793b      	ldrb	r3, [r7, #4]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d3ad      	bcc.n	800405e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bd90      	pop	{r4, r7, pc}
 800410c:	0800fd40 	.word	0x0800fd40
 8004110:	080101b4 	.word	0x080101b4

08004114 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af02      	add	r7, sp, #8
 800411a:	4603      	mov	r3, r0
 800411c:	603a      	str	r2, [r7, #0]
 800411e:	71fb      	strb	r3, [r7, #7]
 8004120:	460b      	mov	r3, r1
 8004122:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8004124:	e01f      	b.n	8004166 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	2b7a      	cmp	r3, #122	; 0x7a
 800412a:	d904      	bls.n	8004136 <OLED_ShowString+0x22>
 800412c:	2300      	movs	r3, #0
 800412e:	71fb      	strb	r3, [r7, #7]
 8004130:	79bb      	ldrb	r3, [r7, #6]
 8004132:	3310      	adds	r3, #16
 8004134:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8004136:	79bb      	ldrb	r3, [r7, #6]
 8004138:	2b3a      	cmp	r3, #58	; 0x3a
 800413a:	d905      	bls.n	8004148 <OLED_ShowString+0x34>
 800413c:	2300      	movs	r3, #0
 800413e:	71fb      	strb	r3, [r7, #7]
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	71bb      	strb	r3, [r7, #6]
 8004144:	f7ff fef4 	bl	8003f30 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781a      	ldrb	r2, [r3, #0]
 800414c:	79b9      	ldrb	r1, [r7, #6]
 800414e:	79f8      	ldrb	r0, [r7, #7]
 8004150:	2301      	movs	r3, #1
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	230c      	movs	r3, #12
 8004156:	f7ff ff6b 	bl	8004030 <OLED_ShowChar>
        x+=8;
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	3308      	adds	r3, #8
 800415e:	71fb      	strb	r3, [r7, #7]
        p++;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1db      	bne.n	8004126 <OLED_ShowString+0x12>
    }  
}	 
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <OLED_Init>:

void OLED_Init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800417c:	f002 fd00 	bl	8006b80 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8004180:	4b41      	ldr	r3, [pc, #260]	; (8004288 <OLED_Init+0x110>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	4a40      	ldr	r2, [pc, #256]	; (8004288 <OLED_Init+0x110>)
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	6713      	str	r3, [r2, #112]	; 0x70
 800418c:	4b3e      	ldr	r3, [pc, #248]	; (8004288 <OLED_Init+0x110>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	4a3d      	ldr	r2, [pc, #244]	; (8004288 <OLED_Init+0x110>)
 8004192:	f023 0304 	bic.w	r3, r3, #4
 8004196:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8004198:	f002 fd06 	bl	8006ba8 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800419c:	2200      	movs	r2, #0
 800419e:	2180      	movs	r1, #128	; 0x80
 80041a0:	483a      	ldr	r0, [pc, #232]	; (800428c <OLED_Init+0x114>)
 80041a2:	f001 fd3d 	bl	8005c20 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80041a6:	2064      	movs	r0, #100	; 0x64
 80041a8:	f000 fdd6 	bl	8004d58 <HAL_Delay>
	OLED_RST_Set();
 80041ac:	2201      	movs	r2, #1
 80041ae:	2180      	movs	r1, #128	; 0x80
 80041b0:	4836      	ldr	r0, [pc, #216]	; (800428c <OLED_Init+0x114>)
 80041b2:	f001 fd35 	bl	8005c20 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80041b6:	2100      	movs	r1, #0
 80041b8:	20ae      	movs	r0, #174	; 0xae
 80041ba:	f7ff fe6f 	bl	8003e9c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80041be:	2100      	movs	r1, #0
 80041c0:	20d5      	movs	r0, #213	; 0xd5
 80041c2:	f7ff fe6b 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80041c6:	2100      	movs	r1, #0
 80041c8:	2050      	movs	r0, #80	; 0x50
 80041ca:	f7ff fe67 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80041ce:	2100      	movs	r1, #0
 80041d0:	20a8      	movs	r0, #168	; 0xa8
 80041d2:	f7ff fe63 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80041d6:	2100      	movs	r1, #0
 80041d8:	203f      	movs	r0, #63	; 0x3f
 80041da:	f7ff fe5f 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80041de:	2100      	movs	r1, #0
 80041e0:	20d3      	movs	r0, #211	; 0xd3
 80041e2:	f7ff fe5b 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80041e6:	2100      	movs	r1, #0
 80041e8:	2000      	movs	r0, #0
 80041ea:	f7ff fe57 	bl	8003e9c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80041ee:	2100      	movs	r1, #0
 80041f0:	2040      	movs	r0, #64	; 0x40
 80041f2:	f7ff fe53 	bl	8003e9c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80041f6:	2100      	movs	r1, #0
 80041f8:	208d      	movs	r0, #141	; 0x8d
 80041fa:	f7ff fe4f 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80041fe:	2100      	movs	r1, #0
 8004200:	2014      	movs	r0, #20
 8004202:	f7ff fe4b 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8004206:	2100      	movs	r1, #0
 8004208:	2020      	movs	r0, #32
 800420a:	f7ff fe47 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800420e:	2100      	movs	r1, #0
 8004210:	2002      	movs	r0, #2
 8004212:	f7ff fe43 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8004216:	2100      	movs	r1, #0
 8004218:	20a1      	movs	r0, #161	; 0xa1
 800421a:	f7ff fe3f 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800421e:	2100      	movs	r1, #0
 8004220:	20c0      	movs	r0, #192	; 0xc0
 8004222:	f7ff fe3b 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8004226:	2100      	movs	r1, #0
 8004228:	20da      	movs	r0, #218	; 0xda
 800422a:	f7ff fe37 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800422e:	2100      	movs	r1, #0
 8004230:	2012      	movs	r0, #18
 8004232:	f7ff fe33 	bl	8003e9c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8004236:	2100      	movs	r1, #0
 8004238:	2081      	movs	r0, #129	; 0x81
 800423a:	f7ff fe2f 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800423e:	2100      	movs	r1, #0
 8004240:	20ef      	movs	r0, #239	; 0xef
 8004242:	f7ff fe2b 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8004246:	2100      	movs	r1, #0
 8004248:	20d9      	movs	r0, #217	; 0xd9
 800424a:	f7ff fe27 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800424e:	2100      	movs	r1, #0
 8004250:	20f1      	movs	r0, #241	; 0xf1
 8004252:	f7ff fe23 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8004256:	2100      	movs	r1, #0
 8004258:	20db      	movs	r0, #219	; 0xdb
 800425a:	f7ff fe1f 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800425e:	2100      	movs	r1, #0
 8004260:	2030      	movs	r0, #48	; 0x30
 8004262:	f7ff fe1b 	bl	8003e9c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8004266:	2100      	movs	r1, #0
 8004268:	20a4      	movs	r0, #164	; 0xa4
 800426a:	f7ff fe17 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800426e:	2100      	movs	r1, #0
 8004270:	20a6      	movs	r0, #166	; 0xa6
 8004272:	f7ff fe13 	bl	8003e9c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8004276:	2100      	movs	r1, #0
 8004278:	20af      	movs	r0, #175	; 0xaf
 800427a:	f7ff fe0f 	bl	8003e9c <OLED_WR_Byte>
	OLED_Clear(); 
 800427e:	f7ff fe57 	bl	8003f30 <OLED_Clear>
}
 8004282:	bf00      	nop
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
 800428c:	40021000 	.word	0x40021000

08004290 <turnLeft>:
#include "cmsis_os.h"

uint8_t cur_direction; // 0 as left, 1 as straight, 2 as right
TIM_HandleTypeDef* htim1Ptr;

void turnLeft(){
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
	htim1Ptr->Instance->CCR4=962;
 8004294:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <turnLeft+0x24>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f240 32c2 	movw	r2, #962	; 0x3c2
 800429e:	641a      	str	r2, [r3, #64]	; 0x40
	cur_direction = LEFT;
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <turnLeft+0x28>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
	osDelay(700);
 80042a6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80042aa:	f005 ffd7 	bl	800a25c <osDelay>
}
 80042ae:	bf00      	nop
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000a0c 	.word	0x20000a0c
 80042b8:	20000a08 	.word	0x20000a08

080042bc <turnRight>:
void turnRight(){
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
	htim1Ptr->Instance->CCR4=2200;
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <turnRight+0x24>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f640 0298 	movw	r2, #2200	; 0x898
 80042ca:	641a      	str	r2, [r3, #64]	; 0x40
	cur_direction = RIGHT;
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <turnRight+0x28>)
 80042ce:	2202      	movs	r2, #2
 80042d0:	701a      	strb	r2, [r3, #0]
	osDelay(700);
 80042d2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80042d6:	f005 ffc1 	bl	800a25c <osDelay>
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000a0c 	.word	0x20000a0c
 80042e4:	20000a08 	.word	0x20000a08

080042e8 <turnStraight>:
void turnStraight(){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
	if(cur_direction == LEFT){
 80042ec:	4b11      	ldr	r3, [pc, #68]	; (8004334 <turnStraight+0x4c>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <turnStraight+0x22>
		htim1Ptr->Instance->CCR4=1548;
 80042f4:	4b10      	ldr	r3, [pc, #64]	; (8004338 <turnStraight+0x50>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f240 620c 	movw	r2, #1548	; 0x60c
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(700);
 8004300:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8004304:	f005 ffaa 	bl	800a25c <osDelay>
 8004308:	e00d      	b.n	8004326 <turnStraight+0x3e>
	}else if(cur_direction == RIGHT){
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <turnStraight+0x4c>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d10d      	bne.n	800432e <turnStraight+0x46>
		htim1Ptr->Instance->CCR4=1457;
 8004312:	4b09      	ldr	r3, [pc, #36]	; (8004338 <turnStraight+0x50>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f240 52b1 	movw	r2, #1457	; 0x5b1
 800431c:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(700);
 800431e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8004322:	f005 ff9b 	bl	800a25c <osDelay>
	}else{
		return;
	}
	cur_direction = STRAIGHT;
 8004326:	4b03      	ldr	r3, [pc, #12]	; (8004334 <turnStraight+0x4c>)
 8004328:	2201      	movs	r2, #1
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	e000      	b.n	8004330 <turnStraight+0x48>
		return;
 800432e:	bf00      	nop
}
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000a08 	.word	0x20000a08
 8004338:	20000a0c 	.word	0x20000a0c

0800433c <turnServo>:
void turnServo(uint8_t target){
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	71fb      	strb	r3, [r7, #7]
	if(target == LEFT){
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <turnServo+0x16>
		turnLeft();
 800434c:	f7ff ffa0 	bl	8004290 <turnLeft>
	}else if(target == STRAIGHT){
		turnStraight();
	}else{
		turnRight();
	}
}
 8004350:	e007      	b.n	8004362 <turnServo+0x26>
	}else if(target == STRAIGHT){
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d102      	bne.n	800435e <turnServo+0x22>
		turnStraight();
 8004358:	f7ff ffc6 	bl	80042e8 <turnStraight>
}
 800435c:	e001      	b.n	8004362 <turnServo+0x26>
		turnRight();
 800435e:	f7ff ffad 	bl	80042bc <turnRight>
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <servoInit>:
uint8_t getServoDir() {
	return cur_direction;
}
void servoInit(TIM_HandleTypeDef* htim){
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	htim1Ptr = htim;
 8004374:	4a15      	ldr	r2, [pc, #84]	; (80043cc <servoInit+0x60>)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 800437a:	210c      	movs	r1, #12
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f003 f991 	bl	80076a4 <HAL_TIM_PWM_Start>
	cur_direction = 1;
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <servoInit+0x64>)
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
	htim1Ptr->Instance->CCR4=2200;
 8004388:	4b10      	ldr	r3, [pc, #64]	; (80043cc <servoInit+0x60>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f640 0298 	movw	r2, #2200	; 0x898
 8004392:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(700);
 8004394:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8004398:	f000 fcde 	bl	8004d58 <HAL_Delay>
	htim1Ptr->Instance->CCR4=1000;
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <servoInit+0x60>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(700);
 80043a8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80043ac:	f000 fcd4 	bl	8004d58 <HAL_Delay>
	htim1Ptr->Instance->CCR4=1548;
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <servoInit+0x60>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f240 620c 	movw	r2, #1548	; 0x60c
 80043ba:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(700);
 80043bc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80043c0:	f000 fcca 	bl	8004d58 <HAL_Delay>

}
 80043c4:	bf00      	nop
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000a0c 	.word	0x20000a0c
 80043d0:	20000a08 	.word	0x20000a08

080043d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	607b      	str	r3, [r7, #4]
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_MspInit+0x54>)
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	4a11      	ldr	r2, [pc, #68]	; (8004428 <HAL_MspInit+0x54>)
 80043e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043e8:	6453      	str	r3, [r2, #68]	; 0x44
 80043ea:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <HAL_MspInit+0x54>)
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f2:	607b      	str	r3, [r7, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	603b      	str	r3, [r7, #0]
 80043fa:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_MspInit+0x54>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <HAL_MspInit+0x54>)
 8004400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004404:	6413      	str	r3, [r2, #64]	; 0x40
 8004406:	4b08      	ldr	r3, [pc, #32]	; (8004428 <HAL_MspInit+0x54>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004412:	2200      	movs	r2, #0
 8004414:	210f      	movs	r1, #15
 8004416:	f06f 0001 	mvn.w	r0, #1
 800441a:	f001 f99c 	bl	8005756 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40023800 	.word	0x40023800

0800442c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08c      	sub	sp, #48	; 0x30
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004434:	f107 031c 	add.w	r3, r7, #28
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a2e      	ldr	r2, [pc, #184]	; (8004504 <HAL_ADC_MspInit+0xd8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d128      	bne.n	80044a0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	4b2d      	ldr	r3, [pc, #180]	; (8004508 <HAL_ADC_MspInit+0xdc>)
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	4a2c      	ldr	r2, [pc, #176]	; (8004508 <HAL_ADC_MspInit+0xdc>)
 8004458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445c:	6453      	str	r3, [r2, #68]	; 0x44
 800445e:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <HAL_ADC_MspInit+0xdc>)
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	4b26      	ldr	r3, [pc, #152]	; (8004508 <HAL_ADC_MspInit+0xdc>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	4a25      	ldr	r2, [pc, #148]	; (8004508 <HAL_ADC_MspInit+0xdc>)
 8004474:	f043 0304 	orr.w	r3, r3, #4
 8004478:	6313      	str	r3, [r2, #48]	; 0x30
 800447a:	4b23      	ldr	r3, [pc, #140]	; (8004508 <HAL_ADC_MspInit+0xdc>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004486:	2302      	movs	r3, #2
 8004488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800448a:	2303      	movs	r3, #3
 800448c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448e:	2300      	movs	r3, #0
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004492:	f107 031c 	add.w	r3, r7, #28
 8004496:	4619      	mov	r1, r3
 8004498:	481c      	ldr	r0, [pc, #112]	; (800450c <HAL_ADC_MspInit+0xe0>)
 800449a:	f001 fa25 	bl	80058e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800449e:	e02c      	b.n	80044fa <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <HAL_ADC_MspInit+0xe4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d127      	bne.n	80044fa <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	4b16      	ldr	r3, [pc, #88]	; (8004508 <HAL_ADC_MspInit+0xdc>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	4a15      	ldr	r2, [pc, #84]	; (8004508 <HAL_ADC_MspInit+0xdc>)
 80044b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044b8:	6453      	str	r3, [r2, #68]	; 0x44
 80044ba:	4b13      	ldr	r3, [pc, #76]	; (8004508 <HAL_ADC_MspInit+0xdc>)
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <HAL_ADC_MspInit+0xdc>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	4a0e      	ldr	r2, [pc, #56]	; (8004508 <HAL_ADC_MspInit+0xdc>)
 80044d0:	f043 0304 	orr.w	r3, r3, #4
 80044d4:	6313      	str	r3, [r2, #48]	; 0x30
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <HAL_ADC_MspInit+0xdc>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044e2:	2304      	movs	r3, #4
 80044e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044e6:	2303      	movs	r3, #3
 80044e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ee:	f107 031c 	add.w	r3, r7, #28
 80044f2:	4619      	mov	r1, r3
 80044f4:	4805      	ldr	r0, [pc, #20]	; (800450c <HAL_ADC_MspInit+0xe0>)
 80044f6:	f001 f9f7 	bl	80058e8 <HAL_GPIO_Init>
}
 80044fa:	bf00      	nop
 80044fc:	3730      	adds	r7, #48	; 0x30
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40012000 	.word	0x40012000
 8004508:	40023800 	.word	0x40023800
 800450c:	40020800 	.word	0x40020800
 8004510:	40012100 	.word	0x40012100

08004514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451c:	f107 0314 	add.w	r3, r7, #20
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a19      	ldr	r2, [pc, #100]	; (8004598 <HAL_I2C_MspInit+0x84>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d12c      	bne.n	8004590 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	4b18      	ldr	r3, [pc, #96]	; (800459c <HAL_I2C_MspInit+0x88>)
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	4a17      	ldr	r2, [pc, #92]	; (800459c <HAL_I2C_MspInit+0x88>)
 8004540:	f043 0302 	orr.w	r3, r3, #2
 8004544:	6313      	str	r3, [r2, #48]	; 0x30
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <HAL_I2C_MspInit+0x88>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8004552:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004558:	2312      	movs	r3, #18
 800455a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455c:	2300      	movs	r3, #0
 800455e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004560:	2303      	movs	r3, #3
 8004562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004564:	2304      	movs	r3, #4
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004568:	f107 0314 	add.w	r3, r7, #20
 800456c:	4619      	mov	r1, r3
 800456e:	480c      	ldr	r0, [pc, #48]	; (80045a0 <HAL_I2C_MspInit+0x8c>)
 8004570:	f001 f9ba 	bl	80058e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	4b08      	ldr	r3, [pc, #32]	; (800459c <HAL_I2C_MspInit+0x88>)
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	4a07      	ldr	r2, [pc, #28]	; (800459c <HAL_I2C_MspInit+0x88>)
 800457e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004582:	6413      	str	r3, [r2, #64]	; 0x40
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_I2C_MspInit+0x88>)
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004590:	bf00      	nop
 8004592:	3728      	adds	r7, #40	; 0x28
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40005400 	.word	0x40005400
 800459c:	40023800 	.word	0x40023800
 80045a0:	40020400 	.word	0x40020400

080045a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08c      	sub	sp, #48	; 0x30
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ac:	f107 031c 	add.w	r3, r7, #28
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a40      	ldr	r2, [pc, #256]	; (80046c4 <HAL_TIM_Base_MspInit+0x120>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d135      	bne.n	8004632 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	4b3f      	ldr	r3, [pc, #252]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	4a3e      	ldr	r2, [pc, #248]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	6453      	str	r3, [r2, #68]	; 0x44
 80045d6:	4b3c      	ldr	r3, [pc, #240]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	4b38      	ldr	r3, [pc, #224]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	4a37      	ldr	r2, [pc, #220]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 80045ec:	f043 0310 	orr.w	r3, r3, #16
 80045f0:	6313      	str	r3, [r2, #48]	; 0x30
 80045f2:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	f003 0310 	and.w	r3, r3, #16
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = US_ECHO_Pin;
 80045fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004604:	2302      	movs	r3, #2
 8004606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460c:	2300      	movs	r3, #0
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004610:	2301      	movs	r3, #1
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(US_ECHO_GPIO_Port, &GPIO_InitStruct);
 8004614:	f107 031c 	add.w	r3, r7, #28
 8004618:	4619      	mov	r1, r3
 800461a:	482c      	ldr	r0, [pc, #176]	; (80046cc <HAL_TIM_Base_MspInit+0x128>)
 800461c:	f001 f964 	bl	80058e8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004620:	2200      	movs	r2, #0
 8004622:	2105      	movs	r1, #5
 8004624:	201b      	movs	r0, #27
 8004626:	f001 f896 	bl	8005756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800462a:	201b      	movs	r0, #27
 800462c:	f001 f8af 	bl	800578e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004630:	e044      	b.n	80046bc <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM6)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a26      	ldr	r2, [pc, #152]	; (80046d0 <HAL_TIM_Base_MspInit+0x12c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d10e      	bne.n	800465a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800463c:	2300      	movs	r3, #0
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	4b21      	ldr	r3, [pc, #132]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	4a20      	ldr	r2, [pc, #128]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 8004646:	f043 0310 	orr.w	r3, r3, #16
 800464a:	6413      	str	r3, [r2, #64]	; 0x40
 800464c:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	693b      	ldr	r3, [r7, #16]
}
 8004658:	e030      	b.n	80046bc <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM8)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <HAL_TIM_Base_MspInit+0x130>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d12b      	bne.n	80046bc <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	4b17      	ldr	r3, [pc, #92]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 800466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466c:	4a16      	ldr	r2, [pc, #88]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 800466e:	f043 0302 	orr.w	r3, r3, #2
 8004672:	6453      	str	r3, [r2, #68]	; 0x44
 8004674:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004680:	2300      	movs	r3, #0
 8004682:	60bb      	str	r3, [r7, #8]
 8004684:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	4a0f      	ldr	r2, [pc, #60]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 800468a:	f043 0304 	orr.w	r3, r3, #4
 800468e:	6313      	str	r3, [r2, #48]	; 0x30
 8004690:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <HAL_TIM_Base_MspInit+0x124>)
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800469c:	23c0      	movs	r3, #192	; 0xc0
 800469e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a0:	2302      	movs	r3, #2
 80046a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a8:	2300      	movs	r3, #0
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80046ac:	2303      	movs	r3, #3
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046b0:	f107 031c 	add.w	r3, r7, #28
 80046b4:	4619      	mov	r1, r3
 80046b6:	4808      	ldr	r0, [pc, #32]	; (80046d8 <HAL_TIM_Base_MspInit+0x134>)
 80046b8:	f001 f916 	bl	80058e8 <HAL_GPIO_Init>
}
 80046bc:	bf00      	nop
 80046be:	3730      	adds	r7, #48	; 0x30
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40010000 	.word	0x40010000
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40021000 	.word	0x40021000
 80046d0:	40001000 	.word	0x40001000
 80046d4:	40010400 	.word	0x40010400
 80046d8:	40020800 	.word	0x40020800

080046dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08c      	sub	sp, #48	; 0x30
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e4:	f107 031c 	add.w	r3, r7, #28
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	609a      	str	r2, [r3, #8]
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fc:	d153      	bne.n	80047a6 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	61bb      	str	r3, [r7, #24]
 8004702:	4b47      	ldr	r3, [pc, #284]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	4a46      	ldr	r2, [pc, #280]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	6413      	str	r3, [r2, #64]	; 0x40
 800470e:	4b44      	ldr	r3, [pc, #272]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	4b40      	ldr	r3, [pc, #256]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	4a3f      	ldr	r2, [pc, #252]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	6313      	str	r3, [r2, #48]	; 0x30
 800472a:	4b3d      	ldr	r3, [pc, #244]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	4b39      	ldr	r3, [pc, #228]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	4a38      	ldr	r2, [pc, #224]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	6313      	str	r3, [r2, #48]	; 0x30
 8004746:	4b36      	ldr	r3, [pc, #216]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004758:	2302      	movs	r3, #2
 800475a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475c:	2300      	movs	r3, #0
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004760:	2300      	movs	r3, #0
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004764:	2301      	movs	r3, #1
 8004766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004768:	f107 031c 	add.w	r3, r7, #28
 800476c:	4619      	mov	r1, r3
 800476e:	482d      	ldr	r0, [pc, #180]	; (8004824 <HAL_TIM_Encoder_MspInit+0x148>)
 8004770:	f001 f8ba 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004774:	2308      	movs	r3, #8
 8004776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004778:	2302      	movs	r3, #2
 800477a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	2300      	movs	r3, #0
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004780:	2300      	movs	r3, #0
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004784:	2301      	movs	r3, #1
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004788:	f107 031c 	add.w	r3, r7, #28
 800478c:	4619      	mov	r1, r3
 800478e:	4826      	ldr	r0, [pc, #152]	; (8004828 <HAL_TIM_Encoder_MspInit+0x14c>)
 8004790:	f001 f8aa 	bl	80058e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004794:	2200      	movs	r2, #0
 8004796:	2105      	movs	r1, #5
 8004798:	201c      	movs	r0, #28
 800479a:	f000 ffdc 	bl	8005756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800479e:	201c      	movs	r0, #28
 80047a0:	f000 fff5 	bl	800578e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80047a4:	e038      	b.n	8004818 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM3)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a20      	ldr	r2, [pc, #128]	; (800482c <HAL_TIM_Encoder_MspInit+0x150>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d133      	bne.n	8004818 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	4a19      	ldr	r2, [pc, #100]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 80047ba:	f043 0302 	orr.w	r3, r3, #2
 80047be:	6413      	str	r3, [r2, #64]	; 0x40
 80047c0:	4b17      	ldr	r3, [pc, #92]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047cc:	2300      	movs	r3, #0
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	4b13      	ldr	r3, [pc, #76]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	4a12      	ldr	r2, [pc, #72]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	6313      	str	r3, [r2, #48]	; 0x30
 80047dc:	4b10      	ldr	r3, [pc, #64]	; (8004820 <HAL_TIM_Encoder_MspInit+0x144>)
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047e8:	23c0      	movs	r3, #192	; 0xc0
 80047ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ec:	2302      	movs	r3, #2
 80047ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f4:	2300      	movs	r3, #0
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047f8:	2302      	movs	r3, #2
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047fc:	f107 031c 	add.w	r3, r7, #28
 8004800:	4619      	mov	r1, r3
 8004802:	4808      	ldr	r0, [pc, #32]	; (8004824 <HAL_TIM_Encoder_MspInit+0x148>)
 8004804:	f001 f870 	bl	80058e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004808:	2200      	movs	r2, #0
 800480a:	2105      	movs	r1, #5
 800480c:	201d      	movs	r0, #29
 800480e:	f000 ffa2 	bl	8005756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004812:	201d      	movs	r0, #29
 8004814:	f000 ffbb 	bl	800578e <HAL_NVIC_EnableIRQ>
}
 8004818:	bf00      	nop
 800481a:	3730      	adds	r7, #48	; 0x30
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40023800 	.word	0x40023800
 8004824:	40020000 	.word	0x40020000
 8004828:	40020400 	.word	0x40020400
 800482c:	40000400 	.word	0x40000400

08004830 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004838:	f107 030c 	add.w	r3, r7, #12
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	609a      	str	r2, [r3, #8]
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a12      	ldr	r2, [pc, #72]	; (8004898 <HAL_TIM_MspPostInit+0x68>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d11e      	bne.n	8004890 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004852:	2300      	movs	r3, #0
 8004854:	60bb      	str	r3, [r7, #8]
 8004856:	4b11      	ldr	r3, [pc, #68]	; (800489c <HAL_TIM_MspPostInit+0x6c>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	4a10      	ldr	r2, [pc, #64]	; (800489c <HAL_TIM_MspPostInit+0x6c>)
 800485c:	f043 0310 	orr.w	r3, r3, #16
 8004860:	6313      	str	r3, [r2, #48]	; 0x30
 8004862:	4b0e      	ldr	r3, [pc, #56]	; (800489c <HAL_TIM_MspPostInit+0x6c>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800486e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004872:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004874:	2302      	movs	r3, #2
 8004876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800487c:	2300      	movs	r3, #0
 800487e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004880:	2301      	movs	r3, #1
 8004882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004884:	f107 030c 	add.w	r3, r7, #12
 8004888:	4619      	mov	r1, r3
 800488a:	4805      	ldr	r0, [pc, #20]	; (80048a0 <HAL_TIM_MspPostInit+0x70>)
 800488c:	f001 f82c 	bl	80058e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004890:	bf00      	nop
 8004892:	3720      	adds	r7, #32
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40010000 	.word	0x40010000
 800489c:	40023800 	.word	0x40023800
 80048a0:	40021000 	.word	0x40021000

080048a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08c      	sub	sp, #48	; 0x30
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ac:	f107 031c 	add.w	r3, r7, #28
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	605a      	str	r2, [r3, #4]
 80048b6:	609a      	str	r2, [r3, #8]
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a3b      	ldr	r2, [pc, #236]	; (80049b0 <HAL_UART_MspInit+0x10c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d135      	bne.n	8004932 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048c6:	2300      	movs	r3, #0
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	4b3a      	ldr	r3, [pc, #232]	; (80049b4 <HAL_UART_MspInit+0x110>)
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	4a39      	ldr	r2, [pc, #228]	; (80049b4 <HAL_UART_MspInit+0x110>)
 80048d0:	f043 0310 	orr.w	r3, r3, #16
 80048d4:	6453      	str	r3, [r2, #68]	; 0x44
 80048d6:	4b37      	ldr	r3, [pc, #220]	; (80049b4 <HAL_UART_MspInit+0x110>)
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	f003 0310 	and.w	r3, r3, #16
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	4b33      	ldr	r3, [pc, #204]	; (80049b4 <HAL_UART_MspInit+0x110>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	4a32      	ldr	r2, [pc, #200]	; (80049b4 <HAL_UART_MspInit+0x110>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	6313      	str	r3, [r2, #48]	; 0x30
 80048f2:	4b30      	ldr	r3, [pc, #192]	; (80049b4 <HAL_UART_MspInit+0x110>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80048fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004904:	2302      	movs	r3, #2
 8004906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004908:	2300      	movs	r3, #0
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800490c:	2303      	movs	r3, #3
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004910:	2307      	movs	r3, #7
 8004912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004914:	f107 031c 	add.w	r3, r7, #28
 8004918:	4619      	mov	r1, r3
 800491a:	4827      	ldr	r0, [pc, #156]	; (80049b8 <HAL_UART_MspInit+0x114>)
 800491c:	f000 ffe4 	bl	80058e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004920:	2200      	movs	r2, #0
 8004922:	2105      	movs	r1, #5
 8004924:	2025      	movs	r0, #37	; 0x25
 8004926:	f000 ff16 	bl	8005756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800492a:	2025      	movs	r0, #37	; 0x25
 800492c:	f000 ff2f 	bl	800578e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004930:	e039      	b.n	80049a6 <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a21      	ldr	r2, [pc, #132]	; (80049bc <HAL_UART_MspInit+0x118>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d134      	bne.n	80049a6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <HAL_UART_MspInit+0x110>)
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	4a1b      	ldr	r2, [pc, #108]	; (80049b4 <HAL_UART_MspInit+0x110>)
 8004946:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800494a:	6413      	str	r3, [r2, #64]	; 0x40
 800494c:	4b19      	ldr	r3, [pc, #100]	; (80049b4 <HAL_UART_MspInit+0x110>)
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	4b15      	ldr	r3, [pc, #84]	; (80049b4 <HAL_UART_MspInit+0x110>)
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	4a14      	ldr	r2, [pc, #80]	; (80049b4 <HAL_UART_MspInit+0x110>)
 8004962:	f043 0304 	orr.w	r3, r3, #4
 8004966:	6313      	str	r3, [r2, #48]	; 0x30
 8004968:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <HAL_UART_MspInit+0x110>)
 800496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004974:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497a:	2302      	movs	r3, #2
 800497c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497e:	2300      	movs	r3, #0
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004982:	2303      	movs	r3, #3
 8004984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004986:	2307      	movs	r3, #7
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800498a:	f107 031c 	add.w	r3, r7, #28
 800498e:	4619      	mov	r1, r3
 8004990:	480b      	ldr	r0, [pc, #44]	; (80049c0 <HAL_UART_MspInit+0x11c>)
 8004992:	f000 ffa9 	bl	80058e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004996:	2200      	movs	r2, #0
 8004998:	2105      	movs	r1, #5
 800499a:	2027      	movs	r0, #39	; 0x27
 800499c:	f000 fedb 	bl	8005756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80049a0:	2027      	movs	r0, #39	; 0x27
 80049a2:	f000 fef4 	bl	800578e <HAL_NVIC_EnableIRQ>
}
 80049a6:	bf00      	nop
 80049a8:	3730      	adds	r7, #48	; 0x30
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40011000 	.word	0x40011000
 80049b4:	40023800 	.word	0x40023800
 80049b8:	40020000 	.word	0x40020000
 80049bc:	40004800 	.word	0x40004800
 80049c0:	40020800 	.word	0x40020800

080049c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049c8:	e7fe      	b.n	80049c8 <NMI_Handler+0x4>

080049ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049ca:	b480      	push	{r7}
 80049cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049ce:	e7fe      	b.n	80049ce <HardFault_Handler+0x4>

080049d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049d4:	e7fe      	b.n	80049d4 <MemManage_Handler+0x4>

080049d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049d6:	b480      	push	{r7}
 80049d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049da:	e7fe      	b.n	80049da <BusFault_Handler+0x4>

080049dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049e0:	e7fe      	b.n	80049e0 <UsageFault_Handler+0x4>

080049e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049e2:	b480      	push	{r7}
 80049e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049e6:	bf00      	nop
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049f4:	f000 f990 	bl	8004d18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80049f8:	f007 f9b8 	bl	800bd6c <xTaskGetSchedulerState>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004a02:	f007 ffa1 	bl	800c948 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a10:	4802      	ldr	r0, [pc, #8]	; (8004a1c <TIM1_CC_IRQHandler+0x10>)
 8004a12:	f003 f9e5 	bl	8007de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000320 	.word	0x20000320

08004a20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a24:	4802      	ldr	r0, [pc, #8]	; (8004a30 <TIM2_IRQHandler+0x10>)
 8004a26:	f003 f9db 	bl	8007de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000368 	.word	0x20000368

08004a34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a38:	4802      	ldr	r0, [pc, #8]	; (8004a44 <TIM3_IRQHandler+0x10>)
 8004a3a:	f003 f9d1 	bl	8007de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004a3e:	bf00      	nop
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	200003b0 	.word	0x200003b0

08004a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a4c:	4802      	ldr	r0, [pc, #8]	; (8004a58 <USART1_IRQHandler+0x10>)
 8004a4e:	f004 fb8d 	bl	800916c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000488 	.word	0x20000488

08004a5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004a60:	4802      	ldr	r0, [pc, #8]	; (8004a6c <USART3_IRQHandler+0x10>)
 8004a62:	f004 fb83 	bl	800916c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	200004cc 	.word	0x200004cc

08004a70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return 1;
 8004a74:	2301      	movs	r3, #1
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <_kill>:

int _kill(int pid, int sig)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a8a:	f008 ff2b 	bl	800d8e4 <__errno>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2216      	movs	r2, #22
 8004a92:	601a      	str	r2, [r3, #0]
  return -1;
 8004a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <_exit>:

void _exit (int status)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ffe7 	bl	8004a80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ab2:	e7fe      	b.n	8004ab2 <_exit+0x12>

08004ab4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e00a      	b.n	8004adc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ac6:	f3af 8000 	nop.w
 8004aca:	4601      	mov	r1, r0
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	60ba      	str	r2, [r7, #8]
 8004ad2:	b2ca      	uxtb	r2, r1
 8004ad4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	dbf0      	blt.n	8004ac6 <_read+0x12>
  }

  return len;
 8004ae4:	687b      	ldr	r3, [r7, #4]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e009      	b.n	8004b14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	60ba      	str	r2, [r7, #8]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	3301      	adds	r3, #1
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	dbf1      	blt.n	8004b00 <_write+0x12>
  }
  return len;
 8004b1c:	687b      	ldr	r3, [r7, #4]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <_close>:

int _close(int file)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b4e:	605a      	str	r2, [r3, #4]
  return 0;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <_isatty>:

int _isatty(int file)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b66:	2301      	movs	r3, #1
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b98:	4a14      	ldr	r2, [pc, #80]	; (8004bec <_sbrk+0x5c>)
 8004b9a:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <_sbrk+0x60>)
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ba4:	4b13      	ldr	r3, [pc, #76]	; (8004bf4 <_sbrk+0x64>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <_sbrk+0x64>)
 8004bae:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <_sbrk+0x68>)
 8004bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bb2:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <_sbrk+0x64>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4413      	add	r3, r2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d207      	bcs.n	8004bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bc0:	f008 fe90 	bl	800d8e4 <__errno>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	220c      	movs	r2, #12
 8004bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bce:	e009      	b.n	8004be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bd0:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <_sbrk+0x64>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bd6:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <_sbrk+0x64>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	4a05      	ldr	r2, [pc, #20]	; (8004bf4 <_sbrk+0x64>)
 8004be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004be2:	68fb      	ldr	r3, [r7, #12]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20020000 	.word	0x20020000
 8004bf0:	00000400 	.word	0x00000400
 8004bf4:	20000a10 	.word	0x20000a10
 8004bf8:	200054b8 	.word	0x200054b8

08004bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <SystemInit+0x20>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	4a05      	ldr	r2, [pc, #20]	; (8004c1c <SystemInit+0x20>)
 8004c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	e000ed00 	.word	0xe000ed00

08004c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c24:	480d      	ldr	r0, [pc, #52]	; (8004c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c26:	490e      	ldr	r1, [pc, #56]	; (8004c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c28:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c2c:	e002      	b.n	8004c34 <LoopCopyDataInit>

08004c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c32:	3304      	adds	r3, #4

08004c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c38:	d3f9      	bcc.n	8004c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c3a:	4a0b      	ldr	r2, [pc, #44]	; (8004c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c3c:	4c0b      	ldr	r4, [pc, #44]	; (8004c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c40:	e001      	b.n	8004c46 <LoopFillZerobss>

08004c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c44:	3204      	adds	r2, #4

08004c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c48:	d3fb      	bcc.n	8004c42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c4a:	f7ff ffd7 	bl	8004bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c4e:	f008 fe4f 	bl	800d8f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c52:	f7fc fc67 	bl	8001524 <main>
  bx  lr    
 8004c56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c60:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004c64:	08010b3c 	.word	0x08010b3c
  ldr r2, =_sbss
 8004c68:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004c6c:	200054b4 	.word	0x200054b4

08004c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c70:	e7fe      	b.n	8004c70 <ADC_IRQHandler>
	...

08004c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c78:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <HAL_Init+0x40>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a0d      	ldr	r2, [pc, #52]	; (8004cb4 <HAL_Init+0x40>)
 8004c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_Init+0x40>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a0a      	ldr	r2, [pc, #40]	; (8004cb4 <HAL_Init+0x40>)
 8004c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c90:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <HAL_Init+0x40>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <HAL_Init+0x40>)
 8004c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c9c:	2003      	movs	r0, #3
 8004c9e:	f000 fd4f 	bl	8005740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ca2:	200f      	movs	r0, #15
 8004ca4:	f000 f808 	bl	8004cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ca8:	f7ff fb94 	bl	80043d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023c00 	.word	0x40023c00

08004cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cc0:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <HAL_InitTick+0x54>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <HAL_InitTick+0x58>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fd67 	bl	80057aa <HAL_SYSTICK_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e00e      	b.n	8004d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b0f      	cmp	r3, #15
 8004cea:	d80a      	bhi.n	8004d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cec:	2200      	movs	r2, #0
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cf4:	f000 fd2f 	bl	8005756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cf8:	4a06      	ldr	r2, [pc, #24]	; (8004d14 <HAL_InitTick+0x5c>)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e000      	b.n	8004d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20000020 	.word	0x20000020
 8004d10:	20000028 	.word	0x20000028
 8004d14:	20000024 	.word	0x20000024

08004d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_IncTick+0x20>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_IncTick+0x24>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4413      	add	r3, r2
 8004d28:	4a04      	ldr	r2, [pc, #16]	; (8004d3c <HAL_IncTick+0x24>)
 8004d2a:	6013      	str	r3, [r2, #0]
}
 8004d2c:	bf00      	nop
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	20000028 	.word	0x20000028
 8004d3c:	20000a14 	.word	0x20000a14

08004d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return uwTick;
 8004d44:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <HAL_GetTick+0x14>)
 8004d46:	681b      	ldr	r3, [r3, #0]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20000a14 	.word	0x20000a14

08004d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d60:	f7ff ffee 	bl	8004d40 <HAL_GetTick>
 8004d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d70:	d005      	beq.n	8004d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d72:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <HAL_Delay+0x44>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d7e:	bf00      	nop
 8004d80:	f7ff ffde 	bl	8004d40 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d8f7      	bhi.n	8004d80 <HAL_Delay+0x28>
  {
  }
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000028 	.word	0x20000028

08004da0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e033      	b.n	8004e1e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d109      	bne.n	8004dd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fb34 	bl	800442c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	f003 0310 	and.w	r3, r3, #16
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d118      	bne.n	8004e10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004de6:	f023 0302 	bic.w	r3, r3, #2
 8004dea:	f043 0202 	orr.w	r2, r3, #2
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fad8 	bl	80053a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f023 0303 	bic.w	r3, r3, #3
 8004e06:	f043 0201 	orr.w	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	641a      	str	r2, [r3, #64]	; 0x40
 8004e0e:	e001      	b.n	8004e14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_ADC_Start+0x1a>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e0b2      	b.n	8004fa8 <HAL_ADC_Start+0x180>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d018      	beq.n	8004e8a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e68:	4b52      	ldr	r3, [pc, #328]	; (8004fb4 <HAL_ADC_Start+0x18c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a52      	ldr	r2, [pc, #328]	; (8004fb8 <HAL_ADC_Start+0x190>)
 8004e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e72:	0c9a      	lsrs	r2, r3, #18
 8004e74:	4613      	mov	r3, r2
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	4413      	add	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004e7c:	e002      	b.n	8004e84 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f9      	bne.n	8004e7e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d17a      	bne.n	8004f8e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d007      	beq.n	8004eca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ec2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed6:	d106      	bne.n	8004ee6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004edc:	f023 0206 	bic.w	r2, r3, #6
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	645a      	str	r2, [r3, #68]	; 0x44
 8004ee4:	e002      	b.n	8004eec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ef4:	4b31      	ldr	r3, [pc, #196]	; (8004fbc <HAL_ADC_Start+0x194>)
 8004ef6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004f00:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d12a      	bne.n	8004f64 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a2b      	ldr	r2, [pc, #172]	; (8004fc0 <HAL_ADC_Start+0x198>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d015      	beq.n	8004f44 <HAL_ADC_Start+0x11c>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a29      	ldr	r2, [pc, #164]	; (8004fc4 <HAL_ADC_Start+0x19c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d105      	bne.n	8004f2e <HAL_ADC_Start+0x106>
 8004f22:	4b26      	ldr	r3, [pc, #152]	; (8004fbc <HAL_ADC_Start+0x194>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a25      	ldr	r2, [pc, #148]	; (8004fc8 <HAL_ADC_Start+0x1a0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d136      	bne.n	8004fa6 <HAL_ADC_Start+0x17e>
 8004f38:	4b20      	ldr	r3, [pc, #128]	; (8004fbc <HAL_ADC_Start+0x194>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d130      	bne.n	8004fa6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d129      	bne.n	8004fa6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f60:	609a      	str	r2, [r3, #8]
 8004f62:	e020      	b.n	8004fa6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a15      	ldr	r2, [pc, #84]	; (8004fc0 <HAL_ADC_Start+0x198>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d11b      	bne.n	8004fa6 <HAL_ADC_Start+0x17e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d114      	bne.n	8004fa6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f8a:	609a      	str	r2, [r3, #8]
 8004f8c:	e00b      	b.n	8004fa6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f043 0210 	orr.w	r2, r3, #16
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	f043 0201 	orr.w	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	20000020 	.word	0x20000020
 8004fb8:	431bde83 	.word	0x431bde83
 8004fbc:	40012300 	.word	0x40012300
 8004fc0:	40012000 	.word	0x40012000
 8004fc4:	40012100 	.word	0x40012100
 8004fc8:	40012200 	.word	0x40012200

08004fcc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_ADC_Stop+0x16>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e021      	b.n	8005026 <HAL_ADC_Stop+0x5a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d109      	bne.n	800501c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005010:	f023 0301 	bic.w	r3, r3, #1
 8005014:	f043 0201 	orr.w	r2, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800504a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504e:	d113      	bne.n	8005078 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800505a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505e:	d10b      	bne.n	8005078 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	f043 0220 	orr.w	r2, r3, #32
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e063      	b.n	8005140 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005078:	f7ff fe62 	bl	8004d40 <HAL_GetTick>
 800507c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800507e:	e021      	b.n	80050c4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005086:	d01d      	beq.n	80050c4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d007      	beq.n	800509e <HAL_ADC_PollForConversion+0x6c>
 800508e:	f7ff fe57 	bl	8004d40 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d212      	bcs.n	80050c4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d00b      	beq.n	80050c4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	f043 0204 	orr.w	r2, r3, #4
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e03d      	b.n	8005140 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d1d6      	bne.n	8005080 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f06f 0212 	mvn.w	r2, #18
 80050da:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d123      	bne.n	800513e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d11f      	bne.n	800513e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005108:	2b00      	cmp	r3, #0
 800510a:	d006      	beq.n	800511a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005116:	2b00      	cmp	r3, #0
 8005118:	d111      	bne.n	800513e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d105      	bne.n	800513e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f043 0201 	orr.w	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_ADC_ConfigChannel+0x1c>
 800517c:	2302      	movs	r3, #2
 800517e:	e105      	b.n	800538c <HAL_ADC_ConfigChannel+0x228>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b09      	cmp	r3, #9
 800518e:	d925      	bls.n	80051dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68d9      	ldr	r1, [r3, #12]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	4613      	mov	r3, r2
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	4413      	add	r3, r2
 80051a4:	3b1e      	subs	r3, #30
 80051a6:	2207      	movs	r2, #7
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	43da      	mvns	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	400a      	ands	r2, r1
 80051b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68d9      	ldr	r1, [r3, #12]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	4618      	mov	r0, r3
 80051c8:	4603      	mov	r3, r0
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	4403      	add	r3, r0
 80051ce:	3b1e      	subs	r3, #30
 80051d0:	409a      	lsls	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	60da      	str	r2, [r3, #12]
 80051da:	e022      	b.n	8005222 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6919      	ldr	r1, [r3, #16]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	4613      	mov	r3, r2
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	4413      	add	r3, r2
 80051f0:	2207      	movs	r2, #7
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	43da      	mvns	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	400a      	ands	r2, r1
 80051fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6919      	ldr	r1, [r3, #16]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	689a      	ldr	r2, [r3, #8]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	4618      	mov	r0, r3
 8005212:	4603      	mov	r3, r0
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	4403      	add	r3, r0
 8005218:	409a      	lsls	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b06      	cmp	r3, #6
 8005228:	d824      	bhi.n	8005274 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	3b05      	subs	r3, #5
 800523c:	221f      	movs	r2, #31
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	43da      	mvns	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	400a      	ands	r2, r1
 800524a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	4618      	mov	r0, r3
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	3b05      	subs	r3, #5
 8005266:	fa00 f203 	lsl.w	r2, r0, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	635a      	str	r2, [r3, #52]	; 0x34
 8005272:	e04c      	b.n	800530e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b0c      	cmp	r3, #12
 800527a:	d824      	bhi.n	80052c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	3b23      	subs	r3, #35	; 0x23
 800528e:	221f      	movs	r2, #31
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	43da      	mvns	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	400a      	ands	r2, r1
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	4618      	mov	r0, r3
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	3b23      	subs	r3, #35	; 0x23
 80052b8:	fa00 f203 	lsl.w	r2, r0, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
 80052c4:	e023      	b.n	800530e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	3b41      	subs	r3, #65	; 0x41
 80052d8:	221f      	movs	r2, #31
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	43da      	mvns	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	400a      	ands	r2, r1
 80052e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	4618      	mov	r0, r3
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	3b41      	subs	r3, #65	; 0x41
 8005302:	fa00 f203 	lsl.w	r2, r0, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800530e:	4b22      	ldr	r3, [pc, #136]	; (8005398 <HAL_ADC_ConfigChannel+0x234>)
 8005310:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a21      	ldr	r2, [pc, #132]	; (800539c <HAL_ADC_ConfigChannel+0x238>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d109      	bne.n	8005330 <HAL_ADC_ConfigChannel+0x1cc>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b12      	cmp	r3, #18
 8005322:	d105      	bne.n	8005330 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a19      	ldr	r2, [pc, #100]	; (800539c <HAL_ADC_ConfigChannel+0x238>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d123      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x21e>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b10      	cmp	r3, #16
 8005340:	d003      	beq.n	800534a <HAL_ADC_ConfigChannel+0x1e6>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b11      	cmp	r3, #17
 8005348:	d11b      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b10      	cmp	r3, #16
 800535c:	d111      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <HAL_ADC_ConfigChannel+0x23c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a10      	ldr	r2, [pc, #64]	; (80053a4 <HAL_ADC_ConfigChannel+0x240>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	0c9a      	lsrs	r2, r3, #18
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005374:	e002      	b.n	800537c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	3b01      	subs	r3, #1
 800537a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f9      	bne.n	8005376 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	40012300 	.word	0x40012300
 800539c:	40012000 	.word	0x40012000
 80053a0:	20000020 	.word	0x20000020
 80053a4:	431bde83 	.word	0x431bde83

080053a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053b0:	4b79      	ldr	r3, [pc, #484]	; (8005598 <ADC_Init+0x1f0>)
 80053b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6859      	ldr	r1, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	021a      	lsls	r2, r3, #8
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005400:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6859      	ldr	r1, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005422:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6899      	ldr	r1, [r3, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	4a58      	ldr	r2, [pc, #352]	; (800559c <ADC_Init+0x1f4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d022      	beq.n	8005486 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800544e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6899      	ldr	r1, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005470:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6899      	ldr	r1, [r3, #8]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	609a      	str	r2, [r3, #8]
 8005484:	e00f      	b.n	80054a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005494:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0202 	bic.w	r2, r2, #2
 80054b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6899      	ldr	r1, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	7e1b      	ldrb	r3, [r3, #24]
 80054c0:	005a      	lsls	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01b      	beq.n	800550c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80054f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6859      	ldr	r1, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	3b01      	subs	r3, #1
 8005500:	035a      	lsls	r2, r3, #13
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
 800550a:	e007      	b.n	800551c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800551a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800552a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	3b01      	subs	r3, #1
 8005538:	051a      	lsls	r2, r3, #20
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005550:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6899      	ldr	r1, [r3, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800555e:	025a      	lsls	r2, r3, #9
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005576:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6899      	ldr	r1, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	029a      	lsls	r2, r3, #10
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	609a      	str	r2, [r3, #8]
}
 800558c:	bf00      	nop
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	40012300 	.word	0x40012300
 800559c:	0f000001 	.word	0x0f000001

080055a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <__NVIC_SetPriorityGrouping+0x44>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055bc:	4013      	ands	r3, r2
 80055be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055d2:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <__NVIC_SetPriorityGrouping+0x44>)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	60d3      	str	r3, [r2, #12]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	e000ed00 	.word	0xe000ed00

080055e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <__NVIC_GetPriorityGrouping+0x18>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	0a1b      	lsrs	r3, r3, #8
 80055f2:	f003 0307 	and.w	r3, r3, #7
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	e000ed00 	.word	0xe000ed00

08005604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800560e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005612:	2b00      	cmp	r3, #0
 8005614:	db0b      	blt.n	800562e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	f003 021f 	and.w	r2, r3, #31
 800561c:	4907      	ldr	r1, [pc, #28]	; (800563c <__NVIC_EnableIRQ+0x38>)
 800561e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	2001      	movs	r0, #1
 8005626:	fa00 f202 	lsl.w	r2, r0, r2
 800562a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	e000e100 	.word	0xe000e100

08005640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	6039      	str	r1, [r7, #0]
 800564a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800564c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005650:	2b00      	cmp	r3, #0
 8005652:	db0a      	blt.n	800566a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	b2da      	uxtb	r2, r3
 8005658:	490c      	ldr	r1, [pc, #48]	; (800568c <__NVIC_SetPriority+0x4c>)
 800565a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565e:	0112      	lsls	r2, r2, #4
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	440b      	add	r3, r1
 8005664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005668:	e00a      	b.n	8005680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	4908      	ldr	r1, [pc, #32]	; (8005690 <__NVIC_SetPriority+0x50>)
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	3b04      	subs	r3, #4
 8005678:	0112      	lsls	r2, r2, #4
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	440b      	add	r3, r1
 800567e:	761a      	strb	r2, [r3, #24]
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	e000e100 	.word	0xe000e100
 8005690:	e000ed00 	.word	0xe000ed00

08005694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005694:	b480      	push	{r7}
 8005696:	b089      	sub	sp, #36	; 0x24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f1c3 0307 	rsb	r3, r3, #7
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	bf28      	it	cs
 80056b2:	2304      	movcs	r3, #4
 80056b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	3304      	adds	r3, #4
 80056ba:	2b06      	cmp	r3, #6
 80056bc:	d902      	bls.n	80056c4 <NVIC_EncodePriority+0x30>
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3b03      	subs	r3, #3
 80056c2:	e000      	b.n	80056c6 <NVIC_EncodePriority+0x32>
 80056c4:	2300      	movs	r3, #0
 80056c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43da      	mvns	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	401a      	ands	r2, r3
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	fa01 f303 	lsl.w	r3, r1, r3
 80056e6:	43d9      	mvns	r1, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056ec:	4313      	orrs	r3, r2
         );
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3724      	adds	r7, #36	; 0x24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3b01      	subs	r3, #1
 8005708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800570c:	d301      	bcc.n	8005712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800570e:	2301      	movs	r3, #1
 8005710:	e00f      	b.n	8005732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005712:	4a0a      	ldr	r2, [pc, #40]	; (800573c <SysTick_Config+0x40>)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3b01      	subs	r3, #1
 8005718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800571a:	210f      	movs	r1, #15
 800571c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005720:	f7ff ff8e 	bl	8005640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <SysTick_Config+0x40>)
 8005726:	2200      	movs	r2, #0
 8005728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800572a:	4b04      	ldr	r3, [pc, #16]	; (800573c <SysTick_Config+0x40>)
 800572c:	2207      	movs	r2, #7
 800572e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	e000e010 	.word	0xe000e010

08005740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ff29 	bl	80055a0 <__NVIC_SetPriorityGrouping>
}
 800574e:	bf00      	nop
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005756:	b580      	push	{r7, lr}
 8005758:	b086      	sub	sp, #24
 800575a:	af00      	add	r7, sp, #0
 800575c:	4603      	mov	r3, r0
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
 8005762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005768:	f7ff ff3e 	bl	80055e8 <__NVIC_GetPriorityGrouping>
 800576c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	6978      	ldr	r0, [r7, #20]
 8005774:	f7ff ff8e 	bl	8005694 <NVIC_EncodePriority>
 8005778:	4602      	mov	r2, r0
 800577a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800577e:	4611      	mov	r1, r2
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff ff5d 	bl	8005640 <__NVIC_SetPriority>
}
 8005786:	bf00      	nop
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b082      	sub	sp, #8
 8005792:	af00      	add	r7, sp, #0
 8005794:	4603      	mov	r3, r0
 8005796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff ff31 	bl	8005604 <__NVIC_EnableIRQ>
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff ffa2 	bl	80056fc <SysTick_Config>
 80057b8:	4603      	mov	r3, r0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80057d0:	f7ff fab6 	bl	8004d40 <HAL_GetTick>
 80057d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d008      	beq.n	80057f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2280      	movs	r2, #128	; 0x80
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e052      	b.n	800589a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0216 	bic.w	r2, r2, #22
 8005802:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005812:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d103      	bne.n	8005824 <HAL_DMA_Abort+0x62>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0208 	bic.w	r2, r2, #8
 8005832:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0201 	bic.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005844:	e013      	b.n	800586e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005846:	f7ff fa7b 	bl	8004d40 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b05      	cmp	r3, #5
 8005852:	d90c      	bls.n	800586e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2203      	movs	r2, #3
 800585e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e015      	b.n	800589a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e4      	bne.n	8005846 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005880:	223f      	movs	r2, #63	; 0x3f
 8005882:	409a      	lsls	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d004      	beq.n	80058c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2280      	movs	r2, #128	; 0x80
 80058ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e00c      	b.n	80058da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2205      	movs	r2, #5
 80058c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0201 	bic.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b089      	sub	sp, #36	; 0x24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	e16b      	b.n	8005bdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005904:	2201      	movs	r2, #1
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4013      	ands	r3, r2
 8005916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	429a      	cmp	r2, r3
 800591e:	f040 815a 	bne.w	8005bd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	2b01      	cmp	r3, #1
 800592c:	d005      	beq.n	800593a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005936:	2b02      	cmp	r3, #2
 8005938:	d130      	bne.n	800599c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	2203      	movs	r2, #3
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4013      	ands	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	fa02 f303 	lsl.w	r3, r2, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	4313      	orrs	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005970:	2201      	movs	r2, #1
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f003 0201 	and.w	r2, r3, #1
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4313      	orrs	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d017      	beq.n	80059d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	2203      	movs	r2, #3
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	43db      	mvns	r3, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4013      	ands	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	fa02 f303 	lsl.w	r3, r2, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f003 0303 	and.w	r3, r3, #3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d123      	bne.n	8005a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	08da      	lsrs	r2, r3, #3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3208      	adds	r2, #8
 80059ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	220f      	movs	r2, #15
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	43db      	mvns	r3, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4013      	ands	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	08da      	lsrs	r2, r3, #3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3208      	adds	r2, #8
 8005a26:	69b9      	ldr	r1, [r7, #24]
 8005a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	2203      	movs	r2, #3
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	4013      	ands	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f003 0203 	and.w	r2, r3, #3
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80b4 	beq.w	8005bd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	4b60      	ldr	r3, [pc, #384]	; (8005bf4 <HAL_GPIO_Init+0x30c>)
 8005a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a76:	4a5f      	ldr	r2, [pc, #380]	; (8005bf4 <HAL_GPIO_Init+0x30c>)
 8005a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a7e:	4b5d      	ldr	r3, [pc, #372]	; (8005bf4 <HAL_GPIO_Init+0x30c>)
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a8a:	4a5b      	ldr	r2, [pc, #364]	; (8005bf8 <HAL_GPIO_Init+0x310>)
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	089b      	lsrs	r3, r3, #2
 8005a90:	3302      	adds	r3, #2
 8005a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	220f      	movs	r2, #15
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a52      	ldr	r2, [pc, #328]	; (8005bfc <HAL_GPIO_Init+0x314>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d02b      	beq.n	8005b0e <HAL_GPIO_Init+0x226>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a51      	ldr	r2, [pc, #324]	; (8005c00 <HAL_GPIO_Init+0x318>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d025      	beq.n	8005b0a <HAL_GPIO_Init+0x222>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a50      	ldr	r2, [pc, #320]	; (8005c04 <HAL_GPIO_Init+0x31c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d01f      	beq.n	8005b06 <HAL_GPIO_Init+0x21e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a4f      	ldr	r2, [pc, #316]	; (8005c08 <HAL_GPIO_Init+0x320>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d019      	beq.n	8005b02 <HAL_GPIO_Init+0x21a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a4e      	ldr	r2, [pc, #312]	; (8005c0c <HAL_GPIO_Init+0x324>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d013      	beq.n	8005afe <HAL_GPIO_Init+0x216>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a4d      	ldr	r2, [pc, #308]	; (8005c10 <HAL_GPIO_Init+0x328>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00d      	beq.n	8005afa <HAL_GPIO_Init+0x212>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a4c      	ldr	r2, [pc, #304]	; (8005c14 <HAL_GPIO_Init+0x32c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d007      	beq.n	8005af6 <HAL_GPIO_Init+0x20e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a4b      	ldr	r2, [pc, #300]	; (8005c18 <HAL_GPIO_Init+0x330>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d101      	bne.n	8005af2 <HAL_GPIO_Init+0x20a>
 8005aee:	2307      	movs	r3, #7
 8005af0:	e00e      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005af2:	2308      	movs	r3, #8
 8005af4:	e00c      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005af6:	2306      	movs	r3, #6
 8005af8:	e00a      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005afa:	2305      	movs	r3, #5
 8005afc:	e008      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005afe:	2304      	movs	r3, #4
 8005b00:	e006      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005b02:	2303      	movs	r3, #3
 8005b04:	e004      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005b06:	2302      	movs	r3, #2
 8005b08:	e002      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	f002 0203 	and.w	r2, r2, #3
 8005b16:	0092      	lsls	r2, r2, #2
 8005b18:	4093      	lsls	r3, r2
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b20:	4935      	ldr	r1, [pc, #212]	; (8005bf8 <HAL_GPIO_Init+0x310>)
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	089b      	lsrs	r3, r3, #2
 8005b26:	3302      	adds	r3, #2
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b2e:	4b3b      	ldr	r3, [pc, #236]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	43db      	mvns	r3, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b52:	4a32      	ldr	r2, [pc, #200]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b58:	4b30      	ldr	r3, [pc, #192]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	4013      	ands	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b7c:	4a27      	ldr	r2, [pc, #156]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b82:	4b26      	ldr	r3, [pc, #152]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ba6:	4a1d      	ldr	r2, [pc, #116]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bac:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bd0:	4a12      	ldr	r2, [pc, #72]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	61fb      	str	r3, [r7, #28]
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	2b0f      	cmp	r3, #15
 8005be0:	f67f ae90 	bls.w	8005904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	3724      	adds	r7, #36	; 0x24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	40013800 	.word	0x40013800
 8005bfc:	40020000 	.word	0x40020000
 8005c00:	40020400 	.word	0x40020400
 8005c04:	40020800 	.word	0x40020800
 8005c08:	40020c00 	.word	0x40020c00
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	40021400 	.word	0x40021400
 8005c14:	40021800 	.word	0x40021800
 8005c18:	40021c00 	.word	0x40021c00
 8005c1c:	40013c00 	.word	0x40013c00

08005c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	807b      	strh	r3, [r7, #2]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c30:	787b      	ldrb	r3, [r7, #1]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c36:	887a      	ldrh	r2, [r7, #2]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c3c:	e003      	b.n	8005c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c3e:	887b      	ldrh	r3, [r7, #2]
 8005c40:	041a      	lsls	r2, r3, #16
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	619a      	str	r2, [r3, #24]
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
	...

08005c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e12b      	b.n	8005ebe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fe fc4a 	bl	8004514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2224      	movs	r2, #36	; 0x24
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0201 	bic.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ca6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005cb8:	f001 fbba 	bl	8007430 <HAL_RCC_GetPCLK1Freq>
 8005cbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4a81      	ldr	r2, [pc, #516]	; (8005ec8 <HAL_I2C_Init+0x274>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d807      	bhi.n	8005cd8 <HAL_I2C_Init+0x84>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4a80      	ldr	r2, [pc, #512]	; (8005ecc <HAL_I2C_Init+0x278>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	bf94      	ite	ls
 8005cd0:	2301      	movls	r3, #1
 8005cd2:	2300      	movhi	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	e006      	b.n	8005ce6 <HAL_I2C_Init+0x92>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4a7d      	ldr	r2, [pc, #500]	; (8005ed0 <HAL_I2C_Init+0x27c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	bf94      	ite	ls
 8005ce0:	2301      	movls	r3, #1
 8005ce2:	2300      	movhi	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e0e7      	b.n	8005ebe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4a78      	ldr	r2, [pc, #480]	; (8005ed4 <HAL_I2C_Init+0x280>)
 8005cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf6:	0c9b      	lsrs	r3, r3, #18
 8005cf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	4a6a      	ldr	r2, [pc, #424]	; (8005ec8 <HAL_I2C_Init+0x274>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d802      	bhi.n	8005d28 <HAL_I2C_Init+0xd4>
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	3301      	adds	r3, #1
 8005d26:	e009      	b.n	8005d3c <HAL_I2C_Init+0xe8>
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d2e:	fb02 f303 	mul.w	r3, r2, r3
 8005d32:	4a69      	ldr	r2, [pc, #420]	; (8005ed8 <HAL_I2C_Init+0x284>)
 8005d34:	fba2 2303 	umull	r2, r3, r2, r3
 8005d38:	099b      	lsrs	r3, r3, #6
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6812      	ldr	r2, [r2, #0]
 8005d40:	430b      	orrs	r3, r1
 8005d42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	495c      	ldr	r1, [pc, #368]	; (8005ec8 <HAL_I2C_Init+0x274>)
 8005d58:	428b      	cmp	r3, r1
 8005d5a:	d819      	bhi.n	8005d90 <HAL_I2C_Init+0x13c>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	1e59      	subs	r1, r3, #1
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d6a:	1c59      	adds	r1, r3, #1
 8005d6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d70:	400b      	ands	r3, r1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <HAL_I2C_Init+0x138>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1e59      	subs	r1, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d84:	3301      	adds	r3, #1
 8005d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d8a:	e051      	b.n	8005e30 <HAL_I2C_Init+0x1dc>
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	e04f      	b.n	8005e30 <HAL_I2C_Init+0x1dc>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d111      	bne.n	8005dbc <HAL_I2C_Init+0x168>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	1e58      	subs	r0, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6859      	ldr	r1, [r3, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	440b      	add	r3, r1
 8005da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005daa:	3301      	adds	r3, #1
 8005dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	bf0c      	ite	eq
 8005db4:	2301      	moveq	r3, #1
 8005db6:	2300      	movne	r3, #0
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	e012      	b.n	8005de2 <HAL_I2C_Init+0x18e>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	1e58      	subs	r0, r3, #1
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6859      	ldr	r1, [r3, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	0099      	lsls	r1, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bf0c      	ite	eq
 8005ddc:	2301      	moveq	r3, #1
 8005dde:	2300      	movne	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_I2C_Init+0x196>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e022      	b.n	8005e30 <HAL_I2C_Init+0x1dc>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10e      	bne.n	8005e10 <HAL_I2C_Init+0x1bc>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1e58      	subs	r0, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6859      	ldr	r1, [r3, #4]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	440b      	add	r3, r1
 8005e00:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e04:	3301      	adds	r3, #1
 8005e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0e:	e00f      	b.n	8005e30 <HAL_I2C_Init+0x1dc>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	1e58      	subs	r0, r3, #1
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6859      	ldr	r1, [r3, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	440b      	add	r3, r1
 8005e1e:	0099      	lsls	r1, r3, #2
 8005e20:	440b      	add	r3, r1
 8005e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e26:	3301      	adds	r3, #1
 8005e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	6809      	ldr	r1, [r1, #0]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69da      	ldr	r2, [r3, #28]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6911      	ldr	r1, [r2, #16]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	68d2      	ldr	r2, [r2, #12]
 8005e6a:	4311      	orrs	r1, r2
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6812      	ldr	r2, [r2, #0]
 8005e70:	430b      	orrs	r3, r1
 8005e72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	000186a0 	.word	0x000186a0
 8005ecc:	001e847f 	.word	0x001e847f
 8005ed0:	003d08ff 	.word	0x003d08ff
 8005ed4:	431bde83 	.word	0x431bde83
 8005ed8:	10624dd3 	.word	0x10624dd3

08005edc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	460b      	mov	r3, r1
 8005eea:	817b      	strh	r3, [r7, #10]
 8005eec:	4613      	mov	r3, r2
 8005eee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ef0:	f7fe ff26 	bl	8004d40 <HAL_GetTick>
 8005ef4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b20      	cmp	r3, #32
 8005f00:	f040 80e0 	bne.w	80060c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	2319      	movs	r3, #25
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	4970      	ldr	r1, [pc, #448]	; (80060d0 <HAL_I2C_Master_Transmit+0x1f4>)
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fc58 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e0d3      	b.n	80060c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_I2C_Master_Transmit+0x50>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e0cc      	b.n	80060c6 <HAL_I2C_Master_Transmit+0x1ea>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d007      	beq.n	8005f52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2221      	movs	r2, #33	; 0x21
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2210      	movs	r2, #16
 8005f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	893a      	ldrh	r2, [r7, #8]
 8005f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4a50      	ldr	r2, [pc, #320]	; (80060d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005f92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005f94:	8979      	ldrh	r1, [r7, #10]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	6a3a      	ldr	r2, [r7, #32]
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fac2 	bl	8006524 <I2C_MasterRequestWrite>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e08d      	b.n	80060c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005faa:	2300      	movs	r3, #0
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	613b      	str	r3, [r7, #16]
 8005fbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005fc0:	e066      	b.n	8006090 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	6a39      	ldr	r1, [r7, #32]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fcd2 	bl	8006970 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00d      	beq.n	8005fee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d107      	bne.n	8005fea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e06b      	b.n	80060c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	781a      	ldrb	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006008:	b29b      	uxth	r3, r3
 800600a:	3b01      	subs	r3, #1
 800600c:	b29a      	uxth	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b04      	cmp	r3, #4
 800602a:	d11b      	bne.n	8006064 <HAL_I2C_Master_Transmit+0x188>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006030:	2b00      	cmp	r3, #0
 8006032:	d017      	beq.n	8006064 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	781a      	ldrb	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	6a39      	ldr	r1, [r7, #32]
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 fcc2 	bl	80069f2 <I2C_WaitOnBTFFlagUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00d      	beq.n	8006090 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	2b04      	cmp	r3, #4
 800607a:	d107      	bne.n	800608c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800608a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e01a      	b.n	80060c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006094:	2b00      	cmp	r3, #0
 8006096:	d194      	bne.n	8005fc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	e000      	b.n	80060c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80060c4:	2302      	movs	r3, #2
  }
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	00100002 	.word	0x00100002
 80060d4:	ffff0000 	.word	0xffff0000

080060d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08c      	sub	sp, #48	; 0x30
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	607a      	str	r2, [r7, #4]
 80060e2:	461a      	mov	r2, r3
 80060e4:	460b      	mov	r3, r1
 80060e6:	817b      	strh	r3, [r7, #10]
 80060e8:	4613      	mov	r3, r2
 80060ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060ec:	f7fe fe28 	bl	8004d40 <HAL_GetTick>
 80060f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	f040 820b 	bne.w	8006516 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	2319      	movs	r3, #25
 8006106:	2201      	movs	r2, #1
 8006108:	497c      	ldr	r1, [pc, #496]	; (80062fc <HAL_I2C_Master_Receive+0x224>)
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 fb5a 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006116:	2302      	movs	r3, #2
 8006118:	e1fe      	b.n	8006518 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_I2C_Master_Receive+0x50>
 8006124:	2302      	movs	r3, #2
 8006126:	e1f7      	b.n	8006518 <HAL_I2C_Master_Receive+0x440>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b01      	cmp	r3, #1
 800613c:	d007      	beq.n	800614e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f042 0201 	orr.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800615c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2222      	movs	r2, #34	; 0x22
 8006162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2210      	movs	r2, #16
 800616a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	893a      	ldrh	r2, [r7, #8]
 800617e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4a5c      	ldr	r2, [pc, #368]	; (8006300 <HAL_I2C_Master_Receive+0x228>)
 800618e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006190:	8979      	ldrh	r1, [r7, #10]
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fa46 	bl	8006628 <I2C_MasterRequestRead>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e1b8      	b.n	8006518 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d113      	bne.n	80061d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ae:	2300      	movs	r3, #0
 80061b0:	623b      	str	r3, [r7, #32]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	623b      	str	r3, [r7, #32]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	623b      	str	r3, [r7, #32]
 80061c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	e18c      	b.n	80064f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d11b      	bne.n	8006216 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ee:	2300      	movs	r3, #0
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	61fb      	str	r3, [r7, #28]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	e16c      	b.n	80064f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621a:	2b02      	cmp	r3, #2
 800621c:	d11b      	bne.n	8006256 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800622c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800623c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800623e:	2300      	movs	r3, #0
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	e14c      	b.n	80064f0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006264:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006266:	2300      	movs	r3, #0
 8006268:	617b      	str	r3, [r7, #20]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	617b      	str	r3, [r7, #20]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800627c:	e138      	b.n	80064f0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006282:	2b03      	cmp	r3, #3
 8006284:	f200 80f1 	bhi.w	800646a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628c:	2b01      	cmp	r3, #1
 800628e:	d123      	bne.n	80062d8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 fbed 	bl	8006a74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e139      	b.n	8006518 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062d6:	e10b      	b.n	80064f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d14e      	bne.n	800637e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	2200      	movs	r2, #0
 80062e8:	4906      	ldr	r1, [pc, #24]	; (8006304 <HAL_I2C_Master_Receive+0x22c>)
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 fa6a 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d008      	beq.n	8006308 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e10e      	b.n	8006518 <HAL_I2C_Master_Receive+0x440>
 80062fa:	bf00      	nop
 80062fc:	00100002 	.word	0x00100002
 8006300:	ffff0000 	.word	0xffff0000
 8006304:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006316:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006366:	3b01      	subs	r3, #1
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800637c:	e0b8      	b.n	80064f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	2200      	movs	r2, #0
 8006386:	4966      	ldr	r1, [pc, #408]	; (8006520 <HAL_I2C_Master_Receive+0x448>)
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 fa1b 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e0bf      	b.n	8006518 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691a      	ldr	r2, [r3, #16]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	2200      	movs	r2, #0
 80063e2:	494f      	ldr	r1, [pc, #316]	; (8006520 <HAL_I2C_Master_Receive+0x448>)
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f9ed 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e091      	b.n	8006518 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691a      	ldr	r2, [r3, #16]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	b2d2      	uxtb	r2, r2
 8006410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006468:	e042      	b.n	80064f0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800646a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 fb00 	bl	8006a74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e04c      	b.n	8006518 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d118      	bne.n	80064f0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f47f aec2 	bne.w	800627e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	e000      	b.n	8006518 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006516:	2302      	movs	r3, #2
  }
}
 8006518:	4618      	mov	r0, r3
 800651a:	3728      	adds	r7, #40	; 0x28
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	00010004 	.word	0x00010004

08006524 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b088      	sub	sp, #32
 8006528:	af02      	add	r7, sp, #8
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	607a      	str	r2, [r7, #4]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	460b      	mov	r3, r1
 8006532:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b08      	cmp	r3, #8
 800653e:	d006      	beq.n	800654e <I2C_MasterRequestWrite+0x2a>
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d003      	beq.n	800654e <I2C_MasterRequestWrite+0x2a>
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800654c:	d108      	bne.n	8006560 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	e00b      	b.n	8006578 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	2b12      	cmp	r3, #18
 8006566:	d107      	bne.n	8006578 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006576:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f91d 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00d      	beq.n	80065ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800659e:	d103      	bne.n	80065a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e035      	b.n	8006618 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065b4:	d108      	bne.n	80065c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065b6:	897b      	ldrh	r3, [r7, #10]
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	461a      	mov	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065c4:	611a      	str	r2, [r3, #16]
 80065c6:	e01b      	b.n	8006600 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80065c8:	897b      	ldrh	r3, [r7, #10]
 80065ca:	11db      	asrs	r3, r3, #7
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f003 0306 	and.w	r3, r3, #6
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	f063 030f 	orn	r3, r3, #15
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	490e      	ldr	r1, [pc, #56]	; (8006620 <I2C_MasterRequestWrite+0xfc>)
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f943 	bl	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e010      	b.n	8006618 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80065f6:	897b      	ldrh	r3, [r7, #10]
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	4907      	ldr	r1, [pc, #28]	; (8006624 <I2C_MasterRequestWrite+0x100>)
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 f933 	bl	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e000      	b.n	8006618 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	00010008 	.word	0x00010008
 8006624:	00010002 	.word	0x00010002

08006628 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af02      	add	r7, sp, #8
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	607a      	str	r2, [r7, #4]
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	460b      	mov	r3, r1
 8006636:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800664c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b08      	cmp	r3, #8
 8006652:	d006      	beq.n	8006662 <I2C_MasterRequestRead+0x3a>
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d003      	beq.n	8006662 <I2C_MasterRequestRead+0x3a>
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006660:	d108      	bne.n	8006674 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	e00b      	b.n	800668c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	2b11      	cmp	r3, #17
 800667a:	d107      	bne.n	800668c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800668a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f893 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00d      	beq.n	80066c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b2:	d103      	bne.n	80066bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e079      	b.n	80067b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066c8:	d108      	bne.n	80066dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066ca:	897b      	ldrh	r3, [r7, #10]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	611a      	str	r2, [r3, #16]
 80066da:	e05f      	b.n	800679c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80066dc:	897b      	ldrh	r3, [r7, #10]
 80066de:	11db      	asrs	r3, r3, #7
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f003 0306 	and.w	r3, r3, #6
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f063 030f 	orn	r3, r3, #15
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	4930      	ldr	r1, [pc, #192]	; (80067bc <I2C_MasterRequestRead+0x194>)
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f8b9 	bl	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e054      	b.n	80067b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800670a:	897b      	ldrh	r3, [r7, #10]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	4929      	ldr	r1, [pc, #164]	; (80067c0 <I2C_MasterRequestRead+0x198>)
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 f8a9 	bl	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e044      	b.n	80067b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800672a:	2300      	movs	r3, #0
 800672c:	613b      	str	r3, [r7, #16]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	613b      	str	r3, [r7, #16]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800674e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f831 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00d      	beq.n	8006784 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006776:	d103      	bne.n	8006780 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800677e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e017      	b.n	80067b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006784:	897b      	ldrh	r3, [r7, #10]
 8006786:	11db      	asrs	r3, r3, #7
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f003 0306 	and.w	r3, r3, #6
 800678e:	b2db      	uxtb	r3, r3
 8006790:	f063 030e 	orn	r3, r3, #14
 8006794:	b2da      	uxtb	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	4907      	ldr	r1, [pc, #28]	; (80067c0 <I2C_MasterRequestRead+0x198>)
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f865 	bl	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	00010008 	.word	0x00010008
 80067c0:	00010002 	.word	0x00010002

080067c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	4613      	mov	r3, r2
 80067d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067d4:	e025      	b.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067dc:	d021      	beq.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067de:	f7fe faaf 	bl	8004d40 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d302      	bcc.n	80067f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d116      	bne.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f043 0220 	orr.w	r2, r3, #32
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e023      	b.n	800686a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	0c1b      	lsrs	r3, r3, #16
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	d10d      	bne.n	8006848 <I2C_WaitOnFlagUntilTimeout+0x84>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	43da      	mvns	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4013      	ands	r3, r2
 8006838:	b29b      	uxth	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	bf0c      	ite	eq
 800683e:	2301      	moveq	r3, #1
 8006840:	2300      	movne	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	461a      	mov	r2, r3
 8006846:	e00c      	b.n	8006862 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	43da      	mvns	r2, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4013      	ands	r3, r2
 8006854:	b29b      	uxth	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	bf0c      	ite	eq
 800685a:	2301      	moveq	r3, #1
 800685c:	2300      	movne	r3, #0
 800685e:	b2db      	uxtb	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	79fb      	ldrb	r3, [r7, #7]
 8006864:	429a      	cmp	r2, r3
 8006866:	d0b6      	beq.n	80067d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	607a      	str	r2, [r7, #4]
 800687e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006880:	e051      	b.n	8006926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006890:	d123      	bne.n	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f043 0204 	orr.w	r2, r3, #4
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e046      	b.n	8006968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068e0:	d021      	beq.n	8006926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e2:	f7fe fa2d 	bl	8004d40 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d302      	bcc.n	80068f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d116      	bne.n	8006926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	f043 0220 	orr.w	r2, r3, #32
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e020      	b.n	8006968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	0c1b      	lsrs	r3, r3, #16
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10c      	bne.n	800694a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	43da      	mvns	r2, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4013      	ands	r3, r2
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	bf14      	ite	ne
 8006942:	2301      	movne	r3, #1
 8006944:	2300      	moveq	r3, #0
 8006946:	b2db      	uxtb	r3, r3
 8006948:	e00b      	b.n	8006962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	43da      	mvns	r2, r3
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4013      	ands	r3, r2
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	bf14      	ite	ne
 800695c:	2301      	movne	r3, #1
 800695e:	2300      	moveq	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d18d      	bne.n	8006882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800697c:	e02d      	b.n	80069da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f8ce 	bl	8006b20 <I2C_IsAcknowledgeFailed>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e02d      	b.n	80069ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006994:	d021      	beq.n	80069da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006996:	f7fe f9d3 	bl	8004d40 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d302      	bcc.n	80069ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d116      	bne.n	80069da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	f043 0220 	orr.w	r2, r3, #32
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e007      	b.n	80069ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e4:	2b80      	cmp	r3, #128	; 0x80
 80069e6:	d1ca      	bne.n	800697e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069fe:	e02d      	b.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f88d 	bl	8006b20 <I2C_IsAcknowledgeFailed>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e02d      	b.n	8006a6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a16:	d021      	beq.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a18:	f7fe f992 	bl	8004d40 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d302      	bcc.n	8006a2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d116      	bne.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	f043 0220 	orr.w	r2, r3, #32
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e007      	b.n	8006a6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d1ca      	bne.n	8006a00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a80:	e042      	b.n	8006b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b10      	cmp	r3, #16
 8006a8e:	d119      	bne.n	8006ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0210 	mvn.w	r2, #16
 8006a98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e029      	b.n	8006b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac4:	f7fe f93c 	bl	8004d40 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d302      	bcc.n	8006ada <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d116      	bne.n	8006b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	f043 0220 	orr.w	r2, r3, #32
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e007      	b.n	8006b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b12:	2b40      	cmp	r3, #64	; 0x40
 8006b14:	d1b5      	bne.n	8006a82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b36:	d11b      	bne.n	8006b70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	f043 0204 	orr.w	r2, r3, #4
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
	...

08006b80 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006b86:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <HAL_PWR_EnableBkUpAccess+0x20>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006b8c:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <HAL_PWR_EnableBkUpAccess+0x24>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006b92:	687b      	ldr	r3, [r7, #4]
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	420e0020 	.word	0x420e0020
 8006ba4:	40007000 	.word	0x40007000

08006ba8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006bae:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <HAL_PWR_DisableBkUpAccess+0x20>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <HAL_PWR_DisableBkUpAccess+0x24>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006bba:	687b      	ldr	r3, [r7, #4]
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	420e0020 	.word	0x420e0020
 8006bcc:	40007000 	.word	0x40007000

08006bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e267      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d075      	beq.n	8006cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bee:	4b88      	ldr	r3, [pc, #544]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 030c 	and.w	r3, r3, #12
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d00c      	beq.n	8006c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bfa:	4b85      	ldr	r3, [pc, #532]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c02:	2b08      	cmp	r3, #8
 8006c04:	d112      	bne.n	8006c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c06:	4b82      	ldr	r3, [pc, #520]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c12:	d10b      	bne.n	8006c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c14:	4b7e      	ldr	r3, [pc, #504]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d05b      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x108>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d157      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e242      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c34:	d106      	bne.n	8006c44 <HAL_RCC_OscConfig+0x74>
 8006c36:	4b76      	ldr	r3, [pc, #472]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a75      	ldr	r2, [pc, #468]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	e01d      	b.n	8006c80 <HAL_RCC_OscConfig+0xb0>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c4c:	d10c      	bne.n	8006c68 <HAL_RCC_OscConfig+0x98>
 8006c4e:	4b70      	ldr	r3, [pc, #448]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a6f      	ldr	r2, [pc, #444]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	4b6d      	ldr	r3, [pc, #436]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a6c      	ldr	r2, [pc, #432]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	e00b      	b.n	8006c80 <HAL_RCC_OscConfig+0xb0>
 8006c68:	4b69      	ldr	r3, [pc, #420]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a68      	ldr	r2, [pc, #416]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	4b66      	ldr	r3, [pc, #408]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a65      	ldr	r2, [pc, #404]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d013      	beq.n	8006cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c88:	f7fe f85a 	bl	8004d40 <HAL_GetTick>
 8006c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c90:	f7fe f856 	bl	8004d40 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b64      	cmp	r3, #100	; 0x64
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e207      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ca2:	4b5b      	ldr	r3, [pc, #364]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0f0      	beq.n	8006c90 <HAL_RCC_OscConfig+0xc0>
 8006cae:	e014      	b.n	8006cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb0:	f7fe f846 	bl	8004d40 <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cb6:	e008      	b.n	8006cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cb8:	f7fe f842 	bl	8004d40 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b64      	cmp	r3, #100	; 0x64
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e1f3      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cca:	4b51      	ldr	r3, [pc, #324]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1f0      	bne.n	8006cb8 <HAL_RCC_OscConfig+0xe8>
 8006cd6:	e000      	b.n	8006cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d063      	beq.n	8006dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ce6:	4b4a      	ldr	r3, [pc, #296]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 030c 	and.w	r3, r3, #12
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00b      	beq.n	8006d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cf2:	4b47      	ldr	r3, [pc, #284]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d11c      	bne.n	8006d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cfe:	4b44      	ldr	r3, [pc, #272]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d116      	bne.n	8006d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d0a:	4b41      	ldr	r3, [pc, #260]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <HAL_RCC_OscConfig+0x152>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d001      	beq.n	8006d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e1c7      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d22:	4b3b      	ldr	r3, [pc, #236]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	4937      	ldr	r1, [pc, #220]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d36:	e03a      	b.n	8006dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d020      	beq.n	8006d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d40:	4b34      	ldr	r3, [pc, #208]	; (8006e14 <HAL_RCC_OscConfig+0x244>)
 8006d42:	2201      	movs	r2, #1
 8006d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d46:	f7fd fffb 	bl	8004d40 <HAL_GetTick>
 8006d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d4e:	f7fd fff7 	bl	8004d40 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e1a8      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d60:	4b2b      	ldr	r3, [pc, #172]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0f0      	beq.n	8006d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d6c:	4b28      	ldr	r3, [pc, #160]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	00db      	lsls	r3, r3, #3
 8006d7a:	4925      	ldr	r1, [pc, #148]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	600b      	str	r3, [r1, #0]
 8006d80:	e015      	b.n	8006dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d82:	4b24      	ldr	r3, [pc, #144]	; (8006e14 <HAL_RCC_OscConfig+0x244>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d88:	f7fd ffda 	bl	8004d40 <HAL_GetTick>
 8006d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d8e:	e008      	b.n	8006da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d90:	f7fd ffd6 	bl	8004d40 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e187      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006da2:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1f0      	bne.n	8006d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0308 	and.w	r3, r3, #8
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d036      	beq.n	8006e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d016      	beq.n	8006df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dc2:	4b15      	ldr	r3, [pc, #84]	; (8006e18 <HAL_RCC_OscConfig+0x248>)
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc8:	f7fd ffba 	bl	8004d40 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dd0:	f7fd ffb6 	bl	8004d40 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e167      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006de2:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <HAL_RCC_OscConfig+0x240>)
 8006de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0f0      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x200>
 8006dee:	e01b      	b.n	8006e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006df0:	4b09      	ldr	r3, [pc, #36]	; (8006e18 <HAL_RCC_OscConfig+0x248>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006df6:	f7fd ffa3 	bl	8004d40 <HAL_GetTick>
 8006dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dfc:	e00e      	b.n	8006e1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dfe:	f7fd ff9f 	bl	8004d40 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d907      	bls.n	8006e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e150      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
 8006e10:	40023800 	.word	0x40023800
 8006e14:	42470000 	.word	0x42470000
 8006e18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e1c:	4b88      	ldr	r3, [pc, #544]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1ea      	bne.n	8006dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8097 	beq.w	8006f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e36:	2300      	movs	r3, #0
 8006e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e3a:	4b81      	ldr	r3, [pc, #516]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10f      	bne.n	8006e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e46:	2300      	movs	r3, #0
 8006e48:	60bb      	str	r3, [r7, #8]
 8006e4a:	4b7d      	ldr	r3, [pc, #500]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	4a7c      	ldr	r2, [pc, #496]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e54:	6413      	str	r3, [r2, #64]	; 0x40
 8006e56:	4b7a      	ldr	r3, [pc, #488]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e5e:	60bb      	str	r3, [r7, #8]
 8006e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e62:	2301      	movs	r3, #1
 8006e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e66:	4b77      	ldr	r3, [pc, #476]	; (8007044 <HAL_RCC_OscConfig+0x474>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d118      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e72:	4b74      	ldr	r3, [pc, #464]	; (8007044 <HAL_RCC_OscConfig+0x474>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a73      	ldr	r2, [pc, #460]	; (8007044 <HAL_RCC_OscConfig+0x474>)
 8006e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e7e:	f7fd ff5f 	bl	8004d40 <HAL_GetTick>
 8006e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e84:	e008      	b.n	8006e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e86:	f7fd ff5b 	bl	8004d40 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e10c      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e98:	4b6a      	ldr	r3, [pc, #424]	; (8007044 <HAL_RCC_OscConfig+0x474>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0f0      	beq.n	8006e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d106      	bne.n	8006eba <HAL_RCC_OscConfig+0x2ea>
 8006eac:	4b64      	ldr	r3, [pc, #400]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb0:	4a63      	ldr	r2, [pc, #396]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006eb2:	f043 0301 	orr.w	r3, r3, #1
 8006eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8006eb8:	e01c      	b.n	8006ef4 <HAL_RCC_OscConfig+0x324>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	2b05      	cmp	r3, #5
 8006ec0:	d10c      	bne.n	8006edc <HAL_RCC_OscConfig+0x30c>
 8006ec2:	4b5f      	ldr	r3, [pc, #380]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec6:	4a5e      	ldr	r2, [pc, #376]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006ec8:	f043 0304 	orr.w	r3, r3, #4
 8006ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ece:	4b5c      	ldr	r3, [pc, #368]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed2:	4a5b      	ldr	r2, [pc, #364]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006ed4:	f043 0301 	orr.w	r3, r3, #1
 8006ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8006eda:	e00b      	b.n	8006ef4 <HAL_RCC_OscConfig+0x324>
 8006edc:	4b58      	ldr	r3, [pc, #352]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee0:	4a57      	ldr	r2, [pc, #348]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006ee2:	f023 0301 	bic.w	r3, r3, #1
 8006ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee8:	4b55      	ldr	r3, [pc, #340]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eec:	4a54      	ldr	r2, [pc, #336]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006eee:	f023 0304 	bic.w	r3, r3, #4
 8006ef2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d015      	beq.n	8006f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efc:	f7fd ff20 	bl	8004d40 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f02:	e00a      	b.n	8006f1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f04:	f7fd ff1c 	bl	8004d40 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e0cb      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f1a:	4b49      	ldr	r3, [pc, #292]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0ee      	beq.n	8006f04 <HAL_RCC_OscConfig+0x334>
 8006f26:	e014      	b.n	8006f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f28:	f7fd ff0a 	bl	8004d40 <HAL_GetTick>
 8006f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f2e:	e00a      	b.n	8006f46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f30:	f7fd ff06 	bl	8004d40 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e0b5      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f46:	4b3e      	ldr	r3, [pc, #248]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1ee      	bne.n	8006f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d105      	bne.n	8006f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f58:	4b39      	ldr	r3, [pc, #228]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5c:	4a38      	ldr	r2, [pc, #224]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80a1 	beq.w	80070b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f6e:	4b34      	ldr	r3, [pc, #208]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 030c 	and.w	r3, r3, #12
 8006f76:	2b08      	cmp	r3, #8
 8006f78:	d05c      	beq.n	8007034 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d141      	bne.n	8007006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f82:	4b31      	ldr	r3, [pc, #196]	; (8007048 <HAL_RCC_OscConfig+0x478>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f88:	f7fd feda 	bl	8004d40 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f90:	f7fd fed6 	bl	8004d40 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e087      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fa2:	4b27      	ldr	r3, [pc, #156]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1f0      	bne.n	8006f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	69da      	ldr	r2, [r3, #28]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	019b      	lsls	r3, r3, #6
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc4:	085b      	lsrs	r3, r3, #1
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	041b      	lsls	r3, r3, #16
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	061b      	lsls	r3, r3, #24
 8006fd2:	491b      	ldr	r1, [pc, #108]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fd8:	4b1b      	ldr	r3, [pc, #108]	; (8007048 <HAL_RCC_OscConfig+0x478>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fde:	f7fd feaf 	bl	8004d40 <HAL_GetTick>
 8006fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fe4:	e008      	b.n	8006ff8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fe6:	f7fd feab 	bl	8004d40 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e05c      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ff8:	4b11      	ldr	r3, [pc, #68]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0f0      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x416>
 8007004:	e054      	b.n	80070b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007006:	4b10      	ldr	r3, [pc, #64]	; (8007048 <HAL_RCC_OscConfig+0x478>)
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800700c:	f7fd fe98 	bl	8004d40 <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007014:	f7fd fe94 	bl	8004d40 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e045      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007026:	4b06      	ldr	r3, [pc, #24]	; (8007040 <HAL_RCC_OscConfig+0x470>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f0      	bne.n	8007014 <HAL_RCC_OscConfig+0x444>
 8007032:	e03d      	b.n	80070b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d107      	bne.n	800704c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e038      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
 8007040:	40023800 	.word	0x40023800
 8007044:	40007000 	.word	0x40007000
 8007048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800704c:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <HAL_RCC_OscConfig+0x4ec>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d028      	beq.n	80070ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007064:	429a      	cmp	r2, r3
 8007066:	d121      	bne.n	80070ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007072:	429a      	cmp	r2, r3
 8007074:	d11a      	bne.n	80070ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800707c:	4013      	ands	r3, r2
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007084:	4293      	cmp	r3, r2
 8007086:	d111      	bne.n	80070ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007092:	085b      	lsrs	r3, r3, #1
 8007094:	3b01      	subs	r3, #1
 8007096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007098:	429a      	cmp	r2, r3
 800709a:	d107      	bne.n	80070ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d001      	beq.n	80070b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	40023800 	.word	0x40023800

080070c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e0cc      	b.n	800726e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070d4:	4b68      	ldr	r3, [pc, #416]	; (8007278 <HAL_RCC_ClockConfig+0x1b8>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d90c      	bls.n	80070fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070e2:	4b65      	ldr	r3, [pc, #404]	; (8007278 <HAL_RCC_ClockConfig+0x1b8>)
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ea:	4b63      	ldr	r3, [pc, #396]	; (8007278 <HAL_RCC_ClockConfig+0x1b8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d001      	beq.n	80070fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e0b8      	b.n	800726e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d020      	beq.n	800714a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007114:	4b59      	ldr	r3, [pc, #356]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	4a58      	ldr	r2, [pc, #352]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 800711a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800711e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800712c:	4b53      	ldr	r3, [pc, #332]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	4a52      	ldr	r2, [pc, #328]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007138:	4b50      	ldr	r3, [pc, #320]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	494d      	ldr	r1, [pc, #308]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007146:	4313      	orrs	r3, r2
 8007148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d044      	beq.n	80071e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d107      	bne.n	800716e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800715e:	4b47      	ldr	r3, [pc, #284]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d119      	bne.n	800719e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e07f      	b.n	800726e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d003      	beq.n	800717e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800717a:	2b03      	cmp	r3, #3
 800717c:	d107      	bne.n	800718e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800717e:	4b3f      	ldr	r3, [pc, #252]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d109      	bne.n	800719e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e06f      	b.n	800726e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800718e:	4b3b      	ldr	r3, [pc, #236]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e067      	b.n	800726e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800719e:	4b37      	ldr	r3, [pc, #220]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f023 0203 	bic.w	r2, r3, #3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	4934      	ldr	r1, [pc, #208]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071b0:	f7fd fdc6 	bl	8004d40 <HAL_GetTick>
 80071b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071b6:	e00a      	b.n	80071ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071b8:	f7fd fdc2 	bl	8004d40 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e04f      	b.n	800726e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ce:	4b2b      	ldr	r3, [pc, #172]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f003 020c 	and.w	r2, r3, #12
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	429a      	cmp	r2, r3
 80071de:	d1eb      	bne.n	80071b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071e0:	4b25      	ldr	r3, [pc, #148]	; (8007278 <HAL_RCC_ClockConfig+0x1b8>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d20c      	bcs.n	8007208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ee:	4b22      	ldr	r3, [pc, #136]	; (8007278 <HAL_RCC_ClockConfig+0x1b8>)
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071f6:	4b20      	ldr	r3, [pc, #128]	; (8007278 <HAL_RCC_ClockConfig+0x1b8>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d001      	beq.n	8007208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e032      	b.n	800726e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d008      	beq.n	8007226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007214:	4b19      	ldr	r3, [pc, #100]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	4916      	ldr	r1, [pc, #88]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007222:	4313      	orrs	r3, r2
 8007224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d009      	beq.n	8007246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007232:	4b12      	ldr	r3, [pc, #72]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	490e      	ldr	r1, [pc, #56]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007242:	4313      	orrs	r3, r2
 8007244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007246:	f000 f821 	bl	800728c <HAL_RCC_GetSysClockFreq>
 800724a:	4602      	mov	r2, r0
 800724c:	4b0b      	ldr	r3, [pc, #44]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	091b      	lsrs	r3, r3, #4
 8007252:	f003 030f 	and.w	r3, r3, #15
 8007256:	490a      	ldr	r1, [pc, #40]	; (8007280 <HAL_RCC_ClockConfig+0x1c0>)
 8007258:	5ccb      	ldrb	r3, [r1, r3]
 800725a:	fa22 f303 	lsr.w	r3, r2, r3
 800725e:	4a09      	ldr	r2, [pc, #36]	; (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 8007260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007262:	4b09      	ldr	r3, [pc, #36]	; (8007288 <HAL_RCC_ClockConfig+0x1c8>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4618      	mov	r0, r3
 8007268:	f7fd fd26 	bl	8004cb8 <HAL_InitTick>

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40023c00 	.word	0x40023c00
 800727c:	40023800 	.word	0x40023800
 8007280:	080107a4 	.word	0x080107a4
 8007284:	20000020 	.word	0x20000020
 8007288:	20000024 	.word	0x20000024

0800728c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800728c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007290:	b090      	sub	sp, #64	; 0x40
 8007292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	637b      	str	r3, [r7, #52]	; 0x34
 8007298:	2300      	movs	r3, #0
 800729a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800729c:	2300      	movs	r3, #0
 800729e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072a4:	4b59      	ldr	r3, [pc, #356]	; (800740c <HAL_RCC_GetSysClockFreq+0x180>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 030c 	and.w	r3, r3, #12
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	d00d      	beq.n	80072cc <HAL_RCC_GetSysClockFreq+0x40>
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	f200 80a1 	bhi.w	80073f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_RCC_GetSysClockFreq+0x34>
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d003      	beq.n	80072c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80072be:	e09b      	b.n	80073f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072c0:	4b53      	ldr	r3, [pc, #332]	; (8007410 <HAL_RCC_GetSysClockFreq+0x184>)
 80072c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80072c4:	e09b      	b.n	80073fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072c6:	4b53      	ldr	r3, [pc, #332]	; (8007414 <HAL_RCC_GetSysClockFreq+0x188>)
 80072c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072ca:	e098      	b.n	80073fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072cc:	4b4f      	ldr	r3, [pc, #316]	; (800740c <HAL_RCC_GetSysClockFreq+0x180>)
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072d6:	4b4d      	ldr	r3, [pc, #308]	; (800740c <HAL_RCC_GetSysClockFreq+0x180>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d028      	beq.n	8007334 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072e2:	4b4a      	ldr	r3, [pc, #296]	; (800740c <HAL_RCC_GetSysClockFreq+0x180>)
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	099b      	lsrs	r3, r3, #6
 80072e8:	2200      	movs	r2, #0
 80072ea:	623b      	str	r3, [r7, #32]
 80072ec:	627a      	str	r2, [r7, #36]	; 0x24
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80072f4:	2100      	movs	r1, #0
 80072f6:	4b47      	ldr	r3, [pc, #284]	; (8007414 <HAL_RCC_GetSysClockFreq+0x188>)
 80072f8:	fb03 f201 	mul.w	r2, r3, r1
 80072fc:	2300      	movs	r3, #0
 80072fe:	fb00 f303 	mul.w	r3, r0, r3
 8007302:	4413      	add	r3, r2
 8007304:	4a43      	ldr	r2, [pc, #268]	; (8007414 <HAL_RCC_GetSysClockFreq+0x188>)
 8007306:	fba0 1202 	umull	r1, r2, r0, r2
 800730a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800730c:	460a      	mov	r2, r1
 800730e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007312:	4413      	add	r3, r2
 8007314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007318:	2200      	movs	r2, #0
 800731a:	61bb      	str	r3, [r7, #24]
 800731c:	61fa      	str	r2, [r7, #28]
 800731e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007322:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007326:	f7f9 fc3f 	bl	8000ba8 <__aeabi_uldivmod>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4613      	mov	r3, r2
 8007330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007332:	e053      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007334:	4b35      	ldr	r3, [pc, #212]	; (800740c <HAL_RCC_GetSysClockFreq+0x180>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	099b      	lsrs	r3, r3, #6
 800733a:	2200      	movs	r2, #0
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	617a      	str	r2, [r7, #20]
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007346:	f04f 0b00 	mov.w	fp, #0
 800734a:	4652      	mov	r2, sl
 800734c:	465b      	mov	r3, fp
 800734e:	f04f 0000 	mov.w	r0, #0
 8007352:	f04f 0100 	mov.w	r1, #0
 8007356:	0159      	lsls	r1, r3, #5
 8007358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800735c:	0150      	lsls	r0, r2, #5
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	ebb2 080a 	subs.w	r8, r2, sl
 8007366:	eb63 090b 	sbc.w	r9, r3, fp
 800736a:	f04f 0200 	mov.w	r2, #0
 800736e:	f04f 0300 	mov.w	r3, #0
 8007372:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007376:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800737a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800737e:	ebb2 0408 	subs.w	r4, r2, r8
 8007382:	eb63 0509 	sbc.w	r5, r3, r9
 8007386:	f04f 0200 	mov.w	r2, #0
 800738a:	f04f 0300 	mov.w	r3, #0
 800738e:	00eb      	lsls	r3, r5, #3
 8007390:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007394:	00e2      	lsls	r2, r4, #3
 8007396:	4614      	mov	r4, r2
 8007398:	461d      	mov	r5, r3
 800739a:	eb14 030a 	adds.w	r3, r4, sl
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	eb45 030b 	adc.w	r3, r5, fp
 80073a4:	607b      	str	r3, [r7, #4]
 80073a6:	f04f 0200 	mov.w	r2, #0
 80073aa:	f04f 0300 	mov.w	r3, #0
 80073ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073b2:	4629      	mov	r1, r5
 80073b4:	028b      	lsls	r3, r1, #10
 80073b6:	4621      	mov	r1, r4
 80073b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073bc:	4621      	mov	r1, r4
 80073be:	028a      	lsls	r2, r1, #10
 80073c0:	4610      	mov	r0, r2
 80073c2:	4619      	mov	r1, r3
 80073c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c6:	2200      	movs	r2, #0
 80073c8:	60bb      	str	r3, [r7, #8]
 80073ca:	60fa      	str	r2, [r7, #12]
 80073cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073d0:	f7f9 fbea 	bl	8000ba8 <__aeabi_uldivmod>
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4613      	mov	r3, r2
 80073da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073dc:	4b0b      	ldr	r3, [pc, #44]	; (800740c <HAL_RCC_GetSysClockFreq+0x180>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	0c1b      	lsrs	r3, r3, #16
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	3301      	adds	r3, #1
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80073ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80073f6:	e002      	b.n	80073fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073f8:	4b05      	ldr	r3, [pc, #20]	; (8007410 <HAL_RCC_GetSysClockFreq+0x184>)
 80073fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80073fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007400:	4618      	mov	r0, r3
 8007402:	3740      	adds	r7, #64	; 0x40
 8007404:	46bd      	mov	sp, r7
 8007406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800740a:	bf00      	nop
 800740c:	40023800 	.word	0x40023800
 8007410:	00f42400 	.word	0x00f42400
 8007414:	017d7840 	.word	0x017d7840

08007418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007418:	b480      	push	{r7}
 800741a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800741c:	4b03      	ldr	r3, [pc, #12]	; (800742c <HAL_RCC_GetHCLKFreq+0x14>)
 800741e:	681b      	ldr	r3, [r3, #0]
}
 8007420:	4618      	mov	r0, r3
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	20000020 	.word	0x20000020

08007430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007434:	f7ff fff0 	bl	8007418 <HAL_RCC_GetHCLKFreq>
 8007438:	4602      	mov	r2, r0
 800743a:	4b05      	ldr	r3, [pc, #20]	; (8007450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	0a9b      	lsrs	r3, r3, #10
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	4903      	ldr	r1, [pc, #12]	; (8007454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007446:	5ccb      	ldrb	r3, [r1, r3]
 8007448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800744c:	4618      	mov	r0, r3
 800744e:	bd80      	pop	{r7, pc}
 8007450:	40023800 	.word	0x40023800
 8007454:	080107b4 	.word	0x080107b4

08007458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800745c:	f7ff ffdc 	bl	8007418 <HAL_RCC_GetHCLKFreq>
 8007460:	4602      	mov	r2, r0
 8007462:	4b05      	ldr	r3, [pc, #20]	; (8007478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	0b5b      	lsrs	r3, r3, #13
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	4903      	ldr	r1, [pc, #12]	; (800747c <HAL_RCC_GetPCLK2Freq+0x24>)
 800746e:	5ccb      	ldrb	r3, [r1, r3]
 8007470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007474:	4618      	mov	r0, r3
 8007476:	bd80      	pop	{r7, pc}
 8007478:	40023800 	.word	0x40023800
 800747c:	080107b4 	.word	0x080107b4

08007480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e041      	b.n	8007516 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fd f87c 	bl	80045a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3304      	adds	r3, #4
 80074bc:	4619      	mov	r1, r3
 80074be:	4610      	mov	r0, r2
 80074c0:	f001 f828 	bl	8008514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b01      	cmp	r3, #1
 8007532:	d001      	beq.n	8007538 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e046      	b.n	80075c6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a23      	ldr	r2, [pc, #140]	; (80075d4 <HAL_TIM_Base_Start+0xb4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d022      	beq.n	8007590 <HAL_TIM_Base_Start+0x70>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007552:	d01d      	beq.n	8007590 <HAL_TIM_Base_Start+0x70>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1f      	ldr	r2, [pc, #124]	; (80075d8 <HAL_TIM_Base_Start+0xb8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d018      	beq.n	8007590 <HAL_TIM_Base_Start+0x70>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1e      	ldr	r2, [pc, #120]	; (80075dc <HAL_TIM_Base_Start+0xbc>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d013      	beq.n	8007590 <HAL_TIM_Base_Start+0x70>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1c      	ldr	r2, [pc, #112]	; (80075e0 <HAL_TIM_Base_Start+0xc0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00e      	beq.n	8007590 <HAL_TIM_Base_Start+0x70>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a1b      	ldr	r2, [pc, #108]	; (80075e4 <HAL_TIM_Base_Start+0xc4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d009      	beq.n	8007590 <HAL_TIM_Base_Start+0x70>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a19      	ldr	r2, [pc, #100]	; (80075e8 <HAL_TIM_Base_Start+0xc8>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d004      	beq.n	8007590 <HAL_TIM_Base_Start+0x70>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a18      	ldr	r2, [pc, #96]	; (80075ec <HAL_TIM_Base_Start+0xcc>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d111      	bne.n	80075b4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b06      	cmp	r3, #6
 80075a0:	d010      	beq.n	80075c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f042 0201 	orr.w	r2, r2, #1
 80075b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b2:	e007      	b.n	80075c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0201 	orr.w	r2, r2, #1
 80075c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40010000 	.word	0x40010000
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40000800 	.word	0x40000800
 80075e0:	40000c00 	.word	0x40000c00
 80075e4:	40010400 	.word	0x40010400
 80075e8:	40014000 	.word	0x40014000
 80075ec:	40001800 	.word	0x40001800

080075f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e041      	b.n	8007686 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f839 	bl	800768e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3304      	adds	r3, #4
 800762c:	4619      	mov	r1, r3
 800762e:	4610      	mov	r0, r2
 8007630:	f000 ff70 	bl	8008514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
	...

080076a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d109      	bne.n	80076c8 <HAL_TIM_PWM_Start+0x24>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	bf14      	ite	ne
 80076c0:	2301      	movne	r3, #1
 80076c2:	2300      	moveq	r3, #0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	e022      	b.n	800770e <HAL_TIM_PWM_Start+0x6a>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d109      	bne.n	80076e2 <HAL_TIM_PWM_Start+0x3e>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	bf14      	ite	ne
 80076da:	2301      	movne	r3, #1
 80076dc:	2300      	moveq	r3, #0
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	e015      	b.n	800770e <HAL_TIM_PWM_Start+0x6a>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d109      	bne.n	80076fc <HAL_TIM_PWM_Start+0x58>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	bf14      	ite	ne
 80076f4:	2301      	movne	r3, #1
 80076f6:	2300      	moveq	r3, #0
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	e008      	b.n	800770e <HAL_TIM_PWM_Start+0x6a>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b01      	cmp	r3, #1
 8007706:	bf14      	ite	ne
 8007708:	2301      	movne	r3, #1
 800770a:	2300      	moveq	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e07c      	b.n	8007810 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d104      	bne.n	8007726 <HAL_TIM_PWM_Start+0x82>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007724:	e013      	b.n	800774e <HAL_TIM_PWM_Start+0xaa>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b04      	cmp	r3, #4
 800772a:	d104      	bne.n	8007736 <HAL_TIM_PWM_Start+0x92>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007734:	e00b      	b.n	800774e <HAL_TIM_PWM_Start+0xaa>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b08      	cmp	r3, #8
 800773a:	d104      	bne.n	8007746 <HAL_TIM_PWM_Start+0xa2>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007744:	e003      	b.n	800774e <HAL_TIM_PWM_Start+0xaa>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2202      	movs	r2, #2
 800774a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2201      	movs	r2, #1
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	4618      	mov	r0, r3
 8007758:	f001 faf0 	bl	8008d3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a2d      	ldr	r2, [pc, #180]	; (8007818 <HAL_TIM_PWM_Start+0x174>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d004      	beq.n	8007770 <HAL_TIM_PWM_Start+0xcc>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a2c      	ldr	r2, [pc, #176]	; (800781c <HAL_TIM_PWM_Start+0x178>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d101      	bne.n	8007774 <HAL_TIM_PWM_Start+0xd0>
 8007770:	2301      	movs	r3, #1
 8007772:	e000      	b.n	8007776 <HAL_TIM_PWM_Start+0xd2>
 8007774:	2300      	movs	r3, #0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d007      	beq.n	800778a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007788:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a22      	ldr	r2, [pc, #136]	; (8007818 <HAL_TIM_PWM_Start+0x174>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d022      	beq.n	80077da <HAL_TIM_PWM_Start+0x136>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800779c:	d01d      	beq.n	80077da <HAL_TIM_PWM_Start+0x136>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1f      	ldr	r2, [pc, #124]	; (8007820 <HAL_TIM_PWM_Start+0x17c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d018      	beq.n	80077da <HAL_TIM_PWM_Start+0x136>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a1d      	ldr	r2, [pc, #116]	; (8007824 <HAL_TIM_PWM_Start+0x180>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d013      	beq.n	80077da <HAL_TIM_PWM_Start+0x136>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a1c      	ldr	r2, [pc, #112]	; (8007828 <HAL_TIM_PWM_Start+0x184>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00e      	beq.n	80077da <HAL_TIM_PWM_Start+0x136>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a16      	ldr	r2, [pc, #88]	; (800781c <HAL_TIM_PWM_Start+0x178>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d009      	beq.n	80077da <HAL_TIM_PWM_Start+0x136>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a18      	ldr	r2, [pc, #96]	; (800782c <HAL_TIM_PWM_Start+0x188>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d004      	beq.n	80077da <HAL_TIM_PWM_Start+0x136>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a16      	ldr	r2, [pc, #88]	; (8007830 <HAL_TIM_PWM_Start+0x18c>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d111      	bne.n	80077fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b06      	cmp	r3, #6
 80077ea:	d010      	beq.n	800780e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0201 	orr.w	r2, r2, #1
 80077fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077fc:	e007      	b.n	800780e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 0201 	orr.w	r2, r2, #1
 800780c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	40010000 	.word	0x40010000
 800781c:	40010400 	.word	0x40010400
 8007820:	40000400 	.word	0x40000400
 8007824:	40000800 	.word	0x40000800
 8007828:	40000c00 	.word	0x40000c00
 800782c:	40014000 	.word	0x40014000
 8007830:	40001800 	.word	0x40001800

08007834 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e041      	b.n	80078ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f839 	bl	80078d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3304      	adds	r3, #4
 8007870:	4619      	mov	r1, r3
 8007872:	4610      	mov	r0, r2
 8007874:	f000 fe4e 	bl	8008514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80078da:	bf00      	nop
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
	...

080078e8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d104      	bne.n	8007906 <HAL_TIM_IC_Start_IT+0x1e>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007902:	b2db      	uxtb	r3, r3
 8007904:	e013      	b.n	800792e <HAL_TIM_IC_Start_IT+0x46>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b04      	cmp	r3, #4
 800790a:	d104      	bne.n	8007916 <HAL_TIM_IC_Start_IT+0x2e>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007912:	b2db      	uxtb	r3, r3
 8007914:	e00b      	b.n	800792e <HAL_TIM_IC_Start_IT+0x46>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b08      	cmp	r3, #8
 800791a:	d104      	bne.n	8007926 <HAL_TIM_IC_Start_IT+0x3e>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007922:	b2db      	uxtb	r3, r3
 8007924:	e003      	b.n	800792e <HAL_TIM_IC_Start_IT+0x46>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800792c:	b2db      	uxtb	r3, r3
 800792e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d104      	bne.n	8007940 <HAL_TIM_IC_Start_IT+0x58>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800793c:	b2db      	uxtb	r3, r3
 800793e:	e013      	b.n	8007968 <HAL_TIM_IC_Start_IT+0x80>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b04      	cmp	r3, #4
 8007944:	d104      	bne.n	8007950 <HAL_TIM_IC_Start_IT+0x68>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800794c:	b2db      	uxtb	r3, r3
 800794e:	e00b      	b.n	8007968 <HAL_TIM_IC_Start_IT+0x80>
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2b08      	cmp	r3, #8
 8007954:	d104      	bne.n	8007960 <HAL_TIM_IC_Start_IT+0x78>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800795c:	b2db      	uxtb	r3, r3
 800795e:	e003      	b.n	8007968 <HAL_TIM_IC_Start_IT+0x80>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007966:	b2db      	uxtb	r3, r3
 8007968:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d102      	bne.n	8007976 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007970:	7b7b      	ldrb	r3, [r7, #13]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d001      	beq.n	800797a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e0cc      	b.n	8007b14 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d104      	bne.n	800798a <HAL_TIM_IC_Start_IT+0xa2>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007988:	e013      	b.n	80079b2 <HAL_TIM_IC_Start_IT+0xca>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b04      	cmp	r3, #4
 800798e:	d104      	bne.n	800799a <HAL_TIM_IC_Start_IT+0xb2>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007998:	e00b      	b.n	80079b2 <HAL_TIM_IC_Start_IT+0xca>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b08      	cmp	r3, #8
 800799e:	d104      	bne.n	80079aa <HAL_TIM_IC_Start_IT+0xc2>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079a8:	e003      	b.n	80079b2 <HAL_TIM_IC_Start_IT+0xca>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2202      	movs	r2, #2
 80079ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d104      	bne.n	80079c2 <HAL_TIM_IC_Start_IT+0xda>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079c0:	e013      	b.n	80079ea <HAL_TIM_IC_Start_IT+0x102>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d104      	bne.n	80079d2 <HAL_TIM_IC_Start_IT+0xea>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079d0:	e00b      	b.n	80079ea <HAL_TIM_IC_Start_IT+0x102>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b08      	cmp	r3, #8
 80079d6:	d104      	bne.n	80079e2 <HAL_TIM_IC_Start_IT+0xfa>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079e0:	e003      	b.n	80079ea <HAL_TIM_IC_Start_IT+0x102>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2202      	movs	r2, #2
 80079e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b0c      	cmp	r3, #12
 80079ee:	d841      	bhi.n	8007a74 <HAL_TIM_IC_Start_IT+0x18c>
 80079f0:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <HAL_TIM_IC_Start_IT+0x110>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a2d 	.word	0x08007a2d
 80079fc:	08007a75 	.word	0x08007a75
 8007a00:	08007a75 	.word	0x08007a75
 8007a04:	08007a75 	.word	0x08007a75
 8007a08:	08007a3f 	.word	0x08007a3f
 8007a0c:	08007a75 	.word	0x08007a75
 8007a10:	08007a75 	.word	0x08007a75
 8007a14:	08007a75 	.word	0x08007a75
 8007a18:	08007a51 	.word	0x08007a51
 8007a1c:	08007a75 	.word	0x08007a75
 8007a20:	08007a75 	.word	0x08007a75
 8007a24:	08007a75 	.word	0x08007a75
 8007a28:	08007a63 	.word	0x08007a63
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68da      	ldr	r2, [r3, #12]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0202 	orr.w	r2, r2, #2
 8007a3a:	60da      	str	r2, [r3, #12]
      break;
 8007a3c:	e01d      	b.n	8007a7a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f042 0204 	orr.w	r2, r2, #4
 8007a4c:	60da      	str	r2, [r3, #12]
      break;
 8007a4e:	e014      	b.n	8007a7a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0208 	orr.w	r2, r2, #8
 8007a5e:	60da      	str	r2, [r3, #12]
      break;
 8007a60:	e00b      	b.n	8007a7a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f042 0210 	orr.w	r2, r2, #16
 8007a70:	60da      	str	r2, [r3, #12]
      break;
 8007a72:	e002      	b.n	8007a7a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	73fb      	strb	r3, [r7, #15]
      break;
 8007a78:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d148      	bne.n	8007b12 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2201      	movs	r2, #1
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 f957 	bl	8008d3c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a22      	ldr	r2, [pc, #136]	; (8007b1c <HAL_TIM_IC_Start_IT+0x234>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d022      	beq.n	8007ade <HAL_TIM_IC_Start_IT+0x1f6>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa0:	d01d      	beq.n	8007ade <HAL_TIM_IC_Start_IT+0x1f6>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a1e      	ldr	r2, [pc, #120]	; (8007b20 <HAL_TIM_IC_Start_IT+0x238>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d018      	beq.n	8007ade <HAL_TIM_IC_Start_IT+0x1f6>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a1c      	ldr	r2, [pc, #112]	; (8007b24 <HAL_TIM_IC_Start_IT+0x23c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d013      	beq.n	8007ade <HAL_TIM_IC_Start_IT+0x1f6>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a1b      	ldr	r2, [pc, #108]	; (8007b28 <HAL_TIM_IC_Start_IT+0x240>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00e      	beq.n	8007ade <HAL_TIM_IC_Start_IT+0x1f6>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a19      	ldr	r2, [pc, #100]	; (8007b2c <HAL_TIM_IC_Start_IT+0x244>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d009      	beq.n	8007ade <HAL_TIM_IC_Start_IT+0x1f6>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a18      	ldr	r2, [pc, #96]	; (8007b30 <HAL_TIM_IC_Start_IT+0x248>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d004      	beq.n	8007ade <HAL_TIM_IC_Start_IT+0x1f6>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a16      	ldr	r2, [pc, #88]	; (8007b34 <HAL_TIM_IC_Start_IT+0x24c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d111      	bne.n	8007b02 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2b06      	cmp	r3, #6
 8007aee:	d010      	beq.n	8007b12 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0201 	orr.w	r2, r2, #1
 8007afe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b00:	e007      	b.n	8007b12 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f042 0201 	orr.w	r2, r2, #1
 8007b10:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40010000 	.word	0x40010000
 8007b20:	40000400 	.word	0x40000400
 8007b24:	40000800 	.word	0x40000800
 8007b28:	40000c00 	.word	0x40000c00
 8007b2c:	40010400 	.word	0x40010400
 8007b30:	40014000 	.word	0x40014000
 8007b34:	40001800 	.word	0x40001800

08007b38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e097      	b.n	8007c7c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d106      	bne.n	8007b66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7fc fdbb 	bl	80046dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6812      	ldr	r2, [r2, #0]
 8007b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b7c:	f023 0307 	bic.w	r3, r3, #7
 8007b80:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	f000 fcc1 	bl	8008514 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bba:	f023 0303 	bic.w	r3, r3, #3
 8007bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007bd8:	f023 030c 	bic.w	r3, r3, #12
 8007bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007be4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	021b      	lsls	r3, r3, #8
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	011a      	lsls	r2, r3, #4
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	031b      	lsls	r3, r3, #12
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007c16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007c1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ca4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d110      	bne.n	8007cd6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d102      	bne.n	8007cc0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cba:	7b7b      	ldrb	r3, [r7, #13]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d001      	beq.n	8007cc4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e089      	b.n	8007dd8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cd4:	e031      	b.n	8007d3a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d110      	bne.n	8007cfe <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d102      	bne.n	8007ce8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ce2:	7b3b      	ldrb	r3, [r7, #12]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d001      	beq.n	8007cec <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e075      	b.n	8007dd8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007cfc:	e01d      	b.n	8007d3a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d108      	bne.n	8007d16 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d105      	bne.n	8007d16 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d0a:	7b7b      	ldrb	r3, [r7, #13]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d102      	bne.n	8007d16 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d10:	7b3b      	ldrb	r3, [r7, #12]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d001      	beq.n	8007d1a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e05e      	b.n	8007dd8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2202      	movs	r2, #2
 8007d26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2202      	movs	r2, #2
 8007d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d010      	beq.n	8007d68 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007d46:	e01f      	b.n	8007d88 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	2100      	movs	r1, #0
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fff3 	bl	8008d3c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68da      	ldr	r2, [r3, #12]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f042 0202 	orr.w	r2, r2, #2
 8007d64:	60da      	str	r2, [r3, #12]
      break;
 8007d66:	e02e      	b.n	8007dc6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	2104      	movs	r1, #4
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 ffe3 	bl	8008d3c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68da      	ldr	r2, [r3, #12]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f042 0204 	orr.w	r2, r2, #4
 8007d84:	60da      	str	r2, [r3, #12]
      break;
 8007d86:	e01e      	b.n	8007dc6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 ffd3 	bl	8008d3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	2104      	movs	r1, #4
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 ffcc 	bl	8008d3c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0202 	orr.w	r2, r2, #2
 8007db2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f042 0204 	orr.w	r2, r2, #4
 8007dc2:	60da      	str	r2, [r3, #12]
      break;
 8007dc4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f042 0201 	orr.w	r2, r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d122      	bne.n	8007e3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d11b      	bne.n	8007e3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f06f 0202 	mvn.w	r2, #2
 8007e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7fa f8b8 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8007e28:	e005      	b.n	8007e36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fb54 	bl	80084d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fb5b 	bl	80084ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	f003 0304 	and.w	r3, r3, #4
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d122      	bne.n	8007e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	d11b      	bne.n	8007e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f06f 0204 	mvn.w	r2, #4
 8007e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2202      	movs	r2, #2
 8007e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7fa f88e 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8007e7c:	e005      	b.n	8007e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fb2a 	bl	80084d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fb31 	bl	80084ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f003 0308 	and.w	r3, r3, #8
 8007e9a:	2b08      	cmp	r3, #8
 8007e9c:	d122      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	f003 0308 	and.w	r3, r3, #8
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d11b      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f06f 0208 	mvn.w	r2, #8
 8007eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2204      	movs	r2, #4
 8007eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7fa f864 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8007ed0:	e005      	b.n	8007ede <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fb00 	bl	80084d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fb07 	bl	80084ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	f003 0310 	and.w	r3, r3, #16
 8007eee:	2b10      	cmp	r3, #16
 8007ef0:	d122      	bne.n	8007f38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	2b10      	cmp	r3, #16
 8007efe:	d11b      	bne.n	8007f38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f06f 0210 	mvn.w	r2, #16
 8007f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2208      	movs	r2, #8
 8007f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fa f83a 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8007f24:	e005      	b.n	8007f32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fad6 	bl	80084d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fadd 	bl	80084ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d10e      	bne.n	8007f64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d107      	bne.n	8007f64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f06f 0201 	mvn.w	r2, #1
 8007f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fab0 	bl	80084c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f6e:	2b80      	cmp	r3, #128	; 0x80
 8007f70:	d10e      	bne.n	8007f90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f7c:	2b80      	cmp	r3, #128	; 0x80
 8007f7e:	d107      	bne.n	8007f90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 ffd4 	bl	8008f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9a:	2b40      	cmp	r3, #64	; 0x40
 8007f9c:	d10e      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa8:	2b40      	cmp	r3, #64	; 0x40
 8007faa:	d107      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 faa2 	bl	8008500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f003 0320 	and.w	r3, r3, #32
 8007fc6:	2b20      	cmp	r3, #32
 8007fc8:	d10e      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f003 0320 	and.w	r3, r3, #32
 8007fd4:	2b20      	cmp	r3, #32
 8007fd6:	d107      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f06f 0220 	mvn.w	r2, #32
 8007fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 ff9e 	bl	8008f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008006:	2b01      	cmp	r3, #1
 8008008:	d101      	bne.n	800800e <HAL_TIM_IC_ConfigChannel+0x1e>
 800800a:	2302      	movs	r3, #2
 800800c:	e088      	b.n	8008120 <HAL_TIM_IC_ConfigChannel+0x130>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d11b      	bne.n	8008054 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6818      	ldr	r0, [r3, #0]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	6819      	ldr	r1, [r3, #0]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f000 fcc2 	bl	80089b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699a      	ldr	r2, [r3, #24]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 020c 	bic.w	r2, r2, #12
 800803e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6999      	ldr	r1, [r3, #24]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	619a      	str	r2, [r3, #24]
 8008052:	e060      	b.n	8008116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b04      	cmp	r3, #4
 8008058:	d11c      	bne.n	8008094 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	6819      	ldr	r1, [r3, #0]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	f000 fd46 	bl	8008afa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699a      	ldr	r2, [r3, #24]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800807c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6999      	ldr	r1, [r3, #24]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	021a      	lsls	r2, r3, #8
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	619a      	str	r2, [r3, #24]
 8008092:	e040      	b.n	8008116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b08      	cmp	r3, #8
 8008098:	d11b      	bne.n	80080d2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	6819      	ldr	r1, [r3, #0]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f000 fd93 	bl	8008bd4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	69da      	ldr	r2, [r3, #28]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 020c 	bic.w	r2, r2, #12
 80080bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	69d9      	ldr	r1, [r3, #28]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	689a      	ldr	r2, [r3, #8]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	61da      	str	r2, [r3, #28]
 80080d0:	e021      	b.n	8008116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b0c      	cmp	r3, #12
 80080d6:	d11c      	bne.n	8008112 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6818      	ldr	r0, [r3, #0]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	6819      	ldr	r1, [r3, #0]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f000 fdb0 	bl	8008c4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	69da      	ldr	r2, [r3, #28]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80080fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	69d9      	ldr	r1, [r3, #28]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	021a      	lsls	r2, r3, #8
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	61da      	str	r2, [r3, #28]
 8008110:	e001      	b.n	8008116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800811e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800813e:	2b01      	cmp	r3, #1
 8008140:	d101      	bne.n	8008146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008142:	2302      	movs	r3, #2
 8008144:	e0ae      	b.n	80082a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b0c      	cmp	r3, #12
 8008152:	f200 809f 	bhi.w	8008294 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008156:	a201      	add	r2, pc, #4	; (adr r2, 800815c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815c:	08008191 	.word	0x08008191
 8008160:	08008295 	.word	0x08008295
 8008164:	08008295 	.word	0x08008295
 8008168:	08008295 	.word	0x08008295
 800816c:	080081d1 	.word	0x080081d1
 8008170:	08008295 	.word	0x08008295
 8008174:	08008295 	.word	0x08008295
 8008178:	08008295 	.word	0x08008295
 800817c:	08008213 	.word	0x08008213
 8008180:	08008295 	.word	0x08008295
 8008184:	08008295 	.word	0x08008295
 8008188:	08008295 	.word	0x08008295
 800818c:	08008253 	.word	0x08008253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fa5c 	bl	8008654 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	699a      	ldr	r2, [r3, #24]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f042 0208 	orr.w	r2, r2, #8
 80081aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699a      	ldr	r2, [r3, #24]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 0204 	bic.w	r2, r2, #4
 80081ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6999      	ldr	r1, [r3, #24]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	691a      	ldr	r2, [r3, #16]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	619a      	str	r2, [r3, #24]
      break;
 80081ce:	e064      	b.n	800829a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68b9      	ldr	r1, [r7, #8]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 faac 	bl	8008734 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	699a      	ldr	r2, [r3, #24]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	699a      	ldr	r2, [r3, #24]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6999      	ldr	r1, [r3, #24]
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	021a      	lsls	r2, r3, #8
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	619a      	str	r2, [r3, #24]
      break;
 8008210:	e043      	b.n	800829a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68b9      	ldr	r1, [r7, #8]
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fb01 	bl	8008820 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	69da      	ldr	r2, [r3, #28]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f042 0208 	orr.w	r2, r2, #8
 800822c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69da      	ldr	r2, [r3, #28]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 0204 	bic.w	r2, r2, #4
 800823c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69d9      	ldr	r1, [r3, #28]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	691a      	ldr	r2, [r3, #16]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	61da      	str	r2, [r3, #28]
      break;
 8008250:	e023      	b.n	800829a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68b9      	ldr	r1, [r7, #8]
 8008258:	4618      	mov	r0, r3
 800825a:	f000 fb55 	bl	8008908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69da      	ldr	r2, [r3, #28]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800826c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	69da      	ldr	r2, [r3, #28]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800827c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69d9      	ldr	r1, [r3, #28]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	021a      	lsls	r2, r3, #8
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	61da      	str	r2, [r3, #28]
      break;
 8008292:	e002      	b.n	800829a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	75fb      	strb	r3, [r7, #23]
      break;
 8008298:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_TIM_ConfigClockSource+0x1c>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e0b4      	b.n	8008432 <HAL_TIM_ConfigClockSource+0x186>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2202      	movs	r2, #2
 80082d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008300:	d03e      	beq.n	8008380 <HAL_TIM_ConfigClockSource+0xd4>
 8008302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008306:	f200 8087 	bhi.w	8008418 <HAL_TIM_ConfigClockSource+0x16c>
 800830a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800830e:	f000 8086 	beq.w	800841e <HAL_TIM_ConfigClockSource+0x172>
 8008312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008316:	d87f      	bhi.n	8008418 <HAL_TIM_ConfigClockSource+0x16c>
 8008318:	2b70      	cmp	r3, #112	; 0x70
 800831a:	d01a      	beq.n	8008352 <HAL_TIM_ConfigClockSource+0xa6>
 800831c:	2b70      	cmp	r3, #112	; 0x70
 800831e:	d87b      	bhi.n	8008418 <HAL_TIM_ConfigClockSource+0x16c>
 8008320:	2b60      	cmp	r3, #96	; 0x60
 8008322:	d050      	beq.n	80083c6 <HAL_TIM_ConfigClockSource+0x11a>
 8008324:	2b60      	cmp	r3, #96	; 0x60
 8008326:	d877      	bhi.n	8008418 <HAL_TIM_ConfigClockSource+0x16c>
 8008328:	2b50      	cmp	r3, #80	; 0x50
 800832a:	d03c      	beq.n	80083a6 <HAL_TIM_ConfigClockSource+0xfa>
 800832c:	2b50      	cmp	r3, #80	; 0x50
 800832e:	d873      	bhi.n	8008418 <HAL_TIM_ConfigClockSource+0x16c>
 8008330:	2b40      	cmp	r3, #64	; 0x40
 8008332:	d058      	beq.n	80083e6 <HAL_TIM_ConfigClockSource+0x13a>
 8008334:	2b40      	cmp	r3, #64	; 0x40
 8008336:	d86f      	bhi.n	8008418 <HAL_TIM_ConfigClockSource+0x16c>
 8008338:	2b30      	cmp	r3, #48	; 0x30
 800833a:	d064      	beq.n	8008406 <HAL_TIM_ConfigClockSource+0x15a>
 800833c:	2b30      	cmp	r3, #48	; 0x30
 800833e:	d86b      	bhi.n	8008418 <HAL_TIM_ConfigClockSource+0x16c>
 8008340:	2b20      	cmp	r3, #32
 8008342:	d060      	beq.n	8008406 <HAL_TIM_ConfigClockSource+0x15a>
 8008344:	2b20      	cmp	r3, #32
 8008346:	d867      	bhi.n	8008418 <HAL_TIM_ConfigClockSource+0x16c>
 8008348:	2b00      	cmp	r3, #0
 800834a:	d05c      	beq.n	8008406 <HAL_TIM_ConfigClockSource+0x15a>
 800834c:	2b10      	cmp	r3, #16
 800834e:	d05a      	beq.n	8008406 <HAL_TIM_ConfigClockSource+0x15a>
 8008350:	e062      	b.n	8008418 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6818      	ldr	r0, [r3, #0]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	6899      	ldr	r1, [r3, #8]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f000 fccb 	bl	8008cfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	609a      	str	r2, [r3, #8]
      break;
 800837e:	e04f      	b.n	8008420 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	6899      	ldr	r1, [r3, #8]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f000 fcb4 	bl	8008cfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689a      	ldr	r2, [r3, #8]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083a2:	609a      	str	r2, [r3, #8]
      break;
 80083a4:	e03c      	b.n	8008420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6818      	ldr	r0, [r3, #0]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	6859      	ldr	r1, [r3, #4]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	461a      	mov	r2, r3
 80083b4:	f000 fb72 	bl	8008a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2150      	movs	r1, #80	; 0x50
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fc81 	bl	8008cc6 <TIM_ITRx_SetConfig>
      break;
 80083c4:	e02c      	b.n	8008420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	6859      	ldr	r1, [r3, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	461a      	mov	r2, r3
 80083d4:	f000 fbce 	bl	8008b74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2160      	movs	r1, #96	; 0x60
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fc71 	bl	8008cc6 <TIM_ITRx_SetConfig>
      break;
 80083e4:	e01c      	b.n	8008420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	6859      	ldr	r1, [r3, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	461a      	mov	r2, r3
 80083f4:	f000 fb52 	bl	8008a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2140      	movs	r1, #64	; 0x40
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 fc61 	bl	8008cc6 <TIM_ITRx_SetConfig>
      break;
 8008404:	e00c      	b.n	8008420 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4619      	mov	r1, r3
 8008410:	4610      	mov	r0, r2
 8008412:	f000 fc58 	bl	8008cc6 <TIM_ITRx_SetConfig>
      break;
 8008416:	e003      	b.n	8008420 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	73fb      	strb	r3, [r7, #15]
      break;
 800841c:	e000      	b.n	8008420 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800841e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008430:	7bfb      	ldrb	r3, [r7, #15]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b0c      	cmp	r3, #12
 800844e:	d831      	bhi.n	80084b4 <HAL_TIM_ReadCapturedValue+0x78>
 8008450:	a201      	add	r2, pc, #4	; (adr r2, 8008458 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008456:	bf00      	nop
 8008458:	0800848d 	.word	0x0800848d
 800845c:	080084b5 	.word	0x080084b5
 8008460:	080084b5 	.word	0x080084b5
 8008464:	080084b5 	.word	0x080084b5
 8008468:	08008497 	.word	0x08008497
 800846c:	080084b5 	.word	0x080084b5
 8008470:	080084b5 	.word	0x080084b5
 8008474:	080084b5 	.word	0x080084b5
 8008478:	080084a1 	.word	0x080084a1
 800847c:	080084b5 	.word	0x080084b5
 8008480:	080084b5 	.word	0x080084b5
 8008484:	080084b5 	.word	0x080084b5
 8008488:	080084ab 	.word	0x080084ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008492:	60fb      	str	r3, [r7, #12]

      break;
 8008494:	e00f      	b.n	80084b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	60fb      	str	r3, [r7, #12]

      break;
 800849e:	e00a      	b.n	80084b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a6:	60fb      	str	r3, [r7, #12]

      break;
 80084a8:	e005      	b.n	80084b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b0:	60fb      	str	r3, [r7, #12]

      break;
 80084b2:	e000      	b.n	80084b6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80084b4:	bf00      	nop
  }

  return tmpreg;
 80084b6:	68fb      	ldr	r3, [r7, #12]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a40      	ldr	r2, [pc, #256]	; (8008628 <TIM_Base_SetConfig+0x114>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d013      	beq.n	8008554 <TIM_Base_SetConfig+0x40>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008532:	d00f      	beq.n	8008554 <TIM_Base_SetConfig+0x40>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a3d      	ldr	r2, [pc, #244]	; (800862c <TIM_Base_SetConfig+0x118>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d00b      	beq.n	8008554 <TIM_Base_SetConfig+0x40>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a3c      	ldr	r2, [pc, #240]	; (8008630 <TIM_Base_SetConfig+0x11c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d007      	beq.n	8008554 <TIM_Base_SetConfig+0x40>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a3b      	ldr	r2, [pc, #236]	; (8008634 <TIM_Base_SetConfig+0x120>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d003      	beq.n	8008554 <TIM_Base_SetConfig+0x40>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a3a      	ldr	r2, [pc, #232]	; (8008638 <TIM_Base_SetConfig+0x124>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d108      	bne.n	8008566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4313      	orrs	r3, r2
 8008564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a2f      	ldr	r2, [pc, #188]	; (8008628 <TIM_Base_SetConfig+0x114>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d02b      	beq.n	80085c6 <TIM_Base_SetConfig+0xb2>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008574:	d027      	beq.n	80085c6 <TIM_Base_SetConfig+0xb2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a2c      	ldr	r2, [pc, #176]	; (800862c <TIM_Base_SetConfig+0x118>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d023      	beq.n	80085c6 <TIM_Base_SetConfig+0xb2>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a2b      	ldr	r2, [pc, #172]	; (8008630 <TIM_Base_SetConfig+0x11c>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d01f      	beq.n	80085c6 <TIM_Base_SetConfig+0xb2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a2a      	ldr	r2, [pc, #168]	; (8008634 <TIM_Base_SetConfig+0x120>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d01b      	beq.n	80085c6 <TIM_Base_SetConfig+0xb2>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a29      	ldr	r2, [pc, #164]	; (8008638 <TIM_Base_SetConfig+0x124>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d017      	beq.n	80085c6 <TIM_Base_SetConfig+0xb2>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a28      	ldr	r2, [pc, #160]	; (800863c <TIM_Base_SetConfig+0x128>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d013      	beq.n	80085c6 <TIM_Base_SetConfig+0xb2>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a27      	ldr	r2, [pc, #156]	; (8008640 <TIM_Base_SetConfig+0x12c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d00f      	beq.n	80085c6 <TIM_Base_SetConfig+0xb2>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a26      	ldr	r2, [pc, #152]	; (8008644 <TIM_Base_SetConfig+0x130>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d00b      	beq.n	80085c6 <TIM_Base_SetConfig+0xb2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a25      	ldr	r2, [pc, #148]	; (8008648 <TIM_Base_SetConfig+0x134>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d007      	beq.n	80085c6 <TIM_Base_SetConfig+0xb2>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a24      	ldr	r2, [pc, #144]	; (800864c <TIM_Base_SetConfig+0x138>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d003      	beq.n	80085c6 <TIM_Base_SetConfig+0xb2>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a23      	ldr	r2, [pc, #140]	; (8008650 <TIM_Base_SetConfig+0x13c>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d108      	bne.n	80085d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	689a      	ldr	r2, [r3, #8]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a0a      	ldr	r2, [pc, #40]	; (8008628 <TIM_Base_SetConfig+0x114>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d003      	beq.n	800860c <TIM_Base_SetConfig+0xf8>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a0c      	ldr	r2, [pc, #48]	; (8008638 <TIM_Base_SetConfig+0x124>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d103      	bne.n	8008614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	691a      	ldr	r2, [r3, #16]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	615a      	str	r2, [r3, #20]
}
 800861a:	bf00      	nop
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	40010000 	.word	0x40010000
 800862c:	40000400 	.word	0x40000400
 8008630:	40000800 	.word	0x40000800
 8008634:	40000c00 	.word	0x40000c00
 8008638:	40010400 	.word	0x40010400
 800863c:	40014000 	.word	0x40014000
 8008640:	40014400 	.word	0x40014400
 8008644:	40014800 	.word	0x40014800
 8008648:	40001800 	.word	0x40001800
 800864c:	40001c00 	.word	0x40001c00
 8008650:	40002000 	.word	0x40002000

08008654 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	f023 0201 	bic.w	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 0303 	bic.w	r3, r3, #3
 800868a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f023 0302 	bic.w	r3, r3, #2
 800869c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a20      	ldr	r2, [pc, #128]	; (800872c <TIM_OC1_SetConfig+0xd8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d003      	beq.n	80086b8 <TIM_OC1_SetConfig+0x64>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a1f      	ldr	r2, [pc, #124]	; (8008730 <TIM_OC1_SetConfig+0xdc>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d10c      	bne.n	80086d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f023 0308 	bic.w	r3, r3, #8
 80086be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f023 0304 	bic.w	r3, r3, #4
 80086d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a15      	ldr	r2, [pc, #84]	; (800872c <TIM_OC1_SetConfig+0xd8>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d003      	beq.n	80086e2 <TIM_OC1_SetConfig+0x8e>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a14      	ldr	r2, [pc, #80]	; (8008730 <TIM_OC1_SetConfig+0xdc>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d111      	bne.n	8008706 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	621a      	str	r2, [r3, #32]
}
 8008720:	bf00      	nop
 8008722:	371c      	adds	r7, #28
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	40010000 	.word	0x40010000
 8008730:	40010400 	.word	0x40010400

08008734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	f023 0210 	bic.w	r2, r3, #16
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800876a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	021b      	lsls	r3, r3, #8
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4313      	orrs	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f023 0320 	bic.w	r3, r3, #32
 800877e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	011b      	lsls	r3, r3, #4
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	4313      	orrs	r3, r2
 800878a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a22      	ldr	r2, [pc, #136]	; (8008818 <TIM_OC2_SetConfig+0xe4>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d003      	beq.n	800879c <TIM_OC2_SetConfig+0x68>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a21      	ldr	r2, [pc, #132]	; (800881c <TIM_OC2_SetConfig+0xe8>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d10d      	bne.n	80087b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	011b      	lsls	r3, r3, #4
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a17      	ldr	r2, [pc, #92]	; (8008818 <TIM_OC2_SetConfig+0xe4>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d003      	beq.n	80087c8 <TIM_OC2_SetConfig+0x94>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a16      	ldr	r2, [pc, #88]	; (800881c <TIM_OC2_SetConfig+0xe8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d113      	bne.n	80087f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	621a      	str	r2, [r3, #32]
}
 800880a:	bf00      	nop
 800880c:	371c      	adds	r7, #28
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40010000 	.word	0x40010000
 800881c:	40010400 	.word	0x40010400

08008820 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800884e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f023 0303 	bic.w	r3, r3, #3
 8008856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	021b      	lsls	r3, r3, #8
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	4313      	orrs	r3, r2
 8008874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a21      	ldr	r2, [pc, #132]	; (8008900 <TIM_OC3_SetConfig+0xe0>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d003      	beq.n	8008886 <TIM_OC3_SetConfig+0x66>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a20      	ldr	r2, [pc, #128]	; (8008904 <TIM_OC3_SetConfig+0xe4>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d10d      	bne.n	80088a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800888c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	4313      	orrs	r3, r2
 8008898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a16      	ldr	r2, [pc, #88]	; (8008900 <TIM_OC3_SetConfig+0xe0>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d003      	beq.n	80088b2 <TIM_OC3_SetConfig+0x92>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a15      	ldr	r2, [pc, #84]	; (8008904 <TIM_OC3_SetConfig+0xe4>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d113      	bne.n	80088da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	011b      	lsls	r3, r3, #4
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	011b      	lsls	r3, r3, #4
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	621a      	str	r2, [r3, #32]
}
 80088f4:	bf00      	nop
 80088f6:	371c      	adds	r7, #28
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	40010000 	.word	0x40010000
 8008904:	40010400 	.word	0x40010400

08008908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800893e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	021b      	lsls	r3, r3, #8
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4313      	orrs	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	031b      	lsls	r3, r3, #12
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	4313      	orrs	r3, r2
 800895e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a12      	ldr	r2, [pc, #72]	; (80089ac <TIM_OC4_SetConfig+0xa4>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d003      	beq.n	8008970 <TIM_OC4_SetConfig+0x68>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a11      	ldr	r2, [pc, #68]	; (80089b0 <TIM_OC4_SetConfig+0xa8>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d109      	bne.n	8008984 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008976:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	019b      	lsls	r3, r3, #6
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	4313      	orrs	r3, r2
 8008982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	621a      	str	r2, [r3, #32]
}
 800899e:	bf00      	nop
 80089a0:	371c      	adds	r7, #28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	40010000 	.word	0x40010000
 80089b0:	40010400 	.word	0x40010400

080089b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	f023 0201 	bic.w	r2, r3, #1
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6a1b      	ldr	r3, [r3, #32]
 80089d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	4a28      	ldr	r2, [pc, #160]	; (8008a80 <TIM_TI1_SetConfig+0xcc>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d01b      	beq.n	8008a1a <TIM_TI1_SetConfig+0x66>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e8:	d017      	beq.n	8008a1a <TIM_TI1_SetConfig+0x66>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4a25      	ldr	r2, [pc, #148]	; (8008a84 <TIM_TI1_SetConfig+0xd0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d013      	beq.n	8008a1a <TIM_TI1_SetConfig+0x66>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	4a24      	ldr	r2, [pc, #144]	; (8008a88 <TIM_TI1_SetConfig+0xd4>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d00f      	beq.n	8008a1a <TIM_TI1_SetConfig+0x66>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	4a23      	ldr	r2, [pc, #140]	; (8008a8c <TIM_TI1_SetConfig+0xd8>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d00b      	beq.n	8008a1a <TIM_TI1_SetConfig+0x66>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	4a22      	ldr	r2, [pc, #136]	; (8008a90 <TIM_TI1_SetConfig+0xdc>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d007      	beq.n	8008a1a <TIM_TI1_SetConfig+0x66>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4a21      	ldr	r2, [pc, #132]	; (8008a94 <TIM_TI1_SetConfig+0xe0>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d003      	beq.n	8008a1a <TIM_TI1_SetConfig+0x66>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	4a20      	ldr	r2, [pc, #128]	; (8008a98 <TIM_TI1_SetConfig+0xe4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d101      	bne.n	8008a1e <TIM_TI1_SetConfig+0x6a>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e000      	b.n	8008a20 <TIM_TI1_SetConfig+0x6c>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d008      	beq.n	8008a36 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f023 0303 	bic.w	r3, r3, #3
 8008a2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	e003      	b.n	8008a3e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f043 0301 	orr.w	r3, r3, #1
 8008a3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	011b      	lsls	r3, r3, #4
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f023 030a 	bic.w	r3, r3, #10
 8008a58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	f003 030a 	and.w	r3, r3, #10
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	621a      	str	r2, [r3, #32]
}
 8008a72:	bf00      	nop
 8008a74:	371c      	adds	r7, #28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	40010000 	.word	0x40010000
 8008a84:	40000400 	.word	0x40000400
 8008a88:	40000800 	.word	0x40000800
 8008a8c:	40000c00 	.word	0x40000c00
 8008a90:	40010400 	.word	0x40010400
 8008a94:	40014000 	.word	0x40014000
 8008a98:	40001800 	.word	0x40001800

08008a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
 8008aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	f023 0201 	bic.w	r2, r3, #1
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	011b      	lsls	r3, r3, #4
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f023 030a 	bic.w	r3, r3, #10
 8008ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	621a      	str	r2, [r3, #32]
}
 8008aee:	bf00      	nop
 8008af0:	371c      	adds	r7, #28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr

08008afa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b087      	sub	sp, #28
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	60f8      	str	r0, [r7, #12]
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	607a      	str	r2, [r7, #4]
 8008b06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	f023 0210 	bic.w	r2, r3, #16
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	021b      	lsls	r3, r3, #8
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	031b      	lsls	r3, r3, #12
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	621a      	str	r2, [r3, #32]
}
 8008b68:	bf00      	nop
 8008b6a:	371c      	adds	r7, #28
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6a1b      	ldr	r3, [r3, #32]
 8008b84:	f023 0210 	bic.w	r2, r3, #16
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	031b      	lsls	r3, r3, #12
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008bb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	011b      	lsls	r3, r3, #4
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	621a      	str	r2, [r3, #32]
}
 8008bc8:	bf00      	nop
 8008bca:	371c      	adds	r7, #28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
 8008be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f023 0303 	bic.w	r3, r3, #3
 8008c00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	011b      	lsls	r3, r3, #4
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008c24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	021b      	lsls	r3, r3, #8
 8008c2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	621a      	str	r2, [r3, #32]
}
 8008c40:	bf00      	nop
 8008c42:	371c      	adds	r7, #28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	021b      	lsls	r3, r3, #8
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	031b      	lsls	r3, r3, #12
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008c9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	031b      	lsls	r3, r3, #12
 8008ca4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	621a      	str	r2, [r3, #32]
}
 8008cba:	bf00      	nop
 8008cbc:	371c      	adds	r7, #28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b085      	sub	sp, #20
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	f043 0307 	orr.w	r3, r3, #7
 8008ce8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	609a      	str	r2, [r3, #8]
}
 8008cf0:	bf00      	nop
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	021a      	lsls	r2, r3, #8
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	609a      	str	r2, [r3, #8]
}
 8008d30:	bf00      	nop
 8008d32:	371c      	adds	r7, #28
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f003 031f 	and.w	r3, r3, #31
 8008d4e:	2201      	movs	r2, #1
 8008d50:	fa02 f303 	lsl.w	r3, r2, r3
 8008d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6a1a      	ldr	r2, [r3, #32]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	43db      	mvns	r3, r3
 8008d5e:	401a      	ands	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6a1a      	ldr	r2, [r3, #32]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f003 031f 	and.w	r3, r3, #31
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	fa01 f303 	lsl.w	r3, r1, r3
 8008d74:	431a      	orrs	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	621a      	str	r2, [r3, #32]
}
 8008d7a:	bf00      	nop
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
	...

08008d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d101      	bne.n	8008da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e05a      	b.n	8008e56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a21      	ldr	r2, [pc, #132]	; (8008e64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d022      	beq.n	8008e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dec:	d01d      	beq.n	8008e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a1d      	ldr	r2, [pc, #116]	; (8008e68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d018      	beq.n	8008e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a1b      	ldr	r2, [pc, #108]	; (8008e6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d013      	beq.n	8008e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a1a      	ldr	r2, [pc, #104]	; (8008e70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d00e      	beq.n	8008e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a18      	ldr	r2, [pc, #96]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d009      	beq.n	8008e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a17      	ldr	r2, [pc, #92]	; (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d004      	beq.n	8008e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a15      	ldr	r2, [pc, #84]	; (8008e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d10c      	bne.n	8008e44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	40010000 	.word	0x40010000
 8008e68:	40000400 	.word	0x40000400
 8008e6c:	40000800 	.word	0x40000800
 8008e70:	40000c00 	.word	0x40000c00
 8008e74:	40010400 	.word	0x40010400
 8008e78:	40014000 	.word	0x40014000
 8008e7c:	40001800 	.word	0x40001800

08008e80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d101      	bne.n	8008e9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e98:	2302      	movs	r3, #2
 8008e9a:	e03d      	b.n	8008f18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	695b      	ldr	r3, [r3, #20]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e03f      	b.n	8008fde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d106      	bne.n	8008f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7fb fc96 	bl	80048a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2224      	movs	r2, #36	; 0x24
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fddf 	bl	8009b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	691a      	ldr	r2, [r3, #16]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	695a      	ldr	r2, [r3, #20]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68da      	ldr	r2, [r3, #12]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2220      	movs	r2, #32
 8008fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b08a      	sub	sp, #40	; 0x28
 8008fea:	af02      	add	r7, sp, #8
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	603b      	str	r3, [r7, #0]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b20      	cmp	r3, #32
 8009004:	d17c      	bne.n	8009100 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d002      	beq.n	8009012 <HAL_UART_Transmit+0x2c>
 800900c:	88fb      	ldrh	r3, [r7, #6]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d101      	bne.n	8009016 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e075      	b.n	8009102 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <HAL_UART_Transmit+0x3e>
 8009020:	2302      	movs	r3, #2
 8009022:	e06e      	b.n	8009102 <HAL_UART_Transmit+0x11c>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2221      	movs	r2, #33	; 0x21
 8009036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800903a:	f7fb fe81 	bl	8004d40 <HAL_GetTick>
 800903e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	88fa      	ldrh	r2, [r7, #6]
 8009044:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	88fa      	ldrh	r2, [r7, #6]
 800904a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009054:	d108      	bne.n	8009068 <HAL_UART_Transmit+0x82>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d104      	bne.n	8009068 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800905e:	2300      	movs	r3, #0
 8009060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	61bb      	str	r3, [r7, #24]
 8009066:	e003      	b.n	8009070 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800906c:	2300      	movs	r3, #0
 800906e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009078:	e02a      	b.n	80090d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2200      	movs	r2, #0
 8009082:	2180      	movs	r1, #128	; 0x80
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f000 fb1f 	bl	80096c8 <UART_WaitOnFlagUntilTimeout>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e036      	b.n	8009102 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10b      	bne.n	80090b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	3302      	adds	r3, #2
 80090ae:	61bb      	str	r3, [r7, #24]
 80090b0:	e007      	b.n	80090c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	781a      	ldrb	r2, [r3, #0]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	3301      	adds	r3, #1
 80090c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	3b01      	subs	r3, #1
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1cf      	bne.n	800907a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2200      	movs	r2, #0
 80090e2:	2140      	movs	r1, #64	; 0x40
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 faef 	bl	80096c8 <UART_WaitOnFlagUntilTimeout>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e006      	b.n	8009102 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2220      	movs	r2, #32
 80090f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	e000      	b.n	8009102 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009100:	2302      	movs	r3, #2
  }
}
 8009102:	4618      	mov	r0, r3
 8009104:	3720      	adds	r7, #32
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	4613      	mov	r3, r2
 8009116:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b20      	cmp	r3, #32
 8009122:	d11d      	bne.n	8009160 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <HAL_UART_Receive_IT+0x26>
 800912a:	88fb      	ldrh	r3, [r7, #6]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e016      	b.n	8009162 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800913a:	2b01      	cmp	r3, #1
 800913c:	d101      	bne.n	8009142 <HAL_UART_Receive_IT+0x38>
 800913e:	2302      	movs	r3, #2
 8009140:	e00f      	b.n	8009162 <HAL_UART_Receive_IT+0x58>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009150:	88fb      	ldrh	r3, [r7, #6]
 8009152:	461a      	mov	r2, r3
 8009154:	68b9      	ldr	r1, [r7, #8]
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 fb24 	bl	80097a4 <UART_Start_Receive_IT>
 800915c:	4603      	mov	r3, r0
 800915e:	e000      	b.n	8009162 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009160:	2302      	movs	r3, #2
  }
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b0ba      	sub	sp, #232	; 0xe8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009192:	2300      	movs	r3, #0
 8009194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009198:	2300      	movs	r3, #0
 800919a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800919e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80091aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10f      	bne.n	80091d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d009      	beq.n	80091d2 <HAL_UART_IRQHandler+0x66>
 80091be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091c2:	f003 0320 	and.w	r3, r3, #32
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fc07 	bl	80099de <UART_Receive_IT>
      return;
 80091d0:	e256      	b.n	8009680 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80091d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f000 80de 	beq.w	8009398 <HAL_UART_IRQHandler+0x22c>
 80091dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d106      	bne.n	80091f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80091e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 80d1 	beq.w	8009398 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00b      	beq.n	800921a <HAL_UART_IRQHandler+0xae>
 8009202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800920a:	2b00      	cmp	r3, #0
 800920c:	d005      	beq.n	800921a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009212:	f043 0201 	orr.w	r2, r3, #1
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800921a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800921e:	f003 0304 	and.w	r3, r3, #4
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00b      	beq.n	800923e <HAL_UART_IRQHandler+0xd2>
 8009226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b00      	cmp	r3, #0
 8009230:	d005      	beq.n	800923e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009236:	f043 0202 	orr.w	r2, r3, #2
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800923e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009242:	f003 0302 	and.w	r3, r3, #2
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00b      	beq.n	8009262 <HAL_UART_IRQHandler+0xf6>
 800924a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	d005      	beq.n	8009262 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925a:	f043 0204 	orr.w	r2, r3, #4
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009266:	f003 0308 	and.w	r3, r3, #8
 800926a:	2b00      	cmp	r3, #0
 800926c:	d011      	beq.n	8009292 <HAL_UART_IRQHandler+0x126>
 800926e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009272:	f003 0320 	and.w	r3, r3, #32
 8009276:	2b00      	cmp	r3, #0
 8009278:	d105      	bne.n	8009286 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800927a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800927e:	f003 0301 	and.w	r3, r3, #1
 8009282:	2b00      	cmp	r3, #0
 8009284:	d005      	beq.n	8009292 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928a:	f043 0208 	orr.w	r2, r3, #8
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009296:	2b00      	cmp	r3, #0
 8009298:	f000 81ed 	beq.w	8009676 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800929c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a0:	f003 0320 	and.w	r3, r3, #32
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d008      	beq.n	80092ba <HAL_UART_IRQHandler+0x14e>
 80092a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092ac:	f003 0320 	and.w	r3, r3, #32
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fb92 	bl	80099de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c4:	2b40      	cmp	r3, #64	; 0x40
 80092c6:	bf0c      	ite	eq
 80092c8:	2301      	moveq	r3, #1
 80092ca:	2300      	movne	r3, #0
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d6:	f003 0308 	and.w	r3, r3, #8
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d103      	bne.n	80092e6 <HAL_UART_IRQHandler+0x17a>
 80092de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d04f      	beq.n	8009386 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fa9a 	bl	8009820 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f6:	2b40      	cmp	r3, #64	; 0x40
 80092f8:	d141      	bne.n	800937e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3314      	adds	r3, #20
 8009300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3314      	adds	r3, #20
 8009322:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009326:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800932a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009332:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800933e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1d9      	bne.n	80092fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934a:	2b00      	cmp	r3, #0
 800934c:	d013      	beq.n	8009376 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009352:	4a7d      	ldr	r2, [pc, #500]	; (8009548 <HAL_UART_IRQHandler+0x3dc>)
 8009354:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	4618      	mov	r0, r3
 800935c:	f7fc faa1 	bl	80058a2 <HAL_DMA_Abort_IT>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d016      	beq.n	8009394 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009370:	4610      	mov	r0, r2
 8009372:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009374:	e00e      	b.n	8009394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f990 	bl	800969c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800937c:	e00a      	b.n	8009394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f98c 	bl	800969c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009384:	e006      	b.n	8009394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f988 	bl	800969c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009392:	e170      	b.n	8009676 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009394:	bf00      	nop
    return;
 8009396:	e16e      	b.n	8009676 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939c:	2b01      	cmp	r3, #1
 800939e:	f040 814a 	bne.w	8009636 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80093a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093a6:	f003 0310 	and.w	r3, r3, #16
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 8143 	beq.w	8009636 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80093b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b4:	f003 0310 	and.w	r3, r3, #16
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 813c 	beq.w	8009636 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093be:	2300      	movs	r3, #0
 80093c0:	60bb      	str	r3, [r7, #8]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	60bb      	str	r3, [r7, #8]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	60bb      	str	r3, [r7, #8]
 80093d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093de:	2b40      	cmp	r3, #64	; 0x40
 80093e0:	f040 80b4 	bne.w	800954c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 8140 	beq.w	800967a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009402:	429a      	cmp	r2, r3
 8009404:	f080 8139 	bcs.w	800967a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800940e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800941a:	f000 8088 	beq.w	800952e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	330c      	adds	r3, #12
 8009424:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009428:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800942c:	e853 3f00 	ldrex	r3, [r3]
 8009430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009434:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800943c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	330c      	adds	r3, #12
 8009446:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800944a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800944e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009456:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800945a:	e841 2300 	strex	r3, r2, [r1]
 800945e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009462:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1d9      	bne.n	800941e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3314      	adds	r3, #20
 8009470:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800947a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800947c:	f023 0301 	bic.w	r3, r3, #1
 8009480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3314      	adds	r3, #20
 800948a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800948e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009492:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009496:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80094a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e1      	bne.n	800946a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3314      	adds	r3, #20
 80094ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80094b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3314      	adds	r3, #20
 80094c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80094ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80094cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80094d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80094d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1e3      	bne.n	80094a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2220      	movs	r2, #32
 80094e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	330c      	adds	r3, #12
 80094f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094fe:	f023 0310 	bic.w	r3, r3, #16
 8009502:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	330c      	adds	r3, #12
 800950c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009510:	65ba      	str	r2, [r7, #88]	; 0x58
 8009512:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009514:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009516:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009518:	e841 2300 	strex	r3, r2, [r1]
 800951c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800951e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e3      	bne.n	80094ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009528:	4618      	mov	r0, r3
 800952a:	f7fc f94a 	bl	80057c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009536:	b29b      	uxth	r3, r3
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	b29b      	uxth	r3, r3
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f8b6 	bl	80096b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009544:	e099      	b.n	800967a <HAL_UART_IRQHandler+0x50e>
 8009546:	bf00      	nop
 8009548:	080098e7 	.word	0x080098e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009554:	b29b      	uxth	r3, r3
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009560:	b29b      	uxth	r3, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 808b 	beq.w	800967e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009568:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 8086 	beq.w	800967e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	330c      	adds	r3, #12
 8009578:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957c:	e853 3f00 	ldrex	r3, [r3]
 8009580:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009584:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009588:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	330c      	adds	r3, #12
 8009592:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009596:	647a      	str	r2, [r7, #68]	; 0x44
 8009598:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800959c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800959e:	e841 2300 	strex	r3, r2, [r1]
 80095a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1e3      	bne.n	8009572 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3314      	adds	r3, #20
 80095b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	e853 3f00 	ldrex	r3, [r3]
 80095b8:	623b      	str	r3, [r7, #32]
   return(result);
 80095ba:	6a3b      	ldr	r3, [r7, #32]
 80095bc:	f023 0301 	bic.w	r3, r3, #1
 80095c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3314      	adds	r3, #20
 80095ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80095ce:	633a      	str	r2, [r7, #48]	; 0x30
 80095d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095d6:	e841 2300 	strex	r3, r2, [r1]
 80095da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1e3      	bne.n	80095aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2220      	movs	r2, #32
 80095e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	330c      	adds	r3, #12
 80095f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	e853 3f00 	ldrex	r3, [r3]
 80095fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 0310 	bic.w	r3, r3, #16
 8009606:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	330c      	adds	r3, #12
 8009610:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009614:	61fa      	str	r2, [r7, #28]
 8009616:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009618:	69b9      	ldr	r1, [r7, #24]
 800961a:	69fa      	ldr	r2, [r7, #28]
 800961c:	e841 2300 	strex	r3, r2, [r1]
 8009620:	617b      	str	r3, [r7, #20]
   return(result);
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1e3      	bne.n	80095f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009628:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800962c:	4619      	mov	r1, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f83e 	bl	80096b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009634:	e023      	b.n	800967e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800963a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800963e:	2b00      	cmp	r3, #0
 8009640:	d009      	beq.n	8009656 <HAL_UART_IRQHandler+0x4ea>
 8009642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f95d 	bl	800990e <UART_Transmit_IT>
    return;
 8009654:	e014      	b.n	8009680 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800965a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00e      	beq.n	8009680 <HAL_UART_IRQHandler+0x514>
 8009662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800966a:	2b00      	cmp	r3, #0
 800966c:	d008      	beq.n	8009680 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f99d 	bl	80099ae <UART_EndTransmit_IT>
    return;
 8009674:	e004      	b.n	8009680 <HAL_UART_IRQHandler+0x514>
    return;
 8009676:	bf00      	nop
 8009678:	e002      	b.n	8009680 <HAL_UART_IRQHandler+0x514>
      return;
 800967a:	bf00      	nop
 800967c:	e000      	b.n	8009680 <HAL_UART_IRQHandler+0x514>
      return;
 800967e:	bf00      	nop
  }
}
 8009680:	37e8      	adds	r7, #232	; 0xe8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop

08009688 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b090      	sub	sp, #64	; 0x40
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	4613      	mov	r3, r2
 80096d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096d8:	e050      	b.n	800977c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096e0:	d04c      	beq.n	800977c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80096e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d007      	beq.n	80096f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80096e8:	f7fb fb2a 	bl	8004d40 <HAL_GetTick>
 80096ec:	4602      	mov	r2, r0
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d241      	bcs.n	800977c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	330c      	adds	r3, #12
 80096fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009702:	e853 3f00 	ldrex	r3, [r3]
 8009706:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800970e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	330c      	adds	r3, #12
 8009716:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009718:	637a      	str	r2, [r7, #52]	; 0x34
 800971a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800971e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009720:	e841 2300 	strex	r3, r2, [r1]
 8009724:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1e5      	bne.n	80096f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3314      	adds	r3, #20
 8009732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	613b      	str	r3, [r7, #16]
   return(result);
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f023 0301 	bic.w	r3, r3, #1
 8009742:	63bb      	str	r3, [r7, #56]	; 0x38
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3314      	adds	r3, #20
 800974a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800974c:	623a      	str	r2, [r7, #32]
 800974e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	69f9      	ldr	r1, [r7, #28]
 8009752:	6a3a      	ldr	r2, [r7, #32]
 8009754:	e841 2300 	strex	r3, r2, [r1]
 8009758:	61bb      	str	r3, [r7, #24]
   return(result);
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e5      	bne.n	800972c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2220      	movs	r2, #32
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2220      	movs	r2, #32
 800976c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009778:	2303      	movs	r3, #3
 800977a:	e00f      	b.n	800979c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	4013      	ands	r3, r2
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	429a      	cmp	r2, r3
 800978a:	bf0c      	ite	eq
 800978c:	2301      	moveq	r3, #1
 800978e:	2300      	movne	r3, #0
 8009790:	b2db      	uxtb	r3, r3
 8009792:	461a      	mov	r2, r3
 8009794:	79fb      	ldrb	r3, [r7, #7]
 8009796:	429a      	cmp	r2, r3
 8009798:	d09f      	beq.n	80096da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3740      	adds	r7, #64	; 0x40
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	4613      	mov	r3, r2
 80097b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	88fa      	ldrh	r2, [r7, #6]
 80097bc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	88fa      	ldrh	r2, [r7, #6]
 80097c2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2222      	movs	r2, #34	; 0x22
 80097ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d007      	beq.n	80097f2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68da      	ldr	r2, [r3, #12]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097f0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	695a      	ldr	r2, [r3, #20]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f042 0201 	orr.w	r2, r2, #1
 8009800:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68da      	ldr	r2, [r3, #12]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f042 0220 	orr.w	r2, r2, #32
 8009810:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009820:	b480      	push	{r7}
 8009822:	b095      	sub	sp, #84	; 0x54
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	330c      	adds	r3, #12
 800982e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009832:	e853 3f00 	ldrex	r3, [r3]
 8009836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800983e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	330c      	adds	r3, #12
 8009846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009848:	643a      	str	r2, [r7, #64]	; 0x40
 800984a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800984e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009850:	e841 2300 	strex	r3, r2, [r1]
 8009854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e5      	bne.n	8009828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3314      	adds	r3, #20
 8009862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	e853 3f00 	ldrex	r3, [r3]
 800986a:	61fb      	str	r3, [r7, #28]
   return(result);
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	f023 0301 	bic.w	r3, r3, #1
 8009872:	64bb      	str	r3, [r7, #72]	; 0x48
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3314      	adds	r3, #20
 800987a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800987c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800987e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009884:	e841 2300 	strex	r3, r2, [r1]
 8009888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1e5      	bne.n	800985c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009894:	2b01      	cmp	r3, #1
 8009896:	d119      	bne.n	80098cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	330c      	adds	r3, #12
 800989e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	e853 3f00 	ldrex	r3, [r3]
 80098a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	f023 0310 	bic.w	r3, r3, #16
 80098ae:	647b      	str	r3, [r7, #68]	; 0x44
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	330c      	adds	r3, #12
 80098b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098b8:	61ba      	str	r2, [r7, #24]
 80098ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6979      	ldr	r1, [r7, #20]
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	e841 2300 	strex	r3, r2, [r1]
 80098c4:	613b      	str	r3, [r7, #16]
   return(result);
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e5      	bne.n	8009898 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80098da:	bf00      	nop
 80098dc:	3754      	adds	r7, #84	; 0x54
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f7ff fecb 	bl	800969c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009906:	bf00      	nop
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800990e:	b480      	push	{r7}
 8009910:	b085      	sub	sp, #20
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b21      	cmp	r3, #33	; 0x21
 8009920:	d13e      	bne.n	80099a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800992a:	d114      	bne.n	8009956 <UART_Transmit_IT+0x48>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d110      	bne.n	8009956 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a1b      	ldr	r3, [r3, #32]
 8009938:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	881b      	ldrh	r3, [r3, #0]
 800993e:	461a      	mov	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009948:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	1c9a      	adds	r2, r3, #2
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	621a      	str	r2, [r3, #32]
 8009954:	e008      	b.n	8009968 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	1c59      	adds	r1, r3, #1
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	6211      	str	r1, [r2, #32]
 8009960:	781a      	ldrb	r2, [r3, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800996c:	b29b      	uxth	r3, r3
 800996e:	3b01      	subs	r3, #1
 8009970:	b29b      	uxth	r3, r3
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	4619      	mov	r1, r3
 8009976:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10f      	bne.n	800999c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68da      	ldr	r2, [r3, #12]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800998a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800999a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	e000      	b.n	80099a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80099a0:	2302      	movs	r3, #2
  }
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b082      	sub	sp, #8
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68da      	ldr	r2, [r3, #12]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2220      	movs	r2, #32
 80099ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7ff fe5a 	bl	8009688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b08c      	sub	sp, #48	; 0x30
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2b22      	cmp	r3, #34	; 0x22
 80099f0:	f040 80ab 	bne.w	8009b4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099fc:	d117      	bne.n	8009a2e <UART_Receive_IT+0x50>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d113      	bne.n	8009a2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a26:	1c9a      	adds	r2, r3, #2
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8009a2c:	e026      	b.n	8009a7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009a34:	2300      	movs	r3, #0
 8009a36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a40:	d007      	beq.n	8009a52 <UART_Receive_IT+0x74>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10a      	bne.n	8009a60 <UART_Receive_IT+0x82>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d106      	bne.n	8009a60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5c:	701a      	strb	r2, [r3, #0]
 8009a5e:	e008      	b.n	8009a72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a6c:	b2da      	uxtb	r2, r3
 8009a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	3b01      	subs	r3, #1
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d15a      	bne.n	8009b46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68da      	ldr	r2, [r3, #12]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f022 0220 	bic.w	r2, r2, #32
 8009a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68da      	ldr	r2, [r3, #12]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	695a      	ldr	r2, [r3, #20]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f022 0201 	bic.w	r2, r2, #1
 8009abe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d135      	bne.n	8009b3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	330c      	adds	r3, #12
 8009adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	e853 3f00 	ldrex	r3, [r3]
 8009ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f023 0310 	bic.w	r3, r3, #16
 8009aec:	627b      	str	r3, [r7, #36]	; 0x24
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	330c      	adds	r3, #12
 8009af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af6:	623a      	str	r2, [r7, #32]
 8009af8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afa:	69f9      	ldr	r1, [r7, #28]
 8009afc:	6a3a      	ldr	r2, [r7, #32]
 8009afe:	e841 2300 	strex	r3, r2, [r1]
 8009b02:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1e5      	bne.n	8009ad6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0310 	and.w	r3, r3, #16
 8009b14:	2b10      	cmp	r3, #16
 8009b16:	d10a      	bne.n	8009b2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	60fb      	str	r3, [r7, #12]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7ff fdbb 	bl	80096b0 <HAL_UARTEx_RxEventCallback>
 8009b3a:	e002      	b.n	8009b42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7f8 fb6b 	bl	8002218 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	e002      	b.n	8009b4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	e000      	b.n	8009b4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009b4a:	2302      	movs	r3, #2
  }
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3730      	adds	r7, #48	; 0x30
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b58:	b0c0      	sub	sp, #256	; 0x100
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b70:	68d9      	ldr	r1, [r3, #12]
 8009b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	ea40 0301 	orr.w	r3, r0, r1
 8009b7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b82:	689a      	ldr	r2, [r3, #8]
 8009b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	431a      	orrs	r2, r3
 8009b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b98:	69db      	ldr	r3, [r3, #28]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009bac:	f021 010c 	bic.w	r1, r1, #12
 8009bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009bba:	430b      	orrs	r3, r1
 8009bbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bce:	6999      	ldr	r1, [r3, #24]
 8009bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	ea40 0301 	orr.w	r3, r0, r1
 8009bda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	4b8f      	ldr	r3, [pc, #572]	; (8009e20 <UART_SetConfig+0x2cc>)
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d005      	beq.n	8009bf4 <UART_SetConfig+0xa0>
 8009be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	4b8d      	ldr	r3, [pc, #564]	; (8009e24 <UART_SetConfig+0x2d0>)
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d104      	bne.n	8009bfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009bf4:	f7fd fc30 	bl	8007458 <HAL_RCC_GetPCLK2Freq>
 8009bf8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009bfc:	e003      	b.n	8009c06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009bfe:	f7fd fc17 	bl	8007430 <HAL_RCC_GetPCLK1Freq>
 8009c02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c10:	f040 810c 	bne.w	8009e2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009c22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009c26:	4622      	mov	r2, r4
 8009c28:	462b      	mov	r3, r5
 8009c2a:	1891      	adds	r1, r2, r2
 8009c2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8009c2e:	415b      	adcs	r3, r3
 8009c30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c36:	4621      	mov	r1, r4
 8009c38:	eb12 0801 	adds.w	r8, r2, r1
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	eb43 0901 	adc.w	r9, r3, r1
 8009c42:	f04f 0200 	mov.w	r2, #0
 8009c46:	f04f 0300 	mov.w	r3, #0
 8009c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c56:	4690      	mov	r8, r2
 8009c58:	4699      	mov	r9, r3
 8009c5a:	4623      	mov	r3, r4
 8009c5c:	eb18 0303 	adds.w	r3, r8, r3
 8009c60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c64:	462b      	mov	r3, r5
 8009c66:	eb49 0303 	adc.w	r3, r9, r3
 8009c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009c7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009c82:	460b      	mov	r3, r1
 8009c84:	18db      	adds	r3, r3, r3
 8009c86:	653b      	str	r3, [r7, #80]	; 0x50
 8009c88:	4613      	mov	r3, r2
 8009c8a:	eb42 0303 	adc.w	r3, r2, r3
 8009c8e:	657b      	str	r3, [r7, #84]	; 0x54
 8009c90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009c94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009c98:	f7f6 ff86 	bl	8000ba8 <__aeabi_uldivmod>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4b61      	ldr	r3, [pc, #388]	; (8009e28 <UART_SetConfig+0x2d4>)
 8009ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8009ca6:	095b      	lsrs	r3, r3, #5
 8009ca8:	011c      	lsls	r4, r3, #4
 8009caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009cb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009cb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	464b      	mov	r3, r9
 8009cc0:	1891      	adds	r1, r2, r2
 8009cc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8009cc4:	415b      	adcs	r3, r3
 8009cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009ccc:	4641      	mov	r1, r8
 8009cce:	eb12 0a01 	adds.w	sl, r2, r1
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	eb43 0b01 	adc.w	fp, r3, r1
 8009cd8:	f04f 0200 	mov.w	r2, #0
 8009cdc:	f04f 0300 	mov.w	r3, #0
 8009ce0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009ce4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cec:	4692      	mov	sl, r2
 8009cee:	469b      	mov	fp, r3
 8009cf0:	4643      	mov	r3, r8
 8009cf2:	eb1a 0303 	adds.w	r3, sl, r3
 8009cf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009cfa:	464b      	mov	r3, r9
 8009cfc:	eb4b 0303 	adc.w	r3, fp, r3
 8009d00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009d14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	18db      	adds	r3, r3, r3
 8009d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8009d1e:	4613      	mov	r3, r2
 8009d20:	eb42 0303 	adc.w	r3, r2, r3
 8009d24:	647b      	str	r3, [r7, #68]	; 0x44
 8009d26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009d2e:	f7f6 ff3b 	bl	8000ba8 <__aeabi_uldivmod>
 8009d32:	4602      	mov	r2, r0
 8009d34:	460b      	mov	r3, r1
 8009d36:	4611      	mov	r1, r2
 8009d38:	4b3b      	ldr	r3, [pc, #236]	; (8009e28 <UART_SetConfig+0x2d4>)
 8009d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8009d3e:	095b      	lsrs	r3, r3, #5
 8009d40:	2264      	movs	r2, #100	; 0x64
 8009d42:	fb02 f303 	mul.w	r3, r2, r3
 8009d46:	1acb      	subs	r3, r1, r3
 8009d48:	00db      	lsls	r3, r3, #3
 8009d4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009d4e:	4b36      	ldr	r3, [pc, #216]	; (8009e28 <UART_SetConfig+0x2d4>)
 8009d50:	fba3 2302 	umull	r2, r3, r3, r2
 8009d54:	095b      	lsrs	r3, r3, #5
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009d5c:	441c      	add	r4, r3
 8009d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d62:	2200      	movs	r2, #0
 8009d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009d6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009d70:	4642      	mov	r2, r8
 8009d72:	464b      	mov	r3, r9
 8009d74:	1891      	adds	r1, r2, r2
 8009d76:	63b9      	str	r1, [r7, #56]	; 0x38
 8009d78:	415b      	adcs	r3, r3
 8009d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d80:	4641      	mov	r1, r8
 8009d82:	1851      	adds	r1, r2, r1
 8009d84:	6339      	str	r1, [r7, #48]	; 0x30
 8009d86:	4649      	mov	r1, r9
 8009d88:	414b      	adcs	r3, r1
 8009d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d8c:	f04f 0200 	mov.w	r2, #0
 8009d90:	f04f 0300 	mov.w	r3, #0
 8009d94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009d98:	4659      	mov	r1, fp
 8009d9a:	00cb      	lsls	r3, r1, #3
 8009d9c:	4651      	mov	r1, sl
 8009d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009da2:	4651      	mov	r1, sl
 8009da4:	00ca      	lsls	r2, r1, #3
 8009da6:	4610      	mov	r0, r2
 8009da8:	4619      	mov	r1, r3
 8009daa:	4603      	mov	r3, r0
 8009dac:	4642      	mov	r2, r8
 8009dae:	189b      	adds	r3, r3, r2
 8009db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009db4:	464b      	mov	r3, r9
 8009db6:	460a      	mov	r2, r1
 8009db8:	eb42 0303 	adc.w	r3, r2, r3
 8009dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009dcc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009dd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	18db      	adds	r3, r3, r3
 8009dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dda:	4613      	mov	r3, r2
 8009ddc:	eb42 0303 	adc.w	r3, r2, r3
 8009de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009de6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009dea:	f7f6 fedd 	bl	8000ba8 <__aeabi_uldivmod>
 8009dee:	4602      	mov	r2, r0
 8009df0:	460b      	mov	r3, r1
 8009df2:	4b0d      	ldr	r3, [pc, #52]	; (8009e28 <UART_SetConfig+0x2d4>)
 8009df4:	fba3 1302 	umull	r1, r3, r3, r2
 8009df8:	095b      	lsrs	r3, r3, #5
 8009dfa:	2164      	movs	r1, #100	; 0x64
 8009dfc:	fb01 f303 	mul.w	r3, r1, r3
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	00db      	lsls	r3, r3, #3
 8009e04:	3332      	adds	r3, #50	; 0x32
 8009e06:	4a08      	ldr	r2, [pc, #32]	; (8009e28 <UART_SetConfig+0x2d4>)
 8009e08:	fba2 2303 	umull	r2, r3, r2, r3
 8009e0c:	095b      	lsrs	r3, r3, #5
 8009e0e:	f003 0207 	and.w	r2, r3, #7
 8009e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4422      	add	r2, r4
 8009e1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e1c:	e106      	b.n	800a02c <UART_SetConfig+0x4d8>
 8009e1e:	bf00      	nop
 8009e20:	40011000 	.word	0x40011000
 8009e24:	40011400 	.word	0x40011400
 8009e28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e30:	2200      	movs	r2, #0
 8009e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009e36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009e3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009e3e:	4642      	mov	r2, r8
 8009e40:	464b      	mov	r3, r9
 8009e42:	1891      	adds	r1, r2, r2
 8009e44:	6239      	str	r1, [r7, #32]
 8009e46:	415b      	adcs	r3, r3
 8009e48:	627b      	str	r3, [r7, #36]	; 0x24
 8009e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e4e:	4641      	mov	r1, r8
 8009e50:	1854      	adds	r4, r2, r1
 8009e52:	4649      	mov	r1, r9
 8009e54:	eb43 0501 	adc.w	r5, r3, r1
 8009e58:	f04f 0200 	mov.w	r2, #0
 8009e5c:	f04f 0300 	mov.w	r3, #0
 8009e60:	00eb      	lsls	r3, r5, #3
 8009e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e66:	00e2      	lsls	r2, r4, #3
 8009e68:	4614      	mov	r4, r2
 8009e6a:	461d      	mov	r5, r3
 8009e6c:	4643      	mov	r3, r8
 8009e6e:	18e3      	adds	r3, r4, r3
 8009e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009e74:	464b      	mov	r3, r9
 8009e76:	eb45 0303 	adc.w	r3, r5, r3
 8009e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e8e:	f04f 0200 	mov.w	r2, #0
 8009e92:	f04f 0300 	mov.w	r3, #0
 8009e96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	008b      	lsls	r3, r1, #2
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	008a      	lsls	r2, r1, #2
 8009ea8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009eac:	f7f6 fe7c 	bl	8000ba8 <__aeabi_uldivmod>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4b60      	ldr	r3, [pc, #384]	; (800a038 <UART_SetConfig+0x4e4>)
 8009eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8009eba:	095b      	lsrs	r3, r3, #5
 8009ebc:	011c      	lsls	r4, r3, #4
 8009ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ec8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ecc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009ed0:	4642      	mov	r2, r8
 8009ed2:	464b      	mov	r3, r9
 8009ed4:	1891      	adds	r1, r2, r2
 8009ed6:	61b9      	str	r1, [r7, #24]
 8009ed8:	415b      	adcs	r3, r3
 8009eda:	61fb      	str	r3, [r7, #28]
 8009edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ee0:	4641      	mov	r1, r8
 8009ee2:	1851      	adds	r1, r2, r1
 8009ee4:	6139      	str	r1, [r7, #16]
 8009ee6:	4649      	mov	r1, r9
 8009ee8:	414b      	adcs	r3, r1
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	f04f 0200 	mov.w	r2, #0
 8009ef0:	f04f 0300 	mov.w	r3, #0
 8009ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ef8:	4659      	mov	r1, fp
 8009efa:	00cb      	lsls	r3, r1, #3
 8009efc:	4651      	mov	r1, sl
 8009efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f02:	4651      	mov	r1, sl
 8009f04:	00ca      	lsls	r2, r1, #3
 8009f06:	4610      	mov	r0, r2
 8009f08:	4619      	mov	r1, r3
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	4642      	mov	r2, r8
 8009f0e:	189b      	adds	r3, r3, r2
 8009f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f14:	464b      	mov	r3, r9
 8009f16:	460a      	mov	r2, r1
 8009f18:	eb42 0303 	adc.w	r3, r2, r3
 8009f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009f2c:	f04f 0200 	mov.w	r2, #0
 8009f30:	f04f 0300 	mov.w	r3, #0
 8009f34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009f38:	4649      	mov	r1, r9
 8009f3a:	008b      	lsls	r3, r1, #2
 8009f3c:	4641      	mov	r1, r8
 8009f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f42:	4641      	mov	r1, r8
 8009f44:	008a      	lsls	r2, r1, #2
 8009f46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009f4a:	f7f6 fe2d 	bl	8000ba8 <__aeabi_uldivmod>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	4611      	mov	r1, r2
 8009f54:	4b38      	ldr	r3, [pc, #224]	; (800a038 <UART_SetConfig+0x4e4>)
 8009f56:	fba3 2301 	umull	r2, r3, r3, r1
 8009f5a:	095b      	lsrs	r3, r3, #5
 8009f5c:	2264      	movs	r2, #100	; 0x64
 8009f5e:	fb02 f303 	mul.w	r3, r2, r3
 8009f62:	1acb      	subs	r3, r1, r3
 8009f64:	011b      	lsls	r3, r3, #4
 8009f66:	3332      	adds	r3, #50	; 0x32
 8009f68:	4a33      	ldr	r2, [pc, #204]	; (800a038 <UART_SetConfig+0x4e4>)
 8009f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f6e:	095b      	lsrs	r3, r3, #5
 8009f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f74:	441c      	add	r4, r3
 8009f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	673b      	str	r3, [r7, #112]	; 0x70
 8009f7e:	677a      	str	r2, [r7, #116]	; 0x74
 8009f80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009f84:	4642      	mov	r2, r8
 8009f86:	464b      	mov	r3, r9
 8009f88:	1891      	adds	r1, r2, r2
 8009f8a:	60b9      	str	r1, [r7, #8]
 8009f8c:	415b      	adcs	r3, r3
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f94:	4641      	mov	r1, r8
 8009f96:	1851      	adds	r1, r2, r1
 8009f98:	6039      	str	r1, [r7, #0]
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	414b      	adcs	r3, r1
 8009f9e:	607b      	str	r3, [r7, #4]
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	f04f 0300 	mov.w	r3, #0
 8009fa8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009fac:	4659      	mov	r1, fp
 8009fae:	00cb      	lsls	r3, r1, #3
 8009fb0:	4651      	mov	r1, sl
 8009fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fb6:	4651      	mov	r1, sl
 8009fb8:	00ca      	lsls	r2, r1, #3
 8009fba:	4610      	mov	r0, r2
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	4642      	mov	r2, r8
 8009fc2:	189b      	adds	r3, r3, r2
 8009fc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fc6:	464b      	mov	r3, r9
 8009fc8:	460a      	mov	r2, r1
 8009fca:	eb42 0303 	adc.w	r3, r2, r3
 8009fce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	663b      	str	r3, [r7, #96]	; 0x60
 8009fda:	667a      	str	r2, [r7, #100]	; 0x64
 8009fdc:	f04f 0200 	mov.w	r2, #0
 8009fe0:	f04f 0300 	mov.w	r3, #0
 8009fe4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009fe8:	4649      	mov	r1, r9
 8009fea:	008b      	lsls	r3, r1, #2
 8009fec:	4641      	mov	r1, r8
 8009fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ff2:	4641      	mov	r1, r8
 8009ff4:	008a      	lsls	r2, r1, #2
 8009ff6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009ffa:	f7f6 fdd5 	bl	8000ba8 <__aeabi_uldivmod>
 8009ffe:	4602      	mov	r2, r0
 800a000:	460b      	mov	r3, r1
 800a002:	4b0d      	ldr	r3, [pc, #52]	; (800a038 <UART_SetConfig+0x4e4>)
 800a004:	fba3 1302 	umull	r1, r3, r3, r2
 800a008:	095b      	lsrs	r3, r3, #5
 800a00a:	2164      	movs	r1, #100	; 0x64
 800a00c:	fb01 f303 	mul.w	r3, r1, r3
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	011b      	lsls	r3, r3, #4
 800a014:	3332      	adds	r3, #50	; 0x32
 800a016:	4a08      	ldr	r2, [pc, #32]	; (800a038 <UART_SetConfig+0x4e4>)
 800a018:	fba2 2303 	umull	r2, r3, r2, r3
 800a01c:	095b      	lsrs	r3, r3, #5
 800a01e:	f003 020f 	and.w	r2, r3, #15
 800a022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4422      	add	r2, r4
 800a02a:	609a      	str	r2, [r3, #8]
}
 800a02c:	bf00      	nop
 800a02e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a032:	46bd      	mov	sp, r7
 800a034:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a038:	51eb851f 	.word	0x51eb851f

0800a03c <__NVIC_SetPriority>:
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	4603      	mov	r3, r0
 800a044:	6039      	str	r1, [r7, #0]
 800a046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	db0a      	blt.n	800a066 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	b2da      	uxtb	r2, r3
 800a054:	490c      	ldr	r1, [pc, #48]	; (800a088 <__NVIC_SetPriority+0x4c>)
 800a056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a05a:	0112      	lsls	r2, r2, #4
 800a05c:	b2d2      	uxtb	r2, r2
 800a05e:	440b      	add	r3, r1
 800a060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a064:	e00a      	b.n	800a07c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	4908      	ldr	r1, [pc, #32]	; (800a08c <__NVIC_SetPriority+0x50>)
 800a06c:	79fb      	ldrb	r3, [r7, #7]
 800a06e:	f003 030f 	and.w	r3, r3, #15
 800a072:	3b04      	subs	r3, #4
 800a074:	0112      	lsls	r2, r2, #4
 800a076:	b2d2      	uxtb	r2, r2
 800a078:	440b      	add	r3, r1
 800a07a:	761a      	strb	r2, [r3, #24]
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	e000e100 	.word	0xe000e100
 800a08c:	e000ed00 	.word	0xe000ed00

0800a090 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a090:	b580      	push	{r7, lr}
 800a092:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a094:	2100      	movs	r1, #0
 800a096:	f06f 0004 	mvn.w	r0, #4
 800a09a:	f7ff ffcf 	bl	800a03c <__NVIC_SetPriority>
#endif
}
 800a09e:	bf00      	nop
 800a0a0:	bd80      	pop	{r7, pc}
	...

0800a0a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0aa:	f3ef 8305 	mrs	r3, IPSR
 800a0ae:	603b      	str	r3, [r7, #0]
  return(result);
 800a0b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a0b6:	f06f 0305 	mvn.w	r3, #5
 800a0ba:	607b      	str	r3, [r7, #4]
 800a0bc:	e00c      	b.n	800a0d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a0be:	4b0a      	ldr	r3, [pc, #40]	; (800a0e8 <osKernelInitialize+0x44>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d105      	bne.n	800a0d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a0c6:	4b08      	ldr	r3, [pc, #32]	; (800a0e8 <osKernelInitialize+0x44>)
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	607b      	str	r3, [r7, #4]
 800a0d0:	e002      	b.n	800a0d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a0d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0d8:	687b      	ldr	r3, [r7, #4]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	20000a18 	.word	0x20000a18

0800a0ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0f2:	f3ef 8305 	mrs	r3, IPSR
 800a0f6:	603b      	str	r3, [r7, #0]
  return(result);
 800a0f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a0fe:	f06f 0305 	mvn.w	r3, #5
 800a102:	607b      	str	r3, [r7, #4]
 800a104:	e010      	b.n	800a128 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a106:	4b0b      	ldr	r3, [pc, #44]	; (800a134 <osKernelStart+0x48>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d109      	bne.n	800a122 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a10e:	f7ff ffbf 	bl	800a090 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a112:	4b08      	ldr	r3, [pc, #32]	; (800a134 <osKernelStart+0x48>)
 800a114:	2202      	movs	r2, #2
 800a116:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a118:	f001 f9e0 	bl	800b4dc <vTaskStartScheduler>
      stat = osOK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	607b      	str	r3, [r7, #4]
 800a120:	e002      	b.n	800a128 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a126:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a128:	687b      	ldr	r3, [r7, #4]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000a18 	.word	0x20000a18

0800a138 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a138:	b580      	push	{r7, lr}
 800a13a:	b08e      	sub	sp, #56	; 0x38
 800a13c:	af04      	add	r7, sp, #16
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a144:	2300      	movs	r3, #0
 800a146:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a148:	f3ef 8305 	mrs	r3, IPSR
 800a14c:	617b      	str	r3, [r7, #20]
  return(result);
 800a14e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a150:	2b00      	cmp	r3, #0
 800a152:	d17e      	bne.n	800a252 <osThreadNew+0x11a>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d07b      	beq.n	800a252 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a15a:	2380      	movs	r3, #128	; 0x80
 800a15c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a15e:	2318      	movs	r3, #24
 800a160:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a162:	2300      	movs	r3, #0
 800a164:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a16a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d045      	beq.n	800a1fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d002      	beq.n	800a180 <osThreadNew+0x48>
        name = attr->name;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d008      	beq.n	800a1a6 <osThreadNew+0x6e>
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	2b38      	cmp	r3, #56	; 0x38
 800a198:	d805      	bhi.n	800a1a6 <osThreadNew+0x6e>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f003 0301 	and.w	r3, r3, #1
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <osThreadNew+0x72>
        return (NULL);
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e054      	b.n	800a254 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	695b      	ldr	r3, [r3, #20]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	695b      	ldr	r3, [r3, #20]
 800a1b6:	089b      	lsrs	r3, r3, #2
 800a1b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00e      	beq.n	800a1e0 <osThreadNew+0xa8>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	2b5b      	cmp	r3, #91	; 0x5b
 800a1c8:	d90a      	bls.n	800a1e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d006      	beq.n	800a1e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <osThreadNew+0xa8>
        mem = 1;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	61bb      	str	r3, [r7, #24]
 800a1de:	e010      	b.n	800a202 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10c      	bne.n	800a202 <osThreadNew+0xca>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d108      	bne.n	800a202 <osThreadNew+0xca>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d104      	bne.n	800a202 <osThreadNew+0xca>
          mem = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	61bb      	str	r3, [r7, #24]
 800a1fc:	e001      	b.n	800a202 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d110      	bne.n	800a22a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a210:	9202      	str	r2, [sp, #8]
 800a212:	9301      	str	r3, [sp, #4]
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	6a3a      	ldr	r2, [r7, #32]
 800a21c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f000 ff86 	bl	800b130 <xTaskCreateStatic>
 800a224:	4603      	mov	r3, r0
 800a226:	613b      	str	r3, [r7, #16]
 800a228:	e013      	b.n	800a252 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d110      	bne.n	800a252 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a230:	6a3b      	ldr	r3, [r7, #32]
 800a232:	b29a      	uxth	r2, r3
 800a234:	f107 0310 	add.w	r3, r7, #16
 800a238:	9301      	str	r3, [sp, #4]
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 ffd1 	bl	800b1ea <xTaskCreate>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d001      	beq.n	800a252 <osThreadNew+0x11a>
            hTask = NULL;
 800a24e:	2300      	movs	r3, #0
 800a250:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a252:	693b      	ldr	r3, [r7, #16]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3728      	adds	r7, #40	; 0x28
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a264:	f3ef 8305 	mrs	r3, IPSR
 800a268:	60bb      	str	r3, [r7, #8]
  return(result);
 800a26a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <osDelay+0x1c>
    stat = osErrorISR;
 800a270:	f06f 0305 	mvn.w	r3, #5
 800a274:	60fb      	str	r3, [r7, #12]
 800a276:	e007      	b.n	800a288 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a278:	2300      	movs	r3, #0
 800a27a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d002      	beq.n	800a288 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f001 f8f6 	bl	800b474 <vTaskDelay>
    }
  }

  return (stat);
 800a288:	68fb      	ldr	r3, [r7, #12]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a292:	b580      	push	{r7, lr}
 800a294:	b08a      	sub	sp, #40	; 0x28
 800a296:	af02      	add	r7, sp, #8
 800a298:	60f8      	str	r0, [r7, #12]
 800a29a:	60b9      	str	r1, [r7, #8]
 800a29c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2a2:	f3ef 8305 	mrs	r3, IPSR
 800a2a6:	613b      	str	r3, [r7, #16]
  return(result);
 800a2a8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d175      	bne.n	800a39a <osSemaphoreNew+0x108>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d072      	beq.n	800a39a <osSemaphoreNew+0x108>
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d86e      	bhi.n	800a39a <osSemaphoreNew+0x108>
    mem = -1;
 800a2bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d015      	beq.n	800a2f4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d006      	beq.n	800a2de <osSemaphoreNew+0x4c>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	2b4f      	cmp	r3, #79	; 0x4f
 800a2d6:	d902      	bls.n	800a2de <osSemaphoreNew+0x4c>
        mem = 1;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	61bb      	str	r3, [r7, #24]
 800a2dc:	e00c      	b.n	800a2f8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d108      	bne.n	800a2f8 <osSemaphoreNew+0x66>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d104      	bne.n	800a2f8 <osSemaphoreNew+0x66>
          mem = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	61bb      	str	r3, [r7, #24]
 800a2f2:	e001      	b.n	800a2f8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2fe:	d04c      	beq.n	800a39a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2b01      	cmp	r3, #1
 800a304:	d128      	bne.n	800a358 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d10a      	bne.n	800a322 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	2203      	movs	r2, #3
 800a312:	9200      	str	r2, [sp, #0]
 800a314:	2200      	movs	r2, #0
 800a316:	2100      	movs	r1, #0
 800a318:	2001      	movs	r0, #1
 800a31a:	f000 f993 	bl	800a644 <xQueueGenericCreateStatic>
 800a31e:	61f8      	str	r0, [r7, #28]
 800a320:	e005      	b.n	800a32e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a322:	2203      	movs	r2, #3
 800a324:	2100      	movs	r1, #0
 800a326:	2001      	movs	r0, #1
 800a328:	f000 fa04 	bl	800a734 <xQueueGenericCreate>
 800a32c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d022      	beq.n	800a37a <osSemaphoreNew+0xe8>
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d01f      	beq.n	800a37a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a33a:	2300      	movs	r3, #0
 800a33c:	2200      	movs	r2, #0
 800a33e:	2100      	movs	r1, #0
 800a340:	69f8      	ldr	r0, [r7, #28]
 800a342:	f000 fabf 	bl	800a8c4 <xQueueGenericSend>
 800a346:	4603      	mov	r3, r0
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d016      	beq.n	800a37a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a34c:	69f8      	ldr	r0, [r7, #28]
 800a34e:	f000 fd33 	bl	800adb8 <vQueueDelete>
            hSemaphore = NULL;
 800a352:	2300      	movs	r3, #0
 800a354:	61fb      	str	r3, [r7, #28]
 800a356:	e010      	b.n	800a37a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d108      	bne.n	800a370 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	461a      	mov	r2, r3
 800a364:	68b9      	ldr	r1, [r7, #8]
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f000 fa41 	bl	800a7ee <xQueueCreateCountingSemaphoreStatic>
 800a36c:	61f8      	str	r0, [r7, #28]
 800a36e:	e004      	b.n	800a37a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a370:	68b9      	ldr	r1, [r7, #8]
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 fa72 	bl	800a85c <xQueueCreateCountingSemaphore>
 800a378:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00c      	beq.n	800a39a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <osSemaphoreNew+0xfc>
          name = attr->name;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	617b      	str	r3, [r7, #20]
 800a38c:	e001      	b.n	800a392 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a38e:	2300      	movs	r3, #0
 800a390:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a392:	6979      	ldr	r1, [r7, #20]
 800a394:	69f8      	ldr	r0, [r7, #28]
 800a396:	f000 fe43 	bl	800b020 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a39a:	69fb      	ldr	r3, [r7, #28]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3720      	adds	r7, #32
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	4a07      	ldr	r2, [pc, #28]	; (800a3d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a3b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	4a06      	ldr	r2, [pc, #24]	; (800a3d4 <vApplicationGetIdleTaskMemory+0x30>)
 800a3ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2280      	movs	r2, #128	; 0x80
 800a3c0:	601a      	str	r2, [r3, #0]
}
 800a3c2:	bf00      	nop
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	20000a1c 	.word	0x20000a1c
 800a3d4:	20000a78 	.word	0x20000a78

0800a3d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	4a07      	ldr	r2, [pc, #28]	; (800a404 <vApplicationGetTimerTaskMemory+0x2c>)
 800a3e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	4a06      	ldr	r2, [pc, #24]	; (800a408 <vApplicationGetTimerTaskMemory+0x30>)
 800a3ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3f6:	601a      	str	r2, [r3, #0]
}
 800a3f8:	bf00      	nop
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	20000c78 	.word	0x20000c78
 800a408:	20000cd4 	.word	0x20000cd4

0800a40c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f103 0208 	add.w	r2, r3, #8
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a424:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f103 0208 	add.w	r2, r3, #8
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f103 0208 	add.w	r2, r3, #8
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a45a:	bf00      	nop
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a466:	b480      	push	{r7}
 800a468:	b085      	sub	sp, #20
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	689a      	ldr	r2, [r3, #8]
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	601a      	str	r2, [r3, #0]
}
 800a4a2:	bf00      	nop
 800a4a4:	3714      	adds	r7, #20
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b085      	sub	sp, #20
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4c4:	d103      	bne.n	800a4ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	e00c      	b.n	800a4e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	e002      	b.n	800a4dc <vListInsert+0x2e>
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d2f6      	bcs.n	800a4d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	683a      	ldr	r2, [r7, #0]
 800a502:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	601a      	str	r2, [r3, #0]
}
 800a514:	bf00      	nop
 800a516:	3714      	adds	r7, #20
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	6892      	ldr	r2, [r2, #8]
 800a536:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	6852      	ldr	r2, [r2, #4]
 800a540:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d103      	bne.n	800a554 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	689a      	ldr	r2, [r3, #8]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	1e5a      	subs	r2, r3, #1
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10a      	bne.n	800a59e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a59a:	bf00      	nop
 800a59c:	e7fe      	b.n	800a59c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a59e:	f002 f941 	bl	800c824 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5aa:	68f9      	ldr	r1, [r7, #12]
 800a5ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5ae:	fb01 f303 	mul.w	r3, r1, r3
 800a5b2:	441a      	add	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	68f9      	ldr	r1, [r7, #12]
 800a5d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5d4:	fb01 f303 	mul.w	r3, r1, r3
 800a5d8:	441a      	add	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	22ff      	movs	r2, #255	; 0xff
 800a5e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	22ff      	movs	r2, #255	; 0xff
 800a5ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d114      	bne.n	800a61e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d01a      	beq.n	800a632 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	3310      	adds	r3, #16
 800a600:	4618      	mov	r0, r3
 800a602:	f001 f9f5 	bl	800b9f0 <xTaskRemoveFromEventList>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d012      	beq.n	800a632 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a60c:	4b0c      	ldr	r3, [pc, #48]	; (800a640 <xQueueGenericReset+0xcc>)
 800a60e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a612:	601a      	str	r2, [r3, #0]
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	e009      	b.n	800a632 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3310      	adds	r3, #16
 800a622:	4618      	mov	r0, r3
 800a624:	f7ff fef2 	bl	800a40c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	3324      	adds	r3, #36	; 0x24
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7ff feed 	bl	800a40c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a632:	f002 f927 	bl	800c884 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a636:	2301      	movs	r3, #1
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	e000ed04 	.word	0xe000ed04

0800a644 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a644:	b580      	push	{r7, lr}
 800a646:	b08e      	sub	sp, #56	; 0x38
 800a648:	af02      	add	r7, sp, #8
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
 800a650:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10a      	bne.n	800a66e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a66a:	bf00      	nop
 800a66c:	e7fe      	b.n	800a66c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10a      	bne.n	800a68a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a686:	bf00      	nop
 800a688:	e7fe      	b.n	800a688 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <xQueueGenericCreateStatic+0x52>
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <xQueueGenericCreateStatic+0x56>
 800a696:	2301      	movs	r3, #1
 800a698:	e000      	b.n	800a69c <xQueueGenericCreateStatic+0x58>
 800a69a:	2300      	movs	r3, #0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10a      	bne.n	800a6b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	623b      	str	r3, [r7, #32]
}
 800a6b2:	bf00      	nop
 800a6b4:	e7fe      	b.n	800a6b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d102      	bne.n	800a6c2 <xQueueGenericCreateStatic+0x7e>
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <xQueueGenericCreateStatic+0x82>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e000      	b.n	800a6c8 <xQueueGenericCreateStatic+0x84>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10a      	bne.n	800a6e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	61fb      	str	r3, [r7, #28]
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a6e2:	2350      	movs	r3, #80	; 0x50
 800a6e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	2b50      	cmp	r3, #80	; 0x50
 800a6ea:	d00a      	beq.n	800a702 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	61bb      	str	r3, [r7, #24]
}
 800a6fe:	bf00      	nop
 800a700:	e7fe      	b.n	800a700 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a702:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00d      	beq.n	800a72a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a710:	2201      	movs	r2, #1
 800a712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a716:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	4613      	mov	r3, r2
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	68b9      	ldr	r1, [r7, #8]
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f000 f83f 	bl	800a7a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3730      	adds	r7, #48	; 0x30
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a734:	b580      	push	{r7, lr}
 800a736:	b08a      	sub	sp, #40	; 0x28
 800a738:	af02      	add	r7, sp, #8
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	4613      	mov	r3, r2
 800a740:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10a      	bne.n	800a75e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	613b      	str	r3, [r7, #16]
}
 800a75a:	bf00      	nop
 800a75c:	e7fe      	b.n	800a75c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	fb02 f303 	mul.w	r3, r2, r3
 800a766:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	3350      	adds	r3, #80	; 0x50
 800a76c:	4618      	mov	r0, r3
 800a76e:	f002 f97b 	bl	800ca68 <pvPortMalloc>
 800a772:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d011      	beq.n	800a79e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	3350      	adds	r3, #80	; 0x50
 800a782:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	2200      	movs	r2, #0
 800a788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a78c:	79fa      	ldrb	r2, [r7, #7]
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	4613      	mov	r3, r2
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	68b9      	ldr	r1, [r7, #8]
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f000 f805 	bl	800a7a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a79e:	69bb      	ldr	r3, [r7, #24]
	}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3720      	adds	r7, #32
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d103      	bne.n	800a7c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	601a      	str	r2, [r3, #0]
 800a7c2:	e002      	b.n	800a7ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	69b8      	ldr	r0, [r7, #24]
 800a7da:	f7ff fecb 	bl	800a574 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	78fa      	ldrb	r2, [r7, #3]
 800a7e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a7e6:	bf00      	nop
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b08a      	sub	sp, #40	; 0x28
 800a7f2:	af02      	add	r7, sp, #8
 800a7f4:	60f8      	str	r0, [r7, #12]
 800a7f6:	60b9      	str	r1, [r7, #8]
 800a7f8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10a      	bne.n	800a816 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	61bb      	str	r3, [r7, #24]
}
 800a812:	bf00      	nop
 800a814:	e7fe      	b.n	800a814 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d90a      	bls.n	800a834 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	617b      	str	r3, [r7, #20]
}
 800a830:	bf00      	nop
 800a832:	e7fe      	b.n	800a832 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a834:	2302      	movs	r3, #2
 800a836:	9300      	str	r3, [sp, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	2100      	movs	r1, #0
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f7ff ff00 	bl	800a644 <xQueueGenericCreateStatic>
 800a844:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a852:	69fb      	ldr	r3, [r7, #28]
	}
 800a854:	4618      	mov	r0, r3
 800a856:	3720      	adds	r7, #32
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b086      	sub	sp, #24
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10a      	bne.n	800a882 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	613b      	str	r3, [r7, #16]
}
 800a87e:	bf00      	nop
 800a880:	e7fe      	b.n	800a880 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	429a      	cmp	r2, r3
 800a888:	d90a      	bls.n	800a8a0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	60fb      	str	r3, [r7, #12]
}
 800a89c:	bf00      	nop
 800a89e:	e7fe      	b.n	800a89e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a8a0:	2202      	movs	r2, #2
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff ff45 	bl	800a734 <xQueueGenericCreate>
 800a8aa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d002      	beq.n	800a8b8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	683a      	ldr	r2, [r7, #0]
 800a8b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a8b8:	697b      	ldr	r3, [r7, #20]
	}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b08e      	sub	sp, #56	; 0x38
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
 800a8d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10a      	bne.n	800a8f6 <xQueueGenericSend+0x32>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d103      	bne.n	800a904 <xQueueGenericSend+0x40>
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a900:	2b00      	cmp	r3, #0
 800a902:	d101      	bne.n	800a908 <xQueueGenericSend+0x44>
 800a904:	2301      	movs	r3, #1
 800a906:	e000      	b.n	800a90a <xQueueGenericSend+0x46>
 800a908:	2300      	movs	r3, #0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d10a      	bne.n	800a924 <xQueueGenericSend+0x60>
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a920:	bf00      	nop
 800a922:	e7fe      	b.n	800a922 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	2b02      	cmp	r3, #2
 800a928:	d103      	bne.n	800a932 <xQueueGenericSend+0x6e>
 800a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d101      	bne.n	800a936 <xQueueGenericSend+0x72>
 800a932:	2301      	movs	r3, #1
 800a934:	e000      	b.n	800a938 <xQueueGenericSend+0x74>
 800a936:	2300      	movs	r3, #0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10a      	bne.n	800a952 <xQueueGenericSend+0x8e>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	623b      	str	r3, [r7, #32]
}
 800a94e:	bf00      	nop
 800a950:	e7fe      	b.n	800a950 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a952:	f001 fa0b 	bl	800bd6c <xTaskGetSchedulerState>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d102      	bne.n	800a962 <xQueueGenericSend+0x9e>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d101      	bne.n	800a966 <xQueueGenericSend+0xa2>
 800a962:	2301      	movs	r3, #1
 800a964:	e000      	b.n	800a968 <xQueueGenericSend+0xa4>
 800a966:	2300      	movs	r3, #0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10a      	bne.n	800a982 <xQueueGenericSend+0xbe>
	__asm volatile
 800a96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a970:	f383 8811 	msr	BASEPRI, r3
 800a974:	f3bf 8f6f 	isb	sy
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	61fb      	str	r3, [r7, #28]
}
 800a97e:	bf00      	nop
 800a980:	e7fe      	b.n	800a980 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a982:	f001 ff4f 	bl	800c824 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a98e:	429a      	cmp	r2, r3
 800a990:	d302      	bcc.n	800a998 <xQueueGenericSend+0xd4>
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	2b02      	cmp	r3, #2
 800a996:	d129      	bne.n	800a9ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	68b9      	ldr	r1, [r7, #8]
 800a99c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a99e:	f000 fa2e 	bl	800adfe <prvCopyDataToQueue>
 800a9a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d010      	beq.n	800a9ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ae:	3324      	adds	r3, #36	; 0x24
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f001 f81d 	bl	800b9f0 <xTaskRemoveFromEventList>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d013      	beq.n	800a9e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a9bc:	4b3f      	ldr	r3, [pc, #252]	; (800aabc <xQueueGenericSend+0x1f8>)
 800a9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9c2:	601a      	str	r2, [r3, #0]
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	e00a      	b.n	800a9e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d007      	beq.n	800a9e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a9d4:	4b39      	ldr	r3, [pc, #228]	; (800aabc <xQueueGenericSend+0x1f8>)
 800a9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a9e4:	f001 ff4e 	bl	800c884 <vPortExitCritical>
				return pdPASS;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e063      	b.n	800aab4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d103      	bne.n	800a9fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9f2:	f001 ff47 	bl	800c884 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	e05c      	b.n	800aab4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d106      	bne.n	800aa0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa00:	f107 0314 	add.w	r3, r7, #20
 800aa04:	4618      	mov	r0, r3
 800aa06:	f001 f857 	bl	800bab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa0e:	f001 ff39 	bl	800c884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa12:	f000 fdc9 	bl	800b5a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa16:	f001 ff05 	bl	800c824 <vPortEnterCritical>
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa20:	b25b      	sxtb	r3, r3
 800aa22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa26:	d103      	bne.n	800aa30 <xQueueGenericSend+0x16c>
 800aa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa36:	b25b      	sxtb	r3, r3
 800aa38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa3c:	d103      	bne.n	800aa46 <xQueueGenericSend+0x182>
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	2200      	movs	r2, #0
 800aa42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa46:	f001 ff1d 	bl	800c884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa4a:	1d3a      	adds	r2, r7, #4
 800aa4c:	f107 0314 	add.w	r3, r7, #20
 800aa50:	4611      	mov	r1, r2
 800aa52:	4618      	mov	r0, r3
 800aa54:	f001 f846 	bl	800bae4 <xTaskCheckForTimeOut>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d124      	bne.n	800aaa8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa60:	f000 fac5 	bl	800afee <prvIsQueueFull>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d018      	beq.n	800aa9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6c:	3310      	adds	r3, #16
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	4611      	mov	r1, r2
 800aa72:	4618      	mov	r0, r3
 800aa74:	f000 ff6c 	bl	800b950 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa7a:	f000 fa50 	bl	800af1e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa7e:	f000 fda1 	bl	800b5c4 <xTaskResumeAll>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f47f af7c 	bne.w	800a982 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aa8a:	4b0c      	ldr	r3, [pc, #48]	; (800aabc <xQueueGenericSend+0x1f8>)
 800aa8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	e772      	b.n	800a982 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa9e:	f000 fa3e 	bl	800af1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aaa2:	f000 fd8f 	bl	800b5c4 <xTaskResumeAll>
 800aaa6:	e76c      	b.n	800a982 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aaa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaaa:	f000 fa38 	bl	800af1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aaae:	f000 fd89 	bl	800b5c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aab2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3738      	adds	r7, #56	; 0x38
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	e000ed04 	.word	0xe000ed04

0800aac0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b090      	sub	sp, #64	; 0x40
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
 800aacc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10a      	bne.n	800aaee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aadc:	f383 8811 	msr	BASEPRI, r3
 800aae0:	f3bf 8f6f 	isb	sy
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aaea:	bf00      	nop
 800aaec:	e7fe      	b.n	800aaec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d103      	bne.n	800aafc <xQueueGenericSendFromISR+0x3c>
 800aaf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d101      	bne.n	800ab00 <xQueueGenericSendFromISR+0x40>
 800aafc:	2301      	movs	r3, #1
 800aafe:	e000      	b.n	800ab02 <xQueueGenericSendFromISR+0x42>
 800ab00:	2300      	movs	r3, #0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10a      	bne.n	800ab1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ab06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab18:	bf00      	nop
 800ab1a:	e7fe      	b.n	800ab1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d103      	bne.n	800ab2a <xQueueGenericSendFromISR+0x6a>
 800ab22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d101      	bne.n	800ab2e <xQueueGenericSendFromISR+0x6e>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e000      	b.n	800ab30 <xQueueGenericSendFromISR+0x70>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10a      	bne.n	800ab4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	623b      	str	r3, [r7, #32]
}
 800ab46:	bf00      	nop
 800ab48:	e7fe      	b.n	800ab48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab4a:	f001 ff4d 	bl	800c9e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab4e:	f3ef 8211 	mrs	r2, BASEPRI
 800ab52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	61fa      	str	r2, [r7, #28]
 800ab64:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab66:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab68:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d302      	bcc.n	800ab7c <xQueueGenericSendFromISR+0xbc>
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d12f      	bne.n	800abdc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	68b9      	ldr	r1, [r7, #8]
 800ab90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab92:	f000 f934 	bl	800adfe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ab9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab9e:	d112      	bne.n	800abc6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d016      	beq.n	800abd6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abaa:	3324      	adds	r3, #36	; 0x24
 800abac:	4618      	mov	r0, r3
 800abae:	f000 ff1f 	bl	800b9f0 <xTaskRemoveFromEventList>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00e      	beq.n	800abd6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00b      	beq.n	800abd6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2201      	movs	r2, #1
 800abc2:	601a      	str	r2, [r3, #0]
 800abc4:	e007      	b.n	800abd6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800abc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800abca:	3301      	adds	r3, #1
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	b25a      	sxtb	r2, r3
 800abd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800abd6:	2301      	movs	r3, #1
 800abd8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800abda:	e001      	b.n	800abe0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800abdc:	2300      	movs	r3, #0
 800abde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800abea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3740      	adds	r7, #64	; 0x40
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
	...

0800abf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b08c      	sub	sp, #48	; 0x30
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac04:	2300      	movs	r3, #0
 800ac06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10a      	bne.n	800ac28 <xQueueReceive+0x30>
	__asm volatile
 800ac12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	623b      	str	r3, [r7, #32]
}
 800ac24:	bf00      	nop
 800ac26:	e7fe      	b.n	800ac26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d103      	bne.n	800ac36 <xQueueReceive+0x3e>
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <xQueueReceive+0x42>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e000      	b.n	800ac3c <xQueueReceive+0x44>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10a      	bne.n	800ac56 <xQueueReceive+0x5e>
	__asm volatile
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	61fb      	str	r3, [r7, #28]
}
 800ac52:	bf00      	nop
 800ac54:	e7fe      	b.n	800ac54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac56:	f001 f889 	bl	800bd6c <xTaskGetSchedulerState>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d102      	bne.n	800ac66 <xQueueReceive+0x6e>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d101      	bne.n	800ac6a <xQueueReceive+0x72>
 800ac66:	2301      	movs	r3, #1
 800ac68:	e000      	b.n	800ac6c <xQueueReceive+0x74>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10a      	bne.n	800ac86 <xQueueReceive+0x8e>
	__asm volatile
 800ac70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	61bb      	str	r3, [r7, #24]
}
 800ac82:	bf00      	nop
 800ac84:	e7fe      	b.n	800ac84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac86:	f001 fdcd 	bl	800c824 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d01f      	beq.n	800acd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac96:	68b9      	ldr	r1, [r7, #8]
 800ac98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac9a:	f000 f91a 	bl	800aed2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	1e5a      	subs	r2, r3, #1
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00f      	beq.n	800acce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	3310      	adds	r3, #16
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 fe9c 	bl	800b9f0 <xTaskRemoveFromEventList>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d007      	beq.n	800acce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acbe:	4b3d      	ldr	r3, [pc, #244]	; (800adb4 <xQueueReceive+0x1bc>)
 800acc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800acce:	f001 fdd9 	bl	800c884 <vPortExitCritical>
				return pdPASS;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e069      	b.n	800adaa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d103      	bne.n	800ace4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800acdc:	f001 fdd2 	bl	800c884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ace0:	2300      	movs	r3, #0
 800ace2:	e062      	b.n	800adaa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ace4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d106      	bne.n	800acf8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acea:	f107 0310 	add.w	r3, r7, #16
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 fee2 	bl	800bab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800acf4:	2301      	movs	r3, #1
 800acf6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acf8:	f001 fdc4 	bl	800c884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acfc:	f000 fc54 	bl	800b5a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad00:	f001 fd90 	bl	800c824 <vPortEnterCritical>
 800ad04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad0a:	b25b      	sxtb	r3, r3
 800ad0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad10:	d103      	bne.n	800ad1a <xQueueReceive+0x122>
 800ad12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad20:	b25b      	sxtb	r3, r3
 800ad22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad26:	d103      	bne.n	800ad30 <xQueueReceive+0x138>
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad30:	f001 fda8 	bl	800c884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad34:	1d3a      	adds	r2, r7, #4
 800ad36:	f107 0310 	add.w	r3, r7, #16
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 fed1 	bl	800bae4 <xTaskCheckForTimeOut>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d123      	bne.n	800ad90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad4a:	f000 f93a 	bl	800afc2 <prvIsQueueEmpty>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d017      	beq.n	800ad84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad56:	3324      	adds	r3, #36	; 0x24
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f000 fdf7 	bl	800b950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad64:	f000 f8db 	bl	800af1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad68:	f000 fc2c 	bl	800b5c4 <xTaskResumeAll>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d189      	bne.n	800ac86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ad72:	4b10      	ldr	r3, [pc, #64]	; (800adb4 <xQueueReceive+0x1bc>)
 800ad74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	e780      	b.n	800ac86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad86:	f000 f8ca 	bl	800af1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad8a:	f000 fc1b 	bl	800b5c4 <xTaskResumeAll>
 800ad8e:	e77a      	b.n	800ac86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad92:	f000 f8c4 	bl	800af1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad96:	f000 fc15 	bl	800b5c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad9c:	f000 f911 	bl	800afc2 <prvIsQueueEmpty>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f43f af6f 	beq.w	800ac86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ada8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3730      	adds	r7, #48	; 0x30
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	e000ed04 	.word	0xe000ed04

0800adb8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10a      	bne.n	800ade0 <vQueueDelete+0x28>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	60bb      	str	r3, [r7, #8]
}
 800addc:	bf00      	nop
 800adde:	e7fe      	b.n	800adde <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 f947 	bl	800b074 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800adec:	2b00      	cmp	r3, #0
 800adee:	d102      	bne.n	800adf6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f001 ff05 	bl	800cc00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800adf6:	bf00      	nop
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b086      	sub	sp, #24
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	60f8      	str	r0, [r7, #12]
 800ae06:	60b9      	str	r1, [r7, #8]
 800ae08:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae12:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10d      	bne.n	800ae38 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d14d      	bne.n	800aec0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 ffbd 	bl	800bda8 <xTaskPriorityDisinherit>
 800ae2e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	609a      	str	r2, [r3, #8]
 800ae36:	e043      	b.n	800aec0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d119      	bne.n	800ae72 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6858      	ldr	r0, [r3, #4]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae46:	461a      	mov	r2, r3
 800ae48:	68b9      	ldr	r1, [r7, #8]
 800ae4a:	f002 fd78 	bl	800d93e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae56:	441a      	add	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	685a      	ldr	r2, [r3, #4]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d32b      	bcc.n	800aec0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	605a      	str	r2, [r3, #4]
 800ae70:	e026      	b.n	800aec0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	68d8      	ldr	r0, [r3, #12]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	68b9      	ldr	r1, [r7, #8]
 800ae7e:	f002 fd5e 	bl	800d93e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	68da      	ldr	r2, [r3, #12]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8a:	425b      	negs	r3, r3
 800ae8c:	441a      	add	r2, r3
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	68da      	ldr	r2, [r3, #12]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d207      	bcs.n	800aeae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	689a      	ldr	r2, [r3, #8]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea6:	425b      	negs	r3, r3
 800aea8:	441a      	add	r2, r3
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d105      	bne.n	800aec0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	3b01      	subs	r3, #1
 800aebe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	1c5a      	adds	r2, r3, #1
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aec8:	697b      	ldr	r3, [r7, #20]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b082      	sub	sp, #8
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d018      	beq.n	800af16 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	68da      	ldr	r2, [r3, #12]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeec:	441a      	add	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	68da      	ldr	r2, [r3, #12]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d303      	bcc.n	800af06 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	68d9      	ldr	r1, [r3, #12]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0e:	461a      	mov	r2, r3
 800af10:	6838      	ldr	r0, [r7, #0]
 800af12:	f002 fd14 	bl	800d93e <memcpy>
	}
}
 800af16:	bf00      	nop
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b084      	sub	sp, #16
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af26:	f001 fc7d 	bl	800c824 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af30:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af32:	e011      	b.n	800af58 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d012      	beq.n	800af62 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	3324      	adds	r3, #36	; 0x24
 800af40:	4618      	mov	r0, r3
 800af42:	f000 fd55 	bl	800b9f0 <xTaskRemoveFromEventList>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d001      	beq.n	800af50 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af4c:	f000 fe2c 	bl	800bba8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af50:	7bfb      	ldrb	r3, [r7, #15]
 800af52:	3b01      	subs	r3, #1
 800af54:	b2db      	uxtb	r3, r3
 800af56:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	dce9      	bgt.n	800af34 <prvUnlockQueue+0x16>
 800af60:	e000      	b.n	800af64 <prvUnlockQueue+0x46>
					break;
 800af62:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	22ff      	movs	r2, #255	; 0xff
 800af68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af6c:	f001 fc8a 	bl	800c884 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af70:	f001 fc58 	bl	800c824 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af7a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af7c:	e011      	b.n	800afa2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d012      	beq.n	800afac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3310      	adds	r3, #16
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 fd30 	bl	800b9f0 <xTaskRemoveFromEventList>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d001      	beq.n	800af9a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af96:	f000 fe07 	bl	800bba8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af9a:	7bbb      	ldrb	r3, [r7, #14]
 800af9c:	3b01      	subs	r3, #1
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	dce9      	bgt.n	800af7e <prvUnlockQueue+0x60>
 800afaa:	e000      	b.n	800afae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800afac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	22ff      	movs	r2, #255	; 0xff
 800afb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800afb6:	f001 fc65 	bl	800c884 <vPortExitCritical>
}
 800afba:	bf00      	nop
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b084      	sub	sp, #16
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afca:	f001 fc2b 	bl	800c824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d102      	bne.n	800afdc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800afd6:	2301      	movs	r3, #1
 800afd8:	60fb      	str	r3, [r7, #12]
 800afda:	e001      	b.n	800afe0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800afdc:	2300      	movs	r3, #0
 800afde:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afe0:	f001 fc50 	bl	800c884 <vPortExitCritical>

	return xReturn;
 800afe4:	68fb      	ldr	r3, [r7, #12]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b084      	sub	sp, #16
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aff6:	f001 fc15 	bl	800c824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b002:	429a      	cmp	r2, r3
 800b004:	d102      	bne.n	800b00c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b006:	2301      	movs	r3, #1
 800b008:	60fb      	str	r3, [r7, #12]
 800b00a:	e001      	b.n	800b010 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b00c:	2300      	movs	r3, #0
 800b00e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b010:	f001 fc38 	bl	800c884 <vPortExitCritical>

	return xReturn;
 800b014:	68fb      	ldr	r3, [r7, #12]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
	...

0800b020 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b02a:	2300      	movs	r3, #0
 800b02c:	60fb      	str	r3, [r7, #12]
 800b02e:	e014      	b.n	800b05a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b030:	4a0f      	ldr	r2, [pc, #60]	; (800b070 <vQueueAddToRegistry+0x50>)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10b      	bne.n	800b054 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b03c:	490c      	ldr	r1, [pc, #48]	; (800b070 <vQueueAddToRegistry+0x50>)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b046:	4a0a      	ldr	r2, [pc, #40]	; (800b070 <vQueueAddToRegistry+0x50>)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	00db      	lsls	r3, r3, #3
 800b04c:	4413      	add	r3, r2
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b052:	e006      	b.n	800b062 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	3301      	adds	r3, #1
 800b058:	60fb      	str	r3, [r7, #12]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2b07      	cmp	r3, #7
 800b05e:	d9e7      	bls.n	800b030 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b060:	bf00      	nop
 800b062:	bf00      	nop
 800b064:	3714      	adds	r7, #20
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	200010d4 	.word	0x200010d4

0800b074 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b07c:	2300      	movs	r3, #0
 800b07e:	60fb      	str	r3, [r7, #12]
 800b080:	e016      	b.n	800b0b0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b082:	4a10      	ldr	r2, [pc, #64]	; (800b0c4 <vQueueUnregisterQueue+0x50>)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	00db      	lsls	r3, r3, #3
 800b088:	4413      	add	r3, r2
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d10b      	bne.n	800b0aa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b092:	4a0c      	ldr	r2, [pc, #48]	; (800b0c4 <vQueueUnregisterQueue+0x50>)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2100      	movs	r1, #0
 800b098:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b09c:	4a09      	ldr	r2, [pc, #36]	; (800b0c4 <vQueueUnregisterQueue+0x50>)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	00db      	lsls	r3, r3, #3
 800b0a2:	4413      	add	r3, r2
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	605a      	str	r2, [r3, #4]
				break;
 800b0a8:	e006      	b.n	800b0b8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	60fb      	str	r3, [r7, #12]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2b07      	cmp	r3, #7
 800b0b4:	d9e5      	bls.n	800b082 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b0b6:	bf00      	nop
 800b0b8:	bf00      	nop
 800b0ba:	3714      	adds	r7, #20
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	200010d4 	.word	0x200010d4

0800b0c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0d8:	f001 fba4 	bl	800c824 <vPortEnterCritical>
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0e2:	b25b      	sxtb	r3, r3
 800b0e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0e8:	d103      	bne.n	800b0f2 <vQueueWaitForMessageRestricted+0x2a>
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0f8:	b25b      	sxtb	r3, r3
 800b0fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0fe:	d103      	bne.n	800b108 <vQueueWaitForMessageRestricted+0x40>
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	2200      	movs	r2, #0
 800b104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b108:	f001 fbbc 	bl	800c884 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b110:	2b00      	cmp	r3, #0
 800b112:	d106      	bne.n	800b122 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	3324      	adds	r3, #36	; 0x24
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	68b9      	ldr	r1, [r7, #8]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 fc3b 	bl	800b998 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b122:	6978      	ldr	r0, [r7, #20]
 800b124:	f7ff fefb 	bl	800af1e <prvUnlockQueue>
	}
 800b128:	bf00      	nop
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b130:	b580      	push	{r7, lr}
 800b132:	b08e      	sub	sp, #56	; 0x38
 800b134:	af04      	add	r7, sp, #16
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
 800b13c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10a      	bne.n	800b15a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	623b      	str	r3, [r7, #32]
}
 800b156:	bf00      	nop
 800b158:	e7fe      	b.n	800b158 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10a      	bne.n	800b176 <xTaskCreateStatic+0x46>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	61fb      	str	r3, [r7, #28]
}
 800b172:	bf00      	nop
 800b174:	e7fe      	b.n	800b174 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b176:	235c      	movs	r3, #92	; 0x5c
 800b178:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	2b5c      	cmp	r3, #92	; 0x5c
 800b17e:	d00a      	beq.n	800b196 <xTaskCreateStatic+0x66>
	__asm volatile
 800b180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	61bb      	str	r3, [r7, #24]
}
 800b192:	bf00      	nop
 800b194:	e7fe      	b.n	800b194 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b196:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d01e      	beq.n	800b1dc <xTaskCreateStatic+0xac>
 800b19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d01b      	beq.n	800b1dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b0:	2202      	movs	r2, #2
 800b1b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	9303      	str	r3, [sp, #12]
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1bc:	9302      	str	r3, [sp, #8]
 800b1be:	f107 0314 	add.w	r3, r7, #20
 800b1c2:	9301      	str	r3, [sp, #4]
 800b1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	68b9      	ldr	r1, [r7, #8]
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f000 f850 	bl	800b274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1d6:	f000 f8dd 	bl	800b394 <prvAddNewTaskToReadyList>
 800b1da:	e001      	b.n	800b1e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1e0:	697b      	ldr	r3, [r7, #20]
	}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3728      	adds	r7, #40	; 0x28
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b08c      	sub	sp, #48	; 0x30
 800b1ee:	af04      	add	r7, sp, #16
 800b1f0:	60f8      	str	r0, [r7, #12]
 800b1f2:	60b9      	str	r1, [r7, #8]
 800b1f4:	603b      	str	r3, [r7, #0]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1fa:	88fb      	ldrh	r3, [r7, #6]
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4618      	mov	r0, r3
 800b200:	f001 fc32 	bl	800ca68 <pvPortMalloc>
 800b204:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00e      	beq.n	800b22a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b20c:	205c      	movs	r0, #92	; 0x5c
 800b20e:	f001 fc2b 	bl	800ca68 <pvPortMalloc>
 800b212:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d003      	beq.n	800b222 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	631a      	str	r2, [r3, #48]	; 0x30
 800b220:	e005      	b.n	800b22e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b222:	6978      	ldr	r0, [r7, #20]
 800b224:	f001 fcec 	bl	800cc00 <vPortFree>
 800b228:	e001      	b.n	800b22e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b22a:	2300      	movs	r3, #0
 800b22c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d017      	beq.n	800b264 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	2200      	movs	r2, #0
 800b238:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b23c:	88fa      	ldrh	r2, [r7, #6]
 800b23e:	2300      	movs	r3, #0
 800b240:	9303      	str	r3, [sp, #12]
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	9302      	str	r3, [sp, #8]
 800b246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	68b9      	ldr	r1, [r7, #8]
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f000 f80e 	bl	800b274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b258:	69f8      	ldr	r0, [r7, #28]
 800b25a:	f000 f89b 	bl	800b394 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b25e:	2301      	movs	r3, #1
 800b260:	61bb      	str	r3, [r7, #24]
 800b262:	e002      	b.n	800b26a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b268:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b26a:	69bb      	ldr	r3, [r7, #24]
	}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3720      	adds	r7, #32
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b088      	sub	sp, #32
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
 800b280:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	461a      	mov	r2, r3
 800b28c:	21a5      	movs	r1, #165	; 0xa5
 800b28e:	f002 fb1d 	bl	800d8cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b29c:	3b01      	subs	r3, #1
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4413      	add	r3, r2
 800b2a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	f023 0307 	bic.w	r3, r3, #7
 800b2aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	f003 0307 	and.w	r3, r3, #7
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00a      	beq.n	800b2cc <prvInitialiseNewTask+0x58>
	__asm volatile
 800b2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ba:	f383 8811 	msr	BASEPRI, r3
 800b2be:	f3bf 8f6f 	isb	sy
 800b2c2:	f3bf 8f4f 	dsb	sy
 800b2c6:	617b      	str	r3, [r7, #20]
}
 800b2c8:	bf00      	nop
 800b2ca:	e7fe      	b.n	800b2ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d01f      	beq.n	800b312 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	e012      	b.n	800b2fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	4413      	add	r3, r2
 800b2de:	7819      	ldrb	r1, [r3, #0]
 800b2e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	3334      	adds	r3, #52	; 0x34
 800b2e8:	460a      	mov	r2, r1
 800b2ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d006      	beq.n	800b306 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	61fb      	str	r3, [r7, #28]
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	2b0f      	cmp	r3, #15
 800b302:	d9e9      	bls.n	800b2d8 <prvInitialiseNewTask+0x64>
 800b304:	e000      	b.n	800b308 <prvInitialiseNewTask+0x94>
			{
				break;
 800b306:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b310:	e003      	b.n	800b31a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b314:	2200      	movs	r2, #0
 800b316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31c:	2b37      	cmp	r3, #55	; 0x37
 800b31e:	d901      	bls.n	800b324 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b320:	2337      	movs	r3, #55	; 0x37
 800b322:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b328:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b32e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b332:	2200      	movs	r2, #0
 800b334:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b338:	3304      	adds	r3, #4
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7ff f886 	bl	800a44c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b342:	3318      	adds	r3, #24
 800b344:	4618      	mov	r0, r3
 800b346:	f7ff f881 	bl	800a44c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b34e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b352:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b358:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b35e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b362:	2200      	movs	r2, #0
 800b364:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	68f9      	ldr	r1, [r7, #12]
 800b372:	69b8      	ldr	r0, [r7, #24]
 800b374:	f001 f928 	bl	800c5c8 <pxPortInitialiseStack>
 800b378:	4602      	mov	r2, r0
 800b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b388:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b38a:	bf00      	nop
 800b38c:	3720      	adds	r7, #32
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
	...

0800b394 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b39c:	f001 fa42 	bl	800c824 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3a0:	4b2d      	ldr	r3, [pc, #180]	; (800b458 <prvAddNewTaskToReadyList+0xc4>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	4a2c      	ldr	r2, [pc, #176]	; (800b458 <prvAddNewTaskToReadyList+0xc4>)
 800b3a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3aa:	4b2c      	ldr	r3, [pc, #176]	; (800b45c <prvAddNewTaskToReadyList+0xc8>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d109      	bne.n	800b3c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3b2:	4a2a      	ldr	r2, [pc, #168]	; (800b45c <prvAddNewTaskToReadyList+0xc8>)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3b8:	4b27      	ldr	r3, [pc, #156]	; (800b458 <prvAddNewTaskToReadyList+0xc4>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d110      	bne.n	800b3e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3c0:	f000 fc16 	bl	800bbf0 <prvInitialiseTaskLists>
 800b3c4:	e00d      	b.n	800b3e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3c6:	4b26      	ldr	r3, [pc, #152]	; (800b460 <prvAddNewTaskToReadyList+0xcc>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d109      	bne.n	800b3e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3ce:	4b23      	ldr	r3, [pc, #140]	; (800b45c <prvAddNewTaskToReadyList+0xc8>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d802      	bhi.n	800b3e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3dc:	4a1f      	ldr	r2, [pc, #124]	; (800b45c <prvAddNewTaskToReadyList+0xc8>)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3e2:	4b20      	ldr	r3, [pc, #128]	; (800b464 <prvAddNewTaskToReadyList+0xd0>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	4a1e      	ldr	r2, [pc, #120]	; (800b464 <prvAddNewTaskToReadyList+0xd0>)
 800b3ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b3ec:	4b1d      	ldr	r3, [pc, #116]	; (800b464 <prvAddNewTaskToReadyList+0xd0>)
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f8:	4b1b      	ldr	r3, [pc, #108]	; (800b468 <prvAddNewTaskToReadyList+0xd4>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d903      	bls.n	800b408 <prvAddNewTaskToReadyList+0x74>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b404:	4a18      	ldr	r2, [pc, #96]	; (800b468 <prvAddNewTaskToReadyList+0xd4>)
 800b406:	6013      	str	r3, [r2, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40c:	4613      	mov	r3, r2
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	4413      	add	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4a15      	ldr	r2, [pc, #84]	; (800b46c <prvAddNewTaskToReadyList+0xd8>)
 800b416:	441a      	add	r2, r3
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	3304      	adds	r3, #4
 800b41c:	4619      	mov	r1, r3
 800b41e:	4610      	mov	r0, r2
 800b420:	f7ff f821 	bl	800a466 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b424:	f001 fa2e 	bl	800c884 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b428:	4b0d      	ldr	r3, [pc, #52]	; (800b460 <prvAddNewTaskToReadyList+0xcc>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00e      	beq.n	800b44e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b430:	4b0a      	ldr	r3, [pc, #40]	; (800b45c <prvAddNewTaskToReadyList+0xc8>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d207      	bcs.n	800b44e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b43e:	4b0c      	ldr	r3, [pc, #48]	; (800b470 <prvAddNewTaskToReadyList+0xdc>)
 800b440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b444:	601a      	str	r2, [r3, #0]
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b44e:	bf00      	nop
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	200015e8 	.word	0x200015e8
 800b45c:	20001114 	.word	0x20001114
 800b460:	200015f4 	.word	0x200015f4
 800b464:	20001604 	.word	0x20001604
 800b468:	200015f0 	.word	0x200015f0
 800b46c:	20001118 	.word	0x20001118
 800b470:	e000ed04 	.word	0xe000ed04

0800b474 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b47c:	2300      	movs	r3, #0
 800b47e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d017      	beq.n	800b4b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b486:	4b13      	ldr	r3, [pc, #76]	; (800b4d4 <vTaskDelay+0x60>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00a      	beq.n	800b4a4 <vTaskDelay+0x30>
	__asm volatile
 800b48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	60bb      	str	r3, [r7, #8]
}
 800b4a0:	bf00      	nop
 800b4a2:	e7fe      	b.n	800b4a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b4a4:	f000 f880 	bl	800b5a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fcea 	bl	800be84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4b0:	f000 f888 	bl	800b5c4 <xTaskResumeAll>
 800b4b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d107      	bne.n	800b4cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b4bc:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <vTaskDelay+0x64>)
 800b4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4cc:	bf00      	nop
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	20001610 	.word	0x20001610
 800b4d8:	e000ed04 	.word	0xe000ed04

0800b4dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b08a      	sub	sp, #40	; 0x28
 800b4e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4ea:	463a      	mov	r2, r7
 800b4ec:	1d39      	adds	r1, r7, #4
 800b4ee:	f107 0308 	add.w	r3, r7, #8
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fe ff56 	bl	800a3a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4f8:	6839      	ldr	r1, [r7, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	9202      	str	r2, [sp, #8]
 800b500:	9301      	str	r3, [sp, #4]
 800b502:	2300      	movs	r3, #0
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	2300      	movs	r3, #0
 800b508:	460a      	mov	r2, r1
 800b50a:	4921      	ldr	r1, [pc, #132]	; (800b590 <vTaskStartScheduler+0xb4>)
 800b50c:	4821      	ldr	r0, [pc, #132]	; (800b594 <vTaskStartScheduler+0xb8>)
 800b50e:	f7ff fe0f 	bl	800b130 <xTaskCreateStatic>
 800b512:	4603      	mov	r3, r0
 800b514:	4a20      	ldr	r2, [pc, #128]	; (800b598 <vTaskStartScheduler+0xbc>)
 800b516:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b518:	4b1f      	ldr	r3, [pc, #124]	; (800b598 <vTaskStartScheduler+0xbc>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d002      	beq.n	800b526 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b520:	2301      	movs	r3, #1
 800b522:	617b      	str	r3, [r7, #20]
 800b524:	e001      	b.n	800b52a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b526:	2300      	movs	r3, #0
 800b528:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d102      	bne.n	800b536 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b530:	f000 fcfc 	bl	800bf2c <xTimerCreateTimerTask>
 800b534:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d116      	bne.n	800b56a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b540:	f383 8811 	msr	BASEPRI, r3
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	613b      	str	r3, [r7, #16]
}
 800b54e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b550:	4b12      	ldr	r3, [pc, #72]	; (800b59c <vTaskStartScheduler+0xc0>)
 800b552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b556:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b558:	4b11      	ldr	r3, [pc, #68]	; (800b5a0 <vTaskStartScheduler+0xc4>)
 800b55a:	2201      	movs	r2, #1
 800b55c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b55e:	4b11      	ldr	r3, [pc, #68]	; (800b5a4 <vTaskStartScheduler+0xc8>)
 800b560:	2200      	movs	r2, #0
 800b562:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b564:	f001 f8bc 	bl	800c6e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b568:	e00e      	b.n	800b588 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b570:	d10a      	bne.n	800b588 <vTaskStartScheduler+0xac>
	__asm volatile
 800b572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	60fb      	str	r3, [r7, #12]
}
 800b584:	bf00      	nop
 800b586:	e7fe      	b.n	800b586 <vTaskStartScheduler+0xaa>
}
 800b588:	bf00      	nop
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	0800fc64 	.word	0x0800fc64
 800b594:	0800bbc1 	.word	0x0800bbc1
 800b598:	2000160c 	.word	0x2000160c
 800b59c:	20001608 	.word	0x20001608
 800b5a0:	200015f4 	.word	0x200015f4
 800b5a4:	200015ec 	.word	0x200015ec

0800b5a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b5ac:	4b04      	ldr	r3, [pc, #16]	; (800b5c0 <vTaskSuspendAll+0x18>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	4a03      	ldr	r2, [pc, #12]	; (800b5c0 <vTaskSuspendAll+0x18>)
 800b5b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b5b6:	bf00      	nop
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	20001610 	.word	0x20001610

0800b5c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5d2:	4b42      	ldr	r3, [pc, #264]	; (800b6dc <xTaskResumeAll+0x118>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d10a      	bne.n	800b5f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5de:	f383 8811 	msr	BASEPRI, r3
 800b5e2:	f3bf 8f6f 	isb	sy
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	603b      	str	r3, [r7, #0]
}
 800b5ec:	bf00      	nop
 800b5ee:	e7fe      	b.n	800b5ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5f0:	f001 f918 	bl	800c824 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5f4:	4b39      	ldr	r3, [pc, #228]	; (800b6dc <xTaskResumeAll+0x118>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	4a38      	ldr	r2, [pc, #224]	; (800b6dc <xTaskResumeAll+0x118>)
 800b5fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5fe:	4b37      	ldr	r3, [pc, #220]	; (800b6dc <xTaskResumeAll+0x118>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d162      	bne.n	800b6cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b606:	4b36      	ldr	r3, [pc, #216]	; (800b6e0 <xTaskResumeAll+0x11c>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d05e      	beq.n	800b6cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b60e:	e02f      	b.n	800b670 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b610:	4b34      	ldr	r3, [pc, #208]	; (800b6e4 <xTaskResumeAll+0x120>)
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	3318      	adds	r3, #24
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7fe ff7f 	bl	800a520 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3304      	adds	r3, #4
 800b626:	4618      	mov	r0, r3
 800b628:	f7fe ff7a 	bl	800a520 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b630:	4b2d      	ldr	r3, [pc, #180]	; (800b6e8 <xTaskResumeAll+0x124>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	429a      	cmp	r2, r3
 800b636:	d903      	bls.n	800b640 <xTaskResumeAll+0x7c>
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63c:	4a2a      	ldr	r2, [pc, #168]	; (800b6e8 <xTaskResumeAll+0x124>)
 800b63e:	6013      	str	r3, [r2, #0]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b644:	4613      	mov	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	4413      	add	r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	4a27      	ldr	r2, [pc, #156]	; (800b6ec <xTaskResumeAll+0x128>)
 800b64e:	441a      	add	r2, r3
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	3304      	adds	r3, #4
 800b654:	4619      	mov	r1, r3
 800b656:	4610      	mov	r0, r2
 800b658:	f7fe ff05 	bl	800a466 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b660:	4b23      	ldr	r3, [pc, #140]	; (800b6f0 <xTaskResumeAll+0x12c>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b666:	429a      	cmp	r2, r3
 800b668:	d302      	bcc.n	800b670 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b66a:	4b22      	ldr	r3, [pc, #136]	; (800b6f4 <xTaskResumeAll+0x130>)
 800b66c:	2201      	movs	r2, #1
 800b66e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b670:	4b1c      	ldr	r3, [pc, #112]	; (800b6e4 <xTaskResumeAll+0x120>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1cb      	bne.n	800b610 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b67e:	f000 fb55 	bl	800bd2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b682:	4b1d      	ldr	r3, [pc, #116]	; (800b6f8 <xTaskResumeAll+0x134>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d010      	beq.n	800b6b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b68e:	f000 f847 	bl	800b720 <xTaskIncrementTick>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b698:	4b16      	ldr	r3, [pc, #88]	; (800b6f4 <xTaskResumeAll+0x130>)
 800b69a:	2201      	movs	r2, #1
 800b69c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1f1      	bne.n	800b68e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b6aa:	4b13      	ldr	r3, [pc, #76]	; (800b6f8 <xTaskResumeAll+0x134>)
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6b0:	4b10      	ldr	r3, [pc, #64]	; (800b6f4 <xTaskResumeAll+0x130>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d009      	beq.n	800b6cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6bc:	4b0f      	ldr	r3, [pc, #60]	; (800b6fc <xTaskResumeAll+0x138>)
 800b6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6c2:	601a      	str	r2, [r3, #0]
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6cc:	f001 f8da 	bl	800c884 <vPortExitCritical>

	return xAlreadyYielded;
 800b6d0:	68bb      	ldr	r3, [r7, #8]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	20001610 	.word	0x20001610
 800b6e0:	200015e8 	.word	0x200015e8
 800b6e4:	200015a8 	.word	0x200015a8
 800b6e8:	200015f0 	.word	0x200015f0
 800b6ec:	20001118 	.word	0x20001118
 800b6f0:	20001114 	.word	0x20001114
 800b6f4:	200015fc 	.word	0x200015fc
 800b6f8:	200015f8 	.word	0x200015f8
 800b6fc:	e000ed04 	.word	0xe000ed04

0800b700 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b706:	4b05      	ldr	r3, [pc, #20]	; (800b71c <xTaskGetTickCount+0x1c>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b70c:	687b      	ldr	r3, [r7, #4]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	200015ec 	.word	0x200015ec

0800b720 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b726:	2300      	movs	r3, #0
 800b728:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b72a:	4b4f      	ldr	r3, [pc, #316]	; (800b868 <xTaskIncrementTick+0x148>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f040 808f 	bne.w	800b852 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b734:	4b4d      	ldr	r3, [pc, #308]	; (800b86c <xTaskIncrementTick+0x14c>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	3301      	adds	r3, #1
 800b73a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b73c:	4a4b      	ldr	r2, [pc, #300]	; (800b86c <xTaskIncrementTick+0x14c>)
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d120      	bne.n	800b78a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b748:	4b49      	ldr	r3, [pc, #292]	; (800b870 <xTaskIncrementTick+0x150>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00a      	beq.n	800b768 <xTaskIncrementTick+0x48>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	603b      	str	r3, [r7, #0]
}
 800b764:	bf00      	nop
 800b766:	e7fe      	b.n	800b766 <xTaskIncrementTick+0x46>
 800b768:	4b41      	ldr	r3, [pc, #260]	; (800b870 <xTaskIncrementTick+0x150>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	60fb      	str	r3, [r7, #12]
 800b76e:	4b41      	ldr	r3, [pc, #260]	; (800b874 <xTaskIncrementTick+0x154>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a3f      	ldr	r2, [pc, #252]	; (800b870 <xTaskIncrementTick+0x150>)
 800b774:	6013      	str	r3, [r2, #0]
 800b776:	4a3f      	ldr	r2, [pc, #252]	; (800b874 <xTaskIncrementTick+0x154>)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6013      	str	r3, [r2, #0]
 800b77c:	4b3e      	ldr	r3, [pc, #248]	; (800b878 <xTaskIncrementTick+0x158>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3301      	adds	r3, #1
 800b782:	4a3d      	ldr	r2, [pc, #244]	; (800b878 <xTaskIncrementTick+0x158>)
 800b784:	6013      	str	r3, [r2, #0]
 800b786:	f000 fad1 	bl	800bd2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b78a:	4b3c      	ldr	r3, [pc, #240]	; (800b87c <xTaskIncrementTick+0x15c>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	693a      	ldr	r2, [r7, #16]
 800b790:	429a      	cmp	r2, r3
 800b792:	d349      	bcc.n	800b828 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b794:	4b36      	ldr	r3, [pc, #216]	; (800b870 <xTaskIncrementTick+0x150>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d104      	bne.n	800b7a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b79e:	4b37      	ldr	r3, [pc, #220]	; (800b87c <xTaskIncrementTick+0x15c>)
 800b7a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7a4:	601a      	str	r2, [r3, #0]
					break;
 800b7a6:	e03f      	b.n	800b828 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7a8:	4b31      	ldr	r3, [pc, #196]	; (800b870 <xTaskIncrementTick+0x150>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7b8:	693a      	ldr	r2, [r7, #16]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d203      	bcs.n	800b7c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7c0:	4a2e      	ldr	r2, [pc, #184]	; (800b87c <xTaskIncrementTick+0x15c>)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7c6:	e02f      	b.n	800b828 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	3304      	adds	r3, #4
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fe fea7 	bl	800a520 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d004      	beq.n	800b7e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	3318      	adds	r3, #24
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fe fe9e 	bl	800a520 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e8:	4b25      	ldr	r3, [pc, #148]	; (800b880 <xTaskIncrementTick+0x160>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d903      	bls.n	800b7f8 <xTaskIncrementTick+0xd8>
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	4a22      	ldr	r2, [pc, #136]	; (800b880 <xTaskIncrementTick+0x160>)
 800b7f6:	6013      	str	r3, [r2, #0]
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	4413      	add	r3, r2
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	4a1f      	ldr	r2, [pc, #124]	; (800b884 <xTaskIncrementTick+0x164>)
 800b806:	441a      	add	r2, r3
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	3304      	adds	r3, #4
 800b80c:	4619      	mov	r1, r3
 800b80e:	4610      	mov	r0, r2
 800b810:	f7fe fe29 	bl	800a466 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b818:	4b1b      	ldr	r3, [pc, #108]	; (800b888 <xTaskIncrementTick+0x168>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81e:	429a      	cmp	r2, r3
 800b820:	d3b8      	bcc.n	800b794 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b822:	2301      	movs	r3, #1
 800b824:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b826:	e7b5      	b.n	800b794 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b828:	4b17      	ldr	r3, [pc, #92]	; (800b888 <xTaskIncrementTick+0x168>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82e:	4915      	ldr	r1, [pc, #84]	; (800b884 <xTaskIncrementTick+0x164>)
 800b830:	4613      	mov	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4413      	add	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	440b      	add	r3, r1
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d901      	bls.n	800b844 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b840:	2301      	movs	r3, #1
 800b842:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b844:	4b11      	ldr	r3, [pc, #68]	; (800b88c <xTaskIncrementTick+0x16c>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d007      	beq.n	800b85c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b84c:	2301      	movs	r3, #1
 800b84e:	617b      	str	r3, [r7, #20]
 800b850:	e004      	b.n	800b85c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b852:	4b0f      	ldr	r3, [pc, #60]	; (800b890 <xTaskIncrementTick+0x170>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	3301      	adds	r3, #1
 800b858:	4a0d      	ldr	r2, [pc, #52]	; (800b890 <xTaskIncrementTick+0x170>)
 800b85a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b85c:	697b      	ldr	r3, [r7, #20]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3718      	adds	r7, #24
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20001610 	.word	0x20001610
 800b86c:	200015ec 	.word	0x200015ec
 800b870:	200015a0 	.word	0x200015a0
 800b874:	200015a4 	.word	0x200015a4
 800b878:	20001600 	.word	0x20001600
 800b87c:	20001608 	.word	0x20001608
 800b880:	200015f0 	.word	0x200015f0
 800b884:	20001118 	.word	0x20001118
 800b888:	20001114 	.word	0x20001114
 800b88c:	200015fc 	.word	0x200015fc
 800b890:	200015f8 	.word	0x200015f8

0800b894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b89a:	4b28      	ldr	r3, [pc, #160]	; (800b93c <vTaskSwitchContext+0xa8>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d003      	beq.n	800b8aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8a2:	4b27      	ldr	r3, [pc, #156]	; (800b940 <vTaskSwitchContext+0xac>)
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8a8:	e041      	b.n	800b92e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b8aa:	4b25      	ldr	r3, [pc, #148]	; (800b940 <vTaskSwitchContext+0xac>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8b0:	4b24      	ldr	r3, [pc, #144]	; (800b944 <vTaskSwitchContext+0xb0>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	60fb      	str	r3, [r7, #12]
 800b8b6:	e010      	b.n	800b8da <vTaskSwitchContext+0x46>
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10a      	bne.n	800b8d4 <vTaskSwitchContext+0x40>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	607b      	str	r3, [r7, #4]
}
 800b8d0:	bf00      	nop
 800b8d2:	e7fe      	b.n	800b8d2 <vTaskSwitchContext+0x3e>
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	60fb      	str	r3, [r7, #12]
 800b8da:	491b      	ldr	r1, [pc, #108]	; (800b948 <vTaskSwitchContext+0xb4>)
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	4413      	add	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	440b      	add	r3, r1
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d0e4      	beq.n	800b8b8 <vTaskSwitchContext+0x24>
 800b8ee:	68fa      	ldr	r2, [r7, #12]
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4413      	add	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	4a13      	ldr	r2, [pc, #76]	; (800b948 <vTaskSwitchContext+0xb4>)
 800b8fa:	4413      	add	r3, r2
 800b8fc:	60bb      	str	r3, [r7, #8]
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	605a      	str	r2, [r3, #4]
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	3308      	adds	r3, #8
 800b910:	429a      	cmp	r2, r3
 800b912:	d104      	bne.n	800b91e <vTaskSwitchContext+0x8a>
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	685a      	ldr	r2, [r3, #4]
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	605a      	str	r2, [r3, #4]
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	4a09      	ldr	r2, [pc, #36]	; (800b94c <vTaskSwitchContext+0xb8>)
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	4a06      	ldr	r2, [pc, #24]	; (800b944 <vTaskSwitchContext+0xb0>)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6013      	str	r3, [r2, #0]
}
 800b92e:	bf00      	nop
 800b930:	3714      	adds	r7, #20
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	20001610 	.word	0x20001610
 800b940:	200015fc 	.word	0x200015fc
 800b944:	200015f0 	.word	0x200015f0
 800b948:	20001118 	.word	0x20001118
 800b94c:	20001114 	.word	0x20001114

0800b950 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d10a      	bne.n	800b976 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b964:	f383 8811 	msr	BASEPRI, r3
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	60fb      	str	r3, [r7, #12]
}
 800b972:	bf00      	nop
 800b974:	e7fe      	b.n	800b974 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b976:	4b07      	ldr	r3, [pc, #28]	; (800b994 <vTaskPlaceOnEventList+0x44>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	3318      	adds	r3, #24
 800b97c:	4619      	mov	r1, r3
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f7fe fd95 	bl	800a4ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b984:	2101      	movs	r1, #1
 800b986:	6838      	ldr	r0, [r7, #0]
 800b988:	f000 fa7c 	bl	800be84 <prvAddCurrentTaskToDelayedList>
}
 800b98c:	bf00      	nop
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	20001114 	.word	0x20001114

0800b998 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b086      	sub	sp, #24
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10a      	bne.n	800b9c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	617b      	str	r3, [r7, #20]
}
 800b9bc:	bf00      	nop
 800b9be:	e7fe      	b.n	800b9be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9c0:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <vTaskPlaceOnEventListRestricted+0x54>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	3318      	adds	r3, #24
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f7fe fd4c 	bl	800a466 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b9d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b9da:	6879      	ldr	r1, [r7, #4]
 800b9dc:	68b8      	ldr	r0, [r7, #8]
 800b9de:	f000 fa51 	bl	800be84 <prvAddCurrentTaskToDelayedList>
	}
 800b9e2:	bf00      	nop
 800b9e4:	3718      	adds	r7, #24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	20001114 	.word	0x20001114

0800b9f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10a      	bne.n	800ba1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ba06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0a:	f383 8811 	msr	BASEPRI, r3
 800ba0e:	f3bf 8f6f 	isb	sy
 800ba12:	f3bf 8f4f 	dsb	sy
 800ba16:	60fb      	str	r3, [r7, #12]
}
 800ba18:	bf00      	nop
 800ba1a:	e7fe      	b.n	800ba1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	3318      	adds	r3, #24
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fe fd7d 	bl	800a520 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba26:	4b1e      	ldr	r3, [pc, #120]	; (800baa0 <xTaskRemoveFromEventList+0xb0>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d11d      	bne.n	800ba6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	3304      	adds	r3, #4
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fe fd74 	bl	800a520 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba3c:	4b19      	ldr	r3, [pc, #100]	; (800baa4 <xTaskRemoveFromEventList+0xb4>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d903      	bls.n	800ba4c <xTaskRemoveFromEventList+0x5c>
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba48:	4a16      	ldr	r2, [pc, #88]	; (800baa4 <xTaskRemoveFromEventList+0xb4>)
 800ba4a:	6013      	str	r3, [r2, #0]
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba50:	4613      	mov	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4413      	add	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4a13      	ldr	r2, [pc, #76]	; (800baa8 <xTaskRemoveFromEventList+0xb8>)
 800ba5a:	441a      	add	r2, r3
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	3304      	adds	r3, #4
 800ba60:	4619      	mov	r1, r3
 800ba62:	4610      	mov	r0, r2
 800ba64:	f7fe fcff 	bl	800a466 <vListInsertEnd>
 800ba68:	e005      	b.n	800ba76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	3318      	adds	r3, #24
 800ba6e:	4619      	mov	r1, r3
 800ba70:	480e      	ldr	r0, [pc, #56]	; (800baac <xTaskRemoveFromEventList+0xbc>)
 800ba72:	f7fe fcf8 	bl	800a466 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba7a:	4b0d      	ldr	r3, [pc, #52]	; (800bab0 <xTaskRemoveFromEventList+0xc0>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d905      	bls.n	800ba90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba84:	2301      	movs	r3, #1
 800ba86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba88:	4b0a      	ldr	r3, [pc, #40]	; (800bab4 <xTaskRemoveFromEventList+0xc4>)
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	e001      	b.n	800ba94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ba90:	2300      	movs	r3, #0
 800ba92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba94:	697b      	ldr	r3, [r7, #20]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3718      	adds	r7, #24
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	20001610 	.word	0x20001610
 800baa4:	200015f0 	.word	0x200015f0
 800baa8:	20001118 	.word	0x20001118
 800baac:	200015a8 	.word	0x200015a8
 800bab0:	20001114 	.word	0x20001114
 800bab4:	200015fc 	.word	0x200015fc

0800bab8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bac0:	4b06      	ldr	r3, [pc, #24]	; (800badc <vTaskInternalSetTimeOutState+0x24>)
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bac8:	4b05      	ldr	r3, [pc, #20]	; (800bae0 <vTaskInternalSetTimeOutState+0x28>)
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	605a      	str	r2, [r3, #4]
}
 800bad0:	bf00      	nop
 800bad2:	370c      	adds	r7, #12
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr
 800badc:	20001600 	.word	0x20001600
 800bae0:	200015ec 	.word	0x200015ec

0800bae4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b088      	sub	sp, #32
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10a      	bne.n	800bb0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800baf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	613b      	str	r3, [r7, #16]
}
 800bb06:	bf00      	nop
 800bb08:	e7fe      	b.n	800bb08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d10a      	bne.n	800bb26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb14:	f383 8811 	msr	BASEPRI, r3
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	60fb      	str	r3, [r7, #12]
}
 800bb22:	bf00      	nop
 800bb24:	e7fe      	b.n	800bb24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bb26:	f000 fe7d 	bl	800c824 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb2a:	4b1d      	ldr	r3, [pc, #116]	; (800bba0 <xTaskCheckForTimeOut+0xbc>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	69ba      	ldr	r2, [r7, #24]
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb42:	d102      	bne.n	800bb4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb44:	2300      	movs	r3, #0
 800bb46:	61fb      	str	r3, [r7, #28]
 800bb48:	e023      	b.n	800bb92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	4b15      	ldr	r3, [pc, #84]	; (800bba4 <xTaskCheckForTimeOut+0xc0>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d007      	beq.n	800bb66 <xTaskCheckForTimeOut+0x82>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	69ba      	ldr	r2, [r7, #24]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d302      	bcc.n	800bb66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb60:	2301      	movs	r3, #1
 800bb62:	61fb      	str	r3, [r7, #28]
 800bb64:	e015      	b.n	800bb92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	697a      	ldr	r2, [r7, #20]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d20b      	bcs.n	800bb88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	1ad2      	subs	r2, r2, r3
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f7ff ff9b 	bl	800bab8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb82:	2300      	movs	r3, #0
 800bb84:	61fb      	str	r3, [r7, #28]
 800bb86:	e004      	b.n	800bb92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb92:	f000 fe77 	bl	800c884 <vPortExitCritical>

	return xReturn;
 800bb96:	69fb      	ldr	r3, [r7, #28]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3720      	adds	r7, #32
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	200015ec 	.word	0x200015ec
 800bba4:	20001600 	.word	0x20001600

0800bba8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bba8:	b480      	push	{r7}
 800bbaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bbac:	4b03      	ldr	r3, [pc, #12]	; (800bbbc <vTaskMissedYield+0x14>)
 800bbae:	2201      	movs	r2, #1
 800bbb0:	601a      	str	r2, [r3, #0]
}
 800bbb2:	bf00      	nop
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	200015fc 	.word	0x200015fc

0800bbc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bbc8:	f000 f852 	bl	800bc70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bbcc:	4b06      	ldr	r3, [pc, #24]	; (800bbe8 <prvIdleTask+0x28>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d9f9      	bls.n	800bbc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bbd4:	4b05      	ldr	r3, [pc, #20]	; (800bbec <prvIdleTask+0x2c>)
 800bbd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbda:	601a      	str	r2, [r3, #0]
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bbe4:	e7f0      	b.n	800bbc8 <prvIdleTask+0x8>
 800bbe6:	bf00      	nop
 800bbe8:	20001118 	.word	0x20001118
 800bbec:	e000ed04 	.word	0xe000ed04

0800bbf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	607b      	str	r3, [r7, #4]
 800bbfa:	e00c      	b.n	800bc16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4413      	add	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4a12      	ldr	r2, [pc, #72]	; (800bc50 <prvInitialiseTaskLists+0x60>)
 800bc08:	4413      	add	r3, r2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fe fbfe 	bl	800a40c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3301      	adds	r3, #1
 800bc14:	607b      	str	r3, [r7, #4]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b37      	cmp	r3, #55	; 0x37
 800bc1a:	d9ef      	bls.n	800bbfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc1c:	480d      	ldr	r0, [pc, #52]	; (800bc54 <prvInitialiseTaskLists+0x64>)
 800bc1e:	f7fe fbf5 	bl	800a40c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc22:	480d      	ldr	r0, [pc, #52]	; (800bc58 <prvInitialiseTaskLists+0x68>)
 800bc24:	f7fe fbf2 	bl	800a40c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc28:	480c      	ldr	r0, [pc, #48]	; (800bc5c <prvInitialiseTaskLists+0x6c>)
 800bc2a:	f7fe fbef 	bl	800a40c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc2e:	480c      	ldr	r0, [pc, #48]	; (800bc60 <prvInitialiseTaskLists+0x70>)
 800bc30:	f7fe fbec 	bl	800a40c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc34:	480b      	ldr	r0, [pc, #44]	; (800bc64 <prvInitialiseTaskLists+0x74>)
 800bc36:	f7fe fbe9 	bl	800a40c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc3a:	4b0b      	ldr	r3, [pc, #44]	; (800bc68 <prvInitialiseTaskLists+0x78>)
 800bc3c:	4a05      	ldr	r2, [pc, #20]	; (800bc54 <prvInitialiseTaskLists+0x64>)
 800bc3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc40:	4b0a      	ldr	r3, [pc, #40]	; (800bc6c <prvInitialiseTaskLists+0x7c>)
 800bc42:	4a05      	ldr	r2, [pc, #20]	; (800bc58 <prvInitialiseTaskLists+0x68>)
 800bc44:	601a      	str	r2, [r3, #0]
}
 800bc46:	bf00      	nop
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	20001118 	.word	0x20001118
 800bc54:	20001578 	.word	0x20001578
 800bc58:	2000158c 	.word	0x2000158c
 800bc5c:	200015a8 	.word	0x200015a8
 800bc60:	200015bc 	.word	0x200015bc
 800bc64:	200015d4 	.word	0x200015d4
 800bc68:	200015a0 	.word	0x200015a0
 800bc6c:	200015a4 	.word	0x200015a4

0800bc70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc76:	e019      	b.n	800bcac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc78:	f000 fdd4 	bl	800c824 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc7c:	4b10      	ldr	r3, [pc, #64]	; (800bcc0 <prvCheckTasksWaitingTermination+0x50>)
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	3304      	adds	r3, #4
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fe fc49 	bl	800a520 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc8e:	4b0d      	ldr	r3, [pc, #52]	; (800bcc4 <prvCheckTasksWaitingTermination+0x54>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	3b01      	subs	r3, #1
 800bc94:	4a0b      	ldr	r2, [pc, #44]	; (800bcc4 <prvCheckTasksWaitingTermination+0x54>)
 800bc96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc98:	4b0b      	ldr	r3, [pc, #44]	; (800bcc8 <prvCheckTasksWaitingTermination+0x58>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	4a0a      	ldr	r2, [pc, #40]	; (800bcc8 <prvCheckTasksWaitingTermination+0x58>)
 800bca0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bca2:	f000 fdef 	bl	800c884 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 f810 	bl	800bccc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcac:	4b06      	ldr	r3, [pc, #24]	; (800bcc8 <prvCheckTasksWaitingTermination+0x58>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d1e1      	bne.n	800bc78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bcb4:	bf00      	nop
 800bcb6:	bf00      	nop
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	200015bc 	.word	0x200015bc
 800bcc4:	200015e8 	.word	0x200015e8
 800bcc8:	200015d0 	.word	0x200015d0

0800bccc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d108      	bne.n	800bcf0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce2:	4618      	mov	r0, r3
 800bce4:	f000 ff8c 	bl	800cc00 <vPortFree>
				vPortFree( pxTCB );
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 ff89 	bl	800cc00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bcee:	e018      	b.n	800bd22 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d103      	bne.n	800bd02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 ff80 	bl	800cc00 <vPortFree>
	}
 800bd00:	e00f      	b.n	800bd22 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd08:	2b02      	cmp	r3, #2
 800bd0a:	d00a      	beq.n	800bd22 <prvDeleteTCB+0x56>
	__asm volatile
 800bd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd10:	f383 8811 	msr	BASEPRI, r3
 800bd14:	f3bf 8f6f 	isb	sy
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	60fb      	str	r3, [r7, #12]
}
 800bd1e:	bf00      	nop
 800bd20:	e7fe      	b.n	800bd20 <prvDeleteTCB+0x54>
	}
 800bd22:	bf00      	nop
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
	...

0800bd2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd32:	4b0c      	ldr	r3, [pc, #48]	; (800bd64 <prvResetNextTaskUnblockTime+0x38>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d104      	bne.n	800bd46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd3c:	4b0a      	ldr	r3, [pc, #40]	; (800bd68 <prvResetNextTaskUnblockTime+0x3c>)
 800bd3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd44:	e008      	b.n	800bd58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd46:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <prvResetNextTaskUnblockTime+0x38>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	4a04      	ldr	r2, [pc, #16]	; (800bd68 <prvResetNextTaskUnblockTime+0x3c>)
 800bd56:	6013      	str	r3, [r2, #0]
}
 800bd58:	bf00      	nop
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr
 800bd64:	200015a0 	.word	0x200015a0
 800bd68:	20001608 	.word	0x20001608

0800bd6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd72:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <xTaskGetSchedulerState+0x34>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d102      	bne.n	800bd80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	607b      	str	r3, [r7, #4]
 800bd7e:	e008      	b.n	800bd92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd80:	4b08      	ldr	r3, [pc, #32]	; (800bda4 <xTaskGetSchedulerState+0x38>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d102      	bne.n	800bd8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd88:	2302      	movs	r3, #2
 800bd8a:	607b      	str	r3, [r7, #4]
 800bd8c:	e001      	b.n	800bd92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd92:	687b      	ldr	r3, [r7, #4]
	}
 800bd94:	4618      	mov	r0, r3
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr
 800bda0:	200015f4 	.word	0x200015f4
 800bda4:	20001610 	.word	0x20001610

0800bda8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b086      	sub	sp, #24
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d056      	beq.n	800be6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bdbe:	4b2e      	ldr	r3, [pc, #184]	; (800be78 <xTaskPriorityDisinherit+0xd0>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	693a      	ldr	r2, [r7, #16]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d00a      	beq.n	800bdde <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdcc:	f383 8811 	msr	BASEPRI, r3
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	60fb      	str	r3, [r7, #12]
}
 800bdda:	bf00      	nop
 800bddc:	e7fe      	b.n	800bddc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d10a      	bne.n	800bdfc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdea:	f383 8811 	msr	BASEPRI, r3
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	60bb      	str	r3, [r7, #8]
}
 800bdf8:	bf00      	nop
 800bdfa:	e7fe      	b.n	800bdfa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be00:	1e5a      	subs	r2, r3, #1
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be0e:	429a      	cmp	r2, r3
 800be10:	d02c      	beq.n	800be6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be16:	2b00      	cmp	r3, #0
 800be18:	d128      	bne.n	800be6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	3304      	adds	r3, #4
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fe fb7e 	bl	800a520 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3c:	4b0f      	ldr	r3, [pc, #60]	; (800be7c <xTaskPriorityDisinherit+0xd4>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	429a      	cmp	r2, r3
 800be42:	d903      	bls.n	800be4c <xTaskPriorityDisinherit+0xa4>
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be48:	4a0c      	ldr	r2, [pc, #48]	; (800be7c <xTaskPriorityDisinherit+0xd4>)
 800be4a:	6013      	str	r3, [r2, #0]
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be50:	4613      	mov	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4a09      	ldr	r2, [pc, #36]	; (800be80 <xTaskPriorityDisinherit+0xd8>)
 800be5a:	441a      	add	r2, r3
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	3304      	adds	r3, #4
 800be60:	4619      	mov	r1, r3
 800be62:	4610      	mov	r0, r2
 800be64:	f7fe faff 	bl	800a466 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be68:	2301      	movs	r3, #1
 800be6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be6c:	697b      	ldr	r3, [r7, #20]
	}
 800be6e:	4618      	mov	r0, r3
 800be70:	3718      	adds	r7, #24
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	20001114 	.word	0x20001114
 800be7c:	200015f0 	.word	0x200015f0
 800be80:	20001118 	.word	0x20001118

0800be84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be8e:	4b21      	ldr	r3, [pc, #132]	; (800bf14 <prvAddCurrentTaskToDelayedList+0x90>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be94:	4b20      	ldr	r3, [pc, #128]	; (800bf18 <prvAddCurrentTaskToDelayedList+0x94>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	3304      	adds	r3, #4
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fe fb40 	bl	800a520 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bea6:	d10a      	bne.n	800bebe <prvAddCurrentTaskToDelayedList+0x3a>
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d007      	beq.n	800bebe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beae:	4b1a      	ldr	r3, [pc, #104]	; (800bf18 <prvAddCurrentTaskToDelayedList+0x94>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	3304      	adds	r3, #4
 800beb4:	4619      	mov	r1, r3
 800beb6:	4819      	ldr	r0, [pc, #100]	; (800bf1c <prvAddCurrentTaskToDelayedList+0x98>)
 800beb8:	f7fe fad5 	bl	800a466 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bebc:	e026      	b.n	800bf0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4413      	add	r3, r2
 800bec4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bec6:	4b14      	ldr	r3, [pc, #80]	; (800bf18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bece:	68ba      	ldr	r2, [r7, #8]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d209      	bcs.n	800beea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bed6:	4b12      	ldr	r3, [pc, #72]	; (800bf20 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	4b0f      	ldr	r3, [pc, #60]	; (800bf18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	3304      	adds	r3, #4
 800bee0:	4619      	mov	r1, r3
 800bee2:	4610      	mov	r0, r2
 800bee4:	f7fe fae3 	bl	800a4ae <vListInsert>
}
 800bee8:	e010      	b.n	800bf0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beea:	4b0e      	ldr	r3, [pc, #56]	; (800bf24 <prvAddCurrentTaskToDelayedList+0xa0>)
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	4b0a      	ldr	r3, [pc, #40]	; (800bf18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	3304      	adds	r3, #4
 800bef4:	4619      	mov	r1, r3
 800bef6:	4610      	mov	r0, r2
 800bef8:	f7fe fad9 	bl	800a4ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800befc:	4b0a      	ldr	r3, [pc, #40]	; (800bf28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d202      	bcs.n	800bf0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf06:	4a08      	ldr	r2, [pc, #32]	; (800bf28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	6013      	str	r3, [r2, #0]
}
 800bf0c:	bf00      	nop
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	200015ec 	.word	0x200015ec
 800bf18:	20001114 	.word	0x20001114
 800bf1c:	200015d4 	.word	0x200015d4
 800bf20:	200015a4 	.word	0x200015a4
 800bf24:	200015a0 	.word	0x200015a0
 800bf28:	20001608 	.word	0x20001608

0800bf2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b08a      	sub	sp, #40	; 0x28
 800bf30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf32:	2300      	movs	r3, #0
 800bf34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf36:	f000 fb07 	bl	800c548 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf3a:	4b1c      	ldr	r3, [pc, #112]	; (800bfac <xTimerCreateTimerTask+0x80>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d021      	beq.n	800bf86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf42:	2300      	movs	r3, #0
 800bf44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf46:	2300      	movs	r3, #0
 800bf48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf4a:	1d3a      	adds	r2, r7, #4
 800bf4c:	f107 0108 	add.w	r1, r7, #8
 800bf50:	f107 030c 	add.w	r3, r7, #12
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fe fa3f 	bl	800a3d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf5a:	6879      	ldr	r1, [r7, #4]
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	9202      	str	r2, [sp, #8]
 800bf62:	9301      	str	r3, [sp, #4]
 800bf64:	2302      	movs	r3, #2
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	2300      	movs	r3, #0
 800bf6a:	460a      	mov	r2, r1
 800bf6c:	4910      	ldr	r1, [pc, #64]	; (800bfb0 <xTimerCreateTimerTask+0x84>)
 800bf6e:	4811      	ldr	r0, [pc, #68]	; (800bfb4 <xTimerCreateTimerTask+0x88>)
 800bf70:	f7ff f8de 	bl	800b130 <xTaskCreateStatic>
 800bf74:	4603      	mov	r3, r0
 800bf76:	4a10      	ldr	r2, [pc, #64]	; (800bfb8 <xTimerCreateTimerTask+0x8c>)
 800bf78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bf7a:	4b0f      	ldr	r3, [pc, #60]	; (800bfb8 <xTimerCreateTimerTask+0x8c>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bf82:	2301      	movs	r3, #1
 800bf84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10a      	bne.n	800bfa2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	613b      	str	r3, [r7, #16]
}
 800bf9e:	bf00      	nop
 800bfa0:	e7fe      	b.n	800bfa0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bfa2:	697b      	ldr	r3, [r7, #20]
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3718      	adds	r7, #24
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	20001644 	.word	0x20001644
 800bfb0:	0800fc6c 	.word	0x0800fc6c
 800bfb4:	0800c0f1 	.word	0x0800c0f1
 800bfb8:	20001648 	.word	0x20001648

0800bfbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b08a      	sub	sp, #40	; 0x28
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
 800bfc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10a      	bne.n	800bfea <xTimerGenericCommand+0x2e>
	__asm volatile
 800bfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd8:	f383 8811 	msr	BASEPRI, r3
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	623b      	str	r3, [r7, #32]
}
 800bfe6:	bf00      	nop
 800bfe8:	e7fe      	b.n	800bfe8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bfea:	4b1a      	ldr	r3, [pc, #104]	; (800c054 <xTimerGenericCommand+0x98>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d02a      	beq.n	800c048 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	2b05      	cmp	r3, #5
 800c002:	dc18      	bgt.n	800c036 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c004:	f7ff feb2 	bl	800bd6c <xTaskGetSchedulerState>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b02      	cmp	r3, #2
 800c00c:	d109      	bne.n	800c022 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c00e:	4b11      	ldr	r3, [pc, #68]	; (800c054 <xTimerGenericCommand+0x98>)
 800c010:	6818      	ldr	r0, [r3, #0]
 800c012:	f107 0110 	add.w	r1, r7, #16
 800c016:	2300      	movs	r3, #0
 800c018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c01a:	f7fe fc53 	bl	800a8c4 <xQueueGenericSend>
 800c01e:	6278      	str	r0, [r7, #36]	; 0x24
 800c020:	e012      	b.n	800c048 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c022:	4b0c      	ldr	r3, [pc, #48]	; (800c054 <xTimerGenericCommand+0x98>)
 800c024:	6818      	ldr	r0, [r3, #0]
 800c026:	f107 0110 	add.w	r1, r7, #16
 800c02a:	2300      	movs	r3, #0
 800c02c:	2200      	movs	r2, #0
 800c02e:	f7fe fc49 	bl	800a8c4 <xQueueGenericSend>
 800c032:	6278      	str	r0, [r7, #36]	; 0x24
 800c034:	e008      	b.n	800c048 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c036:	4b07      	ldr	r3, [pc, #28]	; (800c054 <xTimerGenericCommand+0x98>)
 800c038:	6818      	ldr	r0, [r3, #0]
 800c03a:	f107 0110 	add.w	r1, r7, #16
 800c03e:	2300      	movs	r3, #0
 800c040:	683a      	ldr	r2, [r7, #0]
 800c042:	f7fe fd3d 	bl	800aac0 <xQueueGenericSendFromISR>
 800c046:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3728      	adds	r7, #40	; 0x28
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	20001644 	.word	0x20001644

0800c058 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b088      	sub	sp, #32
 800c05c:	af02      	add	r7, sp, #8
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c062:	4b22      	ldr	r3, [pc, #136]	; (800c0ec <prvProcessExpiredTimer+0x94>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	3304      	adds	r3, #4
 800c070:	4618      	mov	r0, r3
 800c072:	f7fe fa55 	bl	800a520 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c07c:	f003 0304 	and.w	r3, r3, #4
 800c080:	2b00      	cmp	r3, #0
 800c082:	d022      	beq.n	800c0ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	699a      	ldr	r2, [r3, #24]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	18d1      	adds	r1, r2, r3
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	683a      	ldr	r2, [r7, #0]
 800c090:	6978      	ldr	r0, [r7, #20]
 800c092:	f000 f8d1 	bl	800c238 <prvInsertTimerInActiveList>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d01f      	beq.n	800c0dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c09c:	2300      	movs	r3, #0
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	6978      	ldr	r0, [r7, #20]
 800c0a8:	f7ff ff88 	bl	800bfbc <xTimerGenericCommand>
 800c0ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d113      	bne.n	800c0dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b8:	f383 8811 	msr	BASEPRI, r3
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	60fb      	str	r3, [r7, #12]
}
 800c0c6:	bf00      	nop
 800c0c8:	e7fe      	b.n	800c0c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0d0:	f023 0301 	bic.w	r3, r3, #1
 800c0d4:	b2da      	uxtb	r2, r3
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	6978      	ldr	r0, [r7, #20]
 800c0e2:	4798      	blx	r3
}
 800c0e4:	bf00      	nop
 800c0e6:	3718      	adds	r7, #24
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	2000163c 	.word	0x2000163c

0800c0f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c0f8:	f107 0308 	add.w	r3, r7, #8
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 f857 	bl	800c1b0 <prvGetNextExpireTime>
 800c102:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	4619      	mov	r1, r3
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	f000 f803 	bl	800c114 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c10e:	f000 f8d5 	bl	800c2bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c112:	e7f1      	b.n	800c0f8 <prvTimerTask+0x8>

0800c114 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c11e:	f7ff fa43 	bl	800b5a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c122:	f107 0308 	add.w	r3, r7, #8
 800c126:	4618      	mov	r0, r3
 800c128:	f000 f866 	bl	800c1f8 <prvSampleTimeNow>
 800c12c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d130      	bne.n	800c196 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10a      	bne.n	800c150 <prvProcessTimerOrBlockTask+0x3c>
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d806      	bhi.n	800c150 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c142:	f7ff fa3f 	bl	800b5c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c146:	68f9      	ldr	r1, [r7, #12]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7ff ff85 	bl	800c058 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c14e:	e024      	b.n	800c19a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d008      	beq.n	800c168 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c156:	4b13      	ldr	r3, [pc, #76]	; (800c1a4 <prvProcessTimerOrBlockTask+0x90>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d101      	bne.n	800c164 <prvProcessTimerOrBlockTask+0x50>
 800c160:	2301      	movs	r3, #1
 800c162:	e000      	b.n	800c166 <prvProcessTimerOrBlockTask+0x52>
 800c164:	2300      	movs	r3, #0
 800c166:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c168:	4b0f      	ldr	r3, [pc, #60]	; (800c1a8 <prvProcessTimerOrBlockTask+0x94>)
 800c16a:	6818      	ldr	r0, [r3, #0]
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	1ad3      	subs	r3, r2, r3
 800c172:	683a      	ldr	r2, [r7, #0]
 800c174:	4619      	mov	r1, r3
 800c176:	f7fe ffa7 	bl	800b0c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c17a:	f7ff fa23 	bl	800b5c4 <xTaskResumeAll>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d10a      	bne.n	800c19a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c184:	4b09      	ldr	r3, [pc, #36]	; (800c1ac <prvProcessTimerOrBlockTask+0x98>)
 800c186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c18a:	601a      	str	r2, [r3, #0]
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	f3bf 8f6f 	isb	sy
}
 800c194:	e001      	b.n	800c19a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c196:	f7ff fa15 	bl	800b5c4 <xTaskResumeAll>
}
 800c19a:	bf00      	nop
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	20001640 	.word	0x20001640
 800c1a8:	20001644 	.word	0x20001644
 800c1ac:	e000ed04 	.word	0xe000ed04

0800c1b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c1b8:	4b0e      	ldr	r3, [pc, #56]	; (800c1f4 <prvGetNextExpireTime+0x44>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <prvGetNextExpireTime+0x16>
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	e000      	b.n	800c1c8 <prvGetNextExpireTime+0x18>
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d105      	bne.n	800c1e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1d4:	4b07      	ldr	r3, [pc, #28]	; (800c1f4 <prvGetNextExpireTime+0x44>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	60fb      	str	r3, [r7, #12]
 800c1de:	e001      	b.n	800c1e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3714      	adds	r7, #20
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	2000163c 	.word	0x2000163c

0800c1f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c200:	f7ff fa7e 	bl	800b700 <xTaskGetTickCount>
 800c204:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c206:	4b0b      	ldr	r3, [pc, #44]	; (800c234 <prvSampleTimeNow+0x3c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68fa      	ldr	r2, [r7, #12]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d205      	bcs.n	800c21c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c210:	f000 f936 	bl	800c480 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2201      	movs	r2, #1
 800c218:	601a      	str	r2, [r3, #0]
 800c21a:	e002      	b.n	800c222 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c222:	4a04      	ldr	r2, [pc, #16]	; (800c234 <prvSampleTimeNow+0x3c>)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c228:	68fb      	ldr	r3, [r7, #12]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	2000164c 	.word	0x2000164c

0800c238 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
 800c244:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c246:	2300      	movs	r3, #0
 800c248:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c256:	68ba      	ldr	r2, [r7, #8]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d812      	bhi.n	800c284 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	1ad2      	subs	r2, r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	699b      	ldr	r3, [r3, #24]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d302      	bcc.n	800c272 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c26c:	2301      	movs	r3, #1
 800c26e:	617b      	str	r3, [r7, #20]
 800c270:	e01b      	b.n	800c2aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c272:	4b10      	ldr	r3, [pc, #64]	; (800c2b4 <prvInsertTimerInActiveList+0x7c>)
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3304      	adds	r3, #4
 800c27a:	4619      	mov	r1, r3
 800c27c:	4610      	mov	r0, r2
 800c27e:	f7fe f916 	bl	800a4ae <vListInsert>
 800c282:	e012      	b.n	800c2aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d206      	bcs.n	800c29a <prvInsertTimerInActiveList+0x62>
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	429a      	cmp	r2, r3
 800c292:	d302      	bcc.n	800c29a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c294:	2301      	movs	r3, #1
 800c296:	617b      	str	r3, [r7, #20]
 800c298:	e007      	b.n	800c2aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c29a:	4b07      	ldr	r3, [pc, #28]	; (800c2b8 <prvInsertTimerInActiveList+0x80>)
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	4610      	mov	r0, r2
 800c2a6:	f7fe f902 	bl	800a4ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c2aa:	697b      	ldr	r3, [r7, #20]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3718      	adds	r7, #24
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	20001640 	.word	0x20001640
 800c2b8:	2000163c 	.word	0x2000163c

0800c2bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b08e      	sub	sp, #56	; 0x38
 800c2c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2c2:	e0ca      	b.n	800c45a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	da18      	bge.n	800c2fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c2ca:	1d3b      	adds	r3, r7, #4
 800c2cc:	3304      	adds	r3, #4
 800c2ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10a      	bne.n	800c2ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2da:	f383 8811 	msr	BASEPRI, r3
 800c2de:	f3bf 8f6f 	isb	sy
 800c2e2:	f3bf 8f4f 	dsb	sy
 800c2e6:	61fb      	str	r3, [r7, #28]
}
 800c2e8:	bf00      	nop
 800c2ea:	e7fe      	b.n	800c2ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2f2:	6850      	ldr	r0, [r2, #4]
 800c2f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2f6:	6892      	ldr	r2, [r2, #8]
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f2c0 80ab 	blt.w	800c45a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30a:	695b      	ldr	r3, [r3, #20]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d004      	beq.n	800c31a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	3304      	adds	r3, #4
 800c314:	4618      	mov	r0, r3
 800c316:	f7fe f903 	bl	800a520 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c31a:	463b      	mov	r3, r7
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7ff ff6b 	bl	800c1f8 <prvSampleTimeNow>
 800c322:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b09      	cmp	r3, #9
 800c328:	f200 8096 	bhi.w	800c458 <prvProcessReceivedCommands+0x19c>
 800c32c:	a201      	add	r2, pc, #4	; (adr r2, 800c334 <prvProcessReceivedCommands+0x78>)
 800c32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c332:	bf00      	nop
 800c334:	0800c35d 	.word	0x0800c35d
 800c338:	0800c35d 	.word	0x0800c35d
 800c33c:	0800c35d 	.word	0x0800c35d
 800c340:	0800c3d1 	.word	0x0800c3d1
 800c344:	0800c3e5 	.word	0x0800c3e5
 800c348:	0800c42f 	.word	0x0800c42f
 800c34c:	0800c35d 	.word	0x0800c35d
 800c350:	0800c35d 	.word	0x0800c35d
 800c354:	0800c3d1 	.word	0x0800c3d1
 800c358:	0800c3e5 	.word	0x0800c3e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c362:	f043 0301 	orr.w	r3, r3, #1
 800c366:	b2da      	uxtb	r2, r3
 800c368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c36e:	68ba      	ldr	r2, [r7, #8]
 800c370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	18d1      	adds	r1, r2, r3
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c37a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c37c:	f7ff ff5c 	bl	800c238 <prvInsertTimerInActiveList>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d069      	beq.n	800c45a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c388:	6a1b      	ldr	r3, [r3, #32]
 800c38a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c38c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c394:	f003 0304 	and.w	r3, r3, #4
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d05e      	beq.n	800c45a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	699b      	ldr	r3, [r3, #24]
 800c3a2:	441a      	add	r2, r3
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9300      	str	r3, [sp, #0]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ae:	f7ff fe05 	bl	800bfbc <xTimerGenericCommand>
 800c3b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c3b4:	6a3b      	ldr	r3, [r7, #32]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d14f      	bne.n	800c45a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3be:	f383 8811 	msr	BASEPRI, r3
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	61bb      	str	r3, [r7, #24]
}
 800c3cc:	bf00      	nop
 800c3ce:	e7fe      	b.n	800c3ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3d6:	f023 0301 	bic.w	r3, r3, #1
 800c3da:	b2da      	uxtb	r2, r3
 800c3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c3e2:	e03a      	b.n	800c45a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ea:	f043 0301 	orr.w	r3, r3, #1
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c3f6:	68ba      	ldr	r2, [r7, #8]
 800c3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fe:	699b      	ldr	r3, [r3, #24]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10a      	bne.n	800c41a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c408:	f383 8811 	msr	BASEPRI, r3
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	617b      	str	r3, [r7, #20]
}
 800c416:	bf00      	nop
 800c418:	e7fe      	b.n	800c418 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41c:	699a      	ldr	r2, [r3, #24]
 800c41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c420:	18d1      	adds	r1, r2, r3
 800c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c428:	f7ff ff06 	bl	800c238 <prvInsertTimerInActiveList>
					break;
 800c42c:	e015      	b.n	800c45a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c434:	f003 0302 	and.w	r3, r3, #2
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d103      	bne.n	800c444 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c43e:	f000 fbdf 	bl	800cc00 <vPortFree>
 800c442:	e00a      	b.n	800c45a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c44a:	f023 0301 	bic.w	r3, r3, #1
 800c44e:	b2da      	uxtb	r2, r3
 800c450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c456:	e000      	b.n	800c45a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c458:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c45a:	4b08      	ldr	r3, [pc, #32]	; (800c47c <prvProcessReceivedCommands+0x1c0>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	1d39      	adds	r1, r7, #4
 800c460:	2200      	movs	r2, #0
 800c462:	4618      	mov	r0, r3
 800c464:	f7fe fbc8 	bl	800abf8 <xQueueReceive>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f47f af2a 	bne.w	800c2c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c470:	bf00      	nop
 800c472:	bf00      	nop
 800c474:	3730      	adds	r7, #48	; 0x30
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	20001644 	.word	0x20001644

0800c480 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b088      	sub	sp, #32
 800c484:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c486:	e048      	b.n	800c51a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c488:	4b2d      	ldr	r3, [pc, #180]	; (800c540 <prvSwitchTimerLists+0xc0>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c492:	4b2b      	ldr	r3, [pc, #172]	; (800c540 <prvSwitchTimerLists+0xc0>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	3304      	adds	r3, #4
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7fe f83d 	bl	800a520 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6a1b      	ldr	r3, [r3, #32]
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4b4:	f003 0304 	and.w	r3, r3, #4
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d02e      	beq.n	800c51a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	699b      	ldr	r3, [r3, #24]
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c4c6:	68ba      	ldr	r2, [r7, #8]
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d90e      	bls.n	800c4ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	68ba      	ldr	r2, [r7, #8]
 800c4d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4da:	4b19      	ldr	r3, [pc, #100]	; (800c540 <prvSwitchTimerLists+0xc0>)
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	4610      	mov	r0, r2
 800c4e6:	f7fd ffe2 	bl	800a4ae <vListInsert>
 800c4ea:	e016      	b.n	800c51a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	9300      	str	r3, [sp, #0]
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	693a      	ldr	r2, [r7, #16]
 800c4f4:	2100      	movs	r1, #0
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	f7ff fd60 	bl	800bfbc <xTimerGenericCommand>
 800c4fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d10a      	bne.n	800c51a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	603b      	str	r3, [r7, #0]
}
 800c516:	bf00      	nop
 800c518:	e7fe      	b.n	800c518 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c51a:	4b09      	ldr	r3, [pc, #36]	; (800c540 <prvSwitchTimerLists+0xc0>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1b1      	bne.n	800c488 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c524:	4b06      	ldr	r3, [pc, #24]	; (800c540 <prvSwitchTimerLists+0xc0>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c52a:	4b06      	ldr	r3, [pc, #24]	; (800c544 <prvSwitchTimerLists+0xc4>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a04      	ldr	r2, [pc, #16]	; (800c540 <prvSwitchTimerLists+0xc0>)
 800c530:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c532:	4a04      	ldr	r2, [pc, #16]	; (800c544 <prvSwitchTimerLists+0xc4>)
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	6013      	str	r3, [r2, #0]
}
 800c538:	bf00      	nop
 800c53a:	3718      	adds	r7, #24
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	2000163c 	.word	0x2000163c
 800c544:	20001640 	.word	0x20001640

0800c548 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c54e:	f000 f969 	bl	800c824 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c552:	4b15      	ldr	r3, [pc, #84]	; (800c5a8 <prvCheckForValidListAndQueue+0x60>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d120      	bne.n	800c59c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c55a:	4814      	ldr	r0, [pc, #80]	; (800c5ac <prvCheckForValidListAndQueue+0x64>)
 800c55c:	f7fd ff56 	bl	800a40c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c560:	4813      	ldr	r0, [pc, #76]	; (800c5b0 <prvCheckForValidListAndQueue+0x68>)
 800c562:	f7fd ff53 	bl	800a40c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c566:	4b13      	ldr	r3, [pc, #76]	; (800c5b4 <prvCheckForValidListAndQueue+0x6c>)
 800c568:	4a10      	ldr	r2, [pc, #64]	; (800c5ac <prvCheckForValidListAndQueue+0x64>)
 800c56a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c56c:	4b12      	ldr	r3, [pc, #72]	; (800c5b8 <prvCheckForValidListAndQueue+0x70>)
 800c56e:	4a10      	ldr	r2, [pc, #64]	; (800c5b0 <prvCheckForValidListAndQueue+0x68>)
 800c570:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c572:	2300      	movs	r3, #0
 800c574:	9300      	str	r3, [sp, #0]
 800c576:	4b11      	ldr	r3, [pc, #68]	; (800c5bc <prvCheckForValidListAndQueue+0x74>)
 800c578:	4a11      	ldr	r2, [pc, #68]	; (800c5c0 <prvCheckForValidListAndQueue+0x78>)
 800c57a:	2110      	movs	r1, #16
 800c57c:	200a      	movs	r0, #10
 800c57e:	f7fe f861 	bl	800a644 <xQueueGenericCreateStatic>
 800c582:	4603      	mov	r3, r0
 800c584:	4a08      	ldr	r2, [pc, #32]	; (800c5a8 <prvCheckForValidListAndQueue+0x60>)
 800c586:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c588:	4b07      	ldr	r3, [pc, #28]	; (800c5a8 <prvCheckForValidListAndQueue+0x60>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d005      	beq.n	800c59c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c590:	4b05      	ldr	r3, [pc, #20]	; (800c5a8 <prvCheckForValidListAndQueue+0x60>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	490b      	ldr	r1, [pc, #44]	; (800c5c4 <prvCheckForValidListAndQueue+0x7c>)
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe fd42 	bl	800b020 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c59c:	f000 f972 	bl	800c884 <vPortExitCritical>
}
 800c5a0:	bf00      	nop
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20001644 	.word	0x20001644
 800c5ac:	20001614 	.word	0x20001614
 800c5b0:	20001628 	.word	0x20001628
 800c5b4:	2000163c 	.word	0x2000163c
 800c5b8:	20001640 	.word	0x20001640
 800c5bc:	200016f0 	.word	0x200016f0
 800c5c0:	20001650 	.word	0x20001650
 800c5c4:	0800fc74 	.word	0x0800fc74

0800c5c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	3b04      	subs	r3, #4
 800c5d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c5e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	3b04      	subs	r3, #4
 800c5e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	f023 0201 	bic.w	r2, r3, #1
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	3b04      	subs	r3, #4
 800c5f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c5f8:	4a0c      	ldr	r2, [pc, #48]	; (800c62c <pxPortInitialiseStack+0x64>)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	3b14      	subs	r3, #20
 800c602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	3b04      	subs	r3, #4
 800c60e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f06f 0202 	mvn.w	r2, #2
 800c616:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	3b20      	subs	r3, #32
 800c61c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c61e:	68fb      	ldr	r3, [r7, #12]
}
 800c620:	4618      	mov	r0, r3
 800c622:	3714      	adds	r7, #20
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr
 800c62c:	0800c631 	.word	0x0800c631

0800c630 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c630:	b480      	push	{r7}
 800c632:	b085      	sub	sp, #20
 800c634:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c636:	2300      	movs	r3, #0
 800c638:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c63a:	4b12      	ldr	r3, [pc, #72]	; (800c684 <prvTaskExitError+0x54>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c642:	d00a      	beq.n	800c65a <prvTaskExitError+0x2a>
	__asm volatile
 800c644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c648:	f383 8811 	msr	BASEPRI, r3
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f3bf 8f4f 	dsb	sy
 800c654:	60fb      	str	r3, [r7, #12]
}
 800c656:	bf00      	nop
 800c658:	e7fe      	b.n	800c658 <prvTaskExitError+0x28>
	__asm volatile
 800c65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65e:	f383 8811 	msr	BASEPRI, r3
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	f3bf 8f4f 	dsb	sy
 800c66a:	60bb      	str	r3, [r7, #8]
}
 800c66c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c66e:	bf00      	nop
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d0fc      	beq.n	800c670 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c676:	bf00      	nop
 800c678:	bf00      	nop
 800c67a:	3714      	adds	r7, #20
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr
 800c684:	2000002c 	.word	0x2000002c
	...

0800c690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c690:	4b07      	ldr	r3, [pc, #28]	; (800c6b0 <pxCurrentTCBConst2>)
 800c692:	6819      	ldr	r1, [r3, #0]
 800c694:	6808      	ldr	r0, [r1, #0]
 800c696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69a:	f380 8809 	msr	PSP, r0
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f04f 0000 	mov.w	r0, #0
 800c6a6:	f380 8811 	msr	BASEPRI, r0
 800c6aa:	4770      	bx	lr
 800c6ac:	f3af 8000 	nop.w

0800c6b0 <pxCurrentTCBConst2>:
 800c6b0:	20001114 	.word	0x20001114
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c6b4:	bf00      	nop
 800c6b6:	bf00      	nop

0800c6b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c6b8:	4808      	ldr	r0, [pc, #32]	; (800c6dc <prvPortStartFirstTask+0x24>)
 800c6ba:	6800      	ldr	r0, [r0, #0]
 800c6bc:	6800      	ldr	r0, [r0, #0]
 800c6be:	f380 8808 	msr	MSP, r0
 800c6c2:	f04f 0000 	mov.w	r0, #0
 800c6c6:	f380 8814 	msr	CONTROL, r0
 800c6ca:	b662      	cpsie	i
 800c6cc:	b661      	cpsie	f
 800c6ce:	f3bf 8f4f 	dsb	sy
 800c6d2:	f3bf 8f6f 	isb	sy
 800c6d6:	df00      	svc	0
 800c6d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c6da:	bf00      	nop
 800c6dc:	e000ed08 	.word	0xe000ed08

0800c6e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c6e6:	4b46      	ldr	r3, [pc, #280]	; (800c800 <xPortStartScheduler+0x120>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a46      	ldr	r2, [pc, #280]	; (800c804 <xPortStartScheduler+0x124>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d10a      	bne.n	800c706 <xPortStartScheduler+0x26>
	__asm volatile
 800c6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f4:	f383 8811 	msr	BASEPRI, r3
 800c6f8:	f3bf 8f6f 	isb	sy
 800c6fc:	f3bf 8f4f 	dsb	sy
 800c700:	613b      	str	r3, [r7, #16]
}
 800c702:	bf00      	nop
 800c704:	e7fe      	b.n	800c704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c706:	4b3e      	ldr	r3, [pc, #248]	; (800c800 <xPortStartScheduler+0x120>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a3f      	ldr	r2, [pc, #252]	; (800c808 <xPortStartScheduler+0x128>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d10a      	bne.n	800c726 <xPortStartScheduler+0x46>
	__asm volatile
 800c710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c714:	f383 8811 	msr	BASEPRI, r3
 800c718:	f3bf 8f6f 	isb	sy
 800c71c:	f3bf 8f4f 	dsb	sy
 800c720:	60fb      	str	r3, [r7, #12]
}
 800c722:	bf00      	nop
 800c724:	e7fe      	b.n	800c724 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c726:	4b39      	ldr	r3, [pc, #228]	; (800c80c <xPortStartScheduler+0x12c>)
 800c728:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	22ff      	movs	r2, #255	; 0xff
 800c736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c740:	78fb      	ldrb	r3, [r7, #3]
 800c742:	b2db      	uxtb	r3, r3
 800c744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c748:	b2da      	uxtb	r2, r3
 800c74a:	4b31      	ldr	r3, [pc, #196]	; (800c810 <xPortStartScheduler+0x130>)
 800c74c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c74e:	4b31      	ldr	r3, [pc, #196]	; (800c814 <xPortStartScheduler+0x134>)
 800c750:	2207      	movs	r2, #7
 800c752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c754:	e009      	b.n	800c76a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c756:	4b2f      	ldr	r3, [pc, #188]	; (800c814 <xPortStartScheduler+0x134>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	3b01      	subs	r3, #1
 800c75c:	4a2d      	ldr	r2, [pc, #180]	; (800c814 <xPortStartScheduler+0x134>)
 800c75e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c760:	78fb      	ldrb	r3, [r7, #3]
 800c762:	b2db      	uxtb	r3, r3
 800c764:	005b      	lsls	r3, r3, #1
 800c766:	b2db      	uxtb	r3, r3
 800c768:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c76a:	78fb      	ldrb	r3, [r7, #3]
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c772:	2b80      	cmp	r3, #128	; 0x80
 800c774:	d0ef      	beq.n	800c756 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c776:	4b27      	ldr	r3, [pc, #156]	; (800c814 <xPortStartScheduler+0x134>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f1c3 0307 	rsb	r3, r3, #7
 800c77e:	2b04      	cmp	r3, #4
 800c780:	d00a      	beq.n	800c798 <xPortStartScheduler+0xb8>
	__asm volatile
 800c782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	60bb      	str	r3, [r7, #8]
}
 800c794:	bf00      	nop
 800c796:	e7fe      	b.n	800c796 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c798:	4b1e      	ldr	r3, [pc, #120]	; (800c814 <xPortStartScheduler+0x134>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	021b      	lsls	r3, r3, #8
 800c79e:	4a1d      	ldr	r2, [pc, #116]	; (800c814 <xPortStartScheduler+0x134>)
 800c7a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7a2:	4b1c      	ldr	r3, [pc, #112]	; (800c814 <xPortStartScheduler+0x134>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c7aa:	4a1a      	ldr	r2, [pc, #104]	; (800c814 <xPortStartScheduler+0x134>)
 800c7ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7b6:	4b18      	ldr	r3, [pc, #96]	; (800c818 <xPortStartScheduler+0x138>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a17      	ldr	r2, [pc, #92]	; (800c818 <xPortStartScheduler+0x138>)
 800c7bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c7c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c7c2:	4b15      	ldr	r3, [pc, #84]	; (800c818 <xPortStartScheduler+0x138>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a14      	ldr	r2, [pc, #80]	; (800c818 <xPortStartScheduler+0x138>)
 800c7c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c7cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c7ce:	f000 f8dd 	bl	800c98c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c7d2:	4b12      	ldr	r3, [pc, #72]	; (800c81c <xPortStartScheduler+0x13c>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c7d8:	f000 f8fc 	bl	800c9d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c7dc:	4b10      	ldr	r3, [pc, #64]	; (800c820 <xPortStartScheduler+0x140>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a0f      	ldr	r2, [pc, #60]	; (800c820 <xPortStartScheduler+0x140>)
 800c7e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c7e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c7e8:	f7ff ff66 	bl	800c6b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c7ec:	f7ff f852 	bl	800b894 <vTaskSwitchContext>
	prvTaskExitError();
 800c7f0:	f7ff ff1e 	bl	800c630 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3718      	adds	r7, #24
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	e000ed00 	.word	0xe000ed00
 800c804:	410fc271 	.word	0x410fc271
 800c808:	410fc270 	.word	0x410fc270
 800c80c:	e000e400 	.word	0xe000e400
 800c810:	20001740 	.word	0x20001740
 800c814:	20001744 	.word	0x20001744
 800c818:	e000ed20 	.word	0xe000ed20
 800c81c:	2000002c 	.word	0x2000002c
 800c820:	e000ef34 	.word	0xe000ef34

0800c824 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
	__asm volatile
 800c82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	607b      	str	r3, [r7, #4]
}
 800c83c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c83e:	4b0f      	ldr	r3, [pc, #60]	; (800c87c <vPortEnterCritical+0x58>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	3301      	adds	r3, #1
 800c844:	4a0d      	ldr	r2, [pc, #52]	; (800c87c <vPortEnterCritical+0x58>)
 800c846:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c848:	4b0c      	ldr	r3, [pc, #48]	; (800c87c <vPortEnterCritical+0x58>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d10f      	bne.n	800c870 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c850:	4b0b      	ldr	r3, [pc, #44]	; (800c880 <vPortEnterCritical+0x5c>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	b2db      	uxtb	r3, r3
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00a      	beq.n	800c870 <vPortEnterCritical+0x4c>
	__asm volatile
 800c85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85e:	f383 8811 	msr	BASEPRI, r3
 800c862:	f3bf 8f6f 	isb	sy
 800c866:	f3bf 8f4f 	dsb	sy
 800c86a:	603b      	str	r3, [r7, #0]
}
 800c86c:	bf00      	nop
 800c86e:	e7fe      	b.n	800c86e <vPortEnterCritical+0x4a>
	}
}
 800c870:	bf00      	nop
 800c872:	370c      	adds	r7, #12
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr
 800c87c:	2000002c 	.word	0x2000002c
 800c880:	e000ed04 	.word	0xe000ed04

0800c884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c88a:	4b12      	ldr	r3, [pc, #72]	; (800c8d4 <vPortExitCritical+0x50>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d10a      	bne.n	800c8a8 <vPortExitCritical+0x24>
	__asm volatile
 800c892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c896:	f383 8811 	msr	BASEPRI, r3
 800c89a:	f3bf 8f6f 	isb	sy
 800c89e:	f3bf 8f4f 	dsb	sy
 800c8a2:	607b      	str	r3, [r7, #4]
}
 800c8a4:	bf00      	nop
 800c8a6:	e7fe      	b.n	800c8a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8a8:	4b0a      	ldr	r3, [pc, #40]	; (800c8d4 <vPortExitCritical+0x50>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	4a09      	ldr	r2, [pc, #36]	; (800c8d4 <vPortExitCritical+0x50>)
 800c8b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c8b2:	4b08      	ldr	r3, [pc, #32]	; (800c8d4 <vPortExitCritical+0x50>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d105      	bne.n	800c8c6 <vPortExitCritical+0x42>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	f383 8811 	msr	BASEPRI, r3
}
 800c8c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c8c6:	bf00      	nop
 800c8c8:	370c      	adds	r7, #12
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop
 800c8d4:	2000002c 	.word	0x2000002c
	...

0800c8e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c8e0:	f3ef 8009 	mrs	r0, PSP
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	4b15      	ldr	r3, [pc, #84]	; (800c940 <pxCurrentTCBConst>)
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	f01e 0f10 	tst.w	lr, #16
 800c8f0:	bf08      	it	eq
 800c8f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c8f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fa:	6010      	str	r0, [r2, #0]
 800c8fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c900:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c904:	f380 8811 	msr	BASEPRI, r0
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f7fe ffc0 	bl	800b894 <vTaskSwitchContext>
 800c914:	f04f 0000 	mov.w	r0, #0
 800c918:	f380 8811 	msr	BASEPRI, r0
 800c91c:	bc09      	pop	{r0, r3}
 800c91e:	6819      	ldr	r1, [r3, #0]
 800c920:	6808      	ldr	r0, [r1, #0]
 800c922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c926:	f01e 0f10 	tst.w	lr, #16
 800c92a:	bf08      	it	eq
 800c92c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c930:	f380 8809 	msr	PSP, r0
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	f3af 8000 	nop.w

0800c940 <pxCurrentTCBConst>:
 800c940:	20001114 	.word	0x20001114
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c944:	bf00      	nop
 800c946:	bf00      	nop

0800c948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	607b      	str	r3, [r7, #4]
}
 800c960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c962:	f7fe fedd 	bl	800b720 <xTaskIncrementTick>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d003      	beq.n	800c974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c96c:	4b06      	ldr	r3, [pc, #24]	; (800c988 <xPortSysTickHandler+0x40>)
 800c96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c972:	601a      	str	r2, [r3, #0]
 800c974:	2300      	movs	r3, #0
 800c976:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	f383 8811 	msr	BASEPRI, r3
}
 800c97e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c980:	bf00      	nop
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	e000ed04 	.word	0xe000ed04

0800c98c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c98c:	b480      	push	{r7}
 800c98e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c990:	4b0b      	ldr	r3, [pc, #44]	; (800c9c0 <vPortSetupTimerInterrupt+0x34>)
 800c992:	2200      	movs	r2, #0
 800c994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c996:	4b0b      	ldr	r3, [pc, #44]	; (800c9c4 <vPortSetupTimerInterrupt+0x38>)
 800c998:	2200      	movs	r2, #0
 800c99a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c99c:	4b0a      	ldr	r3, [pc, #40]	; (800c9c8 <vPortSetupTimerInterrupt+0x3c>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a0a      	ldr	r2, [pc, #40]	; (800c9cc <vPortSetupTimerInterrupt+0x40>)
 800c9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9a6:	099b      	lsrs	r3, r3, #6
 800c9a8:	4a09      	ldr	r2, [pc, #36]	; (800c9d0 <vPortSetupTimerInterrupt+0x44>)
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9ae:	4b04      	ldr	r3, [pc, #16]	; (800c9c0 <vPortSetupTimerInterrupt+0x34>)
 800c9b0:	2207      	movs	r2, #7
 800c9b2:	601a      	str	r2, [r3, #0]
}
 800c9b4:	bf00      	nop
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	e000e010 	.word	0xe000e010
 800c9c4:	e000e018 	.word	0xe000e018
 800c9c8:	20000020 	.word	0x20000020
 800c9cc:	10624dd3 	.word	0x10624dd3
 800c9d0:	e000e014 	.word	0xe000e014

0800c9d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c9d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c9e4 <vPortEnableVFP+0x10>
 800c9d8:	6801      	ldr	r1, [r0, #0]
 800c9da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c9de:	6001      	str	r1, [r0, #0]
 800c9e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c9e2:	bf00      	nop
 800c9e4:	e000ed88 	.word	0xe000ed88

0800c9e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c9ee:	f3ef 8305 	mrs	r3, IPSR
 800c9f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2b0f      	cmp	r3, #15
 800c9f8:	d914      	bls.n	800ca24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c9fa:	4a17      	ldr	r2, [pc, #92]	; (800ca58 <vPortValidateInterruptPriority+0x70>)
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	4413      	add	r3, r2
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca04:	4b15      	ldr	r3, [pc, #84]	; (800ca5c <vPortValidateInterruptPriority+0x74>)
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	7afa      	ldrb	r2, [r7, #11]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d20a      	bcs.n	800ca24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ca0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	607b      	str	r3, [r7, #4]
}
 800ca20:	bf00      	nop
 800ca22:	e7fe      	b.n	800ca22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca24:	4b0e      	ldr	r3, [pc, #56]	; (800ca60 <vPortValidateInterruptPriority+0x78>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca2c:	4b0d      	ldr	r3, [pc, #52]	; (800ca64 <vPortValidateInterruptPriority+0x7c>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d90a      	bls.n	800ca4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ca34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	603b      	str	r3, [r7, #0]
}
 800ca46:	bf00      	nop
 800ca48:	e7fe      	b.n	800ca48 <vPortValidateInterruptPriority+0x60>
	}
 800ca4a:	bf00      	nop
 800ca4c:	3714      	adds	r7, #20
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
 800ca56:	bf00      	nop
 800ca58:	e000e3f0 	.word	0xe000e3f0
 800ca5c:	20001740 	.word	0x20001740
 800ca60:	e000ed0c 	.word	0xe000ed0c
 800ca64:	20001744 	.word	0x20001744

0800ca68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b08a      	sub	sp, #40	; 0x28
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca70:	2300      	movs	r3, #0
 800ca72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca74:	f7fe fd98 	bl	800b5a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca78:	4b5b      	ldr	r3, [pc, #364]	; (800cbe8 <pvPortMalloc+0x180>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d101      	bne.n	800ca84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca80:	f000 f920 	bl	800ccc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca84:	4b59      	ldr	r3, [pc, #356]	; (800cbec <pvPortMalloc+0x184>)
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f040 8093 	bne.w	800cbb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d01d      	beq.n	800cad4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ca98:	2208      	movs	r2, #8
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f003 0307 	and.w	r3, r3, #7
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d014      	beq.n	800cad4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f023 0307 	bic.w	r3, r3, #7
 800cab0:	3308      	adds	r3, #8
 800cab2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f003 0307 	and.w	r3, r3, #7
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00a      	beq.n	800cad4 <pvPortMalloc+0x6c>
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	617b      	str	r3, [r7, #20]
}
 800cad0:	bf00      	nop
 800cad2:	e7fe      	b.n	800cad2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d06e      	beq.n	800cbb8 <pvPortMalloc+0x150>
 800cada:	4b45      	ldr	r3, [pc, #276]	; (800cbf0 <pvPortMalloc+0x188>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d869      	bhi.n	800cbb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cae4:	4b43      	ldr	r3, [pc, #268]	; (800cbf4 <pvPortMalloc+0x18c>)
 800cae6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cae8:	4b42      	ldr	r3, [pc, #264]	; (800cbf4 <pvPortMalloc+0x18c>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800caee:	e004      	b.n	800cafa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800caf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800caf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d903      	bls.n	800cb0c <pvPortMalloc+0xa4>
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1f1      	bne.n	800caf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb0c:	4b36      	ldr	r3, [pc, #216]	; (800cbe8 <pvPortMalloc+0x180>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d050      	beq.n	800cbb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb16:	6a3b      	ldr	r3, [r7, #32]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2208      	movs	r2, #8
 800cb1c:	4413      	add	r3, r2
 800cb1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	6a3b      	ldr	r3, [r7, #32]
 800cb26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	685a      	ldr	r2, [r3, #4]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	1ad2      	subs	r2, r2, r3
 800cb30:	2308      	movs	r3, #8
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d91f      	bls.n	800cb78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	f003 0307 	and.w	r3, r3, #7
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00a      	beq.n	800cb60 <pvPortMalloc+0xf8>
	__asm volatile
 800cb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4e:	f383 8811 	msr	BASEPRI, r3
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	f3bf 8f4f 	dsb	sy
 800cb5a:	613b      	str	r3, [r7, #16]
}
 800cb5c:	bf00      	nop
 800cb5e:	e7fe      	b.n	800cb5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb62:	685a      	ldr	r2, [r3, #4]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	1ad2      	subs	r2, r2, r3
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb72:	69b8      	ldr	r0, [r7, #24]
 800cb74:	f000 f908 	bl	800cd88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb78:	4b1d      	ldr	r3, [pc, #116]	; (800cbf0 <pvPortMalloc+0x188>)
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	1ad3      	subs	r3, r2, r3
 800cb82:	4a1b      	ldr	r2, [pc, #108]	; (800cbf0 <pvPortMalloc+0x188>)
 800cb84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb86:	4b1a      	ldr	r3, [pc, #104]	; (800cbf0 <pvPortMalloc+0x188>)
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	4b1b      	ldr	r3, [pc, #108]	; (800cbf8 <pvPortMalloc+0x190>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d203      	bcs.n	800cb9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb92:	4b17      	ldr	r3, [pc, #92]	; (800cbf0 <pvPortMalloc+0x188>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a18      	ldr	r2, [pc, #96]	; (800cbf8 <pvPortMalloc+0x190>)
 800cb98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9c:	685a      	ldr	r2, [r3, #4]
 800cb9e:	4b13      	ldr	r3, [pc, #76]	; (800cbec <pvPortMalloc+0x184>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	431a      	orrs	r2, r3
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbaa:	2200      	movs	r2, #0
 800cbac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cbae:	4b13      	ldr	r3, [pc, #76]	; (800cbfc <pvPortMalloc+0x194>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	4a11      	ldr	r2, [pc, #68]	; (800cbfc <pvPortMalloc+0x194>)
 800cbb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cbb8:	f7fe fd04 	bl	800b5c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	f003 0307 	and.w	r3, r3, #7
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00a      	beq.n	800cbdc <pvPortMalloc+0x174>
	__asm volatile
 800cbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	60fb      	str	r3, [r7, #12]
}
 800cbd8:	bf00      	nop
 800cbda:	e7fe      	b.n	800cbda <pvPortMalloc+0x172>
	return pvReturn;
 800cbdc:	69fb      	ldr	r3, [r7, #28]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3728      	adds	r7, #40	; 0x28
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	20005350 	.word	0x20005350
 800cbec:	20005364 	.word	0x20005364
 800cbf0:	20005354 	.word	0x20005354
 800cbf4:	20005348 	.word	0x20005348
 800cbf8:	20005358 	.word	0x20005358
 800cbfc:	2000535c 	.word	0x2000535c

0800cc00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d04d      	beq.n	800ccae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc12:	2308      	movs	r3, #8
 800cc14:	425b      	negs	r3, r3
 800cc16:	697a      	ldr	r2, [r7, #20]
 800cc18:	4413      	add	r3, r2
 800cc1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	685a      	ldr	r2, [r3, #4]
 800cc24:	4b24      	ldr	r3, [pc, #144]	; (800ccb8 <vPortFree+0xb8>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4013      	ands	r3, r2
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d10a      	bne.n	800cc44 <vPortFree+0x44>
	__asm volatile
 800cc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	60fb      	str	r3, [r7, #12]
}
 800cc40:	bf00      	nop
 800cc42:	e7fe      	b.n	800cc42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00a      	beq.n	800cc62 <vPortFree+0x62>
	__asm volatile
 800cc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc50:	f383 8811 	msr	BASEPRI, r3
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	f3bf 8f4f 	dsb	sy
 800cc5c:	60bb      	str	r3, [r7, #8]
}
 800cc5e:	bf00      	nop
 800cc60:	e7fe      	b.n	800cc60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	685a      	ldr	r2, [r3, #4]
 800cc66:	4b14      	ldr	r3, [pc, #80]	; (800ccb8 <vPortFree+0xb8>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d01e      	beq.n	800ccae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d11a      	bne.n	800ccae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	685a      	ldr	r2, [r3, #4]
 800cc7c:	4b0e      	ldr	r3, [pc, #56]	; (800ccb8 <vPortFree+0xb8>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	43db      	mvns	r3, r3
 800cc82:	401a      	ands	r2, r3
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc88:	f7fe fc8e 	bl	800b5a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	685a      	ldr	r2, [r3, #4]
 800cc90:	4b0a      	ldr	r3, [pc, #40]	; (800ccbc <vPortFree+0xbc>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4413      	add	r3, r2
 800cc96:	4a09      	ldr	r2, [pc, #36]	; (800ccbc <vPortFree+0xbc>)
 800cc98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc9a:	6938      	ldr	r0, [r7, #16]
 800cc9c:	f000 f874 	bl	800cd88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cca0:	4b07      	ldr	r3, [pc, #28]	; (800ccc0 <vPortFree+0xc0>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	3301      	adds	r3, #1
 800cca6:	4a06      	ldr	r2, [pc, #24]	; (800ccc0 <vPortFree+0xc0>)
 800cca8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ccaa:	f7fe fc8b 	bl	800b5c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ccae:	bf00      	nop
 800ccb0:	3718      	adds	r7, #24
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20005364 	.word	0x20005364
 800ccbc:	20005354 	.word	0x20005354
 800ccc0:	20005360 	.word	0x20005360

0800ccc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ccca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ccce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ccd0:	4b27      	ldr	r3, [pc, #156]	; (800cd70 <prvHeapInit+0xac>)
 800ccd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f003 0307 	and.w	r3, r3, #7
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00c      	beq.n	800ccf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	3307      	adds	r3, #7
 800cce2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f023 0307 	bic.w	r3, r3, #7
 800ccea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ccec:	68ba      	ldr	r2, [r7, #8]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	1ad3      	subs	r3, r2, r3
 800ccf2:	4a1f      	ldr	r2, [pc, #124]	; (800cd70 <prvHeapInit+0xac>)
 800ccf4:	4413      	add	r3, r2
 800ccf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ccfc:	4a1d      	ldr	r2, [pc, #116]	; (800cd74 <prvHeapInit+0xb0>)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd02:	4b1c      	ldr	r3, [pc, #112]	; (800cd74 <prvHeapInit+0xb0>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	68ba      	ldr	r2, [r7, #8]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd10:	2208      	movs	r2, #8
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	1a9b      	subs	r3, r3, r2
 800cd16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f023 0307 	bic.w	r3, r3, #7
 800cd1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	4a15      	ldr	r2, [pc, #84]	; (800cd78 <prvHeapInit+0xb4>)
 800cd24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd26:	4b14      	ldr	r3, [pc, #80]	; (800cd78 <prvHeapInit+0xb4>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd2e:	4b12      	ldr	r3, [pc, #72]	; (800cd78 <prvHeapInit+0xb4>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2200      	movs	r2, #0
 800cd34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	1ad2      	subs	r2, r2, r3
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd44:	4b0c      	ldr	r3, [pc, #48]	; (800cd78 <prvHeapInit+0xb4>)
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	4a0a      	ldr	r2, [pc, #40]	; (800cd7c <prvHeapInit+0xb8>)
 800cd52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	4a09      	ldr	r2, [pc, #36]	; (800cd80 <prvHeapInit+0xbc>)
 800cd5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd5c:	4b09      	ldr	r3, [pc, #36]	; (800cd84 <prvHeapInit+0xc0>)
 800cd5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cd62:	601a      	str	r2, [r3, #0]
}
 800cd64:	bf00      	nop
 800cd66:	3714      	adds	r7, #20
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr
 800cd70:	20001748 	.word	0x20001748
 800cd74:	20005348 	.word	0x20005348
 800cd78:	20005350 	.word	0x20005350
 800cd7c:	20005358 	.word	0x20005358
 800cd80:	20005354 	.word	0x20005354
 800cd84:	20005364 	.word	0x20005364

0800cd88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd90:	4b28      	ldr	r3, [pc, #160]	; (800ce34 <prvInsertBlockIntoFreeList+0xac>)
 800cd92:	60fb      	str	r3, [r7, #12]
 800cd94:	e002      	b.n	800cd9c <prvInsertBlockIntoFreeList+0x14>
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	60fb      	str	r3, [r7, #12]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d8f7      	bhi.n	800cd96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	68ba      	ldr	r2, [r7, #8]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d108      	bne.n	800cdca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	685a      	ldr	r2, [r3, #4]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	441a      	add	r2, r3
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	441a      	add	r2, r3
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d118      	bne.n	800ce10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	4b15      	ldr	r3, [pc, #84]	; (800ce38 <prvInsertBlockIntoFreeList+0xb0>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d00d      	beq.n	800ce06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	685a      	ldr	r2, [r3, #4]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	441a      	add	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	601a      	str	r2, [r3, #0]
 800ce04:	e008      	b.n	800ce18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce06:	4b0c      	ldr	r3, [pc, #48]	; (800ce38 <prvInsertBlockIntoFreeList+0xb0>)
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	601a      	str	r2, [r3, #0]
 800ce0e:	e003      	b.n	800ce18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d002      	beq.n	800ce26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce26:	bf00      	nop
 800ce28:	3714      	adds	r7, #20
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	20005348 	.word	0x20005348
 800ce38:	20005350 	.word	0x20005350

0800ce3c <__cvt>:
 800ce3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce40:	ec55 4b10 	vmov	r4, r5, d0
 800ce44:	2d00      	cmp	r5, #0
 800ce46:	460e      	mov	r6, r1
 800ce48:	4619      	mov	r1, r3
 800ce4a:	462b      	mov	r3, r5
 800ce4c:	bfbb      	ittet	lt
 800ce4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ce52:	461d      	movlt	r5, r3
 800ce54:	2300      	movge	r3, #0
 800ce56:	232d      	movlt	r3, #45	; 0x2d
 800ce58:	700b      	strb	r3, [r1, #0]
 800ce5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ce60:	4691      	mov	r9, r2
 800ce62:	f023 0820 	bic.w	r8, r3, #32
 800ce66:	bfbc      	itt	lt
 800ce68:	4622      	movlt	r2, r4
 800ce6a:	4614      	movlt	r4, r2
 800ce6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce70:	d005      	beq.n	800ce7e <__cvt+0x42>
 800ce72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ce76:	d100      	bne.n	800ce7a <__cvt+0x3e>
 800ce78:	3601      	adds	r6, #1
 800ce7a:	2102      	movs	r1, #2
 800ce7c:	e000      	b.n	800ce80 <__cvt+0x44>
 800ce7e:	2103      	movs	r1, #3
 800ce80:	ab03      	add	r3, sp, #12
 800ce82:	9301      	str	r3, [sp, #4]
 800ce84:	ab02      	add	r3, sp, #8
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	ec45 4b10 	vmov	d0, r4, r5
 800ce8c:	4653      	mov	r3, sl
 800ce8e:	4632      	mov	r2, r6
 800ce90:	f000 fdee 	bl	800da70 <_dtoa_r>
 800ce94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ce98:	4607      	mov	r7, r0
 800ce9a:	d102      	bne.n	800cea2 <__cvt+0x66>
 800ce9c:	f019 0f01 	tst.w	r9, #1
 800cea0:	d022      	beq.n	800cee8 <__cvt+0xac>
 800cea2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cea6:	eb07 0906 	add.w	r9, r7, r6
 800ceaa:	d110      	bne.n	800cece <__cvt+0x92>
 800ceac:	783b      	ldrb	r3, [r7, #0]
 800ceae:	2b30      	cmp	r3, #48	; 0x30
 800ceb0:	d10a      	bne.n	800cec8 <__cvt+0x8c>
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	4629      	mov	r1, r5
 800ceba:	f7f3 fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 800cebe:	b918      	cbnz	r0, 800cec8 <__cvt+0x8c>
 800cec0:	f1c6 0601 	rsb	r6, r6, #1
 800cec4:	f8ca 6000 	str.w	r6, [sl]
 800cec8:	f8da 3000 	ldr.w	r3, [sl]
 800cecc:	4499      	add	r9, r3
 800cece:	2200      	movs	r2, #0
 800ced0:	2300      	movs	r3, #0
 800ced2:	4620      	mov	r0, r4
 800ced4:	4629      	mov	r1, r5
 800ced6:	f7f3 fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 800ceda:	b108      	cbz	r0, 800cee0 <__cvt+0xa4>
 800cedc:	f8cd 900c 	str.w	r9, [sp, #12]
 800cee0:	2230      	movs	r2, #48	; 0x30
 800cee2:	9b03      	ldr	r3, [sp, #12]
 800cee4:	454b      	cmp	r3, r9
 800cee6:	d307      	bcc.n	800cef8 <__cvt+0xbc>
 800cee8:	9b03      	ldr	r3, [sp, #12]
 800ceea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ceec:	1bdb      	subs	r3, r3, r7
 800ceee:	4638      	mov	r0, r7
 800cef0:	6013      	str	r3, [r2, #0]
 800cef2:	b004      	add	sp, #16
 800cef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef8:	1c59      	adds	r1, r3, #1
 800cefa:	9103      	str	r1, [sp, #12]
 800cefc:	701a      	strb	r2, [r3, #0]
 800cefe:	e7f0      	b.n	800cee2 <__cvt+0xa6>

0800cf00 <__exponent>:
 800cf00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf02:	4603      	mov	r3, r0
 800cf04:	2900      	cmp	r1, #0
 800cf06:	bfb8      	it	lt
 800cf08:	4249      	neglt	r1, r1
 800cf0a:	f803 2b02 	strb.w	r2, [r3], #2
 800cf0e:	bfb4      	ite	lt
 800cf10:	222d      	movlt	r2, #45	; 0x2d
 800cf12:	222b      	movge	r2, #43	; 0x2b
 800cf14:	2909      	cmp	r1, #9
 800cf16:	7042      	strb	r2, [r0, #1]
 800cf18:	dd2a      	ble.n	800cf70 <__exponent+0x70>
 800cf1a:	f10d 0207 	add.w	r2, sp, #7
 800cf1e:	4617      	mov	r7, r2
 800cf20:	260a      	movs	r6, #10
 800cf22:	4694      	mov	ip, r2
 800cf24:	fb91 f5f6 	sdiv	r5, r1, r6
 800cf28:	fb06 1415 	mls	r4, r6, r5, r1
 800cf2c:	3430      	adds	r4, #48	; 0x30
 800cf2e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cf32:	460c      	mov	r4, r1
 800cf34:	2c63      	cmp	r4, #99	; 0x63
 800cf36:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800cf3a:	4629      	mov	r1, r5
 800cf3c:	dcf1      	bgt.n	800cf22 <__exponent+0x22>
 800cf3e:	3130      	adds	r1, #48	; 0x30
 800cf40:	f1ac 0402 	sub.w	r4, ip, #2
 800cf44:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cf48:	1c41      	adds	r1, r0, #1
 800cf4a:	4622      	mov	r2, r4
 800cf4c:	42ba      	cmp	r2, r7
 800cf4e:	d30a      	bcc.n	800cf66 <__exponent+0x66>
 800cf50:	f10d 0209 	add.w	r2, sp, #9
 800cf54:	eba2 020c 	sub.w	r2, r2, ip
 800cf58:	42bc      	cmp	r4, r7
 800cf5a:	bf88      	it	hi
 800cf5c:	2200      	movhi	r2, #0
 800cf5e:	4413      	add	r3, r2
 800cf60:	1a18      	subs	r0, r3, r0
 800cf62:	b003      	add	sp, #12
 800cf64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf66:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cf6a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cf6e:	e7ed      	b.n	800cf4c <__exponent+0x4c>
 800cf70:	2330      	movs	r3, #48	; 0x30
 800cf72:	3130      	adds	r1, #48	; 0x30
 800cf74:	7083      	strb	r3, [r0, #2]
 800cf76:	70c1      	strb	r1, [r0, #3]
 800cf78:	1d03      	adds	r3, r0, #4
 800cf7a:	e7f1      	b.n	800cf60 <__exponent+0x60>

0800cf7c <_printf_float>:
 800cf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf80:	ed2d 8b02 	vpush	{d8}
 800cf84:	b08d      	sub	sp, #52	; 0x34
 800cf86:	460c      	mov	r4, r1
 800cf88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cf8c:	4616      	mov	r6, r2
 800cf8e:	461f      	mov	r7, r3
 800cf90:	4605      	mov	r5, r0
 800cf92:	f000 fca3 	bl	800d8dc <_localeconv_r>
 800cf96:	f8d0 a000 	ldr.w	sl, [r0]
 800cf9a:	4650      	mov	r0, sl
 800cf9c:	f7f3 f968 	bl	8000270 <strlen>
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	930a      	str	r3, [sp, #40]	; 0x28
 800cfa4:	6823      	ldr	r3, [r4, #0]
 800cfa6:	9305      	str	r3, [sp, #20]
 800cfa8:	f8d8 3000 	ldr.w	r3, [r8]
 800cfac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cfb0:	3307      	adds	r3, #7
 800cfb2:	f023 0307 	bic.w	r3, r3, #7
 800cfb6:	f103 0208 	add.w	r2, r3, #8
 800cfba:	f8c8 2000 	str.w	r2, [r8]
 800cfbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cfc6:	9307      	str	r3, [sp, #28]
 800cfc8:	f8cd 8018 	str.w	r8, [sp, #24]
 800cfcc:	ee08 0a10 	vmov	s16, r0
 800cfd0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cfd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfd8:	4b9e      	ldr	r3, [pc, #632]	; (800d254 <_printf_float+0x2d8>)
 800cfda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfde:	f7f3 fda5 	bl	8000b2c <__aeabi_dcmpun>
 800cfe2:	bb88      	cbnz	r0, 800d048 <_printf_float+0xcc>
 800cfe4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfe8:	4b9a      	ldr	r3, [pc, #616]	; (800d254 <_printf_float+0x2d8>)
 800cfea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfee:	f7f3 fd7f 	bl	8000af0 <__aeabi_dcmple>
 800cff2:	bb48      	cbnz	r0, 800d048 <_printf_float+0xcc>
 800cff4:	2200      	movs	r2, #0
 800cff6:	2300      	movs	r3, #0
 800cff8:	4640      	mov	r0, r8
 800cffa:	4649      	mov	r1, r9
 800cffc:	f7f3 fd6e 	bl	8000adc <__aeabi_dcmplt>
 800d000:	b110      	cbz	r0, 800d008 <_printf_float+0x8c>
 800d002:	232d      	movs	r3, #45	; 0x2d
 800d004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d008:	4a93      	ldr	r2, [pc, #588]	; (800d258 <_printf_float+0x2dc>)
 800d00a:	4b94      	ldr	r3, [pc, #592]	; (800d25c <_printf_float+0x2e0>)
 800d00c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d010:	bf94      	ite	ls
 800d012:	4690      	movls	r8, r2
 800d014:	4698      	movhi	r8, r3
 800d016:	2303      	movs	r3, #3
 800d018:	6123      	str	r3, [r4, #16]
 800d01a:	9b05      	ldr	r3, [sp, #20]
 800d01c:	f023 0304 	bic.w	r3, r3, #4
 800d020:	6023      	str	r3, [r4, #0]
 800d022:	f04f 0900 	mov.w	r9, #0
 800d026:	9700      	str	r7, [sp, #0]
 800d028:	4633      	mov	r3, r6
 800d02a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d02c:	4621      	mov	r1, r4
 800d02e:	4628      	mov	r0, r5
 800d030:	f000 f9da 	bl	800d3e8 <_printf_common>
 800d034:	3001      	adds	r0, #1
 800d036:	f040 8090 	bne.w	800d15a <_printf_float+0x1de>
 800d03a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d03e:	b00d      	add	sp, #52	; 0x34
 800d040:	ecbd 8b02 	vpop	{d8}
 800d044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d048:	4642      	mov	r2, r8
 800d04a:	464b      	mov	r3, r9
 800d04c:	4640      	mov	r0, r8
 800d04e:	4649      	mov	r1, r9
 800d050:	f7f3 fd6c 	bl	8000b2c <__aeabi_dcmpun>
 800d054:	b140      	cbz	r0, 800d068 <_printf_float+0xec>
 800d056:	464b      	mov	r3, r9
 800d058:	2b00      	cmp	r3, #0
 800d05a:	bfbc      	itt	lt
 800d05c:	232d      	movlt	r3, #45	; 0x2d
 800d05e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d062:	4a7f      	ldr	r2, [pc, #508]	; (800d260 <_printf_float+0x2e4>)
 800d064:	4b7f      	ldr	r3, [pc, #508]	; (800d264 <_printf_float+0x2e8>)
 800d066:	e7d1      	b.n	800d00c <_printf_float+0x90>
 800d068:	6863      	ldr	r3, [r4, #4]
 800d06a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d06e:	9206      	str	r2, [sp, #24]
 800d070:	1c5a      	adds	r2, r3, #1
 800d072:	d13f      	bne.n	800d0f4 <_printf_float+0x178>
 800d074:	2306      	movs	r3, #6
 800d076:	6063      	str	r3, [r4, #4]
 800d078:	9b05      	ldr	r3, [sp, #20]
 800d07a:	6861      	ldr	r1, [r4, #4]
 800d07c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d080:	2300      	movs	r3, #0
 800d082:	9303      	str	r3, [sp, #12]
 800d084:	ab0a      	add	r3, sp, #40	; 0x28
 800d086:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d08a:	ab09      	add	r3, sp, #36	; 0x24
 800d08c:	ec49 8b10 	vmov	d0, r8, r9
 800d090:	9300      	str	r3, [sp, #0]
 800d092:	6022      	str	r2, [r4, #0]
 800d094:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d098:	4628      	mov	r0, r5
 800d09a:	f7ff fecf 	bl	800ce3c <__cvt>
 800d09e:	9b06      	ldr	r3, [sp, #24]
 800d0a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0a2:	2b47      	cmp	r3, #71	; 0x47
 800d0a4:	4680      	mov	r8, r0
 800d0a6:	d108      	bne.n	800d0ba <_printf_float+0x13e>
 800d0a8:	1cc8      	adds	r0, r1, #3
 800d0aa:	db02      	blt.n	800d0b2 <_printf_float+0x136>
 800d0ac:	6863      	ldr	r3, [r4, #4]
 800d0ae:	4299      	cmp	r1, r3
 800d0b0:	dd41      	ble.n	800d136 <_printf_float+0x1ba>
 800d0b2:	f1ab 0302 	sub.w	r3, fp, #2
 800d0b6:	fa5f fb83 	uxtb.w	fp, r3
 800d0ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d0be:	d820      	bhi.n	800d102 <_printf_float+0x186>
 800d0c0:	3901      	subs	r1, #1
 800d0c2:	465a      	mov	r2, fp
 800d0c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d0c8:	9109      	str	r1, [sp, #36]	; 0x24
 800d0ca:	f7ff ff19 	bl	800cf00 <__exponent>
 800d0ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0d0:	1813      	adds	r3, r2, r0
 800d0d2:	2a01      	cmp	r2, #1
 800d0d4:	4681      	mov	r9, r0
 800d0d6:	6123      	str	r3, [r4, #16]
 800d0d8:	dc02      	bgt.n	800d0e0 <_printf_float+0x164>
 800d0da:	6822      	ldr	r2, [r4, #0]
 800d0dc:	07d2      	lsls	r2, r2, #31
 800d0de:	d501      	bpl.n	800d0e4 <_printf_float+0x168>
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	6123      	str	r3, [r4, #16]
 800d0e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d09c      	beq.n	800d026 <_printf_float+0xaa>
 800d0ec:	232d      	movs	r3, #45	; 0x2d
 800d0ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0f2:	e798      	b.n	800d026 <_printf_float+0xaa>
 800d0f4:	9a06      	ldr	r2, [sp, #24]
 800d0f6:	2a47      	cmp	r2, #71	; 0x47
 800d0f8:	d1be      	bne.n	800d078 <_printf_float+0xfc>
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d1bc      	bne.n	800d078 <_printf_float+0xfc>
 800d0fe:	2301      	movs	r3, #1
 800d100:	e7b9      	b.n	800d076 <_printf_float+0xfa>
 800d102:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d106:	d118      	bne.n	800d13a <_printf_float+0x1be>
 800d108:	2900      	cmp	r1, #0
 800d10a:	6863      	ldr	r3, [r4, #4]
 800d10c:	dd0b      	ble.n	800d126 <_printf_float+0x1aa>
 800d10e:	6121      	str	r1, [r4, #16]
 800d110:	b913      	cbnz	r3, 800d118 <_printf_float+0x19c>
 800d112:	6822      	ldr	r2, [r4, #0]
 800d114:	07d0      	lsls	r0, r2, #31
 800d116:	d502      	bpl.n	800d11e <_printf_float+0x1a2>
 800d118:	3301      	adds	r3, #1
 800d11a:	440b      	add	r3, r1
 800d11c:	6123      	str	r3, [r4, #16]
 800d11e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d120:	f04f 0900 	mov.w	r9, #0
 800d124:	e7de      	b.n	800d0e4 <_printf_float+0x168>
 800d126:	b913      	cbnz	r3, 800d12e <_printf_float+0x1b2>
 800d128:	6822      	ldr	r2, [r4, #0]
 800d12a:	07d2      	lsls	r2, r2, #31
 800d12c:	d501      	bpl.n	800d132 <_printf_float+0x1b6>
 800d12e:	3302      	adds	r3, #2
 800d130:	e7f4      	b.n	800d11c <_printf_float+0x1a0>
 800d132:	2301      	movs	r3, #1
 800d134:	e7f2      	b.n	800d11c <_printf_float+0x1a0>
 800d136:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d13c:	4299      	cmp	r1, r3
 800d13e:	db05      	blt.n	800d14c <_printf_float+0x1d0>
 800d140:	6823      	ldr	r3, [r4, #0]
 800d142:	6121      	str	r1, [r4, #16]
 800d144:	07d8      	lsls	r0, r3, #31
 800d146:	d5ea      	bpl.n	800d11e <_printf_float+0x1a2>
 800d148:	1c4b      	adds	r3, r1, #1
 800d14a:	e7e7      	b.n	800d11c <_printf_float+0x1a0>
 800d14c:	2900      	cmp	r1, #0
 800d14e:	bfd4      	ite	le
 800d150:	f1c1 0202 	rsble	r2, r1, #2
 800d154:	2201      	movgt	r2, #1
 800d156:	4413      	add	r3, r2
 800d158:	e7e0      	b.n	800d11c <_printf_float+0x1a0>
 800d15a:	6823      	ldr	r3, [r4, #0]
 800d15c:	055a      	lsls	r2, r3, #21
 800d15e:	d407      	bmi.n	800d170 <_printf_float+0x1f4>
 800d160:	6923      	ldr	r3, [r4, #16]
 800d162:	4642      	mov	r2, r8
 800d164:	4631      	mov	r1, r6
 800d166:	4628      	mov	r0, r5
 800d168:	47b8      	blx	r7
 800d16a:	3001      	adds	r0, #1
 800d16c:	d12c      	bne.n	800d1c8 <_printf_float+0x24c>
 800d16e:	e764      	b.n	800d03a <_printf_float+0xbe>
 800d170:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d174:	f240 80e0 	bls.w	800d338 <_printf_float+0x3bc>
 800d178:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d17c:	2200      	movs	r2, #0
 800d17e:	2300      	movs	r3, #0
 800d180:	f7f3 fca2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d184:	2800      	cmp	r0, #0
 800d186:	d034      	beq.n	800d1f2 <_printf_float+0x276>
 800d188:	4a37      	ldr	r2, [pc, #220]	; (800d268 <_printf_float+0x2ec>)
 800d18a:	2301      	movs	r3, #1
 800d18c:	4631      	mov	r1, r6
 800d18e:	4628      	mov	r0, r5
 800d190:	47b8      	blx	r7
 800d192:	3001      	adds	r0, #1
 800d194:	f43f af51 	beq.w	800d03a <_printf_float+0xbe>
 800d198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d19c:	429a      	cmp	r2, r3
 800d19e:	db02      	blt.n	800d1a6 <_printf_float+0x22a>
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	07d8      	lsls	r0, r3, #31
 800d1a4:	d510      	bpl.n	800d1c8 <_printf_float+0x24c>
 800d1a6:	ee18 3a10 	vmov	r3, s16
 800d1aa:	4652      	mov	r2, sl
 800d1ac:	4631      	mov	r1, r6
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	47b8      	blx	r7
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	f43f af41 	beq.w	800d03a <_printf_float+0xbe>
 800d1b8:	f04f 0800 	mov.w	r8, #0
 800d1bc:	f104 091a 	add.w	r9, r4, #26
 800d1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	4543      	cmp	r3, r8
 800d1c6:	dc09      	bgt.n	800d1dc <_printf_float+0x260>
 800d1c8:	6823      	ldr	r3, [r4, #0]
 800d1ca:	079b      	lsls	r3, r3, #30
 800d1cc:	f100 8107 	bmi.w	800d3de <_printf_float+0x462>
 800d1d0:	68e0      	ldr	r0, [r4, #12]
 800d1d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1d4:	4298      	cmp	r0, r3
 800d1d6:	bfb8      	it	lt
 800d1d8:	4618      	movlt	r0, r3
 800d1da:	e730      	b.n	800d03e <_printf_float+0xc2>
 800d1dc:	2301      	movs	r3, #1
 800d1de:	464a      	mov	r2, r9
 800d1e0:	4631      	mov	r1, r6
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	47b8      	blx	r7
 800d1e6:	3001      	adds	r0, #1
 800d1e8:	f43f af27 	beq.w	800d03a <_printf_float+0xbe>
 800d1ec:	f108 0801 	add.w	r8, r8, #1
 800d1f0:	e7e6      	b.n	800d1c0 <_printf_float+0x244>
 800d1f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	dc39      	bgt.n	800d26c <_printf_float+0x2f0>
 800d1f8:	4a1b      	ldr	r2, [pc, #108]	; (800d268 <_printf_float+0x2ec>)
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	4631      	mov	r1, r6
 800d1fe:	4628      	mov	r0, r5
 800d200:	47b8      	blx	r7
 800d202:	3001      	adds	r0, #1
 800d204:	f43f af19 	beq.w	800d03a <_printf_float+0xbe>
 800d208:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d20c:	4313      	orrs	r3, r2
 800d20e:	d102      	bne.n	800d216 <_printf_float+0x29a>
 800d210:	6823      	ldr	r3, [r4, #0]
 800d212:	07d9      	lsls	r1, r3, #31
 800d214:	d5d8      	bpl.n	800d1c8 <_printf_float+0x24c>
 800d216:	ee18 3a10 	vmov	r3, s16
 800d21a:	4652      	mov	r2, sl
 800d21c:	4631      	mov	r1, r6
 800d21e:	4628      	mov	r0, r5
 800d220:	47b8      	blx	r7
 800d222:	3001      	adds	r0, #1
 800d224:	f43f af09 	beq.w	800d03a <_printf_float+0xbe>
 800d228:	f04f 0900 	mov.w	r9, #0
 800d22c:	f104 0a1a 	add.w	sl, r4, #26
 800d230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d232:	425b      	negs	r3, r3
 800d234:	454b      	cmp	r3, r9
 800d236:	dc01      	bgt.n	800d23c <_printf_float+0x2c0>
 800d238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d23a:	e792      	b.n	800d162 <_printf_float+0x1e6>
 800d23c:	2301      	movs	r3, #1
 800d23e:	4652      	mov	r2, sl
 800d240:	4631      	mov	r1, r6
 800d242:	4628      	mov	r0, r5
 800d244:	47b8      	blx	r7
 800d246:	3001      	adds	r0, #1
 800d248:	f43f aef7 	beq.w	800d03a <_printf_float+0xbe>
 800d24c:	f109 0901 	add.w	r9, r9, #1
 800d250:	e7ee      	b.n	800d230 <_printf_float+0x2b4>
 800d252:	bf00      	nop
 800d254:	7fefffff 	.word	0x7fefffff
 800d258:	080107bc 	.word	0x080107bc
 800d25c:	080107c0 	.word	0x080107c0
 800d260:	080107c4 	.word	0x080107c4
 800d264:	080107c8 	.word	0x080107c8
 800d268:	080107cc 	.word	0x080107cc
 800d26c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d26e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d270:	429a      	cmp	r2, r3
 800d272:	bfa8      	it	ge
 800d274:	461a      	movge	r2, r3
 800d276:	2a00      	cmp	r2, #0
 800d278:	4691      	mov	r9, r2
 800d27a:	dc37      	bgt.n	800d2ec <_printf_float+0x370>
 800d27c:	f04f 0b00 	mov.w	fp, #0
 800d280:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d284:	f104 021a 	add.w	r2, r4, #26
 800d288:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d28a:	9305      	str	r3, [sp, #20]
 800d28c:	eba3 0309 	sub.w	r3, r3, r9
 800d290:	455b      	cmp	r3, fp
 800d292:	dc33      	bgt.n	800d2fc <_printf_float+0x380>
 800d294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d298:	429a      	cmp	r2, r3
 800d29a:	db3b      	blt.n	800d314 <_printf_float+0x398>
 800d29c:	6823      	ldr	r3, [r4, #0]
 800d29e:	07da      	lsls	r2, r3, #31
 800d2a0:	d438      	bmi.n	800d314 <_printf_float+0x398>
 800d2a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d2a6:	eba2 0903 	sub.w	r9, r2, r3
 800d2aa:	9b05      	ldr	r3, [sp, #20]
 800d2ac:	1ad2      	subs	r2, r2, r3
 800d2ae:	4591      	cmp	r9, r2
 800d2b0:	bfa8      	it	ge
 800d2b2:	4691      	movge	r9, r2
 800d2b4:	f1b9 0f00 	cmp.w	r9, #0
 800d2b8:	dc35      	bgt.n	800d326 <_printf_float+0x3aa>
 800d2ba:	f04f 0800 	mov.w	r8, #0
 800d2be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2c2:	f104 0a1a 	add.w	sl, r4, #26
 800d2c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2ca:	1a9b      	subs	r3, r3, r2
 800d2cc:	eba3 0309 	sub.w	r3, r3, r9
 800d2d0:	4543      	cmp	r3, r8
 800d2d2:	f77f af79 	ble.w	800d1c8 <_printf_float+0x24c>
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	4652      	mov	r2, sl
 800d2da:	4631      	mov	r1, r6
 800d2dc:	4628      	mov	r0, r5
 800d2de:	47b8      	blx	r7
 800d2e0:	3001      	adds	r0, #1
 800d2e2:	f43f aeaa 	beq.w	800d03a <_printf_float+0xbe>
 800d2e6:	f108 0801 	add.w	r8, r8, #1
 800d2ea:	e7ec      	b.n	800d2c6 <_printf_float+0x34a>
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	4631      	mov	r1, r6
 800d2f0:	4642      	mov	r2, r8
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	47b8      	blx	r7
 800d2f6:	3001      	adds	r0, #1
 800d2f8:	d1c0      	bne.n	800d27c <_printf_float+0x300>
 800d2fa:	e69e      	b.n	800d03a <_printf_float+0xbe>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	4631      	mov	r1, r6
 800d300:	4628      	mov	r0, r5
 800d302:	9205      	str	r2, [sp, #20]
 800d304:	47b8      	blx	r7
 800d306:	3001      	adds	r0, #1
 800d308:	f43f ae97 	beq.w	800d03a <_printf_float+0xbe>
 800d30c:	9a05      	ldr	r2, [sp, #20]
 800d30e:	f10b 0b01 	add.w	fp, fp, #1
 800d312:	e7b9      	b.n	800d288 <_printf_float+0x30c>
 800d314:	ee18 3a10 	vmov	r3, s16
 800d318:	4652      	mov	r2, sl
 800d31a:	4631      	mov	r1, r6
 800d31c:	4628      	mov	r0, r5
 800d31e:	47b8      	blx	r7
 800d320:	3001      	adds	r0, #1
 800d322:	d1be      	bne.n	800d2a2 <_printf_float+0x326>
 800d324:	e689      	b.n	800d03a <_printf_float+0xbe>
 800d326:	9a05      	ldr	r2, [sp, #20]
 800d328:	464b      	mov	r3, r9
 800d32a:	4442      	add	r2, r8
 800d32c:	4631      	mov	r1, r6
 800d32e:	4628      	mov	r0, r5
 800d330:	47b8      	blx	r7
 800d332:	3001      	adds	r0, #1
 800d334:	d1c1      	bne.n	800d2ba <_printf_float+0x33e>
 800d336:	e680      	b.n	800d03a <_printf_float+0xbe>
 800d338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d33a:	2a01      	cmp	r2, #1
 800d33c:	dc01      	bgt.n	800d342 <_printf_float+0x3c6>
 800d33e:	07db      	lsls	r3, r3, #31
 800d340:	d53a      	bpl.n	800d3b8 <_printf_float+0x43c>
 800d342:	2301      	movs	r3, #1
 800d344:	4642      	mov	r2, r8
 800d346:	4631      	mov	r1, r6
 800d348:	4628      	mov	r0, r5
 800d34a:	47b8      	blx	r7
 800d34c:	3001      	adds	r0, #1
 800d34e:	f43f ae74 	beq.w	800d03a <_printf_float+0xbe>
 800d352:	ee18 3a10 	vmov	r3, s16
 800d356:	4652      	mov	r2, sl
 800d358:	4631      	mov	r1, r6
 800d35a:	4628      	mov	r0, r5
 800d35c:	47b8      	blx	r7
 800d35e:	3001      	adds	r0, #1
 800d360:	f43f ae6b 	beq.w	800d03a <_printf_float+0xbe>
 800d364:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d368:	2200      	movs	r2, #0
 800d36a:	2300      	movs	r3, #0
 800d36c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d370:	f7f3 fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800d374:	b9d8      	cbnz	r0, 800d3ae <_printf_float+0x432>
 800d376:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d37a:	f108 0201 	add.w	r2, r8, #1
 800d37e:	4631      	mov	r1, r6
 800d380:	4628      	mov	r0, r5
 800d382:	47b8      	blx	r7
 800d384:	3001      	adds	r0, #1
 800d386:	d10e      	bne.n	800d3a6 <_printf_float+0x42a>
 800d388:	e657      	b.n	800d03a <_printf_float+0xbe>
 800d38a:	2301      	movs	r3, #1
 800d38c:	4652      	mov	r2, sl
 800d38e:	4631      	mov	r1, r6
 800d390:	4628      	mov	r0, r5
 800d392:	47b8      	blx	r7
 800d394:	3001      	adds	r0, #1
 800d396:	f43f ae50 	beq.w	800d03a <_printf_float+0xbe>
 800d39a:	f108 0801 	add.w	r8, r8, #1
 800d39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	4543      	cmp	r3, r8
 800d3a4:	dcf1      	bgt.n	800d38a <_printf_float+0x40e>
 800d3a6:	464b      	mov	r3, r9
 800d3a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d3ac:	e6da      	b.n	800d164 <_printf_float+0x1e8>
 800d3ae:	f04f 0800 	mov.w	r8, #0
 800d3b2:	f104 0a1a 	add.w	sl, r4, #26
 800d3b6:	e7f2      	b.n	800d39e <_printf_float+0x422>
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	4642      	mov	r2, r8
 800d3bc:	e7df      	b.n	800d37e <_printf_float+0x402>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	464a      	mov	r2, r9
 800d3c2:	4631      	mov	r1, r6
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	47b8      	blx	r7
 800d3c8:	3001      	adds	r0, #1
 800d3ca:	f43f ae36 	beq.w	800d03a <_printf_float+0xbe>
 800d3ce:	f108 0801 	add.w	r8, r8, #1
 800d3d2:	68e3      	ldr	r3, [r4, #12]
 800d3d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3d6:	1a5b      	subs	r3, r3, r1
 800d3d8:	4543      	cmp	r3, r8
 800d3da:	dcf0      	bgt.n	800d3be <_printf_float+0x442>
 800d3dc:	e6f8      	b.n	800d1d0 <_printf_float+0x254>
 800d3de:	f04f 0800 	mov.w	r8, #0
 800d3e2:	f104 0919 	add.w	r9, r4, #25
 800d3e6:	e7f4      	b.n	800d3d2 <_printf_float+0x456>

0800d3e8 <_printf_common>:
 800d3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3ec:	4616      	mov	r6, r2
 800d3ee:	4699      	mov	r9, r3
 800d3f0:	688a      	ldr	r2, [r1, #8]
 800d3f2:	690b      	ldr	r3, [r1, #16]
 800d3f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	bfb8      	it	lt
 800d3fc:	4613      	movlt	r3, r2
 800d3fe:	6033      	str	r3, [r6, #0]
 800d400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d404:	4607      	mov	r7, r0
 800d406:	460c      	mov	r4, r1
 800d408:	b10a      	cbz	r2, 800d40e <_printf_common+0x26>
 800d40a:	3301      	adds	r3, #1
 800d40c:	6033      	str	r3, [r6, #0]
 800d40e:	6823      	ldr	r3, [r4, #0]
 800d410:	0699      	lsls	r1, r3, #26
 800d412:	bf42      	ittt	mi
 800d414:	6833      	ldrmi	r3, [r6, #0]
 800d416:	3302      	addmi	r3, #2
 800d418:	6033      	strmi	r3, [r6, #0]
 800d41a:	6825      	ldr	r5, [r4, #0]
 800d41c:	f015 0506 	ands.w	r5, r5, #6
 800d420:	d106      	bne.n	800d430 <_printf_common+0x48>
 800d422:	f104 0a19 	add.w	sl, r4, #25
 800d426:	68e3      	ldr	r3, [r4, #12]
 800d428:	6832      	ldr	r2, [r6, #0]
 800d42a:	1a9b      	subs	r3, r3, r2
 800d42c:	42ab      	cmp	r3, r5
 800d42e:	dc26      	bgt.n	800d47e <_printf_common+0x96>
 800d430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d434:	1e13      	subs	r3, r2, #0
 800d436:	6822      	ldr	r2, [r4, #0]
 800d438:	bf18      	it	ne
 800d43a:	2301      	movne	r3, #1
 800d43c:	0692      	lsls	r2, r2, #26
 800d43e:	d42b      	bmi.n	800d498 <_printf_common+0xb0>
 800d440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d444:	4649      	mov	r1, r9
 800d446:	4638      	mov	r0, r7
 800d448:	47c0      	blx	r8
 800d44a:	3001      	adds	r0, #1
 800d44c:	d01e      	beq.n	800d48c <_printf_common+0xa4>
 800d44e:	6823      	ldr	r3, [r4, #0]
 800d450:	6922      	ldr	r2, [r4, #16]
 800d452:	f003 0306 	and.w	r3, r3, #6
 800d456:	2b04      	cmp	r3, #4
 800d458:	bf02      	ittt	eq
 800d45a:	68e5      	ldreq	r5, [r4, #12]
 800d45c:	6833      	ldreq	r3, [r6, #0]
 800d45e:	1aed      	subeq	r5, r5, r3
 800d460:	68a3      	ldr	r3, [r4, #8]
 800d462:	bf0c      	ite	eq
 800d464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d468:	2500      	movne	r5, #0
 800d46a:	4293      	cmp	r3, r2
 800d46c:	bfc4      	itt	gt
 800d46e:	1a9b      	subgt	r3, r3, r2
 800d470:	18ed      	addgt	r5, r5, r3
 800d472:	2600      	movs	r6, #0
 800d474:	341a      	adds	r4, #26
 800d476:	42b5      	cmp	r5, r6
 800d478:	d11a      	bne.n	800d4b0 <_printf_common+0xc8>
 800d47a:	2000      	movs	r0, #0
 800d47c:	e008      	b.n	800d490 <_printf_common+0xa8>
 800d47e:	2301      	movs	r3, #1
 800d480:	4652      	mov	r2, sl
 800d482:	4649      	mov	r1, r9
 800d484:	4638      	mov	r0, r7
 800d486:	47c0      	blx	r8
 800d488:	3001      	adds	r0, #1
 800d48a:	d103      	bne.n	800d494 <_printf_common+0xac>
 800d48c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d494:	3501      	adds	r5, #1
 800d496:	e7c6      	b.n	800d426 <_printf_common+0x3e>
 800d498:	18e1      	adds	r1, r4, r3
 800d49a:	1c5a      	adds	r2, r3, #1
 800d49c:	2030      	movs	r0, #48	; 0x30
 800d49e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4a2:	4422      	add	r2, r4
 800d4a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d4ac:	3302      	adds	r3, #2
 800d4ae:	e7c7      	b.n	800d440 <_printf_common+0x58>
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	4622      	mov	r2, r4
 800d4b4:	4649      	mov	r1, r9
 800d4b6:	4638      	mov	r0, r7
 800d4b8:	47c0      	blx	r8
 800d4ba:	3001      	adds	r0, #1
 800d4bc:	d0e6      	beq.n	800d48c <_printf_common+0xa4>
 800d4be:	3601      	adds	r6, #1
 800d4c0:	e7d9      	b.n	800d476 <_printf_common+0x8e>
	...

0800d4c4 <_printf_i>:
 800d4c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4c8:	7e0f      	ldrb	r7, [r1, #24]
 800d4ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d4cc:	2f78      	cmp	r7, #120	; 0x78
 800d4ce:	4691      	mov	r9, r2
 800d4d0:	4680      	mov	r8, r0
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	469a      	mov	sl, r3
 800d4d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d4da:	d807      	bhi.n	800d4ec <_printf_i+0x28>
 800d4dc:	2f62      	cmp	r7, #98	; 0x62
 800d4de:	d80a      	bhi.n	800d4f6 <_printf_i+0x32>
 800d4e0:	2f00      	cmp	r7, #0
 800d4e2:	f000 80d4 	beq.w	800d68e <_printf_i+0x1ca>
 800d4e6:	2f58      	cmp	r7, #88	; 0x58
 800d4e8:	f000 80c0 	beq.w	800d66c <_printf_i+0x1a8>
 800d4ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d4f4:	e03a      	b.n	800d56c <_printf_i+0xa8>
 800d4f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d4fa:	2b15      	cmp	r3, #21
 800d4fc:	d8f6      	bhi.n	800d4ec <_printf_i+0x28>
 800d4fe:	a101      	add	r1, pc, #4	; (adr r1, 800d504 <_printf_i+0x40>)
 800d500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d504:	0800d55d 	.word	0x0800d55d
 800d508:	0800d571 	.word	0x0800d571
 800d50c:	0800d4ed 	.word	0x0800d4ed
 800d510:	0800d4ed 	.word	0x0800d4ed
 800d514:	0800d4ed 	.word	0x0800d4ed
 800d518:	0800d4ed 	.word	0x0800d4ed
 800d51c:	0800d571 	.word	0x0800d571
 800d520:	0800d4ed 	.word	0x0800d4ed
 800d524:	0800d4ed 	.word	0x0800d4ed
 800d528:	0800d4ed 	.word	0x0800d4ed
 800d52c:	0800d4ed 	.word	0x0800d4ed
 800d530:	0800d675 	.word	0x0800d675
 800d534:	0800d59d 	.word	0x0800d59d
 800d538:	0800d62f 	.word	0x0800d62f
 800d53c:	0800d4ed 	.word	0x0800d4ed
 800d540:	0800d4ed 	.word	0x0800d4ed
 800d544:	0800d697 	.word	0x0800d697
 800d548:	0800d4ed 	.word	0x0800d4ed
 800d54c:	0800d59d 	.word	0x0800d59d
 800d550:	0800d4ed 	.word	0x0800d4ed
 800d554:	0800d4ed 	.word	0x0800d4ed
 800d558:	0800d637 	.word	0x0800d637
 800d55c:	682b      	ldr	r3, [r5, #0]
 800d55e:	1d1a      	adds	r2, r3, #4
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	602a      	str	r2, [r5, #0]
 800d564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d56c:	2301      	movs	r3, #1
 800d56e:	e09f      	b.n	800d6b0 <_printf_i+0x1ec>
 800d570:	6820      	ldr	r0, [r4, #0]
 800d572:	682b      	ldr	r3, [r5, #0]
 800d574:	0607      	lsls	r7, r0, #24
 800d576:	f103 0104 	add.w	r1, r3, #4
 800d57a:	6029      	str	r1, [r5, #0]
 800d57c:	d501      	bpl.n	800d582 <_printf_i+0xbe>
 800d57e:	681e      	ldr	r6, [r3, #0]
 800d580:	e003      	b.n	800d58a <_printf_i+0xc6>
 800d582:	0646      	lsls	r6, r0, #25
 800d584:	d5fb      	bpl.n	800d57e <_printf_i+0xba>
 800d586:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d58a:	2e00      	cmp	r6, #0
 800d58c:	da03      	bge.n	800d596 <_printf_i+0xd2>
 800d58e:	232d      	movs	r3, #45	; 0x2d
 800d590:	4276      	negs	r6, r6
 800d592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d596:	485a      	ldr	r0, [pc, #360]	; (800d700 <_printf_i+0x23c>)
 800d598:	230a      	movs	r3, #10
 800d59a:	e012      	b.n	800d5c2 <_printf_i+0xfe>
 800d59c:	682b      	ldr	r3, [r5, #0]
 800d59e:	6820      	ldr	r0, [r4, #0]
 800d5a0:	1d19      	adds	r1, r3, #4
 800d5a2:	6029      	str	r1, [r5, #0]
 800d5a4:	0605      	lsls	r5, r0, #24
 800d5a6:	d501      	bpl.n	800d5ac <_printf_i+0xe8>
 800d5a8:	681e      	ldr	r6, [r3, #0]
 800d5aa:	e002      	b.n	800d5b2 <_printf_i+0xee>
 800d5ac:	0641      	lsls	r1, r0, #25
 800d5ae:	d5fb      	bpl.n	800d5a8 <_printf_i+0xe4>
 800d5b0:	881e      	ldrh	r6, [r3, #0]
 800d5b2:	4853      	ldr	r0, [pc, #332]	; (800d700 <_printf_i+0x23c>)
 800d5b4:	2f6f      	cmp	r7, #111	; 0x6f
 800d5b6:	bf0c      	ite	eq
 800d5b8:	2308      	moveq	r3, #8
 800d5ba:	230a      	movne	r3, #10
 800d5bc:	2100      	movs	r1, #0
 800d5be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d5c2:	6865      	ldr	r5, [r4, #4]
 800d5c4:	60a5      	str	r5, [r4, #8]
 800d5c6:	2d00      	cmp	r5, #0
 800d5c8:	bfa2      	ittt	ge
 800d5ca:	6821      	ldrge	r1, [r4, #0]
 800d5cc:	f021 0104 	bicge.w	r1, r1, #4
 800d5d0:	6021      	strge	r1, [r4, #0]
 800d5d2:	b90e      	cbnz	r6, 800d5d8 <_printf_i+0x114>
 800d5d4:	2d00      	cmp	r5, #0
 800d5d6:	d04b      	beq.n	800d670 <_printf_i+0x1ac>
 800d5d8:	4615      	mov	r5, r2
 800d5da:	fbb6 f1f3 	udiv	r1, r6, r3
 800d5de:	fb03 6711 	mls	r7, r3, r1, r6
 800d5e2:	5dc7      	ldrb	r7, [r0, r7]
 800d5e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d5e8:	4637      	mov	r7, r6
 800d5ea:	42bb      	cmp	r3, r7
 800d5ec:	460e      	mov	r6, r1
 800d5ee:	d9f4      	bls.n	800d5da <_printf_i+0x116>
 800d5f0:	2b08      	cmp	r3, #8
 800d5f2:	d10b      	bne.n	800d60c <_printf_i+0x148>
 800d5f4:	6823      	ldr	r3, [r4, #0]
 800d5f6:	07de      	lsls	r6, r3, #31
 800d5f8:	d508      	bpl.n	800d60c <_printf_i+0x148>
 800d5fa:	6923      	ldr	r3, [r4, #16]
 800d5fc:	6861      	ldr	r1, [r4, #4]
 800d5fe:	4299      	cmp	r1, r3
 800d600:	bfde      	ittt	le
 800d602:	2330      	movle	r3, #48	; 0x30
 800d604:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d608:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d60c:	1b52      	subs	r2, r2, r5
 800d60e:	6122      	str	r2, [r4, #16]
 800d610:	f8cd a000 	str.w	sl, [sp]
 800d614:	464b      	mov	r3, r9
 800d616:	aa03      	add	r2, sp, #12
 800d618:	4621      	mov	r1, r4
 800d61a:	4640      	mov	r0, r8
 800d61c:	f7ff fee4 	bl	800d3e8 <_printf_common>
 800d620:	3001      	adds	r0, #1
 800d622:	d14a      	bne.n	800d6ba <_printf_i+0x1f6>
 800d624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d628:	b004      	add	sp, #16
 800d62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d62e:	6823      	ldr	r3, [r4, #0]
 800d630:	f043 0320 	orr.w	r3, r3, #32
 800d634:	6023      	str	r3, [r4, #0]
 800d636:	4833      	ldr	r0, [pc, #204]	; (800d704 <_printf_i+0x240>)
 800d638:	2778      	movs	r7, #120	; 0x78
 800d63a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d63e:	6823      	ldr	r3, [r4, #0]
 800d640:	6829      	ldr	r1, [r5, #0]
 800d642:	061f      	lsls	r7, r3, #24
 800d644:	f851 6b04 	ldr.w	r6, [r1], #4
 800d648:	d402      	bmi.n	800d650 <_printf_i+0x18c>
 800d64a:	065f      	lsls	r7, r3, #25
 800d64c:	bf48      	it	mi
 800d64e:	b2b6      	uxthmi	r6, r6
 800d650:	07df      	lsls	r7, r3, #31
 800d652:	bf48      	it	mi
 800d654:	f043 0320 	orrmi.w	r3, r3, #32
 800d658:	6029      	str	r1, [r5, #0]
 800d65a:	bf48      	it	mi
 800d65c:	6023      	strmi	r3, [r4, #0]
 800d65e:	b91e      	cbnz	r6, 800d668 <_printf_i+0x1a4>
 800d660:	6823      	ldr	r3, [r4, #0]
 800d662:	f023 0320 	bic.w	r3, r3, #32
 800d666:	6023      	str	r3, [r4, #0]
 800d668:	2310      	movs	r3, #16
 800d66a:	e7a7      	b.n	800d5bc <_printf_i+0xf8>
 800d66c:	4824      	ldr	r0, [pc, #144]	; (800d700 <_printf_i+0x23c>)
 800d66e:	e7e4      	b.n	800d63a <_printf_i+0x176>
 800d670:	4615      	mov	r5, r2
 800d672:	e7bd      	b.n	800d5f0 <_printf_i+0x12c>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	6826      	ldr	r6, [r4, #0]
 800d678:	6961      	ldr	r1, [r4, #20]
 800d67a:	1d18      	adds	r0, r3, #4
 800d67c:	6028      	str	r0, [r5, #0]
 800d67e:	0635      	lsls	r5, r6, #24
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	d501      	bpl.n	800d688 <_printf_i+0x1c4>
 800d684:	6019      	str	r1, [r3, #0]
 800d686:	e002      	b.n	800d68e <_printf_i+0x1ca>
 800d688:	0670      	lsls	r0, r6, #25
 800d68a:	d5fb      	bpl.n	800d684 <_printf_i+0x1c0>
 800d68c:	8019      	strh	r1, [r3, #0]
 800d68e:	2300      	movs	r3, #0
 800d690:	6123      	str	r3, [r4, #16]
 800d692:	4615      	mov	r5, r2
 800d694:	e7bc      	b.n	800d610 <_printf_i+0x14c>
 800d696:	682b      	ldr	r3, [r5, #0]
 800d698:	1d1a      	adds	r2, r3, #4
 800d69a:	602a      	str	r2, [r5, #0]
 800d69c:	681d      	ldr	r5, [r3, #0]
 800d69e:	6862      	ldr	r2, [r4, #4]
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	f7f2 fd94 	bl	80001d0 <memchr>
 800d6a8:	b108      	cbz	r0, 800d6ae <_printf_i+0x1ea>
 800d6aa:	1b40      	subs	r0, r0, r5
 800d6ac:	6060      	str	r0, [r4, #4]
 800d6ae:	6863      	ldr	r3, [r4, #4]
 800d6b0:	6123      	str	r3, [r4, #16]
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6b8:	e7aa      	b.n	800d610 <_printf_i+0x14c>
 800d6ba:	6923      	ldr	r3, [r4, #16]
 800d6bc:	462a      	mov	r2, r5
 800d6be:	4649      	mov	r1, r9
 800d6c0:	4640      	mov	r0, r8
 800d6c2:	47d0      	blx	sl
 800d6c4:	3001      	adds	r0, #1
 800d6c6:	d0ad      	beq.n	800d624 <_printf_i+0x160>
 800d6c8:	6823      	ldr	r3, [r4, #0]
 800d6ca:	079b      	lsls	r3, r3, #30
 800d6cc:	d413      	bmi.n	800d6f6 <_printf_i+0x232>
 800d6ce:	68e0      	ldr	r0, [r4, #12]
 800d6d0:	9b03      	ldr	r3, [sp, #12]
 800d6d2:	4298      	cmp	r0, r3
 800d6d4:	bfb8      	it	lt
 800d6d6:	4618      	movlt	r0, r3
 800d6d8:	e7a6      	b.n	800d628 <_printf_i+0x164>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	4632      	mov	r2, r6
 800d6de:	4649      	mov	r1, r9
 800d6e0:	4640      	mov	r0, r8
 800d6e2:	47d0      	blx	sl
 800d6e4:	3001      	adds	r0, #1
 800d6e6:	d09d      	beq.n	800d624 <_printf_i+0x160>
 800d6e8:	3501      	adds	r5, #1
 800d6ea:	68e3      	ldr	r3, [r4, #12]
 800d6ec:	9903      	ldr	r1, [sp, #12]
 800d6ee:	1a5b      	subs	r3, r3, r1
 800d6f0:	42ab      	cmp	r3, r5
 800d6f2:	dcf2      	bgt.n	800d6da <_printf_i+0x216>
 800d6f4:	e7eb      	b.n	800d6ce <_printf_i+0x20a>
 800d6f6:	2500      	movs	r5, #0
 800d6f8:	f104 0619 	add.w	r6, r4, #25
 800d6fc:	e7f5      	b.n	800d6ea <_printf_i+0x226>
 800d6fe:	bf00      	nop
 800d700:	080107ce 	.word	0x080107ce
 800d704:	080107df 	.word	0x080107df

0800d708 <siprintf>:
 800d708:	b40e      	push	{r1, r2, r3}
 800d70a:	b500      	push	{lr}
 800d70c:	b09c      	sub	sp, #112	; 0x70
 800d70e:	ab1d      	add	r3, sp, #116	; 0x74
 800d710:	9002      	str	r0, [sp, #8]
 800d712:	9006      	str	r0, [sp, #24]
 800d714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d718:	4809      	ldr	r0, [pc, #36]	; (800d740 <siprintf+0x38>)
 800d71a:	9107      	str	r1, [sp, #28]
 800d71c:	9104      	str	r1, [sp, #16]
 800d71e:	4909      	ldr	r1, [pc, #36]	; (800d744 <siprintf+0x3c>)
 800d720:	f853 2b04 	ldr.w	r2, [r3], #4
 800d724:	9105      	str	r1, [sp, #20]
 800d726:	6800      	ldr	r0, [r0, #0]
 800d728:	9301      	str	r3, [sp, #4]
 800d72a:	a902      	add	r1, sp, #8
 800d72c:	f000 ffec 	bl	800e708 <_svfiprintf_r>
 800d730:	9b02      	ldr	r3, [sp, #8]
 800d732:	2200      	movs	r2, #0
 800d734:	701a      	strb	r2, [r3, #0]
 800d736:	b01c      	add	sp, #112	; 0x70
 800d738:	f85d eb04 	ldr.w	lr, [sp], #4
 800d73c:	b003      	add	sp, #12
 800d73e:	4770      	bx	lr
 800d740:	20000088 	.word	0x20000088
 800d744:	ffff0208 	.word	0xffff0208

0800d748 <std>:
 800d748:	2300      	movs	r3, #0
 800d74a:	b510      	push	{r4, lr}
 800d74c:	4604      	mov	r4, r0
 800d74e:	e9c0 3300 	strd	r3, r3, [r0]
 800d752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d756:	6083      	str	r3, [r0, #8]
 800d758:	8181      	strh	r1, [r0, #12]
 800d75a:	6643      	str	r3, [r0, #100]	; 0x64
 800d75c:	81c2      	strh	r2, [r0, #14]
 800d75e:	6183      	str	r3, [r0, #24]
 800d760:	4619      	mov	r1, r3
 800d762:	2208      	movs	r2, #8
 800d764:	305c      	adds	r0, #92	; 0x5c
 800d766:	f000 f8b1 	bl	800d8cc <memset>
 800d76a:	4b0d      	ldr	r3, [pc, #52]	; (800d7a0 <std+0x58>)
 800d76c:	6263      	str	r3, [r4, #36]	; 0x24
 800d76e:	4b0d      	ldr	r3, [pc, #52]	; (800d7a4 <std+0x5c>)
 800d770:	62a3      	str	r3, [r4, #40]	; 0x28
 800d772:	4b0d      	ldr	r3, [pc, #52]	; (800d7a8 <std+0x60>)
 800d774:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d776:	4b0d      	ldr	r3, [pc, #52]	; (800d7ac <std+0x64>)
 800d778:	6323      	str	r3, [r4, #48]	; 0x30
 800d77a:	4b0d      	ldr	r3, [pc, #52]	; (800d7b0 <std+0x68>)
 800d77c:	6224      	str	r4, [r4, #32]
 800d77e:	429c      	cmp	r4, r3
 800d780:	d006      	beq.n	800d790 <std+0x48>
 800d782:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d786:	4294      	cmp	r4, r2
 800d788:	d002      	beq.n	800d790 <std+0x48>
 800d78a:	33d0      	adds	r3, #208	; 0xd0
 800d78c:	429c      	cmp	r4, r3
 800d78e:	d105      	bne.n	800d79c <std+0x54>
 800d790:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d798:	f000 b8ce 	b.w	800d938 <__retarget_lock_init_recursive>
 800d79c:	bd10      	pop	{r4, pc}
 800d79e:	bf00      	nop
 800d7a0:	0800f2c1 	.word	0x0800f2c1
 800d7a4:	0800f2e3 	.word	0x0800f2e3
 800d7a8:	0800f31b 	.word	0x0800f31b
 800d7ac:	0800f33f 	.word	0x0800f33f
 800d7b0:	20005368 	.word	0x20005368

0800d7b4 <stdio_exit_handler>:
 800d7b4:	4a02      	ldr	r2, [pc, #8]	; (800d7c0 <stdio_exit_handler+0xc>)
 800d7b6:	4903      	ldr	r1, [pc, #12]	; (800d7c4 <stdio_exit_handler+0x10>)
 800d7b8:	4803      	ldr	r0, [pc, #12]	; (800d7c8 <stdio_exit_handler+0x14>)
 800d7ba:	f000 b869 	b.w	800d890 <_fwalk_sglue>
 800d7be:	bf00      	nop
 800d7c0:	20000030 	.word	0x20000030
 800d7c4:	0800eb61 	.word	0x0800eb61
 800d7c8:	2000003c 	.word	0x2000003c

0800d7cc <cleanup_stdio>:
 800d7cc:	6841      	ldr	r1, [r0, #4]
 800d7ce:	4b0c      	ldr	r3, [pc, #48]	; (800d800 <cleanup_stdio+0x34>)
 800d7d0:	4299      	cmp	r1, r3
 800d7d2:	b510      	push	{r4, lr}
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	d001      	beq.n	800d7dc <cleanup_stdio+0x10>
 800d7d8:	f001 f9c2 	bl	800eb60 <_fflush_r>
 800d7dc:	68a1      	ldr	r1, [r4, #8]
 800d7de:	4b09      	ldr	r3, [pc, #36]	; (800d804 <cleanup_stdio+0x38>)
 800d7e0:	4299      	cmp	r1, r3
 800d7e2:	d002      	beq.n	800d7ea <cleanup_stdio+0x1e>
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	f001 f9bb 	bl	800eb60 <_fflush_r>
 800d7ea:	68e1      	ldr	r1, [r4, #12]
 800d7ec:	4b06      	ldr	r3, [pc, #24]	; (800d808 <cleanup_stdio+0x3c>)
 800d7ee:	4299      	cmp	r1, r3
 800d7f0:	d004      	beq.n	800d7fc <cleanup_stdio+0x30>
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7f8:	f001 b9b2 	b.w	800eb60 <_fflush_r>
 800d7fc:	bd10      	pop	{r4, pc}
 800d7fe:	bf00      	nop
 800d800:	20005368 	.word	0x20005368
 800d804:	200053d0 	.word	0x200053d0
 800d808:	20005438 	.word	0x20005438

0800d80c <global_stdio_init.part.0>:
 800d80c:	b510      	push	{r4, lr}
 800d80e:	4b0b      	ldr	r3, [pc, #44]	; (800d83c <global_stdio_init.part.0+0x30>)
 800d810:	4c0b      	ldr	r4, [pc, #44]	; (800d840 <global_stdio_init.part.0+0x34>)
 800d812:	4a0c      	ldr	r2, [pc, #48]	; (800d844 <global_stdio_init.part.0+0x38>)
 800d814:	601a      	str	r2, [r3, #0]
 800d816:	4620      	mov	r0, r4
 800d818:	2200      	movs	r2, #0
 800d81a:	2104      	movs	r1, #4
 800d81c:	f7ff ff94 	bl	800d748 <std>
 800d820:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d824:	2201      	movs	r2, #1
 800d826:	2109      	movs	r1, #9
 800d828:	f7ff ff8e 	bl	800d748 <std>
 800d82c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d830:	2202      	movs	r2, #2
 800d832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d836:	2112      	movs	r1, #18
 800d838:	f7ff bf86 	b.w	800d748 <std>
 800d83c:	200054a0 	.word	0x200054a0
 800d840:	20005368 	.word	0x20005368
 800d844:	0800d7b5 	.word	0x0800d7b5

0800d848 <__sfp_lock_acquire>:
 800d848:	4801      	ldr	r0, [pc, #4]	; (800d850 <__sfp_lock_acquire+0x8>)
 800d84a:	f000 b876 	b.w	800d93a <__retarget_lock_acquire_recursive>
 800d84e:	bf00      	nop
 800d850:	200054a5 	.word	0x200054a5

0800d854 <__sfp_lock_release>:
 800d854:	4801      	ldr	r0, [pc, #4]	; (800d85c <__sfp_lock_release+0x8>)
 800d856:	f000 b871 	b.w	800d93c <__retarget_lock_release_recursive>
 800d85a:	bf00      	nop
 800d85c:	200054a5 	.word	0x200054a5

0800d860 <__sinit>:
 800d860:	b510      	push	{r4, lr}
 800d862:	4604      	mov	r4, r0
 800d864:	f7ff fff0 	bl	800d848 <__sfp_lock_acquire>
 800d868:	6a23      	ldr	r3, [r4, #32]
 800d86a:	b11b      	cbz	r3, 800d874 <__sinit+0x14>
 800d86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d870:	f7ff bff0 	b.w	800d854 <__sfp_lock_release>
 800d874:	4b04      	ldr	r3, [pc, #16]	; (800d888 <__sinit+0x28>)
 800d876:	6223      	str	r3, [r4, #32]
 800d878:	4b04      	ldr	r3, [pc, #16]	; (800d88c <__sinit+0x2c>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d1f5      	bne.n	800d86c <__sinit+0xc>
 800d880:	f7ff ffc4 	bl	800d80c <global_stdio_init.part.0>
 800d884:	e7f2      	b.n	800d86c <__sinit+0xc>
 800d886:	bf00      	nop
 800d888:	0800d7cd 	.word	0x0800d7cd
 800d88c:	200054a0 	.word	0x200054a0

0800d890 <_fwalk_sglue>:
 800d890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d894:	4607      	mov	r7, r0
 800d896:	4688      	mov	r8, r1
 800d898:	4614      	mov	r4, r2
 800d89a:	2600      	movs	r6, #0
 800d89c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8a0:	f1b9 0901 	subs.w	r9, r9, #1
 800d8a4:	d505      	bpl.n	800d8b2 <_fwalk_sglue+0x22>
 800d8a6:	6824      	ldr	r4, [r4, #0]
 800d8a8:	2c00      	cmp	r4, #0
 800d8aa:	d1f7      	bne.n	800d89c <_fwalk_sglue+0xc>
 800d8ac:	4630      	mov	r0, r6
 800d8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8b2:	89ab      	ldrh	r3, [r5, #12]
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d907      	bls.n	800d8c8 <_fwalk_sglue+0x38>
 800d8b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8bc:	3301      	adds	r3, #1
 800d8be:	d003      	beq.n	800d8c8 <_fwalk_sglue+0x38>
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	4638      	mov	r0, r7
 800d8c4:	47c0      	blx	r8
 800d8c6:	4306      	orrs	r6, r0
 800d8c8:	3568      	adds	r5, #104	; 0x68
 800d8ca:	e7e9      	b.n	800d8a0 <_fwalk_sglue+0x10>

0800d8cc <memset>:
 800d8cc:	4402      	add	r2, r0
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d100      	bne.n	800d8d6 <memset+0xa>
 800d8d4:	4770      	bx	lr
 800d8d6:	f803 1b01 	strb.w	r1, [r3], #1
 800d8da:	e7f9      	b.n	800d8d0 <memset+0x4>

0800d8dc <_localeconv_r>:
 800d8dc:	4800      	ldr	r0, [pc, #0]	; (800d8e0 <_localeconv_r+0x4>)
 800d8de:	4770      	bx	lr
 800d8e0:	2000017c 	.word	0x2000017c

0800d8e4 <__errno>:
 800d8e4:	4b01      	ldr	r3, [pc, #4]	; (800d8ec <__errno+0x8>)
 800d8e6:	6818      	ldr	r0, [r3, #0]
 800d8e8:	4770      	bx	lr
 800d8ea:	bf00      	nop
 800d8ec:	20000088 	.word	0x20000088

0800d8f0 <__libc_init_array>:
 800d8f0:	b570      	push	{r4, r5, r6, lr}
 800d8f2:	4d0d      	ldr	r5, [pc, #52]	; (800d928 <__libc_init_array+0x38>)
 800d8f4:	4c0d      	ldr	r4, [pc, #52]	; (800d92c <__libc_init_array+0x3c>)
 800d8f6:	1b64      	subs	r4, r4, r5
 800d8f8:	10a4      	asrs	r4, r4, #2
 800d8fa:	2600      	movs	r6, #0
 800d8fc:	42a6      	cmp	r6, r4
 800d8fe:	d109      	bne.n	800d914 <__libc_init_array+0x24>
 800d900:	4d0b      	ldr	r5, [pc, #44]	; (800d930 <__libc_init_array+0x40>)
 800d902:	4c0c      	ldr	r4, [pc, #48]	; (800d934 <__libc_init_array+0x44>)
 800d904:	f002 f968 	bl	800fbd8 <_init>
 800d908:	1b64      	subs	r4, r4, r5
 800d90a:	10a4      	asrs	r4, r4, #2
 800d90c:	2600      	movs	r6, #0
 800d90e:	42a6      	cmp	r6, r4
 800d910:	d105      	bne.n	800d91e <__libc_init_array+0x2e>
 800d912:	bd70      	pop	{r4, r5, r6, pc}
 800d914:	f855 3b04 	ldr.w	r3, [r5], #4
 800d918:	4798      	blx	r3
 800d91a:	3601      	adds	r6, #1
 800d91c:	e7ee      	b.n	800d8fc <__libc_init_array+0xc>
 800d91e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d922:	4798      	blx	r3
 800d924:	3601      	adds	r6, #1
 800d926:	e7f2      	b.n	800d90e <__libc_init_array+0x1e>
 800d928:	08010b34 	.word	0x08010b34
 800d92c:	08010b34 	.word	0x08010b34
 800d930:	08010b34 	.word	0x08010b34
 800d934:	08010b38 	.word	0x08010b38

0800d938 <__retarget_lock_init_recursive>:
 800d938:	4770      	bx	lr

0800d93a <__retarget_lock_acquire_recursive>:
 800d93a:	4770      	bx	lr

0800d93c <__retarget_lock_release_recursive>:
 800d93c:	4770      	bx	lr

0800d93e <memcpy>:
 800d93e:	440a      	add	r2, r1
 800d940:	4291      	cmp	r1, r2
 800d942:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d946:	d100      	bne.n	800d94a <memcpy+0xc>
 800d948:	4770      	bx	lr
 800d94a:	b510      	push	{r4, lr}
 800d94c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d950:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d954:	4291      	cmp	r1, r2
 800d956:	d1f9      	bne.n	800d94c <memcpy+0xe>
 800d958:	bd10      	pop	{r4, pc}

0800d95a <quorem>:
 800d95a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d95e:	6903      	ldr	r3, [r0, #16]
 800d960:	690c      	ldr	r4, [r1, #16]
 800d962:	42a3      	cmp	r3, r4
 800d964:	4607      	mov	r7, r0
 800d966:	db7e      	blt.n	800da66 <quorem+0x10c>
 800d968:	3c01      	subs	r4, #1
 800d96a:	f101 0814 	add.w	r8, r1, #20
 800d96e:	f100 0514 	add.w	r5, r0, #20
 800d972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d976:	9301      	str	r3, [sp, #4]
 800d978:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d97c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d980:	3301      	adds	r3, #1
 800d982:	429a      	cmp	r2, r3
 800d984:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d988:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d98c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d990:	d331      	bcc.n	800d9f6 <quorem+0x9c>
 800d992:	f04f 0e00 	mov.w	lr, #0
 800d996:	4640      	mov	r0, r8
 800d998:	46ac      	mov	ip, r5
 800d99a:	46f2      	mov	sl, lr
 800d99c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d9a0:	b293      	uxth	r3, r2
 800d9a2:	fb06 e303 	mla	r3, r6, r3, lr
 800d9a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d9aa:	0c1a      	lsrs	r2, r3, #16
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	ebaa 0303 	sub.w	r3, sl, r3
 800d9b2:	f8dc a000 	ldr.w	sl, [ip]
 800d9b6:	fa13 f38a 	uxtah	r3, r3, sl
 800d9ba:	fb06 220e 	mla	r2, r6, lr, r2
 800d9be:	9300      	str	r3, [sp, #0]
 800d9c0:	9b00      	ldr	r3, [sp, #0]
 800d9c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d9c6:	b292      	uxth	r2, r2
 800d9c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d9cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9d0:	f8bd 3000 	ldrh.w	r3, [sp]
 800d9d4:	4581      	cmp	r9, r0
 800d9d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9da:	f84c 3b04 	str.w	r3, [ip], #4
 800d9de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d9e2:	d2db      	bcs.n	800d99c <quorem+0x42>
 800d9e4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d9e8:	b92b      	cbnz	r3, 800d9f6 <quorem+0x9c>
 800d9ea:	9b01      	ldr	r3, [sp, #4]
 800d9ec:	3b04      	subs	r3, #4
 800d9ee:	429d      	cmp	r5, r3
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	d32c      	bcc.n	800da4e <quorem+0xf4>
 800d9f4:	613c      	str	r4, [r7, #16]
 800d9f6:	4638      	mov	r0, r7
 800d9f8:	f001 fb62 	bl	800f0c0 <__mcmp>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	db22      	blt.n	800da46 <quorem+0xec>
 800da00:	3601      	adds	r6, #1
 800da02:	4629      	mov	r1, r5
 800da04:	2000      	movs	r0, #0
 800da06:	f858 2b04 	ldr.w	r2, [r8], #4
 800da0a:	f8d1 c000 	ldr.w	ip, [r1]
 800da0e:	b293      	uxth	r3, r2
 800da10:	1ac3      	subs	r3, r0, r3
 800da12:	0c12      	lsrs	r2, r2, #16
 800da14:	fa13 f38c 	uxtah	r3, r3, ip
 800da18:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800da1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da20:	b29b      	uxth	r3, r3
 800da22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da26:	45c1      	cmp	r9, r8
 800da28:	f841 3b04 	str.w	r3, [r1], #4
 800da2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800da30:	d2e9      	bcs.n	800da06 <quorem+0xac>
 800da32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da3a:	b922      	cbnz	r2, 800da46 <quorem+0xec>
 800da3c:	3b04      	subs	r3, #4
 800da3e:	429d      	cmp	r5, r3
 800da40:	461a      	mov	r2, r3
 800da42:	d30a      	bcc.n	800da5a <quorem+0x100>
 800da44:	613c      	str	r4, [r7, #16]
 800da46:	4630      	mov	r0, r6
 800da48:	b003      	add	sp, #12
 800da4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da4e:	6812      	ldr	r2, [r2, #0]
 800da50:	3b04      	subs	r3, #4
 800da52:	2a00      	cmp	r2, #0
 800da54:	d1ce      	bne.n	800d9f4 <quorem+0x9a>
 800da56:	3c01      	subs	r4, #1
 800da58:	e7c9      	b.n	800d9ee <quorem+0x94>
 800da5a:	6812      	ldr	r2, [r2, #0]
 800da5c:	3b04      	subs	r3, #4
 800da5e:	2a00      	cmp	r2, #0
 800da60:	d1f0      	bne.n	800da44 <quorem+0xea>
 800da62:	3c01      	subs	r4, #1
 800da64:	e7eb      	b.n	800da3e <quorem+0xe4>
 800da66:	2000      	movs	r0, #0
 800da68:	e7ee      	b.n	800da48 <quorem+0xee>
 800da6a:	0000      	movs	r0, r0
 800da6c:	0000      	movs	r0, r0
	...

0800da70 <_dtoa_r>:
 800da70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da74:	ed2d 8b04 	vpush	{d8-d9}
 800da78:	69c5      	ldr	r5, [r0, #28]
 800da7a:	b093      	sub	sp, #76	; 0x4c
 800da7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800da80:	ec57 6b10 	vmov	r6, r7, d0
 800da84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800da88:	9107      	str	r1, [sp, #28]
 800da8a:	4604      	mov	r4, r0
 800da8c:	920a      	str	r2, [sp, #40]	; 0x28
 800da8e:	930d      	str	r3, [sp, #52]	; 0x34
 800da90:	b975      	cbnz	r5, 800dab0 <_dtoa_r+0x40>
 800da92:	2010      	movs	r0, #16
 800da94:	f000 ff36 	bl	800e904 <malloc>
 800da98:	4602      	mov	r2, r0
 800da9a:	61e0      	str	r0, [r4, #28]
 800da9c:	b920      	cbnz	r0, 800daa8 <_dtoa_r+0x38>
 800da9e:	4bae      	ldr	r3, [pc, #696]	; (800dd58 <_dtoa_r+0x2e8>)
 800daa0:	21ef      	movs	r1, #239	; 0xef
 800daa2:	48ae      	ldr	r0, [pc, #696]	; (800dd5c <_dtoa_r+0x2ec>)
 800daa4:	f001 fcee 	bl	800f484 <__assert_func>
 800daa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800daac:	6005      	str	r5, [r0, #0]
 800daae:	60c5      	str	r5, [r0, #12]
 800dab0:	69e3      	ldr	r3, [r4, #28]
 800dab2:	6819      	ldr	r1, [r3, #0]
 800dab4:	b151      	cbz	r1, 800dacc <_dtoa_r+0x5c>
 800dab6:	685a      	ldr	r2, [r3, #4]
 800dab8:	604a      	str	r2, [r1, #4]
 800daba:	2301      	movs	r3, #1
 800dabc:	4093      	lsls	r3, r2
 800dabe:	608b      	str	r3, [r1, #8]
 800dac0:	4620      	mov	r0, r4
 800dac2:	f001 f8c1 	bl	800ec48 <_Bfree>
 800dac6:	69e3      	ldr	r3, [r4, #28]
 800dac8:	2200      	movs	r2, #0
 800daca:	601a      	str	r2, [r3, #0]
 800dacc:	1e3b      	subs	r3, r7, #0
 800dace:	bfbb      	ittet	lt
 800dad0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dad4:	9303      	strlt	r3, [sp, #12]
 800dad6:	2300      	movge	r3, #0
 800dad8:	2201      	movlt	r2, #1
 800dada:	bfac      	ite	ge
 800dadc:	f8c8 3000 	strge.w	r3, [r8]
 800dae0:	f8c8 2000 	strlt.w	r2, [r8]
 800dae4:	4b9e      	ldr	r3, [pc, #632]	; (800dd60 <_dtoa_r+0x2f0>)
 800dae6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800daea:	ea33 0308 	bics.w	r3, r3, r8
 800daee:	d11b      	bne.n	800db28 <_dtoa_r+0xb8>
 800daf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800daf2:	f242 730f 	movw	r3, #9999	; 0x270f
 800daf6:	6013      	str	r3, [r2, #0]
 800daf8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dafc:	4333      	orrs	r3, r6
 800dafe:	f000 8593 	beq.w	800e628 <_dtoa_r+0xbb8>
 800db02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db04:	b963      	cbnz	r3, 800db20 <_dtoa_r+0xb0>
 800db06:	4b97      	ldr	r3, [pc, #604]	; (800dd64 <_dtoa_r+0x2f4>)
 800db08:	e027      	b.n	800db5a <_dtoa_r+0xea>
 800db0a:	4b97      	ldr	r3, [pc, #604]	; (800dd68 <_dtoa_r+0x2f8>)
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	3308      	adds	r3, #8
 800db10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db12:	6013      	str	r3, [r2, #0]
 800db14:	9800      	ldr	r0, [sp, #0]
 800db16:	b013      	add	sp, #76	; 0x4c
 800db18:	ecbd 8b04 	vpop	{d8-d9}
 800db1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db20:	4b90      	ldr	r3, [pc, #576]	; (800dd64 <_dtoa_r+0x2f4>)
 800db22:	9300      	str	r3, [sp, #0]
 800db24:	3303      	adds	r3, #3
 800db26:	e7f3      	b.n	800db10 <_dtoa_r+0xa0>
 800db28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db2c:	2200      	movs	r2, #0
 800db2e:	ec51 0b17 	vmov	r0, r1, d7
 800db32:	eeb0 8a47 	vmov.f32	s16, s14
 800db36:	eef0 8a67 	vmov.f32	s17, s15
 800db3a:	2300      	movs	r3, #0
 800db3c:	f7f2 ffc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800db40:	4681      	mov	r9, r0
 800db42:	b160      	cbz	r0, 800db5e <_dtoa_r+0xee>
 800db44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db46:	2301      	movs	r3, #1
 800db48:	6013      	str	r3, [r2, #0]
 800db4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	f000 8568 	beq.w	800e622 <_dtoa_r+0xbb2>
 800db52:	4b86      	ldr	r3, [pc, #536]	; (800dd6c <_dtoa_r+0x2fc>)
 800db54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db56:	6013      	str	r3, [r2, #0]
 800db58:	3b01      	subs	r3, #1
 800db5a:	9300      	str	r3, [sp, #0]
 800db5c:	e7da      	b.n	800db14 <_dtoa_r+0xa4>
 800db5e:	aa10      	add	r2, sp, #64	; 0x40
 800db60:	a911      	add	r1, sp, #68	; 0x44
 800db62:	4620      	mov	r0, r4
 800db64:	eeb0 0a48 	vmov.f32	s0, s16
 800db68:	eef0 0a68 	vmov.f32	s1, s17
 800db6c:	f001 fb4e 	bl	800f20c <__d2b>
 800db70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800db74:	4682      	mov	sl, r0
 800db76:	2d00      	cmp	r5, #0
 800db78:	d07f      	beq.n	800dc7a <_dtoa_r+0x20a>
 800db7a:	ee18 3a90 	vmov	r3, s17
 800db7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800db86:	ec51 0b18 	vmov	r0, r1, d8
 800db8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800db8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800db92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800db96:	4619      	mov	r1, r3
 800db98:	2200      	movs	r2, #0
 800db9a:	4b75      	ldr	r3, [pc, #468]	; (800dd70 <_dtoa_r+0x300>)
 800db9c:	f7f2 fb74 	bl	8000288 <__aeabi_dsub>
 800dba0:	a367      	add	r3, pc, #412	; (adr r3, 800dd40 <_dtoa_r+0x2d0>)
 800dba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba6:	f7f2 fd27 	bl	80005f8 <__aeabi_dmul>
 800dbaa:	a367      	add	r3, pc, #412	; (adr r3, 800dd48 <_dtoa_r+0x2d8>)
 800dbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb0:	f7f2 fb6c 	bl	800028c <__adddf3>
 800dbb4:	4606      	mov	r6, r0
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	460f      	mov	r7, r1
 800dbba:	f7f2 fcb3 	bl	8000524 <__aeabi_i2d>
 800dbbe:	a364      	add	r3, pc, #400	; (adr r3, 800dd50 <_dtoa_r+0x2e0>)
 800dbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc4:	f7f2 fd18 	bl	80005f8 <__aeabi_dmul>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	460b      	mov	r3, r1
 800dbcc:	4630      	mov	r0, r6
 800dbce:	4639      	mov	r1, r7
 800dbd0:	f7f2 fb5c 	bl	800028c <__adddf3>
 800dbd4:	4606      	mov	r6, r0
 800dbd6:	460f      	mov	r7, r1
 800dbd8:	f7f2 ffbe 	bl	8000b58 <__aeabi_d2iz>
 800dbdc:	2200      	movs	r2, #0
 800dbde:	4683      	mov	fp, r0
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	4639      	mov	r1, r7
 800dbe6:	f7f2 ff79 	bl	8000adc <__aeabi_dcmplt>
 800dbea:	b148      	cbz	r0, 800dc00 <_dtoa_r+0x190>
 800dbec:	4658      	mov	r0, fp
 800dbee:	f7f2 fc99 	bl	8000524 <__aeabi_i2d>
 800dbf2:	4632      	mov	r2, r6
 800dbf4:	463b      	mov	r3, r7
 800dbf6:	f7f2 ff67 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbfa:	b908      	cbnz	r0, 800dc00 <_dtoa_r+0x190>
 800dbfc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dc00:	f1bb 0f16 	cmp.w	fp, #22
 800dc04:	d857      	bhi.n	800dcb6 <_dtoa_r+0x246>
 800dc06:	4b5b      	ldr	r3, [pc, #364]	; (800dd74 <_dtoa_r+0x304>)
 800dc08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc10:	ec51 0b18 	vmov	r0, r1, d8
 800dc14:	f7f2 ff62 	bl	8000adc <__aeabi_dcmplt>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	d04e      	beq.n	800dcba <_dtoa_r+0x24a>
 800dc1c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dc20:	2300      	movs	r3, #0
 800dc22:	930c      	str	r3, [sp, #48]	; 0x30
 800dc24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc26:	1b5b      	subs	r3, r3, r5
 800dc28:	1e5a      	subs	r2, r3, #1
 800dc2a:	bf45      	ittet	mi
 800dc2c:	f1c3 0301 	rsbmi	r3, r3, #1
 800dc30:	9305      	strmi	r3, [sp, #20]
 800dc32:	2300      	movpl	r3, #0
 800dc34:	2300      	movmi	r3, #0
 800dc36:	9206      	str	r2, [sp, #24]
 800dc38:	bf54      	ite	pl
 800dc3a:	9305      	strpl	r3, [sp, #20]
 800dc3c:	9306      	strmi	r3, [sp, #24]
 800dc3e:	f1bb 0f00 	cmp.w	fp, #0
 800dc42:	db3c      	blt.n	800dcbe <_dtoa_r+0x24e>
 800dc44:	9b06      	ldr	r3, [sp, #24]
 800dc46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800dc4a:	445b      	add	r3, fp
 800dc4c:	9306      	str	r3, [sp, #24]
 800dc4e:	2300      	movs	r3, #0
 800dc50:	9308      	str	r3, [sp, #32]
 800dc52:	9b07      	ldr	r3, [sp, #28]
 800dc54:	2b09      	cmp	r3, #9
 800dc56:	d868      	bhi.n	800dd2a <_dtoa_r+0x2ba>
 800dc58:	2b05      	cmp	r3, #5
 800dc5a:	bfc4      	itt	gt
 800dc5c:	3b04      	subgt	r3, #4
 800dc5e:	9307      	strgt	r3, [sp, #28]
 800dc60:	9b07      	ldr	r3, [sp, #28]
 800dc62:	f1a3 0302 	sub.w	r3, r3, #2
 800dc66:	bfcc      	ite	gt
 800dc68:	2500      	movgt	r5, #0
 800dc6a:	2501      	movle	r5, #1
 800dc6c:	2b03      	cmp	r3, #3
 800dc6e:	f200 8085 	bhi.w	800dd7c <_dtoa_r+0x30c>
 800dc72:	e8df f003 	tbb	[pc, r3]
 800dc76:	3b2e      	.short	0x3b2e
 800dc78:	5839      	.short	0x5839
 800dc7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dc7e:	441d      	add	r5, r3
 800dc80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dc84:	2b20      	cmp	r3, #32
 800dc86:	bfc1      	itttt	gt
 800dc88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dc8c:	fa08 f803 	lslgt.w	r8, r8, r3
 800dc90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dc94:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dc98:	bfd6      	itet	le
 800dc9a:	f1c3 0320 	rsble	r3, r3, #32
 800dc9e:	ea48 0003 	orrgt.w	r0, r8, r3
 800dca2:	fa06 f003 	lslle.w	r0, r6, r3
 800dca6:	f7f2 fc2d 	bl	8000504 <__aeabi_ui2d>
 800dcaa:	2201      	movs	r2, #1
 800dcac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800dcb0:	3d01      	subs	r5, #1
 800dcb2:	920e      	str	r2, [sp, #56]	; 0x38
 800dcb4:	e76f      	b.n	800db96 <_dtoa_r+0x126>
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	e7b3      	b.n	800dc22 <_dtoa_r+0x1b2>
 800dcba:	900c      	str	r0, [sp, #48]	; 0x30
 800dcbc:	e7b2      	b.n	800dc24 <_dtoa_r+0x1b4>
 800dcbe:	9b05      	ldr	r3, [sp, #20]
 800dcc0:	eba3 030b 	sub.w	r3, r3, fp
 800dcc4:	9305      	str	r3, [sp, #20]
 800dcc6:	f1cb 0300 	rsb	r3, fp, #0
 800dcca:	9308      	str	r3, [sp, #32]
 800dccc:	2300      	movs	r3, #0
 800dcce:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcd0:	e7bf      	b.n	800dc52 <_dtoa_r+0x1e2>
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	9309      	str	r3, [sp, #36]	; 0x24
 800dcd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	dc52      	bgt.n	800dd82 <_dtoa_r+0x312>
 800dcdc:	2301      	movs	r3, #1
 800dcde:	9301      	str	r3, [sp, #4]
 800dce0:	9304      	str	r3, [sp, #16]
 800dce2:	461a      	mov	r2, r3
 800dce4:	920a      	str	r2, [sp, #40]	; 0x28
 800dce6:	e00b      	b.n	800dd00 <_dtoa_r+0x290>
 800dce8:	2301      	movs	r3, #1
 800dcea:	e7f3      	b.n	800dcd4 <_dtoa_r+0x264>
 800dcec:	2300      	movs	r3, #0
 800dcee:	9309      	str	r3, [sp, #36]	; 0x24
 800dcf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcf2:	445b      	add	r3, fp
 800dcf4:	9301      	str	r3, [sp, #4]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	9304      	str	r3, [sp, #16]
 800dcfc:	bfb8      	it	lt
 800dcfe:	2301      	movlt	r3, #1
 800dd00:	69e0      	ldr	r0, [r4, #28]
 800dd02:	2100      	movs	r1, #0
 800dd04:	2204      	movs	r2, #4
 800dd06:	f102 0614 	add.w	r6, r2, #20
 800dd0a:	429e      	cmp	r6, r3
 800dd0c:	d93d      	bls.n	800dd8a <_dtoa_r+0x31a>
 800dd0e:	6041      	str	r1, [r0, #4]
 800dd10:	4620      	mov	r0, r4
 800dd12:	f000 ff59 	bl	800ebc8 <_Balloc>
 800dd16:	9000      	str	r0, [sp, #0]
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	d139      	bne.n	800dd90 <_dtoa_r+0x320>
 800dd1c:	4b16      	ldr	r3, [pc, #88]	; (800dd78 <_dtoa_r+0x308>)
 800dd1e:	4602      	mov	r2, r0
 800dd20:	f240 11af 	movw	r1, #431	; 0x1af
 800dd24:	e6bd      	b.n	800daa2 <_dtoa_r+0x32>
 800dd26:	2301      	movs	r3, #1
 800dd28:	e7e1      	b.n	800dcee <_dtoa_r+0x27e>
 800dd2a:	2501      	movs	r5, #1
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	9307      	str	r3, [sp, #28]
 800dd30:	9509      	str	r5, [sp, #36]	; 0x24
 800dd32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd36:	9301      	str	r3, [sp, #4]
 800dd38:	9304      	str	r3, [sp, #16]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	2312      	movs	r3, #18
 800dd3e:	e7d1      	b.n	800dce4 <_dtoa_r+0x274>
 800dd40:	636f4361 	.word	0x636f4361
 800dd44:	3fd287a7 	.word	0x3fd287a7
 800dd48:	8b60c8b3 	.word	0x8b60c8b3
 800dd4c:	3fc68a28 	.word	0x3fc68a28
 800dd50:	509f79fb 	.word	0x509f79fb
 800dd54:	3fd34413 	.word	0x3fd34413
 800dd58:	080107fd 	.word	0x080107fd
 800dd5c:	08010814 	.word	0x08010814
 800dd60:	7ff00000 	.word	0x7ff00000
 800dd64:	080107f9 	.word	0x080107f9
 800dd68:	080107f0 	.word	0x080107f0
 800dd6c:	080107cd 	.word	0x080107cd
 800dd70:	3ff80000 	.word	0x3ff80000
 800dd74:	08010910 	.word	0x08010910
 800dd78:	0801086c 	.word	0x0801086c
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd80:	e7d7      	b.n	800dd32 <_dtoa_r+0x2c2>
 800dd82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd84:	9301      	str	r3, [sp, #4]
 800dd86:	9304      	str	r3, [sp, #16]
 800dd88:	e7ba      	b.n	800dd00 <_dtoa_r+0x290>
 800dd8a:	3101      	adds	r1, #1
 800dd8c:	0052      	lsls	r2, r2, #1
 800dd8e:	e7ba      	b.n	800dd06 <_dtoa_r+0x296>
 800dd90:	69e3      	ldr	r3, [r4, #28]
 800dd92:	9a00      	ldr	r2, [sp, #0]
 800dd94:	601a      	str	r2, [r3, #0]
 800dd96:	9b04      	ldr	r3, [sp, #16]
 800dd98:	2b0e      	cmp	r3, #14
 800dd9a:	f200 80a8 	bhi.w	800deee <_dtoa_r+0x47e>
 800dd9e:	2d00      	cmp	r5, #0
 800dda0:	f000 80a5 	beq.w	800deee <_dtoa_r+0x47e>
 800dda4:	f1bb 0f00 	cmp.w	fp, #0
 800dda8:	dd38      	ble.n	800de1c <_dtoa_r+0x3ac>
 800ddaa:	4bc0      	ldr	r3, [pc, #768]	; (800e0ac <_dtoa_r+0x63c>)
 800ddac:	f00b 020f 	and.w	r2, fp, #15
 800ddb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ddb8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ddbc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ddc0:	d019      	beq.n	800ddf6 <_dtoa_r+0x386>
 800ddc2:	4bbb      	ldr	r3, [pc, #748]	; (800e0b0 <_dtoa_r+0x640>)
 800ddc4:	ec51 0b18 	vmov	r0, r1, d8
 800ddc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ddcc:	f7f2 fd3e 	bl	800084c <__aeabi_ddiv>
 800ddd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddd4:	f008 080f 	and.w	r8, r8, #15
 800ddd8:	2503      	movs	r5, #3
 800ddda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e0b0 <_dtoa_r+0x640>
 800ddde:	f1b8 0f00 	cmp.w	r8, #0
 800dde2:	d10a      	bne.n	800ddfa <_dtoa_r+0x38a>
 800dde4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dde8:	4632      	mov	r2, r6
 800ddea:	463b      	mov	r3, r7
 800ddec:	f7f2 fd2e 	bl	800084c <__aeabi_ddiv>
 800ddf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddf4:	e02b      	b.n	800de4e <_dtoa_r+0x3de>
 800ddf6:	2502      	movs	r5, #2
 800ddf8:	e7ef      	b.n	800ddda <_dtoa_r+0x36a>
 800ddfa:	f018 0f01 	tst.w	r8, #1
 800ddfe:	d008      	beq.n	800de12 <_dtoa_r+0x3a2>
 800de00:	4630      	mov	r0, r6
 800de02:	4639      	mov	r1, r7
 800de04:	e9d9 2300 	ldrd	r2, r3, [r9]
 800de08:	f7f2 fbf6 	bl	80005f8 <__aeabi_dmul>
 800de0c:	3501      	adds	r5, #1
 800de0e:	4606      	mov	r6, r0
 800de10:	460f      	mov	r7, r1
 800de12:	ea4f 0868 	mov.w	r8, r8, asr #1
 800de16:	f109 0908 	add.w	r9, r9, #8
 800de1a:	e7e0      	b.n	800ddde <_dtoa_r+0x36e>
 800de1c:	f000 809f 	beq.w	800df5e <_dtoa_r+0x4ee>
 800de20:	f1cb 0600 	rsb	r6, fp, #0
 800de24:	4ba1      	ldr	r3, [pc, #644]	; (800e0ac <_dtoa_r+0x63c>)
 800de26:	4fa2      	ldr	r7, [pc, #648]	; (800e0b0 <_dtoa_r+0x640>)
 800de28:	f006 020f 	and.w	r2, r6, #15
 800de2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de34:	ec51 0b18 	vmov	r0, r1, d8
 800de38:	f7f2 fbde 	bl	80005f8 <__aeabi_dmul>
 800de3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de40:	1136      	asrs	r6, r6, #4
 800de42:	2300      	movs	r3, #0
 800de44:	2502      	movs	r5, #2
 800de46:	2e00      	cmp	r6, #0
 800de48:	d17e      	bne.n	800df48 <_dtoa_r+0x4d8>
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1d0      	bne.n	800ddf0 <_dtoa_r+0x380>
 800de4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800de54:	2b00      	cmp	r3, #0
 800de56:	f000 8084 	beq.w	800df62 <_dtoa_r+0x4f2>
 800de5a:	4b96      	ldr	r3, [pc, #600]	; (800e0b4 <_dtoa_r+0x644>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	4640      	mov	r0, r8
 800de60:	4649      	mov	r1, r9
 800de62:	f7f2 fe3b 	bl	8000adc <__aeabi_dcmplt>
 800de66:	2800      	cmp	r0, #0
 800de68:	d07b      	beq.n	800df62 <_dtoa_r+0x4f2>
 800de6a:	9b04      	ldr	r3, [sp, #16]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d078      	beq.n	800df62 <_dtoa_r+0x4f2>
 800de70:	9b01      	ldr	r3, [sp, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	dd39      	ble.n	800deea <_dtoa_r+0x47a>
 800de76:	4b90      	ldr	r3, [pc, #576]	; (800e0b8 <_dtoa_r+0x648>)
 800de78:	2200      	movs	r2, #0
 800de7a:	4640      	mov	r0, r8
 800de7c:	4649      	mov	r1, r9
 800de7e:	f7f2 fbbb 	bl	80005f8 <__aeabi_dmul>
 800de82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de86:	9e01      	ldr	r6, [sp, #4]
 800de88:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800de8c:	3501      	adds	r5, #1
 800de8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800de92:	4628      	mov	r0, r5
 800de94:	f7f2 fb46 	bl	8000524 <__aeabi_i2d>
 800de98:	4642      	mov	r2, r8
 800de9a:	464b      	mov	r3, r9
 800de9c:	f7f2 fbac 	bl	80005f8 <__aeabi_dmul>
 800dea0:	4b86      	ldr	r3, [pc, #536]	; (800e0bc <_dtoa_r+0x64c>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	f7f2 f9f2 	bl	800028c <__adddf3>
 800dea8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800deac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800deb0:	9303      	str	r3, [sp, #12]
 800deb2:	2e00      	cmp	r6, #0
 800deb4:	d158      	bne.n	800df68 <_dtoa_r+0x4f8>
 800deb6:	4b82      	ldr	r3, [pc, #520]	; (800e0c0 <_dtoa_r+0x650>)
 800deb8:	2200      	movs	r2, #0
 800deba:	4640      	mov	r0, r8
 800debc:	4649      	mov	r1, r9
 800debe:	f7f2 f9e3 	bl	8000288 <__aeabi_dsub>
 800dec2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dec6:	4680      	mov	r8, r0
 800dec8:	4689      	mov	r9, r1
 800deca:	f7f2 fe25 	bl	8000b18 <__aeabi_dcmpgt>
 800dece:	2800      	cmp	r0, #0
 800ded0:	f040 8296 	bne.w	800e400 <_dtoa_r+0x990>
 800ded4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ded8:	4640      	mov	r0, r8
 800deda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dede:	4649      	mov	r1, r9
 800dee0:	f7f2 fdfc 	bl	8000adc <__aeabi_dcmplt>
 800dee4:	2800      	cmp	r0, #0
 800dee6:	f040 8289 	bne.w	800e3fc <_dtoa_r+0x98c>
 800deea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800deee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800def0:	2b00      	cmp	r3, #0
 800def2:	f2c0 814e 	blt.w	800e192 <_dtoa_r+0x722>
 800def6:	f1bb 0f0e 	cmp.w	fp, #14
 800defa:	f300 814a 	bgt.w	800e192 <_dtoa_r+0x722>
 800defe:	4b6b      	ldr	r3, [pc, #428]	; (800e0ac <_dtoa_r+0x63c>)
 800df00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800df04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f280 80dc 	bge.w	800e0c8 <_dtoa_r+0x658>
 800df10:	9b04      	ldr	r3, [sp, #16]
 800df12:	2b00      	cmp	r3, #0
 800df14:	f300 80d8 	bgt.w	800e0c8 <_dtoa_r+0x658>
 800df18:	f040 826f 	bne.w	800e3fa <_dtoa_r+0x98a>
 800df1c:	4b68      	ldr	r3, [pc, #416]	; (800e0c0 <_dtoa_r+0x650>)
 800df1e:	2200      	movs	r2, #0
 800df20:	4640      	mov	r0, r8
 800df22:	4649      	mov	r1, r9
 800df24:	f7f2 fb68 	bl	80005f8 <__aeabi_dmul>
 800df28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df2c:	f7f2 fdea 	bl	8000b04 <__aeabi_dcmpge>
 800df30:	9e04      	ldr	r6, [sp, #16]
 800df32:	4637      	mov	r7, r6
 800df34:	2800      	cmp	r0, #0
 800df36:	f040 8245 	bne.w	800e3c4 <_dtoa_r+0x954>
 800df3a:	9d00      	ldr	r5, [sp, #0]
 800df3c:	2331      	movs	r3, #49	; 0x31
 800df3e:	f805 3b01 	strb.w	r3, [r5], #1
 800df42:	f10b 0b01 	add.w	fp, fp, #1
 800df46:	e241      	b.n	800e3cc <_dtoa_r+0x95c>
 800df48:	07f2      	lsls	r2, r6, #31
 800df4a:	d505      	bpl.n	800df58 <_dtoa_r+0x4e8>
 800df4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df50:	f7f2 fb52 	bl	80005f8 <__aeabi_dmul>
 800df54:	3501      	adds	r5, #1
 800df56:	2301      	movs	r3, #1
 800df58:	1076      	asrs	r6, r6, #1
 800df5a:	3708      	adds	r7, #8
 800df5c:	e773      	b.n	800de46 <_dtoa_r+0x3d6>
 800df5e:	2502      	movs	r5, #2
 800df60:	e775      	b.n	800de4e <_dtoa_r+0x3de>
 800df62:	9e04      	ldr	r6, [sp, #16]
 800df64:	465f      	mov	r7, fp
 800df66:	e792      	b.n	800de8e <_dtoa_r+0x41e>
 800df68:	9900      	ldr	r1, [sp, #0]
 800df6a:	4b50      	ldr	r3, [pc, #320]	; (800e0ac <_dtoa_r+0x63c>)
 800df6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df70:	4431      	add	r1, r6
 800df72:	9102      	str	r1, [sp, #8]
 800df74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df76:	eeb0 9a47 	vmov.f32	s18, s14
 800df7a:	eef0 9a67 	vmov.f32	s19, s15
 800df7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800df82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800df86:	2900      	cmp	r1, #0
 800df88:	d044      	beq.n	800e014 <_dtoa_r+0x5a4>
 800df8a:	494e      	ldr	r1, [pc, #312]	; (800e0c4 <_dtoa_r+0x654>)
 800df8c:	2000      	movs	r0, #0
 800df8e:	f7f2 fc5d 	bl	800084c <__aeabi_ddiv>
 800df92:	ec53 2b19 	vmov	r2, r3, d9
 800df96:	f7f2 f977 	bl	8000288 <__aeabi_dsub>
 800df9a:	9d00      	ldr	r5, [sp, #0]
 800df9c:	ec41 0b19 	vmov	d9, r0, r1
 800dfa0:	4649      	mov	r1, r9
 800dfa2:	4640      	mov	r0, r8
 800dfa4:	f7f2 fdd8 	bl	8000b58 <__aeabi_d2iz>
 800dfa8:	4606      	mov	r6, r0
 800dfaa:	f7f2 fabb 	bl	8000524 <__aeabi_i2d>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	4640      	mov	r0, r8
 800dfb4:	4649      	mov	r1, r9
 800dfb6:	f7f2 f967 	bl	8000288 <__aeabi_dsub>
 800dfba:	3630      	adds	r6, #48	; 0x30
 800dfbc:	f805 6b01 	strb.w	r6, [r5], #1
 800dfc0:	ec53 2b19 	vmov	r2, r3, d9
 800dfc4:	4680      	mov	r8, r0
 800dfc6:	4689      	mov	r9, r1
 800dfc8:	f7f2 fd88 	bl	8000adc <__aeabi_dcmplt>
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	d164      	bne.n	800e09a <_dtoa_r+0x62a>
 800dfd0:	4642      	mov	r2, r8
 800dfd2:	464b      	mov	r3, r9
 800dfd4:	4937      	ldr	r1, [pc, #220]	; (800e0b4 <_dtoa_r+0x644>)
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	f7f2 f956 	bl	8000288 <__aeabi_dsub>
 800dfdc:	ec53 2b19 	vmov	r2, r3, d9
 800dfe0:	f7f2 fd7c 	bl	8000adc <__aeabi_dcmplt>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	f040 80b6 	bne.w	800e156 <_dtoa_r+0x6e6>
 800dfea:	9b02      	ldr	r3, [sp, #8]
 800dfec:	429d      	cmp	r5, r3
 800dfee:	f43f af7c 	beq.w	800deea <_dtoa_r+0x47a>
 800dff2:	4b31      	ldr	r3, [pc, #196]	; (800e0b8 <_dtoa_r+0x648>)
 800dff4:	ec51 0b19 	vmov	r0, r1, d9
 800dff8:	2200      	movs	r2, #0
 800dffa:	f7f2 fafd 	bl	80005f8 <__aeabi_dmul>
 800dffe:	4b2e      	ldr	r3, [pc, #184]	; (800e0b8 <_dtoa_r+0x648>)
 800e000:	ec41 0b19 	vmov	d9, r0, r1
 800e004:	2200      	movs	r2, #0
 800e006:	4640      	mov	r0, r8
 800e008:	4649      	mov	r1, r9
 800e00a:	f7f2 faf5 	bl	80005f8 <__aeabi_dmul>
 800e00e:	4680      	mov	r8, r0
 800e010:	4689      	mov	r9, r1
 800e012:	e7c5      	b.n	800dfa0 <_dtoa_r+0x530>
 800e014:	ec51 0b17 	vmov	r0, r1, d7
 800e018:	f7f2 faee 	bl	80005f8 <__aeabi_dmul>
 800e01c:	9b02      	ldr	r3, [sp, #8]
 800e01e:	9d00      	ldr	r5, [sp, #0]
 800e020:	930f      	str	r3, [sp, #60]	; 0x3c
 800e022:	ec41 0b19 	vmov	d9, r0, r1
 800e026:	4649      	mov	r1, r9
 800e028:	4640      	mov	r0, r8
 800e02a:	f7f2 fd95 	bl	8000b58 <__aeabi_d2iz>
 800e02e:	4606      	mov	r6, r0
 800e030:	f7f2 fa78 	bl	8000524 <__aeabi_i2d>
 800e034:	3630      	adds	r6, #48	; 0x30
 800e036:	4602      	mov	r2, r0
 800e038:	460b      	mov	r3, r1
 800e03a:	4640      	mov	r0, r8
 800e03c:	4649      	mov	r1, r9
 800e03e:	f7f2 f923 	bl	8000288 <__aeabi_dsub>
 800e042:	f805 6b01 	strb.w	r6, [r5], #1
 800e046:	9b02      	ldr	r3, [sp, #8]
 800e048:	429d      	cmp	r5, r3
 800e04a:	4680      	mov	r8, r0
 800e04c:	4689      	mov	r9, r1
 800e04e:	f04f 0200 	mov.w	r2, #0
 800e052:	d124      	bne.n	800e09e <_dtoa_r+0x62e>
 800e054:	4b1b      	ldr	r3, [pc, #108]	; (800e0c4 <_dtoa_r+0x654>)
 800e056:	ec51 0b19 	vmov	r0, r1, d9
 800e05a:	f7f2 f917 	bl	800028c <__adddf3>
 800e05e:	4602      	mov	r2, r0
 800e060:	460b      	mov	r3, r1
 800e062:	4640      	mov	r0, r8
 800e064:	4649      	mov	r1, r9
 800e066:	f7f2 fd57 	bl	8000b18 <__aeabi_dcmpgt>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	d173      	bne.n	800e156 <_dtoa_r+0x6e6>
 800e06e:	ec53 2b19 	vmov	r2, r3, d9
 800e072:	4914      	ldr	r1, [pc, #80]	; (800e0c4 <_dtoa_r+0x654>)
 800e074:	2000      	movs	r0, #0
 800e076:	f7f2 f907 	bl	8000288 <__aeabi_dsub>
 800e07a:	4602      	mov	r2, r0
 800e07c:	460b      	mov	r3, r1
 800e07e:	4640      	mov	r0, r8
 800e080:	4649      	mov	r1, r9
 800e082:	f7f2 fd2b 	bl	8000adc <__aeabi_dcmplt>
 800e086:	2800      	cmp	r0, #0
 800e088:	f43f af2f 	beq.w	800deea <_dtoa_r+0x47a>
 800e08c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e08e:	1e6b      	subs	r3, r5, #1
 800e090:	930f      	str	r3, [sp, #60]	; 0x3c
 800e092:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e096:	2b30      	cmp	r3, #48	; 0x30
 800e098:	d0f8      	beq.n	800e08c <_dtoa_r+0x61c>
 800e09a:	46bb      	mov	fp, r7
 800e09c:	e04a      	b.n	800e134 <_dtoa_r+0x6c4>
 800e09e:	4b06      	ldr	r3, [pc, #24]	; (800e0b8 <_dtoa_r+0x648>)
 800e0a0:	f7f2 faaa 	bl	80005f8 <__aeabi_dmul>
 800e0a4:	4680      	mov	r8, r0
 800e0a6:	4689      	mov	r9, r1
 800e0a8:	e7bd      	b.n	800e026 <_dtoa_r+0x5b6>
 800e0aa:	bf00      	nop
 800e0ac:	08010910 	.word	0x08010910
 800e0b0:	080108e8 	.word	0x080108e8
 800e0b4:	3ff00000 	.word	0x3ff00000
 800e0b8:	40240000 	.word	0x40240000
 800e0bc:	401c0000 	.word	0x401c0000
 800e0c0:	40140000 	.word	0x40140000
 800e0c4:	3fe00000 	.word	0x3fe00000
 800e0c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e0cc:	9d00      	ldr	r5, [sp, #0]
 800e0ce:	4642      	mov	r2, r8
 800e0d0:	464b      	mov	r3, r9
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	4639      	mov	r1, r7
 800e0d6:	f7f2 fbb9 	bl	800084c <__aeabi_ddiv>
 800e0da:	f7f2 fd3d 	bl	8000b58 <__aeabi_d2iz>
 800e0de:	9001      	str	r0, [sp, #4]
 800e0e0:	f7f2 fa20 	bl	8000524 <__aeabi_i2d>
 800e0e4:	4642      	mov	r2, r8
 800e0e6:	464b      	mov	r3, r9
 800e0e8:	f7f2 fa86 	bl	80005f8 <__aeabi_dmul>
 800e0ec:	4602      	mov	r2, r0
 800e0ee:	460b      	mov	r3, r1
 800e0f0:	4630      	mov	r0, r6
 800e0f2:	4639      	mov	r1, r7
 800e0f4:	f7f2 f8c8 	bl	8000288 <__aeabi_dsub>
 800e0f8:	9e01      	ldr	r6, [sp, #4]
 800e0fa:	9f04      	ldr	r7, [sp, #16]
 800e0fc:	3630      	adds	r6, #48	; 0x30
 800e0fe:	f805 6b01 	strb.w	r6, [r5], #1
 800e102:	9e00      	ldr	r6, [sp, #0]
 800e104:	1bae      	subs	r6, r5, r6
 800e106:	42b7      	cmp	r7, r6
 800e108:	4602      	mov	r2, r0
 800e10a:	460b      	mov	r3, r1
 800e10c:	d134      	bne.n	800e178 <_dtoa_r+0x708>
 800e10e:	f7f2 f8bd 	bl	800028c <__adddf3>
 800e112:	4642      	mov	r2, r8
 800e114:	464b      	mov	r3, r9
 800e116:	4606      	mov	r6, r0
 800e118:	460f      	mov	r7, r1
 800e11a:	f7f2 fcfd 	bl	8000b18 <__aeabi_dcmpgt>
 800e11e:	b9c8      	cbnz	r0, 800e154 <_dtoa_r+0x6e4>
 800e120:	4642      	mov	r2, r8
 800e122:	464b      	mov	r3, r9
 800e124:	4630      	mov	r0, r6
 800e126:	4639      	mov	r1, r7
 800e128:	f7f2 fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 800e12c:	b110      	cbz	r0, 800e134 <_dtoa_r+0x6c4>
 800e12e:	9b01      	ldr	r3, [sp, #4]
 800e130:	07db      	lsls	r3, r3, #31
 800e132:	d40f      	bmi.n	800e154 <_dtoa_r+0x6e4>
 800e134:	4651      	mov	r1, sl
 800e136:	4620      	mov	r0, r4
 800e138:	f000 fd86 	bl	800ec48 <_Bfree>
 800e13c:	2300      	movs	r3, #0
 800e13e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e140:	702b      	strb	r3, [r5, #0]
 800e142:	f10b 0301 	add.w	r3, fp, #1
 800e146:	6013      	str	r3, [r2, #0]
 800e148:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	f43f ace2 	beq.w	800db14 <_dtoa_r+0xa4>
 800e150:	601d      	str	r5, [r3, #0]
 800e152:	e4df      	b.n	800db14 <_dtoa_r+0xa4>
 800e154:	465f      	mov	r7, fp
 800e156:	462b      	mov	r3, r5
 800e158:	461d      	mov	r5, r3
 800e15a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e15e:	2a39      	cmp	r2, #57	; 0x39
 800e160:	d106      	bne.n	800e170 <_dtoa_r+0x700>
 800e162:	9a00      	ldr	r2, [sp, #0]
 800e164:	429a      	cmp	r2, r3
 800e166:	d1f7      	bne.n	800e158 <_dtoa_r+0x6e8>
 800e168:	9900      	ldr	r1, [sp, #0]
 800e16a:	2230      	movs	r2, #48	; 0x30
 800e16c:	3701      	adds	r7, #1
 800e16e:	700a      	strb	r2, [r1, #0]
 800e170:	781a      	ldrb	r2, [r3, #0]
 800e172:	3201      	adds	r2, #1
 800e174:	701a      	strb	r2, [r3, #0]
 800e176:	e790      	b.n	800e09a <_dtoa_r+0x62a>
 800e178:	4ba3      	ldr	r3, [pc, #652]	; (800e408 <_dtoa_r+0x998>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	f7f2 fa3c 	bl	80005f8 <__aeabi_dmul>
 800e180:	2200      	movs	r2, #0
 800e182:	2300      	movs	r3, #0
 800e184:	4606      	mov	r6, r0
 800e186:	460f      	mov	r7, r1
 800e188:	f7f2 fc9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e18c:	2800      	cmp	r0, #0
 800e18e:	d09e      	beq.n	800e0ce <_dtoa_r+0x65e>
 800e190:	e7d0      	b.n	800e134 <_dtoa_r+0x6c4>
 800e192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e194:	2a00      	cmp	r2, #0
 800e196:	f000 80ca 	beq.w	800e32e <_dtoa_r+0x8be>
 800e19a:	9a07      	ldr	r2, [sp, #28]
 800e19c:	2a01      	cmp	r2, #1
 800e19e:	f300 80ad 	bgt.w	800e2fc <_dtoa_r+0x88c>
 800e1a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1a4:	2a00      	cmp	r2, #0
 800e1a6:	f000 80a5 	beq.w	800e2f4 <_dtoa_r+0x884>
 800e1aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e1ae:	9e08      	ldr	r6, [sp, #32]
 800e1b0:	9d05      	ldr	r5, [sp, #20]
 800e1b2:	9a05      	ldr	r2, [sp, #20]
 800e1b4:	441a      	add	r2, r3
 800e1b6:	9205      	str	r2, [sp, #20]
 800e1b8:	9a06      	ldr	r2, [sp, #24]
 800e1ba:	2101      	movs	r1, #1
 800e1bc:	441a      	add	r2, r3
 800e1be:	4620      	mov	r0, r4
 800e1c0:	9206      	str	r2, [sp, #24]
 800e1c2:	f000 fdf7 	bl	800edb4 <__i2b>
 800e1c6:	4607      	mov	r7, r0
 800e1c8:	b165      	cbz	r5, 800e1e4 <_dtoa_r+0x774>
 800e1ca:	9b06      	ldr	r3, [sp, #24]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	dd09      	ble.n	800e1e4 <_dtoa_r+0x774>
 800e1d0:	42ab      	cmp	r3, r5
 800e1d2:	9a05      	ldr	r2, [sp, #20]
 800e1d4:	bfa8      	it	ge
 800e1d6:	462b      	movge	r3, r5
 800e1d8:	1ad2      	subs	r2, r2, r3
 800e1da:	9205      	str	r2, [sp, #20]
 800e1dc:	9a06      	ldr	r2, [sp, #24]
 800e1de:	1aed      	subs	r5, r5, r3
 800e1e0:	1ad3      	subs	r3, r2, r3
 800e1e2:	9306      	str	r3, [sp, #24]
 800e1e4:	9b08      	ldr	r3, [sp, #32]
 800e1e6:	b1f3      	cbz	r3, 800e226 <_dtoa_r+0x7b6>
 800e1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	f000 80a3 	beq.w	800e336 <_dtoa_r+0x8c6>
 800e1f0:	2e00      	cmp	r6, #0
 800e1f2:	dd10      	ble.n	800e216 <_dtoa_r+0x7a6>
 800e1f4:	4639      	mov	r1, r7
 800e1f6:	4632      	mov	r2, r6
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f000 fe9b 	bl	800ef34 <__pow5mult>
 800e1fe:	4652      	mov	r2, sl
 800e200:	4601      	mov	r1, r0
 800e202:	4607      	mov	r7, r0
 800e204:	4620      	mov	r0, r4
 800e206:	f000 fdeb 	bl	800ede0 <__multiply>
 800e20a:	4651      	mov	r1, sl
 800e20c:	4680      	mov	r8, r0
 800e20e:	4620      	mov	r0, r4
 800e210:	f000 fd1a 	bl	800ec48 <_Bfree>
 800e214:	46c2      	mov	sl, r8
 800e216:	9b08      	ldr	r3, [sp, #32]
 800e218:	1b9a      	subs	r2, r3, r6
 800e21a:	d004      	beq.n	800e226 <_dtoa_r+0x7b6>
 800e21c:	4651      	mov	r1, sl
 800e21e:	4620      	mov	r0, r4
 800e220:	f000 fe88 	bl	800ef34 <__pow5mult>
 800e224:	4682      	mov	sl, r0
 800e226:	2101      	movs	r1, #1
 800e228:	4620      	mov	r0, r4
 800e22a:	f000 fdc3 	bl	800edb4 <__i2b>
 800e22e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e230:	2b00      	cmp	r3, #0
 800e232:	4606      	mov	r6, r0
 800e234:	f340 8081 	ble.w	800e33a <_dtoa_r+0x8ca>
 800e238:	461a      	mov	r2, r3
 800e23a:	4601      	mov	r1, r0
 800e23c:	4620      	mov	r0, r4
 800e23e:	f000 fe79 	bl	800ef34 <__pow5mult>
 800e242:	9b07      	ldr	r3, [sp, #28]
 800e244:	2b01      	cmp	r3, #1
 800e246:	4606      	mov	r6, r0
 800e248:	dd7a      	ble.n	800e340 <_dtoa_r+0x8d0>
 800e24a:	f04f 0800 	mov.w	r8, #0
 800e24e:	6933      	ldr	r3, [r6, #16]
 800e250:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e254:	6918      	ldr	r0, [r3, #16]
 800e256:	f000 fd5f 	bl	800ed18 <__hi0bits>
 800e25a:	f1c0 0020 	rsb	r0, r0, #32
 800e25e:	9b06      	ldr	r3, [sp, #24]
 800e260:	4418      	add	r0, r3
 800e262:	f010 001f 	ands.w	r0, r0, #31
 800e266:	f000 8094 	beq.w	800e392 <_dtoa_r+0x922>
 800e26a:	f1c0 0320 	rsb	r3, r0, #32
 800e26e:	2b04      	cmp	r3, #4
 800e270:	f340 8085 	ble.w	800e37e <_dtoa_r+0x90e>
 800e274:	9b05      	ldr	r3, [sp, #20]
 800e276:	f1c0 001c 	rsb	r0, r0, #28
 800e27a:	4403      	add	r3, r0
 800e27c:	9305      	str	r3, [sp, #20]
 800e27e:	9b06      	ldr	r3, [sp, #24]
 800e280:	4403      	add	r3, r0
 800e282:	4405      	add	r5, r0
 800e284:	9306      	str	r3, [sp, #24]
 800e286:	9b05      	ldr	r3, [sp, #20]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	dd05      	ble.n	800e298 <_dtoa_r+0x828>
 800e28c:	4651      	mov	r1, sl
 800e28e:	461a      	mov	r2, r3
 800e290:	4620      	mov	r0, r4
 800e292:	f000 fea9 	bl	800efe8 <__lshift>
 800e296:	4682      	mov	sl, r0
 800e298:	9b06      	ldr	r3, [sp, #24]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	dd05      	ble.n	800e2aa <_dtoa_r+0x83a>
 800e29e:	4631      	mov	r1, r6
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	f000 fea0 	bl	800efe8 <__lshift>
 800e2a8:	4606      	mov	r6, r0
 800e2aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d072      	beq.n	800e396 <_dtoa_r+0x926>
 800e2b0:	4631      	mov	r1, r6
 800e2b2:	4650      	mov	r0, sl
 800e2b4:	f000 ff04 	bl	800f0c0 <__mcmp>
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	da6c      	bge.n	800e396 <_dtoa_r+0x926>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	4651      	mov	r1, sl
 800e2c0:	220a      	movs	r2, #10
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f000 fce2 	bl	800ec8c <__multadd>
 800e2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e2ce:	4682      	mov	sl, r0
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	f000 81b0 	beq.w	800e636 <_dtoa_r+0xbc6>
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	4639      	mov	r1, r7
 800e2da:	220a      	movs	r2, #10
 800e2dc:	4620      	mov	r0, r4
 800e2de:	f000 fcd5 	bl	800ec8c <__multadd>
 800e2e2:	9b01      	ldr	r3, [sp, #4]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	4607      	mov	r7, r0
 800e2e8:	f300 8096 	bgt.w	800e418 <_dtoa_r+0x9a8>
 800e2ec:	9b07      	ldr	r3, [sp, #28]
 800e2ee:	2b02      	cmp	r3, #2
 800e2f0:	dc59      	bgt.n	800e3a6 <_dtoa_r+0x936>
 800e2f2:	e091      	b.n	800e418 <_dtoa_r+0x9a8>
 800e2f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e2fa:	e758      	b.n	800e1ae <_dtoa_r+0x73e>
 800e2fc:	9b04      	ldr	r3, [sp, #16]
 800e2fe:	1e5e      	subs	r6, r3, #1
 800e300:	9b08      	ldr	r3, [sp, #32]
 800e302:	42b3      	cmp	r3, r6
 800e304:	bfbf      	itttt	lt
 800e306:	9b08      	ldrlt	r3, [sp, #32]
 800e308:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e30a:	9608      	strlt	r6, [sp, #32]
 800e30c:	1af3      	sublt	r3, r6, r3
 800e30e:	bfb4      	ite	lt
 800e310:	18d2      	addlt	r2, r2, r3
 800e312:	1b9e      	subge	r6, r3, r6
 800e314:	9b04      	ldr	r3, [sp, #16]
 800e316:	bfbc      	itt	lt
 800e318:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e31a:	2600      	movlt	r6, #0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	bfb7      	itett	lt
 800e320:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e324:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e328:	1a9d      	sublt	r5, r3, r2
 800e32a:	2300      	movlt	r3, #0
 800e32c:	e741      	b.n	800e1b2 <_dtoa_r+0x742>
 800e32e:	9e08      	ldr	r6, [sp, #32]
 800e330:	9d05      	ldr	r5, [sp, #20]
 800e332:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e334:	e748      	b.n	800e1c8 <_dtoa_r+0x758>
 800e336:	9a08      	ldr	r2, [sp, #32]
 800e338:	e770      	b.n	800e21c <_dtoa_r+0x7ac>
 800e33a:	9b07      	ldr	r3, [sp, #28]
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	dc19      	bgt.n	800e374 <_dtoa_r+0x904>
 800e340:	9b02      	ldr	r3, [sp, #8]
 800e342:	b9bb      	cbnz	r3, 800e374 <_dtoa_r+0x904>
 800e344:	9b03      	ldr	r3, [sp, #12]
 800e346:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e34a:	b99b      	cbnz	r3, 800e374 <_dtoa_r+0x904>
 800e34c:	9b03      	ldr	r3, [sp, #12]
 800e34e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e352:	0d1b      	lsrs	r3, r3, #20
 800e354:	051b      	lsls	r3, r3, #20
 800e356:	b183      	cbz	r3, 800e37a <_dtoa_r+0x90a>
 800e358:	9b05      	ldr	r3, [sp, #20]
 800e35a:	3301      	adds	r3, #1
 800e35c:	9305      	str	r3, [sp, #20]
 800e35e:	9b06      	ldr	r3, [sp, #24]
 800e360:	3301      	adds	r3, #1
 800e362:	9306      	str	r3, [sp, #24]
 800e364:	f04f 0801 	mov.w	r8, #1
 800e368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	f47f af6f 	bne.w	800e24e <_dtoa_r+0x7de>
 800e370:	2001      	movs	r0, #1
 800e372:	e774      	b.n	800e25e <_dtoa_r+0x7ee>
 800e374:	f04f 0800 	mov.w	r8, #0
 800e378:	e7f6      	b.n	800e368 <_dtoa_r+0x8f8>
 800e37a:	4698      	mov	r8, r3
 800e37c:	e7f4      	b.n	800e368 <_dtoa_r+0x8f8>
 800e37e:	d082      	beq.n	800e286 <_dtoa_r+0x816>
 800e380:	9a05      	ldr	r2, [sp, #20]
 800e382:	331c      	adds	r3, #28
 800e384:	441a      	add	r2, r3
 800e386:	9205      	str	r2, [sp, #20]
 800e388:	9a06      	ldr	r2, [sp, #24]
 800e38a:	441a      	add	r2, r3
 800e38c:	441d      	add	r5, r3
 800e38e:	9206      	str	r2, [sp, #24]
 800e390:	e779      	b.n	800e286 <_dtoa_r+0x816>
 800e392:	4603      	mov	r3, r0
 800e394:	e7f4      	b.n	800e380 <_dtoa_r+0x910>
 800e396:	9b04      	ldr	r3, [sp, #16]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	dc37      	bgt.n	800e40c <_dtoa_r+0x99c>
 800e39c:	9b07      	ldr	r3, [sp, #28]
 800e39e:	2b02      	cmp	r3, #2
 800e3a0:	dd34      	ble.n	800e40c <_dtoa_r+0x99c>
 800e3a2:	9b04      	ldr	r3, [sp, #16]
 800e3a4:	9301      	str	r3, [sp, #4]
 800e3a6:	9b01      	ldr	r3, [sp, #4]
 800e3a8:	b963      	cbnz	r3, 800e3c4 <_dtoa_r+0x954>
 800e3aa:	4631      	mov	r1, r6
 800e3ac:	2205      	movs	r2, #5
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f000 fc6c 	bl	800ec8c <__multadd>
 800e3b4:	4601      	mov	r1, r0
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	4650      	mov	r0, sl
 800e3ba:	f000 fe81 	bl	800f0c0 <__mcmp>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	f73f adbb 	bgt.w	800df3a <_dtoa_r+0x4ca>
 800e3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3c6:	9d00      	ldr	r5, [sp, #0]
 800e3c8:	ea6f 0b03 	mvn.w	fp, r3
 800e3cc:	f04f 0800 	mov.w	r8, #0
 800e3d0:	4631      	mov	r1, r6
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	f000 fc38 	bl	800ec48 <_Bfree>
 800e3d8:	2f00      	cmp	r7, #0
 800e3da:	f43f aeab 	beq.w	800e134 <_dtoa_r+0x6c4>
 800e3de:	f1b8 0f00 	cmp.w	r8, #0
 800e3e2:	d005      	beq.n	800e3f0 <_dtoa_r+0x980>
 800e3e4:	45b8      	cmp	r8, r7
 800e3e6:	d003      	beq.n	800e3f0 <_dtoa_r+0x980>
 800e3e8:	4641      	mov	r1, r8
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	f000 fc2c 	bl	800ec48 <_Bfree>
 800e3f0:	4639      	mov	r1, r7
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f000 fc28 	bl	800ec48 <_Bfree>
 800e3f8:	e69c      	b.n	800e134 <_dtoa_r+0x6c4>
 800e3fa:	2600      	movs	r6, #0
 800e3fc:	4637      	mov	r7, r6
 800e3fe:	e7e1      	b.n	800e3c4 <_dtoa_r+0x954>
 800e400:	46bb      	mov	fp, r7
 800e402:	4637      	mov	r7, r6
 800e404:	e599      	b.n	800df3a <_dtoa_r+0x4ca>
 800e406:	bf00      	nop
 800e408:	40240000 	.word	0x40240000
 800e40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f000 80c8 	beq.w	800e5a4 <_dtoa_r+0xb34>
 800e414:	9b04      	ldr	r3, [sp, #16]
 800e416:	9301      	str	r3, [sp, #4]
 800e418:	2d00      	cmp	r5, #0
 800e41a:	dd05      	ble.n	800e428 <_dtoa_r+0x9b8>
 800e41c:	4639      	mov	r1, r7
 800e41e:	462a      	mov	r2, r5
 800e420:	4620      	mov	r0, r4
 800e422:	f000 fde1 	bl	800efe8 <__lshift>
 800e426:	4607      	mov	r7, r0
 800e428:	f1b8 0f00 	cmp.w	r8, #0
 800e42c:	d05b      	beq.n	800e4e6 <_dtoa_r+0xa76>
 800e42e:	6879      	ldr	r1, [r7, #4]
 800e430:	4620      	mov	r0, r4
 800e432:	f000 fbc9 	bl	800ebc8 <_Balloc>
 800e436:	4605      	mov	r5, r0
 800e438:	b928      	cbnz	r0, 800e446 <_dtoa_r+0x9d6>
 800e43a:	4b83      	ldr	r3, [pc, #524]	; (800e648 <_dtoa_r+0xbd8>)
 800e43c:	4602      	mov	r2, r0
 800e43e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e442:	f7ff bb2e 	b.w	800daa2 <_dtoa_r+0x32>
 800e446:	693a      	ldr	r2, [r7, #16]
 800e448:	3202      	adds	r2, #2
 800e44a:	0092      	lsls	r2, r2, #2
 800e44c:	f107 010c 	add.w	r1, r7, #12
 800e450:	300c      	adds	r0, #12
 800e452:	f7ff fa74 	bl	800d93e <memcpy>
 800e456:	2201      	movs	r2, #1
 800e458:	4629      	mov	r1, r5
 800e45a:	4620      	mov	r0, r4
 800e45c:	f000 fdc4 	bl	800efe8 <__lshift>
 800e460:	9b00      	ldr	r3, [sp, #0]
 800e462:	3301      	adds	r3, #1
 800e464:	9304      	str	r3, [sp, #16]
 800e466:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e46a:	4413      	add	r3, r2
 800e46c:	9308      	str	r3, [sp, #32]
 800e46e:	9b02      	ldr	r3, [sp, #8]
 800e470:	f003 0301 	and.w	r3, r3, #1
 800e474:	46b8      	mov	r8, r7
 800e476:	9306      	str	r3, [sp, #24]
 800e478:	4607      	mov	r7, r0
 800e47a:	9b04      	ldr	r3, [sp, #16]
 800e47c:	4631      	mov	r1, r6
 800e47e:	3b01      	subs	r3, #1
 800e480:	4650      	mov	r0, sl
 800e482:	9301      	str	r3, [sp, #4]
 800e484:	f7ff fa69 	bl	800d95a <quorem>
 800e488:	4641      	mov	r1, r8
 800e48a:	9002      	str	r0, [sp, #8]
 800e48c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e490:	4650      	mov	r0, sl
 800e492:	f000 fe15 	bl	800f0c0 <__mcmp>
 800e496:	463a      	mov	r2, r7
 800e498:	9005      	str	r0, [sp, #20]
 800e49a:	4631      	mov	r1, r6
 800e49c:	4620      	mov	r0, r4
 800e49e:	f000 fe2b 	bl	800f0f8 <__mdiff>
 800e4a2:	68c2      	ldr	r2, [r0, #12]
 800e4a4:	4605      	mov	r5, r0
 800e4a6:	bb02      	cbnz	r2, 800e4ea <_dtoa_r+0xa7a>
 800e4a8:	4601      	mov	r1, r0
 800e4aa:	4650      	mov	r0, sl
 800e4ac:	f000 fe08 	bl	800f0c0 <__mcmp>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	4629      	mov	r1, r5
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	9209      	str	r2, [sp, #36]	; 0x24
 800e4b8:	f000 fbc6 	bl	800ec48 <_Bfree>
 800e4bc:	9b07      	ldr	r3, [sp, #28]
 800e4be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4c0:	9d04      	ldr	r5, [sp, #16]
 800e4c2:	ea43 0102 	orr.w	r1, r3, r2
 800e4c6:	9b06      	ldr	r3, [sp, #24]
 800e4c8:	4319      	orrs	r1, r3
 800e4ca:	d110      	bne.n	800e4ee <_dtoa_r+0xa7e>
 800e4cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e4d0:	d029      	beq.n	800e526 <_dtoa_r+0xab6>
 800e4d2:	9b05      	ldr	r3, [sp, #20]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	dd02      	ble.n	800e4de <_dtoa_r+0xa6e>
 800e4d8:	9b02      	ldr	r3, [sp, #8]
 800e4da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e4de:	9b01      	ldr	r3, [sp, #4]
 800e4e0:	f883 9000 	strb.w	r9, [r3]
 800e4e4:	e774      	b.n	800e3d0 <_dtoa_r+0x960>
 800e4e6:	4638      	mov	r0, r7
 800e4e8:	e7ba      	b.n	800e460 <_dtoa_r+0x9f0>
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	e7e1      	b.n	800e4b2 <_dtoa_r+0xa42>
 800e4ee:	9b05      	ldr	r3, [sp, #20]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	db04      	blt.n	800e4fe <_dtoa_r+0xa8e>
 800e4f4:	9907      	ldr	r1, [sp, #28]
 800e4f6:	430b      	orrs	r3, r1
 800e4f8:	9906      	ldr	r1, [sp, #24]
 800e4fa:	430b      	orrs	r3, r1
 800e4fc:	d120      	bne.n	800e540 <_dtoa_r+0xad0>
 800e4fe:	2a00      	cmp	r2, #0
 800e500:	dded      	ble.n	800e4de <_dtoa_r+0xa6e>
 800e502:	4651      	mov	r1, sl
 800e504:	2201      	movs	r2, #1
 800e506:	4620      	mov	r0, r4
 800e508:	f000 fd6e 	bl	800efe8 <__lshift>
 800e50c:	4631      	mov	r1, r6
 800e50e:	4682      	mov	sl, r0
 800e510:	f000 fdd6 	bl	800f0c0 <__mcmp>
 800e514:	2800      	cmp	r0, #0
 800e516:	dc03      	bgt.n	800e520 <_dtoa_r+0xab0>
 800e518:	d1e1      	bne.n	800e4de <_dtoa_r+0xa6e>
 800e51a:	f019 0f01 	tst.w	r9, #1
 800e51e:	d0de      	beq.n	800e4de <_dtoa_r+0xa6e>
 800e520:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e524:	d1d8      	bne.n	800e4d8 <_dtoa_r+0xa68>
 800e526:	9a01      	ldr	r2, [sp, #4]
 800e528:	2339      	movs	r3, #57	; 0x39
 800e52a:	7013      	strb	r3, [r2, #0]
 800e52c:	462b      	mov	r3, r5
 800e52e:	461d      	mov	r5, r3
 800e530:	3b01      	subs	r3, #1
 800e532:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e536:	2a39      	cmp	r2, #57	; 0x39
 800e538:	d06c      	beq.n	800e614 <_dtoa_r+0xba4>
 800e53a:	3201      	adds	r2, #1
 800e53c:	701a      	strb	r2, [r3, #0]
 800e53e:	e747      	b.n	800e3d0 <_dtoa_r+0x960>
 800e540:	2a00      	cmp	r2, #0
 800e542:	dd07      	ble.n	800e554 <_dtoa_r+0xae4>
 800e544:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e548:	d0ed      	beq.n	800e526 <_dtoa_r+0xab6>
 800e54a:	9a01      	ldr	r2, [sp, #4]
 800e54c:	f109 0301 	add.w	r3, r9, #1
 800e550:	7013      	strb	r3, [r2, #0]
 800e552:	e73d      	b.n	800e3d0 <_dtoa_r+0x960>
 800e554:	9b04      	ldr	r3, [sp, #16]
 800e556:	9a08      	ldr	r2, [sp, #32]
 800e558:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d043      	beq.n	800e5e8 <_dtoa_r+0xb78>
 800e560:	4651      	mov	r1, sl
 800e562:	2300      	movs	r3, #0
 800e564:	220a      	movs	r2, #10
 800e566:	4620      	mov	r0, r4
 800e568:	f000 fb90 	bl	800ec8c <__multadd>
 800e56c:	45b8      	cmp	r8, r7
 800e56e:	4682      	mov	sl, r0
 800e570:	f04f 0300 	mov.w	r3, #0
 800e574:	f04f 020a 	mov.w	r2, #10
 800e578:	4641      	mov	r1, r8
 800e57a:	4620      	mov	r0, r4
 800e57c:	d107      	bne.n	800e58e <_dtoa_r+0xb1e>
 800e57e:	f000 fb85 	bl	800ec8c <__multadd>
 800e582:	4680      	mov	r8, r0
 800e584:	4607      	mov	r7, r0
 800e586:	9b04      	ldr	r3, [sp, #16]
 800e588:	3301      	adds	r3, #1
 800e58a:	9304      	str	r3, [sp, #16]
 800e58c:	e775      	b.n	800e47a <_dtoa_r+0xa0a>
 800e58e:	f000 fb7d 	bl	800ec8c <__multadd>
 800e592:	4639      	mov	r1, r7
 800e594:	4680      	mov	r8, r0
 800e596:	2300      	movs	r3, #0
 800e598:	220a      	movs	r2, #10
 800e59a:	4620      	mov	r0, r4
 800e59c:	f000 fb76 	bl	800ec8c <__multadd>
 800e5a0:	4607      	mov	r7, r0
 800e5a2:	e7f0      	b.n	800e586 <_dtoa_r+0xb16>
 800e5a4:	9b04      	ldr	r3, [sp, #16]
 800e5a6:	9301      	str	r3, [sp, #4]
 800e5a8:	9d00      	ldr	r5, [sp, #0]
 800e5aa:	4631      	mov	r1, r6
 800e5ac:	4650      	mov	r0, sl
 800e5ae:	f7ff f9d4 	bl	800d95a <quorem>
 800e5b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e5b6:	9b00      	ldr	r3, [sp, #0]
 800e5b8:	f805 9b01 	strb.w	r9, [r5], #1
 800e5bc:	1aea      	subs	r2, r5, r3
 800e5be:	9b01      	ldr	r3, [sp, #4]
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	dd07      	ble.n	800e5d4 <_dtoa_r+0xb64>
 800e5c4:	4651      	mov	r1, sl
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	220a      	movs	r2, #10
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	f000 fb5e 	bl	800ec8c <__multadd>
 800e5d0:	4682      	mov	sl, r0
 800e5d2:	e7ea      	b.n	800e5aa <_dtoa_r+0xb3a>
 800e5d4:	9b01      	ldr	r3, [sp, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	bfc8      	it	gt
 800e5da:	461d      	movgt	r5, r3
 800e5dc:	9b00      	ldr	r3, [sp, #0]
 800e5de:	bfd8      	it	le
 800e5e0:	2501      	movle	r5, #1
 800e5e2:	441d      	add	r5, r3
 800e5e4:	f04f 0800 	mov.w	r8, #0
 800e5e8:	4651      	mov	r1, sl
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	f000 fcfb 	bl	800efe8 <__lshift>
 800e5f2:	4631      	mov	r1, r6
 800e5f4:	4682      	mov	sl, r0
 800e5f6:	f000 fd63 	bl	800f0c0 <__mcmp>
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	dc96      	bgt.n	800e52c <_dtoa_r+0xabc>
 800e5fe:	d102      	bne.n	800e606 <_dtoa_r+0xb96>
 800e600:	f019 0f01 	tst.w	r9, #1
 800e604:	d192      	bne.n	800e52c <_dtoa_r+0xabc>
 800e606:	462b      	mov	r3, r5
 800e608:	461d      	mov	r5, r3
 800e60a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e60e:	2a30      	cmp	r2, #48	; 0x30
 800e610:	d0fa      	beq.n	800e608 <_dtoa_r+0xb98>
 800e612:	e6dd      	b.n	800e3d0 <_dtoa_r+0x960>
 800e614:	9a00      	ldr	r2, [sp, #0]
 800e616:	429a      	cmp	r2, r3
 800e618:	d189      	bne.n	800e52e <_dtoa_r+0xabe>
 800e61a:	f10b 0b01 	add.w	fp, fp, #1
 800e61e:	2331      	movs	r3, #49	; 0x31
 800e620:	e796      	b.n	800e550 <_dtoa_r+0xae0>
 800e622:	4b0a      	ldr	r3, [pc, #40]	; (800e64c <_dtoa_r+0xbdc>)
 800e624:	f7ff ba99 	b.w	800db5a <_dtoa_r+0xea>
 800e628:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	f47f aa6d 	bne.w	800db0a <_dtoa_r+0x9a>
 800e630:	4b07      	ldr	r3, [pc, #28]	; (800e650 <_dtoa_r+0xbe0>)
 800e632:	f7ff ba92 	b.w	800db5a <_dtoa_r+0xea>
 800e636:	9b01      	ldr	r3, [sp, #4]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	dcb5      	bgt.n	800e5a8 <_dtoa_r+0xb38>
 800e63c:	9b07      	ldr	r3, [sp, #28]
 800e63e:	2b02      	cmp	r3, #2
 800e640:	f73f aeb1 	bgt.w	800e3a6 <_dtoa_r+0x936>
 800e644:	e7b0      	b.n	800e5a8 <_dtoa_r+0xb38>
 800e646:	bf00      	nop
 800e648:	0801086c 	.word	0x0801086c
 800e64c:	080107cc 	.word	0x080107cc
 800e650:	080107f0 	.word	0x080107f0

0800e654 <__ssputs_r>:
 800e654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e658:	688e      	ldr	r6, [r1, #8]
 800e65a:	461f      	mov	r7, r3
 800e65c:	42be      	cmp	r6, r7
 800e65e:	680b      	ldr	r3, [r1, #0]
 800e660:	4682      	mov	sl, r0
 800e662:	460c      	mov	r4, r1
 800e664:	4690      	mov	r8, r2
 800e666:	d82c      	bhi.n	800e6c2 <__ssputs_r+0x6e>
 800e668:	898a      	ldrh	r2, [r1, #12]
 800e66a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e66e:	d026      	beq.n	800e6be <__ssputs_r+0x6a>
 800e670:	6965      	ldr	r5, [r4, #20]
 800e672:	6909      	ldr	r1, [r1, #16]
 800e674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e678:	eba3 0901 	sub.w	r9, r3, r1
 800e67c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e680:	1c7b      	adds	r3, r7, #1
 800e682:	444b      	add	r3, r9
 800e684:	106d      	asrs	r5, r5, #1
 800e686:	429d      	cmp	r5, r3
 800e688:	bf38      	it	cc
 800e68a:	461d      	movcc	r5, r3
 800e68c:	0553      	lsls	r3, r2, #21
 800e68e:	d527      	bpl.n	800e6e0 <__ssputs_r+0x8c>
 800e690:	4629      	mov	r1, r5
 800e692:	f000 f95f 	bl	800e954 <_malloc_r>
 800e696:	4606      	mov	r6, r0
 800e698:	b360      	cbz	r0, 800e6f4 <__ssputs_r+0xa0>
 800e69a:	6921      	ldr	r1, [r4, #16]
 800e69c:	464a      	mov	r2, r9
 800e69e:	f7ff f94e 	bl	800d93e <memcpy>
 800e6a2:	89a3      	ldrh	r3, [r4, #12]
 800e6a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e6a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6ac:	81a3      	strh	r3, [r4, #12]
 800e6ae:	6126      	str	r6, [r4, #16]
 800e6b0:	6165      	str	r5, [r4, #20]
 800e6b2:	444e      	add	r6, r9
 800e6b4:	eba5 0509 	sub.w	r5, r5, r9
 800e6b8:	6026      	str	r6, [r4, #0]
 800e6ba:	60a5      	str	r5, [r4, #8]
 800e6bc:	463e      	mov	r6, r7
 800e6be:	42be      	cmp	r6, r7
 800e6c0:	d900      	bls.n	800e6c4 <__ssputs_r+0x70>
 800e6c2:	463e      	mov	r6, r7
 800e6c4:	6820      	ldr	r0, [r4, #0]
 800e6c6:	4632      	mov	r2, r6
 800e6c8:	4641      	mov	r1, r8
 800e6ca:	f000 fe6b 	bl	800f3a4 <memmove>
 800e6ce:	68a3      	ldr	r3, [r4, #8]
 800e6d0:	1b9b      	subs	r3, r3, r6
 800e6d2:	60a3      	str	r3, [r4, #8]
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	4433      	add	r3, r6
 800e6d8:	6023      	str	r3, [r4, #0]
 800e6da:	2000      	movs	r0, #0
 800e6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6e0:	462a      	mov	r2, r5
 800e6e2:	f000 fe30 	bl	800f346 <_realloc_r>
 800e6e6:	4606      	mov	r6, r0
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	d1e0      	bne.n	800e6ae <__ssputs_r+0x5a>
 800e6ec:	6921      	ldr	r1, [r4, #16]
 800e6ee:	4650      	mov	r0, sl
 800e6f0:	f000 fefc 	bl	800f4ec <_free_r>
 800e6f4:	230c      	movs	r3, #12
 800e6f6:	f8ca 3000 	str.w	r3, [sl]
 800e6fa:	89a3      	ldrh	r3, [r4, #12]
 800e6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e700:	81a3      	strh	r3, [r4, #12]
 800e702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e706:	e7e9      	b.n	800e6dc <__ssputs_r+0x88>

0800e708 <_svfiprintf_r>:
 800e708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e70c:	4698      	mov	r8, r3
 800e70e:	898b      	ldrh	r3, [r1, #12]
 800e710:	061b      	lsls	r3, r3, #24
 800e712:	b09d      	sub	sp, #116	; 0x74
 800e714:	4607      	mov	r7, r0
 800e716:	460d      	mov	r5, r1
 800e718:	4614      	mov	r4, r2
 800e71a:	d50e      	bpl.n	800e73a <_svfiprintf_r+0x32>
 800e71c:	690b      	ldr	r3, [r1, #16]
 800e71e:	b963      	cbnz	r3, 800e73a <_svfiprintf_r+0x32>
 800e720:	2140      	movs	r1, #64	; 0x40
 800e722:	f000 f917 	bl	800e954 <_malloc_r>
 800e726:	6028      	str	r0, [r5, #0]
 800e728:	6128      	str	r0, [r5, #16]
 800e72a:	b920      	cbnz	r0, 800e736 <_svfiprintf_r+0x2e>
 800e72c:	230c      	movs	r3, #12
 800e72e:	603b      	str	r3, [r7, #0]
 800e730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e734:	e0d0      	b.n	800e8d8 <_svfiprintf_r+0x1d0>
 800e736:	2340      	movs	r3, #64	; 0x40
 800e738:	616b      	str	r3, [r5, #20]
 800e73a:	2300      	movs	r3, #0
 800e73c:	9309      	str	r3, [sp, #36]	; 0x24
 800e73e:	2320      	movs	r3, #32
 800e740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e744:	f8cd 800c 	str.w	r8, [sp, #12]
 800e748:	2330      	movs	r3, #48	; 0x30
 800e74a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e8f0 <_svfiprintf_r+0x1e8>
 800e74e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e752:	f04f 0901 	mov.w	r9, #1
 800e756:	4623      	mov	r3, r4
 800e758:	469a      	mov	sl, r3
 800e75a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e75e:	b10a      	cbz	r2, 800e764 <_svfiprintf_r+0x5c>
 800e760:	2a25      	cmp	r2, #37	; 0x25
 800e762:	d1f9      	bne.n	800e758 <_svfiprintf_r+0x50>
 800e764:	ebba 0b04 	subs.w	fp, sl, r4
 800e768:	d00b      	beq.n	800e782 <_svfiprintf_r+0x7a>
 800e76a:	465b      	mov	r3, fp
 800e76c:	4622      	mov	r2, r4
 800e76e:	4629      	mov	r1, r5
 800e770:	4638      	mov	r0, r7
 800e772:	f7ff ff6f 	bl	800e654 <__ssputs_r>
 800e776:	3001      	adds	r0, #1
 800e778:	f000 80a9 	beq.w	800e8ce <_svfiprintf_r+0x1c6>
 800e77c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e77e:	445a      	add	r2, fp
 800e780:	9209      	str	r2, [sp, #36]	; 0x24
 800e782:	f89a 3000 	ldrb.w	r3, [sl]
 800e786:	2b00      	cmp	r3, #0
 800e788:	f000 80a1 	beq.w	800e8ce <_svfiprintf_r+0x1c6>
 800e78c:	2300      	movs	r3, #0
 800e78e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e796:	f10a 0a01 	add.w	sl, sl, #1
 800e79a:	9304      	str	r3, [sp, #16]
 800e79c:	9307      	str	r3, [sp, #28]
 800e79e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7a2:	931a      	str	r3, [sp, #104]	; 0x68
 800e7a4:	4654      	mov	r4, sl
 800e7a6:	2205      	movs	r2, #5
 800e7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ac:	4850      	ldr	r0, [pc, #320]	; (800e8f0 <_svfiprintf_r+0x1e8>)
 800e7ae:	f7f1 fd0f 	bl	80001d0 <memchr>
 800e7b2:	9a04      	ldr	r2, [sp, #16]
 800e7b4:	b9d8      	cbnz	r0, 800e7ee <_svfiprintf_r+0xe6>
 800e7b6:	06d0      	lsls	r0, r2, #27
 800e7b8:	bf44      	itt	mi
 800e7ba:	2320      	movmi	r3, #32
 800e7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7c0:	0711      	lsls	r1, r2, #28
 800e7c2:	bf44      	itt	mi
 800e7c4:	232b      	movmi	r3, #43	; 0x2b
 800e7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800e7ce:	2b2a      	cmp	r3, #42	; 0x2a
 800e7d0:	d015      	beq.n	800e7fe <_svfiprintf_r+0xf6>
 800e7d2:	9a07      	ldr	r2, [sp, #28]
 800e7d4:	4654      	mov	r4, sl
 800e7d6:	2000      	movs	r0, #0
 800e7d8:	f04f 0c0a 	mov.w	ip, #10
 800e7dc:	4621      	mov	r1, r4
 800e7de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7e2:	3b30      	subs	r3, #48	; 0x30
 800e7e4:	2b09      	cmp	r3, #9
 800e7e6:	d94d      	bls.n	800e884 <_svfiprintf_r+0x17c>
 800e7e8:	b1b0      	cbz	r0, 800e818 <_svfiprintf_r+0x110>
 800e7ea:	9207      	str	r2, [sp, #28]
 800e7ec:	e014      	b.n	800e818 <_svfiprintf_r+0x110>
 800e7ee:	eba0 0308 	sub.w	r3, r0, r8
 800e7f2:	fa09 f303 	lsl.w	r3, r9, r3
 800e7f6:	4313      	orrs	r3, r2
 800e7f8:	9304      	str	r3, [sp, #16]
 800e7fa:	46a2      	mov	sl, r4
 800e7fc:	e7d2      	b.n	800e7a4 <_svfiprintf_r+0x9c>
 800e7fe:	9b03      	ldr	r3, [sp, #12]
 800e800:	1d19      	adds	r1, r3, #4
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	9103      	str	r1, [sp, #12]
 800e806:	2b00      	cmp	r3, #0
 800e808:	bfbb      	ittet	lt
 800e80a:	425b      	neglt	r3, r3
 800e80c:	f042 0202 	orrlt.w	r2, r2, #2
 800e810:	9307      	strge	r3, [sp, #28]
 800e812:	9307      	strlt	r3, [sp, #28]
 800e814:	bfb8      	it	lt
 800e816:	9204      	strlt	r2, [sp, #16]
 800e818:	7823      	ldrb	r3, [r4, #0]
 800e81a:	2b2e      	cmp	r3, #46	; 0x2e
 800e81c:	d10c      	bne.n	800e838 <_svfiprintf_r+0x130>
 800e81e:	7863      	ldrb	r3, [r4, #1]
 800e820:	2b2a      	cmp	r3, #42	; 0x2a
 800e822:	d134      	bne.n	800e88e <_svfiprintf_r+0x186>
 800e824:	9b03      	ldr	r3, [sp, #12]
 800e826:	1d1a      	adds	r2, r3, #4
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	9203      	str	r2, [sp, #12]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	bfb8      	it	lt
 800e830:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e834:	3402      	adds	r4, #2
 800e836:	9305      	str	r3, [sp, #20]
 800e838:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e900 <_svfiprintf_r+0x1f8>
 800e83c:	7821      	ldrb	r1, [r4, #0]
 800e83e:	2203      	movs	r2, #3
 800e840:	4650      	mov	r0, sl
 800e842:	f7f1 fcc5 	bl	80001d0 <memchr>
 800e846:	b138      	cbz	r0, 800e858 <_svfiprintf_r+0x150>
 800e848:	9b04      	ldr	r3, [sp, #16]
 800e84a:	eba0 000a 	sub.w	r0, r0, sl
 800e84e:	2240      	movs	r2, #64	; 0x40
 800e850:	4082      	lsls	r2, r0
 800e852:	4313      	orrs	r3, r2
 800e854:	3401      	adds	r4, #1
 800e856:	9304      	str	r3, [sp, #16]
 800e858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e85c:	4825      	ldr	r0, [pc, #148]	; (800e8f4 <_svfiprintf_r+0x1ec>)
 800e85e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e862:	2206      	movs	r2, #6
 800e864:	f7f1 fcb4 	bl	80001d0 <memchr>
 800e868:	2800      	cmp	r0, #0
 800e86a:	d038      	beq.n	800e8de <_svfiprintf_r+0x1d6>
 800e86c:	4b22      	ldr	r3, [pc, #136]	; (800e8f8 <_svfiprintf_r+0x1f0>)
 800e86e:	bb1b      	cbnz	r3, 800e8b8 <_svfiprintf_r+0x1b0>
 800e870:	9b03      	ldr	r3, [sp, #12]
 800e872:	3307      	adds	r3, #7
 800e874:	f023 0307 	bic.w	r3, r3, #7
 800e878:	3308      	adds	r3, #8
 800e87a:	9303      	str	r3, [sp, #12]
 800e87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e87e:	4433      	add	r3, r6
 800e880:	9309      	str	r3, [sp, #36]	; 0x24
 800e882:	e768      	b.n	800e756 <_svfiprintf_r+0x4e>
 800e884:	fb0c 3202 	mla	r2, ip, r2, r3
 800e888:	460c      	mov	r4, r1
 800e88a:	2001      	movs	r0, #1
 800e88c:	e7a6      	b.n	800e7dc <_svfiprintf_r+0xd4>
 800e88e:	2300      	movs	r3, #0
 800e890:	3401      	adds	r4, #1
 800e892:	9305      	str	r3, [sp, #20]
 800e894:	4619      	mov	r1, r3
 800e896:	f04f 0c0a 	mov.w	ip, #10
 800e89a:	4620      	mov	r0, r4
 800e89c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8a0:	3a30      	subs	r2, #48	; 0x30
 800e8a2:	2a09      	cmp	r2, #9
 800e8a4:	d903      	bls.n	800e8ae <_svfiprintf_r+0x1a6>
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d0c6      	beq.n	800e838 <_svfiprintf_r+0x130>
 800e8aa:	9105      	str	r1, [sp, #20]
 800e8ac:	e7c4      	b.n	800e838 <_svfiprintf_r+0x130>
 800e8ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	e7f0      	b.n	800e89a <_svfiprintf_r+0x192>
 800e8b8:	ab03      	add	r3, sp, #12
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	462a      	mov	r2, r5
 800e8be:	4b0f      	ldr	r3, [pc, #60]	; (800e8fc <_svfiprintf_r+0x1f4>)
 800e8c0:	a904      	add	r1, sp, #16
 800e8c2:	4638      	mov	r0, r7
 800e8c4:	f7fe fb5a 	bl	800cf7c <_printf_float>
 800e8c8:	1c42      	adds	r2, r0, #1
 800e8ca:	4606      	mov	r6, r0
 800e8cc:	d1d6      	bne.n	800e87c <_svfiprintf_r+0x174>
 800e8ce:	89ab      	ldrh	r3, [r5, #12]
 800e8d0:	065b      	lsls	r3, r3, #25
 800e8d2:	f53f af2d 	bmi.w	800e730 <_svfiprintf_r+0x28>
 800e8d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8d8:	b01d      	add	sp, #116	; 0x74
 800e8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8de:	ab03      	add	r3, sp, #12
 800e8e0:	9300      	str	r3, [sp, #0]
 800e8e2:	462a      	mov	r2, r5
 800e8e4:	4b05      	ldr	r3, [pc, #20]	; (800e8fc <_svfiprintf_r+0x1f4>)
 800e8e6:	a904      	add	r1, sp, #16
 800e8e8:	4638      	mov	r0, r7
 800e8ea:	f7fe fdeb 	bl	800d4c4 <_printf_i>
 800e8ee:	e7eb      	b.n	800e8c8 <_svfiprintf_r+0x1c0>
 800e8f0:	0801087d 	.word	0x0801087d
 800e8f4:	08010887 	.word	0x08010887
 800e8f8:	0800cf7d 	.word	0x0800cf7d
 800e8fc:	0800e655 	.word	0x0800e655
 800e900:	08010883 	.word	0x08010883

0800e904 <malloc>:
 800e904:	4b02      	ldr	r3, [pc, #8]	; (800e910 <malloc+0xc>)
 800e906:	4601      	mov	r1, r0
 800e908:	6818      	ldr	r0, [r3, #0]
 800e90a:	f000 b823 	b.w	800e954 <_malloc_r>
 800e90e:	bf00      	nop
 800e910:	20000088 	.word	0x20000088

0800e914 <sbrk_aligned>:
 800e914:	b570      	push	{r4, r5, r6, lr}
 800e916:	4e0e      	ldr	r6, [pc, #56]	; (800e950 <sbrk_aligned+0x3c>)
 800e918:	460c      	mov	r4, r1
 800e91a:	6831      	ldr	r1, [r6, #0]
 800e91c:	4605      	mov	r5, r0
 800e91e:	b911      	cbnz	r1, 800e926 <sbrk_aligned+0x12>
 800e920:	f000 fd8e 	bl	800f440 <_sbrk_r>
 800e924:	6030      	str	r0, [r6, #0]
 800e926:	4621      	mov	r1, r4
 800e928:	4628      	mov	r0, r5
 800e92a:	f000 fd89 	bl	800f440 <_sbrk_r>
 800e92e:	1c43      	adds	r3, r0, #1
 800e930:	d00a      	beq.n	800e948 <sbrk_aligned+0x34>
 800e932:	1cc4      	adds	r4, r0, #3
 800e934:	f024 0403 	bic.w	r4, r4, #3
 800e938:	42a0      	cmp	r0, r4
 800e93a:	d007      	beq.n	800e94c <sbrk_aligned+0x38>
 800e93c:	1a21      	subs	r1, r4, r0
 800e93e:	4628      	mov	r0, r5
 800e940:	f000 fd7e 	bl	800f440 <_sbrk_r>
 800e944:	3001      	adds	r0, #1
 800e946:	d101      	bne.n	800e94c <sbrk_aligned+0x38>
 800e948:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e94c:	4620      	mov	r0, r4
 800e94e:	bd70      	pop	{r4, r5, r6, pc}
 800e950:	200054ac 	.word	0x200054ac

0800e954 <_malloc_r>:
 800e954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e958:	1ccd      	adds	r5, r1, #3
 800e95a:	f025 0503 	bic.w	r5, r5, #3
 800e95e:	3508      	adds	r5, #8
 800e960:	2d0c      	cmp	r5, #12
 800e962:	bf38      	it	cc
 800e964:	250c      	movcc	r5, #12
 800e966:	2d00      	cmp	r5, #0
 800e968:	4607      	mov	r7, r0
 800e96a:	db01      	blt.n	800e970 <_malloc_r+0x1c>
 800e96c:	42a9      	cmp	r1, r5
 800e96e:	d905      	bls.n	800e97c <_malloc_r+0x28>
 800e970:	230c      	movs	r3, #12
 800e972:	603b      	str	r3, [r7, #0]
 800e974:	2600      	movs	r6, #0
 800e976:	4630      	mov	r0, r6
 800e978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e97c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ea50 <_malloc_r+0xfc>
 800e980:	f000 f916 	bl	800ebb0 <__malloc_lock>
 800e984:	f8d8 3000 	ldr.w	r3, [r8]
 800e988:	461c      	mov	r4, r3
 800e98a:	bb5c      	cbnz	r4, 800e9e4 <_malloc_r+0x90>
 800e98c:	4629      	mov	r1, r5
 800e98e:	4638      	mov	r0, r7
 800e990:	f7ff ffc0 	bl	800e914 <sbrk_aligned>
 800e994:	1c43      	adds	r3, r0, #1
 800e996:	4604      	mov	r4, r0
 800e998:	d155      	bne.n	800ea46 <_malloc_r+0xf2>
 800e99a:	f8d8 4000 	ldr.w	r4, [r8]
 800e99e:	4626      	mov	r6, r4
 800e9a0:	2e00      	cmp	r6, #0
 800e9a2:	d145      	bne.n	800ea30 <_malloc_r+0xdc>
 800e9a4:	2c00      	cmp	r4, #0
 800e9a6:	d048      	beq.n	800ea3a <_malloc_r+0xe6>
 800e9a8:	6823      	ldr	r3, [r4, #0]
 800e9aa:	4631      	mov	r1, r6
 800e9ac:	4638      	mov	r0, r7
 800e9ae:	eb04 0903 	add.w	r9, r4, r3
 800e9b2:	f000 fd45 	bl	800f440 <_sbrk_r>
 800e9b6:	4581      	cmp	r9, r0
 800e9b8:	d13f      	bne.n	800ea3a <_malloc_r+0xe6>
 800e9ba:	6821      	ldr	r1, [r4, #0]
 800e9bc:	1a6d      	subs	r5, r5, r1
 800e9be:	4629      	mov	r1, r5
 800e9c0:	4638      	mov	r0, r7
 800e9c2:	f7ff ffa7 	bl	800e914 <sbrk_aligned>
 800e9c6:	3001      	adds	r0, #1
 800e9c8:	d037      	beq.n	800ea3a <_malloc_r+0xe6>
 800e9ca:	6823      	ldr	r3, [r4, #0]
 800e9cc:	442b      	add	r3, r5
 800e9ce:	6023      	str	r3, [r4, #0]
 800e9d0:	f8d8 3000 	ldr.w	r3, [r8]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d038      	beq.n	800ea4a <_malloc_r+0xf6>
 800e9d8:	685a      	ldr	r2, [r3, #4]
 800e9da:	42a2      	cmp	r2, r4
 800e9dc:	d12b      	bne.n	800ea36 <_malloc_r+0xe2>
 800e9de:	2200      	movs	r2, #0
 800e9e0:	605a      	str	r2, [r3, #4]
 800e9e2:	e00f      	b.n	800ea04 <_malloc_r+0xb0>
 800e9e4:	6822      	ldr	r2, [r4, #0]
 800e9e6:	1b52      	subs	r2, r2, r5
 800e9e8:	d41f      	bmi.n	800ea2a <_malloc_r+0xd6>
 800e9ea:	2a0b      	cmp	r2, #11
 800e9ec:	d917      	bls.n	800ea1e <_malloc_r+0xca>
 800e9ee:	1961      	adds	r1, r4, r5
 800e9f0:	42a3      	cmp	r3, r4
 800e9f2:	6025      	str	r5, [r4, #0]
 800e9f4:	bf18      	it	ne
 800e9f6:	6059      	strne	r1, [r3, #4]
 800e9f8:	6863      	ldr	r3, [r4, #4]
 800e9fa:	bf08      	it	eq
 800e9fc:	f8c8 1000 	streq.w	r1, [r8]
 800ea00:	5162      	str	r2, [r4, r5]
 800ea02:	604b      	str	r3, [r1, #4]
 800ea04:	4638      	mov	r0, r7
 800ea06:	f104 060b 	add.w	r6, r4, #11
 800ea0a:	f000 f8d7 	bl	800ebbc <__malloc_unlock>
 800ea0e:	f026 0607 	bic.w	r6, r6, #7
 800ea12:	1d23      	adds	r3, r4, #4
 800ea14:	1af2      	subs	r2, r6, r3
 800ea16:	d0ae      	beq.n	800e976 <_malloc_r+0x22>
 800ea18:	1b9b      	subs	r3, r3, r6
 800ea1a:	50a3      	str	r3, [r4, r2]
 800ea1c:	e7ab      	b.n	800e976 <_malloc_r+0x22>
 800ea1e:	42a3      	cmp	r3, r4
 800ea20:	6862      	ldr	r2, [r4, #4]
 800ea22:	d1dd      	bne.n	800e9e0 <_malloc_r+0x8c>
 800ea24:	f8c8 2000 	str.w	r2, [r8]
 800ea28:	e7ec      	b.n	800ea04 <_malloc_r+0xb0>
 800ea2a:	4623      	mov	r3, r4
 800ea2c:	6864      	ldr	r4, [r4, #4]
 800ea2e:	e7ac      	b.n	800e98a <_malloc_r+0x36>
 800ea30:	4634      	mov	r4, r6
 800ea32:	6876      	ldr	r6, [r6, #4]
 800ea34:	e7b4      	b.n	800e9a0 <_malloc_r+0x4c>
 800ea36:	4613      	mov	r3, r2
 800ea38:	e7cc      	b.n	800e9d4 <_malloc_r+0x80>
 800ea3a:	230c      	movs	r3, #12
 800ea3c:	603b      	str	r3, [r7, #0]
 800ea3e:	4638      	mov	r0, r7
 800ea40:	f000 f8bc 	bl	800ebbc <__malloc_unlock>
 800ea44:	e797      	b.n	800e976 <_malloc_r+0x22>
 800ea46:	6025      	str	r5, [r4, #0]
 800ea48:	e7dc      	b.n	800ea04 <_malloc_r+0xb0>
 800ea4a:	605b      	str	r3, [r3, #4]
 800ea4c:	deff      	udf	#255	; 0xff
 800ea4e:	bf00      	nop
 800ea50:	200054a8 	.word	0x200054a8

0800ea54 <__sflush_r>:
 800ea54:	898a      	ldrh	r2, [r1, #12]
 800ea56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea5a:	4605      	mov	r5, r0
 800ea5c:	0710      	lsls	r0, r2, #28
 800ea5e:	460c      	mov	r4, r1
 800ea60:	d458      	bmi.n	800eb14 <__sflush_r+0xc0>
 800ea62:	684b      	ldr	r3, [r1, #4]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	dc05      	bgt.n	800ea74 <__sflush_r+0x20>
 800ea68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	dc02      	bgt.n	800ea74 <__sflush_r+0x20>
 800ea6e:	2000      	movs	r0, #0
 800ea70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea76:	2e00      	cmp	r6, #0
 800ea78:	d0f9      	beq.n	800ea6e <__sflush_r+0x1a>
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea80:	682f      	ldr	r7, [r5, #0]
 800ea82:	6a21      	ldr	r1, [r4, #32]
 800ea84:	602b      	str	r3, [r5, #0]
 800ea86:	d032      	beq.n	800eaee <__sflush_r+0x9a>
 800ea88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea8a:	89a3      	ldrh	r3, [r4, #12]
 800ea8c:	075a      	lsls	r2, r3, #29
 800ea8e:	d505      	bpl.n	800ea9c <__sflush_r+0x48>
 800ea90:	6863      	ldr	r3, [r4, #4]
 800ea92:	1ac0      	subs	r0, r0, r3
 800ea94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea96:	b10b      	cbz	r3, 800ea9c <__sflush_r+0x48>
 800ea98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea9a:	1ac0      	subs	r0, r0, r3
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eaa2:	6a21      	ldr	r1, [r4, #32]
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	47b0      	blx	r6
 800eaa8:	1c43      	adds	r3, r0, #1
 800eaaa:	89a3      	ldrh	r3, [r4, #12]
 800eaac:	d106      	bne.n	800eabc <__sflush_r+0x68>
 800eaae:	6829      	ldr	r1, [r5, #0]
 800eab0:	291d      	cmp	r1, #29
 800eab2:	d82b      	bhi.n	800eb0c <__sflush_r+0xb8>
 800eab4:	4a29      	ldr	r2, [pc, #164]	; (800eb5c <__sflush_r+0x108>)
 800eab6:	410a      	asrs	r2, r1
 800eab8:	07d6      	lsls	r6, r2, #31
 800eaba:	d427      	bmi.n	800eb0c <__sflush_r+0xb8>
 800eabc:	2200      	movs	r2, #0
 800eabe:	6062      	str	r2, [r4, #4]
 800eac0:	04d9      	lsls	r1, r3, #19
 800eac2:	6922      	ldr	r2, [r4, #16]
 800eac4:	6022      	str	r2, [r4, #0]
 800eac6:	d504      	bpl.n	800ead2 <__sflush_r+0x7e>
 800eac8:	1c42      	adds	r2, r0, #1
 800eaca:	d101      	bne.n	800ead0 <__sflush_r+0x7c>
 800eacc:	682b      	ldr	r3, [r5, #0]
 800eace:	b903      	cbnz	r3, 800ead2 <__sflush_r+0x7e>
 800ead0:	6560      	str	r0, [r4, #84]	; 0x54
 800ead2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ead4:	602f      	str	r7, [r5, #0]
 800ead6:	2900      	cmp	r1, #0
 800ead8:	d0c9      	beq.n	800ea6e <__sflush_r+0x1a>
 800eada:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eade:	4299      	cmp	r1, r3
 800eae0:	d002      	beq.n	800eae8 <__sflush_r+0x94>
 800eae2:	4628      	mov	r0, r5
 800eae4:	f000 fd02 	bl	800f4ec <_free_r>
 800eae8:	2000      	movs	r0, #0
 800eaea:	6360      	str	r0, [r4, #52]	; 0x34
 800eaec:	e7c0      	b.n	800ea70 <__sflush_r+0x1c>
 800eaee:	2301      	movs	r3, #1
 800eaf0:	4628      	mov	r0, r5
 800eaf2:	47b0      	blx	r6
 800eaf4:	1c41      	adds	r1, r0, #1
 800eaf6:	d1c8      	bne.n	800ea8a <__sflush_r+0x36>
 800eaf8:	682b      	ldr	r3, [r5, #0]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d0c5      	beq.n	800ea8a <__sflush_r+0x36>
 800eafe:	2b1d      	cmp	r3, #29
 800eb00:	d001      	beq.n	800eb06 <__sflush_r+0xb2>
 800eb02:	2b16      	cmp	r3, #22
 800eb04:	d101      	bne.n	800eb0a <__sflush_r+0xb6>
 800eb06:	602f      	str	r7, [r5, #0]
 800eb08:	e7b1      	b.n	800ea6e <__sflush_r+0x1a>
 800eb0a:	89a3      	ldrh	r3, [r4, #12]
 800eb0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb10:	81a3      	strh	r3, [r4, #12]
 800eb12:	e7ad      	b.n	800ea70 <__sflush_r+0x1c>
 800eb14:	690f      	ldr	r7, [r1, #16]
 800eb16:	2f00      	cmp	r7, #0
 800eb18:	d0a9      	beq.n	800ea6e <__sflush_r+0x1a>
 800eb1a:	0793      	lsls	r3, r2, #30
 800eb1c:	680e      	ldr	r6, [r1, #0]
 800eb1e:	bf08      	it	eq
 800eb20:	694b      	ldreq	r3, [r1, #20]
 800eb22:	600f      	str	r7, [r1, #0]
 800eb24:	bf18      	it	ne
 800eb26:	2300      	movne	r3, #0
 800eb28:	eba6 0807 	sub.w	r8, r6, r7
 800eb2c:	608b      	str	r3, [r1, #8]
 800eb2e:	f1b8 0f00 	cmp.w	r8, #0
 800eb32:	dd9c      	ble.n	800ea6e <__sflush_r+0x1a>
 800eb34:	6a21      	ldr	r1, [r4, #32]
 800eb36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb38:	4643      	mov	r3, r8
 800eb3a:	463a      	mov	r2, r7
 800eb3c:	4628      	mov	r0, r5
 800eb3e:	47b0      	blx	r6
 800eb40:	2800      	cmp	r0, #0
 800eb42:	dc06      	bgt.n	800eb52 <__sflush_r+0xfe>
 800eb44:	89a3      	ldrh	r3, [r4, #12]
 800eb46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb4a:	81a3      	strh	r3, [r4, #12]
 800eb4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb50:	e78e      	b.n	800ea70 <__sflush_r+0x1c>
 800eb52:	4407      	add	r7, r0
 800eb54:	eba8 0800 	sub.w	r8, r8, r0
 800eb58:	e7e9      	b.n	800eb2e <__sflush_r+0xda>
 800eb5a:	bf00      	nop
 800eb5c:	dfbffffe 	.word	0xdfbffffe

0800eb60 <_fflush_r>:
 800eb60:	b538      	push	{r3, r4, r5, lr}
 800eb62:	690b      	ldr	r3, [r1, #16]
 800eb64:	4605      	mov	r5, r0
 800eb66:	460c      	mov	r4, r1
 800eb68:	b913      	cbnz	r3, 800eb70 <_fflush_r+0x10>
 800eb6a:	2500      	movs	r5, #0
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	bd38      	pop	{r3, r4, r5, pc}
 800eb70:	b118      	cbz	r0, 800eb7a <_fflush_r+0x1a>
 800eb72:	6a03      	ldr	r3, [r0, #32]
 800eb74:	b90b      	cbnz	r3, 800eb7a <_fflush_r+0x1a>
 800eb76:	f7fe fe73 	bl	800d860 <__sinit>
 800eb7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d0f3      	beq.n	800eb6a <_fflush_r+0xa>
 800eb82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb84:	07d0      	lsls	r0, r2, #31
 800eb86:	d404      	bmi.n	800eb92 <_fflush_r+0x32>
 800eb88:	0599      	lsls	r1, r3, #22
 800eb8a:	d402      	bmi.n	800eb92 <_fflush_r+0x32>
 800eb8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb8e:	f7fe fed4 	bl	800d93a <__retarget_lock_acquire_recursive>
 800eb92:	4628      	mov	r0, r5
 800eb94:	4621      	mov	r1, r4
 800eb96:	f7ff ff5d 	bl	800ea54 <__sflush_r>
 800eb9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb9c:	07da      	lsls	r2, r3, #31
 800eb9e:	4605      	mov	r5, r0
 800eba0:	d4e4      	bmi.n	800eb6c <_fflush_r+0xc>
 800eba2:	89a3      	ldrh	r3, [r4, #12]
 800eba4:	059b      	lsls	r3, r3, #22
 800eba6:	d4e1      	bmi.n	800eb6c <_fflush_r+0xc>
 800eba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebaa:	f7fe fec7 	bl	800d93c <__retarget_lock_release_recursive>
 800ebae:	e7dd      	b.n	800eb6c <_fflush_r+0xc>

0800ebb0 <__malloc_lock>:
 800ebb0:	4801      	ldr	r0, [pc, #4]	; (800ebb8 <__malloc_lock+0x8>)
 800ebb2:	f7fe bec2 	b.w	800d93a <__retarget_lock_acquire_recursive>
 800ebb6:	bf00      	nop
 800ebb8:	200054a4 	.word	0x200054a4

0800ebbc <__malloc_unlock>:
 800ebbc:	4801      	ldr	r0, [pc, #4]	; (800ebc4 <__malloc_unlock+0x8>)
 800ebbe:	f7fe bebd 	b.w	800d93c <__retarget_lock_release_recursive>
 800ebc2:	bf00      	nop
 800ebc4:	200054a4 	.word	0x200054a4

0800ebc8 <_Balloc>:
 800ebc8:	b570      	push	{r4, r5, r6, lr}
 800ebca:	69c6      	ldr	r6, [r0, #28]
 800ebcc:	4604      	mov	r4, r0
 800ebce:	460d      	mov	r5, r1
 800ebd0:	b976      	cbnz	r6, 800ebf0 <_Balloc+0x28>
 800ebd2:	2010      	movs	r0, #16
 800ebd4:	f7ff fe96 	bl	800e904 <malloc>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	61e0      	str	r0, [r4, #28]
 800ebdc:	b920      	cbnz	r0, 800ebe8 <_Balloc+0x20>
 800ebde:	4b18      	ldr	r3, [pc, #96]	; (800ec40 <_Balloc+0x78>)
 800ebe0:	4818      	ldr	r0, [pc, #96]	; (800ec44 <_Balloc+0x7c>)
 800ebe2:	216b      	movs	r1, #107	; 0x6b
 800ebe4:	f000 fc4e 	bl	800f484 <__assert_func>
 800ebe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ebec:	6006      	str	r6, [r0, #0]
 800ebee:	60c6      	str	r6, [r0, #12]
 800ebf0:	69e6      	ldr	r6, [r4, #28]
 800ebf2:	68f3      	ldr	r3, [r6, #12]
 800ebf4:	b183      	cbz	r3, 800ec18 <_Balloc+0x50>
 800ebf6:	69e3      	ldr	r3, [r4, #28]
 800ebf8:	68db      	ldr	r3, [r3, #12]
 800ebfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ebfe:	b9b8      	cbnz	r0, 800ec30 <_Balloc+0x68>
 800ec00:	2101      	movs	r1, #1
 800ec02:	fa01 f605 	lsl.w	r6, r1, r5
 800ec06:	1d72      	adds	r2, r6, #5
 800ec08:	0092      	lsls	r2, r2, #2
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f000 fc58 	bl	800f4c0 <_calloc_r>
 800ec10:	b160      	cbz	r0, 800ec2c <_Balloc+0x64>
 800ec12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec16:	e00e      	b.n	800ec36 <_Balloc+0x6e>
 800ec18:	2221      	movs	r2, #33	; 0x21
 800ec1a:	2104      	movs	r1, #4
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f000 fc4f 	bl	800f4c0 <_calloc_r>
 800ec22:	69e3      	ldr	r3, [r4, #28]
 800ec24:	60f0      	str	r0, [r6, #12]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1e4      	bne.n	800ebf6 <_Balloc+0x2e>
 800ec2c:	2000      	movs	r0, #0
 800ec2e:	bd70      	pop	{r4, r5, r6, pc}
 800ec30:	6802      	ldr	r2, [r0, #0]
 800ec32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec36:	2300      	movs	r3, #0
 800ec38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec3c:	e7f7      	b.n	800ec2e <_Balloc+0x66>
 800ec3e:	bf00      	nop
 800ec40:	080107fd 	.word	0x080107fd
 800ec44:	0801088e 	.word	0x0801088e

0800ec48 <_Bfree>:
 800ec48:	b570      	push	{r4, r5, r6, lr}
 800ec4a:	69c6      	ldr	r6, [r0, #28]
 800ec4c:	4605      	mov	r5, r0
 800ec4e:	460c      	mov	r4, r1
 800ec50:	b976      	cbnz	r6, 800ec70 <_Bfree+0x28>
 800ec52:	2010      	movs	r0, #16
 800ec54:	f7ff fe56 	bl	800e904 <malloc>
 800ec58:	4602      	mov	r2, r0
 800ec5a:	61e8      	str	r0, [r5, #28]
 800ec5c:	b920      	cbnz	r0, 800ec68 <_Bfree+0x20>
 800ec5e:	4b09      	ldr	r3, [pc, #36]	; (800ec84 <_Bfree+0x3c>)
 800ec60:	4809      	ldr	r0, [pc, #36]	; (800ec88 <_Bfree+0x40>)
 800ec62:	218f      	movs	r1, #143	; 0x8f
 800ec64:	f000 fc0e 	bl	800f484 <__assert_func>
 800ec68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec6c:	6006      	str	r6, [r0, #0]
 800ec6e:	60c6      	str	r6, [r0, #12]
 800ec70:	b13c      	cbz	r4, 800ec82 <_Bfree+0x3a>
 800ec72:	69eb      	ldr	r3, [r5, #28]
 800ec74:	6862      	ldr	r2, [r4, #4]
 800ec76:	68db      	ldr	r3, [r3, #12]
 800ec78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec7c:	6021      	str	r1, [r4, #0]
 800ec7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ec82:	bd70      	pop	{r4, r5, r6, pc}
 800ec84:	080107fd 	.word	0x080107fd
 800ec88:	0801088e 	.word	0x0801088e

0800ec8c <__multadd>:
 800ec8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec90:	690d      	ldr	r5, [r1, #16]
 800ec92:	4607      	mov	r7, r0
 800ec94:	460c      	mov	r4, r1
 800ec96:	461e      	mov	r6, r3
 800ec98:	f101 0c14 	add.w	ip, r1, #20
 800ec9c:	2000      	movs	r0, #0
 800ec9e:	f8dc 3000 	ldr.w	r3, [ip]
 800eca2:	b299      	uxth	r1, r3
 800eca4:	fb02 6101 	mla	r1, r2, r1, r6
 800eca8:	0c1e      	lsrs	r6, r3, #16
 800ecaa:	0c0b      	lsrs	r3, r1, #16
 800ecac:	fb02 3306 	mla	r3, r2, r6, r3
 800ecb0:	b289      	uxth	r1, r1
 800ecb2:	3001      	adds	r0, #1
 800ecb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ecb8:	4285      	cmp	r5, r0
 800ecba:	f84c 1b04 	str.w	r1, [ip], #4
 800ecbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ecc2:	dcec      	bgt.n	800ec9e <__multadd+0x12>
 800ecc4:	b30e      	cbz	r6, 800ed0a <__multadd+0x7e>
 800ecc6:	68a3      	ldr	r3, [r4, #8]
 800ecc8:	42ab      	cmp	r3, r5
 800ecca:	dc19      	bgt.n	800ed00 <__multadd+0x74>
 800eccc:	6861      	ldr	r1, [r4, #4]
 800ecce:	4638      	mov	r0, r7
 800ecd0:	3101      	adds	r1, #1
 800ecd2:	f7ff ff79 	bl	800ebc8 <_Balloc>
 800ecd6:	4680      	mov	r8, r0
 800ecd8:	b928      	cbnz	r0, 800ece6 <__multadd+0x5a>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	4b0c      	ldr	r3, [pc, #48]	; (800ed10 <__multadd+0x84>)
 800ecde:	480d      	ldr	r0, [pc, #52]	; (800ed14 <__multadd+0x88>)
 800ece0:	21ba      	movs	r1, #186	; 0xba
 800ece2:	f000 fbcf 	bl	800f484 <__assert_func>
 800ece6:	6922      	ldr	r2, [r4, #16]
 800ece8:	3202      	adds	r2, #2
 800ecea:	f104 010c 	add.w	r1, r4, #12
 800ecee:	0092      	lsls	r2, r2, #2
 800ecf0:	300c      	adds	r0, #12
 800ecf2:	f7fe fe24 	bl	800d93e <memcpy>
 800ecf6:	4621      	mov	r1, r4
 800ecf8:	4638      	mov	r0, r7
 800ecfa:	f7ff ffa5 	bl	800ec48 <_Bfree>
 800ecfe:	4644      	mov	r4, r8
 800ed00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed04:	3501      	adds	r5, #1
 800ed06:	615e      	str	r6, [r3, #20]
 800ed08:	6125      	str	r5, [r4, #16]
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed10:	0801086c 	.word	0x0801086c
 800ed14:	0801088e 	.word	0x0801088e

0800ed18 <__hi0bits>:
 800ed18:	0c03      	lsrs	r3, r0, #16
 800ed1a:	041b      	lsls	r3, r3, #16
 800ed1c:	b9d3      	cbnz	r3, 800ed54 <__hi0bits+0x3c>
 800ed1e:	0400      	lsls	r0, r0, #16
 800ed20:	2310      	movs	r3, #16
 800ed22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ed26:	bf04      	itt	eq
 800ed28:	0200      	lsleq	r0, r0, #8
 800ed2a:	3308      	addeq	r3, #8
 800ed2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ed30:	bf04      	itt	eq
 800ed32:	0100      	lsleq	r0, r0, #4
 800ed34:	3304      	addeq	r3, #4
 800ed36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ed3a:	bf04      	itt	eq
 800ed3c:	0080      	lsleq	r0, r0, #2
 800ed3e:	3302      	addeq	r3, #2
 800ed40:	2800      	cmp	r0, #0
 800ed42:	db05      	blt.n	800ed50 <__hi0bits+0x38>
 800ed44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ed48:	f103 0301 	add.w	r3, r3, #1
 800ed4c:	bf08      	it	eq
 800ed4e:	2320      	moveq	r3, #32
 800ed50:	4618      	mov	r0, r3
 800ed52:	4770      	bx	lr
 800ed54:	2300      	movs	r3, #0
 800ed56:	e7e4      	b.n	800ed22 <__hi0bits+0xa>

0800ed58 <__lo0bits>:
 800ed58:	6803      	ldr	r3, [r0, #0]
 800ed5a:	f013 0207 	ands.w	r2, r3, #7
 800ed5e:	d00c      	beq.n	800ed7a <__lo0bits+0x22>
 800ed60:	07d9      	lsls	r1, r3, #31
 800ed62:	d422      	bmi.n	800edaa <__lo0bits+0x52>
 800ed64:	079a      	lsls	r2, r3, #30
 800ed66:	bf49      	itett	mi
 800ed68:	085b      	lsrmi	r3, r3, #1
 800ed6a:	089b      	lsrpl	r3, r3, #2
 800ed6c:	6003      	strmi	r3, [r0, #0]
 800ed6e:	2201      	movmi	r2, #1
 800ed70:	bf5c      	itt	pl
 800ed72:	6003      	strpl	r3, [r0, #0]
 800ed74:	2202      	movpl	r2, #2
 800ed76:	4610      	mov	r0, r2
 800ed78:	4770      	bx	lr
 800ed7a:	b299      	uxth	r1, r3
 800ed7c:	b909      	cbnz	r1, 800ed82 <__lo0bits+0x2a>
 800ed7e:	0c1b      	lsrs	r3, r3, #16
 800ed80:	2210      	movs	r2, #16
 800ed82:	b2d9      	uxtb	r1, r3
 800ed84:	b909      	cbnz	r1, 800ed8a <__lo0bits+0x32>
 800ed86:	3208      	adds	r2, #8
 800ed88:	0a1b      	lsrs	r3, r3, #8
 800ed8a:	0719      	lsls	r1, r3, #28
 800ed8c:	bf04      	itt	eq
 800ed8e:	091b      	lsreq	r3, r3, #4
 800ed90:	3204      	addeq	r2, #4
 800ed92:	0799      	lsls	r1, r3, #30
 800ed94:	bf04      	itt	eq
 800ed96:	089b      	lsreq	r3, r3, #2
 800ed98:	3202      	addeq	r2, #2
 800ed9a:	07d9      	lsls	r1, r3, #31
 800ed9c:	d403      	bmi.n	800eda6 <__lo0bits+0x4e>
 800ed9e:	085b      	lsrs	r3, r3, #1
 800eda0:	f102 0201 	add.w	r2, r2, #1
 800eda4:	d003      	beq.n	800edae <__lo0bits+0x56>
 800eda6:	6003      	str	r3, [r0, #0]
 800eda8:	e7e5      	b.n	800ed76 <__lo0bits+0x1e>
 800edaa:	2200      	movs	r2, #0
 800edac:	e7e3      	b.n	800ed76 <__lo0bits+0x1e>
 800edae:	2220      	movs	r2, #32
 800edb0:	e7e1      	b.n	800ed76 <__lo0bits+0x1e>
	...

0800edb4 <__i2b>:
 800edb4:	b510      	push	{r4, lr}
 800edb6:	460c      	mov	r4, r1
 800edb8:	2101      	movs	r1, #1
 800edba:	f7ff ff05 	bl	800ebc8 <_Balloc>
 800edbe:	4602      	mov	r2, r0
 800edc0:	b928      	cbnz	r0, 800edce <__i2b+0x1a>
 800edc2:	4b05      	ldr	r3, [pc, #20]	; (800edd8 <__i2b+0x24>)
 800edc4:	4805      	ldr	r0, [pc, #20]	; (800eddc <__i2b+0x28>)
 800edc6:	f240 1145 	movw	r1, #325	; 0x145
 800edca:	f000 fb5b 	bl	800f484 <__assert_func>
 800edce:	2301      	movs	r3, #1
 800edd0:	6144      	str	r4, [r0, #20]
 800edd2:	6103      	str	r3, [r0, #16]
 800edd4:	bd10      	pop	{r4, pc}
 800edd6:	bf00      	nop
 800edd8:	0801086c 	.word	0x0801086c
 800eddc:	0801088e 	.word	0x0801088e

0800ede0 <__multiply>:
 800ede0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede4:	4691      	mov	r9, r2
 800ede6:	690a      	ldr	r2, [r1, #16]
 800ede8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800edec:	429a      	cmp	r2, r3
 800edee:	bfb8      	it	lt
 800edf0:	460b      	movlt	r3, r1
 800edf2:	460c      	mov	r4, r1
 800edf4:	bfbc      	itt	lt
 800edf6:	464c      	movlt	r4, r9
 800edf8:	4699      	movlt	r9, r3
 800edfa:	6927      	ldr	r7, [r4, #16]
 800edfc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ee00:	68a3      	ldr	r3, [r4, #8]
 800ee02:	6861      	ldr	r1, [r4, #4]
 800ee04:	eb07 060a 	add.w	r6, r7, sl
 800ee08:	42b3      	cmp	r3, r6
 800ee0a:	b085      	sub	sp, #20
 800ee0c:	bfb8      	it	lt
 800ee0e:	3101      	addlt	r1, #1
 800ee10:	f7ff feda 	bl	800ebc8 <_Balloc>
 800ee14:	b930      	cbnz	r0, 800ee24 <__multiply+0x44>
 800ee16:	4602      	mov	r2, r0
 800ee18:	4b44      	ldr	r3, [pc, #272]	; (800ef2c <__multiply+0x14c>)
 800ee1a:	4845      	ldr	r0, [pc, #276]	; (800ef30 <__multiply+0x150>)
 800ee1c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ee20:	f000 fb30 	bl	800f484 <__assert_func>
 800ee24:	f100 0514 	add.w	r5, r0, #20
 800ee28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ee2c:	462b      	mov	r3, r5
 800ee2e:	2200      	movs	r2, #0
 800ee30:	4543      	cmp	r3, r8
 800ee32:	d321      	bcc.n	800ee78 <__multiply+0x98>
 800ee34:	f104 0314 	add.w	r3, r4, #20
 800ee38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ee3c:	f109 0314 	add.w	r3, r9, #20
 800ee40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ee44:	9202      	str	r2, [sp, #8]
 800ee46:	1b3a      	subs	r2, r7, r4
 800ee48:	3a15      	subs	r2, #21
 800ee4a:	f022 0203 	bic.w	r2, r2, #3
 800ee4e:	3204      	adds	r2, #4
 800ee50:	f104 0115 	add.w	r1, r4, #21
 800ee54:	428f      	cmp	r7, r1
 800ee56:	bf38      	it	cc
 800ee58:	2204      	movcc	r2, #4
 800ee5a:	9201      	str	r2, [sp, #4]
 800ee5c:	9a02      	ldr	r2, [sp, #8]
 800ee5e:	9303      	str	r3, [sp, #12]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d80c      	bhi.n	800ee7e <__multiply+0x9e>
 800ee64:	2e00      	cmp	r6, #0
 800ee66:	dd03      	ble.n	800ee70 <__multiply+0x90>
 800ee68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d05b      	beq.n	800ef28 <__multiply+0x148>
 800ee70:	6106      	str	r6, [r0, #16]
 800ee72:	b005      	add	sp, #20
 800ee74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee78:	f843 2b04 	str.w	r2, [r3], #4
 800ee7c:	e7d8      	b.n	800ee30 <__multiply+0x50>
 800ee7e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ee82:	f1ba 0f00 	cmp.w	sl, #0
 800ee86:	d024      	beq.n	800eed2 <__multiply+0xf2>
 800ee88:	f104 0e14 	add.w	lr, r4, #20
 800ee8c:	46a9      	mov	r9, r5
 800ee8e:	f04f 0c00 	mov.w	ip, #0
 800ee92:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ee96:	f8d9 1000 	ldr.w	r1, [r9]
 800ee9a:	fa1f fb82 	uxth.w	fp, r2
 800ee9e:	b289      	uxth	r1, r1
 800eea0:	fb0a 110b 	mla	r1, sl, fp, r1
 800eea4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800eea8:	f8d9 2000 	ldr.w	r2, [r9]
 800eeac:	4461      	add	r1, ip
 800eeae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eeb2:	fb0a c20b 	mla	r2, sl, fp, ip
 800eeb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eeba:	b289      	uxth	r1, r1
 800eebc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eec0:	4577      	cmp	r7, lr
 800eec2:	f849 1b04 	str.w	r1, [r9], #4
 800eec6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eeca:	d8e2      	bhi.n	800ee92 <__multiply+0xb2>
 800eecc:	9a01      	ldr	r2, [sp, #4]
 800eece:	f845 c002 	str.w	ip, [r5, r2]
 800eed2:	9a03      	ldr	r2, [sp, #12]
 800eed4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eed8:	3304      	adds	r3, #4
 800eeda:	f1b9 0f00 	cmp.w	r9, #0
 800eede:	d021      	beq.n	800ef24 <__multiply+0x144>
 800eee0:	6829      	ldr	r1, [r5, #0]
 800eee2:	f104 0c14 	add.w	ip, r4, #20
 800eee6:	46ae      	mov	lr, r5
 800eee8:	f04f 0a00 	mov.w	sl, #0
 800eeec:	f8bc b000 	ldrh.w	fp, [ip]
 800eef0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eef4:	fb09 220b 	mla	r2, r9, fp, r2
 800eef8:	4452      	add	r2, sl
 800eefa:	b289      	uxth	r1, r1
 800eefc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ef00:	f84e 1b04 	str.w	r1, [lr], #4
 800ef04:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ef08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ef0c:	f8be 1000 	ldrh.w	r1, [lr]
 800ef10:	fb09 110a 	mla	r1, r9, sl, r1
 800ef14:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ef18:	4567      	cmp	r7, ip
 800ef1a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ef1e:	d8e5      	bhi.n	800eeec <__multiply+0x10c>
 800ef20:	9a01      	ldr	r2, [sp, #4]
 800ef22:	50a9      	str	r1, [r5, r2]
 800ef24:	3504      	adds	r5, #4
 800ef26:	e799      	b.n	800ee5c <__multiply+0x7c>
 800ef28:	3e01      	subs	r6, #1
 800ef2a:	e79b      	b.n	800ee64 <__multiply+0x84>
 800ef2c:	0801086c 	.word	0x0801086c
 800ef30:	0801088e 	.word	0x0801088e

0800ef34 <__pow5mult>:
 800ef34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef38:	4615      	mov	r5, r2
 800ef3a:	f012 0203 	ands.w	r2, r2, #3
 800ef3e:	4606      	mov	r6, r0
 800ef40:	460f      	mov	r7, r1
 800ef42:	d007      	beq.n	800ef54 <__pow5mult+0x20>
 800ef44:	4c25      	ldr	r4, [pc, #148]	; (800efdc <__pow5mult+0xa8>)
 800ef46:	3a01      	subs	r2, #1
 800ef48:	2300      	movs	r3, #0
 800ef4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ef4e:	f7ff fe9d 	bl	800ec8c <__multadd>
 800ef52:	4607      	mov	r7, r0
 800ef54:	10ad      	asrs	r5, r5, #2
 800ef56:	d03d      	beq.n	800efd4 <__pow5mult+0xa0>
 800ef58:	69f4      	ldr	r4, [r6, #28]
 800ef5a:	b97c      	cbnz	r4, 800ef7c <__pow5mult+0x48>
 800ef5c:	2010      	movs	r0, #16
 800ef5e:	f7ff fcd1 	bl	800e904 <malloc>
 800ef62:	4602      	mov	r2, r0
 800ef64:	61f0      	str	r0, [r6, #28]
 800ef66:	b928      	cbnz	r0, 800ef74 <__pow5mult+0x40>
 800ef68:	4b1d      	ldr	r3, [pc, #116]	; (800efe0 <__pow5mult+0xac>)
 800ef6a:	481e      	ldr	r0, [pc, #120]	; (800efe4 <__pow5mult+0xb0>)
 800ef6c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ef70:	f000 fa88 	bl	800f484 <__assert_func>
 800ef74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef78:	6004      	str	r4, [r0, #0]
 800ef7a:	60c4      	str	r4, [r0, #12]
 800ef7c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ef80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef84:	b94c      	cbnz	r4, 800ef9a <__pow5mult+0x66>
 800ef86:	f240 2171 	movw	r1, #625	; 0x271
 800ef8a:	4630      	mov	r0, r6
 800ef8c:	f7ff ff12 	bl	800edb4 <__i2b>
 800ef90:	2300      	movs	r3, #0
 800ef92:	f8c8 0008 	str.w	r0, [r8, #8]
 800ef96:	4604      	mov	r4, r0
 800ef98:	6003      	str	r3, [r0, #0]
 800ef9a:	f04f 0900 	mov.w	r9, #0
 800ef9e:	07eb      	lsls	r3, r5, #31
 800efa0:	d50a      	bpl.n	800efb8 <__pow5mult+0x84>
 800efa2:	4639      	mov	r1, r7
 800efa4:	4622      	mov	r2, r4
 800efa6:	4630      	mov	r0, r6
 800efa8:	f7ff ff1a 	bl	800ede0 <__multiply>
 800efac:	4639      	mov	r1, r7
 800efae:	4680      	mov	r8, r0
 800efb0:	4630      	mov	r0, r6
 800efb2:	f7ff fe49 	bl	800ec48 <_Bfree>
 800efb6:	4647      	mov	r7, r8
 800efb8:	106d      	asrs	r5, r5, #1
 800efba:	d00b      	beq.n	800efd4 <__pow5mult+0xa0>
 800efbc:	6820      	ldr	r0, [r4, #0]
 800efbe:	b938      	cbnz	r0, 800efd0 <__pow5mult+0x9c>
 800efc0:	4622      	mov	r2, r4
 800efc2:	4621      	mov	r1, r4
 800efc4:	4630      	mov	r0, r6
 800efc6:	f7ff ff0b 	bl	800ede0 <__multiply>
 800efca:	6020      	str	r0, [r4, #0]
 800efcc:	f8c0 9000 	str.w	r9, [r0]
 800efd0:	4604      	mov	r4, r0
 800efd2:	e7e4      	b.n	800ef9e <__pow5mult+0x6a>
 800efd4:	4638      	mov	r0, r7
 800efd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efda:	bf00      	nop
 800efdc:	080109d8 	.word	0x080109d8
 800efe0:	080107fd 	.word	0x080107fd
 800efe4:	0801088e 	.word	0x0801088e

0800efe8 <__lshift>:
 800efe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efec:	460c      	mov	r4, r1
 800efee:	6849      	ldr	r1, [r1, #4]
 800eff0:	6923      	ldr	r3, [r4, #16]
 800eff2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eff6:	68a3      	ldr	r3, [r4, #8]
 800eff8:	4607      	mov	r7, r0
 800effa:	4691      	mov	r9, r2
 800effc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f000:	f108 0601 	add.w	r6, r8, #1
 800f004:	42b3      	cmp	r3, r6
 800f006:	db0b      	blt.n	800f020 <__lshift+0x38>
 800f008:	4638      	mov	r0, r7
 800f00a:	f7ff fddd 	bl	800ebc8 <_Balloc>
 800f00e:	4605      	mov	r5, r0
 800f010:	b948      	cbnz	r0, 800f026 <__lshift+0x3e>
 800f012:	4602      	mov	r2, r0
 800f014:	4b28      	ldr	r3, [pc, #160]	; (800f0b8 <__lshift+0xd0>)
 800f016:	4829      	ldr	r0, [pc, #164]	; (800f0bc <__lshift+0xd4>)
 800f018:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f01c:	f000 fa32 	bl	800f484 <__assert_func>
 800f020:	3101      	adds	r1, #1
 800f022:	005b      	lsls	r3, r3, #1
 800f024:	e7ee      	b.n	800f004 <__lshift+0x1c>
 800f026:	2300      	movs	r3, #0
 800f028:	f100 0114 	add.w	r1, r0, #20
 800f02c:	f100 0210 	add.w	r2, r0, #16
 800f030:	4618      	mov	r0, r3
 800f032:	4553      	cmp	r3, sl
 800f034:	db33      	blt.n	800f09e <__lshift+0xb6>
 800f036:	6920      	ldr	r0, [r4, #16]
 800f038:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f03c:	f104 0314 	add.w	r3, r4, #20
 800f040:	f019 091f 	ands.w	r9, r9, #31
 800f044:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f048:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f04c:	d02b      	beq.n	800f0a6 <__lshift+0xbe>
 800f04e:	f1c9 0e20 	rsb	lr, r9, #32
 800f052:	468a      	mov	sl, r1
 800f054:	2200      	movs	r2, #0
 800f056:	6818      	ldr	r0, [r3, #0]
 800f058:	fa00 f009 	lsl.w	r0, r0, r9
 800f05c:	4310      	orrs	r0, r2
 800f05e:	f84a 0b04 	str.w	r0, [sl], #4
 800f062:	f853 2b04 	ldr.w	r2, [r3], #4
 800f066:	459c      	cmp	ip, r3
 800f068:	fa22 f20e 	lsr.w	r2, r2, lr
 800f06c:	d8f3      	bhi.n	800f056 <__lshift+0x6e>
 800f06e:	ebac 0304 	sub.w	r3, ip, r4
 800f072:	3b15      	subs	r3, #21
 800f074:	f023 0303 	bic.w	r3, r3, #3
 800f078:	3304      	adds	r3, #4
 800f07a:	f104 0015 	add.w	r0, r4, #21
 800f07e:	4584      	cmp	ip, r0
 800f080:	bf38      	it	cc
 800f082:	2304      	movcc	r3, #4
 800f084:	50ca      	str	r2, [r1, r3]
 800f086:	b10a      	cbz	r2, 800f08c <__lshift+0xa4>
 800f088:	f108 0602 	add.w	r6, r8, #2
 800f08c:	3e01      	subs	r6, #1
 800f08e:	4638      	mov	r0, r7
 800f090:	612e      	str	r6, [r5, #16]
 800f092:	4621      	mov	r1, r4
 800f094:	f7ff fdd8 	bl	800ec48 <_Bfree>
 800f098:	4628      	mov	r0, r5
 800f09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f09e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	e7c5      	b.n	800f032 <__lshift+0x4a>
 800f0a6:	3904      	subs	r1, #4
 800f0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800f0b0:	459c      	cmp	ip, r3
 800f0b2:	d8f9      	bhi.n	800f0a8 <__lshift+0xc0>
 800f0b4:	e7ea      	b.n	800f08c <__lshift+0xa4>
 800f0b6:	bf00      	nop
 800f0b8:	0801086c 	.word	0x0801086c
 800f0bc:	0801088e 	.word	0x0801088e

0800f0c0 <__mcmp>:
 800f0c0:	b530      	push	{r4, r5, lr}
 800f0c2:	6902      	ldr	r2, [r0, #16]
 800f0c4:	690c      	ldr	r4, [r1, #16]
 800f0c6:	1b12      	subs	r2, r2, r4
 800f0c8:	d10e      	bne.n	800f0e8 <__mcmp+0x28>
 800f0ca:	f100 0314 	add.w	r3, r0, #20
 800f0ce:	3114      	adds	r1, #20
 800f0d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f0d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f0d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f0dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f0e0:	42a5      	cmp	r5, r4
 800f0e2:	d003      	beq.n	800f0ec <__mcmp+0x2c>
 800f0e4:	d305      	bcc.n	800f0f2 <__mcmp+0x32>
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	4610      	mov	r0, r2
 800f0ea:	bd30      	pop	{r4, r5, pc}
 800f0ec:	4283      	cmp	r3, r0
 800f0ee:	d3f3      	bcc.n	800f0d8 <__mcmp+0x18>
 800f0f0:	e7fa      	b.n	800f0e8 <__mcmp+0x28>
 800f0f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0f6:	e7f7      	b.n	800f0e8 <__mcmp+0x28>

0800f0f8 <__mdiff>:
 800f0f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0fc:	460c      	mov	r4, r1
 800f0fe:	4606      	mov	r6, r0
 800f100:	4611      	mov	r1, r2
 800f102:	4620      	mov	r0, r4
 800f104:	4690      	mov	r8, r2
 800f106:	f7ff ffdb 	bl	800f0c0 <__mcmp>
 800f10a:	1e05      	subs	r5, r0, #0
 800f10c:	d110      	bne.n	800f130 <__mdiff+0x38>
 800f10e:	4629      	mov	r1, r5
 800f110:	4630      	mov	r0, r6
 800f112:	f7ff fd59 	bl	800ebc8 <_Balloc>
 800f116:	b930      	cbnz	r0, 800f126 <__mdiff+0x2e>
 800f118:	4b3a      	ldr	r3, [pc, #232]	; (800f204 <__mdiff+0x10c>)
 800f11a:	4602      	mov	r2, r0
 800f11c:	f240 2137 	movw	r1, #567	; 0x237
 800f120:	4839      	ldr	r0, [pc, #228]	; (800f208 <__mdiff+0x110>)
 800f122:	f000 f9af 	bl	800f484 <__assert_func>
 800f126:	2301      	movs	r3, #1
 800f128:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f12c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f130:	bfa4      	itt	ge
 800f132:	4643      	movge	r3, r8
 800f134:	46a0      	movge	r8, r4
 800f136:	4630      	mov	r0, r6
 800f138:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f13c:	bfa6      	itte	ge
 800f13e:	461c      	movge	r4, r3
 800f140:	2500      	movge	r5, #0
 800f142:	2501      	movlt	r5, #1
 800f144:	f7ff fd40 	bl	800ebc8 <_Balloc>
 800f148:	b920      	cbnz	r0, 800f154 <__mdiff+0x5c>
 800f14a:	4b2e      	ldr	r3, [pc, #184]	; (800f204 <__mdiff+0x10c>)
 800f14c:	4602      	mov	r2, r0
 800f14e:	f240 2145 	movw	r1, #581	; 0x245
 800f152:	e7e5      	b.n	800f120 <__mdiff+0x28>
 800f154:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f158:	6926      	ldr	r6, [r4, #16]
 800f15a:	60c5      	str	r5, [r0, #12]
 800f15c:	f104 0914 	add.w	r9, r4, #20
 800f160:	f108 0514 	add.w	r5, r8, #20
 800f164:	f100 0e14 	add.w	lr, r0, #20
 800f168:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f16c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f170:	f108 0210 	add.w	r2, r8, #16
 800f174:	46f2      	mov	sl, lr
 800f176:	2100      	movs	r1, #0
 800f178:	f859 3b04 	ldr.w	r3, [r9], #4
 800f17c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f180:	fa11 f88b 	uxtah	r8, r1, fp
 800f184:	b299      	uxth	r1, r3
 800f186:	0c1b      	lsrs	r3, r3, #16
 800f188:	eba8 0801 	sub.w	r8, r8, r1
 800f18c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f190:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f194:	fa1f f888 	uxth.w	r8, r8
 800f198:	1419      	asrs	r1, r3, #16
 800f19a:	454e      	cmp	r6, r9
 800f19c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f1a0:	f84a 3b04 	str.w	r3, [sl], #4
 800f1a4:	d8e8      	bhi.n	800f178 <__mdiff+0x80>
 800f1a6:	1b33      	subs	r3, r6, r4
 800f1a8:	3b15      	subs	r3, #21
 800f1aa:	f023 0303 	bic.w	r3, r3, #3
 800f1ae:	3304      	adds	r3, #4
 800f1b0:	3415      	adds	r4, #21
 800f1b2:	42a6      	cmp	r6, r4
 800f1b4:	bf38      	it	cc
 800f1b6:	2304      	movcc	r3, #4
 800f1b8:	441d      	add	r5, r3
 800f1ba:	4473      	add	r3, lr
 800f1bc:	469e      	mov	lr, r3
 800f1be:	462e      	mov	r6, r5
 800f1c0:	4566      	cmp	r6, ip
 800f1c2:	d30e      	bcc.n	800f1e2 <__mdiff+0xea>
 800f1c4:	f10c 0203 	add.w	r2, ip, #3
 800f1c8:	1b52      	subs	r2, r2, r5
 800f1ca:	f022 0203 	bic.w	r2, r2, #3
 800f1ce:	3d03      	subs	r5, #3
 800f1d0:	45ac      	cmp	ip, r5
 800f1d2:	bf38      	it	cc
 800f1d4:	2200      	movcc	r2, #0
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f1dc:	b17a      	cbz	r2, 800f1fe <__mdiff+0x106>
 800f1de:	6107      	str	r7, [r0, #16]
 800f1e0:	e7a4      	b.n	800f12c <__mdiff+0x34>
 800f1e2:	f856 8b04 	ldr.w	r8, [r6], #4
 800f1e6:	fa11 f288 	uxtah	r2, r1, r8
 800f1ea:	1414      	asrs	r4, r2, #16
 800f1ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f1f0:	b292      	uxth	r2, r2
 800f1f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f1f6:	f84e 2b04 	str.w	r2, [lr], #4
 800f1fa:	1421      	asrs	r1, r4, #16
 800f1fc:	e7e0      	b.n	800f1c0 <__mdiff+0xc8>
 800f1fe:	3f01      	subs	r7, #1
 800f200:	e7ea      	b.n	800f1d8 <__mdiff+0xe0>
 800f202:	bf00      	nop
 800f204:	0801086c 	.word	0x0801086c
 800f208:	0801088e 	.word	0x0801088e

0800f20c <__d2b>:
 800f20c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f210:	460f      	mov	r7, r1
 800f212:	2101      	movs	r1, #1
 800f214:	ec59 8b10 	vmov	r8, r9, d0
 800f218:	4616      	mov	r6, r2
 800f21a:	f7ff fcd5 	bl	800ebc8 <_Balloc>
 800f21e:	4604      	mov	r4, r0
 800f220:	b930      	cbnz	r0, 800f230 <__d2b+0x24>
 800f222:	4602      	mov	r2, r0
 800f224:	4b24      	ldr	r3, [pc, #144]	; (800f2b8 <__d2b+0xac>)
 800f226:	4825      	ldr	r0, [pc, #148]	; (800f2bc <__d2b+0xb0>)
 800f228:	f240 310f 	movw	r1, #783	; 0x30f
 800f22c:	f000 f92a 	bl	800f484 <__assert_func>
 800f230:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f234:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f238:	bb2d      	cbnz	r5, 800f286 <__d2b+0x7a>
 800f23a:	9301      	str	r3, [sp, #4]
 800f23c:	f1b8 0300 	subs.w	r3, r8, #0
 800f240:	d026      	beq.n	800f290 <__d2b+0x84>
 800f242:	4668      	mov	r0, sp
 800f244:	9300      	str	r3, [sp, #0]
 800f246:	f7ff fd87 	bl	800ed58 <__lo0bits>
 800f24a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f24e:	b1e8      	cbz	r0, 800f28c <__d2b+0x80>
 800f250:	f1c0 0320 	rsb	r3, r0, #32
 800f254:	fa02 f303 	lsl.w	r3, r2, r3
 800f258:	430b      	orrs	r3, r1
 800f25a:	40c2      	lsrs	r2, r0
 800f25c:	6163      	str	r3, [r4, #20]
 800f25e:	9201      	str	r2, [sp, #4]
 800f260:	9b01      	ldr	r3, [sp, #4]
 800f262:	61a3      	str	r3, [r4, #24]
 800f264:	2b00      	cmp	r3, #0
 800f266:	bf14      	ite	ne
 800f268:	2202      	movne	r2, #2
 800f26a:	2201      	moveq	r2, #1
 800f26c:	6122      	str	r2, [r4, #16]
 800f26e:	b1bd      	cbz	r5, 800f2a0 <__d2b+0x94>
 800f270:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f274:	4405      	add	r5, r0
 800f276:	603d      	str	r5, [r7, #0]
 800f278:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f27c:	6030      	str	r0, [r6, #0]
 800f27e:	4620      	mov	r0, r4
 800f280:	b003      	add	sp, #12
 800f282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f28a:	e7d6      	b.n	800f23a <__d2b+0x2e>
 800f28c:	6161      	str	r1, [r4, #20]
 800f28e:	e7e7      	b.n	800f260 <__d2b+0x54>
 800f290:	a801      	add	r0, sp, #4
 800f292:	f7ff fd61 	bl	800ed58 <__lo0bits>
 800f296:	9b01      	ldr	r3, [sp, #4]
 800f298:	6163      	str	r3, [r4, #20]
 800f29a:	3020      	adds	r0, #32
 800f29c:	2201      	movs	r2, #1
 800f29e:	e7e5      	b.n	800f26c <__d2b+0x60>
 800f2a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f2a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f2a8:	6038      	str	r0, [r7, #0]
 800f2aa:	6918      	ldr	r0, [r3, #16]
 800f2ac:	f7ff fd34 	bl	800ed18 <__hi0bits>
 800f2b0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f2b4:	e7e2      	b.n	800f27c <__d2b+0x70>
 800f2b6:	bf00      	nop
 800f2b8:	0801086c 	.word	0x0801086c
 800f2bc:	0801088e 	.word	0x0801088e

0800f2c0 <__sread>:
 800f2c0:	b510      	push	{r4, lr}
 800f2c2:	460c      	mov	r4, r1
 800f2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2c8:	f000 f8a8 	bl	800f41c <_read_r>
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	bfab      	itete	ge
 800f2d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f2d2:	89a3      	ldrhlt	r3, [r4, #12]
 800f2d4:	181b      	addge	r3, r3, r0
 800f2d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f2da:	bfac      	ite	ge
 800f2dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f2de:	81a3      	strhlt	r3, [r4, #12]
 800f2e0:	bd10      	pop	{r4, pc}

0800f2e2 <__swrite>:
 800f2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e6:	461f      	mov	r7, r3
 800f2e8:	898b      	ldrh	r3, [r1, #12]
 800f2ea:	05db      	lsls	r3, r3, #23
 800f2ec:	4605      	mov	r5, r0
 800f2ee:	460c      	mov	r4, r1
 800f2f0:	4616      	mov	r6, r2
 800f2f2:	d505      	bpl.n	800f300 <__swrite+0x1e>
 800f2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2f8:	2302      	movs	r3, #2
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	f000 f87c 	bl	800f3f8 <_lseek_r>
 800f300:	89a3      	ldrh	r3, [r4, #12]
 800f302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f30a:	81a3      	strh	r3, [r4, #12]
 800f30c:	4632      	mov	r2, r6
 800f30e:	463b      	mov	r3, r7
 800f310:	4628      	mov	r0, r5
 800f312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f316:	f000 b8a3 	b.w	800f460 <_write_r>

0800f31a <__sseek>:
 800f31a:	b510      	push	{r4, lr}
 800f31c:	460c      	mov	r4, r1
 800f31e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f322:	f000 f869 	bl	800f3f8 <_lseek_r>
 800f326:	1c43      	adds	r3, r0, #1
 800f328:	89a3      	ldrh	r3, [r4, #12]
 800f32a:	bf15      	itete	ne
 800f32c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f32e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f336:	81a3      	strheq	r3, [r4, #12]
 800f338:	bf18      	it	ne
 800f33a:	81a3      	strhne	r3, [r4, #12]
 800f33c:	bd10      	pop	{r4, pc}

0800f33e <__sclose>:
 800f33e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f342:	f000 b849 	b.w	800f3d8 <_close_r>

0800f346 <_realloc_r>:
 800f346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f34a:	4680      	mov	r8, r0
 800f34c:	4614      	mov	r4, r2
 800f34e:	460e      	mov	r6, r1
 800f350:	b921      	cbnz	r1, 800f35c <_realloc_r+0x16>
 800f352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f356:	4611      	mov	r1, r2
 800f358:	f7ff bafc 	b.w	800e954 <_malloc_r>
 800f35c:	b92a      	cbnz	r2, 800f36a <_realloc_r+0x24>
 800f35e:	f000 f8c5 	bl	800f4ec <_free_r>
 800f362:	4625      	mov	r5, r4
 800f364:	4628      	mov	r0, r5
 800f366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f36a:	f000 f91d 	bl	800f5a8 <_malloc_usable_size_r>
 800f36e:	4284      	cmp	r4, r0
 800f370:	4607      	mov	r7, r0
 800f372:	d802      	bhi.n	800f37a <_realloc_r+0x34>
 800f374:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f378:	d812      	bhi.n	800f3a0 <_realloc_r+0x5a>
 800f37a:	4621      	mov	r1, r4
 800f37c:	4640      	mov	r0, r8
 800f37e:	f7ff fae9 	bl	800e954 <_malloc_r>
 800f382:	4605      	mov	r5, r0
 800f384:	2800      	cmp	r0, #0
 800f386:	d0ed      	beq.n	800f364 <_realloc_r+0x1e>
 800f388:	42bc      	cmp	r4, r7
 800f38a:	4622      	mov	r2, r4
 800f38c:	4631      	mov	r1, r6
 800f38e:	bf28      	it	cs
 800f390:	463a      	movcs	r2, r7
 800f392:	f7fe fad4 	bl	800d93e <memcpy>
 800f396:	4631      	mov	r1, r6
 800f398:	4640      	mov	r0, r8
 800f39a:	f000 f8a7 	bl	800f4ec <_free_r>
 800f39e:	e7e1      	b.n	800f364 <_realloc_r+0x1e>
 800f3a0:	4635      	mov	r5, r6
 800f3a2:	e7df      	b.n	800f364 <_realloc_r+0x1e>

0800f3a4 <memmove>:
 800f3a4:	4288      	cmp	r0, r1
 800f3a6:	b510      	push	{r4, lr}
 800f3a8:	eb01 0402 	add.w	r4, r1, r2
 800f3ac:	d902      	bls.n	800f3b4 <memmove+0x10>
 800f3ae:	4284      	cmp	r4, r0
 800f3b0:	4623      	mov	r3, r4
 800f3b2:	d807      	bhi.n	800f3c4 <memmove+0x20>
 800f3b4:	1e43      	subs	r3, r0, #1
 800f3b6:	42a1      	cmp	r1, r4
 800f3b8:	d008      	beq.n	800f3cc <memmove+0x28>
 800f3ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3c2:	e7f8      	b.n	800f3b6 <memmove+0x12>
 800f3c4:	4402      	add	r2, r0
 800f3c6:	4601      	mov	r1, r0
 800f3c8:	428a      	cmp	r2, r1
 800f3ca:	d100      	bne.n	800f3ce <memmove+0x2a>
 800f3cc:	bd10      	pop	{r4, pc}
 800f3ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3d6:	e7f7      	b.n	800f3c8 <memmove+0x24>

0800f3d8 <_close_r>:
 800f3d8:	b538      	push	{r3, r4, r5, lr}
 800f3da:	4d06      	ldr	r5, [pc, #24]	; (800f3f4 <_close_r+0x1c>)
 800f3dc:	2300      	movs	r3, #0
 800f3de:	4604      	mov	r4, r0
 800f3e0:	4608      	mov	r0, r1
 800f3e2:	602b      	str	r3, [r5, #0]
 800f3e4:	f7f5 fb9f 	bl	8004b26 <_close>
 800f3e8:	1c43      	adds	r3, r0, #1
 800f3ea:	d102      	bne.n	800f3f2 <_close_r+0x1a>
 800f3ec:	682b      	ldr	r3, [r5, #0]
 800f3ee:	b103      	cbz	r3, 800f3f2 <_close_r+0x1a>
 800f3f0:	6023      	str	r3, [r4, #0]
 800f3f2:	bd38      	pop	{r3, r4, r5, pc}
 800f3f4:	200054b0 	.word	0x200054b0

0800f3f8 <_lseek_r>:
 800f3f8:	b538      	push	{r3, r4, r5, lr}
 800f3fa:	4d07      	ldr	r5, [pc, #28]	; (800f418 <_lseek_r+0x20>)
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	4608      	mov	r0, r1
 800f400:	4611      	mov	r1, r2
 800f402:	2200      	movs	r2, #0
 800f404:	602a      	str	r2, [r5, #0]
 800f406:	461a      	mov	r2, r3
 800f408:	f7f5 fbb4 	bl	8004b74 <_lseek>
 800f40c:	1c43      	adds	r3, r0, #1
 800f40e:	d102      	bne.n	800f416 <_lseek_r+0x1e>
 800f410:	682b      	ldr	r3, [r5, #0]
 800f412:	b103      	cbz	r3, 800f416 <_lseek_r+0x1e>
 800f414:	6023      	str	r3, [r4, #0]
 800f416:	bd38      	pop	{r3, r4, r5, pc}
 800f418:	200054b0 	.word	0x200054b0

0800f41c <_read_r>:
 800f41c:	b538      	push	{r3, r4, r5, lr}
 800f41e:	4d07      	ldr	r5, [pc, #28]	; (800f43c <_read_r+0x20>)
 800f420:	4604      	mov	r4, r0
 800f422:	4608      	mov	r0, r1
 800f424:	4611      	mov	r1, r2
 800f426:	2200      	movs	r2, #0
 800f428:	602a      	str	r2, [r5, #0]
 800f42a:	461a      	mov	r2, r3
 800f42c:	f7f5 fb42 	bl	8004ab4 <_read>
 800f430:	1c43      	adds	r3, r0, #1
 800f432:	d102      	bne.n	800f43a <_read_r+0x1e>
 800f434:	682b      	ldr	r3, [r5, #0]
 800f436:	b103      	cbz	r3, 800f43a <_read_r+0x1e>
 800f438:	6023      	str	r3, [r4, #0]
 800f43a:	bd38      	pop	{r3, r4, r5, pc}
 800f43c:	200054b0 	.word	0x200054b0

0800f440 <_sbrk_r>:
 800f440:	b538      	push	{r3, r4, r5, lr}
 800f442:	4d06      	ldr	r5, [pc, #24]	; (800f45c <_sbrk_r+0x1c>)
 800f444:	2300      	movs	r3, #0
 800f446:	4604      	mov	r4, r0
 800f448:	4608      	mov	r0, r1
 800f44a:	602b      	str	r3, [r5, #0]
 800f44c:	f7f5 fba0 	bl	8004b90 <_sbrk>
 800f450:	1c43      	adds	r3, r0, #1
 800f452:	d102      	bne.n	800f45a <_sbrk_r+0x1a>
 800f454:	682b      	ldr	r3, [r5, #0]
 800f456:	b103      	cbz	r3, 800f45a <_sbrk_r+0x1a>
 800f458:	6023      	str	r3, [r4, #0]
 800f45a:	bd38      	pop	{r3, r4, r5, pc}
 800f45c:	200054b0 	.word	0x200054b0

0800f460 <_write_r>:
 800f460:	b538      	push	{r3, r4, r5, lr}
 800f462:	4d07      	ldr	r5, [pc, #28]	; (800f480 <_write_r+0x20>)
 800f464:	4604      	mov	r4, r0
 800f466:	4608      	mov	r0, r1
 800f468:	4611      	mov	r1, r2
 800f46a:	2200      	movs	r2, #0
 800f46c:	602a      	str	r2, [r5, #0]
 800f46e:	461a      	mov	r2, r3
 800f470:	f7f5 fb3d 	bl	8004aee <_write>
 800f474:	1c43      	adds	r3, r0, #1
 800f476:	d102      	bne.n	800f47e <_write_r+0x1e>
 800f478:	682b      	ldr	r3, [r5, #0]
 800f47a:	b103      	cbz	r3, 800f47e <_write_r+0x1e>
 800f47c:	6023      	str	r3, [r4, #0]
 800f47e:	bd38      	pop	{r3, r4, r5, pc}
 800f480:	200054b0 	.word	0x200054b0

0800f484 <__assert_func>:
 800f484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f486:	4614      	mov	r4, r2
 800f488:	461a      	mov	r2, r3
 800f48a:	4b09      	ldr	r3, [pc, #36]	; (800f4b0 <__assert_func+0x2c>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	4605      	mov	r5, r0
 800f490:	68d8      	ldr	r0, [r3, #12]
 800f492:	b14c      	cbz	r4, 800f4a8 <__assert_func+0x24>
 800f494:	4b07      	ldr	r3, [pc, #28]	; (800f4b4 <__assert_func+0x30>)
 800f496:	9100      	str	r1, [sp, #0]
 800f498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f49c:	4906      	ldr	r1, [pc, #24]	; (800f4b8 <__assert_func+0x34>)
 800f49e:	462b      	mov	r3, r5
 800f4a0:	f000 f88a 	bl	800f5b8 <fiprintf>
 800f4a4:	f000 f8a7 	bl	800f5f6 <abort>
 800f4a8:	4b04      	ldr	r3, [pc, #16]	; (800f4bc <__assert_func+0x38>)
 800f4aa:	461c      	mov	r4, r3
 800f4ac:	e7f3      	b.n	800f496 <__assert_func+0x12>
 800f4ae:	bf00      	nop
 800f4b0:	20000088 	.word	0x20000088
 800f4b4:	08010aef 	.word	0x08010aef
 800f4b8:	08010afc 	.word	0x08010afc
 800f4bc:	08010b2a 	.word	0x08010b2a

0800f4c0 <_calloc_r>:
 800f4c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4c2:	fba1 2402 	umull	r2, r4, r1, r2
 800f4c6:	b94c      	cbnz	r4, 800f4dc <_calloc_r+0x1c>
 800f4c8:	4611      	mov	r1, r2
 800f4ca:	9201      	str	r2, [sp, #4]
 800f4cc:	f7ff fa42 	bl	800e954 <_malloc_r>
 800f4d0:	9a01      	ldr	r2, [sp, #4]
 800f4d2:	4605      	mov	r5, r0
 800f4d4:	b930      	cbnz	r0, 800f4e4 <_calloc_r+0x24>
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	b003      	add	sp, #12
 800f4da:	bd30      	pop	{r4, r5, pc}
 800f4dc:	220c      	movs	r2, #12
 800f4de:	6002      	str	r2, [r0, #0]
 800f4e0:	2500      	movs	r5, #0
 800f4e2:	e7f8      	b.n	800f4d6 <_calloc_r+0x16>
 800f4e4:	4621      	mov	r1, r4
 800f4e6:	f7fe f9f1 	bl	800d8cc <memset>
 800f4ea:	e7f4      	b.n	800f4d6 <_calloc_r+0x16>

0800f4ec <_free_r>:
 800f4ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4ee:	2900      	cmp	r1, #0
 800f4f0:	d044      	beq.n	800f57c <_free_r+0x90>
 800f4f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4f6:	9001      	str	r0, [sp, #4]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f1a1 0404 	sub.w	r4, r1, #4
 800f4fe:	bfb8      	it	lt
 800f500:	18e4      	addlt	r4, r4, r3
 800f502:	f7ff fb55 	bl	800ebb0 <__malloc_lock>
 800f506:	4a1e      	ldr	r2, [pc, #120]	; (800f580 <_free_r+0x94>)
 800f508:	9801      	ldr	r0, [sp, #4]
 800f50a:	6813      	ldr	r3, [r2, #0]
 800f50c:	b933      	cbnz	r3, 800f51c <_free_r+0x30>
 800f50e:	6063      	str	r3, [r4, #4]
 800f510:	6014      	str	r4, [r2, #0]
 800f512:	b003      	add	sp, #12
 800f514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f518:	f7ff bb50 	b.w	800ebbc <__malloc_unlock>
 800f51c:	42a3      	cmp	r3, r4
 800f51e:	d908      	bls.n	800f532 <_free_r+0x46>
 800f520:	6825      	ldr	r5, [r4, #0]
 800f522:	1961      	adds	r1, r4, r5
 800f524:	428b      	cmp	r3, r1
 800f526:	bf01      	itttt	eq
 800f528:	6819      	ldreq	r1, [r3, #0]
 800f52a:	685b      	ldreq	r3, [r3, #4]
 800f52c:	1949      	addeq	r1, r1, r5
 800f52e:	6021      	streq	r1, [r4, #0]
 800f530:	e7ed      	b.n	800f50e <_free_r+0x22>
 800f532:	461a      	mov	r2, r3
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	b10b      	cbz	r3, 800f53c <_free_r+0x50>
 800f538:	42a3      	cmp	r3, r4
 800f53a:	d9fa      	bls.n	800f532 <_free_r+0x46>
 800f53c:	6811      	ldr	r1, [r2, #0]
 800f53e:	1855      	adds	r5, r2, r1
 800f540:	42a5      	cmp	r5, r4
 800f542:	d10b      	bne.n	800f55c <_free_r+0x70>
 800f544:	6824      	ldr	r4, [r4, #0]
 800f546:	4421      	add	r1, r4
 800f548:	1854      	adds	r4, r2, r1
 800f54a:	42a3      	cmp	r3, r4
 800f54c:	6011      	str	r1, [r2, #0]
 800f54e:	d1e0      	bne.n	800f512 <_free_r+0x26>
 800f550:	681c      	ldr	r4, [r3, #0]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	6053      	str	r3, [r2, #4]
 800f556:	440c      	add	r4, r1
 800f558:	6014      	str	r4, [r2, #0]
 800f55a:	e7da      	b.n	800f512 <_free_r+0x26>
 800f55c:	d902      	bls.n	800f564 <_free_r+0x78>
 800f55e:	230c      	movs	r3, #12
 800f560:	6003      	str	r3, [r0, #0]
 800f562:	e7d6      	b.n	800f512 <_free_r+0x26>
 800f564:	6825      	ldr	r5, [r4, #0]
 800f566:	1961      	adds	r1, r4, r5
 800f568:	428b      	cmp	r3, r1
 800f56a:	bf04      	itt	eq
 800f56c:	6819      	ldreq	r1, [r3, #0]
 800f56e:	685b      	ldreq	r3, [r3, #4]
 800f570:	6063      	str	r3, [r4, #4]
 800f572:	bf04      	itt	eq
 800f574:	1949      	addeq	r1, r1, r5
 800f576:	6021      	streq	r1, [r4, #0]
 800f578:	6054      	str	r4, [r2, #4]
 800f57a:	e7ca      	b.n	800f512 <_free_r+0x26>
 800f57c:	b003      	add	sp, #12
 800f57e:	bd30      	pop	{r4, r5, pc}
 800f580:	200054a8 	.word	0x200054a8

0800f584 <__ascii_mbtowc>:
 800f584:	b082      	sub	sp, #8
 800f586:	b901      	cbnz	r1, 800f58a <__ascii_mbtowc+0x6>
 800f588:	a901      	add	r1, sp, #4
 800f58a:	b142      	cbz	r2, 800f59e <__ascii_mbtowc+0x1a>
 800f58c:	b14b      	cbz	r3, 800f5a2 <__ascii_mbtowc+0x1e>
 800f58e:	7813      	ldrb	r3, [r2, #0]
 800f590:	600b      	str	r3, [r1, #0]
 800f592:	7812      	ldrb	r2, [r2, #0]
 800f594:	1e10      	subs	r0, r2, #0
 800f596:	bf18      	it	ne
 800f598:	2001      	movne	r0, #1
 800f59a:	b002      	add	sp, #8
 800f59c:	4770      	bx	lr
 800f59e:	4610      	mov	r0, r2
 800f5a0:	e7fb      	b.n	800f59a <__ascii_mbtowc+0x16>
 800f5a2:	f06f 0001 	mvn.w	r0, #1
 800f5a6:	e7f8      	b.n	800f59a <__ascii_mbtowc+0x16>

0800f5a8 <_malloc_usable_size_r>:
 800f5a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5ac:	1f18      	subs	r0, r3, #4
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	bfbc      	itt	lt
 800f5b2:	580b      	ldrlt	r3, [r1, r0]
 800f5b4:	18c0      	addlt	r0, r0, r3
 800f5b6:	4770      	bx	lr

0800f5b8 <fiprintf>:
 800f5b8:	b40e      	push	{r1, r2, r3}
 800f5ba:	b503      	push	{r0, r1, lr}
 800f5bc:	4601      	mov	r1, r0
 800f5be:	ab03      	add	r3, sp, #12
 800f5c0:	4805      	ldr	r0, [pc, #20]	; (800f5d8 <fiprintf+0x20>)
 800f5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5c6:	6800      	ldr	r0, [r0, #0]
 800f5c8:	9301      	str	r3, [sp, #4]
 800f5ca:	f000 f845 	bl	800f658 <_vfiprintf_r>
 800f5ce:	b002      	add	sp, #8
 800f5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5d4:	b003      	add	sp, #12
 800f5d6:	4770      	bx	lr
 800f5d8:	20000088 	.word	0x20000088

0800f5dc <__ascii_wctomb>:
 800f5dc:	b149      	cbz	r1, 800f5f2 <__ascii_wctomb+0x16>
 800f5de:	2aff      	cmp	r2, #255	; 0xff
 800f5e0:	bf85      	ittet	hi
 800f5e2:	238a      	movhi	r3, #138	; 0x8a
 800f5e4:	6003      	strhi	r3, [r0, #0]
 800f5e6:	700a      	strbls	r2, [r1, #0]
 800f5e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f5ec:	bf98      	it	ls
 800f5ee:	2001      	movls	r0, #1
 800f5f0:	4770      	bx	lr
 800f5f2:	4608      	mov	r0, r1
 800f5f4:	4770      	bx	lr

0800f5f6 <abort>:
 800f5f6:	b508      	push	{r3, lr}
 800f5f8:	2006      	movs	r0, #6
 800f5fa:	f000 fa89 	bl	800fb10 <raise>
 800f5fe:	2001      	movs	r0, #1
 800f600:	f7f5 fa4e 	bl	8004aa0 <_exit>

0800f604 <__sfputc_r>:
 800f604:	6893      	ldr	r3, [r2, #8]
 800f606:	3b01      	subs	r3, #1
 800f608:	2b00      	cmp	r3, #0
 800f60a:	b410      	push	{r4}
 800f60c:	6093      	str	r3, [r2, #8]
 800f60e:	da08      	bge.n	800f622 <__sfputc_r+0x1e>
 800f610:	6994      	ldr	r4, [r2, #24]
 800f612:	42a3      	cmp	r3, r4
 800f614:	db01      	blt.n	800f61a <__sfputc_r+0x16>
 800f616:	290a      	cmp	r1, #10
 800f618:	d103      	bne.n	800f622 <__sfputc_r+0x1e>
 800f61a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f61e:	f000 b935 	b.w	800f88c <__swbuf_r>
 800f622:	6813      	ldr	r3, [r2, #0]
 800f624:	1c58      	adds	r0, r3, #1
 800f626:	6010      	str	r0, [r2, #0]
 800f628:	7019      	strb	r1, [r3, #0]
 800f62a:	4608      	mov	r0, r1
 800f62c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f630:	4770      	bx	lr

0800f632 <__sfputs_r>:
 800f632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f634:	4606      	mov	r6, r0
 800f636:	460f      	mov	r7, r1
 800f638:	4614      	mov	r4, r2
 800f63a:	18d5      	adds	r5, r2, r3
 800f63c:	42ac      	cmp	r4, r5
 800f63e:	d101      	bne.n	800f644 <__sfputs_r+0x12>
 800f640:	2000      	movs	r0, #0
 800f642:	e007      	b.n	800f654 <__sfputs_r+0x22>
 800f644:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f648:	463a      	mov	r2, r7
 800f64a:	4630      	mov	r0, r6
 800f64c:	f7ff ffda 	bl	800f604 <__sfputc_r>
 800f650:	1c43      	adds	r3, r0, #1
 800f652:	d1f3      	bne.n	800f63c <__sfputs_r+0xa>
 800f654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f658 <_vfiprintf_r>:
 800f658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65c:	460d      	mov	r5, r1
 800f65e:	b09d      	sub	sp, #116	; 0x74
 800f660:	4614      	mov	r4, r2
 800f662:	4698      	mov	r8, r3
 800f664:	4606      	mov	r6, r0
 800f666:	b118      	cbz	r0, 800f670 <_vfiprintf_r+0x18>
 800f668:	6a03      	ldr	r3, [r0, #32]
 800f66a:	b90b      	cbnz	r3, 800f670 <_vfiprintf_r+0x18>
 800f66c:	f7fe f8f8 	bl	800d860 <__sinit>
 800f670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f672:	07d9      	lsls	r1, r3, #31
 800f674:	d405      	bmi.n	800f682 <_vfiprintf_r+0x2a>
 800f676:	89ab      	ldrh	r3, [r5, #12]
 800f678:	059a      	lsls	r2, r3, #22
 800f67a:	d402      	bmi.n	800f682 <_vfiprintf_r+0x2a>
 800f67c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f67e:	f7fe f95c 	bl	800d93a <__retarget_lock_acquire_recursive>
 800f682:	89ab      	ldrh	r3, [r5, #12]
 800f684:	071b      	lsls	r3, r3, #28
 800f686:	d501      	bpl.n	800f68c <_vfiprintf_r+0x34>
 800f688:	692b      	ldr	r3, [r5, #16]
 800f68a:	b99b      	cbnz	r3, 800f6b4 <_vfiprintf_r+0x5c>
 800f68c:	4629      	mov	r1, r5
 800f68e:	4630      	mov	r0, r6
 800f690:	f000 f93a 	bl	800f908 <__swsetup_r>
 800f694:	b170      	cbz	r0, 800f6b4 <_vfiprintf_r+0x5c>
 800f696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f698:	07dc      	lsls	r4, r3, #31
 800f69a:	d504      	bpl.n	800f6a6 <_vfiprintf_r+0x4e>
 800f69c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6a0:	b01d      	add	sp, #116	; 0x74
 800f6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6a6:	89ab      	ldrh	r3, [r5, #12]
 800f6a8:	0598      	lsls	r0, r3, #22
 800f6aa:	d4f7      	bmi.n	800f69c <_vfiprintf_r+0x44>
 800f6ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6ae:	f7fe f945 	bl	800d93c <__retarget_lock_release_recursive>
 800f6b2:	e7f3      	b.n	800f69c <_vfiprintf_r+0x44>
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800f6b8:	2320      	movs	r3, #32
 800f6ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6be:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6c2:	2330      	movs	r3, #48	; 0x30
 800f6c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f878 <_vfiprintf_r+0x220>
 800f6c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6cc:	f04f 0901 	mov.w	r9, #1
 800f6d0:	4623      	mov	r3, r4
 800f6d2:	469a      	mov	sl, r3
 800f6d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6d8:	b10a      	cbz	r2, 800f6de <_vfiprintf_r+0x86>
 800f6da:	2a25      	cmp	r2, #37	; 0x25
 800f6dc:	d1f9      	bne.n	800f6d2 <_vfiprintf_r+0x7a>
 800f6de:	ebba 0b04 	subs.w	fp, sl, r4
 800f6e2:	d00b      	beq.n	800f6fc <_vfiprintf_r+0xa4>
 800f6e4:	465b      	mov	r3, fp
 800f6e6:	4622      	mov	r2, r4
 800f6e8:	4629      	mov	r1, r5
 800f6ea:	4630      	mov	r0, r6
 800f6ec:	f7ff ffa1 	bl	800f632 <__sfputs_r>
 800f6f0:	3001      	adds	r0, #1
 800f6f2:	f000 80a9 	beq.w	800f848 <_vfiprintf_r+0x1f0>
 800f6f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6f8:	445a      	add	r2, fp
 800f6fa:	9209      	str	r2, [sp, #36]	; 0x24
 800f6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800f700:	2b00      	cmp	r3, #0
 800f702:	f000 80a1 	beq.w	800f848 <_vfiprintf_r+0x1f0>
 800f706:	2300      	movs	r3, #0
 800f708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f70c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f710:	f10a 0a01 	add.w	sl, sl, #1
 800f714:	9304      	str	r3, [sp, #16]
 800f716:	9307      	str	r3, [sp, #28]
 800f718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f71c:	931a      	str	r3, [sp, #104]	; 0x68
 800f71e:	4654      	mov	r4, sl
 800f720:	2205      	movs	r2, #5
 800f722:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f726:	4854      	ldr	r0, [pc, #336]	; (800f878 <_vfiprintf_r+0x220>)
 800f728:	f7f0 fd52 	bl	80001d0 <memchr>
 800f72c:	9a04      	ldr	r2, [sp, #16]
 800f72e:	b9d8      	cbnz	r0, 800f768 <_vfiprintf_r+0x110>
 800f730:	06d1      	lsls	r1, r2, #27
 800f732:	bf44      	itt	mi
 800f734:	2320      	movmi	r3, #32
 800f736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f73a:	0713      	lsls	r3, r2, #28
 800f73c:	bf44      	itt	mi
 800f73e:	232b      	movmi	r3, #43	; 0x2b
 800f740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f744:	f89a 3000 	ldrb.w	r3, [sl]
 800f748:	2b2a      	cmp	r3, #42	; 0x2a
 800f74a:	d015      	beq.n	800f778 <_vfiprintf_r+0x120>
 800f74c:	9a07      	ldr	r2, [sp, #28]
 800f74e:	4654      	mov	r4, sl
 800f750:	2000      	movs	r0, #0
 800f752:	f04f 0c0a 	mov.w	ip, #10
 800f756:	4621      	mov	r1, r4
 800f758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f75c:	3b30      	subs	r3, #48	; 0x30
 800f75e:	2b09      	cmp	r3, #9
 800f760:	d94d      	bls.n	800f7fe <_vfiprintf_r+0x1a6>
 800f762:	b1b0      	cbz	r0, 800f792 <_vfiprintf_r+0x13a>
 800f764:	9207      	str	r2, [sp, #28]
 800f766:	e014      	b.n	800f792 <_vfiprintf_r+0x13a>
 800f768:	eba0 0308 	sub.w	r3, r0, r8
 800f76c:	fa09 f303 	lsl.w	r3, r9, r3
 800f770:	4313      	orrs	r3, r2
 800f772:	9304      	str	r3, [sp, #16]
 800f774:	46a2      	mov	sl, r4
 800f776:	e7d2      	b.n	800f71e <_vfiprintf_r+0xc6>
 800f778:	9b03      	ldr	r3, [sp, #12]
 800f77a:	1d19      	adds	r1, r3, #4
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	9103      	str	r1, [sp, #12]
 800f780:	2b00      	cmp	r3, #0
 800f782:	bfbb      	ittet	lt
 800f784:	425b      	neglt	r3, r3
 800f786:	f042 0202 	orrlt.w	r2, r2, #2
 800f78a:	9307      	strge	r3, [sp, #28]
 800f78c:	9307      	strlt	r3, [sp, #28]
 800f78e:	bfb8      	it	lt
 800f790:	9204      	strlt	r2, [sp, #16]
 800f792:	7823      	ldrb	r3, [r4, #0]
 800f794:	2b2e      	cmp	r3, #46	; 0x2e
 800f796:	d10c      	bne.n	800f7b2 <_vfiprintf_r+0x15a>
 800f798:	7863      	ldrb	r3, [r4, #1]
 800f79a:	2b2a      	cmp	r3, #42	; 0x2a
 800f79c:	d134      	bne.n	800f808 <_vfiprintf_r+0x1b0>
 800f79e:	9b03      	ldr	r3, [sp, #12]
 800f7a0:	1d1a      	adds	r2, r3, #4
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	9203      	str	r2, [sp, #12]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	bfb8      	it	lt
 800f7aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f7ae:	3402      	adds	r4, #2
 800f7b0:	9305      	str	r3, [sp, #20]
 800f7b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f888 <_vfiprintf_r+0x230>
 800f7b6:	7821      	ldrb	r1, [r4, #0]
 800f7b8:	2203      	movs	r2, #3
 800f7ba:	4650      	mov	r0, sl
 800f7bc:	f7f0 fd08 	bl	80001d0 <memchr>
 800f7c0:	b138      	cbz	r0, 800f7d2 <_vfiprintf_r+0x17a>
 800f7c2:	9b04      	ldr	r3, [sp, #16]
 800f7c4:	eba0 000a 	sub.w	r0, r0, sl
 800f7c8:	2240      	movs	r2, #64	; 0x40
 800f7ca:	4082      	lsls	r2, r0
 800f7cc:	4313      	orrs	r3, r2
 800f7ce:	3401      	adds	r4, #1
 800f7d0:	9304      	str	r3, [sp, #16]
 800f7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7d6:	4829      	ldr	r0, [pc, #164]	; (800f87c <_vfiprintf_r+0x224>)
 800f7d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7dc:	2206      	movs	r2, #6
 800f7de:	f7f0 fcf7 	bl	80001d0 <memchr>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d03f      	beq.n	800f866 <_vfiprintf_r+0x20e>
 800f7e6:	4b26      	ldr	r3, [pc, #152]	; (800f880 <_vfiprintf_r+0x228>)
 800f7e8:	bb1b      	cbnz	r3, 800f832 <_vfiprintf_r+0x1da>
 800f7ea:	9b03      	ldr	r3, [sp, #12]
 800f7ec:	3307      	adds	r3, #7
 800f7ee:	f023 0307 	bic.w	r3, r3, #7
 800f7f2:	3308      	adds	r3, #8
 800f7f4:	9303      	str	r3, [sp, #12]
 800f7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7f8:	443b      	add	r3, r7
 800f7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800f7fc:	e768      	b.n	800f6d0 <_vfiprintf_r+0x78>
 800f7fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800f802:	460c      	mov	r4, r1
 800f804:	2001      	movs	r0, #1
 800f806:	e7a6      	b.n	800f756 <_vfiprintf_r+0xfe>
 800f808:	2300      	movs	r3, #0
 800f80a:	3401      	adds	r4, #1
 800f80c:	9305      	str	r3, [sp, #20]
 800f80e:	4619      	mov	r1, r3
 800f810:	f04f 0c0a 	mov.w	ip, #10
 800f814:	4620      	mov	r0, r4
 800f816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f81a:	3a30      	subs	r2, #48	; 0x30
 800f81c:	2a09      	cmp	r2, #9
 800f81e:	d903      	bls.n	800f828 <_vfiprintf_r+0x1d0>
 800f820:	2b00      	cmp	r3, #0
 800f822:	d0c6      	beq.n	800f7b2 <_vfiprintf_r+0x15a>
 800f824:	9105      	str	r1, [sp, #20]
 800f826:	e7c4      	b.n	800f7b2 <_vfiprintf_r+0x15a>
 800f828:	fb0c 2101 	mla	r1, ip, r1, r2
 800f82c:	4604      	mov	r4, r0
 800f82e:	2301      	movs	r3, #1
 800f830:	e7f0      	b.n	800f814 <_vfiprintf_r+0x1bc>
 800f832:	ab03      	add	r3, sp, #12
 800f834:	9300      	str	r3, [sp, #0]
 800f836:	462a      	mov	r2, r5
 800f838:	4b12      	ldr	r3, [pc, #72]	; (800f884 <_vfiprintf_r+0x22c>)
 800f83a:	a904      	add	r1, sp, #16
 800f83c:	4630      	mov	r0, r6
 800f83e:	f7fd fb9d 	bl	800cf7c <_printf_float>
 800f842:	4607      	mov	r7, r0
 800f844:	1c78      	adds	r0, r7, #1
 800f846:	d1d6      	bne.n	800f7f6 <_vfiprintf_r+0x19e>
 800f848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f84a:	07d9      	lsls	r1, r3, #31
 800f84c:	d405      	bmi.n	800f85a <_vfiprintf_r+0x202>
 800f84e:	89ab      	ldrh	r3, [r5, #12]
 800f850:	059a      	lsls	r2, r3, #22
 800f852:	d402      	bmi.n	800f85a <_vfiprintf_r+0x202>
 800f854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f856:	f7fe f871 	bl	800d93c <__retarget_lock_release_recursive>
 800f85a:	89ab      	ldrh	r3, [r5, #12]
 800f85c:	065b      	lsls	r3, r3, #25
 800f85e:	f53f af1d 	bmi.w	800f69c <_vfiprintf_r+0x44>
 800f862:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f864:	e71c      	b.n	800f6a0 <_vfiprintf_r+0x48>
 800f866:	ab03      	add	r3, sp, #12
 800f868:	9300      	str	r3, [sp, #0]
 800f86a:	462a      	mov	r2, r5
 800f86c:	4b05      	ldr	r3, [pc, #20]	; (800f884 <_vfiprintf_r+0x22c>)
 800f86e:	a904      	add	r1, sp, #16
 800f870:	4630      	mov	r0, r6
 800f872:	f7fd fe27 	bl	800d4c4 <_printf_i>
 800f876:	e7e4      	b.n	800f842 <_vfiprintf_r+0x1ea>
 800f878:	0801087d 	.word	0x0801087d
 800f87c:	08010887 	.word	0x08010887
 800f880:	0800cf7d 	.word	0x0800cf7d
 800f884:	0800f633 	.word	0x0800f633
 800f888:	08010883 	.word	0x08010883

0800f88c <__swbuf_r>:
 800f88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f88e:	460e      	mov	r6, r1
 800f890:	4614      	mov	r4, r2
 800f892:	4605      	mov	r5, r0
 800f894:	b118      	cbz	r0, 800f89e <__swbuf_r+0x12>
 800f896:	6a03      	ldr	r3, [r0, #32]
 800f898:	b90b      	cbnz	r3, 800f89e <__swbuf_r+0x12>
 800f89a:	f7fd ffe1 	bl	800d860 <__sinit>
 800f89e:	69a3      	ldr	r3, [r4, #24]
 800f8a0:	60a3      	str	r3, [r4, #8]
 800f8a2:	89a3      	ldrh	r3, [r4, #12]
 800f8a4:	071a      	lsls	r2, r3, #28
 800f8a6:	d525      	bpl.n	800f8f4 <__swbuf_r+0x68>
 800f8a8:	6923      	ldr	r3, [r4, #16]
 800f8aa:	b31b      	cbz	r3, 800f8f4 <__swbuf_r+0x68>
 800f8ac:	6823      	ldr	r3, [r4, #0]
 800f8ae:	6922      	ldr	r2, [r4, #16]
 800f8b0:	1a98      	subs	r0, r3, r2
 800f8b2:	6963      	ldr	r3, [r4, #20]
 800f8b4:	b2f6      	uxtb	r6, r6
 800f8b6:	4283      	cmp	r3, r0
 800f8b8:	4637      	mov	r7, r6
 800f8ba:	dc04      	bgt.n	800f8c6 <__swbuf_r+0x3a>
 800f8bc:	4621      	mov	r1, r4
 800f8be:	4628      	mov	r0, r5
 800f8c0:	f7ff f94e 	bl	800eb60 <_fflush_r>
 800f8c4:	b9e0      	cbnz	r0, 800f900 <__swbuf_r+0x74>
 800f8c6:	68a3      	ldr	r3, [r4, #8]
 800f8c8:	3b01      	subs	r3, #1
 800f8ca:	60a3      	str	r3, [r4, #8]
 800f8cc:	6823      	ldr	r3, [r4, #0]
 800f8ce:	1c5a      	adds	r2, r3, #1
 800f8d0:	6022      	str	r2, [r4, #0]
 800f8d2:	701e      	strb	r6, [r3, #0]
 800f8d4:	6962      	ldr	r2, [r4, #20]
 800f8d6:	1c43      	adds	r3, r0, #1
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d004      	beq.n	800f8e6 <__swbuf_r+0x5a>
 800f8dc:	89a3      	ldrh	r3, [r4, #12]
 800f8de:	07db      	lsls	r3, r3, #31
 800f8e0:	d506      	bpl.n	800f8f0 <__swbuf_r+0x64>
 800f8e2:	2e0a      	cmp	r6, #10
 800f8e4:	d104      	bne.n	800f8f0 <__swbuf_r+0x64>
 800f8e6:	4621      	mov	r1, r4
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	f7ff f939 	bl	800eb60 <_fflush_r>
 800f8ee:	b938      	cbnz	r0, 800f900 <__swbuf_r+0x74>
 800f8f0:	4638      	mov	r0, r7
 800f8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8f4:	4621      	mov	r1, r4
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	f000 f806 	bl	800f908 <__swsetup_r>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	d0d5      	beq.n	800f8ac <__swbuf_r+0x20>
 800f900:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f904:	e7f4      	b.n	800f8f0 <__swbuf_r+0x64>
	...

0800f908 <__swsetup_r>:
 800f908:	b538      	push	{r3, r4, r5, lr}
 800f90a:	4b2a      	ldr	r3, [pc, #168]	; (800f9b4 <__swsetup_r+0xac>)
 800f90c:	4605      	mov	r5, r0
 800f90e:	6818      	ldr	r0, [r3, #0]
 800f910:	460c      	mov	r4, r1
 800f912:	b118      	cbz	r0, 800f91c <__swsetup_r+0x14>
 800f914:	6a03      	ldr	r3, [r0, #32]
 800f916:	b90b      	cbnz	r3, 800f91c <__swsetup_r+0x14>
 800f918:	f7fd ffa2 	bl	800d860 <__sinit>
 800f91c:	89a3      	ldrh	r3, [r4, #12]
 800f91e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f922:	0718      	lsls	r0, r3, #28
 800f924:	d422      	bmi.n	800f96c <__swsetup_r+0x64>
 800f926:	06d9      	lsls	r1, r3, #27
 800f928:	d407      	bmi.n	800f93a <__swsetup_r+0x32>
 800f92a:	2309      	movs	r3, #9
 800f92c:	602b      	str	r3, [r5, #0]
 800f92e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f932:	81a3      	strh	r3, [r4, #12]
 800f934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f938:	e034      	b.n	800f9a4 <__swsetup_r+0x9c>
 800f93a:	0758      	lsls	r0, r3, #29
 800f93c:	d512      	bpl.n	800f964 <__swsetup_r+0x5c>
 800f93e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f940:	b141      	cbz	r1, 800f954 <__swsetup_r+0x4c>
 800f942:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f946:	4299      	cmp	r1, r3
 800f948:	d002      	beq.n	800f950 <__swsetup_r+0x48>
 800f94a:	4628      	mov	r0, r5
 800f94c:	f7ff fdce 	bl	800f4ec <_free_r>
 800f950:	2300      	movs	r3, #0
 800f952:	6363      	str	r3, [r4, #52]	; 0x34
 800f954:	89a3      	ldrh	r3, [r4, #12]
 800f956:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f95a:	81a3      	strh	r3, [r4, #12]
 800f95c:	2300      	movs	r3, #0
 800f95e:	6063      	str	r3, [r4, #4]
 800f960:	6923      	ldr	r3, [r4, #16]
 800f962:	6023      	str	r3, [r4, #0]
 800f964:	89a3      	ldrh	r3, [r4, #12]
 800f966:	f043 0308 	orr.w	r3, r3, #8
 800f96a:	81a3      	strh	r3, [r4, #12]
 800f96c:	6923      	ldr	r3, [r4, #16]
 800f96e:	b94b      	cbnz	r3, 800f984 <__swsetup_r+0x7c>
 800f970:	89a3      	ldrh	r3, [r4, #12]
 800f972:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f97a:	d003      	beq.n	800f984 <__swsetup_r+0x7c>
 800f97c:	4621      	mov	r1, r4
 800f97e:	4628      	mov	r0, r5
 800f980:	f000 f840 	bl	800fa04 <__smakebuf_r>
 800f984:	89a0      	ldrh	r0, [r4, #12]
 800f986:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f98a:	f010 0301 	ands.w	r3, r0, #1
 800f98e:	d00a      	beq.n	800f9a6 <__swsetup_r+0x9e>
 800f990:	2300      	movs	r3, #0
 800f992:	60a3      	str	r3, [r4, #8]
 800f994:	6963      	ldr	r3, [r4, #20]
 800f996:	425b      	negs	r3, r3
 800f998:	61a3      	str	r3, [r4, #24]
 800f99a:	6923      	ldr	r3, [r4, #16]
 800f99c:	b943      	cbnz	r3, 800f9b0 <__swsetup_r+0xa8>
 800f99e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f9a2:	d1c4      	bne.n	800f92e <__swsetup_r+0x26>
 800f9a4:	bd38      	pop	{r3, r4, r5, pc}
 800f9a6:	0781      	lsls	r1, r0, #30
 800f9a8:	bf58      	it	pl
 800f9aa:	6963      	ldrpl	r3, [r4, #20]
 800f9ac:	60a3      	str	r3, [r4, #8]
 800f9ae:	e7f4      	b.n	800f99a <__swsetup_r+0x92>
 800f9b0:	2000      	movs	r0, #0
 800f9b2:	e7f7      	b.n	800f9a4 <__swsetup_r+0x9c>
 800f9b4:	20000088 	.word	0x20000088

0800f9b8 <__swhatbuf_r>:
 800f9b8:	b570      	push	{r4, r5, r6, lr}
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9c0:	2900      	cmp	r1, #0
 800f9c2:	b096      	sub	sp, #88	; 0x58
 800f9c4:	4615      	mov	r5, r2
 800f9c6:	461e      	mov	r6, r3
 800f9c8:	da0d      	bge.n	800f9e6 <__swhatbuf_r+0x2e>
 800f9ca:	89a3      	ldrh	r3, [r4, #12]
 800f9cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f9d0:	f04f 0100 	mov.w	r1, #0
 800f9d4:	bf0c      	ite	eq
 800f9d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f9da:	2340      	movne	r3, #64	; 0x40
 800f9dc:	2000      	movs	r0, #0
 800f9de:	6031      	str	r1, [r6, #0]
 800f9e0:	602b      	str	r3, [r5, #0]
 800f9e2:	b016      	add	sp, #88	; 0x58
 800f9e4:	bd70      	pop	{r4, r5, r6, pc}
 800f9e6:	466a      	mov	r2, sp
 800f9e8:	f000 f848 	bl	800fa7c <_fstat_r>
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	dbec      	blt.n	800f9ca <__swhatbuf_r+0x12>
 800f9f0:	9901      	ldr	r1, [sp, #4]
 800f9f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f9f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f9fa:	4259      	negs	r1, r3
 800f9fc:	4159      	adcs	r1, r3
 800f9fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa02:	e7eb      	b.n	800f9dc <__swhatbuf_r+0x24>

0800fa04 <__smakebuf_r>:
 800fa04:	898b      	ldrh	r3, [r1, #12]
 800fa06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa08:	079d      	lsls	r5, r3, #30
 800fa0a:	4606      	mov	r6, r0
 800fa0c:	460c      	mov	r4, r1
 800fa0e:	d507      	bpl.n	800fa20 <__smakebuf_r+0x1c>
 800fa10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa14:	6023      	str	r3, [r4, #0]
 800fa16:	6123      	str	r3, [r4, #16]
 800fa18:	2301      	movs	r3, #1
 800fa1a:	6163      	str	r3, [r4, #20]
 800fa1c:	b002      	add	sp, #8
 800fa1e:	bd70      	pop	{r4, r5, r6, pc}
 800fa20:	ab01      	add	r3, sp, #4
 800fa22:	466a      	mov	r2, sp
 800fa24:	f7ff ffc8 	bl	800f9b8 <__swhatbuf_r>
 800fa28:	9900      	ldr	r1, [sp, #0]
 800fa2a:	4605      	mov	r5, r0
 800fa2c:	4630      	mov	r0, r6
 800fa2e:	f7fe ff91 	bl	800e954 <_malloc_r>
 800fa32:	b948      	cbnz	r0, 800fa48 <__smakebuf_r+0x44>
 800fa34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa38:	059a      	lsls	r2, r3, #22
 800fa3a:	d4ef      	bmi.n	800fa1c <__smakebuf_r+0x18>
 800fa3c:	f023 0303 	bic.w	r3, r3, #3
 800fa40:	f043 0302 	orr.w	r3, r3, #2
 800fa44:	81a3      	strh	r3, [r4, #12]
 800fa46:	e7e3      	b.n	800fa10 <__smakebuf_r+0xc>
 800fa48:	89a3      	ldrh	r3, [r4, #12]
 800fa4a:	6020      	str	r0, [r4, #0]
 800fa4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa50:	81a3      	strh	r3, [r4, #12]
 800fa52:	9b00      	ldr	r3, [sp, #0]
 800fa54:	6163      	str	r3, [r4, #20]
 800fa56:	9b01      	ldr	r3, [sp, #4]
 800fa58:	6120      	str	r0, [r4, #16]
 800fa5a:	b15b      	cbz	r3, 800fa74 <__smakebuf_r+0x70>
 800fa5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa60:	4630      	mov	r0, r6
 800fa62:	f000 f81d 	bl	800faa0 <_isatty_r>
 800fa66:	b128      	cbz	r0, 800fa74 <__smakebuf_r+0x70>
 800fa68:	89a3      	ldrh	r3, [r4, #12]
 800fa6a:	f023 0303 	bic.w	r3, r3, #3
 800fa6e:	f043 0301 	orr.w	r3, r3, #1
 800fa72:	81a3      	strh	r3, [r4, #12]
 800fa74:	89a3      	ldrh	r3, [r4, #12]
 800fa76:	431d      	orrs	r5, r3
 800fa78:	81a5      	strh	r5, [r4, #12]
 800fa7a:	e7cf      	b.n	800fa1c <__smakebuf_r+0x18>

0800fa7c <_fstat_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4d07      	ldr	r5, [pc, #28]	; (800fa9c <_fstat_r+0x20>)
 800fa80:	2300      	movs	r3, #0
 800fa82:	4604      	mov	r4, r0
 800fa84:	4608      	mov	r0, r1
 800fa86:	4611      	mov	r1, r2
 800fa88:	602b      	str	r3, [r5, #0]
 800fa8a:	f7f5 f858 	bl	8004b3e <_fstat>
 800fa8e:	1c43      	adds	r3, r0, #1
 800fa90:	d102      	bne.n	800fa98 <_fstat_r+0x1c>
 800fa92:	682b      	ldr	r3, [r5, #0]
 800fa94:	b103      	cbz	r3, 800fa98 <_fstat_r+0x1c>
 800fa96:	6023      	str	r3, [r4, #0]
 800fa98:	bd38      	pop	{r3, r4, r5, pc}
 800fa9a:	bf00      	nop
 800fa9c:	200054b0 	.word	0x200054b0

0800faa0 <_isatty_r>:
 800faa0:	b538      	push	{r3, r4, r5, lr}
 800faa2:	4d06      	ldr	r5, [pc, #24]	; (800fabc <_isatty_r+0x1c>)
 800faa4:	2300      	movs	r3, #0
 800faa6:	4604      	mov	r4, r0
 800faa8:	4608      	mov	r0, r1
 800faaa:	602b      	str	r3, [r5, #0]
 800faac:	f7f5 f857 	bl	8004b5e <_isatty>
 800fab0:	1c43      	adds	r3, r0, #1
 800fab2:	d102      	bne.n	800faba <_isatty_r+0x1a>
 800fab4:	682b      	ldr	r3, [r5, #0]
 800fab6:	b103      	cbz	r3, 800faba <_isatty_r+0x1a>
 800fab8:	6023      	str	r3, [r4, #0]
 800faba:	bd38      	pop	{r3, r4, r5, pc}
 800fabc:	200054b0 	.word	0x200054b0

0800fac0 <_raise_r>:
 800fac0:	291f      	cmp	r1, #31
 800fac2:	b538      	push	{r3, r4, r5, lr}
 800fac4:	4604      	mov	r4, r0
 800fac6:	460d      	mov	r5, r1
 800fac8:	d904      	bls.n	800fad4 <_raise_r+0x14>
 800faca:	2316      	movs	r3, #22
 800facc:	6003      	str	r3, [r0, #0]
 800face:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fad2:	bd38      	pop	{r3, r4, r5, pc}
 800fad4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fad6:	b112      	cbz	r2, 800fade <_raise_r+0x1e>
 800fad8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fadc:	b94b      	cbnz	r3, 800faf2 <_raise_r+0x32>
 800fade:	4620      	mov	r0, r4
 800fae0:	f000 f830 	bl	800fb44 <_getpid_r>
 800fae4:	462a      	mov	r2, r5
 800fae6:	4601      	mov	r1, r0
 800fae8:	4620      	mov	r0, r4
 800faea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800faee:	f000 b817 	b.w	800fb20 <_kill_r>
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d00a      	beq.n	800fb0c <_raise_r+0x4c>
 800faf6:	1c59      	adds	r1, r3, #1
 800faf8:	d103      	bne.n	800fb02 <_raise_r+0x42>
 800fafa:	2316      	movs	r3, #22
 800fafc:	6003      	str	r3, [r0, #0]
 800fafe:	2001      	movs	r0, #1
 800fb00:	e7e7      	b.n	800fad2 <_raise_r+0x12>
 800fb02:	2400      	movs	r4, #0
 800fb04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fb08:	4628      	mov	r0, r5
 800fb0a:	4798      	blx	r3
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	e7e0      	b.n	800fad2 <_raise_r+0x12>

0800fb10 <raise>:
 800fb10:	4b02      	ldr	r3, [pc, #8]	; (800fb1c <raise+0xc>)
 800fb12:	4601      	mov	r1, r0
 800fb14:	6818      	ldr	r0, [r3, #0]
 800fb16:	f7ff bfd3 	b.w	800fac0 <_raise_r>
 800fb1a:	bf00      	nop
 800fb1c:	20000088 	.word	0x20000088

0800fb20 <_kill_r>:
 800fb20:	b538      	push	{r3, r4, r5, lr}
 800fb22:	4d07      	ldr	r5, [pc, #28]	; (800fb40 <_kill_r+0x20>)
 800fb24:	2300      	movs	r3, #0
 800fb26:	4604      	mov	r4, r0
 800fb28:	4608      	mov	r0, r1
 800fb2a:	4611      	mov	r1, r2
 800fb2c:	602b      	str	r3, [r5, #0]
 800fb2e:	f7f4 ffa7 	bl	8004a80 <_kill>
 800fb32:	1c43      	adds	r3, r0, #1
 800fb34:	d102      	bne.n	800fb3c <_kill_r+0x1c>
 800fb36:	682b      	ldr	r3, [r5, #0]
 800fb38:	b103      	cbz	r3, 800fb3c <_kill_r+0x1c>
 800fb3a:	6023      	str	r3, [r4, #0]
 800fb3c:	bd38      	pop	{r3, r4, r5, pc}
 800fb3e:	bf00      	nop
 800fb40:	200054b0 	.word	0x200054b0

0800fb44 <_getpid_r>:
 800fb44:	f7f4 bf94 	b.w	8004a70 <_getpid>

0800fb48 <round>:
 800fb48:	ec53 2b10 	vmov	r2, r3, d0
 800fb4c:	b570      	push	{r4, r5, r6, lr}
 800fb4e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800fb52:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800fb56:	2813      	cmp	r0, #19
 800fb58:	ee10 5a10 	vmov	r5, s0
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	dc18      	bgt.n	800fb92 <round+0x4a>
 800fb60:	2800      	cmp	r0, #0
 800fb62:	da09      	bge.n	800fb78 <round+0x30>
 800fb64:	3001      	adds	r0, #1
 800fb66:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800fb6a:	d103      	bne.n	800fb74 <round+0x2c>
 800fb6c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800fb70:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800fb74:	2300      	movs	r3, #0
 800fb76:	e02a      	b.n	800fbce <round+0x86>
 800fb78:	4c16      	ldr	r4, [pc, #88]	; (800fbd4 <round+0x8c>)
 800fb7a:	4104      	asrs	r4, r0
 800fb7c:	ea03 0604 	and.w	r6, r3, r4
 800fb80:	4316      	orrs	r6, r2
 800fb82:	d011      	beq.n	800fba8 <round+0x60>
 800fb84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fb88:	4103      	asrs	r3, r0
 800fb8a:	440b      	add	r3, r1
 800fb8c:	ea23 0104 	bic.w	r1, r3, r4
 800fb90:	e7f0      	b.n	800fb74 <round+0x2c>
 800fb92:	2833      	cmp	r0, #51	; 0x33
 800fb94:	dd0b      	ble.n	800fbae <round+0x66>
 800fb96:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800fb9a:	d105      	bne.n	800fba8 <round+0x60>
 800fb9c:	ee10 0a10 	vmov	r0, s0
 800fba0:	f7f0 fb74 	bl	800028c <__adddf3>
 800fba4:	4602      	mov	r2, r0
 800fba6:	460b      	mov	r3, r1
 800fba8:	ec43 2b10 	vmov	d0, r2, r3
 800fbac:	bd70      	pop	{r4, r5, r6, pc}
 800fbae:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800fbb2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fbb6:	40f4      	lsrs	r4, r6
 800fbb8:	4214      	tst	r4, r2
 800fbba:	d0f5      	beq.n	800fba8 <round+0x60>
 800fbbc:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	4083      	lsls	r3, r0
 800fbc4:	195b      	adds	r3, r3, r5
 800fbc6:	bf28      	it	cs
 800fbc8:	3101      	addcs	r1, #1
 800fbca:	ea23 0304 	bic.w	r3, r3, r4
 800fbce:	461a      	mov	r2, r3
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	e7e9      	b.n	800fba8 <round+0x60>
 800fbd4:	000fffff 	.word	0x000fffff

0800fbd8 <_init>:
 800fbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbda:	bf00      	nop
 800fbdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbde:	bc08      	pop	{r3}
 800fbe0:	469e      	mov	lr, r3
 800fbe2:	4770      	bx	lr

0800fbe4 <_fini>:
 800fbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbe6:	bf00      	nop
 800fbe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbea:	bc08      	pop	{r3}
 800fbec:	469e      	mov	lr, r3
 800fbee:	4770      	bx	lr
