
STM32_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f990  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001100  0800fb20  0800fb20  0001fb20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c20  08010c20  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08010c20  08010c20  00020c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c28  08010c28  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c28  08010c28  00020c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c2c  08010c2c  00020c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08010c30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e0  2**0
                  CONTENTS
 10 .bss          000051d8  200001e0  200001e0  000301e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200053b8  200053b8  000301e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e0ce  00000000  00000000  00030253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000043c4  00000000  00000000  0004e321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b20  00000000  00000000  000526e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001538  00000000  00000000  00054208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002589e  00000000  00000000  00055740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f192  00000000  00000000  0007afde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000db7a8  00000000  00000000  0009a170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000861c  00000000  00000000  00175918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0017df34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fb08 	.word	0x0800fb08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800fb08 	.word	0x0800fb08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <comm_init>:

void uart_ack(uint8_t id);

/* Functions */

void comm_init(UART_HandleTypeDef* uart, Instruction* curInstObjRef, CompleteError* cpltErrObjRef) {
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
	instructionId = 0;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <comm_init+0x78>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
	ack_tx = 0;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <comm_init+0x7c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]

	huart3Ptr = uart;
 8000f5c:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <comm_init+0x80>)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6013      	str	r3, [r2, #0]
	curInstPtr = curInstObjRef;
 8000f62:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <comm_init+0x84>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	6013      	str	r3, [r2, #0]
	cpltErrPtr = cpltErrObjRef;
 8000f68:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <comm_init+0x88>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]

	curInstPtr->id = 0;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <comm_init+0x84>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
	curInstPtr->type = INST_TYPE_UNDEFINED;
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <comm_init+0x84>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	705a      	strb	r2, [r3, #1]
	curInstPtr->val = 0;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <comm_init+0x84>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2200      	movs	r2, #0
 8000f84:	805a      	strh	r2, [r3, #2]

	cpltErrPtr->id = 0;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <comm_init+0x88>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
	cpltErrPtr->type = CPLTERR_TYPE_UNDEFINED;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <comm_init+0x88>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2202      	movs	r2, #2
 8000f94:	705a      	strb	r2, [r3, #1]
	cpltErrPtr->pos_x = 0;
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <comm_init+0x88>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	805a      	strh	r2, [r3, #2]
	cpltErrPtr->pos_y = 0;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <comm_init+0x88>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	809a      	strh	r2, [r3, #4]
	cpltErrPtr->finished = 1;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <comm_init+0x88>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2201      	movs	r2, #1
 8000fac:	719a      	strb	r2, [r3, #6]

	return;
 8000fae:	bf00      	nop
}
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	200001fc 	.word	0x200001fc
 8000fc0:	200001fd 	.word	0x200001fd
 8000fc4:	20000210 	.word	0x20000210
 8000fc8:	20000214 	.word	0x20000214
 8000fcc:	20000218 	.word	0x20000218

08000fd0 <uart_send>:

HAL_StatusTypeDef uart_send() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	if (cpltErrPtr->id == 0) {
 8000fd6:	4b48      	ldr	r3, [pc, #288]	; (80010f8 <uart_send+0x128>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <uart_send+0x14>
		return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e084      	b.n	80010ee <uart_send+0x11e>
	}
	if (ack_tx != cpltErrPtr->id - 1) {	// RPI is not expecting CompleteError with this id
 8000fe4:	4b45      	ldr	r3, [pc, #276]	; (80010fc <uart_send+0x12c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <uart_send+0x128>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d001      	beq.n	8000ffa <uart_send+0x2a>
		return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e079      	b.n	80010ee <uart_send+0x11e>
	}
	uartbuf[0] = (((0x01 << 1) | (cpltErrPtr->type & 0x01)) << 6) | (uint8_t)((cpltErrPtr->pos_x >> 5) & 0x003F);
 8000ffa:	4b3f      	ldr	r3, [pc, #252]	; (80010f8 <uart_send+0x128>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	785b      	ldrb	r3, [r3, #1]
 8001000:	019b      	lsls	r3, r3, #6
 8001002:	b25b      	sxtb	r3, r3
 8001004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001008:	b25b      	sxtb	r3, r3
 800100a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800100e:	b25a      	sxtb	r2, r3
 8001010:	4b39      	ldr	r3, [pc, #228]	; (80010f8 <uart_send+0x128>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001018:	115b      	asrs	r3, r3, #5
 800101a:	b21b      	sxth	r3, r3
 800101c:	b25b      	sxtb	r3, r3
 800101e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001022:	b25b      	sxtb	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b25b      	sxtb	r3, r3
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b35      	ldr	r3, [pc, #212]	; (8001100 <uart_send+0x130>)
 800102c:	701a      	strb	r2, [r3, #0]
	uartbuf[1] = (uint8_t)((cpltErrPtr->pos_x & 0x1F) << 3) | (uint8_t)((cpltErrPtr->pos_y >> 8) & 0x0007);
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <uart_send+0x128>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	b25a      	sxtb	r2, r3
 800103e:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <uart_send+0x128>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001046:	121b      	asrs	r3, r3, #8
 8001048:	b21b      	sxth	r3, r3
 800104a:	b25b      	sxtb	r3, r3
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	b25b      	sxtb	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b25b      	sxtb	r3, r3
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <uart_send+0x130>)
 800105a:	705a      	strb	r2, [r3, #1]
	uartbuf[2] = (uint8_t)(cpltErrPtr->pos_y & 0xFF);
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <uart_send+0x128>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <uart_send+0x130>)
 8001068:	709a      	strb	r2, [r3, #2]
	uartbuf[3] = cpltErrPtr->id;
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <uart_send+0x128>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	781a      	ldrb	r2, [r3, #0]
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <uart_send+0x130>)
 8001072:	70da      	strb	r2, [r3, #3]
	while (ack_tx < cpltErrPtr->id) {
 8001074:	e033      	b.n	80010de <uart_send+0x10e>
		while (HAL_UART_Transmit(huart3Ptr, (uint8_t*)uartbuf, 4, UART_ACK_MAX_DELAY) != HAL_OK) {
			osDelay(500);
 8001076:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800107a:	f008 f853 	bl	8009124 <osDelay>
		while (HAL_UART_Transmit(huart3Ptr, (uint8_t*)uartbuf, 4, UART_ACK_MAX_DELAY) != HAL_OK) {
 800107e:	4b21      	ldr	r3, [pc, #132]	; (8001104 <uart_send+0x134>)
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	f241 3388 	movw	r3, #5000	; 0x1388
 8001086:	2204      	movs	r2, #4
 8001088:	491d      	ldr	r1, [pc, #116]	; (8001100 <uart_send+0x130>)
 800108a:	f006 ff10 	bl	8007eae <HAL_UART_Transmit>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f0      	bne.n	8001076 <uart_send+0xa6>
		}
		// Waiting for ACK
		// Disable ack from rpi
		ack_tx++;
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <uart_send+0x12c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <uart_send+0x12c>)
 800109e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 10; i++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	e018      	b.n	80010d8 <uart_send+0x108>
			if (ack_tx < cpltErrPtr->id) {
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <uart_send+0x128>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <uart_send+0x12c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d904      	bls.n	80010be <uart_send+0xee>
				osDelay(UART_ACK_MAX_DELAY / 10);
 80010b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b8:	f008 f834 	bl	8009124 <osDelay>
 80010bc:	e009      	b.n	80010d2 <uart_send+0x102>
			}
			else if (ack_tx == cpltErrPtr->id) {	// RPI received cpltErr
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <uart_send+0x128>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <uart_send+0x12c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d100      	bne.n	80010ce <uart_send+0xfe>
				break;
 80010cc:	e007      	b.n	80010de <uart_send+0x10e>
			}
			else {
				return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00d      	b.n	80010ee <uart_send+0x11e>
		for (int i = 0; i < 10; i++) {
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3301      	adds	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b09      	cmp	r3, #9
 80010dc:	dde3      	ble.n	80010a6 <uart_send+0xd6>
	while (ack_tx < cpltErrPtr->id) {
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <uart_send+0x128>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <uart_send+0x12c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8c8      	bhi.n	800107e <uart_send+0xae>
			}
		}
	}
	return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000218 	.word	0x20000218
 80010fc:	200001fd 	.word	0x200001fd
 8001100:	20000200 	.word	0x20000200
 8001104:	20000210 	.word	0x20000210

08001108 <uart_receive>:
	uartbuf[3] = id;
	HAL_UART_Transmit(huart3Ptr, (uint8_t*)uartbuf, 4, UART_ACK_MAX_DELAY);
	return;
}

HAL_StatusTypeDef uart_receive(const uint8_t* buf) {
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	uint8_t id = buf[3];
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3303      	adds	r3, #3
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	73fb      	strb	r3, [r7, #15]
		if ((cpltErrPtr->id == id) && (cpltErrPtr->finished)) {	// Check if the ACK id is replying to CpltErr STM is sending
			ack_tx = id;
			return HAL_OK;
		}
	}*/
	if (id == instructionId + 1) {		// Received instruction is correct in order
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <uart_receive+0x8c>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	429a      	cmp	r2, r3
 8001122:	d12f      	bne.n	8001184 <uart_receive+0x7c>
		if ((cpltErrPtr->id == instructionId) && (cpltErrPtr->finished)) {	// Current instruction finished
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <uart_receive+0x90>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <uart_receive+0x8c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d128      	bne.n	8001184 <uart_receive+0x7c>
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <uart_receive+0x90>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	799b      	ldrb	r3, [r3, #6]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d023      	beq.n	8001184 <uart_receive+0x7c>
			curInstPtr->id = id;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <uart_receive+0x94>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	701a      	strb	r2, [r3, #0]
			curInstPtr->type = (buf[0] >> 6) & 0x01;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	099b      	lsrs	r3, r3, #6
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <uart_receive+0x94>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f002 0201 	and.w	r2, r2, #1
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	705a      	strb	r2, [r3, #1]
			curInstPtr->val = ((int16_t)buf[1] << 8) | buf[2];
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3301      	adds	r3, #1
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b219      	sxth	r1, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3302      	adds	r3, #2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b21a      	sxth	r2, r3
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <uart_receive+0x94>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	430a      	orrs	r2, r1
 8001170:	b212      	sxth	r2, r2
 8001172:	805a      	strh	r2, [r3, #2]
			instructionId++;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <uart_receive+0x8c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	b2da      	uxtb	r2, r3
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <uart_receive+0x8c>)
 800117e:	701a      	strb	r2, [r3, #0]
			//uart_ack(instructionId);
			return HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	e000      	b.n	8001186 <uart_receive+0x7e>
		}
	}
	//uart_ack(instructionId);
	return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200001fc 	.word	0x200001fc
 8001198:	20000218 	.word	0x20000218
 800119c:	20000214 	.word	0x20000214

080011a0 <newCpltErr>:

uint8_t getCurInstId() {
	return instructionId;
}

uint8_t newCpltErr(uint8_t id) {
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	if ((id == instructionId) && (ack_tx == id - 1)) {
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <newCpltErr+0x5c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	79fa      	ldrb	r2, [r7, #7]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d11c      	bne.n	80011ee <newCpltErr+0x4e>
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <newCpltErr+0x60>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	3b01      	subs	r3, #1
 80011be:	429a      	cmp	r2, r3
 80011c0:	d115      	bne.n	80011ee <newCpltErr+0x4e>
		cpltErrPtr->id = id;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <newCpltErr+0x64>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	79fa      	ldrb	r2, [r7, #7]
 80011c8:	701a      	strb	r2, [r3, #0]
		cpltErrPtr->type = CPLTERR_TYPE_UNDEFINED;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <newCpltErr+0x64>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2202      	movs	r2, #2
 80011d0:	705a      	strb	r2, [r3, #1]
		cpltErrPtr->pos_x = 0;
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <newCpltErr+0x64>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2200      	movs	r2, #0
 80011d8:	805a      	strh	r2, [r3, #2]
		cpltErrPtr->pos_y = 0;
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <newCpltErr+0x64>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2200      	movs	r2, #0
 80011e0:	809a      	strh	r2, [r3, #4]
		cpltErrPtr->finished = 0;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <newCpltErr+0x64>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2200      	movs	r2, #0
 80011e8:	719a      	strb	r2, [r3, #6]
		return 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <newCpltErr+0x50>
	}
	return 0;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	200001fc 	.word	0x200001fc
 8001200:	200001fd 	.word	0x200001fd
 8001204:	20000218 	.word	0x20000218

08001208 <imu_init>:

/*+++++++++++++++++++++++++++++++++++*/

/*----------------------------------------------------------------*/

uint8_t imu_init(I2C_HandleTypeDef* hi2c_ptr) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	hi2c1_ptr = hi2c_ptr;
 8001210:	4a37      	ldr	r2, [pc, #220]	; (80012f0 <imu_init+0xe8>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]

	// Reset chip
	if (!write_one_byte(0, B0_PWR_MGMT_1, 0x80 | 0x41)) return 1;
 8001216:	22c1      	movs	r2, #193	; 0xc1
 8001218:	2106      	movs	r1, #6
 800121a:	2000      	movs	r0, #0
 800121c:	f000 f8ac 	bl	8001378 <write_one_byte>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <imu_init+0x22>
 8001226:	2301      	movs	r3, #1
 8001228:	e05d      	b.n	80012e6 <imu_init+0xde>

	cur_bank = get_cur_bank();
 800122a:	f000 f907 	bl	800143c <get_cur_bank>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <imu_init+0xec>)
 8001234:	701a      	strb	r2, [r3, #0]

	HAL_Delay(100);
 8001236:	2064      	movs	r0, #100	; 0x64
 8001238:	f003 f8f2 	bl	8004420 <HAL_Delay>
	uint8_t who_am_i = read_one_byte(0, 0);
 800123c:	2100      	movs	r1, #0
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f862 	bl	8001308 <read_one_byte>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
	if (who_am_i != 0xEA) { 	// read WHO_AM_I register, should receive 0xEA
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2bea      	cmp	r3, #234	; 0xea
 800124c:	d001      	beq.n	8001252 <imu_init+0x4a>
		return 2;
 800124e:	2302      	movs	r3, #2
 8001250:	e049      	b.n	80012e6 <imu_init+0xde>
	}

	// Wake up chip
	if (!write_one_byte(0, B0_PWR_MGMT_1, ~0x40 & 0x41)) return 3;
 8001252:	2201      	movs	r2, #1
 8001254:	2106      	movs	r1, #6
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f88e 	bl	8001378 <write_one_byte>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <imu_init+0x5e>
 8001262:	2303      	movs	r3, #3
 8001264:	e03f      	b.n	80012e6 <imu_init+0xde>
	HAL_Delay(50);
 8001266:	2032      	movs	r0, #50	; 0x32
 8001268:	f003 f8da 	bl	8004420 <HAL_Delay>

	// Enables ODR start-time alignment when any of the following registers is written: GYRO_SMPLRT_DIV,
	// ACCEL_SMPLRT_DIV_1, ACCEL_SMPLRT_DIV_2, I2C_MST_ODR_CONFIG.
	if (!write_one_byte(2, B2_ODR_ALIGN_EN, 0x01)) return 4;
 800126c:	2201      	movs	r2, #1
 800126e:	2109      	movs	r1, #9
 8001270:	2002      	movs	r0, #2
 8001272:	f000 f881 	bl	8001378 <write_one_byte>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <imu_init+0x78>
 800127c:	2304      	movs	r3, #4
 800127e:	e032      	b.n	80012e6 <imu_init+0xde>
	HAL_Delay(50);
 8001280:	2032      	movs	r0, #50	; 0x32
 8001282:	f003 f8cd 	bl	8004420 <HAL_Delay>

	// Set accel low pass filter
	//if (!write_one_byte(2, B2_ACCEL_CONFIG, (ACCEL_DLPFCFG_val << 3) | ACCEL_FCHOICE_val)) return 5;

	// Set gyro low pass filter and scale
	if (!write_one_byte(2, B2_GYRO_CONFIG_1, (((GYRO_DLPFCFG_val << 2) | GYRO_FS_SEL_val) << 1) | GYRO_FCHOICE_val)) return 6;
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <imu_init+0xf0>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <imu_init+0xf4>)
 800128e:	7812      	ldrb	r2, [r2, #0]
 8001290:	4313      	orrs	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	b25a      	sxtb	r2, r3
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <imu_init+0xf8>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	2101      	movs	r1, #1
 80012a6:	2002      	movs	r0, #2
 80012a8:	f000 f866 	bl	8001378 <write_one_byte>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <imu_init+0xae>
 80012b2:	2306      	movs	r3, #6
 80012b4:	e017      	b.n	80012e6 <imu_init+0xde>
	HAL_Delay(50);
 80012b6:	2032      	movs	r0, #50	; 0x32
 80012b8:	f003 f8b2 	bl	8004420 <HAL_Delay>
	//if (ACCEL_SMPLRT_DIV_val > 0x0FFF) ACCEL_SMPLRT_DIV_val = 0x0FFF;
	//if (!write_one_byte(2, B2_ACCEL_SMPLRT_DIV_1, (uint8_t)(ACCEL_SMPLRT_DIV_val >> 8))) return 7;
	//if (!write_one_byte(2, B2_ACCEL_SMPLRT_DIV_2, (uint8_t)(ACCEL_SMPLRT_DIV_val & 0x00FF))) return 8;

	// Set gyro sample rate divider
	if (!write_one_byte(2, B2_GYRO_SMPLRT_DIV, GYRO_SMPLRT_DIV_val)) return 9;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <imu_init+0xfc>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	2100      	movs	r1, #0
 80012c4:	2002      	movs	r0, #2
 80012c6:	f000 f857 	bl	8001378 <write_one_byte>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <imu_init+0xcc>
 80012d0:	2309      	movs	r3, #9
 80012d2:	e008      	b.n	80012e6 <imu_init+0xde>
	HAL_Delay(50);
 80012d4:	2032      	movs	r0, #50	; 0x32
 80012d6:	f003 f8a3 	bl	8004420 <HAL_Delay>

	// Caliberate accelerometer (eliminate bias)
	//accel_caliberate();

	// Caliberate gyroscope (eliminate bias)
	gyro_caliberate();
 80012da:	f000 f943 	bl	8001564 <gyro_caliberate>
	HAL_Delay(50);
 80012de:	2032      	movs	r0, #50	; 0x32
 80012e0:	f003 f89e 	bl	8004420 <HAL_Delay>

	return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000021c 	.word	0x2000021c
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000002 	.word	0x20000002
 80012fc:	20000220 	.word	0x20000220
 8001300:	20000001 	.word	0x20000001
 8001304:	20000221 	.word	0x20000221

08001308 <read_one_byte>:

uint8_t read_one_byte(uint8_t bank, uint8_t regAddr) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af02      	add	r7, sp, #8
 800130e:	4603      	mov	r3, r0
 8001310:	460a      	mov	r2, r1
 8001312:	71fb      	strb	r3, [r7, #7]
 8001314:	4613      	mov	r3, r2
 8001316:	71bb      	strb	r3, [r7, #6]

	if (!select_bank(bank)) return 0;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f85a 	bl	80013d4 <select_bank>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <read_one_byte+0x22>
 8001326:	2300      	movs	r3, #0
 8001328:	e020      	b.n	800136c <read_one_byte+0x64>
	uint8_t buf[1];

	uint8_t reg = regAddr;
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	72fb      	strb	r3, [r7, #11]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <read_one_byte+0x6c>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	f107 020b 	add.w	r2, r7, #11
 8001336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	21d0      	movs	r1, #208	; 0xd0
 8001340:	f003 fd30 	bl	8004da4 <HAL_I2C_Master_Transmit>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10f      	bne.n	800136a <read_one_byte+0x62>
		if (HAL_I2C_Master_Receive(hi2c1_ptr, IMU_I2C_ADDR, buf, 1, I2C_MAX_DELAY) == HAL_OK) {
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <read_one_byte+0x6c>)
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	f107 020c 	add.w	r2, r7, #12
 8001352:	f241 3388 	movw	r3, #5000	; 0x1388
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2301      	movs	r3, #1
 800135a:	21d0      	movs	r1, #208	; 0xd0
 800135c:	f003 fe20 	bl	8004fa0 <HAL_I2C_Master_Receive>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <read_one_byte+0x62>
			return buf[0];
 8001366:	7b3b      	ldrb	r3, [r7, #12]
 8001368:	e000      	b.n	800136c <read_one_byte+0x64>
		}
	}
	return 0;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000021c 	.word	0x2000021c

08001378 <write_one_byte>:

uint8_t write_one_byte(uint8_t bank, uint8_t regAddr, uint8_t data) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af02      	add	r7, sp, #8
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	460b      	mov	r3, r1
 8001384:	71bb      	strb	r3, [r7, #6]
 8001386:	4613      	mov	r3, r2
 8001388:	717b      	strb	r3, [r7, #5]

	if (!select_bank(bank)) return 0;
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f821 	bl	80013d4 <select_bank>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <write_one_byte+0x24>
 8001398:	2300      	movs	r3, #0
 800139a:	e014      	b.n	80013c6 <write_one_byte+0x4e>
	uint8_t buf[2];
	buf[0] = regAddr;
 800139c:	79bb      	ldrb	r3, [r7, #6]
 800139e:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 80013a0:	797b      	ldrb	r3, [r7, #5]
 80013a2:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, buf, 2, HAL_MAX_DELAY) == HAL_OK) {
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <write_one_byte+0x58>)
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	f107 020c 	add.w	r2, r7, #12
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2302      	movs	r3, #2
 80013b4:	21d0      	movs	r1, #208	; 0xd0
 80013b6:	f003 fcf5 	bl	8004da4 <HAL_I2C_Master_Transmit>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <write_one_byte+0x4c>
		return 1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <write_one_byte+0x4e>
	}
	return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000021c 	.word	0x2000021c

080013d4 <select_bank>:

uint8_t select_bank(uint8_t bank) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af02      	add	r7, sp, #8
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]

	if (bank > 3) return 0;
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d901      	bls.n	80013e8 <select_bank+0x14>
 80013e4:	2300      	movs	r3, #0
 80013e6:	e020      	b.n	800142a <select_bank+0x56>
	if (cur_bank == bank) return 1;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <select_bank+0x60>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	79fa      	ldrb	r2, [r7, #7]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d101      	bne.n	80013f6 <select_bank+0x22>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e019      	b.n	800142a <select_bank+0x56>
	uint8_t buf[2];
	buf[0] = REG_BANK_SEL;
 80013f6:	237f      	movs	r3, #127	; 0x7f
 80013f8:	733b      	strb	r3, [r7, #12]
	buf[1] = bank << 4;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, buf, 2, HAL_MAX_DELAY) == HAL_OK) {
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <select_bank+0x64>)
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	f107 020c 	add.w	r2, r7, #12
 800140a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2302      	movs	r3, #2
 8001412:	21d0      	movs	r1, #208	; 0xd0
 8001414:	f003 fcc6 	bl	8004da4 <HAL_I2C_Master_Transmit>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d104      	bne.n	8001428 <select_bank+0x54>
		cur_bank = bank;
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <select_bank+0x60>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	7013      	strb	r3, [r2, #0]
		return 1;
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <select_bank+0x56>
	}
	return 0;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000000 	.word	0x20000000
 8001438:	2000021c 	.word	0x2000021c

0800143c <get_cur_bank>:

uint8_t get_cur_bank() {
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af02      	add	r7, sp, #8
	uint8_t buf[1];

	uint8_t reg = REG_BANK_SEL;
 8001442:	237f      	movs	r3, #127	; 0x7f
 8001444:	70fb      	strb	r3, [r7, #3]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <get_cur_bank+0x58>)
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	1cfa      	adds	r2, r7, #3
 800144c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	21d0      	movs	r1, #208	; 0xd0
 8001456:	f003 fca5 	bl	8004da4 <HAL_I2C_Master_Transmit>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d113      	bne.n	8001488 <get_cur_bank+0x4c>
		if (HAL_I2C_Master_Receive(hi2c1_ptr, IMU_I2C_ADDR, buf, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <get_cur_bank+0x58>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	1d3a      	adds	r2, r7, #4
 8001466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2301      	movs	r3, #1
 800146e:	21d0      	movs	r1, #208	; 0xd0
 8001470:	f003 fd96 	bl	8004fa0 <HAL_I2C_Master_Receive>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d106      	bne.n	8001488 <get_cur_bank+0x4c>
			return (buf[0] >> 4) & 0x3;
 800147a:	793b      	ldrb	r3, [r7, #4]
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	e000      	b.n	800148a <get_cur_bank+0x4e>
		}
	}
	return 4;
 8001488:	2304      	movs	r3, #4
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000021c 	.word	0x2000021c

08001498 <read_raw_gyro_x>:
	write_one_byte(1, B1_YA_OFFS_L, accel_bias_y_l);
	write_one_byte(1, B1_ZA_OFFS_H, accel_bias_z_h);
	write_one_byte(1, B1_ZA_OFFS_L, accel_bias_z_l);
}

int16_t read_raw_gyro_x() {
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_XOUT_H) << 8) | read_one_byte(0, B0_GYRO_XOUT_L));
 800149e:	2133      	movs	r1, #51	; 0x33
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff ff31 	bl	8001308 <read_one_byte>
 80014a6:	4603      	mov	r3, r0
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21c      	sxth	r4, r3
 80014ac:	2134      	movs	r1, #52	; 0x34
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff ff2a 	bl	8001308 <read_one_byte>
 80014b4:	4603      	mov	r3, r0
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4323      	orrs	r3, r4
 80014ba:	80fb      	strh	r3, [r7, #6]
	return raw;
 80014bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd90      	pop	{r4, r7, pc}

080014c8 <read_raw_gyro_y>:
	int16_t raw = read_raw_gyro_x();
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
	return result;
}

int16_t read_raw_gyro_y() {
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_YOUT_H) << 8) | read_one_byte(0, B0_GYRO_YOUT_L));
 80014ce:	2135      	movs	r1, #53	; 0x35
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff ff19 	bl	8001308 <read_one_byte>
 80014d6:	4603      	mov	r3, r0
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	b21c      	sxth	r4, r3
 80014dc:	2136      	movs	r1, #54	; 0x36
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff ff12 	bl	8001308 <read_one_byte>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4323      	orrs	r3, r4
 80014ea:	80fb      	strh	r3, [r7, #6]
	return raw;
 80014ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd90      	pop	{r4, r7, pc}

080014f8 <read_raw_gyro_z>:
	int16_t raw = read_raw_gyro_y();
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
	return result;
}

int16_t read_raw_gyro_z() {
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_ZOUT_H) << 8) | read_one_byte(0, B0_GYRO_ZOUT_L));
 80014fe:	2137      	movs	r1, #55	; 0x37
 8001500:	2000      	movs	r0, #0
 8001502:	f7ff ff01 	bl	8001308 <read_one_byte>
 8001506:	4603      	mov	r3, r0
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	b21c      	sxth	r4, r3
 800150c:	2138      	movs	r1, #56	; 0x38
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff fefa 	bl	8001308 <read_one_byte>
 8001514:	4603      	mov	r3, r0
 8001516:	b21b      	sxth	r3, r3
 8001518:	4323      	orrs	r3, r4
 800151a:	80fb      	strh	r3, [r7, #6]
	return raw;
 800151c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bd90      	pop	{r4, r7, pc}

08001528 <read_gyro_z>:

float read_gyro_z() {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
	int16_t raw = read_raw_gyro_z();
 800152e:	f7ff ffe3 	bl	80014f8 <read_raw_gyro_z>
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
 8001536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001542:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001560 <read_gyro_z+0x38>
 8001546:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154a:	edc7 7a00 	vstr	s15, [r7]
	return result;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	ee07 3a90 	vmov	s15, r3
}
 8001554:	eeb0 0a67 	vmov.f32	s0, s15
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	43030000 	.word	0x43030000

08001564 <gyro_caliberate>:
	gyro->x = read_gyro_x();
	gyro->y = read_gyro_y();
	gyro->z = read_gyro_z();
}

void gyro_caliberate() {
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
	int32_t gyro_bias_x = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
	int32_t gyro_bias_y = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
	int32_t gyro_bias_z = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	e017      	b.n	80015ac <gyro_caliberate+0x48>
		gyro_bias_x += read_raw_gyro_x();
 800157c:	f7ff ff8c 	bl	8001498 <read_raw_gyro_x>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	4413      	add	r3, r2
 8001588:	617b      	str	r3, [r7, #20]
		gyro_bias_y += read_raw_gyro_y();
 800158a:	f7ff ff9d 	bl	80014c8 <read_raw_gyro_y>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4413      	add	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
		gyro_bias_z += read_raw_gyro_z();
 8001598:	f7ff ffae 	bl	80014f8 <read_raw_gyro_z>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b63      	cmp	r3, #99	; 0x63
 80015b0:	dde4      	ble.n	800157c <gyro_caliberate+0x18>
	}
	gyro_bias_x /= 100;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	4a31      	ldr	r2, [pc, #196]	; (800167c <gyro_caliberate+0x118>)
 80015b6:	fb82 1203 	smull	r1, r2, r2, r3
 80015ba:	1152      	asrs	r2, r2, #5
 80015bc:	17db      	asrs	r3, r3, #31
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	617b      	str	r3, [r7, #20]
	gyro_bias_y /= 100;
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4a2d      	ldr	r2, [pc, #180]	; (800167c <gyro_caliberate+0x118>)
 80015c6:	fb82 1203 	smull	r1, r2, r2, r3
 80015ca:	1152      	asrs	r2, r2, #5
 80015cc:	17db      	asrs	r3, r3, #31
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	613b      	str	r3, [r7, #16]
	gyro_bias_z /= 100;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4a29      	ldr	r2, [pc, #164]	; (800167c <gyro_caliberate+0x118>)
 80015d6:	fb82 1203 	smull	r1, r2, r2, r3
 80015da:	1152      	asrs	r2, r2, #5
 80015dc:	17db      	asrs	r3, r3, #31
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	60fb      	str	r3, [r7, #12]
	// Step size for offset register: 0.0305 dps/LSB; Offset = Measurement / 4;
	gyro_bias_x = -gyro_bias_x / 4;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	425b      	negs	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	da00      	bge.n	80015ec <gyro_caliberate+0x88>
 80015ea:	3303      	adds	r3, #3
 80015ec:	109b      	asrs	r3, r3, #2
 80015ee:	617b      	str	r3, [r7, #20]
	gyro_bias_y = -gyro_bias_y / 4;
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	425b      	negs	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	da00      	bge.n	80015fa <gyro_caliberate+0x96>
 80015f8:	3303      	adds	r3, #3
 80015fa:	109b      	asrs	r3, r3, #2
 80015fc:	613b      	str	r3, [r7, #16]
	gyro_bias_z = -gyro_bias_z / 4;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	425b      	negs	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	da00      	bge.n	8001608 <gyro_caliberate+0xa4>
 8001606:	3303      	adds	r3, #3
 8001608:	109b      	asrs	r3, r3, #2
 800160a:	60fb      	str	r3, [r7, #12]
	/*gyro_bias_x = -gyro_bias_x * 2;
	gyro_bias_y = -gyro_bias_y * 2;
	gyro_bias_z = -gyro_bias_z * 2;*/
	// Separate gyro_bias into 2 parts: [15:8] and [7:0]
	uint8_t gyro_bias_x_h = (uint8_t)(gyro_bias_x >> 8);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	121b      	asrs	r3, r3, #8
 8001610:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_bias_x_l = (uint8_t)gyro_bias_x;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	71bb      	strb	r3, [r7, #6]
	uint8_t gyro_bias_y_h = (uint8_t)(gyro_bias_y >> 8);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	121b      	asrs	r3, r3, #8
 800161a:	717b      	strb	r3, [r7, #5]
	uint8_t gyro_bias_y_l = (uint8_t)gyro_bias_y;
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	713b      	strb	r3, [r7, #4]
	uint8_t gyro_bias_z_h = (uint8_t)(gyro_bias_z >> 8);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	121b      	asrs	r3, r3, #8
 8001624:	70fb      	strb	r3, [r7, #3]
	uint8_t gyro_bias_z_l = (uint8_t)gyro_bias_z;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	70bb      	strb	r3, [r7, #2]
	// Write to registers
	write_one_byte(2, B2_XG_OFFS_USRH, gyro_bias_x_h);
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	461a      	mov	r2, r3
 800162e:	2103      	movs	r1, #3
 8001630:	2002      	movs	r0, #2
 8001632:	f7ff fea1 	bl	8001378 <write_one_byte>
	write_one_byte(2, B2_XG_OFFS_USRL, gyro_bias_x_l);
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	461a      	mov	r2, r3
 800163a:	2104      	movs	r1, #4
 800163c:	2002      	movs	r0, #2
 800163e:	f7ff fe9b 	bl	8001378 <write_one_byte>
	write_one_byte(2, B2_YG_OFFS_USRH, gyro_bias_y_h);
 8001642:	797b      	ldrb	r3, [r7, #5]
 8001644:	461a      	mov	r2, r3
 8001646:	2105      	movs	r1, #5
 8001648:	2002      	movs	r0, #2
 800164a:	f7ff fe95 	bl	8001378 <write_one_byte>
	write_one_byte(2, B2_YG_OFFS_USRL, gyro_bias_y_l);
 800164e:	793b      	ldrb	r3, [r7, #4]
 8001650:	461a      	mov	r2, r3
 8001652:	2106      	movs	r1, #6
 8001654:	2002      	movs	r0, #2
 8001656:	f7ff fe8f 	bl	8001378 <write_one_byte>
	write_one_byte(2, B2_ZG_OFFS_USRH, gyro_bias_z_h);
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	461a      	mov	r2, r3
 800165e:	2107      	movs	r1, #7
 8001660:	2002      	movs	r0, #2
 8001662:	f7ff fe89 	bl	8001378 <write_one_byte>
	write_one_byte(2, B2_ZG_OFFS_USRL, gyro_bias_z_l);
 8001666:	78bb      	ldrb	r3, [r7, #2]
 8001668:	461a      	mov	r2, r3
 800166a:	2108      	movs	r1, #8
 800166c:	2002      	movs	r0, #2
 800166e:	f7ff fe83 	bl	8001378 <write_one_byte>
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	51eb851f 	.word	0x51eb851f

08001680 <calcOri>:

float calcOri(uint32_t* lastSampleTime, float lastSampleOri) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	ed87 0a00 	vstr	s0, [r7]
	float angular_speed = 0;
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
	angular_speed += read_gyro_z();
 8001692:	f7ff ff49 	bl	8001528 <read_gyro_z>
 8001696:	eeb0 7a40 	vmov.f32	s14, s0
 800169a:	edd7 7a05 	vldr	s15, [r7, #20]
 800169e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016a2:	edc7 7a05 	vstr	s15, [r7, #20]
	if (abs(angular_speed) < MIN_ANG_SPD)
 80016a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ae:	ee17 3a90 	vmov	r3, s15
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bfb8      	it	lt
 80016b6:	425b      	neglt	r3, r3
 80016b8:	ee07 3a90 	vmov	s15, r3
 80016bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80016c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	d502      	bpl.n	80016d4 <calcOri+0x54>
		angular_speed = 0;
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
	uint32_t curTime = HAL_GetTick();
 80016d4:	f002 fe98 	bl	8004408 <HAL_GetTick>
 80016d8:	60f8      	str	r0, [r7, #12]
	uint16_t dt = curTime - (*lastSampleTime);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	817b      	strh	r3, [r7, #10]
	*lastSampleTime = curTime;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	601a      	str	r2, [r3, #0]
	float result = lastSampleOri + angular_speed * dt / 1000;
 80016ee:	897b      	ldrh	r3, [r7, #10]
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001700:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001768 <calcOri+0xe8>
 8001704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001708:	ed97 7a00 	vldr	s14, [r7]
 800170c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001710:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result >= 360)
 8001714:	e007      	b.n	8001726 <calcOri+0xa6>
		result -= 360;
 8001716:	edd7 7a04 	vldr	s15, [r7, #16]
 800171a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800176c <calcOri+0xec>
 800171e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001722:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result >= 360)
 8001726:	edd7 7a04 	vldr	s15, [r7, #16]
 800172a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800176c <calcOri+0xec>
 800172e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	daee      	bge.n	8001716 <calcOri+0x96>
	while (result < 0)
 8001738:	e007      	b.n	800174a <calcOri+0xca>
		result += 360;
 800173a:	edd7 7a04 	vldr	s15, [r7, #16]
 800173e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800176c <calcOri+0xec>
 8001742:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001746:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result < 0)
 800174a:	edd7 7a04 	vldr	s15, [r7, #16]
 800174e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001756:	d4f0      	bmi.n	800173a <calcOri+0xba>
	return result;
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	ee07 3a90 	vmov	s15, r3
}
 800175e:	eeb0 0a67 	vmov.f32	s0, s15
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	447a0000 	.word	0x447a0000
 800176c:	43b40000 	.word	0x43b40000

08001770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001774:	f002 fde2 	bl	800433c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001778:	f000 f88c 	bl	8001894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800177c:	f000 fb8a 	bl	8001e94 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001780:	f000 fab4 	bl	8001cec <MX_TIM8_Init>
  MX_I2C1_Init();
 8001784:	f000 f8e4 	bl	8001950 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001788:	f000 f9d2 	bl	8001b30 <MX_TIM2_Init>
  MX_TIM3_Init();
 800178c:	f000 fa24 	bl	8001bd8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001790:	f000 f90c 	bl	80019ac <MX_TIM1_Init>
  MX_TIM6_Init();
 8001794:	f000 fa74 	bl	8001c80 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001798:	f000 fb52 	bl	8001e40 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800179c:	f002 f902 	bl	80039a4 <OLED_Init>
  if (imu_init(&hi2c1) != 0) {
 80017a0:	4827      	ldr	r0, [pc, #156]	; (8001840 <main+0xd0>)
 80017a2:	f7ff fd31 	bl	8001208 <imu_init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00d      	beq.n	80017c8 <main+0x58>
	  OLED_Clear();
 80017ac:	f001 ffd6 	bl	800375c <OLED_Clear>
		sprintf(oledbuf, "Imu err: %d", 1);
 80017b0:	2201      	movs	r2, #1
 80017b2:	4924      	ldr	r1, [pc, #144]	; (8001844 <main+0xd4>)
 80017b4:	4824      	ldr	r0, [pc, #144]	; (8001848 <main+0xd8>)
 80017b6:	f00a ff07 	bl	800c5c8 <siprintf>
		OLED_ShowString(10, 15, &oledbuf[0]);
 80017ba:	4a23      	ldr	r2, [pc, #140]	; (8001848 <main+0xd8>)
 80017bc:	210f      	movs	r1, #15
 80017be:	200a      	movs	r0, #10
 80017c0:	f002 f8be 	bl	8003940 <OLED_ShowString>
		OLED_Refresh_Gram();
 80017c4:	f001 ff48 	bl	8003658 <OLED_Refresh_Gram>
  }
  HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ce:	481f      	ldr	r0, [pc, #124]	; (800184c <main+0xdc>)
 80017d0:	f003 f98a 	bl	8004ae8 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017d4:	f007 fbca 	bl	8008f6c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ori_semaphore */
  ori_semaphoreHandle = osSemaphoreNew(1, 1, &ori_semaphore_attributes);
 80017d8:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <main+0xe0>)
 80017da:	2101      	movs	r1, #1
 80017dc:	2001      	movs	r0, #1
 80017de:	f007 fcbc 	bl	800915a <osSemaphoreNew>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <main+0xe4>)
 80017e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017e8:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <main+0xe8>)
 80017ea:	2100      	movs	r1, #0
 80017ec:	481b      	ldr	r0, [pc, #108]	; (800185c <main+0xec>)
 80017ee:	f007 fc07 	bl	8009000 <osThreadNew>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a1a      	ldr	r2, [pc, #104]	; (8001860 <main+0xf0>)
 80017f6:	6013      	str	r3, [r2, #0]

  /* creation of motorServo */
  motorServoHandle = osThreadNew(StartMotorServo, NULL, &motorServo_attributes);
 80017f8:	4a1a      	ldr	r2, [pc, #104]	; (8001864 <main+0xf4>)
 80017fa:	2100      	movs	r1, #0
 80017fc:	481a      	ldr	r0, [pc, #104]	; (8001868 <main+0xf8>)
 80017fe:	f007 fbff 	bl	8009000 <osThreadNew>
 8001802:	4603      	mov	r3, r0
 8001804:	4a19      	ldr	r2, [pc, #100]	; (800186c <main+0xfc>)
 8001806:	6013      	str	r3, [r2, #0]

  /* creation of imu */
  imuHandle = osThreadNew(StartIMU, NULL, &imu_attributes);
 8001808:	4a19      	ldr	r2, [pc, #100]	; (8001870 <main+0x100>)
 800180a:	2100      	movs	r1, #0
 800180c:	4819      	ldr	r0, [pc, #100]	; (8001874 <main+0x104>)
 800180e:	f007 fbf7 	bl	8009000 <osThreadNew>
 8001812:	4603      	mov	r3, r0
 8001814:	4a18      	ldr	r2, [pc, #96]	; (8001878 <main+0x108>)
 8001816:	6013      	str	r3, [r2, #0]

  /* creation of ultrasound */
  ultrasoundHandle = osThreadNew(StartUS, NULL, &ultrasound_attributes);
 8001818:	4a18      	ldr	r2, [pc, #96]	; (800187c <main+0x10c>)
 800181a:	2100      	movs	r1, #0
 800181c:	4818      	ldr	r0, [pc, #96]	; (8001880 <main+0x110>)
 800181e:	f007 fbef 	bl	8009000 <osThreadNew>
 8001822:	4603      	mov	r3, r0
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <main+0x114>)
 8001826:	6013      	str	r3, [r2, #0]

  /* creation of uart */
  uartHandle = osThreadNew(StartUART, NULL, &uart_attributes);
 8001828:	4a17      	ldr	r2, [pc, #92]	; (8001888 <main+0x118>)
 800182a:	2100      	movs	r1, #0
 800182c:	4817      	ldr	r0, [pc, #92]	; (800188c <main+0x11c>)
 800182e:	f007 fbe7 	bl	8009000 <osThreadNew>
 8001832:	4603      	mov	r3, r0
 8001834:	4a16      	ldr	r2, [pc, #88]	; (8001890 <main+0x120>)
 8001836:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001838:	f007 fbbc 	bl	8008fb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800183c:	e7fe      	b.n	800183c <main+0xcc>
 800183e:	bf00      	nop
 8001840:	20000224 	.word	0x20000224
 8001844:	0800fb60 	.word	0x0800fb60
 8001848:	20000450 	.word	0x20000450
 800184c:	40021000 	.word	0x40021000
 8001850:	0800fc48 	.word	0x0800fc48
 8001854:	20000438 	.word	0x20000438
 8001858:	0800fb94 	.word	0x0800fb94
 800185c:	0800228d 	.word	0x0800228d
 8001860:	20000424 	.word	0x20000424
 8001864:	0800fbb8 	.word	0x0800fbb8
 8001868:	080022a1 	.word	0x080022a1
 800186c:	20000428 	.word	0x20000428
 8001870:	0800fbdc 	.word	0x0800fbdc
 8001874:	080024ad 	.word	0x080024ad
 8001878:	2000042c 	.word	0x2000042c
 800187c:	0800fc00 	.word	0x0800fc00
 8001880:	080024f1 	.word	0x080024f1
 8001884:	20000430 	.word	0x20000430
 8001888:	0800fc24 	.word	0x0800fc24
 800188c:	08002545 	.word	0x08002545
 8001890:	20000434 	.word	0x20000434

08001894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b094      	sub	sp, #80	; 0x50
 8001898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189a:	f107 0320 	add.w	r3, r7, #32
 800189e:	2230      	movs	r2, #48	; 0x30
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f00a ff60 	bl	800c768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <SystemClock_Config+0xb4>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	4a21      	ldr	r2, [pc, #132]	; (8001948 <SystemClock_Config+0xb4>)
 80018c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c6:	6413      	str	r3, [r2, #64]	; 0x40
 80018c8:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <SystemClock_Config+0xb4>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	4b1c      	ldr	r3, [pc, #112]	; (800194c <SystemClock_Config+0xb8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1b      	ldr	r2, [pc, #108]	; (800194c <SystemClock_Config+0xb8>)
 80018de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <SystemClock_Config+0xb8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f0:	2302      	movs	r3, #2
 80018f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f4:	2301      	movs	r3, #1
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f8:	2310      	movs	r3, #16
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001900:	f107 0320 	add.w	r3, r7, #32
 8001904:	4618      	mov	r0, r3
 8001906:	f004 f8c7 	bl	8005a98 <HAL_RCC_OscConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001910:	f000 fe50 	bl	80025b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001914:	230f      	movs	r3, #15
 8001916:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f004 fb2a 	bl	8005f88 <HAL_RCC_ClockConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800193a:	f000 fe3b 	bl	80025b4 <Error_Handler>
  }
}
 800193e:	bf00      	nop
 8001940:	3750      	adds	r7, #80	; 0x50
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40007000 	.word	0x40007000

08001950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001956:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <MX_I2C1_Init+0x54>)
 8001958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_I2C1_Init+0x50>)
 800195c:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_I2C1_Init+0x58>)
 800195e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_I2C1_Init+0x50>)
 800196e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_I2C1_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800198c:	4804      	ldr	r0, [pc, #16]	; (80019a0 <MX_I2C1_Init+0x50>)
 800198e:	f003 f8c5 	bl	8004b1c <HAL_I2C_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001998:	f000 fe0c 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000224 	.word	0x20000224
 80019a4:	40005400 	.word	0x40005400
 80019a8:	000186a0 	.word	0x000186a0

080019ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b09a      	sub	sp, #104	; 0x68
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
 80019e8:	615a      	str	r2, [r3, #20]
 80019ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2220      	movs	r2, #32
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f00a feb8 	bl	800c768 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019f8:	4b4b      	ldr	r3, [pc, #300]	; (8001b28 <MX_TIM1_Init+0x17c>)
 80019fa:	4a4c      	ldr	r2, [pc, #304]	; (8001b2c <MX_TIM1_Init+0x180>)
 80019fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80019fe:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001a00:	220f      	movs	r2, #15
 8001a02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001a0a:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001a0c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a12:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a18:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a1e:	4b42      	ldr	r3, [pc, #264]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a24:	4840      	ldr	r0, [pc, #256]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001a26:	f004 fc8f 	bl	8006348 <HAL_TIM_Base_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001a30:	f000 fdc0 	bl	80025b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a38:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4839      	ldr	r0, [pc, #228]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001a42:	f005 fb97 	bl	8007174 <HAL_TIM_ConfigClockSource>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a4c:	f000 fdb2 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001a50:	4835      	ldr	r0, [pc, #212]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001a52:	f004 fe53 	bl	80066fc <HAL_TIM_IC_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001a5c:	f000 fdaa 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a60:	4831      	ldr	r0, [pc, #196]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001a62:	f004 fd29 	bl	80064b8 <HAL_TIM_PWM_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a6c:	f000 fda2 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	482a      	ldr	r0, [pc, #168]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001a80:	f006 f8e6 	bl	8007c50 <HAL_TIMEx_MasterConfigSynchronization>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8001a8a:	f000 fd93 	bl	80025b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001a8e:	230a      	movs	r3, #10
 8001a90:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a92:	2301      	movs	r3, #1
 8001a94:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4820      	ldr	r0, [pc, #128]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001aa8:	f005 fa06 	bl	8006eb8 <HAL_TIM_IC_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001ab2:	f000 fd7f 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab6:	2360      	movs	r3, #96	; 0x60
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4814      	ldr	r0, [pc, #80]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001ad8:	f005 fa8a 	bl	8006ff0 <HAL_TIM_PWM_ConfigChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001ae2:	f000 fd67 	bl	80025b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001afe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	4619      	mov	r1, r3
 8001b08:	4807      	ldr	r0, [pc, #28]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001b0a:	f006 f91d 	bl	8007d48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001b14:	f000 fd4e 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <MX_TIM1_Init+0x17c>)
 8001b1a:	f002 fa37 	bl	8003f8c <HAL_TIM_MspPostInit>

}
 8001b1e:	bf00      	nop
 8001b20:	3768      	adds	r7, #104	; 0x68
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000278 	.word	0x20000278
 8001b2c:	40010000 	.word	0x40010000

08001b30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	; 0x30
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	2224      	movs	r2, #36	; 0x24
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f00a fe12 	bl	800c768 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001b4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b74:	2303      	movs	r3, #3
 8001b76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b84:	230a      	movs	r3, #10
 8001b86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001b94:	230a      	movs	r3, #10
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001ba0:	f004 ff2e 	bl	8006a00 <HAL_TIM_Encoder_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001baa:	f000 fd03 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001bbc:	f006 f848 	bl	8007c50 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001bc6:	f000 fcf5 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	3730      	adds	r7, #48	; 0x30
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200002c0 	.word	0x200002c0

08001bd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2224      	movs	r2, #36	; 0x24
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f00a fdbe 	bl	800c768 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001bf6:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <MX_TIM3_Init+0xa4>)
 8001bf8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c22:	2301      	movs	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c2a:	230a      	movs	r3, #10
 8001c2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c32:	2301      	movs	r3, #1
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001c3a:	230a      	movs	r3, #10
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001c46:	f004 fedb 	bl	8006a00 <HAL_TIM_Encoder_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c50:	f000 fcb0 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_TIM3_Init+0xa0>)
 8001c62:	f005 fff5 	bl	8007c50 <HAL_TIMEx_MasterConfigSynchronization>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c6c:	f000 fca2 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	3730      	adds	r7, #48	; 0x30
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000308 	.word	0x20000308
 8001c7c:	40000400 	.word	0x40000400

08001c80 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c86:	463b      	mov	r3, r7
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <MX_TIM6_Init+0x64>)
 8001c90:	4a15      	ldr	r2, [pc, #84]	; (8001ce8 <MX_TIM6_Init+0x68>)
 8001c92:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <MX_TIM6_Init+0x64>)
 8001c96:	220f      	movs	r2, #15
 8001c98:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <MX_TIM6_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <MX_TIM6_Init+0x64>)
 8001ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_TIM6_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cae:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <MX_TIM6_Init+0x64>)
 8001cb0:	f004 fb4a 	bl	8006348 <HAL_TIM_Base_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001cba:	f000 fc7b 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <MX_TIM6_Init+0x64>)
 8001ccc:	f005 ffc0 	bl	8007c50 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001cd6:	f000 fc6d 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000350 	.word	0x20000350
 8001ce8:	40001000 	.word	0x40001000

08001cec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b096      	sub	sp, #88	; 0x58
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	615a      	str	r2, [r3, #20]
 8001d1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2220      	movs	r2, #32
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f00a fd1f 	bl	800c768 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d2a:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <MX_TIM8_Init+0x14c>)
 8001d2c:	4a43      	ldr	r2, [pc, #268]	; (8001e3c <MX_TIM8_Init+0x150>)
 8001d2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d30:	4b41      	ldr	r3, [pc, #260]	; (8001e38 <MX_TIM8_Init+0x14c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d36:	4b40      	ldr	r3, [pc, #256]	; (8001e38 <MX_TIM8_Init+0x14c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001d3c:	4b3e      	ldr	r3, [pc, #248]	; (8001e38 <MX_TIM8_Init+0x14c>)
 8001d3e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001d42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d44:	4b3c      	ldr	r3, [pc, #240]	; (8001e38 <MX_TIM8_Init+0x14c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <MX_TIM8_Init+0x14c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d50:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <MX_TIM8_Init+0x14c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d56:	4838      	ldr	r0, [pc, #224]	; (8001e38 <MX_TIM8_Init+0x14c>)
 8001d58:	f004 faf6 	bl	8006348 <HAL_TIM_Base_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001d62:	f000 fc27 	bl	80025b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d70:	4619      	mov	r1, r3
 8001d72:	4831      	ldr	r0, [pc, #196]	; (8001e38 <MX_TIM8_Init+0x14c>)
 8001d74:	f005 f9fe 	bl	8007174 <HAL_TIM_ConfigClockSource>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001d7e:	f000 fc19 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d82:	482d      	ldr	r0, [pc, #180]	; (8001e38 <MX_TIM8_Init+0x14c>)
 8001d84:	f004 fb98 	bl	80064b8 <HAL_TIM_PWM_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001d8e:	f000 fc11 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4825      	ldr	r0, [pc, #148]	; (8001e38 <MX_TIM8_Init+0x14c>)
 8001da2:	f005 ff55 	bl	8007c50 <HAL_TIMEx_MasterConfigSynchronization>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001dac:	f000 fc02 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db0:	2360      	movs	r3, #96	; 0x60
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4818      	ldr	r0, [pc, #96]	; (8001e38 <MX_TIM8_Init+0x14c>)
 8001dd6:	f005 f90b 	bl	8006ff0 <HAL_TIM_PWM_ConfigChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001de0:	f000 fbe8 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de8:	2204      	movs	r2, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	4812      	ldr	r0, [pc, #72]	; (8001e38 <MX_TIM8_Init+0x14c>)
 8001dee:	f005 f8ff 	bl	8006ff0 <HAL_TIM_PWM_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001df8:	f000 fbdc 	bl	80025b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4806      	ldr	r0, [pc, #24]	; (8001e38 <MX_TIM8_Init+0x14c>)
 8001e20:	f005 ff92 	bl	8007d48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001e2a:	f000 fbc3 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	3758      	adds	r7, #88	; 0x58
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000398 	.word	0x20000398
 8001e3c:	40010400 	.word	0x40010400

08001e40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <MX_USART3_UART_Init+0x50>)
 8001e48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <MX_USART3_UART_Init+0x4c>)
 8001e78:	f005 ffcc 	bl	8007e14 <HAL_UART_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e82:	f000 fb97 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200003e0 	.word	0x200003e0
 8001e90:	40004800 	.word	0x40004800

08001e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	4b3a      	ldr	r3, [pc, #232]	; (8001f98 <MX_GPIO_Init+0x104>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a39      	ldr	r2, [pc, #228]	; (8001f98 <MX_GPIO_Init+0x104>)
 8001eb4:	f043 0310 	orr.w	r3, r3, #16
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <MX_GPIO_Init+0x104>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b33      	ldr	r3, [pc, #204]	; (8001f98 <MX_GPIO_Init+0x104>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a32      	ldr	r2, [pc, #200]	; (8001f98 <MX_GPIO_Init+0x104>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <MX_GPIO_Init+0x104>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <MX_GPIO_Init+0x104>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a2b      	ldr	r2, [pc, #172]	; (8001f98 <MX_GPIO_Init+0x104>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <MX_GPIO_Init+0x104>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <MX_GPIO_Init+0x104>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a24      	ldr	r2, [pc, #144]	; (8001f98 <MX_GPIO_Init+0x104>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <MX_GPIO_Init+0x104>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001f20:	481e      	ldr	r0, [pc, #120]	; (8001f9c <MX_GPIO_Init+0x108>)
 8001f22:	f002 fde1 	bl	8004ae8 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	213c      	movs	r1, #60	; 0x3c
 8001f2a:	481d      	ldr	r0, [pc, #116]	; (8001fa0 <MX_GPIO_Init+0x10c>)
 8001f2c:	f002 fddc 	bl	8004ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2110      	movs	r1, #16
 8001f34:	481b      	ldr	r0, [pc, #108]	; (8001fa4 <MX_GPIO_Init+0x110>)
 8001f36:	f002 fdd7 	bl	8004ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 PE7 PE8
                           LED3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001f3a:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001f3e:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4619      	mov	r1, r3
 8001f52:	4812      	ldr	r0, [pc, #72]	; (8001f9c <MX_GPIO_Init+0x108>)
 8001f54:	f002 fc2c 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001f58:	233c      	movs	r3, #60	; 0x3c
 8001f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f64:	2302      	movs	r3, #2
 8001f66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	480c      	ldr	r0, [pc, #48]	; (8001fa0 <MX_GPIO_Init+0x10c>)
 8001f70:	f002 fc1e 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 8001f74:	2310      	movs	r3, #16
 8001f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4806      	ldr	r0, [pc, #24]	; (8001fa4 <MX_GPIO_Init+0x110>)
 8001f8c:	f002 fc10 	bl	80047b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f90:	bf00      	nop
 8001f92:	3728      	adds	r7, #40	; 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020400 	.word	0x40020400

08001fa8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001fa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {		// Ultrasound Echo
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a7d      	ldr	r2, [pc, #500]	; (80021ac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	f040 80dd 	bne.w	8002176 <HAL_TIM_IC_CaptureCallback+0x1ce>
		if (echo_upEdge > 20000) {
 8001fbc:	4b7c      	ldr	r3, [pc, #496]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0x208>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d908      	bls.n	8001fda <HAL_TIM_IC_CaptureCallback+0x32>
			echo_upEdge = (uint16_t)HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f005 f99a 	bl	8007304 <HAL_TIM_ReadCapturedValue>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0x208>)
 8001fd6:	801a      	strh	r2, [r3, #0]
 8001fd8:	e0cd      	b.n	8002176 <HAL_TIM_IC_CaptureCallback+0x1ce>
		}
		else {
			echo_downEdge = (uint16_t)HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001fda:	2100      	movs	r1, #0
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f005 f991 	bl	8007304 <HAL_TIM_ReadCapturedValue>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	4b73      	ldr	r3, [pc, #460]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001fe8:	801a      	strh	r2, [r3, #0]
			if (echo_upEdge > echo_downEdge) {
 8001fea:	4b71      	ldr	r3, [pc, #452]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0x208>)
 8001fec:	881a      	ldrh	r2, [r3, #0]
 8001fee:	4b71      	ldr	r3, [pc, #452]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d90c      	bls.n	8002010 <HAL_TIM_IC_CaptureCallback+0x68>
				echo = (echo_downEdge + 20000) - echo_upEdge;
 8001ff6:	4b6f      	ldr	r3, [pc, #444]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001ff8:	881a      	ldrh	r2, [r3, #0]
 8001ffa:	4b6d      	ldr	r3, [pc, #436]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0x208>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	b29b      	uxth	r3, r3
 8002002:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8002006:	3320      	adds	r3, #32
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b6b      	ldr	r3, [pc, #428]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x210>)
 800200c:	801a      	strh	r2, [r3, #0]
 800200e:	e007      	b.n	8002020 <HAL_TIM_IC_CaptureCallback+0x78>
			}
			else {
				echo = echo_downEdge - echo_upEdge;
 8002010:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002012:	881a      	ldrh	r2, [r3, #0]
 8002014:	4b66      	ldr	r3, [pc, #408]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	b29a      	uxth	r2, r3
 800201c:	4b66      	ldr	r3, [pc, #408]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x210>)
 800201e:	801a      	strh	r2, [r3, #0]
			}
			echo_upEdge = 65535;
 8002020:	4b63      	ldr	r3, [pc, #396]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002026:	801a      	strh	r2, [r3, #0]
			echo_downEdge = 65535;
 8002028:	4b62      	ldr	r3, [pc, #392]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800202a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800202e:	801a      	strh	r2, [r3, #0]
			if ((echo < MIN_US_ECHO) && (!cpltErr.finished)) {	// If car is not running, don't do anything
 8002030:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002038:	f080 809d 	bcs.w	8002176 <HAL_TIM_IC_CaptureCallback+0x1ce>
 800203c:	4b5f      	ldr	r3, [pc, #380]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x214>)
 800203e:	799b      	ldrb	r3, [r3, #6]
 8002040:	2b00      	cmp	r3, #0
 8002042:	f040 8098 	bne.w	8002176 <HAL_TIM_IC_CaptureCallback+0x1ce>
				if (us_alert == 0) {	// Encounter alert first time, don't do anything
 8002046:	4b5e      	ldr	r3, [pc, #376]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_TIM_IC_CaptureCallback+0xb4>
					us_alert++;
 800204e:	4b5c      	ldr	r3, [pc, #368]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	3301      	adds	r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b5a      	ldr	r3, [pc, #360]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002058:	701a      	strb	r2, [r3, #0]
					return;
 800205a:	e0a3      	b.n	80021a4 <HAL_TIM_IC_CaptureCallback+0x1fc>
				}
				if ((curInst.type == INST_TYPE_GOSTRAIGHT) && (curInst.val > 0)) {
 800205c:	4b59      	ldr	r3, [pc, #356]	; (80021c4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800205e:	785b      	ldrb	r3, [r3, #1]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d108      	bne.n	8002076 <HAL_TIM_IC_CaptureCallback+0xce>
 8002064:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002066:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800206a:	2b00      	cmp	r3, #0
 800206c:	dd03      	ble.n	8002076 <HAL_TIM_IC_CaptureCallback+0xce>
					mtr_suspend(SUS_STOPPID);
 800206e:	2003      	movs	r0, #3
 8002070:	f000 fcd6 	bl	8002a20 <mtr_suspend>
 8002074:	e07c      	b.n	8002170 <HAL_TIM_IC_CaptureCallback+0x1c8>
				}
				else if (curInst.type == INST_TYPE_TURN) {
 8002076:	4b53      	ldr	r3, [pc, #332]	; (80021c4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002078:	785b      	ldrb	r3, [r3, #1]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d175      	bne.n	800216a <HAL_TIM_IC_CaptureCallback+0x1c2>
					if (mtrA.suspend == SUS_OFF) {
 800207e:	4b52      	ldr	r3, [pc, #328]	; (80021c8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d16d      	bne.n	8002162 <HAL_TIM_IC_CaptureCallback+0x1ba>
						float distchange = (float)SOSBACK_DIST_CNT / CNT_PER_CM;
 8002086:	4b51      	ldr	r3, [pc, #324]	; (80021cc <HAL_TIM_IC_CaptureCallback+0x224>)
 8002088:	60fb      	str	r3, [r7, #12]
						us_distchange_x += distchange * sin((orientation / 180) * PI);
 800208a:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0x228>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fa5a 	bl	8000548 <__aeabi_f2d>
 8002094:	4604      	mov	r4, r0
 8002096:	460d      	mov	r5, r1
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f7fe fa55 	bl	8000548 <__aeabi_f2d>
 800209e:	4680      	mov	r8, r0
 80020a0:	4689      	mov	r9, r1
 80020a2:	4b4c      	ldr	r3, [pc, #304]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 80020a4:	ed93 7a00 	vldr	s14, [r3]
 80020a8:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80021d8 <HAL_TIM_IC_CaptureCallback+0x230>
 80020ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80021dc <HAL_TIM_IC_CaptureCallback+0x234>
 80020b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020b8:	ee17 0a90 	vmov	r0, s15
 80020bc:	f7fe fa44 	bl	8000548 <__aeabi_f2d>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	ec43 2b10 	vmov	d0, r2, r3
 80020c8:	f00c fcde 	bl	800ea88 <sin>
 80020cc:	ec53 2b10 	vmov	r2, r3, d0
 80020d0:	4640      	mov	r0, r8
 80020d2:	4649      	mov	r1, r9
 80020d4:	f7fe fa90 	bl	80005f8 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4620      	mov	r0, r4
 80020de:	4629      	mov	r1, r5
 80020e0:	f7fe f8d4 	bl	800028c <__adddf3>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	f7fe fd5c 	bl	8000ba8 <__aeabi_d2f>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4a37      	ldr	r2, [pc, #220]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0x228>)
 80020f4:	6013      	str	r3, [r2, #0]
						us_distchange_y += distchange * cos((orientation / 180) * PI);
 80020f6:	4b3a      	ldr	r3, [pc, #232]	; (80021e0 <HAL_TIM_IC_CaptureCallback+0x238>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa24 	bl	8000548 <__aeabi_f2d>
 8002100:	4604      	mov	r4, r0
 8002102:	460d      	mov	r5, r1
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7fe fa1f 	bl	8000548 <__aeabi_f2d>
 800210a:	4680      	mov	r8, r0
 800210c:	4689      	mov	r9, r1
 800210e:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002110:	ed93 7a00 	vldr	s14, [r3]
 8002114:	eddf 6a30 	vldr	s13, [pc, #192]	; 80021d8 <HAL_TIM_IC_CaptureCallback+0x230>
 8002118:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800211c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80021dc <HAL_TIM_IC_CaptureCallback+0x234>
 8002120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002124:	ee17 0a90 	vmov	r0, s15
 8002128:	f7fe fa0e 	bl	8000548 <__aeabi_f2d>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	ec43 2b10 	vmov	d0, r2, r3
 8002134:	f00c fc54 	bl	800e9e0 <cos>
 8002138:	ec53 2b10 	vmov	r2, r3, d0
 800213c:	4640      	mov	r0, r8
 800213e:	4649      	mov	r1, r9
 8002140:	f7fe fa5a 	bl	80005f8 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe f89e 	bl	800028c <__adddf3>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	f7fe fd26 	bl	8000ba8 <__aeabi_d2f>
 800215c:	4603      	mov	r3, r0
 800215e:	4a20      	ldr	r2, [pc, #128]	; (80021e0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8002160:	6013      	str	r3, [r2, #0]
					}
					mtr_suspend(SUS_BACK);
 8002162:	2002      	movs	r0, #2
 8002164:	f000 fc5c 	bl	8002a20 <mtr_suspend>
 8002168:	e002      	b.n	8002170 <HAL_TIM_IC_CaptureCallback+0x1c8>
				}
				else {
					mtr_suspend(SUS_STOP);
 800216a:	2001      	movs	r0, #1
 800216c:	f000 fc58 	bl	8002a20 <mtr_suspend>
				}
				us_alert = 0;
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (htim == &htim2) {		// Motor A's interrupt
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a1a      	ldr	r2, [pc, #104]	; (80021e4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d108      	bne.n	8002190 <HAL_TIM_IC_CaptureCallback+0x1e8>
		mtrAPID.count = -(int16_t)__HAL_TIM_GET_COUNTER(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	b29b      	uxth	r3, r3
 8002186:	425b      	negs	r3, r3
 8002188:	b29b      	uxth	r3, r3
 800218a:	b21a      	sxth	r2, r3
 800218c:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <HAL_TIM_IC_CaptureCallback+0x240>)
 800218e:	801a      	strh	r2, [r3, #0]
		//mtrAPID.angle = (int)((mtrAPID.count/2)*360/(PULSE_PER_REV));
	}
	if (htim == &htim3) {		// Motor B's interrupt
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a16      	ldr	r2, [pc, #88]	; (80021ec <HAL_TIM_IC_CaptureCallback+0x244>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d105      	bne.n	80021a4 <HAL_TIM_IC_CaptureCallback+0x1fc>
		mtrBPID.count = (int16_t)__HAL_TIM_GET_COUNTER(htim);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	b21a      	sxth	r2, r3
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_TIM_IC_CaptureCallback+0x248>)
 80021a2:	801a      	strh	r2, [r3, #0]
		//mtrBPID.angle = (int)((mtrBPID.count/2)*360/(PULSE_PER_REV));
	}
}
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021ac:	20000278 	.word	0x20000278
 80021b0:	20000004 	.word	0x20000004
 80021b4:	20000006 	.word	0x20000006
 80021b8:	20000478 	.word	0x20000478
 80021bc:	20000480 	.word	0x20000480
 80021c0:	2000047a 	.word	0x2000047a
 80021c4:	2000047c 	.word	0x2000047c
 80021c8:	20000488 	.word	0x20000488
 80021cc:	c12eb4b4 	.word	0xc12eb4b4
 80021d0:	20000448 	.word	0x20000448
 80021d4:	2000043c 	.word	0x2000043c
 80021d8:	43340000 	.word	0x43340000
 80021dc:	40490fdb 	.word	0x40490fdb
 80021e0:	2000044c 	.word	0x2000044c
 80021e4:	200002c0 	.word	0x200002c0
 80021e8:	20000498 	.word	0x20000498
 80021ec:	20000308 	.word	0x20000308
 80021f0:	200004b8 	.word	0x200004b8

080021f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	//MX_USART3_UART_Init();
	HAL_StatusTypeDef uart_stt = uart_receive((uint8_t*) buf);
 80021fc:	4814      	ldr	r0, [pc, #80]	; (8002250 <HAL_UART_RxCpltCallback+0x5c>)
 80021fe:	f7fe ff83 	bl	8001108 <uart_receive>
 8002202:	4603      	mov	r3, r0
 8002204:	73fb      	strb	r3, [r7, #15]
	OLED_Clear();
 8002206:	f001 faa9 	bl	800375c <OLED_Clear>
	sprintf(oledbuf, "%2x %2x %2x %2x", buf[0], buf[1], buf[2], buf[3]);
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_UART_RxCpltCallback+0x5c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_UART_RxCpltCallback+0x5c>)
 8002212:	785b      	ldrb	r3, [r3, #1]
 8002214:	4618      	mov	r0, r3
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_UART_RxCpltCallback+0x5c>)
 8002218:	789b      	ldrb	r3, [r3, #2]
 800221a:	461a      	mov	r2, r3
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_UART_RxCpltCallback+0x5c>)
 800221e:	78db      	ldrb	r3, [r3, #3]
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	9200      	str	r2, [sp, #0]
 8002224:	4603      	mov	r3, r0
 8002226:	460a      	mov	r2, r1
 8002228:	490a      	ldr	r1, [pc, #40]	; (8002254 <HAL_UART_RxCpltCallback+0x60>)
 800222a:	480b      	ldr	r0, [pc, #44]	; (8002258 <HAL_UART_RxCpltCallback+0x64>)
 800222c:	f00a f9cc 	bl	800c5c8 <siprintf>
	OLED_ShowString(10, 15, &oledbuf[0]);
 8002230:	4a09      	ldr	r2, [pc, #36]	; (8002258 <HAL_UART_RxCpltCallback+0x64>)
 8002232:	210f      	movs	r1, #15
 8002234:	200a      	movs	r0, #10
 8002236:	f001 fb83 	bl	8003940 <OLED_ShowString>
	OLED_Refresh_Gram();
 800223a:	f001 fa0d 	bl	8003658 <OLED_Refresh_Gram>
	//huart->RxState = HAL_UART_STATE_READY;
	HAL_UART_Receive_IT(huart, (uint8_t*) buf, UART_PACKET_SIZE);
 800223e:	2205      	movs	r2, #5
 8002240:	4903      	ldr	r1, [pc, #12]	; (8002250 <HAL_UART_RxCpltCallback+0x5c>)
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f005 fec5 	bl	8007fd2 <HAL_UART_Receive_IT>
		sprintf(oledbuf, "Fin: %d", cpltErr.finished);
		OLED_ShowString(10, 45, &oledbuf[0]);
		OLED_Refresh_Gram();
	}
	*/
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000464 	.word	0x20000464
 8002254:	0800fb6c 	.word	0x0800fb6c
 8002258:	20000450 	.word	0x20000450

0800225c <Delay_us>:

void Delay_us(uint16_t us) {
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <Delay_us+0x2c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2200      	movs	r2, #0
 800226c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < us);
 800226e:	bf00      	nop
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <Delay_us+0x2c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	429a      	cmp	r2, r3
 800227a:	d3f9      	bcc.n	8002270 <Delay_us+0x14>
	return;
 800227c:	bf00      	nop
}
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	20000350 	.word	0x20000350

0800228c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8002294:	f242 7010 	movw	r0, #10000	; 0x2710
 8002298:	f006 ff44 	bl	8009124 <osDelay>
 800229c:	e7fa      	b.n	8002294 <StartDefaultTask+0x8>
	...

080022a0 <StartMotorServo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorServo */
void StartMotorServo(void *argument)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af06      	add	r7, sp, #24
 80022a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorServo */
	mtr_init(&htim8, &htim2, &htim3, &mtrA, &mtrB, &mtrAPID, &mtrBPID, &backupObj, &orientation, &ori_semaphoreHandle);
 80022a8:	4b6d      	ldr	r3, [pc, #436]	; (8002460 <StartMotorServo+0x1c0>)
 80022aa:	9305      	str	r3, [sp, #20]
 80022ac:	4b6d      	ldr	r3, [pc, #436]	; (8002464 <StartMotorServo+0x1c4>)
 80022ae:	9304      	str	r3, [sp, #16]
 80022b0:	4b6d      	ldr	r3, [pc, #436]	; (8002468 <StartMotorServo+0x1c8>)
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	4b6d      	ldr	r3, [pc, #436]	; (800246c <StartMotorServo+0x1cc>)
 80022b6:	9302      	str	r3, [sp, #8]
 80022b8:	4b6d      	ldr	r3, [pc, #436]	; (8002470 <StartMotorServo+0x1d0>)
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	4b6d      	ldr	r3, [pc, #436]	; (8002474 <StartMotorServo+0x1d4>)
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	4b6d      	ldr	r3, [pc, #436]	; (8002478 <StartMotorServo+0x1d8>)
 80022c2:	4a6e      	ldr	r2, [pc, #440]	; (800247c <StartMotorServo+0x1dc>)
 80022c4:	496e      	ldr	r1, [pc, #440]	; (8002480 <StartMotorServo+0x1e0>)
 80022c6:	486f      	ldr	r0, [pc, #444]	; (8002484 <StartMotorServo+0x1e4>)
 80022c8:	f000 f97a 	bl	80025c0 <mtr_init>
	servoInit(&htim1);
 80022cc:	486e      	ldr	r0, [pc, #440]	; (8002488 <StartMotorServo+0x1e8>)
 80022ce:	f001 fc6f 	bl	8003bb0 <servoInit>

	//mtr_mov_cm(30, 30);
  /* Infinite loop */
  for(;;)
  {
	  if ((cpltErr.id == curInst.id) && (!cpltErr.finished)) {	// If the current instruction is the next one to be executed
 80022d2:	4b6e      	ldr	r3, [pc, #440]	; (800248c <StartMotorServo+0x1ec>)
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	4b6e      	ldr	r3, [pc, #440]	; (8002490 <StartMotorServo+0x1f0>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	f040 80b8 	bne.w	8002450 <StartMotorServo+0x1b0>
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <StartMotorServo+0x1ec>)
 80022e2:	799b      	ldrb	r3, [r3, #6]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f040 80b3 	bne.w	8002450 <StartMotorServo+0x1b0>
		  float dist = executeInstruction(&curInst, &cpltErr);
 80022ea:	4968      	ldr	r1, [pc, #416]	; (800248c <StartMotorServo+0x1ec>)
 80022ec:	4868      	ldr	r0, [pc, #416]	; (8002490 <StartMotorServo+0x1f0>)
 80022ee:	f001 f91b 	bl	8003528 <executeInstruction>
 80022f2:	ed87 0a03 	vstr	s0, [r7, #12]
		  if ((mtrA.suspend != SUS_OFF) || (mtrB.suspend != SUS_OFF)) {
 80022f6:	4b60      	ldr	r3, [pc, #384]	; (8002478 <StartMotorServo+0x1d8>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <StartMotorServo+0x66>
 80022fe:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <StartMotorServo+0x1d4>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <StartMotorServo+0x6e>
			  mtr_continue();
 8002306:	f000 fbe1 	bl	8002acc <mtr_continue>
			  mtr_stop();
 800230a:	f000 fb1d 	bl	8002948 <mtr_stop>
		  }
		  if (!cpltErr.finished) {	// If instruction did not finish, try again
 800230e:	4b5f      	ldr	r3, [pc, #380]	; (800248c <StartMotorServo+0x1ec>)
 8002310:	799b      	ldrb	r3, [r3, #6]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 80a1 	beq.w	800245a <StartMotorServo+0x1ba>
			  continue;
		  }
		  if (dist != 0) {
 8002318:	edd7 7a03 	vldr	s15, [r7, #12]
 800231c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002324:	d052      	beq.n	80023cc <StartMotorServo+0x12c>
			  pos_x += dist * (float)sin((orientation / 180) * PI);
 8002326:	4b4f      	ldr	r3, [pc, #316]	; (8002464 <StartMotorServo+0x1c4>)
 8002328:	ed93 7a00 	vldr	s14, [r3]
 800232c:	eddf 6a59 	vldr	s13, [pc, #356]	; 8002494 <StartMotorServo+0x1f4>
 8002330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002334:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002498 <StartMotorServo+0x1f8>
 8002338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233c:	ee17 0a90 	vmov	r0, s15
 8002340:	f7fe f902 	bl	8000548 <__aeabi_f2d>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	ec43 2b10 	vmov	d0, r2, r3
 800234c:	f00c fb9c 	bl	800ea88 <sin>
 8002350:	ec53 2b10 	vmov	r2, r3, d0
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fc26 	bl	8000ba8 <__aeabi_d2f>
 800235c:	ee07 0a10 	vmov	s14, r0
 8002360:	edd7 7a03 	vldr	s15, [r7, #12]
 8002364:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002368:	4b4c      	ldr	r3, [pc, #304]	; (800249c <StartMotorServo+0x1fc>)
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <StartMotorServo+0x1fc>)
 8002374:	edc3 7a00 	vstr	s15, [r3]
			  pos_y += dist * (float)cos((orientation / 180) * PI);
 8002378:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <StartMotorServo+0x1c4>)
 800237a:	ed93 7a00 	vldr	s14, [r3]
 800237e:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002494 <StartMotorServo+0x1f4>
 8002382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002386:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002498 <StartMotorServo+0x1f8>
 800238a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800238e:	ee17 0a90 	vmov	r0, s15
 8002392:	f7fe f8d9 	bl	8000548 <__aeabi_f2d>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	ec43 2b10 	vmov	d0, r2, r3
 800239e:	f00c fb1f 	bl	800e9e0 <cos>
 80023a2:	ec53 2b10 	vmov	r2, r3, d0
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	f7fe fbfd 	bl	8000ba8 <__aeabi_d2f>
 80023ae:	ee07 0a10 	vmov	s14, r0
 80023b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80023b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ba:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <StartMotorServo+0x200>)
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c4:	4b36      	ldr	r3, [pc, #216]	; (80024a0 <StartMotorServo+0x200>)
 80023c6:	edc3 7a00 	vstr	s15, [r3]
 80023ca:	e025      	b.n	8002418 <StartMotorServo+0x178>
		  }
		  else {
			  if (us_distchange_x != 0) {		// When the command is turn and there's US course correction
 80023cc:	4b35      	ldr	r3, [pc, #212]	; (80024a4 <StartMotorServo+0x204>)
 80023ce:	edd3 7a00 	vldr	s15, [r3]
 80023d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023da:	d00a      	beq.n	80023f2 <StartMotorServo+0x152>
				  pos_x += us_distchange_x;
 80023dc:	4b2f      	ldr	r3, [pc, #188]	; (800249c <StartMotorServo+0x1fc>)
 80023de:	ed93 7a00 	vldr	s14, [r3]
 80023e2:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <StartMotorServo+0x204>)
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <StartMotorServo+0x1fc>)
 80023ee:	edc3 7a00 	vstr	s15, [r3]
			  }
			  if (us_distchange_y != 0) {
 80023f2:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <StartMotorServo+0x208>)
 80023f4:	edd3 7a00 	vldr	s15, [r3]
 80023f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002400:	d00a      	beq.n	8002418 <StartMotorServo+0x178>
				  pos_y += us_distchange_y;
 8002402:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <StartMotorServo+0x200>)
 8002404:	ed93 7a00 	vldr	s14, [r3]
 8002408:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <StartMotorServo+0x208>)
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <StartMotorServo+0x200>)
 8002414:	edc3 7a00 	vstr	s15, [r3]
			  }
		  }
		  // Reset us_distchange after each instruction run
		  us_distchange_x = 0;
 8002418:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <StartMotorServo+0x204>)
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
		  us_distchange_y = 0;
 8002420:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <StartMotorServo+0x208>)
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

		  cpltErr.pos_x = (int16_t)pos_x;
 8002428:	4b1c      	ldr	r3, [pc, #112]	; (800249c <StartMotorServo+0x1fc>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002432:	ee17 3a90 	vmov	r3, s15
 8002436:	b21a      	sxth	r2, r3
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <StartMotorServo+0x1ec>)
 800243a:	805a      	strh	r2, [r3, #2]
		  cpltErr.pos_y = (int16_t)pos_y;
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <StartMotorServo+0x200>)
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002446:	ee17 3a90 	vmov	r3, s15
 800244a:	b21a      	sxth	r2, r3
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <StartMotorServo+0x1ec>)
 800244e:	809a      	strh	r2, [r3, #4]
	  OLED_Refresh_Gram();
	  sprintf(oledbuf, "Ori = %5.1f", orientation);
	  OLED_ShowString(10, 45, &oledbuf[0]);
	  OLED_Refresh_Gram();
	  */
	  osDelay(500);		// Make sure to give time for UART task to transmit instructions
 8002450:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002454:	f006 fe66 	bl	8009124 <osDelay>
 8002458:	e73b      	b.n	80022d2 <StartMotorServo+0x32>
			  continue;
 800245a:	bf00      	nop
	  if ((cpltErr.id == curInst.id) && (!cpltErr.finished)) {	// If the current instruction is the next one to be executed
 800245c:	e739      	b.n	80022d2 <StartMotorServo+0x32>
 800245e:	bf00      	nop
 8002460:	20000438 	.word	0x20000438
 8002464:	2000043c 	.word	0x2000043c
 8002468:	200004d8 	.word	0x200004d8
 800246c:	200004b8 	.word	0x200004b8
 8002470:	20000498 	.word	0x20000498
 8002474:	20000490 	.word	0x20000490
 8002478:	20000488 	.word	0x20000488
 800247c:	20000308 	.word	0x20000308
 8002480:	200002c0 	.word	0x200002c0
 8002484:	20000398 	.word	0x20000398
 8002488:	20000278 	.word	0x20000278
 800248c:	20000480 	.word	0x20000480
 8002490:	2000047c 	.word	0x2000047c
 8002494:	43340000 	.word	0x43340000
 8002498:	40490fdb 	.word	0x40490fdb
 800249c:	20000440 	.word	0x20000440
 80024a0:	20000444 	.word	0x20000444
 80024a4:	20000448 	.word	0x20000448
 80024a8:	2000044c 	.word	0x2000044c

080024ac <StartIMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMU */
void StartIMU(void *argument)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMU */
	uint32_t ori_lastSampleTime = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  orientation = calcOri(&ori_lastSampleTime, orientation);
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <StartIMU+0x3c>)
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	eeb0 0a67 	vmov.f32	s0, s15
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f8da 	bl	8001680 <calcOri>
 80024cc:	eef0 7a40 	vmov.f32	s15, s0
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <StartIMU+0x3c>)
 80024d2:	edc3 7a00 	vstr	s15, [r3]
	  /*OLED_Clear();
	  sprintf(oledbuf, "Ori = %5.1f", orientation);
	  OLED_ShowString(10, 45, &oledbuf[0]);
	  OLED_Refresh_Gram();*/
	  if (cpltErr.finished) {
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <StartIMU+0x40>)
 80024d8:	799b      	ldrb	r3, [r3, #6]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0ec      	beq.n	80024b8 <StartIMU+0xc>
		  osDelay(1);
 80024de:	2001      	movs	r0, #1
 80024e0:	f006 fe20 	bl	8009124 <osDelay>
	  orientation = calcOri(&ori_lastSampleTime, orientation);
 80024e4:	e7e8      	b.n	80024b8 <StartIMU+0xc>
 80024e6:	bf00      	nop
 80024e8:	2000043c 	.word	0x2000043c
 80024ec:	20000480 	.word	0x20000480

080024f0 <StartUS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUS */
void StartUS(void *argument)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUS */
	HAL_TIM_Base_Start(&htim6);
 80024f8:	480f      	ldr	r0, [pc, #60]	; (8002538 <StartUS+0x48>)
 80024fa:	f003 ff75 	bl	80063e8 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80024fe:	2100      	movs	r1, #0
 8002500:	480e      	ldr	r0, [pc, #56]	; (800253c <StartUS+0x4c>)
 8002502:	f004 f955 	bl	80067b0 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8002506:	2200      	movs	r2, #0
 8002508:	2110      	movs	r1, #16
 800250a:	480d      	ldr	r0, [pc, #52]	; (8002540 <StartUS+0x50>)
 800250c:	f002 faec 	bl	8004ae8 <HAL_GPIO_WritePin>
	  osDelay(50);
 8002510:	2032      	movs	r0, #50	; 0x32
 8002512:	f006 fe07 	bl	8009124 <osDelay>
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_SET);
 8002516:	2201      	movs	r2, #1
 8002518:	2110      	movs	r1, #16
 800251a:	4809      	ldr	r0, [pc, #36]	; (8002540 <StartUS+0x50>)
 800251c:	f002 fae4 	bl	8004ae8 <HAL_GPIO_WritePin>
	  Delay_us(10);
 8002520:	200a      	movs	r0, #10
 8002522:	f7ff fe9b 	bl	800225c <Delay_us>
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	2110      	movs	r1, #16
 800252a:	4805      	ldr	r0, [pc, #20]	; (8002540 <StartUS+0x50>)
 800252c:	f002 fadc 	bl	8004ae8 <HAL_GPIO_WritePin>
	  osDelay(50);
 8002530:	2032      	movs	r0, #50	; 0x32
 8002532:	f006 fdf7 	bl	8009124 <osDelay>
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8002536:	e7e6      	b.n	8002506 <StartUS+0x16>
 8002538:	20000350 	.word	0x20000350
 800253c:	20000278 	.word	0x20000278
 8002540:	40020400 	.word	0x40020400

08002544 <StartUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART */
void StartUART(void *argument)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART */
	comm_init(&huart3, &curInst, &cpltErr);
 800254c:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <StartUART+0x60>)
 800254e:	4916      	ldr	r1, [pc, #88]	; (80025a8 <StartUART+0x64>)
 8002550:	4816      	ldr	r0, [pc, #88]	; (80025ac <StartUART+0x68>)
 8002552:	f7fe fcf7 	bl	8000f44 <comm_init>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) buf, UART_PACKET_SIZE);
 8002556:	2205      	movs	r2, #5
 8002558:	4915      	ldr	r1, [pc, #84]	; (80025b0 <StartUART+0x6c>)
 800255a:	4814      	ldr	r0, [pc, #80]	; (80025ac <StartUART+0x68>)
 800255c:	f005 fd39 	bl	8007fd2 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
	  // Initiate new task
	  if ((curInst.id == cpltErr.id + 1) && (cpltErr.finished)) {	// If a new instruction has been received but has not been processed
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <StartUART+0x64>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <StartUART+0x60>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	3301      	adds	r3, #1
 800256c:	429a      	cmp	r2, r3
 800256e:	d108      	bne.n	8002582 <StartUART+0x3e>
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <StartUART+0x60>)
 8002572:	799b      	ldrb	r3, [r3, #6]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <StartUART+0x3e>
		  if (!newCpltErr(curInst.id)) {
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <StartUART+0x64>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fe0f 	bl	80011a0 <newCpltErr>

		  }
	  }
	  // Send results
	  if ((curInst.id == cpltErr.id) && (cpltErr.finished)) {
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <StartUART+0x64>)
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <StartUART+0x60>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d105      	bne.n	800259a <StartUART+0x56>
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <StartUART+0x60>)
 8002590:	799b      	ldrb	r3, [r3, #6]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <StartUART+0x56>
		  if (uart_send() == HAL_OK) {
 8002596:	f7fe fd1b 	bl	8000fd0 <uart_send>
			  //HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
		  }
	  }
	  osDelay(1000);
 800259a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800259e:	f006 fdc1 	bl	8009124 <osDelay>
	  if ((curInst.id == cpltErr.id + 1) && (cpltErr.finished)) {	// If a new instruction has been received but has not been processed
 80025a2:	e7dd      	b.n	8002560 <StartUART+0x1c>
 80025a4:	20000480 	.word	0x20000480
 80025a8:	2000047c 	.word	0x2000047c
 80025ac:	200003e0 	.word	0x200003e0
 80025b0:	20000464 	.word	0x20000464

080025b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b8:	b672      	cpsid	i
}
 80025ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025bc:	e7fe      	b.n	80025bc <Error_Handler+0x8>
	...

080025c0 <mtr_init>:

/* All functions */

void mtr_init(TIM_HandleTypeDef* pwm_htimPtr, TIM_HandleTypeDef* encodeA_htimPtr, TIM_HandleTypeDef* encodeB_htimPtr,
		MotorData* mtrA, MotorData* mtrB, MotorPIDData* mtrAPID, MotorPIDData* mtrBPID, MotorServoStatus* backupObj,
		float* orientation, osSemaphoreId_t* oriSemHandlePtr) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]

	motorA = mtrA;
 80025ce:	4a2b      	ldr	r2, [pc, #172]	; (800267c <mtr_init+0xbc>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6013      	str	r3, [r2, #0]
	motorB = mtrB;
 80025d4:	4a2a      	ldr	r2, [pc, #168]	; (8002680 <mtr_init+0xc0>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	6013      	str	r3, [r2, #0]
	motorA->suspend = 0;
 80025da:	4b28      	ldr	r3, [pc, #160]	; (800267c <mtr_init+0xbc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
	motorA->suspend = 0;
 80025e2:	4b26      	ldr	r3, [pc, #152]	; (800267c <mtr_init+0xbc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]

	motorAPID = mtrAPID;
 80025ea:	4a26      	ldr	r2, [pc, #152]	; (8002684 <mtr_init+0xc4>)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	6013      	str	r3, [r2, #0]
	motorBPID = mtrBPID;
 80025f0:	4a25      	ldr	r2, [pc, #148]	; (8002688 <mtr_init+0xc8>)
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	6013      	str	r3, [r2, #0]

	backup = backupObj;
 80025f6:	4a25      	ldr	r2, [pc, #148]	; (800268c <mtr_init+0xcc>)
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	6013      	str	r3, [r2, #0]
	backup_reset();
 80025fc:	f000 f854 	bl	80026a8 <backup_reset>

	ori = orientation;
 8002600:	4a23      	ldr	r2, [pc, #140]	; (8002690 <mtr_init+0xd0>)
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	6013      	str	r3, [r2, #0]
	ori_semaphoreHandlePtr = oriSemHandlePtr;
 8002606:	4a23      	ldr	r2, [pc, #140]	; (8002694 <mtr_init+0xd4>)
 8002608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260a:	6013      	str	r3, [r2, #0]

	htim8Ptr = pwm_htimPtr;
 800260c:	4a22      	ldr	r2, [pc, #136]	; (8002698 <mtr_init+0xd8>)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6013      	str	r3, [r2, #0]
	htim2Ptr = encodeA_htimPtr;
 8002612:	4a22      	ldr	r2, [pc, #136]	; (800269c <mtr_init+0xdc>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	6013      	str	r3, [r2, #0]
	htim3Ptr = encodeB_htimPtr;
 8002618:	4a21      	ldr	r2, [pc, #132]	; (80026a0 <mtr_init+0xe0>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim8Ptr, PWMA_TIM_CH);
 800261e:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <mtr_init+0xd8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f003 ffa1 	bl	800656c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim8Ptr, PWMB_TIM_CH);
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <mtr_init+0xd8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2104      	movs	r1, #4
 8002630:	4618      	mov	r0, r3
 8002632:	f003 ff9b 	bl	800656c <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start_IT(htim2Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <mtr_init+0xdc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	213c      	movs	r1, #60	; 0x3c
 800263c:	4618      	mov	r0, r3
 800263e:	f004 fa85 	bl	8006b4c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(htim3Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <mtr_init+0xe0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	213c      	movs	r1, #60	; 0x3c
 8002648:	4618      	mov	r0, r3
 800264a:	f004 fa7f 	bl	8006b4c <HAL_TIM_Encoder_Start_IT>

	mtrA_init(0, 0, 0, 0, 1);
 800264e:	2201      	movs	r2, #1
 8002650:	eddf 0a14 	vldr	s1, [pc, #80]	; 80026a4 <mtr_init+0xe4>
 8002654:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80026a4 <mtr_init+0xe4>
 8002658:	2100      	movs	r1, #0
 800265a:	2000      	movs	r0, #0
 800265c:	f000 f842 	bl	80026e4 <mtrA_init>
	mtrB_init(0, 0, 0, 0, 1);
 8002660:	2201      	movs	r2, #1
 8002662:	eddf 0a10 	vldr	s1, [pc, #64]	; 80026a4 <mtr_init+0xe4>
 8002666:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80026a4 <mtr_init+0xe4>
 800266a:	2100      	movs	r1, #0
 800266c:	2000      	movs	r0, #0
 800266e:	f000 f89f 	bl	80027b0 <mtrB_init>
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200004e4 	.word	0x200004e4
 8002680:	200004e8 	.word	0x200004e8
 8002684:	200004ec 	.word	0x200004ec
 8002688:	200004f0 	.word	0x200004f0
 800268c:	200004f4 	.word	0x200004f4
 8002690:	200004f8 	.word	0x200004f8
 8002694:	20000508 	.word	0x20000508
 8002698:	200004fc 	.word	0x200004fc
 800269c:	20000500 	.word	0x20000500
 80026a0:	20000504 	.word	0x20000504
 80026a4:	00000000 	.word	0x00000000

080026a8 <backup_reset>:

void backup_reset() {
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
	backup->servoDir = STRAIGHT;
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <backup_reset+0x38>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
	backup->mtrADir = DIR_FWD;
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <backup_reset+0x38>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2201      	movs	r2, #1
 80026ba:	705a      	strb	r2, [r3, #1]
	backup->mtrAPWM = 0;
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <backup_reset+0x38>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2200      	movs	r2, #0
 80026c2:	605a      	str	r2, [r3, #4]
	backup->mtrBDir = DIR_FWD;
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <backup_reset+0x38>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2201      	movs	r2, #1
 80026ca:	709a      	strb	r2, [r3, #2]
	backup->mtrBPWM = 0;
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <backup_reset+0x38>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	200004f4 	.word	0x200004f4

080026e4 <mtrA_init>:

void mtrA_init(int16_t target, int16_t Kp, float Kd, float Ki, uint8_t reset_timer) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80026f0:	edc7 0a01 	vstr	s1, [r7, #4]
 80026f4:	81fb      	strh	r3, [r7, #14]
 80026f6:	460b      	mov	r3, r1
 80026f8:	81bb      	strh	r3, [r7, #12]
 80026fa:	4613      	mov	r3, r2
 80026fc:	70fb      	strb	r3, [r7, #3]

	if (reset_timer)
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d004      	beq.n	800270e <mtrA_init+0x2a>
		__HAL_TIM_SET_COUNTER(htim2Ptr, 0);
 8002704:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <mtrA_init+0xc0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	625a      	str	r2, [r3, #36]	; 0x24

	motorA->dir = DIR_FWD;
 800270e:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <mtrA_init+0xc4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	705a      	strb	r2, [r3, #1]
	motorA->pwmVal = 0;
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <mtrA_init+0xc4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2200      	movs	r2, #0
 800271c:	605a      	str	r2, [r3, #4]

	motorAPID->count = -(int16_t)__HAL_TIM_GET_COUNTER(htim2Ptr);       		// Counter (signed value)
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <mtrA_init+0xc0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	b29b      	uxth	r3, r3
 8002728:	425b      	negs	r3, r3
 800272a:	b29a      	uxth	r2, r3
 800272c:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <mtrA_init+0xc8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	b212      	sxth	r2, r2
 8002732:	801a      	strh	r2, [r3, #0]
	motorAPID->target = target;
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <mtrA_init+0xc8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	89fa      	ldrh	r2, [r7, #14]
 800273a:	805a      	strh	r2, [r3, #2]
	motorAPID->error = motorAPID->target - motorAPID->count;
 800273c:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <mtrA_init+0xc8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002744:	b29a      	uxth	r2, r3
 8002746:	4b19      	ldr	r3, [pc, #100]	; (80027ac <mtrA_init+0xc8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800274e:	b29b      	uxth	r3, r3
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	b29a      	uxth	r2, r3
 8002754:	4b15      	ldr	r3, [pc, #84]	; (80027ac <mtrA_init+0xc8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	b212      	sxth	r2, r2
 800275a:	809a      	strh	r2, [r3, #4]
	motorAPID->error_area = 0;  		// area under error - to calculate I for PI implementation
 800275c:	4b13      	ldr	r3, [pc, #76]	; (80027ac <mtrA_init+0xc8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
	motorAPID->error_old = 0; 			// to calculate D for PID control
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <mtrA_init+0xc8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2200      	movs	r2, #0
 800276a:	60da      	str	r2, [r3, #12]
	motorAPID->millisOld = HAL_GetTick();			// to calculate I and D for PID control
 800276c:	f001 fe4c 	bl	8004408 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <mtrA_init+0xc8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	611a      	str	r2, [r3, #16]
	motorAPID->Kp = Kp;
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <mtrA_init+0xc8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002780:	ee07 2a90 	vmov	s15, r2
 8002784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002788:	edc3 7a05 	vstr	s15, [r3, #20]
	motorAPID->Kd = Kd;
 800278c:	4b07      	ldr	r3, [pc, #28]	; (80027ac <mtrA_init+0xc8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	619a      	str	r2, [r3, #24]
	motorAPID->Ki = Ki;
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <mtrA_init+0xc8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	61da      	str	r2, [r3, #28]
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000500 	.word	0x20000500
 80027a8:	200004e4 	.word	0x200004e4
 80027ac:	200004ec 	.word	0x200004ec

080027b0 <mtrB_init>:

void mtrB_init(int16_t target, int16_t Kp, float Kd, float Ki, uint8_t reset_timer) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80027bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80027c0:	81fb      	strh	r3, [r7, #14]
 80027c2:	460b      	mov	r3, r1
 80027c4:	81bb      	strh	r3, [r7, #12]
 80027c6:	4613      	mov	r3, r2
 80027c8:	70fb      	strb	r3, [r7, #3]

	if (reset_timer)
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <mtrB_init+0x2a>
		__HAL_TIM_SET_COUNTER(htim3Ptr, 0);
 80027d0:	4b26      	ldr	r3, [pc, #152]	; (800286c <mtrB_init+0xbc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

	motorB->dir = DIR_FWD;
 80027da:	4b25      	ldr	r3, [pc, #148]	; (8002870 <mtrB_init+0xc0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2201      	movs	r2, #1
 80027e0:	705a      	strb	r2, [r3, #1]
	motorB->pwmVal = 0;
 80027e2:	4b23      	ldr	r3, [pc, #140]	; (8002870 <mtrB_init+0xc0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2200      	movs	r2, #0
 80027e8:	605a      	str	r2, [r3, #4]

	motorBPID->count = (int16_t)__HAL_TIM_GET_COUNTER(htim3Ptr);       		// Counter (signed value)
 80027ea:	4b20      	ldr	r3, [pc, #128]	; (800286c <mtrB_init+0xbc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <mtrB_init+0xc4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b212      	sxth	r2, r2
 80027f8:	801a      	strh	r2, [r3, #0]
	motorBPID->target = target;
 80027fa:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <mtrB_init+0xc4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	89fa      	ldrh	r2, [r7, #14]
 8002800:	805a      	strh	r2, [r3, #2]
	motorBPID->error = motorBPID->target - motorBPID->count;
 8002802:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <mtrB_init+0xc4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800280a:	b29a      	uxth	r2, r3
 800280c:	4b19      	ldr	r3, [pc, #100]	; (8002874 <mtrB_init+0xc4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002814:	b29b      	uxth	r3, r3
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	b29a      	uxth	r2, r3
 800281a:	4b16      	ldr	r3, [pc, #88]	; (8002874 <mtrB_init+0xc4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	b212      	sxth	r2, r2
 8002820:	809a      	strh	r2, [r3, #4]
	motorBPID->error_area = 0;  		// area under error - to calculate I for PI implementation
 8002822:	4b14      	ldr	r3, [pc, #80]	; (8002874 <mtrB_init+0xc4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
	motorBPID->error_old = 0; 			// to calculate D for PID control
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <mtrB_init+0xc4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
	motorBPID->millisOld = HAL_GetTick();			// to calculate I and D for PID control
 8002832:	f001 fde9 	bl	8004408 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <mtrB_init+0xc4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	611a      	str	r2, [r3, #16]
	motorBPID->Kp = Kp;
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <mtrB_init+0xc4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002846:	ee07 2a90 	vmov	s15, r2
 800284a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800284e:	edc3 7a05 	vstr	s15, [r3, #20]
	motorBPID->Kd = Kd;
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <mtrB_init+0xc4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	619a      	str	r2, [r3, #24]
	motorBPID->Ki = Ki;
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <mtrB_init+0xc4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	61da      	str	r2, [r3, #28]
}
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000504 	.word	0x20000504
 8002870:	200004e8 	.word	0x200004e8
 8002874:	200004f0 	.word	0x200004f0

08002878 <mtrA_mov>:

void mtrA_mov(uint8_t direction, uint16_t speed) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	460a      	mov	r2, r1
 8002882:	71fb      	strb	r3, [r7, #7]
 8002884:	4613      	mov	r3, r2
 8002886:	80bb      	strh	r3, [r7, #4]

	// Backward
	if (direction == DIR_BCK) {
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10a      	bne.n	80028a4 <mtrA_mov+0x2c>
		MOTOR_AIN1_Clr();
 800288e:	2200      	movs	r2, #0
 8002890:	2108      	movs	r1, #8
 8002892:	4811      	ldr	r0, [pc, #68]	; (80028d8 <mtrA_mov+0x60>)
 8002894:	f002 f928 	bl	8004ae8 <HAL_GPIO_WritePin>
		MOTOR_AIN2_Set();
 8002898:	2201      	movs	r2, #1
 800289a:	2104      	movs	r1, #4
 800289c:	480e      	ldr	r0, [pc, #56]	; (80028d8 <mtrA_mov+0x60>)
 800289e:	f002 f923 	bl	8004ae8 <HAL_GPIO_WritePin>
 80028a2:	e009      	b.n	80028b8 <mtrA_mov+0x40>
	}
	// Forward
	else {
		MOTOR_AIN1_Set();
 80028a4:	2201      	movs	r2, #1
 80028a6:	2108      	movs	r1, #8
 80028a8:	480b      	ldr	r0, [pc, #44]	; (80028d8 <mtrA_mov+0x60>)
 80028aa:	f002 f91d 	bl	8004ae8 <HAL_GPIO_WritePin>
		MOTOR_AIN2_Clr();
 80028ae:	2200      	movs	r2, #0
 80028b0:	2104      	movs	r1, #4
 80028b2:	4809      	ldr	r0, [pc, #36]	; (80028d8 <mtrA_mov+0x60>)
 80028b4:	f002 f918 	bl	8004ae8 <HAL_GPIO_WritePin>
	}

	// Set speed
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 80028b8:	88bb      	ldrh	r3, [r7, #4]
 80028ba:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80028be:	d302      	bcc.n	80028c6 <mtrA_mov+0x4e>
 80028c0:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80028c4:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim8Ptr, PWMA_TIM_CH, speed);
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <mtrA_mov+0x64>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	88ba      	ldrh	r2, [r7, #4]
 80028ce:	635a      	str	r2, [r3, #52]	; 0x34
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40020000 	.word	0x40020000
 80028dc:	200004fc 	.word	0x200004fc

080028e0 <mtrB_mov>:

void mtrB_mov(uint8_t direction, uint16_t speed) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	460a      	mov	r2, r1
 80028ea:	71fb      	strb	r3, [r7, #7]
 80028ec:	4613      	mov	r3, r2
 80028ee:	80bb      	strh	r3, [r7, #4]

	// Backward
	if (direction == DIR_BCK) {
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <mtrB_mov+0x2c>
		MOTOR_BIN1_Clr();
 80028f6:	2200      	movs	r2, #0
 80028f8:	2110      	movs	r1, #16
 80028fa:	4811      	ldr	r0, [pc, #68]	; (8002940 <mtrB_mov+0x60>)
 80028fc:	f002 f8f4 	bl	8004ae8 <HAL_GPIO_WritePin>
		MOTOR_BIN2_Set();
 8002900:	2201      	movs	r2, #1
 8002902:	2120      	movs	r1, #32
 8002904:	480e      	ldr	r0, [pc, #56]	; (8002940 <mtrB_mov+0x60>)
 8002906:	f002 f8ef 	bl	8004ae8 <HAL_GPIO_WritePin>
 800290a:	e009      	b.n	8002920 <mtrB_mov+0x40>
	}
	// Forward
	else {
		MOTOR_BIN1_Set();
 800290c:	2201      	movs	r2, #1
 800290e:	2110      	movs	r1, #16
 8002910:	480b      	ldr	r0, [pc, #44]	; (8002940 <mtrB_mov+0x60>)
 8002912:	f002 f8e9 	bl	8004ae8 <HAL_GPIO_WritePin>
		MOTOR_BIN2_Clr();
 8002916:	2200      	movs	r2, #0
 8002918:	2120      	movs	r1, #32
 800291a:	4809      	ldr	r0, [pc, #36]	; (8002940 <mtrB_mov+0x60>)
 800291c:	f002 f8e4 	bl	8004ae8 <HAL_GPIO_WritePin>
	}

	// Set speed
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 8002920:	88bb      	ldrh	r3, [r7, #4]
 8002922:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8002926:	d302      	bcc.n	800292e <mtrB_mov+0x4e>
 8002928:	f641 431f 	movw	r3, #7199	; 0x1c1f
 800292c:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim8Ptr, PWMB_TIM_CH, speed);
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <mtrB_mov+0x64>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	88ba      	ldrh	r2, [r7, #4]
 8002936:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40020000 	.word	0x40020000
 8002944:	200004fc 	.word	0x200004fc

08002948 <mtr_stop>:

/* Set params and stop both motors */
void mtr_stop() {
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
	motorA->dir = DIR_FWD;
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <mtr_stop+0x44>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	705a      	strb	r2, [r3, #1]
	motorA->pwmVal = 0;
 8002954:	4b0d      	ldr	r3, [pc, #52]	; (800298c <mtr_stop+0x44>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2200      	movs	r2, #0
 800295a:	605a      	str	r2, [r3, #4]
	motorB->dir = DIR_FWD;
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <mtr_stop+0x48>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2201      	movs	r2, #1
 8002962:	705a      	strb	r2, [r3, #1]
	motorB->pwmVal = 0;
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <mtr_stop+0x48>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2200      	movs	r2, #0
 800296a:	605a      	str	r2, [r3, #4]
	mtrA_mov(DIR_FWD, 0);
 800296c:	2100      	movs	r1, #0
 800296e:	2001      	movs	r0, #1
 8002970:	f7ff ff82 	bl	8002878 <mtrA_mov>
	mtrB_mov(DIR_FWD, 0);
 8002974:	2100      	movs	r1, #0
 8002976:	2001      	movs	r0, #1
 8002978:	f7ff ffb2 	bl	80028e0 <mtrB_mov>
	turnServo(STRAIGHT);
 800297c:	2001      	movs	r0, #1
 800297e:	f001 f8f3 	bl	8003b68 <turnServo>
	osDelay(100);
 8002982:	2064      	movs	r0, #100	; 0x64
 8002984:	f006 fbce 	bl	8009124 <osDelay>
}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}
 800298c:	200004e4 	.word	0x200004e4
 8002990:	200004e8 	.word	0x200004e8

08002994 <mtr_mov>:

void mtr_mov(MotorData* motor) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	if (motor->suspend > 0) {
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <mtr_mov+0x1a>
		mtr_stop();
 80029a4:	f7ff ffd0 	bl	8002948 <mtr_stop>
		mtr_continue();
 80029a8:	f000 f890 	bl	8002acc <mtr_continue>
		return;
 80029ac:	e01c      	b.n	80029e8 <mtr_mov+0x54>
	}
	if (motor == motorA)  {
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <mtr_mov+0x5c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d109      	bne.n	80029cc <mtr_mov+0x38>
		mtrA_mov(motor->dir, motor->pwmVal);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	785a      	ldrb	r2, [r3, #1]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	4619      	mov	r1, r3
 80029c4:	4610      	mov	r0, r2
 80029c6:	f7ff ff57 	bl	8002878 <mtrA_mov>
 80029ca:	e00d      	b.n	80029e8 <mtr_mov+0x54>
	}
	else if (motor == motorB) {
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <mtr_mov+0x60>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d108      	bne.n	80029e8 <mtr_mov+0x54>
		mtrB_mov(motor->dir, motor->pwmVal);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	785a      	ldrb	r2, [r3, #1]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4619      	mov	r1, r3
 80029e2:	4610      	mov	r0, r2
 80029e4:	f7ff ff7c 	bl	80028e0 <mtrB_mov>
	}
}
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200004e4 	.word	0x200004e4
 80029f4:	200004e8 	.word	0x200004e8

080029f8 <mtr_SetParamAndMove>:

void mtr_SetParamAndMove(MotorData* motor, uint8_t param_dir, uint32_t param_pwmVal) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	460b      	mov	r3, r1
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	72fb      	strb	r3, [r7, #11]
	motor->dir = param_dir;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	7afa      	ldrb	r2, [r7, #11]
 8002a0a:	705a      	strb	r2, [r3, #1]
	motor->pwmVal = param_pwmVal;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	605a      	str	r2, [r3, #4]
	mtr_mov(motor);
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff ffbe 	bl	8002994 <mtr_mov>
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <mtr_suspend>:

void mtr_suspend(uint8_t mode) {
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
	if (mode > 3) return;
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d83e      	bhi.n	8002aae <mtr_suspend+0x8e>
	if ((motorA->suspend != SUS_OFF) || (motorB->suspend != SUS_OFF)) return;	// Suspend is in effect / being resolved
 8002a30:	4b22      	ldr	r3, [pc, #136]	; (8002abc <mtr_suspend+0x9c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d13b      	bne.n	8002ab2 <mtr_suspend+0x92>
 8002a3a:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <mtr_suspend+0xa0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d136      	bne.n	8002ab2 <mtr_suspend+0x92>
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
 8002a44:	2200      	movs	r2, #0
 8002a46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a4a:	481e      	ldr	r0, [pc, #120]	; (8002ac4 <mtr_suspend+0xa4>)
 8002a4c:	f002 f84c 	bl	8004ae8 <HAL_GPIO_WritePin>
	motorA->suspend = mode;
 8002a50:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <mtr_suspend+0x9c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	79fa      	ldrb	r2, [r7, #7]
 8002a56:	701a      	strb	r2, [r3, #0]
	motorB->suspend = mode;
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <mtr_suspend+0xa0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	79fa      	ldrb	r2, [r7, #7]
 8002a5e:	701a      	strb	r2, [r3, #0]
	if ((mode == SUS_BACK) || (mode == SUS_STOP)) {
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d002      	beq.n	8002a6c <mtr_suspend+0x4c>
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d11d      	bne.n	8002aa8 <mtr_suspend+0x88>
		backup->servoDir = getServoDir();
 8002a6c:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <mtr_suspend+0xa8>)
 8002a6e:	681c      	ldr	r4, [r3, #0]
 8002a70:	f001 f892 	bl	8003b98 <getServoDir>
 8002a74:	4603      	mov	r3, r0
 8002a76:	7023      	strb	r3, [r4, #0]
		backup->mtrADir = motorA->dir;
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <mtr_suspend+0x9c>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <mtr_suspend+0xa8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	7852      	ldrb	r2, [r2, #1]
 8002a82:	705a      	strb	r2, [r3, #1]
		backup->mtrAPWM = motorA->pwmVal;
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <mtr_suspend+0x9c>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <mtr_suspend+0xa8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6852      	ldr	r2, [r2, #4]
 8002a8e:	605a      	str	r2, [r3, #4]
		backup->mtrBDir = motorB->dir;
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <mtr_suspend+0xa0>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <mtr_suspend+0xa8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	7852      	ldrb	r2, [r2, #1]
 8002a9a:	709a      	strb	r2, [r3, #2]
		backup->mtrBPWM = motorB->pwmVal;
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <mtr_suspend+0xa0>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <mtr_suspend+0xa8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6852      	ldr	r2, [r2, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
	}
	mtr_stop();
 8002aa8:	f7ff ff4e 	bl	8002948 <mtr_stop>
 8002aac:	e002      	b.n	8002ab4 <mtr_suspend+0x94>
	if (mode > 3) return;
 8002aae:	bf00      	nop
 8002ab0:	e000      	b.n	8002ab4 <mtr_suspend+0x94>
	if ((motorA->suspend != SUS_OFF) || (motorB->suspend != SUS_OFF)) return;	// Suspend is in effect / being resolved
 8002ab2:	bf00      	nop
}
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd90      	pop	{r4, r7, pc}
 8002aba:	bf00      	nop
 8002abc:	200004e4 	.word	0x200004e4
 8002ac0:	200004e8 	.word	0x200004e8
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	200004f4 	.word	0x200004f4

08002acc <mtr_continue>:

/*
 * Restore movement, is called in mtr_mov() if the suspend status is on
 */
void mtr_continue() {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
	if (!motorA->suspend) return;	// Not suspended or likely an error
 8002ad0:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <mtr_continue+0xc4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d058      	beq.n	8002b8c <mtr_continue+0xc0>

	if ((motorA->suspend == SUS_BACK) || (motorA->suspend == SUS_STOPPID)) {	// Needs SOSBack
 8002ada:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <mtr_continue+0xc4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d004      	beq.n	8002aee <mtr_continue+0x22>
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <mtr_continue+0xc4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d101      	bne.n	8002af2 <mtr_continue+0x26>
		mtr_SOSBack();
 8002aee:	f000 f857 	bl	8002ba0 <mtr_SOSBack>
		//HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
	}
	if (motorA->suspend == SUS_STOPPID) {	// Stop PID, do not restore movement
 8002af2:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <mtr_continue+0xc4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d102      	bne.n	8002b02 <mtr_continue+0x36>
		stopPID();
 8002afc:	f000 f996 	bl	8002e2c <stopPID>
 8002b00:	e033      	b.n	8002b6a <mtr_continue+0x9e>
	}
	else {									// Restore movement, in case of SUS_BACK
		turnServo(backup->servoDir);
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <mtr_continue+0xc8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f001 f82d 	bl	8003b68 <turnServo>
		motorA->dir = backup->mtrADir;
 8002b0e:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <mtr_continue+0xc8>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <mtr_continue+0xc4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	7852      	ldrb	r2, [r2, #1]
 8002b18:	705a      	strb	r2, [r3, #1]
		motorA->pwmVal = backup->mtrAPWM;
 8002b1a:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <mtr_continue+0xc8>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <mtr_continue+0xc4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6852      	ldr	r2, [r2, #4]
 8002b24:	605a      	str	r2, [r3, #4]
		motorB->dir = backup->mtrBDir;
 8002b26:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <mtr_continue+0xc8>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <mtr_continue+0xcc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	7892      	ldrb	r2, [r2, #2]
 8002b30:	705a      	strb	r2, [r3, #1]
		motorB->pwmVal = backup->mtrBPWM;
 8002b32:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <mtr_continue+0xc8>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <mtr_continue+0xcc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6892      	ldr	r2, [r2, #8]
 8002b3c:	605a      	str	r2, [r3, #4]
		mtrA_mov(motorA->dir, motorA->pwmVal);
 8002b3e:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <mtr_continue+0xc4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	785a      	ldrb	r2, [r3, #1]
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <mtr_continue+0xc4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	f7ff fe92 	bl	8002878 <mtrA_mov>
		mtrB_mov(motorB->dir, motorB->pwmVal);
 8002b54:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <mtr_continue+0xcc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	785a      	ldrb	r2, [r3, #1]
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <mtr_continue+0xcc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f7ff febb 	bl	80028e0 <mtrB_mov>
	}
	backup_reset();
 8002b6a:	f7ff fd9d 	bl	80026a8 <backup_reset>
	motorA->suspend = 0;
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <mtr_continue+0xc4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
	motorB->suspend = 0;
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <mtr_continue+0xcc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_SET);
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b84:	4805      	ldr	r0, [pc, #20]	; (8002b9c <mtr_continue+0xd0>)
 8002b86:	f001 ffaf 	bl	8004ae8 <HAL_GPIO_WritePin>
 8002b8a:	e000      	b.n	8002b8e <mtr_continue+0xc2>
	if (!motorA->suspend) return;	// Not suspended or likely an error
 8002b8c:	bf00      	nop
}
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	200004e4 	.word	0x200004e4
 8002b94:	200004f4 	.word	0x200004f4
 8002b98:	200004e8 	.word	0x200004e8
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <mtr_SOSBack>:

/* Used in emergency cases when car is too close to obstacles only */
float mtr_SOSBack() {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
	mtrA_mov(DIR_BCK, 1800);
 8002ba4:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7ff fe65 	bl	8002878 <mtrA_mov>
	mtrB_mov(DIR_BCK, 1800);
 8002bae:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7ff fe94 	bl	80028e0 <mtrB_mov>
	osDelay(500);
 8002bb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bbc:	f006 fab2 	bl	8009124 <osDelay>
	mtr_stop();
 8002bc0:	f7ff fec2 	bl	8002948 <mtr_stop>
	return SOSBACK_DIST_CNT / CNT_PER_CM;
 8002bc4:	4b02      	ldr	r3, [pc, #8]	; (8002bd0 <mtr_SOSBack+0x30>)
 8002bc6:	ee07 3a90 	vmov	s15, r3
}
 8002bca:	eeb0 0a67 	vmov.f32	s0, s15
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	c12eb4b4 	.word	0xc12eb4b4

08002bd4 <mtr_mov_cnt>:

void mtr_mov_cnt(int target_A, int target_B) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
	mtrA_init((int16_t)target_A, 1.2, 0.05, 0.0001, 1);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	b21b      	sxth	r3, r3
 8002be2:	2201      	movs	r2, #1
 8002be4:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002c74 <mtr_mov_cnt+0xa0>
 8002be8:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8002c78 <mtr_mov_cnt+0xa4>
 8002bec:	2101      	movs	r1, #1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fd78 	bl	80026e4 <mtrA_init>
	mtrB_init((int16_t)target_B, 1.2, 0.05, 0.0001, 1);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b21b      	sxth	r3, r3
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8002c74 <mtr_mov_cnt+0xa0>
 8002bfe:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8002c78 <mtr_mov_cnt+0xa4>
 8002c02:	2101      	movs	r1, #1
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fdd3 	bl	80027b0 <mtrB_init>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 8002c0a:	e019      	b.n	8002c40 <mtr_mov_cnt+0x6c>
		PID_Control(motorA, motorAPID);
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <mtr_mov_cnt+0xa8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <mtr_mov_cnt+0xac>)
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f85c 	bl	8002cd4 <PID_Control>
		PID_Control(motorB, motorBPID);
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <mtr_mov_cnt+0xb0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a19      	ldr	r2, [pc, #100]	; (8002c88 <mtr_mov_cnt+0xb4>)
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f854 	bl	8002cd4 <PID_Control>
		mtr_mov(motorA);
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <mtr_mov_cnt+0xa8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff feaf 	bl	8002994 <mtr_mov>
		mtr_mov(motorB);
 8002c36:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <mtr_mov_cnt+0xb0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff feaa 	bl	8002994 <mtr_mov>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <mtr_mov_cnt+0xac>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bfb8      	it	lt
 8002c4c:	425b      	neglt	r3, r3
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b32      	cmp	r3, #50	; 0x32
 8002c52:	d8db      	bhi.n	8002c0c <mtr_mov_cnt+0x38>
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <mtr_mov_cnt+0xb4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bfb8      	it	lt
 8002c60:	425b      	neglt	r3, r3
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b32      	cmp	r3, #50	; 0x32
 8002c66:	d8d1      	bhi.n	8002c0c <mtr_mov_cnt+0x38>
	}
	mtr_stop();
 8002c68:	f7ff fe6e 	bl	8002948 <mtr_stop>
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	38d1b717 	.word	0x38d1b717
 8002c78:	3d4ccccd 	.word	0x3d4ccccd
 8002c7c:	200004e4 	.word	0x200004e4
 8002c80:	200004ec 	.word	0x200004ec
 8002c84:	200004e8 	.word	0x200004e8
 8002c88:	200004f0 	.word	0x200004f0

08002c8c <mtr_mov_cm>:
	}
	mtr_stop();
}


void mtr_mov_cm(float cm_A, float cm_B) {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c96:	edc7 0a00 	vstr	s1, [r7]
	mtr_mov_cnt((int)(cm_A * CNT_PER_CM), (int)(cm_B * CNT_PER_CM));
 8002c9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c9e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002cd0 <mtr_mov_cm+0x44>
 8002ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ca6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002caa:	edd7 7a00 	vldr	s15, [r7]
 8002cae:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002cd0 <mtr_mov_cm+0x44>
 8002cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cba:	ee17 1a90 	vmov	r1, s15
 8002cbe:	ee16 0a90 	vmov	r0, s13
 8002cc2:	f7ff ff87 	bl	8002bd4 <mtr_mov_cnt>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	42928831 	.word	0x42928831

08002cd4 <PID_Control>:

void PID_Control(MotorData* motor, MotorPIDData* motorPID) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
	  //Control Loop
	if (abs(motorPID->error)>MAX_PID_ERR) { //more than 100  difference
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bfb8      	it	lt
 8002ce8:	425b      	neglt	r3, r3
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b32      	cmp	r3, #50	; 0x32
 8002cee:	f240 8092 	bls.w	8002e16 <PID_Control+0x142>
  	    motorPID->error = motorPID->target - motorPID->count;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	b21a      	sxth	r2, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	809a      	strh	r2, [r3, #4]

  	    if (motorPID->error > 0)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	dd03      	ble.n	8002d1e <PID_Control+0x4a>
        	motor->dir = DIR_FWD;	// Forward
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	705a      	strb	r2, [r3, #1]
 8002d1c:	e002      	b.n	8002d24 <PID_Control+0x50>
        else
        	motor->dir = DIR_BCK;	// Backward
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	705a      	strb	r2, [r3, #1]

        int32_t millisNow = HAL_GetTick();
 8002d24:	f001 fb70 	bl	8004408 <HAL_GetTick>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	617b      	str	r3, [r7, #20]
        int32_t dt = (millisNow - motorPID->millisOld); // time elapsed in millisecond
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	613b      	str	r3, [r7, #16]
        motorPID->millisOld = millisNow; // store the current time for next round
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	611a      	str	r2, [r3, #16]

        motorPID->error_area = motorPID->error_area + motorPID->error * dt; // area under error for Ki
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d46:	4619      	mov	r1, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	441a      	add	r2, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	609a      	str	r2, [r3, #8]

        int32_t error_change = motorPID->error - motorPID->error_old; // change in error
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	60fb      	str	r3, [r7, #12]
        motorPID->error_old = motorPID->error; //store the error for next round
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	60da      	str	r2, [r3, #12]
        float error_rate = (float)error_change / dt; // for Kd
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	ee07 3a90 	vmov	s15, r3
 8002d76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	ee07 3a90 	vmov	s15, r3
 8002d80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d88:	edc7 7a02 	vstr	s15, [r7, #8]

        motor->pwmVal = abs((int32_t)(motorPID->error * motorPID->Kp + motorPID->error_area * motorPID->Ki + error_rate * motorPID->Kd)) / 2;  // PID
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	ee07 3a90 	vmov	s15, r3
 8002dac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	edd3 6a06 	vldr	s13, [r3, #24]
 8002dc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dd4:	ee17 3a90 	vmov	r3, s15
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bfb8      	it	lt
 8002ddc:	425b      	neglt	r3, r3
 8002dde:	0fda      	lsrs	r2, r3, #31
 8002de0:	4413      	add	r3, r2
 8002de2:	105b      	asrs	r3, r3, #1
 8002de4:	461a      	mov	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	605a      	str	r2, [r3, #4]
        osDelay(10);
 8002dea:	200a      	movs	r0, #10
 8002dec:	f006 f99a 	bl	8009124 <osDelay>
        if (motor->pwmVal > MAX_SPEED)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8002df8:	d303      	bcc.n	8002e02 <PID_Control+0x12e>
        	motor->pwmVal = MAX_SPEED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002e00:	605a      	str	r2, [r3, #4]
        if (motor->pwmVal < MIN_SPEED)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002e0a:	d20a      	bcs.n	8002e22 <PID_Control+0x14e>
        	motor-> pwmVal = MIN_SPEED;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002e12:	605a      	str	r2, [r3, #4]
	} // if loop
	else {
		motor->dir = DIR_FWD;
		motor->pwmVal = 0;
	}
}
 8002e14:	e005      	b.n	8002e22 <PID_Control+0x14e>
		motor->dir = DIR_FWD;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	705a      	strb	r2, [r3, #1]
		motor->pwmVal = 0;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	605a      	str	r2, [r3, #4]
}
 8002e22:	bf00      	nop
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <stopPID>:

void stopPID() {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
	motorAPID->error = 0;
 8002e30:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <stopPID+0x60>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2200      	movs	r2, #0
 8002e36:	809a      	strh	r2, [r3, #4]
	motorBPID->error = 0;
 8002e38:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <stopPID+0x64>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	809a      	strh	r2, [r3, #4]
	motorAPID->target = motorAPID->count;
 8002e40:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <stopPID+0x60>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <stopPID+0x60>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e4c:	805a      	strh	r2, [r3, #2]
	motorBPID->target = motorBPID->count;
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <stopPID+0x64>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <stopPID+0x64>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e5a:	805a      	strh	r2, [r3, #2]
	mtr_stop();
 8002e5c:	f7ff fd74 	bl	8002948 <mtr_stop>
	// Also clear backup
	backup->mtrADir = DIR_FWD;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <stopPID+0x68>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2201      	movs	r2, #1
 8002e66:	705a      	strb	r2, [r3, #1]
	backup->mtrBDir = DIR_FWD;
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <stopPID+0x68>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	709a      	strb	r2, [r3, #2]
	backup->mtrAPWM = 0;
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <stopPID+0x68>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	605a      	str	r2, [r3, #4]
	backup->mtrBPWM = 0;
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <stopPID+0x68>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
	backup->servoDir = STRAIGHT;
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <stopPID+0x68>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	200004ec 	.word	0x200004ec
 8002e90:	200004f0 	.word	0x200004f0
 8002e94:	200004f4 	.word	0x200004f4

08002e98 <turn>:

void turn(float turning_angle) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (abs(turning_angle) < MAX_ORI_ERR)		// Too small, turn may not be accurate
 8002ea2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eaa:	ee17 3a90 	vmov	r3, s15
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	bfb8      	it	lt
 8002eb2:	425b      	neglt	r3, r3
 8002eb4:	ee07 3a90 	vmov	s15, r3
 8002eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ebc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec8:	f100 814a 	bmi.w	8003160 <turn+0x2c8>
		return;
	if ((turning_angle < 0) || (turning_angle >= 360))	// Invalid turning angle
 8002ecc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ed0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed8:	f100 8144 	bmi.w	8003164 <turn+0x2cc>
 8002edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ee0:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 800316c <turn+0x2d4>
 8002ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eec:	f280 813a 	bge.w	8003164 <turn+0x2cc>
		return;

	float target_ori = (*ori) + turning_angle;
 8002ef0:	4b9f      	ldr	r3, [pc, #636]	; (8003170 <turn+0x2d8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	edd3 7a00 	vldr	s15, [r3]
 8002ef8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	edc7 7a07 	vstr	s15, [r7, #28]
	while (target_ori >= 360) target_ori -= 360;
 8002f04:	e007      	b.n	8002f16 <turn+0x7e>
 8002f06:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f0a:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800316c <turn+0x2d4>
 8002f0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f12:	edc7 7a07 	vstr	s15, [r7, #28]
 8002f16:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f1a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800316c <turn+0x2d4>
 8002f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f26:	daee      	bge.n	8002f06 <turn+0x6e>
	while (target_ori < 0) target_ori += 360;
 8002f28:	e007      	b.n	8002f3a <turn+0xa2>
 8002f2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f2e:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800316c <turn+0x2d4>
 8002f32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f36:	edc7 7a07 	vstr	s15, [r7, #28]
 8002f3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f46:	d4f0      	bmi.n	8002f2a <turn+0x92>

	uint8_t near_0 = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	76fb      	strb	r3, [r7, #27]
	if ((target_ori < MAX_ORI_ERR) || (target_ori > 360 - MAX_ORI_ERR)) {
 8002f4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f50:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5c:	d408      	bmi.n	8002f70 <turn+0xd8>
 8002f5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f62:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8003174 <turn+0x2dc>
 8002f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6e:	dd01      	ble.n	8002f74 <turn+0xdc>
		near_0 = 1;
 8002f70:	2301      	movs	r3, #1
 8002f72:	76fb      	strb	r3, [r7, #27]
	}

	uint8_t mtr_dir = 1;	// 0: stop, 1: fwd, 2: bck
 8002f74:	2301      	movs	r3, #1
 8002f76:	76bb      	strb	r3, [r7, #26]

	while (mtr_dir) {
 8002f78:	e0eb      	b.n	8003152 <turn+0x2ba>
		if (turning_angle <= 180) {	// Turn left
 8002f7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f7e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003178 <turn+0x2e0>
 8002f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8a:	d82e      	bhi.n	8002fea <turn+0x152>
			if (mtr_dir == 1) {
 8002f8c:	7ebb      	ldrb	r3, [r7, #26]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d115      	bne.n	8002fbe <turn+0x126>
				turnServo(LEFT);
 8002f92:	2000      	movs	r0, #0
 8002f94:	f000 fde8 	bl	8003b68 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_FWD, 1500);
 8002f98:	4b78      	ldr	r3, [pc, #480]	; (800317c <turn+0x2e4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fd28 	bl	80029f8 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_FWD, 1500);
 8002fa8:	4b75      	ldr	r3, [pc, #468]	; (8003180 <turn+0x2e8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fd20 	bl	80029f8 <mtr_SetParamAndMove>
				mtr_dir = 2;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	76bb      	strb	r3, [r7, #26]
 8002fbc:	e043      	b.n	8003046 <turn+0x1ae>
			}
			else {
				turnServo(RIGHT);
 8002fbe:	2002      	movs	r0, #2
 8002fc0:	f000 fdd2 	bl	8003b68 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_BCK, 1500);
 8002fc4:	4b6d      	ldr	r3, [pc, #436]	; (800317c <turn+0x2e4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fd12 	bl	80029f8 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_BCK, 1500);
 8002fd4:	4b6a      	ldr	r3, [pc, #424]	; (8003180 <turn+0x2e8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fd0a 	bl	80029f8 <mtr_SetParamAndMove>
				mtr_dir = 1;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	76bb      	strb	r3, [r7, #26]
 8002fe8:	e02d      	b.n	8003046 <turn+0x1ae>
			}
		}
		else {						// Turn right
			if (mtr_dir == 1) {
 8002fea:	7ebb      	ldrb	r3, [r7, #26]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d115      	bne.n	800301c <turn+0x184>
				turnServo(RIGHT);
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	f000 fdb9 	bl	8003b68 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_FWD, 1500);
 8002ff6:	4b61      	ldr	r3, [pc, #388]	; (800317c <turn+0x2e4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002ffe:	2101      	movs	r1, #1
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fcf9 	bl	80029f8 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_FWD, 1500);
 8003006:	4b5e      	ldr	r3, [pc, #376]	; (8003180 <turn+0x2e8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800300e:	2101      	movs	r1, #1
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fcf1 	bl	80029f8 <mtr_SetParamAndMove>
				mtr_dir = 2;
 8003016:	2302      	movs	r3, #2
 8003018:	76bb      	strb	r3, [r7, #26]
 800301a:	e014      	b.n	8003046 <turn+0x1ae>
			}
			else {
				turnServo(LEFT);
 800301c:	2000      	movs	r0, #0
 800301e:	f000 fda3 	bl	8003b68 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_BCK, 1500);
 8003022:	4b56      	ldr	r3, [pc, #344]	; (800317c <turn+0x2e4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fce3 	bl	80029f8 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_BCK, 1500);
 8003032:	4b53      	ldr	r3, [pc, #332]	; (8003180 <turn+0x2e8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fcdb 	bl	80029f8 <mtr_SetParamAndMove>
				mtr_dir = 1;
 8003042:	2301      	movs	r3, #1
 8003044:	76bb      	strb	r3, [r7, #26]
			}
		}

		// Poll orientation value and break if needed
		if (!near_0) {
 8003046:	7efb      	ldrb	r3, [r7, #27]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d129      	bne.n	80030a0 <turn+0x208>
			for (int i = 0; i < 250; i++) {
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	e022      	b.n	8003098 <turn+0x200>
				if (abs((*ori) - target_ori) < MAX_ORI_ERR) {
 8003052:	4b47      	ldr	r3, [pc, #284]	; (8003170 <turn+0x2d8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	ed93 7a00 	vldr	s14, [r3]
 800305a:	edd7 7a07 	vldr	s15, [r7, #28]
 800305e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003066:	ee17 3a90 	vmov	r3, s15
 800306a:	2b00      	cmp	r3, #0
 800306c:	bfb8      	it	lt
 800306e:	425b      	neglt	r3, r3
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003078:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800307c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003084:	d502      	bpl.n	800308c <turn+0x1f4>
					mtr_dir = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	76bb      	strb	r3, [r7, #26]
					break;
 800308a:	e060      	b.n	800314e <turn+0x2b6>
				}
				osDelay(2);
 800308c:	2002      	movs	r0, #2
 800308e:	f006 f849 	bl	8009124 <osDelay>
			for (int i = 0; i < 250; i++) {
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	3301      	adds	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2bf9      	cmp	r3, #249	; 0xf9
 800309c:	ddd9      	ble.n	8003052 <turn+0x1ba>
 800309e:	e056      	b.n	800314e <turn+0x2b6>
			}
		}
		else {
			float bound_lo, bound_hi;
			if (target_ori > 350) {
 80030a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80030a4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003184 <turn+0x2ec>
 80030a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b0:	dd14      	ble.n	80030dc <turn+0x244>
				bound_lo = target_ori - MAX_ORI_ERR;
 80030b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80030b6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80030ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030be:	edc7 7a04 	vstr	s15, [r7, #16]
				bound_hi = target_ori + MAX_ORI_ERR - 360;
 80030c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80030c6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80030ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030ce:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800316c <turn+0x2d4>
 80030d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030d6:	edc7 7a03 	vstr	s15, [r7, #12]
 80030da:	e013      	b.n	8003104 <turn+0x26c>
			}
			else {
				bound_lo = target_ori - MAX_ORI_ERR + 360;
 80030dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80030e0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80030e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030e8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800316c <turn+0x2d4>
 80030ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030f0:	edc7 7a04 	vstr	s15, [r7, #16]
				bound_hi = target_ori + MAX_ORI_ERR;
 80030f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80030f8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80030fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003100:	edc7 7a03 	vstr	s15, [r7, #12]
			}
			for (int i = 0; i < 250; i++) {
 8003104:	2300      	movs	r3, #0
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	e01e      	b.n	8003148 <turn+0x2b0>
				if (((*ori) > bound_lo) || ((*ori) < bound_hi)) {
 800310a:	4b19      	ldr	r3, [pc, #100]	; (8003170 <turn+0x2d8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	ed97 7a04 	vldr	s14, [r7, #16]
 8003116:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311e:	d40a      	bmi.n	8003136 <turn+0x29e>
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <turn+0x2d8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	ed97 7a03 	vldr	s14, [r7, #12]
 800312c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003134:	dd02      	ble.n	800313c <turn+0x2a4>
					mtr_dir = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	76bb      	strb	r3, [r7, #26]
					break;
 800313a:	e008      	b.n	800314e <turn+0x2b6>
				}
				osDelay(2);
 800313c:	2002      	movs	r0, #2
 800313e:	f005 fff1 	bl	8009124 <osDelay>
			for (int i = 0; i < 250; i++) {
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3301      	adds	r3, #1
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2bf9      	cmp	r3, #249	; 0xf9
 800314c:	dddd      	ble.n	800310a <turn+0x272>
			}
		}
		mtr_stop();
 800314e:	f7ff fbfb 	bl	8002948 <mtr_stop>
	while (mtr_dir) {
 8003152:	7ebb      	ldrb	r3, [r7, #26]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f47f af10 	bne.w	8002f7a <turn+0xe2>
	}
	mtr_stop();
 800315a:	f7ff fbf5 	bl	8002948 <mtr_stop>
 800315e:	e002      	b.n	8003166 <turn+0x2ce>
		return;
 8003160:	bf00      	nop
 8003162:	e000      	b.n	8003166 <turn+0x2ce>
		return;
 8003164:	bf00      	nop
}
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	43b40000 	.word	0x43b40000
 8003170:	200004f8 	.word	0x200004f8
 8003174:	43b34000 	.word	0x43b34000
 8003178:	43340000 	.word	0x43340000
 800317c:	200004e4 	.word	0x200004e4
 8003180:	200004e8 	.word	0x200004e8
 8003184:	43af0000 	.word	0x43af0000

08003188 <carTurn>:
/*
 * mtr_dir = { 0: stop, 1: fwd, 2: bck }
 * turning_angle only accept 90 (left) or 270 (right)
 */
void carTurn(uint8_t mtr_dir, float turning_angle) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	ed87 0a00 	vstr	s0, [r7]
 8003194:	71fb      	strb	r3, [r7, #7]
	// Check validity of parameters
	if ((mtr_dir < 1) || (mtr_dir > 2))
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 81be 	beq.w	800351a <carTurn+0x392>
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	f200 81ba 	bhi.w	800351a <carTurn+0x392>
		return;
	if ((turning_angle != 90) && (turning_angle != 270))
 80031a6:	edd7 7a00 	vldr	s15, [r7]
 80031aa:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 80034c8 <carTurn+0x340>
 80031ae:	eef4 7a47 	vcmp.f32	s15, s14
 80031b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b6:	d009      	beq.n	80031cc <carTurn+0x44>
 80031b8:	edd7 7a00 	vldr	s15, [r7]
 80031bc:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 80034cc <carTurn+0x344>
 80031c0:	eef4 7a47 	vcmp.f32	s15, s14
 80031c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c8:	f040 81a9 	bne.w	800351e <carTurn+0x396>
		return;

	// Calculate target orientation
	float target_ori = (*ori) + turning_angle;
 80031cc:	4bc0      	ldr	r3, [pc, #768]	; (80034d0 <carTurn+0x348>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	ed97 7a00 	vldr	s14, [r7]
 80031d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031dc:	edc7 7a05 	vstr	s15, [r7, #20]
	while (target_ori >= 360) target_ori -= 360;
 80031e0:	e007      	b.n	80031f2 <carTurn+0x6a>
 80031e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80031e6:	ed9f 7abb 	vldr	s14, [pc, #748]	; 80034d4 <carTurn+0x34c>
 80031ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031ee:	edc7 7a05 	vstr	s15, [r7, #20]
 80031f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80031f6:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80034d4 <carTurn+0x34c>
 80031fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003202:	daee      	bge.n	80031e2 <carTurn+0x5a>
	while (target_ori < 0) target_ori += 360;
 8003204:	e007      	b.n	8003216 <carTurn+0x8e>
 8003206:	edd7 7a05 	vldr	s15, [r7, #20]
 800320a:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80034d4 <carTurn+0x34c>
 800320e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003212:	edc7 7a05 	vstr	s15, [r7, #20]
 8003216:	edd7 7a05 	vldr	s15, [r7, #20]
 800321a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003222:	d4f0      	bmi.n	8003206 <carTurn+0x7e>

	// Adjustments for near 0 degree target orientation
	uint8_t near_0 = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	74fb      	strb	r3, [r7, #19]
	float bound_lo, bound_hi;
	if ((target_ori < MAX_ORI_ERR) || (target_ori > 360 - MAX_ORI_ERR)) {
 8003228:	edd7 7a05 	vldr	s15, [r7, #20]
 800322c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003238:	d408      	bmi.n	800324c <carTurn+0xc4>
 800323a:	edd7 7a05 	vldr	s15, [r7, #20]
 800323e:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80034d8 <carTurn+0x350>
 8003242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324a:	dd33      	ble.n	80032b4 <carTurn+0x12c>
		near_0 = 1;
 800324c:	2301      	movs	r3, #1
 800324e:	74fb      	strb	r3, [r7, #19]
		if (target_ori > 350) {
 8003250:	edd7 7a05 	vldr	s15, [r7, #20]
 8003254:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80034dc <carTurn+0x354>
 8003258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003260:	dd14      	ble.n	800328c <carTurn+0x104>
			bound_lo = target_ori - MAX_ORI_ERR;
 8003262:	edd7 7a05 	vldr	s15, [r7, #20]
 8003266:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800326a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800326e:	edc7 7a03 	vstr	s15, [r7, #12]
			bound_hi = target_ori + MAX_ORI_ERR - 360;
 8003272:	edd7 7a05 	vldr	s15, [r7, #20]
 8003276:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800327a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800327e:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80034d4 <carTurn+0x34c>
 8003282:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003286:	edc7 7a02 	vstr	s15, [r7, #8]
 800328a:	e013      	b.n	80032b4 <carTurn+0x12c>
		}
		else {
			bound_lo = target_ori - MAX_ORI_ERR + 360;
 800328c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003290:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003294:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003298:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80034d4 <carTurn+0x34c>
 800329c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032a0:	edc7 7a03 	vstr	s15, [r7, #12]
			bound_hi = target_ori + MAX_ORI_ERR;
 80032a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80032a8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80032ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032b0:	edc7 7a02 	vstr	s15, [r7, #8]
		}
	}

	// Pre-turning adjustments
	if ((turning_angle == 90) && (mtr_dir == 1)) {
 80032b4:	edd7 7a00 	vldr	s15, [r7]
 80032b8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80034c8 <carTurn+0x340>
 80032bc:	eef4 7a47 	vcmp.f32	s15, s14
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	d109      	bne.n	80032da <carTurn+0x152>
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d106      	bne.n	80032da <carTurn+0x152>
		mtr_mov_cm(5.0, 5.0);
 80032cc:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80032d0:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80032d4:	f7ff fcda 	bl	8002c8c <mtr_mov_cm>
 80032d8:	e037      	b.n	800334a <carTurn+0x1c2>
	}
	else if ((turning_angle == 270) && (mtr_dir == 1)) {
 80032da:	edd7 7a00 	vldr	s15, [r7]
 80032de:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80034cc <carTurn+0x344>
 80032e2:	eef4 7a47 	vcmp.f32	s15, s14
 80032e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ea:	d109      	bne.n	8003300 <carTurn+0x178>
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d106      	bne.n	8003300 <carTurn+0x178>
		mtr_mov_cm(9.0, 9.0);
 80032f2:	eef2 0a02 	vmov.f32	s1, #34	; 0x41100000  9.0
 80032f6:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 80032fa:	f7ff fcc7 	bl	8002c8c <mtr_mov_cm>
 80032fe:	e024      	b.n	800334a <carTurn+0x1c2>
	}
	else if ((turning_angle == 270) && (mtr_dir == 2)) {
 8003300:	edd7 7a00 	vldr	s15, [r7]
 8003304:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80034cc <carTurn+0x344>
 8003308:	eef4 7a47 	vcmp.f32	s15, s14
 800330c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003310:	d109      	bne.n	8003326 <carTurn+0x19e>
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d106      	bne.n	8003326 <carTurn+0x19e>
		mtr_mov_cm(11.5, 11.5);
 8003318:	eef2 0a07 	vmov.f32	s1, #39	; 0x41380000  11.5
 800331c:	eeb2 0a07 	vmov.f32	s0, #39	; 0x41380000  11.5
 8003320:	f7ff fcb4 	bl	8002c8c <mtr_mov_cm>
 8003324:	e011      	b.n	800334a <carTurn+0x1c2>
	}
	else if ((turning_angle == 90) && (mtr_dir == 2)) {
 8003326:	edd7 7a00 	vldr	s15, [r7]
 800332a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80034c8 <carTurn+0x340>
 800332e:	eef4 7a47 	vcmp.f32	s15, s14
 8003332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003336:	d108      	bne.n	800334a <carTurn+0x1c2>
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d105      	bne.n	800334a <carTurn+0x1c2>
		mtr_mov_cm(10.5, 10.5);
 800333e:	eef2 0a05 	vmov.f32	s1, #37	; 0x41280000  10.5
 8003342:	eeb2 0a05 	vmov.f32	s0, #37	; 0x41280000  10.5
 8003346:	f7ff fca1 	bl	8002c8c <mtr_mov_cm>
	}
	mtr_stop();
 800334a:	f7ff fafd 	bl	8002948 <mtr_stop>
	osDelay(200);
 800334e:	20c8      	movs	r0, #200	; 0xc8
 8003350:	f005 fee8 	bl	8009124 <osDelay>
	// Start servo and motor in turn direction
	if (((turning_angle == 90) && (mtr_dir == 1)) ||
 8003354:	edd7 7a00 	vldr	s15, [r7]
 8003358:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80034c8 <carTurn+0x340>
 800335c:	eef4 7a47 	vcmp.f32	s15, s14
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	d102      	bne.n	800336c <carTurn+0x1e4>
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d00b      	beq.n	8003384 <carTurn+0x1fc>
 800336c:	edd7 7a00 	vldr	s15, [r7]
 8003370:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80034cc <carTurn+0x344>
 8003374:	eef4 7a47 	vcmp.f32	s15, s14
 8003378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337c:	d106      	bne.n	800338c <carTurn+0x204>
		((turning_angle == 270) && (mtr_dir == 2))) {
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d103      	bne.n	800338c <carTurn+0x204>
		turnServo(LEFT);
 8003384:	2000      	movs	r0, #0
 8003386:	f000 fbef 	bl	8003b68 <turnServo>
 800338a:	e002      	b.n	8003392 <carTurn+0x20a>
	}
	else {
		turnServo(RIGHT);
 800338c:	2002      	movs	r0, #2
 800338e:	f000 fbeb 	bl	8003b68 <turnServo>
	}
	osDelay(200);
 8003392:	20c8      	movs	r0, #200	; 0xc8
 8003394:	f005 fec6 	bl	8009124 <osDelay>
	if (mtr_dir == 1) {
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d110      	bne.n	80033c0 <carTurn+0x238>
		mtr_SetParamAndMove(motorA, DIR_FWD, 1800);
 800339e:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <carTurn+0x358>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fb25 	bl	80029f8 <mtr_SetParamAndMove>
		mtr_SetParamAndMove(motorB, DIR_FWD, 1800);
 80033ae:	4b4d      	ldr	r3, [pc, #308]	; (80034e4 <carTurn+0x35c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80033b6:	2101      	movs	r1, #1
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fb1d 	bl	80029f8 <mtr_SetParamAndMove>
 80033be:	e00f      	b.n	80033e0 <carTurn+0x258>
	}
	else {
		mtr_SetParamAndMove(motorA, DIR_BCK, 2000);
 80033c0:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <carTurn+0x358>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fb14 	bl	80029f8 <mtr_SetParamAndMove>
		mtr_SetParamAndMove(motorB, DIR_BCK, 2000);
 80033d0:	4b44      	ldr	r3, [pc, #272]	; (80034e4 <carTurn+0x35c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fb0c 	bl	80029f8 <mtr_SetParamAndMove>
	}

	// Polling orientation and break when target reached
	while (1) {
		if (!near_0) {
 80033e0:	7cfb      	ldrb	r3, [r7, #19]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d11a      	bne.n	800341c <carTurn+0x294>
			if (abs((*ori) - target_ori) < MAX_ORI_ERR) {
 80033e6:	4b3a      	ldr	r3, [pc, #232]	; (80034d0 <carTurn+0x348>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	ed93 7a00 	vldr	s14, [r3]
 80033ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80033f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033fa:	ee17 3a90 	vmov	r3, s15
 80033fe:	2b00      	cmp	r3, #0
 8003400:	bfb8      	it	lt
 8003402:	425b      	neglt	r3, r3
 8003404:	ee07 3a90 	vmov	s15, r3
 8003408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800340c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003418:	d41a      	bmi.n	8003450 <carTurn+0x2c8>
 800341a:	e015      	b.n	8003448 <carTurn+0x2c0>
				break;
			}
		}
		else {
			if (((*ori) > bound_lo) || ((*ori) < bound_hi)) {
 800341c:	4b2c      	ldr	r3, [pc, #176]	; (80034d0 <carTurn+0x348>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	edd3 7a00 	vldr	s15, [r3]
 8003424:	ed97 7a03 	vldr	s14, [r7, #12]
 8003428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800342c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003430:	d40f      	bmi.n	8003452 <carTurn+0x2ca>
 8003432:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <carTurn+0x348>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	edd3 7a00 	vldr	s15, [r3]
 800343a:	ed97 7a02 	vldr	s14, [r7, #8]
 800343e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003446:	dc04      	bgt.n	8003452 <carTurn+0x2ca>
				break;
			}
		}
		osDelay(2);
 8003448:	2002      	movs	r0, #2
 800344a:	f005 fe6b 	bl	8009124 <osDelay>
		if (!near_0) {
 800344e:	e7c7      	b.n	80033e0 <carTurn+0x258>
				break;
 8003450:	bf00      	nop
	}
	mtr_stop();
 8003452:	f7ff fa79 	bl	8002948 <mtr_stop>

	// Post-turning adjustments
	if ((turning_angle == 90) && (mtr_dir == 1)) {
 8003456:	edd7 7a00 	vldr	s15, [r7]
 800345a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80034c8 <carTurn+0x340>
 800345e:	eef4 7a47 	vcmp.f32	s15, s14
 8003462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003466:	d109      	bne.n	800347c <carTurn+0x2f4>
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d106      	bne.n	800347c <carTurn+0x2f4>
		mtr_mov_cm(-11.5, -11.5);
 800346e:	eefa 0a07 	vmov.f32	s1, #167	; 0xc1380000 -11.5
 8003472:	eeba 0a07 	vmov.f32	s0, #167	; 0xc1380000 -11.5
 8003476:	f7ff fc09 	bl	8002c8c <mtr_mov_cm>
 800347a:	e051      	b.n	8003520 <carTurn+0x398>
	}
	else if ((turning_angle == 270) && (mtr_dir == 1)) {
 800347c:	edd7 7a00 	vldr	s15, [r7]
 8003480:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80034cc <carTurn+0x344>
 8003484:	eef4 7a47 	vcmp.f32	s15, s14
 8003488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348c:	d109      	bne.n	80034a2 <carTurn+0x31a>
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d106      	bne.n	80034a2 <carTurn+0x31a>
		mtr_mov_cm(-9.3, -9.3);
 8003494:	eddf 0a14 	vldr	s1, [pc, #80]	; 80034e8 <carTurn+0x360>
 8003498:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80034e8 <carTurn+0x360>
 800349c:	f7ff fbf6 	bl	8002c8c <mtr_mov_cm>
 80034a0:	e03e      	b.n	8003520 <carTurn+0x398>
	}
	else if ((turning_angle == 270) && (mtr_dir == 2)) {
 80034a2:	edd7 7a00 	vldr	s15, [r7]
 80034a6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80034cc <carTurn+0x344>
 80034aa:	eef4 7a47 	vcmp.f32	s15, s14
 80034ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b2:	d11f      	bne.n	80034f4 <carTurn+0x36c>
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d11c      	bne.n	80034f4 <carTurn+0x36c>
		mtr_mov_cm(-6.0, -6.0);
 80034ba:	eef9 0a08 	vmov.f32	s1, #152	; 0xc0c00000 -6.0
 80034be:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
 80034c2:	f7ff fbe3 	bl	8002c8c <mtr_mov_cm>
 80034c6:	e02b      	b.n	8003520 <carTurn+0x398>
 80034c8:	42b40000 	.word	0x42b40000
 80034cc:	43870000 	.word	0x43870000
 80034d0:	200004f8 	.word	0x200004f8
 80034d4:	43b40000 	.word	0x43b40000
 80034d8:	43b34000 	.word	0x43b34000
 80034dc:	43af0000 	.word	0x43af0000
 80034e0:	200004e4 	.word	0x200004e4
 80034e4:	200004e8 	.word	0x200004e8
 80034e8:	c114cccd 	.word	0xc114cccd
 80034ec:	42b40000 	.word	0x42b40000
 80034f0:	c1033333 	.word	0xc1033333
	}
	else if ((turning_angle == 90) && (mtr_dir == 2)) {
 80034f4:	edd7 7a00 	vldr	s15, [r7]
 80034f8:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80034ec <carTurn+0x364>
 80034fc:	eef4 7a47 	vcmp.f32	s15, s14
 8003500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003504:	d10c      	bne.n	8003520 <carTurn+0x398>
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d109      	bne.n	8003520 <carTurn+0x398>
		mtr_mov_cm(-8.2, -8.2);
 800350c:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 80034f0 <carTurn+0x368>
 8003510:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 80034f0 <carTurn+0x368>
 8003514:	f7ff fbba 	bl	8002c8c <mtr_mov_cm>
 8003518:	e002      	b.n	8003520 <carTurn+0x398>
		return;
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <carTurn+0x398>
		return;
 800351e:	bf00      	nop
	}
}
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop

08003528 <executeInstruction>:

/*
 * @brief Run instruction inst
 * @retval Distance moved in cm (linear). If execute turn, always return 0 even if SOSBack is called.
 */
float executeInstruction(Instruction* inst, CompleteError* cpltErr) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
	float retval;
	if (inst->type == INST_TYPE_GOSTRAIGHT) {
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	785b      	ldrb	r3, [r3, #1]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d12c      	bne.n	8003594 <executeInstruction+0x6c>
		mtr_mov_cm((float)inst->val, (float)inst->val);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003540:	ee07 3a90 	vmov	s15, r3
 8003544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800354e:	ee07 3a10 	vmov	s14, r3
 8003552:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003556:	eef0 0a47 	vmov.f32	s1, s14
 800355a:	eeb0 0a67 	vmov.f32	s0, s15
 800355e:	f7ff fb95 	bl	8002c8c <mtr_mov_cm>
		retval = ((float)(motorAPID->count + motorBPID->count) / 2) / CNT_PER_CM;
 8003562:	4b39      	ldr	r3, [pc, #228]	; (8003648 <executeInstruction+0x120>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800356a:	461a      	mov	r2, r3
 800356c:	4b37      	ldr	r3, [pc, #220]	; (800364c <executeInstruction+0x124>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003574:	4413      	add	r3, r2
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800357e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003582:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003586:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003650 <executeInstruction+0x128>
 800358a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800358e:	edc7 7a03 	vstr	s15, [r7, #12]
 8003592:	e046      	b.n	8003622 <executeInstruction+0xfa>
	}
	else if (inst->type == INST_TYPE_TURN) {
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	785b      	ldrb	r3, [r3, #1]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d13f      	bne.n	800361c <executeInstruction+0xf4>
		float turning_angle = (float)inst->val;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035aa:	edc7 7a02 	vstr	s15, [r7, #8]
		if ((turning_angle >= 0) && (turning_angle < 360)) {
 80035ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80035b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ba:	db0d      	blt.n	80035d8 <executeInstruction+0xb0>
 80035bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80035c0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003654 <executeInstruction+0x12c>
 80035c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035cc:	d504      	bpl.n	80035d8 <executeInstruction+0xb0>
			turn(turning_angle);
 80035ce:	ed97 0a02 	vldr	s0, [r7, #8]
 80035d2:	f7ff fc61 	bl	8002e98 <turn>
 80035d6:	e01d      	b.n	8003614 <executeInstruction+0xec>
		}
		else if (turning_angle < 0) {
 80035d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80035dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e4:	d50b      	bpl.n	80035fe <executeInstruction+0xd6>
			carTurn(2, turning_angle + 360);
 80035e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ea:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003654 <executeInstruction+0x12c>
 80035ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035f2:	eeb0 0a67 	vmov.f32	s0, s15
 80035f6:	2002      	movs	r0, #2
 80035f8:	f7ff fdc6 	bl	8003188 <carTurn>
 80035fc:	e00a      	b.n	8003614 <executeInstruction+0xec>
		}
		else {
			carTurn(1, turning_angle - 360);
 80035fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003602:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003654 <executeInstruction+0x12c>
 8003606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800360a:	eeb0 0a67 	vmov.f32	s0, s15
 800360e:	2001      	movs	r0, #1
 8003610:	f7ff fdba 	bl	8003188 <carTurn>
		}
		retval = 0;
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	e002      	b.n	8003622 <executeInstruction+0xfa>
	}
	else {
		return 0;
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e00a      	b.n	8003638 <executeInstruction+0x110>
	}
	cpltErr->finished = 1;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2201      	movs	r2, #1
 8003626:	719a      	strb	r2, [r3, #6]
	if (cpltErr->type == CPLTERR_TYPE_UNDEFINED) {
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	785b      	ldrb	r3, [r3, #1]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d102      	bne.n	8003636 <executeInstruction+0x10e>
		cpltErr->type = CPLTERR_TYPE_CPLT;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2200      	movs	r2, #0
 8003634:	705a      	strb	r2, [r3, #1]
	}
	return retval;
 8003636:	68fb      	ldr	r3, [r7, #12]
}
 8003638:	ee07 3a90 	vmov	s15, r3
 800363c:	eeb0 0a67 	vmov.f32	s0, s15
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	200004ec 	.word	0x200004ec
 800364c:	200004f0 	.word	0x200004f0
 8003650:	42928831 	.word	0x42928831
 8003654:	43b40000 	.word	0x43b40000

08003658 <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800365e:	2300      	movs	r3, #0
 8003660:	71fb      	strb	r3, [r7, #7]
 8003662:	e026      	b.n	80036b2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	3b50      	subs	r3, #80	; 0x50
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f000 f82b 	bl	80036c8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8003672:	2100      	movs	r1, #0
 8003674:	2000      	movs	r0, #0
 8003676:	f000 f827 	bl	80036c8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800367a:	2100      	movs	r1, #0
 800367c:	2010      	movs	r0, #16
 800367e:	f000 f823 	bl	80036c8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8003682:	2300      	movs	r3, #0
 8003684:	71bb      	strb	r3, [r7, #6]
 8003686:	e00d      	b.n	80036a4 <OLED_Refresh_Gram+0x4c>
 8003688:	79ba      	ldrb	r2, [r7, #6]
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	490d      	ldr	r1, [pc, #52]	; (80036c4 <OLED_Refresh_Gram+0x6c>)
 800368e:	00d2      	lsls	r2, r2, #3
 8003690:	440a      	add	r2, r1
 8003692:	4413      	add	r3, r2
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2101      	movs	r1, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f000 f815 	bl	80036c8 <OLED_WR_Byte>
 800369e:	79bb      	ldrb	r3, [r7, #6]
 80036a0:	3301      	adds	r3, #1
 80036a2:	71bb      	strb	r3, [r7, #6]
 80036a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	daed      	bge.n	8003688 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	3301      	adds	r3, #1
 80036b0:	71fb      	strb	r3, [r7, #7]
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	2b07      	cmp	r3, #7
 80036b6:	d9d5      	bls.n	8003664 <OLED_Refresh_Gram+0xc>
	}   
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	2000050c 	.word	0x2000050c

080036c8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	460a      	mov	r2, r1
 80036d2:	71fb      	strb	r3, [r7, #7]
 80036d4:	4613      	mov	r3, r2
 80036d6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80036d8:	79bb      	ldrb	r3, [r7, #6]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d006      	beq.n	80036ec <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80036de:	2201      	movs	r2, #1
 80036e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036e4:	481c      	ldr	r0, [pc, #112]	; (8003758 <OLED_WR_Byte+0x90>)
 80036e6:	f001 f9ff 	bl	8004ae8 <HAL_GPIO_WritePin>
 80036ea:	e005      	b.n	80036f8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80036ec:	2200      	movs	r2, #0
 80036ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036f2:	4819      	ldr	r0, [pc, #100]	; (8003758 <OLED_WR_Byte+0x90>)
 80036f4:	f001 f9f8 	bl	8004ae8 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80036f8:	2300      	movs	r3, #0
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	e01e      	b.n	800373c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80036fe:	2200      	movs	r2, #0
 8003700:	2120      	movs	r1, #32
 8003702:	4815      	ldr	r0, [pc, #84]	; (8003758 <OLED_WR_Byte+0x90>)
 8003704:	f001 f9f0 	bl	8004ae8 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8003708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370c:	2b00      	cmp	r3, #0
 800370e:	da05      	bge.n	800371c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8003710:	2201      	movs	r2, #1
 8003712:	2140      	movs	r1, #64	; 0x40
 8003714:	4810      	ldr	r0, [pc, #64]	; (8003758 <OLED_WR_Byte+0x90>)
 8003716:	f001 f9e7 	bl	8004ae8 <HAL_GPIO_WritePin>
 800371a:	e004      	b.n	8003726 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800371c:	2200      	movs	r2, #0
 800371e:	2140      	movs	r1, #64	; 0x40
 8003720:	480d      	ldr	r0, [pc, #52]	; (8003758 <OLED_WR_Byte+0x90>)
 8003722:	f001 f9e1 	bl	8004ae8 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8003726:	2201      	movs	r2, #1
 8003728:	2120      	movs	r1, #32
 800372a:	480b      	ldr	r0, [pc, #44]	; (8003758 <OLED_WR_Byte+0x90>)
 800372c:	f001 f9dc 	bl	8004ae8 <HAL_GPIO_WritePin>
		dat<<=1;   
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	3301      	adds	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	2b07      	cmp	r3, #7
 8003740:	d9dd      	bls.n	80036fe <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8003742:	2201      	movs	r2, #1
 8003744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003748:	4803      	ldr	r0, [pc, #12]	; (8003758 <OLED_WR_Byte+0x90>)
 800374a:	f001 f9cd 	bl	8004ae8 <HAL_GPIO_WritePin>
} 
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000

0800375c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8003762:	2300      	movs	r3, #0
 8003764:	71fb      	strb	r3, [r7, #7]
 8003766:	e014      	b.n	8003792 <OLED_Clear+0x36>
 8003768:	2300      	movs	r3, #0
 800376a:	71bb      	strb	r3, [r7, #6]
 800376c:	e00a      	b.n	8003784 <OLED_Clear+0x28>
 800376e:	79ba      	ldrb	r2, [r7, #6]
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	490c      	ldr	r1, [pc, #48]	; (80037a4 <OLED_Clear+0x48>)
 8003774:	00d2      	lsls	r2, r2, #3
 8003776:	440a      	add	r2, r1
 8003778:	4413      	add	r3, r2
 800377a:	2200      	movs	r2, #0
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	79bb      	ldrb	r3, [r7, #6]
 8003780:	3301      	adds	r3, #1
 8003782:	71bb      	strb	r3, [r7, #6]
 8003784:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003788:	2b00      	cmp	r3, #0
 800378a:	daf0      	bge.n	800376e <OLED_Clear+0x12>
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	3301      	adds	r3, #1
 8003790:	71fb      	strb	r3, [r7, #7]
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	2b07      	cmp	r3, #7
 8003796:	d9e7      	bls.n	8003768 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8003798:	f7ff ff5e 	bl	8003658 <OLED_Refresh_Gram>
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	2000050c 	.word	0x2000050c

080037a8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	71fb      	strb	r3, [r7, #7]
 80037b2:	460b      	mov	r3, r1
 80037b4:	71bb      	strb	r3, [r7, #6]
 80037b6:	4613      	mov	r3, r2
 80037b8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	db41      	blt.n	800384a <OLED_DrawPoint+0xa2>
 80037c6:	79bb      	ldrb	r3, [r7, #6]
 80037c8:	2b3f      	cmp	r3, #63	; 0x3f
 80037ca:	d83e      	bhi.n	800384a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80037cc:	79bb      	ldrb	r3, [r7, #6]
 80037ce:	08db      	lsrs	r3, r3, #3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f1c3 0307 	rsb	r3, r3, #7
 80037d6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80037d8:	79bb      	ldrb	r3, [r7, #6]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80037e0:	7b7b      	ldrb	r3, [r7, #13]
 80037e2:	f1c3 0307 	rsb	r3, r3, #7
 80037e6:	2201      	movs	r2, #1
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80037ee:	797b      	ldrb	r3, [r7, #5]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d012      	beq.n	800381a <OLED_DrawPoint+0x72>
 80037f4:	79fa      	ldrb	r2, [r7, #7]
 80037f6:	7bbb      	ldrb	r3, [r7, #14]
 80037f8:	4917      	ldr	r1, [pc, #92]	; (8003858 <OLED_DrawPoint+0xb0>)
 80037fa:	00d2      	lsls	r2, r2, #3
 80037fc:	440a      	add	r2, r1
 80037fe:	4413      	add	r3, r2
 8003800:	7818      	ldrb	r0, [r3, #0]
 8003802:	79fa      	ldrb	r2, [r7, #7]
 8003804:	7bbb      	ldrb	r3, [r7, #14]
 8003806:	7bf9      	ldrb	r1, [r7, #15]
 8003808:	4301      	orrs	r1, r0
 800380a:	b2c8      	uxtb	r0, r1
 800380c:	4912      	ldr	r1, [pc, #72]	; (8003858 <OLED_DrawPoint+0xb0>)
 800380e:	00d2      	lsls	r2, r2, #3
 8003810:	440a      	add	r2, r1
 8003812:	4413      	add	r3, r2
 8003814:	4602      	mov	r2, r0
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	e018      	b.n	800384c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800381a:	79fa      	ldrb	r2, [r7, #7]
 800381c:	7bbb      	ldrb	r3, [r7, #14]
 800381e:	490e      	ldr	r1, [pc, #56]	; (8003858 <OLED_DrawPoint+0xb0>)
 8003820:	00d2      	lsls	r2, r2, #3
 8003822:	440a      	add	r2, r1
 8003824:	4413      	add	r3, r2
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b25a      	sxtb	r2, r3
 800382a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800382e:	43db      	mvns	r3, r3
 8003830:	b25b      	sxtb	r3, r3
 8003832:	4013      	ands	r3, r2
 8003834:	b259      	sxtb	r1, r3
 8003836:	79fa      	ldrb	r2, [r7, #7]
 8003838:	7bbb      	ldrb	r3, [r7, #14]
 800383a:	b2c8      	uxtb	r0, r1
 800383c:	4906      	ldr	r1, [pc, #24]	; (8003858 <OLED_DrawPoint+0xb0>)
 800383e:	00d2      	lsls	r2, r2, #3
 8003840:	440a      	add	r2, r1
 8003842:	4413      	add	r3, r2
 8003844:	4602      	mov	r2, r0
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e000      	b.n	800384c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800384a:	bf00      	nop
}
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	2000050c 	.word	0x2000050c

0800385c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	4604      	mov	r4, r0
 8003864:	4608      	mov	r0, r1
 8003866:	4611      	mov	r1, r2
 8003868:	461a      	mov	r2, r3
 800386a:	4623      	mov	r3, r4
 800386c:	71fb      	strb	r3, [r7, #7]
 800386e:	4603      	mov	r3, r0
 8003870:	71bb      	strb	r3, [r7, #6]
 8003872:	460b      	mov	r3, r1
 8003874:	717b      	strb	r3, [r7, #5]
 8003876:	4613      	mov	r3, r2
 8003878:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800387a:	79bb      	ldrb	r3, [r7, #6]
 800387c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800387e:	797b      	ldrb	r3, [r7, #5]
 8003880:	3b20      	subs	r3, #32
 8003882:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8003884:	2300      	movs	r3, #0
 8003886:	73bb      	strb	r3, [r7, #14]
 8003888:	e04d      	b.n	8003926 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800388a:	793b      	ldrb	r3, [r7, #4]
 800388c:	2b0c      	cmp	r3, #12
 800388e:	d10b      	bne.n	80038a8 <OLED_ShowChar+0x4c>
 8003890:	797a      	ldrb	r2, [r7, #5]
 8003892:	7bb9      	ldrb	r1, [r7, #14]
 8003894:	4828      	ldr	r0, [pc, #160]	; (8003938 <OLED_ShowChar+0xdc>)
 8003896:	4613      	mov	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4403      	add	r3, r0
 80038a0:	440b      	add	r3, r1
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	73fb      	strb	r3, [r7, #15]
 80038a6:	e007      	b.n	80038b8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80038a8:	797a      	ldrb	r2, [r7, #5]
 80038aa:	7bbb      	ldrb	r3, [r7, #14]
 80038ac:	4923      	ldr	r1, [pc, #140]	; (800393c <OLED_ShowChar+0xe0>)
 80038ae:	0112      	lsls	r2, r2, #4
 80038b0:	440a      	add	r2, r1
 80038b2:	4413      	add	r3, r2
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80038b8:	2300      	movs	r3, #0
 80038ba:	737b      	strb	r3, [r7, #13]
 80038bc:	e02d      	b.n	800391a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80038be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	da07      	bge.n	80038d6 <OLED_ShowChar+0x7a>
 80038c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80038ca:	79b9      	ldrb	r1, [r7, #6]
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff ff6a 	bl	80037a8 <OLED_DrawPoint>
 80038d4:	e00c      	b.n	80038f0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80038d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bf0c      	ite	eq
 80038de:	2301      	moveq	r3, #1
 80038e0:	2300      	movne	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	79b9      	ldrb	r1, [r7, #6]
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff ff5c 	bl	80037a8 <OLED_DrawPoint>
			temp<<=1;
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
			y++;
 80038f6:	79bb      	ldrb	r3, [r7, #6]
 80038f8:	3301      	adds	r3, #1
 80038fa:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80038fc:	79ba      	ldrb	r2, [r7, #6]
 80038fe:	7b3b      	ldrb	r3, [r7, #12]
 8003900:	1ad2      	subs	r2, r2, r3
 8003902:	793b      	ldrb	r3, [r7, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	d105      	bne.n	8003914 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8003908:	7b3b      	ldrb	r3, [r7, #12]
 800390a:	71bb      	strb	r3, [r7, #6]
				x++;
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	3301      	adds	r3, #1
 8003910:	71fb      	strb	r3, [r7, #7]
				break;
 8003912:	e005      	b.n	8003920 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8003914:	7b7b      	ldrb	r3, [r7, #13]
 8003916:	3301      	adds	r3, #1
 8003918:	737b      	strb	r3, [r7, #13]
 800391a:	7b7b      	ldrb	r3, [r7, #13]
 800391c:	2b07      	cmp	r3, #7
 800391e:	d9ce      	bls.n	80038be <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8003920:	7bbb      	ldrb	r3, [r7, #14]
 8003922:	3301      	adds	r3, #1
 8003924:	73bb      	strb	r3, [r7, #14]
 8003926:	7bba      	ldrb	r2, [r7, #14]
 8003928:	793b      	ldrb	r3, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d3ad      	bcc.n	800388a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	bd90      	pop	{r4, r7, pc}
 8003938:	0800fc58 	.word	0x0800fc58
 800393c:	080100cc 	.word	0x080100cc

08003940 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af02      	add	r7, sp, #8
 8003946:	4603      	mov	r3, r0
 8003948:	603a      	str	r2, [r7, #0]
 800394a:	71fb      	strb	r3, [r7, #7]
 800394c:	460b      	mov	r3, r1
 800394e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8003950:	e01f      	b.n	8003992 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	2b7a      	cmp	r3, #122	; 0x7a
 8003956:	d904      	bls.n	8003962 <OLED_ShowString+0x22>
 8003958:	2300      	movs	r3, #0
 800395a:	71fb      	strb	r3, [r7, #7]
 800395c:	79bb      	ldrb	r3, [r7, #6]
 800395e:	3310      	adds	r3, #16
 8003960:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8003962:	79bb      	ldrb	r3, [r7, #6]
 8003964:	2b3a      	cmp	r3, #58	; 0x3a
 8003966:	d905      	bls.n	8003974 <OLED_ShowString+0x34>
 8003968:	2300      	movs	r3, #0
 800396a:	71fb      	strb	r3, [r7, #7]
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	71bb      	strb	r3, [r7, #6]
 8003970:	f7ff fef4 	bl	800375c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	781a      	ldrb	r2, [r3, #0]
 8003978:	79b9      	ldrb	r1, [r7, #6]
 800397a:	79f8      	ldrb	r0, [r7, #7]
 800397c:	2301      	movs	r3, #1
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	230c      	movs	r3, #12
 8003982:	f7ff ff6b 	bl	800385c <OLED_ShowChar>
        x+=8;
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	3308      	adds	r3, #8
 800398a:	71fb      	strb	r3, [r7, #7]
        p++;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	3301      	adds	r3, #1
 8003990:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1db      	bne.n	8003952 <OLED_ShowString+0x12>
    }  
}	 
 800399a:	bf00      	nop
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <OLED_Init>:

void OLED_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80039a8:	f002 f84e 	bl	8005a48 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80039ac:	4b41      	ldr	r3, [pc, #260]	; (8003ab4 <OLED_Init+0x110>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	4a40      	ldr	r2, [pc, #256]	; (8003ab4 <OLED_Init+0x110>)
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	6713      	str	r3, [r2, #112]	; 0x70
 80039b8:	4b3e      	ldr	r3, [pc, #248]	; (8003ab4 <OLED_Init+0x110>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039bc:	4a3d      	ldr	r2, [pc, #244]	; (8003ab4 <OLED_Init+0x110>)
 80039be:	f023 0304 	bic.w	r3, r3, #4
 80039c2:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80039c4:	f002 f854 	bl	8005a70 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80039c8:	2200      	movs	r2, #0
 80039ca:	2180      	movs	r1, #128	; 0x80
 80039cc:	483a      	ldr	r0, [pc, #232]	; (8003ab8 <OLED_Init+0x114>)
 80039ce:	f001 f88b 	bl	8004ae8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80039d2:	2064      	movs	r0, #100	; 0x64
 80039d4:	f000 fd24 	bl	8004420 <HAL_Delay>
	OLED_RST_Set();
 80039d8:	2201      	movs	r2, #1
 80039da:	2180      	movs	r1, #128	; 0x80
 80039dc:	4836      	ldr	r0, [pc, #216]	; (8003ab8 <OLED_Init+0x114>)
 80039de:	f001 f883 	bl	8004ae8 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80039e2:	2100      	movs	r1, #0
 80039e4:	20ae      	movs	r0, #174	; 0xae
 80039e6:	f7ff fe6f 	bl	80036c8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80039ea:	2100      	movs	r1, #0
 80039ec:	20d5      	movs	r0, #213	; 0xd5
 80039ee:	f7ff fe6b 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80039f2:	2100      	movs	r1, #0
 80039f4:	2050      	movs	r0, #80	; 0x50
 80039f6:	f7ff fe67 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80039fa:	2100      	movs	r1, #0
 80039fc:	20a8      	movs	r0, #168	; 0xa8
 80039fe:	f7ff fe63 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8003a02:	2100      	movs	r1, #0
 8003a04:	203f      	movs	r0, #63	; 0x3f
 8003a06:	f7ff fe5f 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	20d3      	movs	r0, #211	; 0xd3
 8003a0e:	f7ff fe5b 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8003a12:	2100      	movs	r1, #0
 8003a14:	2000      	movs	r0, #0
 8003a16:	f7ff fe57 	bl	80036c8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	2040      	movs	r0, #64	; 0x40
 8003a1e:	f7ff fe53 	bl	80036c8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8003a22:	2100      	movs	r1, #0
 8003a24:	208d      	movs	r0, #141	; 0x8d
 8003a26:	f7ff fe4f 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	2014      	movs	r0, #20
 8003a2e:	f7ff fe4b 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8003a32:	2100      	movs	r1, #0
 8003a34:	2020      	movs	r0, #32
 8003a36:	f7ff fe47 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	2002      	movs	r0, #2
 8003a3e:	f7ff fe43 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8003a42:	2100      	movs	r1, #0
 8003a44:	20a1      	movs	r0, #161	; 0xa1
 8003a46:	f7ff fe3f 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	20c0      	movs	r0, #192	; 0xc0
 8003a4e:	f7ff fe3b 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8003a52:	2100      	movs	r1, #0
 8003a54:	20da      	movs	r0, #218	; 0xda
 8003a56:	f7ff fe37 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	2012      	movs	r0, #18
 8003a5e:	f7ff fe33 	bl	80036c8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8003a62:	2100      	movs	r1, #0
 8003a64:	2081      	movs	r0, #129	; 0x81
 8003a66:	f7ff fe2f 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	20ef      	movs	r0, #239	; 0xef
 8003a6e:	f7ff fe2b 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8003a72:	2100      	movs	r1, #0
 8003a74:	20d9      	movs	r0, #217	; 0xd9
 8003a76:	f7ff fe27 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	20f1      	movs	r0, #241	; 0xf1
 8003a7e:	f7ff fe23 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8003a82:	2100      	movs	r1, #0
 8003a84:	20db      	movs	r0, #219	; 0xdb
 8003a86:	f7ff fe1f 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	2030      	movs	r0, #48	; 0x30
 8003a8e:	f7ff fe1b 	bl	80036c8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8003a92:	2100      	movs	r1, #0
 8003a94:	20a4      	movs	r0, #164	; 0xa4
 8003a96:	f7ff fe17 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	20a6      	movs	r0, #166	; 0xa6
 8003a9e:	f7ff fe13 	bl	80036c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	20af      	movs	r0, #175	; 0xaf
 8003aa6:	f7ff fe0f 	bl	80036c8 <OLED_WR_Byte>
	OLED_Clear(); 
 8003aaa:	f7ff fe57 	bl	800375c <OLED_Clear>
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40021000 	.word	0x40021000

08003abc <turnLeft>:
#include "cmsis_os.h"

uint8_t cur_direction; // 0 as left, 1 as straight, 2 as right
TIM_HandleTypeDef* htim1Ptr;

void turnLeft(){
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
	htim1Ptr->Instance->CCR4=1000;
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <turnLeft+0x24>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(500);
 8003acc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ad0:	f005 fb28 	bl	8009124 <osDelay>
	cur_direction = LEFT;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <turnLeft+0x28>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000910 	.word	0x20000910
 8003ae4:	2000090c 	.word	0x2000090c

08003ae8 <turnRight>:
void turnRight(){
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
	htim1Ptr->Instance->CCR4=2200;
 8003aec:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <turnRight+0x24>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f640 0298 	movw	r2, #2200	; 0x898
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(500);
 8003af8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003afc:	f005 fb12 	bl	8009124 <osDelay>
	cur_direction = RIGHT;
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <turnRight+0x28>)
 8003b02:	2202      	movs	r2, #2
 8003b04:	701a      	strb	r2, [r3, #0]
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000910 	.word	0x20000910
 8003b10:	2000090c 	.word	0x2000090c

08003b14 <turnStraight>:
void turnStraight(){
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
	if(cur_direction == LEFT){
 8003b18:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <turnStraight+0x4c>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <turnStraight+0x22>
		htim1Ptr->Instance->CCR4=1548;
 8003b20:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <turnStraight+0x50>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f240 620c 	movw	r2, #1548	; 0x60c
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(500);
 8003b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b30:	f005 faf8 	bl	8009124 <osDelay>
 8003b34:	e00d      	b.n	8003b52 <turnStraight+0x3e>
	}else if(cur_direction == RIGHT){
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <turnStraight+0x4c>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d10d      	bne.n	8003b5a <turnStraight+0x46>
		htim1Ptr->Instance->CCR4=1457;
 8003b3e:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <turnStraight+0x50>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f240 52b1 	movw	r2, #1457	; 0x5b1
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(500);
 8003b4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b4e:	f005 fae9 	bl	8009124 <osDelay>
	}else{
		return;
	}
	cur_direction = STRAIGHT;
 8003b52:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <turnStraight+0x4c>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	e000      	b.n	8003b5c <turnStraight+0x48>
		return;
 8003b5a:	bf00      	nop
}
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	2000090c 	.word	0x2000090c
 8003b64:	20000910 	.word	0x20000910

08003b68 <turnServo>:
void turnServo(uint8_t target){
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
	if(target == LEFT){
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <turnServo+0x16>
		turnLeft();
 8003b78:	f7ff ffa0 	bl	8003abc <turnLeft>
	}else if(target == STRAIGHT){
		turnStraight();
	}else{
		turnRight();
	}
}
 8003b7c:	e007      	b.n	8003b8e <turnServo+0x26>
	}else if(target == STRAIGHT){
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d102      	bne.n	8003b8a <turnServo+0x22>
		turnStraight();
 8003b84:	f7ff ffc6 	bl	8003b14 <turnStraight>
}
 8003b88:	e001      	b.n	8003b8e <turnServo+0x26>
		turnRight();
 8003b8a:	f7ff ffad 	bl	8003ae8 <turnRight>
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <getServoDir>:
uint8_t getServoDir() {
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
	return cur_direction;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <getServoDir+0x14>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	2000090c 	.word	0x2000090c

08003bb0 <servoInit>:
void servoInit(TIM_HandleTypeDef* htim){
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	htim1Ptr = htim;
 8003bb8:	4a15      	ldr	r2, [pc, #84]	; (8003c10 <servoInit+0x60>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8003bbe:	210c      	movs	r1, #12
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f002 fcd3 	bl	800656c <HAL_TIM_PWM_Start>
	cur_direction = 1;
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <servoInit+0x64>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
	htim1Ptr->Instance->CCR4=2200;
 8003bcc:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <servoInit+0x60>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f640 0298 	movw	r2, #2200	; 0x898
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(700);
 8003bd8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003bdc:	f005 faa2 	bl	8009124 <osDelay>
	htim1Ptr->Instance->CCR4=1000;
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <servoInit+0x60>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(700);
 8003bec:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003bf0:	f005 fa98 	bl	8009124 <osDelay>
	htim1Ptr->Instance->CCR4=1548;
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <servoInit+0x60>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f240 620c 	movw	r2, #1548	; 0x60c
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(700);
 8003c00:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003c04:	f005 fa8e 	bl	8009124 <osDelay>

}
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000910 	.word	0x20000910
 8003c14:	2000090c 	.word	0x2000090c

08003c18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <HAL_MspInit+0x54>)
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	4a11      	ldr	r2, [pc, #68]	; (8003c6c <HAL_MspInit+0x54>)
 8003c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2e:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <HAL_MspInit+0x54>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c36:	607b      	str	r3, [r7, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_MspInit+0x54>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	4a0a      	ldr	r2, [pc, #40]	; (8003c6c <HAL_MspInit+0x54>)
 8003c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c48:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4a:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <HAL_MspInit+0x54>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	210f      	movs	r1, #15
 8003c5a:	f06f 0001 	mvn.w	r0, #1
 8003c5e:	f000 fcde 	bl	800461e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800

08003c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]
 8003c86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <HAL_I2C_MspInit+0x84>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d12c      	bne.n	8003cec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <HAL_I2C_MspInit+0x88>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <HAL_I2C_MspInit+0x88>)
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca2:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <HAL_I2C_MspInit+0x88>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8003cae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cb4:	2312      	movs	r3, #18
 8003cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc4:	f107 0314 	add.w	r3, r7, #20
 8003cc8:	4619      	mov	r1, r3
 8003cca:	480c      	ldr	r0, [pc, #48]	; (8003cfc <HAL_I2C_MspInit+0x8c>)
 8003ccc:	f000 fd70 	bl	80047b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <HAL_I2C_MspInit+0x88>)
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	4a07      	ldr	r2, [pc, #28]	; (8003cf8 <HAL_I2C_MspInit+0x88>)
 8003cda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cde:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_I2C_MspInit+0x88>)
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003cec:	bf00      	nop
 8003cee:	3728      	adds	r7, #40	; 0x28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40005400 	.word	0x40005400
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40020400 	.word	0x40020400

08003d00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08c      	sub	sp, #48	; 0x30
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d08:	f107 031c 	add.w	r3, r7, #28
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	60da      	str	r2, [r3, #12]
 8003d16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a40      	ldr	r2, [pc, #256]	; (8003e20 <HAL_TIM_Base_MspInit+0x120>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d135      	bne.n	8003d8e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	4a3e      	ldr	r2, [pc, #248]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6453      	str	r3, [r2, #68]	; 0x44
 8003d32:	4b3c      	ldr	r3, [pc, #240]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	4b38      	ldr	r3, [pc, #224]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	4a37      	ldr	r2, [pc, #220]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003d48:	f043 0310 	orr.w	r3, r3, #16
 8003d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4e:	4b35      	ldr	r3, [pc, #212]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = US_ECHO_Pin;
 8003d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d60:	2302      	movs	r3, #2
 8003d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(US_ECHO_GPIO_Port, &GPIO_InitStruct);
 8003d70:	f107 031c 	add.w	r3, r7, #28
 8003d74:	4619      	mov	r1, r3
 8003d76:	482c      	ldr	r0, [pc, #176]	; (8003e28 <HAL_TIM_Base_MspInit+0x128>)
 8003d78:	f000 fd1a 	bl	80047b0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2105      	movs	r1, #5
 8003d80:	201b      	movs	r0, #27
 8003d82:	f000 fc4c 	bl	800461e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003d86:	201b      	movs	r0, #27
 8003d88:	f000 fc65 	bl	8004656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003d8c:	e044      	b.n	8003e18 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM6)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <HAL_TIM_Base_MspInit+0x12c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d10e      	bne.n	8003db6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	4a20      	ldr	r2, [pc, #128]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003da2:	f043 0310 	orr.w	r3, r3, #16
 8003da6:	6413      	str	r3, [r2, #64]	; 0x40
 8003da8:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]
}
 8003db4:	e030      	b.n	8003e18 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM8)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1d      	ldr	r2, [pc, #116]	; (8003e30 <HAL_TIM_Base_MspInit+0x130>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d12b      	bne.n	8003e18 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc8:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003dca:	f043 0302 	orr.w	r3, r3, #2
 8003dce:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd0:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	4a0f      	ldr	r2, [pc, #60]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003de6:	f043 0304 	orr.w	r3, r3, #4
 8003dea:	6313      	str	r3, [r2, #48]	; 0x30
 8003dec:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <HAL_TIM_Base_MspInit+0x124>)
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003df8:	23c0      	movs	r3, #192	; 0xc0
 8003dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e04:	2300      	movs	r3, #0
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	4619      	mov	r1, r3
 8003e12:	4808      	ldr	r0, [pc, #32]	; (8003e34 <HAL_TIM_Base_MspInit+0x134>)
 8003e14:	f000 fccc 	bl	80047b0 <HAL_GPIO_Init>
}
 8003e18:	bf00      	nop
 8003e1a:	3730      	adds	r7, #48	; 0x30
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40010000 	.word	0x40010000
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40001000 	.word	0x40001000
 8003e30:	40010400 	.word	0x40010400
 8003e34:	40020800 	.word	0x40020800

08003e38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08c      	sub	sp, #48	; 0x30
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e40:	f107 031c 	add.w	r3, r7, #28
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	60da      	str	r2, [r3, #12]
 8003e4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e58:	d153      	bne.n	8003f02 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	4b47      	ldr	r3, [pc, #284]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	4a46      	ldr	r2, [pc, #280]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6a:	4b44      	ldr	r3, [pc, #272]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	4b40      	ldr	r3, [pc, #256]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	4a3f      	ldr	r2, [pc, #252]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6313      	str	r3, [r2, #48]	; 0x30
 8003e86:	4b3d      	ldr	r3, [pc, #244]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	4a38      	ldr	r2, [pc, #224]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003e9c:	f043 0302 	orr.w	r3, r3, #2
 8003ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea2:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec4:	f107 031c 	add.w	r3, r7, #28
 8003ec8:	4619      	mov	r1, r3
 8003eca:	482d      	ldr	r0, [pc, #180]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x148>)
 8003ecc:	f000 fc70 	bl	80047b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003edc:	2300      	movs	r3, #0
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee4:	f107 031c 	add.w	r3, r7, #28
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4826      	ldr	r0, [pc, #152]	; (8003f84 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003eec:	f000 fc60 	bl	80047b0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2105      	movs	r1, #5
 8003ef4:	201c      	movs	r0, #28
 8003ef6:	f000 fb92 	bl	800461e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003efa:	201c      	movs	r0, #28
 8003efc:	f000 fbab 	bl	8004656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003f00:	e038      	b.n	8003f74 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM3)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a20      	ldr	r2, [pc, #128]	; (8003f88 <HAL_TIM_Encoder_MspInit+0x150>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d133      	bne.n	8003f74 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003f16:	f043 0302 	orr.w	r3, r3, #2
 8003f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1c:	4b17      	ldr	r3, [pc, #92]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6313      	str	r3, [r2, #48]	; 0x30
 8003f38:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <HAL_TIM_Encoder_MspInit+0x144>)
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f44:	23c0      	movs	r3, #192	; 0xc0
 8003f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f50:	2300      	movs	r3, #0
 8003f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f54:	2302      	movs	r3, #2
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f58:	f107 031c 	add.w	r3, r7, #28
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4808      	ldr	r0, [pc, #32]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x148>)
 8003f60:	f000 fc26 	bl	80047b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003f64:	2200      	movs	r2, #0
 8003f66:	2105      	movs	r1, #5
 8003f68:	201d      	movs	r0, #29
 8003f6a:	f000 fb58 	bl	800461e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f6e:	201d      	movs	r0, #29
 8003f70:	f000 fb71 	bl	8004656 <HAL_NVIC_EnableIRQ>
}
 8003f74:	bf00      	nop
 8003f76:	3730      	adds	r7, #48	; 0x30
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40020000 	.word	0x40020000
 8003f84:	40020400 	.word	0x40020400
 8003f88:	40000400 	.word	0x40000400

08003f8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f94:	f107 030c 	add.w	r3, r7, #12
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	60da      	str	r2, [r3, #12]
 8003fa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <HAL_TIM_MspPostInit+0x68>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d11e      	bne.n	8003fec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <HAL_TIM_MspPostInit+0x6c>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	4a10      	ldr	r2, [pc, #64]	; (8003ff8 <HAL_TIM_MspPostInit+0x6c>)
 8003fb8:	f043 0310 	orr.w	r3, r3, #16
 8003fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <HAL_TIM_MspPostInit+0x6c>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003fca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fe0:	f107 030c 	add.w	r3, r7, #12
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4805      	ldr	r0, [pc, #20]	; (8003ffc <HAL_TIM_MspPostInit+0x70>)
 8003fe8:	f000 fbe2 	bl	80047b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003fec:	bf00      	nop
 8003fee:	3720      	adds	r7, #32
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	40021000 	.word	0x40021000

08004000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	; 0x28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004008:	f107 0314 	add.w	r3, r7, #20
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	60da      	str	r2, [r3, #12]
 8004016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <HAL_UART_MspInit+0x94>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d134      	bne.n	800408c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	4b1c      	ldr	r3, [pc, #112]	; (8004098 <HAL_UART_MspInit+0x98>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	4a1b      	ldr	r2, [pc, #108]	; (8004098 <HAL_UART_MspInit+0x98>)
 800402c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004030:	6413      	str	r3, [r2, #64]	; 0x40
 8004032:	4b19      	ldr	r3, [pc, #100]	; (8004098 <HAL_UART_MspInit+0x98>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	4b15      	ldr	r3, [pc, #84]	; (8004098 <HAL_UART_MspInit+0x98>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	4a14      	ldr	r2, [pc, #80]	; (8004098 <HAL_UART_MspInit+0x98>)
 8004048:	f043 0304 	orr.w	r3, r3, #4
 800404c:	6313      	str	r3, [r2, #48]	; 0x30
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <HAL_UART_MspInit+0x98>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800405a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800405e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004060:	2302      	movs	r3, #2
 8004062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004064:	2300      	movs	r3, #0
 8004066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004068:	2303      	movs	r3, #3
 800406a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800406c:	2307      	movs	r3, #7
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004070:	f107 0314 	add.w	r3, r7, #20
 8004074:	4619      	mov	r1, r3
 8004076:	4809      	ldr	r0, [pc, #36]	; (800409c <HAL_UART_MspInit+0x9c>)
 8004078:	f000 fb9a 	bl	80047b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800407c:	2200      	movs	r2, #0
 800407e:	2105      	movs	r1, #5
 8004080:	2027      	movs	r0, #39	; 0x27
 8004082:	f000 facc 	bl	800461e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004086:	2027      	movs	r0, #39	; 0x27
 8004088:	f000 fae5 	bl	8004656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800408c:	bf00      	nop
 800408e:	3728      	adds	r7, #40	; 0x28
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40004800 	.word	0x40004800
 8004098:	40023800 	.word	0x40023800
 800409c:	40020800 	.word	0x40020800

080040a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040a4:	e7fe      	b.n	80040a4 <NMI_Handler+0x4>

080040a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040a6:	b480      	push	{r7}
 80040a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040aa:	e7fe      	b.n	80040aa <HardFault_Handler+0x4>

080040ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040b0:	e7fe      	b.n	80040b0 <MemManage_Handler+0x4>

080040b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040b6:	e7fe      	b.n	80040b6 <BusFault_Handler+0x4>

080040b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040bc:	e7fe      	b.n	80040bc <UsageFault_Handler+0x4>

080040be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040be:	b480      	push	{r7}
 80040c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040d0:	f000 f986 	bl	80043e0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80040d4:	f006 fdae 	bl	800ac34 <xTaskGetSchedulerState>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d001      	beq.n	80040e2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80040de:	f007 fb93 	bl	800b808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80040ec:	4802      	ldr	r0, [pc, #8]	; (80040f8 <TIM1_CC_IRQHandler+0x10>)
 80040ee:	f002 fddb 	bl	8006ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80040f2:	bf00      	nop
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000278 	.word	0x20000278

080040fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004100:	4802      	ldr	r0, [pc, #8]	; (800410c <TIM2_IRQHandler+0x10>)
 8004102:	f002 fdd1 	bl	8006ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	200002c0 	.word	0x200002c0

08004110 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004114:	4802      	ldr	r0, [pc, #8]	; (8004120 <TIM3_IRQHandler+0x10>)
 8004116:	f002 fdc7 	bl	8006ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000308 	.word	0x20000308

08004124 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004128:	4802      	ldr	r0, [pc, #8]	; (8004134 <USART3_IRQHandler+0x10>)
 800412a:	f003 ff83 	bl	8008034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	200003e0 	.word	0x200003e0

08004138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return 1;
 800413c:	2301      	movs	r3, #1
}
 800413e:	4618      	mov	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <_kill>:

int _kill(int pid, int sig)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004152:	f008 fb15 	bl	800c780 <__errno>
 8004156:	4603      	mov	r3, r0
 8004158:	2216      	movs	r2, #22
 800415a:	601a      	str	r2, [r3, #0]
  return -1;
 800415c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <_exit>:

void _exit (int status)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004170:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff ffe7 	bl	8004148 <_kill>
  while (1) {}    /* Make sure we hang here */
 800417a:	e7fe      	b.n	800417a <_exit+0x12>

0800417c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004188:	2300      	movs	r3, #0
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e00a      	b.n	80041a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800418e:	f3af 8000 	nop.w
 8004192:	4601      	mov	r1, r0
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	60ba      	str	r2, [r7, #8]
 800419a:	b2ca      	uxtb	r2, r1
 800419c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	3301      	adds	r3, #1
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	dbf0      	blt.n	800418e <_read+0x12>
  }

  return len;
 80041ac:	687b      	ldr	r3, [r7, #4]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e009      	b.n	80041dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	60ba      	str	r2, [r7, #8]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	3301      	adds	r3, #1
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	dbf1      	blt.n	80041c8 <_write+0x12>
  }
  return len;
 80041e4:	687b      	ldr	r3, [r7, #4]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <_close>:

int _close(int file)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80041f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004216:	605a      	str	r2, [r3, #4]
  return 0;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <_isatty>:

int _isatty(int file)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800422e:	2301      	movs	r3, #1
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
	...

08004258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004260:	4a14      	ldr	r2, [pc, #80]	; (80042b4 <_sbrk+0x5c>)
 8004262:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <_sbrk+0x60>)
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800426c:	4b13      	ldr	r3, [pc, #76]	; (80042bc <_sbrk+0x64>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d102      	bne.n	800427a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <_sbrk+0x64>)
 8004276:	4a12      	ldr	r2, [pc, #72]	; (80042c0 <_sbrk+0x68>)
 8004278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800427a:	4b10      	ldr	r3, [pc, #64]	; (80042bc <_sbrk+0x64>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	429a      	cmp	r2, r3
 8004286:	d207      	bcs.n	8004298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004288:	f008 fa7a 	bl	800c780 <__errno>
 800428c:	4603      	mov	r3, r0
 800428e:	220c      	movs	r2, #12
 8004290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004296:	e009      	b.n	80042ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <_sbrk+0x64>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800429e:	4b07      	ldr	r3, [pc, #28]	; (80042bc <_sbrk+0x64>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	4a05      	ldr	r2, [pc, #20]	; (80042bc <_sbrk+0x64>)
 80042a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042aa:	68fb      	ldr	r3, [r7, #12]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20020000 	.word	0x20020000
 80042b8:	00000400 	.word	0x00000400
 80042bc:	20000914 	.word	0x20000914
 80042c0:	200053b8 	.word	0x200053b8

080042c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <SystemInit+0x20>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	4a05      	ldr	r2, [pc, #20]	; (80042e4 <SystemInit+0x20>)
 80042d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	e000ed00 	.word	0xe000ed00

080042e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004320 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042ec:	480d      	ldr	r0, [pc, #52]	; (8004324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042ee:	490e      	ldr	r1, [pc, #56]	; (8004328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042f0:	4a0e      	ldr	r2, [pc, #56]	; (800432c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042f4:	e002      	b.n	80042fc <LoopCopyDataInit>

080042f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042fa:	3304      	adds	r3, #4

080042fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004300:	d3f9      	bcc.n	80042f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004302:	4a0b      	ldr	r2, [pc, #44]	; (8004330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004304:	4c0b      	ldr	r4, [pc, #44]	; (8004334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004308:	e001      	b.n	800430e <LoopFillZerobss>

0800430a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800430a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800430c:	3204      	adds	r2, #4

0800430e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800430e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004310:	d3fb      	bcc.n	800430a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004312:	f7ff ffd7 	bl	80042c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004316:	f008 fa39 	bl	800c78c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800431a:	f7fd fa29 	bl	8001770 <main>
  bx  lr    
 800431e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004328:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800432c:	08010c30 	.word	0x08010c30
  ldr r2, =_sbss
 8004330:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004334:	200053b8 	.word	0x200053b8

08004338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004338:	e7fe      	b.n	8004338 <ADC_IRQHandler>
	...

0800433c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004340:	4b0e      	ldr	r3, [pc, #56]	; (800437c <HAL_Init+0x40>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a0d      	ldr	r2, [pc, #52]	; (800437c <HAL_Init+0x40>)
 8004346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800434a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_Init+0x40>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a0a      	ldr	r2, [pc, #40]	; (800437c <HAL_Init+0x40>)
 8004352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004358:	4b08      	ldr	r3, [pc, #32]	; (800437c <HAL_Init+0x40>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a07      	ldr	r2, [pc, #28]	; (800437c <HAL_Init+0x40>)
 800435e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004364:	2003      	movs	r0, #3
 8004366:	f000 f94f 	bl	8004608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800436a:	200f      	movs	r0, #15
 800436c:	f000 f808 	bl	8004380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004370:	f7ff fc52 	bl	8003c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40023c00 	.word	0x40023c00

08004380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004388:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <HAL_InitTick+0x54>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <HAL_InitTick+0x58>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	4619      	mov	r1, r3
 8004392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004396:	fbb3 f3f1 	udiv	r3, r3, r1
 800439a:	fbb2 f3f3 	udiv	r3, r2, r3
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f967 	bl	8004672 <HAL_SYSTICK_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e00e      	b.n	80043cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b0f      	cmp	r3, #15
 80043b2:	d80a      	bhi.n	80043ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043b4:	2200      	movs	r2, #0
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043bc:	f000 f92f 	bl	800461e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043c0:	4a06      	ldr	r2, [pc, #24]	; (80043dc <HAL_InitTick+0x5c>)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e000      	b.n	80043cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20000008 	.word	0x20000008
 80043d8:	20000010 	.word	0x20000010
 80043dc:	2000000c 	.word	0x2000000c

080043e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <HAL_IncTick+0x20>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_IncTick+0x24>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4413      	add	r3, r2
 80043f0:	4a04      	ldr	r2, [pc, #16]	; (8004404 <HAL_IncTick+0x24>)
 80043f2:	6013      	str	r3, [r2, #0]
}
 80043f4:	bf00      	nop
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000010 	.word	0x20000010
 8004404:	20000918 	.word	0x20000918

08004408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return uwTick;
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <HAL_GetTick+0x14>)
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000918 	.word	0x20000918

08004420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004428:	f7ff ffee 	bl	8004408 <HAL_GetTick>
 800442c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004438:	d005      	beq.n	8004446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800443a:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <HAL_Delay+0x44>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004446:	bf00      	nop
 8004448:	f7ff ffde 	bl	8004408 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	429a      	cmp	r2, r3
 8004456:	d8f7      	bhi.n	8004448 <HAL_Delay+0x28>
  {
  }
}
 8004458:	bf00      	nop
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20000010 	.word	0x20000010

08004468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <__NVIC_SetPriorityGrouping+0x44>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004484:	4013      	ands	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800449a:	4a04      	ldr	r2, [pc, #16]	; (80044ac <__NVIC_SetPriorityGrouping+0x44>)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	60d3      	str	r3, [r2, #12]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	e000ed00 	.word	0xe000ed00

080044b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044b4:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <__NVIC_GetPriorityGrouping+0x18>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	0a1b      	lsrs	r3, r3, #8
 80044ba:	f003 0307 	and.w	r3, r3, #7
}
 80044be:	4618      	mov	r0, r3
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	db0b      	blt.n	80044f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044de:	79fb      	ldrb	r3, [r7, #7]
 80044e0:	f003 021f 	and.w	r2, r3, #31
 80044e4:	4907      	ldr	r1, [pc, #28]	; (8004504 <__NVIC_EnableIRQ+0x38>)
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	2001      	movs	r0, #1
 80044ee:	fa00 f202 	lsl.w	r2, r0, r2
 80044f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	e000e100 	.word	0xe000e100

08004508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	6039      	str	r1, [r7, #0]
 8004512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004518:	2b00      	cmp	r3, #0
 800451a:	db0a      	blt.n	8004532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	b2da      	uxtb	r2, r3
 8004520:	490c      	ldr	r1, [pc, #48]	; (8004554 <__NVIC_SetPriority+0x4c>)
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	0112      	lsls	r2, r2, #4
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	440b      	add	r3, r1
 800452c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004530:	e00a      	b.n	8004548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	4908      	ldr	r1, [pc, #32]	; (8004558 <__NVIC_SetPriority+0x50>)
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	3b04      	subs	r3, #4
 8004540:	0112      	lsls	r2, r2, #4
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	440b      	add	r3, r1
 8004546:	761a      	strb	r2, [r3, #24]
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	e000e100 	.word	0xe000e100
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800455c:	b480      	push	{r7}
 800455e:	b089      	sub	sp, #36	; 0x24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f1c3 0307 	rsb	r3, r3, #7
 8004576:	2b04      	cmp	r3, #4
 8004578:	bf28      	it	cs
 800457a:	2304      	movcs	r3, #4
 800457c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	3304      	adds	r3, #4
 8004582:	2b06      	cmp	r3, #6
 8004584:	d902      	bls.n	800458c <NVIC_EncodePriority+0x30>
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	3b03      	subs	r3, #3
 800458a:	e000      	b.n	800458e <NVIC_EncodePriority+0x32>
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004590:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	43da      	mvns	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	401a      	ands	r2, r3
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	fa01 f303 	lsl.w	r3, r1, r3
 80045ae:	43d9      	mvns	r1, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b4:	4313      	orrs	r3, r2
         );
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3724      	adds	r7, #36	; 0x24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045d4:	d301      	bcc.n	80045da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045d6:	2301      	movs	r3, #1
 80045d8:	e00f      	b.n	80045fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045da:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <SysTick_Config+0x40>)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3b01      	subs	r3, #1
 80045e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045e2:	210f      	movs	r1, #15
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045e8:	f7ff ff8e 	bl	8004508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <SysTick_Config+0x40>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045f2:	4b04      	ldr	r3, [pc, #16]	; (8004604 <SysTick_Config+0x40>)
 80045f4:	2207      	movs	r2, #7
 80045f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	e000e010 	.word	0xe000e010

08004608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff ff29 	bl	8004468 <__NVIC_SetPriorityGrouping>
}
 8004616:	bf00      	nop
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800461e:	b580      	push	{r7, lr}
 8004620:	b086      	sub	sp, #24
 8004622:	af00      	add	r7, sp, #0
 8004624:	4603      	mov	r3, r0
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	607a      	str	r2, [r7, #4]
 800462a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004630:	f7ff ff3e 	bl	80044b0 <__NVIC_GetPriorityGrouping>
 8004634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	6978      	ldr	r0, [r7, #20]
 800463c:	f7ff ff8e 	bl	800455c <NVIC_EncodePriority>
 8004640:	4602      	mov	r2, r0
 8004642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004646:	4611      	mov	r1, r2
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff ff5d 	bl	8004508 <__NVIC_SetPriority>
}
 800464e:	bf00      	nop
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	4603      	mov	r3, r0
 800465e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ff31 	bl	80044cc <__NVIC_EnableIRQ>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff ffa2 	bl	80045c4 <SysTick_Config>
 8004680:	4603      	mov	r3, r0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004696:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004698:	f7ff feb6 	bl	8004408 <HAL_GetTick>
 800469c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d008      	beq.n	80046bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2280      	movs	r2, #128	; 0x80
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e052      	b.n	8004762 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0216 	bic.w	r2, r2, #22
 80046ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d103      	bne.n	80046ec <HAL_DMA_Abort+0x62>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d007      	beq.n	80046fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0208 	bic.w	r2, r2, #8
 80046fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800470c:	e013      	b.n	8004736 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800470e:	f7ff fe7b 	bl	8004408 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b05      	cmp	r3, #5
 800471a:	d90c      	bls.n	8004736 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2203      	movs	r2, #3
 8004726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e015      	b.n	8004762 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e4      	bne.n	800470e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004748:	223f      	movs	r2, #63	; 0x3f
 800474a:	409a      	lsls	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d004      	beq.n	8004788 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2280      	movs	r2, #128	; 0x80
 8004782:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e00c      	b.n	80047a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2205      	movs	r2, #5
 800478c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b089      	sub	sp, #36	; 0x24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	e16b      	b.n	8004aa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047cc:	2201      	movs	r2, #1
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4013      	ands	r3, r2
 80047de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	f040 815a 	bne.w	8004a9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d005      	beq.n	8004802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d130      	bne.n	8004864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	2203      	movs	r2, #3
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4313      	orrs	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004838:	2201      	movs	r2, #1
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 0201 	and.w	r2, r3, #1
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4313      	orrs	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	2b03      	cmp	r3, #3
 800486e:	d017      	beq.n	80048a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	2203      	movs	r2, #3
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d123      	bne.n	80048f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	08da      	lsrs	r2, r3, #3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3208      	adds	r2, #8
 80048b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	220f      	movs	r2, #15
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	08da      	lsrs	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3208      	adds	r2, #8
 80048ee:	69b9      	ldr	r1, [r7, #24]
 80048f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	2203      	movs	r2, #3
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 0203 	and.w	r2, r3, #3
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80b4 	beq.w	8004a9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	4b60      	ldr	r3, [pc, #384]	; (8004abc <HAL_GPIO_Init+0x30c>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	4a5f      	ldr	r2, [pc, #380]	; (8004abc <HAL_GPIO_Init+0x30c>)
 8004940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004944:	6453      	str	r3, [r2, #68]	; 0x44
 8004946:	4b5d      	ldr	r3, [pc, #372]	; (8004abc <HAL_GPIO_Init+0x30c>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004952:	4a5b      	ldr	r2, [pc, #364]	; (8004ac0 <HAL_GPIO_Init+0x310>)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	089b      	lsrs	r3, r3, #2
 8004958:	3302      	adds	r3, #2
 800495a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	220f      	movs	r2, #15
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a52      	ldr	r2, [pc, #328]	; (8004ac4 <HAL_GPIO_Init+0x314>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d02b      	beq.n	80049d6 <HAL_GPIO_Init+0x226>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a51      	ldr	r2, [pc, #324]	; (8004ac8 <HAL_GPIO_Init+0x318>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d025      	beq.n	80049d2 <HAL_GPIO_Init+0x222>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a50      	ldr	r2, [pc, #320]	; (8004acc <HAL_GPIO_Init+0x31c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d01f      	beq.n	80049ce <HAL_GPIO_Init+0x21e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a4f      	ldr	r2, [pc, #316]	; (8004ad0 <HAL_GPIO_Init+0x320>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d019      	beq.n	80049ca <HAL_GPIO_Init+0x21a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a4e      	ldr	r2, [pc, #312]	; (8004ad4 <HAL_GPIO_Init+0x324>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <HAL_GPIO_Init+0x216>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a4d      	ldr	r2, [pc, #308]	; (8004ad8 <HAL_GPIO_Init+0x328>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00d      	beq.n	80049c2 <HAL_GPIO_Init+0x212>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a4c      	ldr	r2, [pc, #304]	; (8004adc <HAL_GPIO_Init+0x32c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <HAL_GPIO_Init+0x20e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a4b      	ldr	r2, [pc, #300]	; (8004ae0 <HAL_GPIO_Init+0x330>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d101      	bne.n	80049ba <HAL_GPIO_Init+0x20a>
 80049b6:	2307      	movs	r3, #7
 80049b8:	e00e      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049ba:	2308      	movs	r3, #8
 80049bc:	e00c      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049be:	2306      	movs	r3, #6
 80049c0:	e00a      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049c2:	2305      	movs	r3, #5
 80049c4:	e008      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049c6:	2304      	movs	r3, #4
 80049c8:	e006      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049ca:	2303      	movs	r3, #3
 80049cc:	e004      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e002      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049d6:	2300      	movs	r3, #0
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	f002 0203 	and.w	r2, r2, #3
 80049de:	0092      	lsls	r2, r2, #2
 80049e0:	4093      	lsls	r3, r2
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049e8:	4935      	ldr	r1, [pc, #212]	; (8004ac0 <HAL_GPIO_Init+0x310>)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	089b      	lsrs	r3, r3, #2
 80049ee:	3302      	adds	r3, #2
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049f6:	4b3b      	ldr	r3, [pc, #236]	; (8004ae4 <HAL_GPIO_Init+0x334>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a1a:	4a32      	ldr	r2, [pc, #200]	; (8004ae4 <HAL_GPIO_Init+0x334>)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a20:	4b30      	ldr	r3, [pc, #192]	; (8004ae4 <HAL_GPIO_Init+0x334>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a44:	4a27      	ldr	r2, [pc, #156]	; (8004ae4 <HAL_GPIO_Init+0x334>)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a4a:	4b26      	ldr	r3, [pc, #152]	; (8004ae4 <HAL_GPIO_Init+0x334>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <HAL_GPIO_Init+0x334>)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_GPIO_Init+0x334>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4013      	ands	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a98:	4a12      	ldr	r2, [pc, #72]	; (8004ae4 <HAL_GPIO_Init+0x334>)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	61fb      	str	r3, [r7, #28]
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b0f      	cmp	r3, #15
 8004aa8:	f67f ae90 	bls.w	80047cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	3724      	adds	r7, #36	; 0x24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	40013800 	.word	0x40013800
 8004ac4:	40020000 	.word	0x40020000
 8004ac8:	40020400 	.word	0x40020400
 8004acc:	40020800 	.word	0x40020800
 8004ad0:	40020c00 	.word	0x40020c00
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40021400 	.word	0x40021400
 8004adc:	40021800 	.word	0x40021800
 8004ae0:	40021c00 	.word	0x40021c00
 8004ae4:	40013c00 	.word	0x40013c00

08004ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	807b      	strh	r3, [r7, #2]
 8004af4:	4613      	mov	r3, r2
 8004af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004af8:	787b      	ldrb	r3, [r7, #1]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004afe:	887a      	ldrh	r2, [r7, #2]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b04:	e003      	b.n	8004b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b06:	887b      	ldrh	r3, [r7, #2]
 8004b08:	041a      	lsls	r2, r3, #16
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	619a      	str	r2, [r3, #24]
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
	...

08004b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e12b      	b.n	8004d86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff f894 	bl	8003c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2224      	movs	r2, #36	; 0x24
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b80:	f001 fbba 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 8004b84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4a81      	ldr	r2, [pc, #516]	; (8004d90 <HAL_I2C_Init+0x274>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d807      	bhi.n	8004ba0 <HAL_I2C_Init+0x84>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a80      	ldr	r2, [pc, #512]	; (8004d94 <HAL_I2C_Init+0x278>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	bf94      	ite	ls
 8004b98:	2301      	movls	r3, #1
 8004b9a:	2300      	movhi	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	e006      	b.n	8004bae <HAL_I2C_Init+0x92>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4a7d      	ldr	r2, [pc, #500]	; (8004d98 <HAL_I2C_Init+0x27c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	bf94      	ite	ls
 8004ba8:	2301      	movls	r3, #1
 8004baa:	2300      	movhi	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e0e7      	b.n	8004d86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4a78      	ldr	r2, [pc, #480]	; (8004d9c <HAL_I2C_Init+0x280>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	0c9b      	lsrs	r3, r3, #18
 8004bc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	4a6a      	ldr	r2, [pc, #424]	; (8004d90 <HAL_I2C_Init+0x274>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d802      	bhi.n	8004bf0 <HAL_I2C_Init+0xd4>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	3301      	adds	r3, #1
 8004bee:	e009      	b.n	8004c04 <HAL_I2C_Init+0xe8>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bf6:	fb02 f303 	mul.w	r3, r2, r3
 8004bfa:	4a69      	ldr	r2, [pc, #420]	; (8004da0 <HAL_I2C_Init+0x284>)
 8004bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004c00:	099b      	lsrs	r3, r3, #6
 8004c02:	3301      	adds	r3, #1
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	495c      	ldr	r1, [pc, #368]	; (8004d90 <HAL_I2C_Init+0x274>)
 8004c20:	428b      	cmp	r3, r1
 8004c22:	d819      	bhi.n	8004c58 <HAL_I2C_Init+0x13c>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1e59      	subs	r1, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c32:	1c59      	adds	r1, r3, #1
 8004c34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c38:	400b      	ands	r3, r1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_I2C_Init+0x138>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1e59      	subs	r1, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c52:	e051      	b.n	8004cf8 <HAL_I2C_Init+0x1dc>
 8004c54:	2304      	movs	r3, #4
 8004c56:	e04f      	b.n	8004cf8 <HAL_I2C_Init+0x1dc>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d111      	bne.n	8004c84 <HAL_I2C_Init+0x168>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1e58      	subs	r0, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6859      	ldr	r1, [r3, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	440b      	add	r3, r1
 8004c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c72:	3301      	adds	r3, #1
 8004c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	e012      	b.n	8004caa <HAL_I2C_Init+0x18e>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	1e58      	subs	r0, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6859      	ldr	r1, [r3, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	0099      	lsls	r1, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_I2C_Init+0x196>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e022      	b.n	8004cf8 <HAL_I2C_Init+0x1dc>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10e      	bne.n	8004cd8 <HAL_I2C_Init+0x1bc>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1e58      	subs	r0, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6859      	ldr	r1, [r3, #4]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	440b      	add	r3, r1
 8004cc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ccc:	3301      	adds	r3, #1
 8004cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd6:	e00f      	b.n	8004cf8 <HAL_I2C_Init+0x1dc>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	1e58      	subs	r0, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6859      	ldr	r1, [r3, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	0099      	lsls	r1, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	6809      	ldr	r1, [r1, #0]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69da      	ldr	r2, [r3, #28]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6911      	ldr	r1, [r2, #16]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68d2      	ldr	r2, [r2, #12]
 8004d32:	4311      	orrs	r1, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695a      	ldr	r2, [r3, #20]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	000186a0 	.word	0x000186a0
 8004d94:	001e847f 	.word	0x001e847f
 8004d98:	003d08ff 	.word	0x003d08ff
 8004d9c:	431bde83 	.word	0x431bde83
 8004da0:	10624dd3 	.word	0x10624dd3

08004da4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	461a      	mov	r2, r3
 8004db0:	460b      	mov	r3, r1
 8004db2:	817b      	strh	r3, [r7, #10]
 8004db4:	4613      	mov	r3, r2
 8004db6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004db8:	f7ff fb26 	bl	8004408 <HAL_GetTick>
 8004dbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	f040 80e0 	bne.w	8004f8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2319      	movs	r3, #25
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	4970      	ldr	r1, [pc, #448]	; (8004f98 <HAL_I2C_Master_Transmit+0x1f4>)
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 fc58 	bl	800568c <I2C_WaitOnFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004de2:	2302      	movs	r3, #2
 8004de4:	e0d3      	b.n	8004f8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_I2C_Master_Transmit+0x50>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e0cc      	b.n	8004f8e <HAL_I2C_Master_Transmit+0x1ea>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d007      	beq.n	8004e1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2221      	movs	r2, #33	; 0x21
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2210      	movs	r2, #16
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	893a      	ldrh	r2, [r7, #8]
 8004e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4a50      	ldr	r2, [pc, #320]	; (8004f9c <HAL_I2C_Master_Transmit+0x1f8>)
 8004e5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e5c:	8979      	ldrh	r1, [r7, #10]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6a3a      	ldr	r2, [r7, #32]
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fac2 	bl	80053ec <I2C_MasterRequestWrite>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e08d      	b.n	8004f8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e72:	2300      	movs	r3, #0
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e88:	e066      	b.n	8004f58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	6a39      	ldr	r1, [r7, #32]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fcd2 	bl	8005838 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00d      	beq.n	8004eb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d107      	bne.n	8004eb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e06b      	b.n	8004f8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	781a      	ldrb	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d11b      	bne.n	8004f2c <HAL_I2C_Master_Transmit+0x188>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d017      	beq.n	8004f2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	781a      	ldrb	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	6a39      	ldr	r1, [r7, #32]
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fcc2 	bl	80058ba <I2C_WaitOnBTFFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00d      	beq.n	8004f58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d107      	bne.n	8004f54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e01a      	b.n	8004f8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d194      	bne.n	8004e8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f8c:	2302      	movs	r3, #2
  }
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	00100002 	.word	0x00100002
 8004f9c:	ffff0000 	.word	0xffff0000

08004fa0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08c      	sub	sp, #48	; 0x30
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	461a      	mov	r2, r3
 8004fac:	460b      	mov	r3, r1
 8004fae:	817b      	strh	r3, [r7, #10]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fb4:	f7ff fa28 	bl	8004408 <HAL_GetTick>
 8004fb8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	f040 820b 	bne.w	80053de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	2319      	movs	r3, #25
 8004fce:	2201      	movs	r2, #1
 8004fd0:	497c      	ldr	r1, [pc, #496]	; (80051c4 <HAL_I2C_Master_Receive+0x224>)
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fb5a 	bl	800568c <I2C_WaitOnFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e1fe      	b.n	80053e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_I2C_Master_Receive+0x50>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e1f7      	b.n	80053e0 <HAL_I2C_Master_Receive+0x440>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b01      	cmp	r3, #1
 8005004:	d007      	beq.n	8005016 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0201 	orr.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005024:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2222      	movs	r2, #34	; 0x22
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2210      	movs	r2, #16
 8005032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	893a      	ldrh	r2, [r7, #8]
 8005046:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4a5c      	ldr	r2, [pc, #368]	; (80051c8 <HAL_I2C_Master_Receive+0x228>)
 8005056:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005058:	8979      	ldrh	r1, [r7, #10]
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fa46 	bl	80054f0 <I2C_MasterRequestRead>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e1b8      	b.n	80053e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005072:	2b00      	cmp	r3, #0
 8005074:	d113      	bne.n	800509e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005076:	2300      	movs	r3, #0
 8005078:	623b      	str	r3, [r7, #32]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	623b      	str	r3, [r7, #32]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	623b      	str	r3, [r7, #32]
 800508a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	e18c      	b.n	80053b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d11b      	bne.n	80050de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	61fb      	str	r3, [r7, #28]
 80050ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	e16c      	b.n	80053b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d11b      	bne.n	800511e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005106:	2300      	movs	r3, #0
 8005108:	61bb      	str	r3, [r7, #24]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	61bb      	str	r3, [r7, #24]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	e14c      	b.n	80053b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800512c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005144:	e138      	b.n	80053b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514a:	2b03      	cmp	r3, #3
 800514c:	f200 80f1 	bhi.w	8005332 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005154:	2b01      	cmp	r3, #1
 8005156:	d123      	bne.n	80051a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800515a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 fbed 	bl	800593c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e139      	b.n	80053e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800519e:	e10b      	b.n	80053b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d14e      	bne.n	8005246 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	2200      	movs	r2, #0
 80051b0:	4906      	ldr	r1, [pc, #24]	; (80051cc <HAL_I2C_Master_Receive+0x22c>)
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 fa6a 	bl	800568c <I2C_WaitOnFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d008      	beq.n	80051d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e10e      	b.n	80053e0 <HAL_I2C_Master_Receive+0x440>
 80051c2:	bf00      	nop
 80051c4:	00100002 	.word	0x00100002
 80051c8:	ffff0000 	.word	0xffff0000
 80051cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005244:	e0b8      	b.n	80053b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	2200      	movs	r2, #0
 800524e:	4966      	ldr	r1, [pc, #408]	; (80053e8 <HAL_I2C_Master_Receive+0x448>)
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 fa1b 	bl	800568c <I2C_WaitOnFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0bf      	b.n	80053e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800526e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	2200      	movs	r2, #0
 80052aa:	494f      	ldr	r1, [pc, #316]	; (80053e8 <HAL_I2C_Master_Receive+0x448>)
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f9ed 	bl	800568c <I2C_WaitOnFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e091      	b.n	80053e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005330:	e042      	b.n	80053b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005334:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 fb00 	bl	800593c <I2C_WaitOnRXNEFlagUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e04c      	b.n	80053e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b04      	cmp	r3, #4
 8005384:	d118      	bne.n	80053b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f47f aec2 	bne.w	8005146 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	e000      	b.n	80053e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80053de:	2302      	movs	r3, #2
  }
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3728      	adds	r7, #40	; 0x28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	00010004 	.word	0x00010004

080053ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	460b      	mov	r3, r1
 80053fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b08      	cmp	r3, #8
 8005406:	d006      	beq.n	8005416 <I2C_MasterRequestWrite+0x2a>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d003      	beq.n	8005416 <I2C_MasterRequestWrite+0x2a>
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005414:	d108      	bne.n	8005428 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e00b      	b.n	8005440 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	2b12      	cmp	r3, #18
 800542e:	d107      	bne.n	8005440 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800543e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f91d 	bl	800568c <I2C_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00d      	beq.n	8005474 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005466:	d103      	bne.n	8005470 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800546e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e035      	b.n	80054e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800547c:	d108      	bne.n	8005490 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800547e:	897b      	ldrh	r3, [r7, #10]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800548c:	611a      	str	r2, [r3, #16]
 800548e:	e01b      	b.n	80054c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005490:	897b      	ldrh	r3, [r7, #10]
 8005492:	11db      	asrs	r3, r3, #7
 8005494:	b2db      	uxtb	r3, r3
 8005496:	f003 0306 	and.w	r3, r3, #6
 800549a:	b2db      	uxtb	r3, r3
 800549c:	f063 030f 	orn	r3, r3, #15
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	490e      	ldr	r1, [pc, #56]	; (80054e8 <I2C_MasterRequestWrite+0xfc>)
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f943 	bl	800573a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e010      	b.n	80054e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054be:	897b      	ldrh	r3, [r7, #10]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4907      	ldr	r1, [pc, #28]	; (80054ec <I2C_MasterRequestWrite+0x100>)
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f933 	bl	800573a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	00010008 	.word	0x00010008
 80054ec:	00010002 	.word	0x00010002

080054f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	460b      	mov	r3, r1
 80054fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005514:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d006      	beq.n	800552a <I2C_MasterRequestRead+0x3a>
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d003      	beq.n	800552a <I2C_MasterRequestRead+0x3a>
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005528:	d108      	bne.n	800553c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e00b      	b.n	8005554 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005540:	2b11      	cmp	r3, #17
 8005542:	d107      	bne.n	8005554 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005552:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f893 	bl	800568c <I2C_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00d      	beq.n	8005588 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557a:	d103      	bne.n	8005584 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e079      	b.n	800567c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005590:	d108      	bne.n	80055a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005592:	897b      	ldrh	r3, [r7, #10]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	b2da      	uxtb	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	611a      	str	r2, [r3, #16]
 80055a2:	e05f      	b.n	8005664 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055a4:	897b      	ldrh	r3, [r7, #10]
 80055a6:	11db      	asrs	r3, r3, #7
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f003 0306 	and.w	r3, r3, #6
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f063 030f 	orn	r3, r3, #15
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	4930      	ldr	r1, [pc, #192]	; (8005684 <I2C_MasterRequestRead+0x194>)
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f8b9 	bl	800573a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e054      	b.n	800567c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055d2:	897b      	ldrh	r3, [r7, #10]
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	4929      	ldr	r1, [pc, #164]	; (8005688 <I2C_MasterRequestRead+0x198>)
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f8a9 	bl	800573a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e044      	b.n	800567c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f2:	2300      	movs	r3, #0
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005616:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f831 	bl	800568c <I2C_WaitOnFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00d      	beq.n	800564c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563e:	d103      	bne.n	8005648 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005646:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e017      	b.n	800567c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800564c:	897b      	ldrh	r3, [r7, #10]
 800564e:	11db      	asrs	r3, r3, #7
 8005650:	b2db      	uxtb	r3, r3
 8005652:	f003 0306 	and.w	r3, r3, #6
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f063 030e 	orn	r3, r3, #14
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	4907      	ldr	r1, [pc, #28]	; (8005688 <I2C_MasterRequestRead+0x198>)
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f865 	bl	800573a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	00010008 	.word	0x00010008
 8005688:	00010002 	.word	0x00010002

0800568c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	4613      	mov	r3, r2
 800569a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800569c:	e025      	b.n	80056ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056a4:	d021      	beq.n	80056ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a6:	f7fe feaf 	bl	8004408 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d302      	bcc.n	80056bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d116      	bne.n	80056ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f043 0220 	orr.w	r2, r3, #32
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e023      	b.n	8005732 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d10d      	bne.n	8005710 <I2C_WaitOnFlagUntilTimeout+0x84>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	43da      	mvns	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4013      	ands	r3, r2
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	bf0c      	ite	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	2300      	movne	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	e00c      	b.n	800572a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	43da      	mvns	r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4013      	ands	r3, r2
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	bf0c      	ite	eq
 8005722:	2301      	moveq	r3, #1
 8005724:	2300      	movne	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	429a      	cmp	r2, r3
 800572e:	d0b6      	beq.n	800569e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	607a      	str	r2, [r7, #4]
 8005746:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005748:	e051      	b.n	80057ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005758:	d123      	bne.n	80057a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005768:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005772:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f043 0204 	orr.w	r2, r3, #4
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e046      	b.n	8005830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a8:	d021      	beq.n	80057ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057aa:	f7fe fe2d 	bl	8004408 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d302      	bcc.n	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d116      	bne.n	80057ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	f043 0220 	orr.w	r2, r3, #32
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e020      	b.n	8005830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	0c1b      	lsrs	r3, r3, #16
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d10c      	bne.n	8005812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	43da      	mvns	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4013      	ands	r3, r2
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	bf14      	ite	ne
 800580a:	2301      	movne	r3, #1
 800580c:	2300      	moveq	r3, #0
 800580e:	b2db      	uxtb	r3, r3
 8005810:	e00b      	b.n	800582a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	43da      	mvns	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4013      	ands	r3, r2
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	bf14      	ite	ne
 8005824:	2301      	movne	r3, #1
 8005826:	2300      	moveq	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d18d      	bne.n	800574a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005844:	e02d      	b.n	80058a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 f8ce 	bl	80059e8 <I2C_IsAcknowledgeFailed>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e02d      	b.n	80058b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800585c:	d021      	beq.n	80058a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585e:	f7fe fdd3 	bl	8004408 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	429a      	cmp	r2, r3
 800586c:	d302      	bcc.n	8005874 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d116      	bne.n	80058a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f043 0220 	orr.w	r2, r3, #32
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e007      	b.n	80058b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ac:	2b80      	cmp	r3, #128	; 0x80
 80058ae:	d1ca      	bne.n	8005846 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058c6:	e02d      	b.n	8005924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f88d 	bl	80059e8 <I2C_IsAcknowledgeFailed>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e02d      	b.n	8005934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058de:	d021      	beq.n	8005924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e0:	f7fe fd92 	bl	8004408 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d302      	bcc.n	80058f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d116      	bne.n	8005924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	f043 0220 	orr.w	r2, r3, #32
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e007      	b.n	8005934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f003 0304 	and.w	r3, r3, #4
 800592e:	2b04      	cmp	r3, #4
 8005930:	d1ca      	bne.n	80058c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005948:	e042      	b.n	80059d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b10      	cmp	r3, #16
 8005956:	d119      	bne.n	800598c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0210 	mvn.w	r2, #16
 8005960:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e029      	b.n	80059e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800598c:	f7fe fd3c 	bl	8004408 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	429a      	cmp	r2, r3
 800599a:	d302      	bcc.n	80059a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d116      	bne.n	80059d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	f043 0220 	orr.w	r2, r3, #32
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e007      	b.n	80059e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b40      	cmp	r3, #64	; 0x40
 80059dc:	d1b5      	bne.n	800594a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fe:	d11b      	bne.n	8005a38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	f043 0204 	orr.w	r2, r3, #4
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
	...

08005a48 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005a54:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <HAL_PWR_EnableBkUpAccess+0x24>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005a5a:	687b      	ldr	r3, [r7, #4]
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	420e0020 	.word	0x420e0020
 8005a6c:	40007000 	.word	0x40007000

08005a70 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005a76:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005a7c:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <HAL_PWR_DisableBkUpAccess+0x24>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005a82:	687b      	ldr	r3, [r7, #4]
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	420e0020 	.word	0x420e0020
 8005a94:	40007000 	.word	0x40007000

08005a98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e267      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d075      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ab6:	4b88      	ldr	r3, [pc, #544]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 030c 	and.w	r3, r3, #12
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d00c      	beq.n	8005adc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ac2:	4b85      	ldr	r3, [pc, #532]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d112      	bne.n	8005af4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ace:	4b82      	ldr	r3, [pc, #520]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ada:	d10b      	bne.n	8005af4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005adc:	4b7e      	ldr	r3, [pc, #504]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d05b      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x108>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d157      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e242      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005afc:	d106      	bne.n	8005b0c <HAL_RCC_OscConfig+0x74>
 8005afe:	4b76      	ldr	r3, [pc, #472]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a75      	ldr	r2, [pc, #468]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	e01d      	b.n	8005b48 <HAL_RCC_OscConfig+0xb0>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b14:	d10c      	bne.n	8005b30 <HAL_RCC_OscConfig+0x98>
 8005b16:	4b70      	ldr	r3, [pc, #448]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a6f      	ldr	r2, [pc, #444]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	4b6d      	ldr	r3, [pc, #436]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a6c      	ldr	r2, [pc, #432]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	e00b      	b.n	8005b48 <HAL_RCC_OscConfig+0xb0>
 8005b30:	4b69      	ldr	r3, [pc, #420]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a68      	ldr	r2, [pc, #416]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	4b66      	ldr	r3, [pc, #408]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a65      	ldr	r2, [pc, #404]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d013      	beq.n	8005b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b50:	f7fe fc5a 	bl	8004408 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b58:	f7fe fc56 	bl	8004408 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b64      	cmp	r3, #100	; 0x64
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e207      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b6a:	4b5b      	ldr	r3, [pc, #364]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f0      	beq.n	8005b58 <HAL_RCC_OscConfig+0xc0>
 8005b76:	e014      	b.n	8005ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b78:	f7fe fc46 	bl	8004408 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b80:	f7fe fc42 	bl	8004408 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b64      	cmp	r3, #100	; 0x64
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e1f3      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b92:	4b51      	ldr	r3, [pc, #324]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f0      	bne.n	8005b80 <HAL_RCC_OscConfig+0xe8>
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d063      	beq.n	8005c76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bae:	4b4a      	ldr	r3, [pc, #296]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 030c 	and.w	r3, r3, #12
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00b      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bba:	4b47      	ldr	r3, [pc, #284]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d11c      	bne.n	8005c00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bc6:	4b44      	ldr	r3, [pc, #272]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d116      	bne.n	8005c00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bd2:	4b41      	ldr	r3, [pc, #260]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_RCC_OscConfig+0x152>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d001      	beq.n	8005bea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e1c7      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bea:	4b3b      	ldr	r3, [pc, #236]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4937      	ldr	r1, [pc, #220]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bfe:	e03a      	b.n	8005c76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d020      	beq.n	8005c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c08:	4b34      	ldr	r3, [pc, #208]	; (8005cdc <HAL_RCC_OscConfig+0x244>)
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0e:	f7fe fbfb 	bl	8004408 <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c16:	f7fe fbf7 	bl	8004408 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e1a8      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c28:	4b2b      	ldr	r3, [pc, #172]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0f0      	beq.n	8005c16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c34:	4b28      	ldr	r3, [pc, #160]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	4925      	ldr	r1, [pc, #148]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	600b      	str	r3, [r1, #0]
 8005c48:	e015      	b.n	8005c76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c4a:	4b24      	ldr	r3, [pc, #144]	; (8005cdc <HAL_RCC_OscConfig+0x244>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c50:	f7fe fbda 	bl	8004408 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c58:	f7fe fbd6 	bl	8004408 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e187      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c6a:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f0      	bne.n	8005c58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d036      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d016      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c8a:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <HAL_RCC_OscConfig+0x248>)
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c90:	f7fe fbba 	bl	8004408 <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c98:	f7fe fbb6 	bl	8004408 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e167      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <HAL_RCC_OscConfig+0x240>)
 8005cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0x200>
 8005cb6:	e01b      	b.n	8005cf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <HAL_RCC_OscConfig+0x248>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cbe:	f7fe fba3 	bl	8004408 <HAL_GetTick>
 8005cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc4:	e00e      	b.n	8005ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cc6:	f7fe fb9f 	bl	8004408 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d907      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e150      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	42470000 	.word	0x42470000
 8005ce0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ce4:	4b88      	ldr	r3, [pc, #544]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1ea      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8097 	beq.w	8005e2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d02:	4b81      	ldr	r3, [pc, #516]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10f      	bne.n	8005d2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60bb      	str	r3, [r7, #8]
 8005d12:	4b7d      	ldr	r3, [pc, #500]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	4a7c      	ldr	r2, [pc, #496]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d1e:	4b7a      	ldr	r3, [pc, #488]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d26:	60bb      	str	r3, [r7, #8]
 8005d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d2e:	4b77      	ldr	r3, [pc, #476]	; (8005f0c <HAL_RCC_OscConfig+0x474>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d118      	bne.n	8005d6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d3a:	4b74      	ldr	r3, [pc, #464]	; (8005f0c <HAL_RCC_OscConfig+0x474>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a73      	ldr	r2, [pc, #460]	; (8005f0c <HAL_RCC_OscConfig+0x474>)
 8005d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d46:	f7fe fb5f 	bl	8004408 <HAL_GetTick>
 8005d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d4c:	e008      	b.n	8005d60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d4e:	f7fe fb5b 	bl	8004408 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e10c      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d60:	4b6a      	ldr	r3, [pc, #424]	; (8005f0c <HAL_RCC_OscConfig+0x474>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0f0      	beq.n	8005d4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d106      	bne.n	8005d82 <HAL_RCC_OscConfig+0x2ea>
 8005d74:	4b64      	ldr	r3, [pc, #400]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d78:	4a63      	ldr	r2, [pc, #396]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d80:	e01c      	b.n	8005dbc <HAL_RCC_OscConfig+0x324>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b05      	cmp	r3, #5
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCC_OscConfig+0x30c>
 8005d8a:	4b5f      	ldr	r3, [pc, #380]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8e:	4a5e      	ldr	r2, [pc, #376]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005d90:	f043 0304 	orr.w	r3, r3, #4
 8005d94:	6713      	str	r3, [r2, #112]	; 0x70
 8005d96:	4b5c      	ldr	r3, [pc, #368]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9a:	4a5b      	ldr	r2, [pc, #364]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005d9c:	f043 0301 	orr.w	r3, r3, #1
 8005da0:	6713      	str	r3, [r2, #112]	; 0x70
 8005da2:	e00b      	b.n	8005dbc <HAL_RCC_OscConfig+0x324>
 8005da4:	4b58      	ldr	r3, [pc, #352]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da8:	4a57      	ldr	r2, [pc, #348]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005daa:	f023 0301 	bic.w	r3, r3, #1
 8005dae:	6713      	str	r3, [r2, #112]	; 0x70
 8005db0:	4b55      	ldr	r3, [pc, #340]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db4:	4a54      	ldr	r2, [pc, #336]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005db6:	f023 0304 	bic.w	r3, r3, #4
 8005dba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d015      	beq.n	8005df0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc4:	f7fe fb20 	bl	8004408 <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dca:	e00a      	b.n	8005de2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dcc:	f7fe fb1c 	bl	8004408 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e0cb      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de2:	4b49      	ldr	r3, [pc, #292]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0ee      	beq.n	8005dcc <HAL_RCC_OscConfig+0x334>
 8005dee:	e014      	b.n	8005e1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005df0:	f7fe fb0a 	bl	8004408 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005df6:	e00a      	b.n	8005e0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005df8:	f7fe fb06 	bl	8004408 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e0b5      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e0e:	4b3e      	ldr	r3, [pc, #248]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1ee      	bne.n	8005df8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d105      	bne.n	8005e2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e20:	4b39      	ldr	r3, [pc, #228]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	4a38      	ldr	r2, [pc, #224]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80a1 	beq.w	8005f78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e36:	4b34      	ldr	r3, [pc, #208]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d05c      	beq.n	8005efc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d141      	bne.n	8005ece <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e4a:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <HAL_RCC_OscConfig+0x478>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e50:	f7fe fada 	bl	8004408 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e58:	f7fe fad6 	bl	8004408 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e087      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e6a:	4b27      	ldr	r3, [pc, #156]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1f0      	bne.n	8005e58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69da      	ldr	r2, [r3, #28]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	019b      	lsls	r3, r3, #6
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8c:	085b      	lsrs	r3, r3, #1
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	041b      	lsls	r3, r3, #16
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	061b      	lsls	r3, r3, #24
 8005e9a:	491b      	ldr	r1, [pc, #108]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ea0:	4b1b      	ldr	r3, [pc, #108]	; (8005f10 <HAL_RCC_OscConfig+0x478>)
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea6:	f7fe faaf 	bl	8004408 <HAL_GetTick>
 8005eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eac:	e008      	b.n	8005ec0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eae:	f7fe faab 	bl	8004408 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e05c      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec0:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0f0      	beq.n	8005eae <HAL_RCC_OscConfig+0x416>
 8005ecc:	e054      	b.n	8005f78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ece:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <HAL_RCC_OscConfig+0x478>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed4:	f7fe fa98 	bl	8004408 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005edc:	f7fe fa94 	bl	8004408 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e045      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eee:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <HAL_RCC_OscConfig+0x470>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1f0      	bne.n	8005edc <HAL_RCC_OscConfig+0x444>
 8005efa:	e03d      	b.n	8005f78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d107      	bne.n	8005f14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e038      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
 8005f08:	40023800 	.word	0x40023800
 8005f0c:	40007000 	.word	0x40007000
 8005f10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f14:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <HAL_RCC_OscConfig+0x4ec>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d028      	beq.n	8005f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d121      	bne.n	8005f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d11a      	bne.n	8005f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f44:	4013      	ands	r3, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d111      	bne.n	8005f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d107      	bne.n	8005f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d001      	beq.n	8005f78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40023800 	.word	0x40023800

08005f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e0cc      	b.n	8006136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f9c:	4b68      	ldr	r3, [pc, #416]	; (8006140 <HAL_RCC_ClockConfig+0x1b8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d90c      	bls.n	8005fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005faa:	4b65      	ldr	r3, [pc, #404]	; (8006140 <HAL_RCC_ClockConfig+0x1b8>)
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fb2:	4b63      	ldr	r3, [pc, #396]	; (8006140 <HAL_RCC_ClockConfig+0x1b8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d001      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e0b8      	b.n	8006136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d020      	beq.n	8006012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fdc:	4b59      	ldr	r3, [pc, #356]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	4a58      	ldr	r2, [pc, #352]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0308 	and.w	r3, r3, #8
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ff4:	4b53      	ldr	r3, [pc, #332]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	4a52      	ldr	r2, [pc, #328]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006000:	4b50      	ldr	r3, [pc, #320]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	494d      	ldr	r1, [pc, #308]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 800600e:	4313      	orrs	r3, r2
 8006010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d044      	beq.n	80060a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d107      	bne.n	8006036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006026:	4b47      	ldr	r3, [pc, #284]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d119      	bne.n	8006066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e07f      	b.n	8006136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b02      	cmp	r3, #2
 800603c:	d003      	beq.n	8006046 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006042:	2b03      	cmp	r3, #3
 8006044:	d107      	bne.n	8006056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006046:	4b3f      	ldr	r3, [pc, #252]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e06f      	b.n	8006136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006056:	4b3b      	ldr	r3, [pc, #236]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e067      	b.n	8006136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006066:	4b37      	ldr	r3, [pc, #220]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f023 0203 	bic.w	r2, r3, #3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	4934      	ldr	r1, [pc, #208]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 8006074:	4313      	orrs	r3, r2
 8006076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006078:	f7fe f9c6 	bl	8004408 <HAL_GetTick>
 800607c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800607e:	e00a      	b.n	8006096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006080:	f7fe f9c2 	bl	8004408 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	f241 3288 	movw	r2, #5000	; 0x1388
 800608e:	4293      	cmp	r3, r2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e04f      	b.n	8006136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006096:	4b2b      	ldr	r3, [pc, #172]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 020c 	and.w	r2, r3, #12
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d1eb      	bne.n	8006080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060a8:	4b25      	ldr	r3, [pc, #148]	; (8006140 <HAL_RCC_ClockConfig+0x1b8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d20c      	bcs.n	80060d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060b6:	4b22      	ldr	r3, [pc, #136]	; (8006140 <HAL_RCC_ClockConfig+0x1b8>)
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060be:	4b20      	ldr	r3, [pc, #128]	; (8006140 <HAL_RCC_ClockConfig+0x1b8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d001      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e032      	b.n	8006136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060dc:	4b19      	ldr	r3, [pc, #100]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4916      	ldr	r1, [pc, #88]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0308 	and.w	r3, r3, #8
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d009      	beq.n	800610e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060fa:	4b12      	ldr	r3, [pc, #72]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	490e      	ldr	r1, [pc, #56]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	4313      	orrs	r3, r2
 800610c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800610e:	f000 f821 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 8006112:	4602      	mov	r2, r0
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <HAL_RCC_ClockConfig+0x1bc>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	091b      	lsrs	r3, r3, #4
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	490a      	ldr	r1, [pc, #40]	; (8006148 <HAL_RCC_ClockConfig+0x1c0>)
 8006120:	5ccb      	ldrb	r3, [r1, r3]
 8006122:	fa22 f303 	lsr.w	r3, r2, r3
 8006126:	4a09      	ldr	r2, [pc, #36]	; (800614c <HAL_RCC_ClockConfig+0x1c4>)
 8006128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800612a:	4b09      	ldr	r3, [pc, #36]	; (8006150 <HAL_RCC_ClockConfig+0x1c8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f7fe f926 	bl	8004380 <HAL_InitTick>

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	40023c00 	.word	0x40023c00
 8006144:	40023800 	.word	0x40023800
 8006148:	080106bc 	.word	0x080106bc
 800614c:	20000008 	.word	0x20000008
 8006150:	2000000c 	.word	0x2000000c

08006154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006158:	b090      	sub	sp, #64	; 0x40
 800615a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	637b      	str	r3, [r7, #52]	; 0x34
 8006160:	2300      	movs	r3, #0
 8006162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006164:	2300      	movs	r3, #0
 8006166:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800616c:	4b59      	ldr	r3, [pc, #356]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 030c 	and.w	r3, r3, #12
 8006174:	2b08      	cmp	r3, #8
 8006176:	d00d      	beq.n	8006194 <HAL_RCC_GetSysClockFreq+0x40>
 8006178:	2b08      	cmp	r3, #8
 800617a:	f200 80a1 	bhi.w	80062c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <HAL_RCC_GetSysClockFreq+0x34>
 8006182:	2b04      	cmp	r3, #4
 8006184:	d003      	beq.n	800618e <HAL_RCC_GetSysClockFreq+0x3a>
 8006186:	e09b      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006188:	4b53      	ldr	r3, [pc, #332]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800618a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800618c:	e09b      	b.n	80062c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800618e:	4b53      	ldr	r3, [pc, #332]	; (80062dc <HAL_RCC_GetSysClockFreq+0x188>)
 8006190:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006192:	e098      	b.n	80062c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006194:	4b4f      	ldr	r3, [pc, #316]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800619c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800619e:	4b4d      	ldr	r3, [pc, #308]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d028      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061aa:	4b4a      	ldr	r3, [pc, #296]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	099b      	lsrs	r3, r3, #6
 80061b0:	2200      	movs	r2, #0
 80061b2:	623b      	str	r3, [r7, #32]
 80061b4:	627a      	str	r2, [r7, #36]	; 0x24
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80061bc:	2100      	movs	r1, #0
 80061be:	4b47      	ldr	r3, [pc, #284]	; (80062dc <HAL_RCC_GetSysClockFreq+0x188>)
 80061c0:	fb03 f201 	mul.w	r2, r3, r1
 80061c4:	2300      	movs	r3, #0
 80061c6:	fb00 f303 	mul.w	r3, r0, r3
 80061ca:	4413      	add	r3, r2
 80061cc:	4a43      	ldr	r2, [pc, #268]	; (80062dc <HAL_RCC_GetSysClockFreq+0x188>)
 80061ce:	fba0 1202 	umull	r1, r2, r0, r2
 80061d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061d4:	460a      	mov	r2, r1
 80061d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80061d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061da:	4413      	add	r3, r2
 80061dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e0:	2200      	movs	r2, #0
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	61fa      	str	r2, [r7, #28]
 80061e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80061ee:	f7fa fd2b 	bl	8000c48 <__aeabi_uldivmod>
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	4613      	mov	r3, r2
 80061f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061fa:	e053      	b.n	80062a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061fc:	4b35      	ldr	r3, [pc, #212]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	099b      	lsrs	r3, r3, #6
 8006202:	2200      	movs	r2, #0
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	617a      	str	r2, [r7, #20]
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800620e:	f04f 0b00 	mov.w	fp, #0
 8006212:	4652      	mov	r2, sl
 8006214:	465b      	mov	r3, fp
 8006216:	f04f 0000 	mov.w	r0, #0
 800621a:	f04f 0100 	mov.w	r1, #0
 800621e:	0159      	lsls	r1, r3, #5
 8006220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006224:	0150      	lsls	r0, r2, #5
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	ebb2 080a 	subs.w	r8, r2, sl
 800622e:	eb63 090b 	sbc.w	r9, r3, fp
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800623e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006242:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006246:	ebb2 0408 	subs.w	r4, r2, r8
 800624a:	eb63 0509 	sbc.w	r5, r3, r9
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	00eb      	lsls	r3, r5, #3
 8006258:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800625c:	00e2      	lsls	r2, r4, #3
 800625e:	4614      	mov	r4, r2
 8006260:	461d      	mov	r5, r3
 8006262:	eb14 030a 	adds.w	r3, r4, sl
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	eb45 030b 	adc.w	r3, r5, fp
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	e9d7 4500 	ldrd	r4, r5, [r7]
 800627a:	4629      	mov	r1, r5
 800627c:	028b      	lsls	r3, r1, #10
 800627e:	4621      	mov	r1, r4
 8006280:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006284:	4621      	mov	r1, r4
 8006286:	028a      	lsls	r2, r1, #10
 8006288:	4610      	mov	r0, r2
 800628a:	4619      	mov	r1, r3
 800628c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628e:	2200      	movs	r2, #0
 8006290:	60bb      	str	r3, [r7, #8]
 8006292:	60fa      	str	r2, [r7, #12]
 8006294:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006298:	f7fa fcd6 	bl	8000c48 <__aeabi_uldivmod>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4613      	mov	r3, r2
 80062a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062a4:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	0c1b      	lsrs	r3, r3, #16
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	3301      	adds	r3, #1
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80062b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80062be:	e002      	b.n	80062c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062c0:	4b05      	ldr	r3, [pc, #20]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80062c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80062c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3740      	adds	r7, #64	; 0x40
 80062cc:	46bd      	mov	sp, r7
 80062ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062d2:	bf00      	nop
 80062d4:	40023800 	.word	0x40023800
 80062d8:	00f42400 	.word	0x00f42400
 80062dc:	017d7840 	.word	0x017d7840

080062e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062e4:	4b03      	ldr	r3, [pc, #12]	; (80062f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80062e6:	681b      	ldr	r3, [r3, #0]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000008 	.word	0x20000008

080062f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062fc:	f7ff fff0 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8006300:	4602      	mov	r2, r0
 8006302:	4b05      	ldr	r3, [pc, #20]	; (8006318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	0a9b      	lsrs	r3, r3, #10
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	4903      	ldr	r1, [pc, #12]	; (800631c <HAL_RCC_GetPCLK1Freq+0x24>)
 800630e:	5ccb      	ldrb	r3, [r1, r3]
 8006310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40023800 	.word	0x40023800
 800631c:	080106cc 	.word	0x080106cc

08006320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006324:	f7ff ffdc 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8006328:	4602      	mov	r2, r0
 800632a:	4b05      	ldr	r3, [pc, #20]	; (8006340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	0b5b      	lsrs	r3, r3, #13
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	4903      	ldr	r1, [pc, #12]	; (8006344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006336:	5ccb      	ldrb	r3, [r1, r3]
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800633c:	4618      	mov	r0, r3
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40023800 	.word	0x40023800
 8006344:	080106cc 	.word	0x080106cc

08006348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e041      	b.n	80063de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fd fcc6 	bl	8003d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3304      	adds	r3, #4
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f001 f828 	bl	80073dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d001      	beq.n	8006400 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e046      	b.n	800648e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a23      	ldr	r2, [pc, #140]	; (800649c <HAL_TIM_Base_Start+0xb4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d022      	beq.n	8006458 <HAL_TIM_Base_Start+0x70>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800641a:	d01d      	beq.n	8006458 <HAL_TIM_Base_Start+0x70>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a1f      	ldr	r2, [pc, #124]	; (80064a0 <HAL_TIM_Base_Start+0xb8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d018      	beq.n	8006458 <HAL_TIM_Base_Start+0x70>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a1e      	ldr	r2, [pc, #120]	; (80064a4 <HAL_TIM_Base_Start+0xbc>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d013      	beq.n	8006458 <HAL_TIM_Base_Start+0x70>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1c      	ldr	r2, [pc, #112]	; (80064a8 <HAL_TIM_Base_Start+0xc0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00e      	beq.n	8006458 <HAL_TIM_Base_Start+0x70>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1b      	ldr	r2, [pc, #108]	; (80064ac <HAL_TIM_Base_Start+0xc4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d009      	beq.n	8006458 <HAL_TIM_Base_Start+0x70>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a19      	ldr	r2, [pc, #100]	; (80064b0 <HAL_TIM_Base_Start+0xc8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d004      	beq.n	8006458 <HAL_TIM_Base_Start+0x70>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a18      	ldr	r2, [pc, #96]	; (80064b4 <HAL_TIM_Base_Start+0xcc>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d111      	bne.n	800647c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b06      	cmp	r3, #6
 8006468:	d010      	beq.n	800648c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0201 	orr.w	r2, r2, #1
 8006478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647a:	e007      	b.n	800648c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0201 	orr.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40010000 	.word	0x40010000
 80064a0:	40000400 	.word	0x40000400
 80064a4:	40000800 	.word	0x40000800
 80064a8:	40000c00 	.word	0x40000c00
 80064ac:	40010400 	.word	0x40010400
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40001800 	.word	0x40001800

080064b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e041      	b.n	800654e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f839 	bl	8006556 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3304      	adds	r3, #4
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f000 ff70 	bl	80073dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d109      	bne.n	8006590 <HAL_TIM_PWM_Start+0x24>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b01      	cmp	r3, #1
 8006586:	bf14      	ite	ne
 8006588:	2301      	movne	r3, #1
 800658a:	2300      	moveq	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	e022      	b.n	80065d6 <HAL_TIM_PWM_Start+0x6a>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b04      	cmp	r3, #4
 8006594:	d109      	bne.n	80065aa <HAL_TIM_PWM_Start+0x3e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b01      	cmp	r3, #1
 80065a0:	bf14      	ite	ne
 80065a2:	2301      	movne	r3, #1
 80065a4:	2300      	moveq	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	e015      	b.n	80065d6 <HAL_TIM_PWM_Start+0x6a>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d109      	bne.n	80065c4 <HAL_TIM_PWM_Start+0x58>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	bf14      	ite	ne
 80065bc:	2301      	movne	r3, #1
 80065be:	2300      	moveq	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	e008      	b.n	80065d6 <HAL_TIM_PWM_Start+0x6a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	bf14      	ite	ne
 80065d0:	2301      	movne	r3, #1
 80065d2:	2300      	moveq	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e07c      	b.n	80066d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d104      	bne.n	80065ee <HAL_TIM_PWM_Start+0x82>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ec:	e013      	b.n	8006616 <HAL_TIM_PWM_Start+0xaa>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d104      	bne.n	80065fe <HAL_TIM_PWM_Start+0x92>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065fc:	e00b      	b.n	8006616 <HAL_TIM_PWM_Start+0xaa>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b08      	cmp	r3, #8
 8006602:	d104      	bne.n	800660e <HAL_TIM_PWM_Start+0xa2>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800660c:	e003      	b.n	8006616 <HAL_TIM_PWM_Start+0xaa>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2202      	movs	r2, #2
 8006612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2201      	movs	r2, #1
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f001 faf0 	bl	8007c04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a2d      	ldr	r2, [pc, #180]	; (80066e0 <HAL_TIM_PWM_Start+0x174>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <HAL_TIM_PWM_Start+0xcc>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a2c      	ldr	r2, [pc, #176]	; (80066e4 <HAL_TIM_PWM_Start+0x178>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d101      	bne.n	800663c <HAL_TIM_PWM_Start+0xd0>
 8006638:	2301      	movs	r3, #1
 800663a:	e000      	b.n	800663e <HAL_TIM_PWM_Start+0xd2>
 800663c:	2300      	movs	r3, #0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006650:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a22      	ldr	r2, [pc, #136]	; (80066e0 <HAL_TIM_PWM_Start+0x174>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d022      	beq.n	80066a2 <HAL_TIM_PWM_Start+0x136>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006664:	d01d      	beq.n	80066a2 <HAL_TIM_PWM_Start+0x136>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a1f      	ldr	r2, [pc, #124]	; (80066e8 <HAL_TIM_PWM_Start+0x17c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d018      	beq.n	80066a2 <HAL_TIM_PWM_Start+0x136>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1d      	ldr	r2, [pc, #116]	; (80066ec <HAL_TIM_PWM_Start+0x180>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d013      	beq.n	80066a2 <HAL_TIM_PWM_Start+0x136>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1c      	ldr	r2, [pc, #112]	; (80066f0 <HAL_TIM_PWM_Start+0x184>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00e      	beq.n	80066a2 <HAL_TIM_PWM_Start+0x136>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a16      	ldr	r2, [pc, #88]	; (80066e4 <HAL_TIM_PWM_Start+0x178>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d009      	beq.n	80066a2 <HAL_TIM_PWM_Start+0x136>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a18      	ldr	r2, [pc, #96]	; (80066f4 <HAL_TIM_PWM_Start+0x188>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d004      	beq.n	80066a2 <HAL_TIM_PWM_Start+0x136>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a16      	ldr	r2, [pc, #88]	; (80066f8 <HAL_TIM_PWM_Start+0x18c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d111      	bne.n	80066c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b06      	cmp	r3, #6
 80066b2:	d010      	beq.n	80066d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0201 	orr.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c4:	e007      	b.n	80066d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0201 	orr.w	r2, r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40010400 	.word	0x40010400
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40001800 	.word	0x40001800

080066fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e041      	b.n	8006792 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f839 	bl	800679a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3304      	adds	r3, #4
 8006738:	4619      	mov	r1, r3
 800673a:	4610      	mov	r0, r2
 800673c:	f000 fe4e 	bl	80073dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
	...

080067b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d104      	bne.n	80067ce <HAL_TIM_IC_Start_IT+0x1e>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	e013      	b.n	80067f6 <HAL_TIM_IC_Start_IT+0x46>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d104      	bne.n	80067de <HAL_TIM_IC_Start_IT+0x2e>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	e00b      	b.n	80067f6 <HAL_TIM_IC_Start_IT+0x46>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d104      	bne.n	80067ee <HAL_TIM_IC_Start_IT+0x3e>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	e003      	b.n	80067f6 <HAL_TIM_IC_Start_IT+0x46>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d104      	bne.n	8006808 <HAL_TIM_IC_Start_IT+0x58>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006804:	b2db      	uxtb	r3, r3
 8006806:	e013      	b.n	8006830 <HAL_TIM_IC_Start_IT+0x80>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2b04      	cmp	r3, #4
 800680c:	d104      	bne.n	8006818 <HAL_TIM_IC_Start_IT+0x68>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006814:	b2db      	uxtb	r3, r3
 8006816:	e00b      	b.n	8006830 <HAL_TIM_IC_Start_IT+0x80>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b08      	cmp	r3, #8
 800681c:	d104      	bne.n	8006828 <HAL_TIM_IC_Start_IT+0x78>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006824:	b2db      	uxtb	r3, r3
 8006826:	e003      	b.n	8006830 <HAL_TIM_IC_Start_IT+0x80>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800682e:	b2db      	uxtb	r3, r3
 8006830:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006832:	7bbb      	ldrb	r3, [r7, #14]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d102      	bne.n	800683e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006838:	7b7b      	ldrb	r3, [r7, #13]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d001      	beq.n	8006842 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e0cc      	b.n	80069dc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d104      	bne.n	8006852 <HAL_TIM_IC_Start_IT+0xa2>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006850:	e013      	b.n	800687a <HAL_TIM_IC_Start_IT+0xca>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b04      	cmp	r3, #4
 8006856:	d104      	bne.n	8006862 <HAL_TIM_IC_Start_IT+0xb2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006860:	e00b      	b.n	800687a <HAL_TIM_IC_Start_IT+0xca>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b08      	cmp	r3, #8
 8006866:	d104      	bne.n	8006872 <HAL_TIM_IC_Start_IT+0xc2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006870:	e003      	b.n	800687a <HAL_TIM_IC_Start_IT+0xca>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2202      	movs	r2, #2
 8006876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <HAL_TIM_IC_Start_IT+0xda>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006888:	e013      	b.n	80068b2 <HAL_TIM_IC_Start_IT+0x102>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b04      	cmp	r3, #4
 800688e:	d104      	bne.n	800689a <HAL_TIM_IC_Start_IT+0xea>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006898:	e00b      	b.n	80068b2 <HAL_TIM_IC_Start_IT+0x102>
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b08      	cmp	r3, #8
 800689e:	d104      	bne.n	80068aa <HAL_TIM_IC_Start_IT+0xfa>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068a8:	e003      	b.n	80068b2 <HAL_TIM_IC_Start_IT+0x102>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2202      	movs	r2, #2
 80068ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b0c      	cmp	r3, #12
 80068b6:	d841      	bhi.n	800693c <HAL_TIM_IC_Start_IT+0x18c>
 80068b8:	a201      	add	r2, pc, #4	; (adr r2, 80068c0 <HAL_TIM_IC_Start_IT+0x110>)
 80068ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068be:	bf00      	nop
 80068c0:	080068f5 	.word	0x080068f5
 80068c4:	0800693d 	.word	0x0800693d
 80068c8:	0800693d 	.word	0x0800693d
 80068cc:	0800693d 	.word	0x0800693d
 80068d0:	08006907 	.word	0x08006907
 80068d4:	0800693d 	.word	0x0800693d
 80068d8:	0800693d 	.word	0x0800693d
 80068dc:	0800693d 	.word	0x0800693d
 80068e0:	08006919 	.word	0x08006919
 80068e4:	0800693d 	.word	0x0800693d
 80068e8:	0800693d 	.word	0x0800693d
 80068ec:	0800693d 	.word	0x0800693d
 80068f0:	0800692b 	.word	0x0800692b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0202 	orr.w	r2, r2, #2
 8006902:	60da      	str	r2, [r3, #12]
      break;
 8006904:	e01d      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0204 	orr.w	r2, r2, #4
 8006914:	60da      	str	r2, [r3, #12]
      break;
 8006916:	e014      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0208 	orr.w	r2, r2, #8
 8006926:	60da      	str	r2, [r3, #12]
      break;
 8006928:	e00b      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0210 	orr.w	r2, r2, #16
 8006938:	60da      	str	r2, [r3, #12]
      break;
 800693a:	e002      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
      break;
 8006940:	bf00      	nop
  }

  if (status == HAL_OK)
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d148      	bne.n	80069da <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2201      	movs	r2, #1
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	4618      	mov	r0, r3
 8006952:	f001 f957 	bl	8007c04 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a22      	ldr	r2, [pc, #136]	; (80069e4 <HAL_TIM_IC_Start_IT+0x234>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d022      	beq.n	80069a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006968:	d01d      	beq.n	80069a6 <HAL_TIM_IC_Start_IT+0x1f6>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a1e      	ldr	r2, [pc, #120]	; (80069e8 <HAL_TIM_IC_Start_IT+0x238>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d018      	beq.n	80069a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1c      	ldr	r2, [pc, #112]	; (80069ec <HAL_TIM_IC_Start_IT+0x23c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d013      	beq.n	80069a6 <HAL_TIM_IC_Start_IT+0x1f6>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <HAL_TIM_IC_Start_IT+0x240>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00e      	beq.n	80069a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a19      	ldr	r2, [pc, #100]	; (80069f4 <HAL_TIM_IC_Start_IT+0x244>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d009      	beq.n	80069a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a18      	ldr	r2, [pc, #96]	; (80069f8 <HAL_TIM_IC_Start_IT+0x248>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d004      	beq.n	80069a6 <HAL_TIM_IC_Start_IT+0x1f6>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a16      	ldr	r2, [pc, #88]	; (80069fc <HAL_TIM_IC_Start_IT+0x24c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d111      	bne.n	80069ca <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 0307 	and.w	r3, r3, #7
 80069b0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b06      	cmp	r3, #6
 80069b6:	d010      	beq.n	80069da <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0201 	orr.w	r2, r2, #1
 80069c6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c8:	e007      	b.n	80069da <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f042 0201 	orr.w	r2, r2, #1
 80069d8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40010000 	.word	0x40010000
 80069e8:	40000400 	.word	0x40000400
 80069ec:	40000800 	.word	0x40000800
 80069f0:	40000c00 	.word	0x40000c00
 80069f4:	40010400 	.word	0x40010400
 80069f8:	40014000 	.word	0x40014000
 80069fc:	40001800 	.word	0x40001800

08006a00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e097      	b.n	8006b44 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7fd fa05 	bl	8003e38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2202      	movs	r2, #2
 8006a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6812      	ldr	r2, [r2, #0]
 8006a40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a44:	f023 0307 	bic.w	r3, r3, #7
 8006a48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3304      	adds	r3, #4
 8006a52:	4619      	mov	r1, r3
 8006a54:	4610      	mov	r0, r2
 8006a56:	f000 fcc1 	bl	80073dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a82:	f023 0303 	bic.w	r3, r3, #3
 8006a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	021b      	lsls	r3, r3, #8
 8006a92:	4313      	orrs	r3, r2
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006aa0:	f023 030c 	bic.w	r3, r3, #12
 8006aa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ab0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	4313      	orrs	r3, r2
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	011a      	lsls	r2, r3, #4
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	031b      	lsls	r3, r3, #12
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ade:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	4313      	orrs	r3, r2
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d110      	bne.n	8006b9e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d102      	bne.n	8006b88 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b82:	7b7b      	ldrb	r3, [r7, #13]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d001      	beq.n	8006b8c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e089      	b.n	8006ca0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b9c:	e031      	b.n	8006c02 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d110      	bne.n	8006bc6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ba4:	7bbb      	ldrb	r3, [r7, #14]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d102      	bne.n	8006bb0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006baa:	7b3b      	ldrb	r3, [r7, #12]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d001      	beq.n	8006bb4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e075      	b.n	8006ca0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bc4:	e01d      	b.n	8006c02 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d108      	bne.n	8006bde <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d105      	bne.n	8006bde <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bd2:	7b7b      	ldrb	r3, [r7, #13]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d102      	bne.n	8006bde <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bd8:	7b3b      	ldrb	r3, [r7, #12]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d001      	beq.n	8006be2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e05e      	b.n	8006ca0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2202      	movs	r2, #2
 8006bee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d010      	beq.n	8006c30 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006c0e:	e01f      	b.n	8006c50 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2201      	movs	r2, #1
 8006c16:	2100      	movs	r1, #0
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fff3 	bl	8007c04 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f042 0202 	orr.w	r2, r2, #2
 8006c2c:	60da      	str	r2, [r3, #12]
      break;
 8006c2e:	e02e      	b.n	8006c8e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2201      	movs	r2, #1
 8006c36:	2104      	movs	r1, #4
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 ffe3 	bl	8007c04 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f042 0204 	orr.w	r2, r2, #4
 8006c4c:	60da      	str	r2, [r3, #12]
      break;
 8006c4e:	e01e      	b.n	8006c8e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2201      	movs	r2, #1
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 ffd3 	bl	8007c04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2201      	movs	r2, #1
 8006c64:	2104      	movs	r1, #4
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 ffcc 	bl	8007c04 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0202 	orr.w	r2, r2, #2
 8006c7a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0204 	orr.w	r2, r2, #4
 8006c8a:	60da      	str	r2, [r3, #12]
      break;
 8006c8c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0201 	orr.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d122      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d11b      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f06f 0202 	mvn.w	r2, #2
 8006cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fb f95c 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8006cf0:	e005      	b.n	8006cfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fb54 	bl	80073a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fb5b 	bl	80073b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0304 	and.w	r3, r3, #4
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d122      	bne.n	8006d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d11b      	bne.n	8006d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f06f 0204 	mvn.w	r2, #4
 8006d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fb f932 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8006d44:	e005      	b.n	8006d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fb2a 	bl	80073a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fb31 	bl	80073b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	2b08      	cmp	r3, #8
 8006d64:	d122      	bne.n	8006dac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f003 0308 	and.w	r3, r3, #8
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d11b      	bne.n	8006dac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f06f 0208 	mvn.w	r2, #8
 8006d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2204      	movs	r2, #4
 8006d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7fb f908 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8006d98:	e005      	b.n	8006da6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fb00 	bl	80073a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fb07 	bl	80073b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	f003 0310 	and.w	r3, r3, #16
 8006db6:	2b10      	cmp	r3, #16
 8006db8:	d122      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f003 0310 	and.w	r3, r3, #16
 8006dc4:	2b10      	cmp	r3, #16
 8006dc6:	d11b      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f06f 0210 	mvn.w	r2, #16
 8006dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fb f8de 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8006dec:	e005      	b.n	8006dfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fad6 	bl	80073a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fadd 	bl	80073b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d10e      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d107      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f06f 0201 	mvn.w	r2, #1
 8006e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fab0 	bl	800738c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e36:	2b80      	cmp	r3, #128	; 0x80
 8006e38:	d10e      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e44:	2b80      	cmp	r3, #128	; 0x80
 8006e46:	d107      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 ffd4 	bl	8007e00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e62:	2b40      	cmp	r3, #64	; 0x40
 8006e64:	d10e      	bne.n	8006e84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	2b40      	cmp	r3, #64	; 0x40
 8006e72:	d107      	bne.n	8006e84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 faa2 	bl	80073c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	f003 0320 	and.w	r3, r3, #32
 8006e8e:	2b20      	cmp	r3, #32
 8006e90:	d10e      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d107      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f06f 0220 	mvn.w	r2, #32
 8006ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 ff9e 	bl	8007dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006eb0:	bf00      	nop
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	e088      	b.n	8006fe8 <HAL_TIM_IC_ConfigChannel+0x130>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d11b      	bne.n	8006f1c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6818      	ldr	r0, [r3, #0]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	6819      	ldr	r1, [r3, #0]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f000 fcc2 	bl	800787c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699a      	ldr	r2, [r3, #24]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 020c 	bic.w	r2, r2, #12
 8006f06:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6999      	ldr	r1, [r3, #24]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	619a      	str	r2, [r3, #24]
 8006f1a:	e060      	b.n	8006fde <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d11c      	bne.n	8006f5c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	6819      	ldr	r1, [r3, #0]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f000 fd46 	bl	80079c2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	699a      	ldr	r2, [r3, #24]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f44:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6999      	ldr	r1, [r3, #24]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	021a      	lsls	r2, r3, #8
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	619a      	str	r2, [r3, #24]
 8006f5a:	e040      	b.n	8006fde <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b08      	cmp	r3, #8
 8006f60:	d11b      	bne.n	8006f9a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	6819      	ldr	r1, [r3, #0]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f000 fd93 	bl	8007a9c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 020c 	bic.w	r2, r2, #12
 8006f84:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69d9      	ldr	r1, [r3, #28]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	61da      	str	r2, [r3, #28]
 8006f98:	e021      	b.n	8006fde <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b0c      	cmp	r3, #12
 8006f9e:	d11c      	bne.n	8006fda <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6818      	ldr	r0, [r3, #0]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	6819      	ldr	r1, [r3, #0]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f000 fdb0 	bl	8007b14 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69da      	ldr	r2, [r3, #28]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006fc2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	69d9      	ldr	r1, [r3, #28]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	021a      	lsls	r2, r3, #8
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	61da      	str	r2, [r3, #28]
 8006fd8:	e001      	b.n	8006fde <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007006:	2b01      	cmp	r3, #1
 8007008:	d101      	bne.n	800700e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800700a:	2302      	movs	r3, #2
 800700c:	e0ae      	b.n	800716c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b0c      	cmp	r3, #12
 800701a:	f200 809f 	bhi.w	800715c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800701e:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	08007059 	.word	0x08007059
 8007028:	0800715d 	.word	0x0800715d
 800702c:	0800715d 	.word	0x0800715d
 8007030:	0800715d 	.word	0x0800715d
 8007034:	08007099 	.word	0x08007099
 8007038:	0800715d 	.word	0x0800715d
 800703c:	0800715d 	.word	0x0800715d
 8007040:	0800715d 	.word	0x0800715d
 8007044:	080070db 	.word	0x080070db
 8007048:	0800715d 	.word	0x0800715d
 800704c:	0800715d 	.word	0x0800715d
 8007050:	0800715d 	.word	0x0800715d
 8007054:	0800711b 	.word	0x0800711b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68b9      	ldr	r1, [r7, #8]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fa5c 	bl	800751c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699a      	ldr	r2, [r3, #24]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0208 	orr.w	r2, r2, #8
 8007072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0204 	bic.w	r2, r2, #4
 8007082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6999      	ldr	r1, [r3, #24]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	691a      	ldr	r2, [r3, #16]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	619a      	str	r2, [r3, #24]
      break;
 8007096:	e064      	b.n	8007162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68b9      	ldr	r1, [r7, #8]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 faac 	bl	80075fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699a      	ldr	r2, [r3, #24]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6999      	ldr	r1, [r3, #24]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	021a      	lsls	r2, r3, #8
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	619a      	str	r2, [r3, #24]
      break;
 80070d8:	e043      	b.n	8007162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68b9      	ldr	r1, [r7, #8]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 fb01 	bl	80076e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69da      	ldr	r2, [r3, #28]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0208 	orr.w	r2, r2, #8
 80070f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	69da      	ldr	r2, [r3, #28]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0204 	bic.w	r2, r2, #4
 8007104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	69d9      	ldr	r1, [r3, #28]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	691a      	ldr	r2, [r3, #16]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	61da      	str	r2, [r3, #28]
      break;
 8007118:	e023      	b.n	8007162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fb55 	bl	80077d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	69da      	ldr	r2, [r3, #28]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69da      	ldr	r2, [r3, #28]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69d9      	ldr	r1, [r3, #28]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	021a      	lsls	r2, r3, #8
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	61da      	str	r2, [r3, #28]
      break;
 800715a:	e002      	b.n	8007162 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	75fb      	strb	r3, [r7, #23]
      break;
 8007160:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800716a:	7dfb      	ldrb	r3, [r7, #23]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007188:	2b01      	cmp	r3, #1
 800718a:	d101      	bne.n	8007190 <HAL_TIM_ConfigClockSource+0x1c>
 800718c:	2302      	movs	r3, #2
 800718e:	e0b4      	b.n	80072fa <HAL_TIM_ConfigClockSource+0x186>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c8:	d03e      	beq.n	8007248 <HAL_TIM_ConfigClockSource+0xd4>
 80071ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ce:	f200 8087 	bhi.w	80072e0 <HAL_TIM_ConfigClockSource+0x16c>
 80071d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d6:	f000 8086 	beq.w	80072e6 <HAL_TIM_ConfigClockSource+0x172>
 80071da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071de:	d87f      	bhi.n	80072e0 <HAL_TIM_ConfigClockSource+0x16c>
 80071e0:	2b70      	cmp	r3, #112	; 0x70
 80071e2:	d01a      	beq.n	800721a <HAL_TIM_ConfigClockSource+0xa6>
 80071e4:	2b70      	cmp	r3, #112	; 0x70
 80071e6:	d87b      	bhi.n	80072e0 <HAL_TIM_ConfigClockSource+0x16c>
 80071e8:	2b60      	cmp	r3, #96	; 0x60
 80071ea:	d050      	beq.n	800728e <HAL_TIM_ConfigClockSource+0x11a>
 80071ec:	2b60      	cmp	r3, #96	; 0x60
 80071ee:	d877      	bhi.n	80072e0 <HAL_TIM_ConfigClockSource+0x16c>
 80071f0:	2b50      	cmp	r3, #80	; 0x50
 80071f2:	d03c      	beq.n	800726e <HAL_TIM_ConfigClockSource+0xfa>
 80071f4:	2b50      	cmp	r3, #80	; 0x50
 80071f6:	d873      	bhi.n	80072e0 <HAL_TIM_ConfigClockSource+0x16c>
 80071f8:	2b40      	cmp	r3, #64	; 0x40
 80071fa:	d058      	beq.n	80072ae <HAL_TIM_ConfigClockSource+0x13a>
 80071fc:	2b40      	cmp	r3, #64	; 0x40
 80071fe:	d86f      	bhi.n	80072e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007200:	2b30      	cmp	r3, #48	; 0x30
 8007202:	d064      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0x15a>
 8007204:	2b30      	cmp	r3, #48	; 0x30
 8007206:	d86b      	bhi.n	80072e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007208:	2b20      	cmp	r3, #32
 800720a:	d060      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0x15a>
 800720c:	2b20      	cmp	r3, #32
 800720e:	d867      	bhi.n	80072e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007210:	2b00      	cmp	r3, #0
 8007212:	d05c      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0x15a>
 8007214:	2b10      	cmp	r3, #16
 8007216:	d05a      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0x15a>
 8007218:	e062      	b.n	80072e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	6899      	ldr	r1, [r3, #8]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f000 fccb 	bl	8007bc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800723c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	609a      	str	r2, [r3, #8]
      break;
 8007246:	e04f      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6818      	ldr	r0, [r3, #0]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	6899      	ldr	r1, [r3, #8]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f000 fcb4 	bl	8007bc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689a      	ldr	r2, [r3, #8]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800726a:	609a      	str	r2, [r3, #8]
      break;
 800726c:	e03c      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6818      	ldr	r0, [r3, #0]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	6859      	ldr	r1, [r3, #4]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	461a      	mov	r2, r3
 800727c:	f000 fb72 	bl	8007964 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2150      	movs	r1, #80	; 0x50
 8007286:	4618      	mov	r0, r3
 8007288:	f000 fc81 	bl	8007b8e <TIM_ITRx_SetConfig>
      break;
 800728c:	e02c      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6818      	ldr	r0, [r3, #0]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	6859      	ldr	r1, [r3, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	461a      	mov	r2, r3
 800729c:	f000 fbce 	bl	8007a3c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2160      	movs	r1, #96	; 0x60
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fc71 	bl	8007b8e <TIM_ITRx_SetConfig>
      break;
 80072ac:	e01c      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	6859      	ldr	r1, [r3, #4]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	461a      	mov	r2, r3
 80072bc:	f000 fb52 	bl	8007964 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2140      	movs	r1, #64	; 0x40
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fc61 	bl	8007b8e <TIM_ITRx_SetConfig>
      break;
 80072cc:	e00c      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4619      	mov	r1, r3
 80072d8:	4610      	mov	r0, r2
 80072da:	f000 fc58 	bl	8007b8e <TIM_ITRx_SetConfig>
      break;
 80072de:	e003      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	73fb      	strb	r3, [r7, #15]
      break;
 80072e4:	e000      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80072e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b0c      	cmp	r3, #12
 8007316:	d831      	bhi.n	800737c <HAL_TIM_ReadCapturedValue+0x78>
 8007318:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <HAL_TIM_ReadCapturedValue+0x1c>)
 800731a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731e:	bf00      	nop
 8007320:	08007355 	.word	0x08007355
 8007324:	0800737d 	.word	0x0800737d
 8007328:	0800737d 	.word	0x0800737d
 800732c:	0800737d 	.word	0x0800737d
 8007330:	0800735f 	.word	0x0800735f
 8007334:	0800737d 	.word	0x0800737d
 8007338:	0800737d 	.word	0x0800737d
 800733c:	0800737d 	.word	0x0800737d
 8007340:	08007369 	.word	0x08007369
 8007344:	0800737d 	.word	0x0800737d
 8007348:	0800737d 	.word	0x0800737d
 800734c:	0800737d 	.word	0x0800737d
 8007350:	08007373 	.word	0x08007373
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735a:	60fb      	str	r3, [r7, #12]

      break;
 800735c:	e00f      	b.n	800737e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007364:	60fb      	str	r3, [r7, #12]

      break;
 8007366:	e00a      	b.n	800737e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736e:	60fb      	str	r3, [r7, #12]

      break;
 8007370:	e005      	b.n	800737e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	60fb      	str	r3, [r7, #12]

      break;
 800737a:	e000      	b.n	800737e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800737c:	bf00      	nop
  }

  return tmpreg;
 800737e:	68fb      	ldr	r3, [r7, #12]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a40      	ldr	r2, [pc, #256]	; (80074f0 <TIM_Base_SetConfig+0x114>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d013      	beq.n	800741c <TIM_Base_SetConfig+0x40>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fa:	d00f      	beq.n	800741c <TIM_Base_SetConfig+0x40>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a3d      	ldr	r2, [pc, #244]	; (80074f4 <TIM_Base_SetConfig+0x118>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00b      	beq.n	800741c <TIM_Base_SetConfig+0x40>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a3c      	ldr	r2, [pc, #240]	; (80074f8 <TIM_Base_SetConfig+0x11c>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d007      	beq.n	800741c <TIM_Base_SetConfig+0x40>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a3b      	ldr	r2, [pc, #236]	; (80074fc <TIM_Base_SetConfig+0x120>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d003      	beq.n	800741c <TIM_Base_SetConfig+0x40>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a3a      	ldr	r2, [pc, #232]	; (8007500 <TIM_Base_SetConfig+0x124>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d108      	bne.n	800742e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a2f      	ldr	r2, [pc, #188]	; (80074f0 <TIM_Base_SetConfig+0x114>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d02b      	beq.n	800748e <TIM_Base_SetConfig+0xb2>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800743c:	d027      	beq.n	800748e <TIM_Base_SetConfig+0xb2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a2c      	ldr	r2, [pc, #176]	; (80074f4 <TIM_Base_SetConfig+0x118>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d023      	beq.n	800748e <TIM_Base_SetConfig+0xb2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a2b      	ldr	r2, [pc, #172]	; (80074f8 <TIM_Base_SetConfig+0x11c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d01f      	beq.n	800748e <TIM_Base_SetConfig+0xb2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a2a      	ldr	r2, [pc, #168]	; (80074fc <TIM_Base_SetConfig+0x120>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d01b      	beq.n	800748e <TIM_Base_SetConfig+0xb2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a29      	ldr	r2, [pc, #164]	; (8007500 <TIM_Base_SetConfig+0x124>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d017      	beq.n	800748e <TIM_Base_SetConfig+0xb2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a28      	ldr	r2, [pc, #160]	; (8007504 <TIM_Base_SetConfig+0x128>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d013      	beq.n	800748e <TIM_Base_SetConfig+0xb2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a27      	ldr	r2, [pc, #156]	; (8007508 <TIM_Base_SetConfig+0x12c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d00f      	beq.n	800748e <TIM_Base_SetConfig+0xb2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a26      	ldr	r2, [pc, #152]	; (800750c <TIM_Base_SetConfig+0x130>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d00b      	beq.n	800748e <TIM_Base_SetConfig+0xb2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a25      	ldr	r2, [pc, #148]	; (8007510 <TIM_Base_SetConfig+0x134>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d007      	beq.n	800748e <TIM_Base_SetConfig+0xb2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a24      	ldr	r2, [pc, #144]	; (8007514 <TIM_Base_SetConfig+0x138>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d003      	beq.n	800748e <TIM_Base_SetConfig+0xb2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a23      	ldr	r2, [pc, #140]	; (8007518 <TIM_Base_SetConfig+0x13c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d108      	bne.n	80074a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4313      	orrs	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a0a      	ldr	r2, [pc, #40]	; (80074f0 <TIM_Base_SetConfig+0x114>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d003      	beq.n	80074d4 <TIM_Base_SetConfig+0xf8>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a0c      	ldr	r2, [pc, #48]	; (8007500 <TIM_Base_SetConfig+0x124>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d103      	bne.n	80074dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	691a      	ldr	r2, [r3, #16]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	615a      	str	r2, [r3, #20]
}
 80074e2:	bf00      	nop
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40010000 	.word	0x40010000
 80074f4:	40000400 	.word	0x40000400
 80074f8:	40000800 	.word	0x40000800
 80074fc:	40000c00 	.word	0x40000c00
 8007500:	40010400 	.word	0x40010400
 8007504:	40014000 	.word	0x40014000
 8007508:	40014400 	.word	0x40014400
 800750c:	40014800 	.word	0x40014800
 8007510:	40001800 	.word	0x40001800
 8007514:	40001c00 	.word	0x40001c00
 8007518:	40002000 	.word	0x40002000

0800751c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	f023 0201 	bic.w	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0303 	bic.w	r3, r3, #3
 8007552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f023 0302 	bic.w	r3, r3, #2
 8007564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a20      	ldr	r2, [pc, #128]	; (80075f4 <TIM_OC1_SetConfig+0xd8>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d003      	beq.n	8007580 <TIM_OC1_SetConfig+0x64>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a1f      	ldr	r2, [pc, #124]	; (80075f8 <TIM_OC1_SetConfig+0xdc>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d10c      	bne.n	800759a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f023 0308 	bic.w	r3, r3, #8
 8007586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	4313      	orrs	r3, r2
 8007590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f023 0304 	bic.w	r3, r3, #4
 8007598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a15      	ldr	r2, [pc, #84]	; (80075f4 <TIM_OC1_SetConfig+0xd8>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d003      	beq.n	80075aa <TIM_OC1_SetConfig+0x8e>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a14      	ldr	r2, [pc, #80]	; (80075f8 <TIM_OC1_SetConfig+0xdc>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d111      	bne.n	80075ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	621a      	str	r2, [r3, #32]
}
 80075e8:	bf00      	nop
 80075ea:	371c      	adds	r7, #28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	40010000 	.word	0x40010000
 80075f8:	40010400 	.word	0x40010400

080075fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	f023 0210 	bic.w	r2, r3, #16
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800762a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	021b      	lsls	r3, r3, #8
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	4313      	orrs	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f023 0320 	bic.w	r3, r3, #32
 8007646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a22      	ldr	r2, [pc, #136]	; (80076e0 <TIM_OC2_SetConfig+0xe4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d003      	beq.n	8007664 <TIM_OC2_SetConfig+0x68>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a21      	ldr	r2, [pc, #132]	; (80076e4 <TIM_OC2_SetConfig+0xe8>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d10d      	bne.n	8007680 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800766a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	011b      	lsls	r3, r3, #4
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	4313      	orrs	r3, r2
 8007676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800767e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a17      	ldr	r2, [pc, #92]	; (80076e0 <TIM_OC2_SetConfig+0xe4>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d003      	beq.n	8007690 <TIM_OC2_SetConfig+0x94>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a16      	ldr	r2, [pc, #88]	; (80076e4 <TIM_OC2_SetConfig+0xe8>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d113      	bne.n	80076b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800769e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	621a      	str	r2, [r3, #32]
}
 80076d2:	bf00      	nop
 80076d4:	371c      	adds	r7, #28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	40010000 	.word	0x40010000
 80076e4:	40010400 	.word	0x40010400

080076e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0303 	bic.w	r3, r3, #3
 800771e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	4313      	orrs	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	021b      	lsls	r3, r3, #8
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	4313      	orrs	r3, r2
 800773c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a21      	ldr	r2, [pc, #132]	; (80077c8 <TIM_OC3_SetConfig+0xe0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d003      	beq.n	800774e <TIM_OC3_SetConfig+0x66>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a20      	ldr	r2, [pc, #128]	; (80077cc <TIM_OC3_SetConfig+0xe4>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d10d      	bne.n	800776a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	021b      	lsls	r3, r3, #8
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	4313      	orrs	r3, r2
 8007760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a16      	ldr	r2, [pc, #88]	; (80077c8 <TIM_OC3_SetConfig+0xe0>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d003      	beq.n	800777a <TIM_OC3_SetConfig+0x92>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a15      	ldr	r2, [pc, #84]	; (80077cc <TIM_OC3_SetConfig+0xe4>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d113      	bne.n	80077a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	4313      	orrs	r3, r2
 8007794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	621a      	str	r2, [r3, #32]
}
 80077bc:	bf00      	nop
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	40010000 	.word	0x40010000
 80077cc:	40010400 	.word	0x40010400

080077d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	021b      	lsls	r3, r3, #8
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	4313      	orrs	r3, r2
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800781a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	031b      	lsls	r3, r3, #12
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a12      	ldr	r2, [pc, #72]	; (8007874 <TIM_OC4_SetConfig+0xa4>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d003      	beq.n	8007838 <TIM_OC4_SetConfig+0x68>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a11      	ldr	r2, [pc, #68]	; (8007878 <TIM_OC4_SetConfig+0xa8>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d109      	bne.n	800784c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800783e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	019b      	lsls	r3, r3, #6
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	4313      	orrs	r3, r2
 800784a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	621a      	str	r2, [r3, #32]
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	40010000 	.word	0x40010000
 8007878:	40010400 	.word	0x40010400

0800787c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
 8007888:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	f023 0201 	bic.w	r2, r3, #1
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6a1b      	ldr	r3, [r3, #32]
 80078a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4a28      	ldr	r2, [pc, #160]	; (8007948 <TIM_TI1_SetConfig+0xcc>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d01b      	beq.n	80078e2 <TIM_TI1_SetConfig+0x66>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078b0:	d017      	beq.n	80078e2 <TIM_TI1_SetConfig+0x66>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4a25      	ldr	r2, [pc, #148]	; (800794c <TIM_TI1_SetConfig+0xd0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d013      	beq.n	80078e2 <TIM_TI1_SetConfig+0x66>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	4a24      	ldr	r2, [pc, #144]	; (8007950 <TIM_TI1_SetConfig+0xd4>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d00f      	beq.n	80078e2 <TIM_TI1_SetConfig+0x66>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	4a23      	ldr	r2, [pc, #140]	; (8007954 <TIM_TI1_SetConfig+0xd8>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d00b      	beq.n	80078e2 <TIM_TI1_SetConfig+0x66>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4a22      	ldr	r2, [pc, #136]	; (8007958 <TIM_TI1_SetConfig+0xdc>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d007      	beq.n	80078e2 <TIM_TI1_SetConfig+0x66>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	4a21      	ldr	r2, [pc, #132]	; (800795c <TIM_TI1_SetConfig+0xe0>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d003      	beq.n	80078e2 <TIM_TI1_SetConfig+0x66>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4a20      	ldr	r2, [pc, #128]	; (8007960 <TIM_TI1_SetConfig+0xe4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d101      	bne.n	80078e6 <TIM_TI1_SetConfig+0x6a>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e000      	b.n	80078e8 <TIM_TI1_SetConfig+0x6c>
 80078e6:	2300      	movs	r3, #0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d008      	beq.n	80078fe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f023 0303 	bic.w	r3, r3, #3
 80078f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	617b      	str	r3, [r7, #20]
 80078fc:	e003      	b.n	8007906 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f043 0301 	orr.w	r3, r3, #1
 8007904:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800790c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	011b      	lsls	r3, r3, #4
 8007912:	b2db      	uxtb	r3, r3
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f023 030a 	bic.w	r3, r3, #10
 8007920:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f003 030a 	and.w	r3, r3, #10
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	4313      	orrs	r3, r2
 800792c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40010000 	.word	0x40010000
 800794c:	40000400 	.word	0x40000400
 8007950:	40000800 	.word	0x40000800
 8007954:	40000c00 	.word	0x40000c00
 8007958:	40010400 	.word	0x40010400
 800795c:	40014000 	.word	0x40014000
 8007960:	40001800 	.word	0x40001800

08007964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	f023 0201 	bic.w	r2, r3, #1
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800798e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	011b      	lsls	r3, r3, #4
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	4313      	orrs	r3, r2
 8007998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f023 030a 	bic.w	r3, r3, #10
 80079a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	621a      	str	r2, [r3, #32]
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b087      	sub	sp, #28
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	607a      	str	r2, [r7, #4]
 80079ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	f023 0210 	bic.w	r2, r3, #16
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	021b      	lsls	r3, r3, #8
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	031b      	lsls	r3, r3, #12
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	621a      	str	r2, [r3, #32]
}
 8007a30:	bf00      	nop
 8007a32:	371c      	adds	r7, #28
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	f023 0210 	bic.w	r2, r3, #16
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	031b      	lsls	r3, r3, #12
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	621a      	str	r2, [r3, #32]
}
 8007a90:	bf00      	nop
 8007a92:	371c      	adds	r7, #28
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f023 0303 	bic.w	r3, r3, #3
 8007ac8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ad8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007aec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	621a      	str	r2, [r3, #32]
}
 8007b08:	bf00      	nop
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	021b      	lsls	r3, r3, #8
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	031b      	lsls	r3, r3, #12
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007b66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	031b      	lsls	r3, r3, #12
 8007b6c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	621a      	str	r2, [r3, #32]
}
 8007b82:	bf00      	nop
 8007b84:	371c      	adds	r7, #28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b085      	sub	sp, #20
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f043 0307 	orr.w	r3, r3, #7
 8007bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	609a      	str	r2, [r3, #8]
}
 8007bb8:	bf00      	nop
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
 8007bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	021a      	lsls	r2, r3, #8
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	431a      	orrs	r2, r3
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	609a      	str	r2, [r3, #8]
}
 8007bf8:	bf00      	nop
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f003 031f 	and.w	r3, r3, #31
 8007c16:	2201      	movs	r2, #1
 8007c18:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6a1a      	ldr	r2, [r3, #32]
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	43db      	mvns	r3, r3
 8007c26:	401a      	ands	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a1a      	ldr	r2, [r3, #32]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f003 031f 	and.w	r3, r3, #31
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	fa01 f303 	lsl.w	r3, r1, r3
 8007c3c:	431a      	orrs	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	621a      	str	r2, [r3, #32]
}
 8007c42:	bf00      	nop
 8007c44:	371c      	adds	r7, #28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
	...

08007c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d101      	bne.n	8007c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c64:	2302      	movs	r3, #2
 8007c66:	e05a      	b.n	8007d1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a21      	ldr	r2, [pc, #132]	; (8007d2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d022      	beq.n	8007cf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb4:	d01d      	beq.n	8007cf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a1d      	ldr	r2, [pc, #116]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d018      	beq.n	8007cf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a1b      	ldr	r2, [pc, #108]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d013      	beq.n	8007cf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a1a      	ldr	r2, [pc, #104]	; (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d00e      	beq.n	8007cf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a18      	ldr	r2, [pc, #96]	; (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d009      	beq.n	8007cf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a17      	ldr	r2, [pc, #92]	; (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d004      	beq.n	8007cf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a15      	ldr	r2, [pc, #84]	; (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d10c      	bne.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	40010000 	.word	0x40010000
 8007d30:	40000400 	.word	0x40000400
 8007d34:	40000800 	.word	0x40000800
 8007d38:	40000c00 	.word	0x40000c00
 8007d3c:	40010400 	.word	0x40010400
 8007d40:	40014000 	.word	0x40014000
 8007d44:	40001800 	.word	0x40001800

08007d48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e03d      	b.n	8007de0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e03f      	b.n	8007ea6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d106      	bne.n	8007e40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7fc f8e0 	bl	8004000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2224      	movs	r2, #36	; 0x24
 8007e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68da      	ldr	r2, [r3, #12]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fddf 	bl	8008a1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	691a      	ldr	r2, [r3, #16]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	695a      	ldr	r2, [r3, #20]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b08a      	sub	sp, #40	; 0x28
 8007eb2:	af02      	add	r7, sp, #8
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	603b      	str	r3, [r7, #0]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b20      	cmp	r3, #32
 8007ecc:	d17c      	bne.n	8007fc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <HAL_UART_Transmit+0x2c>
 8007ed4:	88fb      	ldrh	r3, [r7, #6]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e075      	b.n	8007fca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d101      	bne.n	8007eec <HAL_UART_Transmit+0x3e>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	e06e      	b.n	8007fca <HAL_UART_Transmit+0x11c>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2221      	movs	r2, #33	; 0x21
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f02:	f7fc fa81 	bl	8004408 <HAL_GetTick>
 8007f06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	88fa      	ldrh	r2, [r7, #6]
 8007f0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	88fa      	ldrh	r2, [r7, #6]
 8007f12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f1c:	d108      	bne.n	8007f30 <HAL_UART_Transmit+0x82>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d104      	bne.n	8007f30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	61bb      	str	r3, [r7, #24]
 8007f2e:	e003      	b.n	8007f38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f40:	e02a      	b.n	8007f98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2180      	movs	r1, #128	; 0x80
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 fb1f 	bl	8008590 <UART_WaitOnFlagUntilTimeout>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e036      	b.n	8007fca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10b      	bne.n	8007f7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	3302      	adds	r3, #2
 8007f76:	61bb      	str	r3, [r7, #24]
 8007f78:	e007      	b.n	8007f8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	781a      	ldrb	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	3301      	adds	r3, #1
 8007f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	3b01      	subs	r3, #1
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1cf      	bne.n	8007f42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2140      	movs	r1, #64	; 0x40
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 faef 	bl	8008590 <UART_WaitOnFlagUntilTimeout>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e006      	b.n	8007fca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	e000      	b.n	8007fca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007fc8:	2302      	movs	r3, #2
  }
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3720      	adds	r7, #32
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b20      	cmp	r3, #32
 8007fea:	d11d      	bne.n	8008028 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <HAL_UART_Receive_IT+0x26>
 8007ff2:	88fb      	ldrh	r3, [r7, #6]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e016      	b.n	800802a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008002:	2b01      	cmp	r3, #1
 8008004:	d101      	bne.n	800800a <HAL_UART_Receive_IT+0x38>
 8008006:	2302      	movs	r3, #2
 8008008:	e00f      	b.n	800802a <HAL_UART_Receive_IT+0x58>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008018:	88fb      	ldrh	r3, [r7, #6]
 800801a:	461a      	mov	r2, r3
 800801c:	68b9      	ldr	r1, [r7, #8]
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 fb24 	bl	800866c <UART_Start_Receive_IT>
 8008024:	4603      	mov	r3, r0
 8008026:	e000      	b.n	800802a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008028:	2302      	movs	r3, #2
  }
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b0ba      	sub	sp, #232	; 0xe8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800805a:	2300      	movs	r3, #0
 800805c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008060:	2300      	movs	r3, #0
 8008062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800806a:	f003 030f 	and.w	r3, r3, #15
 800806e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10f      	bne.n	800809a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800807a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807e:	f003 0320 	and.w	r3, r3, #32
 8008082:	2b00      	cmp	r3, #0
 8008084:	d009      	beq.n	800809a <HAL_UART_IRQHandler+0x66>
 8008086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800808a:	f003 0320 	and.w	r3, r3, #32
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fc07 	bl	80088a6 <UART_Receive_IT>
      return;
 8008098:	e256      	b.n	8008548 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800809a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 80de 	beq.w	8008260 <HAL_UART_IRQHandler+0x22c>
 80080a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d106      	bne.n	80080be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 80d1 	beq.w	8008260 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00b      	beq.n	80080e2 <HAL_UART_IRQHandler+0xae>
 80080ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	f043 0201 	orr.w	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e6:	f003 0304 	and.w	r3, r3, #4
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00b      	beq.n	8008106 <HAL_UART_IRQHandler+0xd2>
 80080ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d005      	beq.n	8008106 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fe:	f043 0202 	orr.w	r2, r3, #2
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00b      	beq.n	800812a <HAL_UART_IRQHandler+0xf6>
 8008112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008122:	f043 0204 	orr.w	r2, r3, #4
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800812a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800812e:	f003 0308 	and.w	r3, r3, #8
 8008132:	2b00      	cmp	r3, #0
 8008134:	d011      	beq.n	800815a <HAL_UART_IRQHandler+0x126>
 8008136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b00      	cmp	r3, #0
 8008140:	d105      	bne.n	800814e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008152:	f043 0208 	orr.w	r2, r3, #8
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 81ed 	beq.w	800853e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008168:	f003 0320 	and.w	r3, r3, #32
 800816c:	2b00      	cmp	r3, #0
 800816e:	d008      	beq.n	8008182 <HAL_UART_IRQHandler+0x14e>
 8008170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008174:	f003 0320 	and.w	r3, r3, #32
 8008178:	2b00      	cmp	r3, #0
 800817a:	d002      	beq.n	8008182 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fb92 	bl	80088a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800818c:	2b40      	cmp	r3, #64	; 0x40
 800818e:	bf0c      	ite	eq
 8008190:	2301      	moveq	r3, #1
 8008192:	2300      	movne	r3, #0
 8008194:	b2db      	uxtb	r3, r3
 8008196:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819e:	f003 0308 	and.w	r3, r3, #8
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d103      	bne.n	80081ae <HAL_UART_IRQHandler+0x17a>
 80081a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d04f      	beq.n	800824e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fa9a 	bl	80086e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081be:	2b40      	cmp	r3, #64	; 0x40
 80081c0:	d141      	bne.n	8008246 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	3314      	adds	r3, #20
 80081c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3314      	adds	r3, #20
 80081ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80081ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80081f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80081fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1d9      	bne.n	80081c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008212:	2b00      	cmp	r3, #0
 8008214:	d013      	beq.n	800823e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	4a7d      	ldr	r2, [pc, #500]	; (8008410 <HAL_UART_IRQHandler+0x3dc>)
 800821c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008222:	4618      	mov	r0, r3
 8008224:	f7fc faa1 	bl	800476a <HAL_DMA_Abort_IT>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d016      	beq.n	800825c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008238:	4610      	mov	r0, r2
 800823a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823c:	e00e      	b.n	800825c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f990 	bl	8008564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008244:	e00a      	b.n	800825c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f98c 	bl	8008564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800824c:	e006      	b.n	800825c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f988 	bl	8008564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800825a:	e170      	b.n	800853e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800825c:	bf00      	nop
    return;
 800825e:	e16e      	b.n	800853e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	2b01      	cmp	r3, #1
 8008266:	f040 814a 	bne.w	80084fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800826a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826e:	f003 0310 	and.w	r3, r3, #16
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 8143 	beq.w	80084fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800827c:	f003 0310 	and.w	r3, r3, #16
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 813c 	beq.w	80084fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008286:	2300      	movs	r3, #0
 8008288:	60bb      	str	r3, [r7, #8]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60bb      	str	r3, [r7, #8]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	60bb      	str	r3, [r7, #8]
 800829a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a6:	2b40      	cmp	r3, #64	; 0x40
 80082a8:	f040 80b4 	bne.w	8008414 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8140 	beq.w	8008542 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082ca:	429a      	cmp	r2, r3
 80082cc:	f080 8139 	bcs.w	8008542 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082e2:	f000 8088 	beq.w	80083f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	330c      	adds	r3, #12
 80082ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082f4:	e853 3f00 	ldrex	r3, [r3]
 80082f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80082fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	330c      	adds	r3, #12
 800830e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008312:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800831e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008322:	e841 2300 	strex	r3, r2, [r1]
 8008326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800832a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1d9      	bne.n	80082e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3314      	adds	r3, #20
 8008338:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800833c:	e853 3f00 	ldrex	r3, [r3]
 8008340:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008344:	f023 0301 	bic.w	r3, r3, #1
 8008348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3314      	adds	r3, #20
 8008352:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008356:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800835a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800835e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e1      	bne.n	8008332 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3314      	adds	r3, #20
 8008374:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008378:	e853 3f00 	ldrex	r3, [r3]
 800837c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800837e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3314      	adds	r3, #20
 800838e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008392:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008394:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008396:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008398:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1e3      	bne.n	800836e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2220      	movs	r2, #32
 80083aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	330c      	adds	r3, #12
 80083ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083be:	e853 3f00 	ldrex	r3, [r3]
 80083c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083c6:	f023 0310 	bic.w	r3, r3, #16
 80083ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	330c      	adds	r3, #12
 80083d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80083da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e3      	bne.n	80083b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fc f94a 	bl	800468a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083fe:	b29b      	uxth	r3, r3
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	b29b      	uxth	r3, r3
 8008404:	4619      	mov	r1, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f8b6 	bl	8008578 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800840c:	e099      	b.n	8008542 <HAL_UART_IRQHandler+0x50e>
 800840e:	bf00      	nop
 8008410:	080087af 	.word	0x080087af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800841c:	b29b      	uxth	r3, r3
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 808b 	beq.w	8008546 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 8086 	beq.w	8008546 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	330c      	adds	r3, #12
 8008440:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	e853 3f00 	ldrex	r3, [r3]
 8008448:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800844a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008450:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	330c      	adds	r3, #12
 800845a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800845e:	647a      	str	r2, [r7, #68]	; 0x44
 8008460:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008462:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008466:	e841 2300 	strex	r3, r2, [r1]
 800846a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800846c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1e3      	bne.n	800843a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3314      	adds	r3, #20
 8008478:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	e853 3f00 	ldrex	r3, [r3]
 8008480:	623b      	str	r3, [r7, #32]
   return(result);
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	f023 0301 	bic.w	r3, r3, #1
 8008488:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3314      	adds	r3, #20
 8008492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008496:	633a      	str	r2, [r7, #48]	; 0x30
 8008498:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800849c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1e3      	bne.n	8008472 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2220      	movs	r2, #32
 80084ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	330c      	adds	r3, #12
 80084be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f023 0310 	bic.w	r3, r3, #16
 80084ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	330c      	adds	r3, #12
 80084d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80084dc:	61fa      	str	r2, [r7, #28]
 80084de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	69b9      	ldr	r1, [r7, #24]
 80084e2:	69fa      	ldr	r2, [r7, #28]
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	617b      	str	r3, [r7, #20]
   return(result);
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e3      	bne.n	80084b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f83e 	bl	8008578 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084fc:	e023      	b.n	8008546 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008506:	2b00      	cmp	r3, #0
 8008508:	d009      	beq.n	800851e <HAL_UART_IRQHandler+0x4ea>
 800850a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800850e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f95d 	bl	80087d6 <UART_Transmit_IT>
    return;
 800851c:	e014      	b.n	8008548 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800851e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00e      	beq.n	8008548 <HAL_UART_IRQHandler+0x514>
 800852a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800852e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008532:	2b00      	cmp	r3, #0
 8008534:	d008      	beq.n	8008548 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f99d 	bl	8008876 <UART_EndTransmit_IT>
    return;
 800853c:	e004      	b.n	8008548 <HAL_UART_IRQHandler+0x514>
    return;
 800853e:	bf00      	nop
 8008540:	e002      	b.n	8008548 <HAL_UART_IRQHandler+0x514>
      return;
 8008542:	bf00      	nop
 8008544:	e000      	b.n	8008548 <HAL_UART_IRQHandler+0x514>
      return;
 8008546:	bf00      	nop
  }
}
 8008548:	37e8      	adds	r7, #232	; 0xe8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop

08008550 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b090      	sub	sp, #64	; 0x40
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	603b      	str	r3, [r7, #0]
 800859c:	4613      	mov	r3, r2
 800859e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085a0:	e050      	b.n	8008644 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085a8:	d04c      	beq.n	8008644 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d007      	beq.n	80085c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80085b0:	f7fb ff2a 	bl	8004408 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085bc:	429a      	cmp	r2, r3
 80085be:	d241      	bcs.n	8008644 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	330c      	adds	r3, #12
 80085c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	e853 3f00 	ldrex	r3, [r3]
 80085ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	330c      	adds	r3, #12
 80085de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085e0:	637a      	str	r2, [r7, #52]	; 0x34
 80085e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085e8:	e841 2300 	strex	r3, r2, [r1]
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e5      	bne.n	80085c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3314      	adds	r3, #20
 80085fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	613b      	str	r3, [r7, #16]
   return(result);
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	f023 0301 	bic.w	r3, r3, #1
 800860a:	63bb      	str	r3, [r7, #56]	; 0x38
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3314      	adds	r3, #20
 8008612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008614:	623a      	str	r2, [r7, #32]
 8008616:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008618:	69f9      	ldr	r1, [r7, #28]
 800861a:	6a3a      	ldr	r2, [r7, #32]
 800861c:	e841 2300 	strex	r3, r2, [r1]
 8008620:	61bb      	str	r3, [r7, #24]
   return(result);
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1e5      	bne.n	80085f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2220      	movs	r2, #32
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2220      	movs	r2, #32
 8008634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	e00f      	b.n	8008664 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	4013      	ands	r3, r2
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	429a      	cmp	r2, r3
 8008652:	bf0c      	ite	eq
 8008654:	2301      	moveq	r3, #1
 8008656:	2300      	movne	r3, #0
 8008658:	b2db      	uxtb	r3, r3
 800865a:	461a      	mov	r2, r3
 800865c:	79fb      	ldrb	r3, [r7, #7]
 800865e:	429a      	cmp	r2, r3
 8008660:	d09f      	beq.n	80085a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3740      	adds	r7, #64	; 0x40
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	88fa      	ldrh	r2, [r7, #6]
 8008684:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	88fa      	ldrh	r2, [r7, #6]
 800868a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2222      	movs	r2, #34	; 0x22
 8008696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d007      	beq.n	80086ba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	695a      	ldr	r2, [r3, #20]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f042 0201 	orr.w	r2, r2, #1
 80086c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f042 0220 	orr.w	r2, r2, #32
 80086d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b095      	sub	sp, #84	; 0x54
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	330c      	adds	r3, #12
 80086f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fa:	e853 3f00 	ldrex	r3, [r3]
 80086fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008702:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	330c      	adds	r3, #12
 800870e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008710:	643a      	str	r2, [r7, #64]	; 0x40
 8008712:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008714:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008716:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008718:	e841 2300 	strex	r3, r2, [r1]
 800871c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800871e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e5      	bne.n	80086f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3314      	adds	r3, #20
 800872a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	e853 3f00 	ldrex	r3, [r3]
 8008732:	61fb      	str	r3, [r7, #28]
   return(result);
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	f023 0301 	bic.w	r3, r3, #1
 800873a:	64bb      	str	r3, [r7, #72]	; 0x48
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3314      	adds	r3, #20
 8008742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008744:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800874a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800874c:	e841 2300 	strex	r3, r2, [r1]
 8008750:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e5      	bne.n	8008724 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875c:	2b01      	cmp	r3, #1
 800875e:	d119      	bne.n	8008794 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	330c      	adds	r3, #12
 8008766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	e853 3f00 	ldrex	r3, [r3]
 800876e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f023 0310 	bic.w	r3, r3, #16
 8008776:	647b      	str	r3, [r7, #68]	; 0x44
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	330c      	adds	r3, #12
 800877e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008780:	61ba      	str	r2, [r7, #24]
 8008782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	6979      	ldr	r1, [r7, #20]
 8008786:	69ba      	ldr	r2, [r7, #24]
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	613b      	str	r3, [r7, #16]
   return(result);
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e5      	bne.n	8008760 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2220      	movs	r2, #32
 8008798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80087a2:	bf00      	nop
 80087a4:	3754      	adds	r7, #84	; 0x54
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f7ff fecb 	bl	8008564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ce:	bf00      	nop
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b085      	sub	sp, #20
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b21      	cmp	r3, #33	; 0x21
 80087e8:	d13e      	bne.n	8008868 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087f2:	d114      	bne.n	800881e <UART_Transmit_IT+0x48>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d110      	bne.n	800881e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008810:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	1c9a      	adds	r2, r3, #2
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	621a      	str	r2, [r3, #32]
 800881c:	e008      	b.n	8008830 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	1c59      	adds	r1, r3, #1
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	6211      	str	r1, [r2, #32]
 8008828:	781a      	ldrb	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008834:	b29b      	uxth	r3, r3
 8008836:	3b01      	subs	r3, #1
 8008838:	b29b      	uxth	r3, r3
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	4619      	mov	r1, r3
 800883e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10f      	bne.n	8008864 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008852:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68da      	ldr	r2, [r3, #12]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008862:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	e000      	b.n	800886a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008868:	2302      	movs	r3, #2
  }
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68da      	ldr	r2, [r3, #12]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800888c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2220      	movs	r2, #32
 8008892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff fe5a 	bl	8008550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b08c      	sub	sp, #48	; 0x30
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b22      	cmp	r3, #34	; 0x22
 80088b8:	f040 80ab 	bne.w	8008a12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088c4:	d117      	bne.n	80088f6 <UART_Receive_IT+0x50>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d113      	bne.n	80088f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088ce:	2300      	movs	r3, #0
 80088d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ee:	1c9a      	adds	r2, r3, #2
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	629a      	str	r2, [r3, #40]	; 0x28
 80088f4:	e026      	b.n	8008944 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80088fc:	2300      	movs	r3, #0
 80088fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008908:	d007      	beq.n	800891a <UART_Receive_IT+0x74>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10a      	bne.n	8008928 <UART_Receive_IT+0x82>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d106      	bne.n	8008928 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	b2da      	uxtb	r2, r3
 8008922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008924:	701a      	strb	r2, [r3, #0]
 8008926:	e008      	b.n	800893a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	b2db      	uxtb	r3, r3
 8008930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008934:	b2da      	uxtb	r2, r3
 8008936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008938:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008948:	b29b      	uxth	r3, r3
 800894a:	3b01      	subs	r3, #1
 800894c:	b29b      	uxth	r3, r3
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	4619      	mov	r1, r3
 8008952:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008954:	2b00      	cmp	r3, #0
 8008956:	d15a      	bne.n	8008a0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68da      	ldr	r2, [r3, #12]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0220 	bic.w	r2, r2, #32
 8008966:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68da      	ldr	r2, [r3, #12]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008976:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	695a      	ldr	r2, [r3, #20]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0201 	bic.w	r2, r2, #1
 8008986:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2220      	movs	r2, #32
 800898c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008994:	2b01      	cmp	r3, #1
 8008996:	d135      	bne.n	8008a04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	330c      	adds	r3, #12
 80089a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	613b      	str	r3, [r7, #16]
   return(result);
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f023 0310 	bic.w	r3, r3, #16
 80089b4:	627b      	str	r3, [r7, #36]	; 0x24
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	330c      	adds	r3, #12
 80089bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089be:	623a      	str	r2, [r7, #32]
 80089c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c2:	69f9      	ldr	r1, [r7, #28]
 80089c4:	6a3a      	ldr	r2, [r7, #32]
 80089c6:	e841 2300 	strex	r3, r2, [r1]
 80089ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1e5      	bne.n	800899e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0310 	and.w	r3, r3, #16
 80089dc:	2b10      	cmp	r3, #16
 80089de:	d10a      	bne.n	80089f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089e0:	2300      	movs	r3, #0
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7ff fdbb 	bl	8008578 <HAL_UARTEx_RxEventCallback>
 8008a02:	e002      	b.n	8008a0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7f9 fbf5 	bl	80021f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e002      	b.n	8008a14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	e000      	b.n	8008a14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a12:	2302      	movs	r3, #2
  }
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3730      	adds	r7, #48	; 0x30
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a20:	b0c0      	sub	sp, #256	; 0x100
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a38:	68d9      	ldr	r1, [r3, #12]
 8008a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	ea40 0301 	orr.w	r3, r0, r1
 8008a44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4a:	689a      	ldr	r2, [r3, #8]
 8008a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	431a      	orrs	r2, r3
 8008a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a74:	f021 010c 	bic.w	r1, r1, #12
 8008a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a82:	430b      	orrs	r3, r1
 8008a84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a96:	6999      	ldr	r1, [r3, #24]
 8008a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	ea40 0301 	orr.w	r3, r0, r1
 8008aa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	4b8f      	ldr	r3, [pc, #572]	; (8008ce8 <UART_SetConfig+0x2cc>)
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d005      	beq.n	8008abc <UART_SetConfig+0xa0>
 8008ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	4b8d      	ldr	r3, [pc, #564]	; (8008cec <UART_SetConfig+0x2d0>)
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d104      	bne.n	8008ac6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008abc:	f7fd fc30 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 8008ac0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ac4:	e003      	b.n	8008ace <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ac6:	f7fd fc17 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 8008aca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ad8:	f040 810c 	bne.w	8008cf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ae6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008aea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008aee:	4622      	mov	r2, r4
 8008af0:	462b      	mov	r3, r5
 8008af2:	1891      	adds	r1, r2, r2
 8008af4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008af6:	415b      	adcs	r3, r3
 8008af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008afa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008afe:	4621      	mov	r1, r4
 8008b00:	eb12 0801 	adds.w	r8, r2, r1
 8008b04:	4629      	mov	r1, r5
 8008b06:	eb43 0901 	adc.w	r9, r3, r1
 8008b0a:	f04f 0200 	mov.w	r2, #0
 8008b0e:	f04f 0300 	mov.w	r3, #0
 8008b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b1e:	4690      	mov	r8, r2
 8008b20:	4699      	mov	r9, r3
 8008b22:	4623      	mov	r3, r4
 8008b24:	eb18 0303 	adds.w	r3, r8, r3
 8008b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b2c:	462b      	mov	r3, r5
 8008b2e:	eb49 0303 	adc.w	r3, r9, r3
 8008b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008b46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	18db      	adds	r3, r3, r3
 8008b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8008b50:	4613      	mov	r3, r2
 8008b52:	eb42 0303 	adc.w	r3, r2, r3
 8008b56:	657b      	str	r3, [r7, #84]	; 0x54
 8008b58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b60:	f7f8 f872 	bl	8000c48 <__aeabi_uldivmod>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4b61      	ldr	r3, [pc, #388]	; (8008cf0 <UART_SetConfig+0x2d4>)
 8008b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8008b6e:	095b      	lsrs	r3, r3, #5
 8008b70:	011c      	lsls	r4, r3, #4
 8008b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008b80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008b84:	4642      	mov	r2, r8
 8008b86:	464b      	mov	r3, r9
 8008b88:	1891      	adds	r1, r2, r2
 8008b8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b8c:	415b      	adcs	r3, r3
 8008b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b94:	4641      	mov	r1, r8
 8008b96:	eb12 0a01 	adds.w	sl, r2, r1
 8008b9a:	4649      	mov	r1, r9
 8008b9c:	eb43 0b01 	adc.w	fp, r3, r1
 8008ba0:	f04f 0200 	mov.w	r2, #0
 8008ba4:	f04f 0300 	mov.w	r3, #0
 8008ba8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008bac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008bb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bb4:	4692      	mov	sl, r2
 8008bb6:	469b      	mov	fp, r3
 8008bb8:	4643      	mov	r3, r8
 8008bba:	eb1a 0303 	adds.w	r3, sl, r3
 8008bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bc2:	464b      	mov	r3, r9
 8008bc4:	eb4b 0303 	adc.w	r3, fp, r3
 8008bc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008bdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008be0:	460b      	mov	r3, r1
 8008be2:	18db      	adds	r3, r3, r3
 8008be4:	643b      	str	r3, [r7, #64]	; 0x40
 8008be6:	4613      	mov	r3, r2
 8008be8:	eb42 0303 	adc.w	r3, r2, r3
 8008bec:	647b      	str	r3, [r7, #68]	; 0x44
 8008bee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008bf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008bf6:	f7f8 f827 	bl	8000c48 <__aeabi_uldivmod>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4611      	mov	r1, r2
 8008c00:	4b3b      	ldr	r3, [pc, #236]	; (8008cf0 <UART_SetConfig+0x2d4>)
 8008c02:	fba3 2301 	umull	r2, r3, r3, r1
 8008c06:	095b      	lsrs	r3, r3, #5
 8008c08:	2264      	movs	r2, #100	; 0x64
 8008c0a:	fb02 f303 	mul.w	r3, r2, r3
 8008c0e:	1acb      	subs	r3, r1, r3
 8008c10:	00db      	lsls	r3, r3, #3
 8008c12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c16:	4b36      	ldr	r3, [pc, #216]	; (8008cf0 <UART_SetConfig+0x2d4>)
 8008c18:	fba3 2302 	umull	r2, r3, r3, r2
 8008c1c:	095b      	lsrs	r3, r3, #5
 8008c1e:	005b      	lsls	r3, r3, #1
 8008c20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c24:	441c      	add	r4, r3
 8008c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008c38:	4642      	mov	r2, r8
 8008c3a:	464b      	mov	r3, r9
 8008c3c:	1891      	adds	r1, r2, r2
 8008c3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c40:	415b      	adcs	r3, r3
 8008c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c48:	4641      	mov	r1, r8
 8008c4a:	1851      	adds	r1, r2, r1
 8008c4c:	6339      	str	r1, [r7, #48]	; 0x30
 8008c4e:	4649      	mov	r1, r9
 8008c50:	414b      	adcs	r3, r1
 8008c52:	637b      	str	r3, [r7, #52]	; 0x34
 8008c54:	f04f 0200 	mov.w	r2, #0
 8008c58:	f04f 0300 	mov.w	r3, #0
 8008c5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008c60:	4659      	mov	r1, fp
 8008c62:	00cb      	lsls	r3, r1, #3
 8008c64:	4651      	mov	r1, sl
 8008c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c6a:	4651      	mov	r1, sl
 8008c6c:	00ca      	lsls	r2, r1, #3
 8008c6e:	4610      	mov	r0, r2
 8008c70:	4619      	mov	r1, r3
 8008c72:	4603      	mov	r3, r0
 8008c74:	4642      	mov	r2, r8
 8008c76:	189b      	adds	r3, r3, r2
 8008c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c7c:	464b      	mov	r3, r9
 8008c7e:	460a      	mov	r2, r1
 8008c80:	eb42 0303 	adc.w	r3, r2, r3
 8008c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008c98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	18db      	adds	r3, r3, r3
 8008ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	eb42 0303 	adc.w	r3, r2, r3
 8008ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008caa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008cb2:	f7f7 ffc9 	bl	8000c48 <__aeabi_uldivmod>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	4b0d      	ldr	r3, [pc, #52]	; (8008cf0 <UART_SetConfig+0x2d4>)
 8008cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8008cc0:	095b      	lsrs	r3, r3, #5
 8008cc2:	2164      	movs	r1, #100	; 0x64
 8008cc4:	fb01 f303 	mul.w	r3, r1, r3
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	3332      	adds	r3, #50	; 0x32
 8008cce:	4a08      	ldr	r2, [pc, #32]	; (8008cf0 <UART_SetConfig+0x2d4>)
 8008cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd4:	095b      	lsrs	r3, r3, #5
 8008cd6:	f003 0207 	and.w	r2, r3, #7
 8008cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4422      	add	r2, r4
 8008ce2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ce4:	e106      	b.n	8008ef4 <UART_SetConfig+0x4d8>
 8008ce6:	bf00      	nop
 8008ce8:	40011000 	.word	0x40011000
 8008cec:	40011400 	.word	0x40011400
 8008cf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008cfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d06:	4642      	mov	r2, r8
 8008d08:	464b      	mov	r3, r9
 8008d0a:	1891      	adds	r1, r2, r2
 8008d0c:	6239      	str	r1, [r7, #32]
 8008d0e:	415b      	adcs	r3, r3
 8008d10:	627b      	str	r3, [r7, #36]	; 0x24
 8008d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d16:	4641      	mov	r1, r8
 8008d18:	1854      	adds	r4, r2, r1
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	eb43 0501 	adc.w	r5, r3, r1
 8008d20:	f04f 0200 	mov.w	r2, #0
 8008d24:	f04f 0300 	mov.w	r3, #0
 8008d28:	00eb      	lsls	r3, r5, #3
 8008d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d2e:	00e2      	lsls	r2, r4, #3
 8008d30:	4614      	mov	r4, r2
 8008d32:	461d      	mov	r5, r3
 8008d34:	4643      	mov	r3, r8
 8008d36:	18e3      	adds	r3, r4, r3
 8008d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d3c:	464b      	mov	r3, r9
 8008d3e:	eb45 0303 	adc.w	r3, r5, r3
 8008d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d56:	f04f 0200 	mov.w	r2, #0
 8008d5a:	f04f 0300 	mov.w	r3, #0
 8008d5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008d62:	4629      	mov	r1, r5
 8008d64:	008b      	lsls	r3, r1, #2
 8008d66:	4621      	mov	r1, r4
 8008d68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	008a      	lsls	r2, r1, #2
 8008d70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008d74:	f7f7 ff68 	bl	8000c48 <__aeabi_uldivmod>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	4b60      	ldr	r3, [pc, #384]	; (8008f00 <UART_SetConfig+0x4e4>)
 8008d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8008d82:	095b      	lsrs	r3, r3, #5
 8008d84:	011c      	lsls	r4, r3, #4
 8008d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008d94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008d98:	4642      	mov	r2, r8
 8008d9a:	464b      	mov	r3, r9
 8008d9c:	1891      	adds	r1, r2, r2
 8008d9e:	61b9      	str	r1, [r7, #24]
 8008da0:	415b      	adcs	r3, r3
 8008da2:	61fb      	str	r3, [r7, #28]
 8008da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008da8:	4641      	mov	r1, r8
 8008daa:	1851      	adds	r1, r2, r1
 8008dac:	6139      	str	r1, [r7, #16]
 8008dae:	4649      	mov	r1, r9
 8008db0:	414b      	adcs	r3, r1
 8008db2:	617b      	str	r3, [r7, #20]
 8008db4:	f04f 0200 	mov.w	r2, #0
 8008db8:	f04f 0300 	mov.w	r3, #0
 8008dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008dc0:	4659      	mov	r1, fp
 8008dc2:	00cb      	lsls	r3, r1, #3
 8008dc4:	4651      	mov	r1, sl
 8008dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dca:	4651      	mov	r1, sl
 8008dcc:	00ca      	lsls	r2, r1, #3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	4642      	mov	r2, r8
 8008dd6:	189b      	adds	r3, r3, r2
 8008dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ddc:	464b      	mov	r3, r9
 8008dde:	460a      	mov	r2, r1
 8008de0:	eb42 0303 	adc.w	r3, r2, r3
 8008de4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008df2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008df4:	f04f 0200 	mov.w	r2, #0
 8008df8:	f04f 0300 	mov.w	r3, #0
 8008dfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e00:	4649      	mov	r1, r9
 8008e02:	008b      	lsls	r3, r1, #2
 8008e04:	4641      	mov	r1, r8
 8008e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e0a:	4641      	mov	r1, r8
 8008e0c:	008a      	lsls	r2, r1, #2
 8008e0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e12:	f7f7 ff19 	bl	8000c48 <__aeabi_uldivmod>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4611      	mov	r1, r2
 8008e1c:	4b38      	ldr	r3, [pc, #224]	; (8008f00 <UART_SetConfig+0x4e4>)
 8008e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8008e22:	095b      	lsrs	r3, r3, #5
 8008e24:	2264      	movs	r2, #100	; 0x64
 8008e26:	fb02 f303 	mul.w	r3, r2, r3
 8008e2a:	1acb      	subs	r3, r1, r3
 8008e2c:	011b      	lsls	r3, r3, #4
 8008e2e:	3332      	adds	r3, #50	; 0x32
 8008e30:	4a33      	ldr	r2, [pc, #204]	; (8008f00 <UART_SetConfig+0x4e4>)
 8008e32:	fba2 2303 	umull	r2, r3, r2, r3
 8008e36:	095b      	lsrs	r3, r3, #5
 8008e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e3c:	441c      	add	r4, r3
 8008e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e42:	2200      	movs	r2, #0
 8008e44:	673b      	str	r3, [r7, #112]	; 0x70
 8008e46:	677a      	str	r2, [r7, #116]	; 0x74
 8008e48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008e4c:	4642      	mov	r2, r8
 8008e4e:	464b      	mov	r3, r9
 8008e50:	1891      	adds	r1, r2, r2
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	415b      	adcs	r3, r3
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e5c:	4641      	mov	r1, r8
 8008e5e:	1851      	adds	r1, r2, r1
 8008e60:	6039      	str	r1, [r7, #0]
 8008e62:	4649      	mov	r1, r9
 8008e64:	414b      	adcs	r3, r1
 8008e66:	607b      	str	r3, [r7, #4]
 8008e68:	f04f 0200 	mov.w	r2, #0
 8008e6c:	f04f 0300 	mov.w	r3, #0
 8008e70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e74:	4659      	mov	r1, fp
 8008e76:	00cb      	lsls	r3, r1, #3
 8008e78:	4651      	mov	r1, sl
 8008e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e7e:	4651      	mov	r1, sl
 8008e80:	00ca      	lsls	r2, r1, #3
 8008e82:	4610      	mov	r0, r2
 8008e84:	4619      	mov	r1, r3
 8008e86:	4603      	mov	r3, r0
 8008e88:	4642      	mov	r2, r8
 8008e8a:	189b      	adds	r3, r3, r2
 8008e8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e8e:	464b      	mov	r3, r9
 8008e90:	460a      	mov	r2, r1
 8008e92:	eb42 0303 	adc.w	r3, r2, r3
 8008e96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	663b      	str	r3, [r7, #96]	; 0x60
 8008ea2:	667a      	str	r2, [r7, #100]	; 0x64
 8008ea4:	f04f 0200 	mov.w	r2, #0
 8008ea8:	f04f 0300 	mov.w	r3, #0
 8008eac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	008b      	lsls	r3, r1, #2
 8008eb4:	4641      	mov	r1, r8
 8008eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008eba:	4641      	mov	r1, r8
 8008ebc:	008a      	lsls	r2, r1, #2
 8008ebe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ec2:	f7f7 fec1 	bl	8000c48 <__aeabi_uldivmod>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4b0d      	ldr	r3, [pc, #52]	; (8008f00 <UART_SetConfig+0x4e4>)
 8008ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8008ed0:	095b      	lsrs	r3, r3, #5
 8008ed2:	2164      	movs	r1, #100	; 0x64
 8008ed4:	fb01 f303 	mul.w	r3, r1, r3
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	011b      	lsls	r3, r3, #4
 8008edc:	3332      	adds	r3, #50	; 0x32
 8008ede:	4a08      	ldr	r2, [pc, #32]	; (8008f00 <UART_SetConfig+0x4e4>)
 8008ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee4:	095b      	lsrs	r3, r3, #5
 8008ee6:	f003 020f 	and.w	r2, r3, #15
 8008eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4422      	add	r2, r4
 8008ef2:	609a      	str	r2, [r3, #8]
}
 8008ef4:	bf00      	nop
 8008ef6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008efa:	46bd      	mov	sp, r7
 8008efc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f00:	51eb851f 	.word	0x51eb851f

08008f04 <__NVIC_SetPriority>:
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	6039      	str	r1, [r7, #0]
 8008f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	db0a      	blt.n	8008f2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	b2da      	uxtb	r2, r3
 8008f1c:	490c      	ldr	r1, [pc, #48]	; (8008f50 <__NVIC_SetPriority+0x4c>)
 8008f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f22:	0112      	lsls	r2, r2, #4
 8008f24:	b2d2      	uxtb	r2, r2
 8008f26:	440b      	add	r3, r1
 8008f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008f2c:	e00a      	b.n	8008f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	4908      	ldr	r1, [pc, #32]	; (8008f54 <__NVIC_SetPriority+0x50>)
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	f003 030f 	and.w	r3, r3, #15
 8008f3a:	3b04      	subs	r3, #4
 8008f3c:	0112      	lsls	r2, r2, #4
 8008f3e:	b2d2      	uxtb	r2, r2
 8008f40:	440b      	add	r3, r1
 8008f42:	761a      	strb	r2, [r3, #24]
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	e000e100 	.word	0xe000e100
 8008f54:	e000ed00 	.word	0xe000ed00

08008f58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	f06f 0004 	mvn.w	r0, #4
 8008f62:	f7ff ffcf 	bl	8008f04 <__NVIC_SetPriority>
#endif
}
 8008f66:	bf00      	nop
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f72:	f3ef 8305 	mrs	r3, IPSR
 8008f76:	603b      	str	r3, [r7, #0]
  return(result);
 8008f78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f7e:	f06f 0305 	mvn.w	r3, #5
 8008f82:	607b      	str	r3, [r7, #4]
 8008f84:	e00c      	b.n	8008fa0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f86:	4b0a      	ldr	r3, [pc, #40]	; (8008fb0 <osKernelInitialize+0x44>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d105      	bne.n	8008f9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f8e:	4b08      	ldr	r3, [pc, #32]	; (8008fb0 <osKernelInitialize+0x44>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	607b      	str	r3, [r7, #4]
 8008f98:	e002      	b.n	8008fa0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008fa0:	687b      	ldr	r3, [r7, #4]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	2000091c 	.word	0x2000091c

08008fb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fba:	f3ef 8305 	mrs	r3, IPSR
 8008fbe:	603b      	str	r3, [r7, #0]
  return(result);
 8008fc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <osKernelStart+0x1a>
    stat = osErrorISR;
 8008fc6:	f06f 0305 	mvn.w	r3, #5
 8008fca:	607b      	str	r3, [r7, #4]
 8008fcc:	e010      	b.n	8008ff0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008fce:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <osKernelStart+0x48>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d109      	bne.n	8008fea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008fd6:	f7ff ffbf 	bl	8008f58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008fda:	4b08      	ldr	r3, [pc, #32]	; (8008ffc <osKernelStart+0x48>)
 8008fdc:	2202      	movs	r2, #2
 8008fde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008fe0:	f001 f9e0 	bl	800a3a4 <vTaskStartScheduler>
      stat = osOK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	607b      	str	r3, [r7, #4]
 8008fe8:	e002      	b.n	8008ff0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ff0:	687b      	ldr	r3, [r7, #4]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	2000091c 	.word	0x2000091c

08009000 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009000:	b580      	push	{r7, lr}
 8009002:	b08e      	sub	sp, #56	; 0x38
 8009004:	af04      	add	r7, sp, #16
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800900c:	2300      	movs	r3, #0
 800900e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009010:	f3ef 8305 	mrs	r3, IPSR
 8009014:	617b      	str	r3, [r7, #20]
  return(result);
 8009016:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009018:	2b00      	cmp	r3, #0
 800901a:	d17e      	bne.n	800911a <osThreadNew+0x11a>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d07b      	beq.n	800911a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009022:	2380      	movs	r3, #128	; 0x80
 8009024:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009026:	2318      	movs	r3, #24
 8009028:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800902a:	2300      	movs	r3, #0
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800902e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009032:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d045      	beq.n	80090c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d002      	beq.n	8009048 <osThreadNew+0x48>
        name = attr->name;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d002      	beq.n	8009056 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d008      	beq.n	800906e <osThreadNew+0x6e>
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	2b38      	cmp	r3, #56	; 0x38
 8009060:	d805      	bhi.n	800906e <osThreadNew+0x6e>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <osThreadNew+0x72>
        return (NULL);
 800906e:	2300      	movs	r3, #0
 8009070:	e054      	b.n	800911c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d003      	beq.n	8009082 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	089b      	lsrs	r3, r3, #2
 8009080:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00e      	beq.n	80090a8 <osThreadNew+0xa8>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	2b5b      	cmp	r3, #91	; 0x5b
 8009090:	d90a      	bls.n	80090a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009096:	2b00      	cmp	r3, #0
 8009098:	d006      	beq.n	80090a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d002      	beq.n	80090a8 <osThreadNew+0xa8>
        mem = 1;
 80090a2:	2301      	movs	r3, #1
 80090a4:	61bb      	str	r3, [r7, #24]
 80090a6:	e010      	b.n	80090ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10c      	bne.n	80090ca <osThreadNew+0xca>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d108      	bne.n	80090ca <osThreadNew+0xca>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d104      	bne.n	80090ca <osThreadNew+0xca>
          mem = 0;
 80090c0:	2300      	movs	r3, #0
 80090c2:	61bb      	str	r3, [r7, #24]
 80090c4:	e001      	b.n	80090ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d110      	bne.n	80090f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090d8:	9202      	str	r2, [sp, #8]
 80090da:	9301      	str	r3, [sp, #4]
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	6a3a      	ldr	r2, [r7, #32]
 80090e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 ff86 	bl	8009ff8 <xTaskCreateStatic>
 80090ec:	4603      	mov	r3, r0
 80090ee:	613b      	str	r3, [r7, #16]
 80090f0:	e013      	b.n	800911a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d110      	bne.n	800911a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80090f8:	6a3b      	ldr	r3, [r7, #32]
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	f107 0310 	add.w	r3, r7, #16
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 ffd1 	bl	800a0b2 <xTaskCreate>
 8009110:	4603      	mov	r3, r0
 8009112:	2b01      	cmp	r3, #1
 8009114:	d001      	beq.n	800911a <osThreadNew+0x11a>
            hTask = NULL;
 8009116:	2300      	movs	r3, #0
 8009118:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800911a:	693b      	ldr	r3, [r7, #16]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3728      	adds	r7, #40	; 0x28
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800912c:	f3ef 8305 	mrs	r3, IPSR
 8009130:	60bb      	str	r3, [r7, #8]
  return(result);
 8009132:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009134:	2b00      	cmp	r3, #0
 8009136:	d003      	beq.n	8009140 <osDelay+0x1c>
    stat = osErrorISR;
 8009138:	f06f 0305 	mvn.w	r3, #5
 800913c:	60fb      	str	r3, [r7, #12]
 800913e:	e007      	b.n	8009150 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009140:	2300      	movs	r3, #0
 8009142:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <osDelay+0x2c>
      vTaskDelay(ticks);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f001 f8f6 	bl	800a33c <vTaskDelay>
    }
  }

  return (stat);
 8009150:	68fb      	ldr	r3, [r7, #12]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800915a:	b580      	push	{r7, lr}
 800915c:	b08a      	sub	sp, #40	; 0x28
 800915e:	af02      	add	r7, sp, #8
 8009160:	60f8      	str	r0, [r7, #12]
 8009162:	60b9      	str	r1, [r7, #8]
 8009164:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009166:	2300      	movs	r3, #0
 8009168:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800916a:	f3ef 8305 	mrs	r3, IPSR
 800916e:	613b      	str	r3, [r7, #16]
  return(result);
 8009170:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009172:	2b00      	cmp	r3, #0
 8009174:	d175      	bne.n	8009262 <osSemaphoreNew+0x108>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d072      	beq.n	8009262 <osSemaphoreNew+0x108>
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	429a      	cmp	r2, r3
 8009182:	d86e      	bhi.n	8009262 <osSemaphoreNew+0x108>
    mem = -1;
 8009184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009188:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d015      	beq.n	80091bc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d006      	beq.n	80091a6 <osSemaphoreNew+0x4c>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	2b4f      	cmp	r3, #79	; 0x4f
 800919e:	d902      	bls.n	80091a6 <osSemaphoreNew+0x4c>
        mem = 1;
 80091a0:	2301      	movs	r3, #1
 80091a2:	61bb      	str	r3, [r7, #24]
 80091a4:	e00c      	b.n	80091c0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d108      	bne.n	80091c0 <osSemaphoreNew+0x66>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d104      	bne.n	80091c0 <osSemaphoreNew+0x66>
          mem = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	61bb      	str	r3, [r7, #24]
 80091ba:	e001      	b.n	80091c0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091c6:	d04c      	beq.n	8009262 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d128      	bne.n	8009220 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d10a      	bne.n	80091ea <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	2203      	movs	r2, #3
 80091da:	9200      	str	r2, [sp, #0]
 80091dc:	2200      	movs	r2, #0
 80091de:	2100      	movs	r1, #0
 80091e0:	2001      	movs	r0, #1
 80091e2:	f000 f993 	bl	800950c <xQueueGenericCreateStatic>
 80091e6:	61f8      	str	r0, [r7, #28]
 80091e8:	e005      	b.n	80091f6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80091ea:	2203      	movs	r2, #3
 80091ec:	2100      	movs	r1, #0
 80091ee:	2001      	movs	r0, #1
 80091f0:	f000 fa04 	bl	80095fc <xQueueGenericCreate>
 80091f4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d022      	beq.n	8009242 <osSemaphoreNew+0xe8>
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d01f      	beq.n	8009242 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009202:	2300      	movs	r3, #0
 8009204:	2200      	movs	r2, #0
 8009206:	2100      	movs	r1, #0
 8009208:	69f8      	ldr	r0, [r7, #28]
 800920a:	f000 fabf 	bl	800978c <xQueueGenericSend>
 800920e:	4603      	mov	r3, r0
 8009210:	2b01      	cmp	r3, #1
 8009212:	d016      	beq.n	8009242 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009214:	69f8      	ldr	r0, [r7, #28]
 8009216:	f000 fd33 	bl	8009c80 <vQueueDelete>
            hSemaphore = NULL;
 800921a:	2300      	movs	r3, #0
 800921c:	61fb      	str	r3, [r7, #28]
 800921e:	e010      	b.n	8009242 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d108      	bne.n	8009238 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	461a      	mov	r2, r3
 800922c:	68b9      	ldr	r1, [r7, #8]
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f000 fa41 	bl	80096b6 <xQueueCreateCountingSemaphoreStatic>
 8009234:	61f8      	str	r0, [r7, #28]
 8009236:	e004      	b.n	8009242 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009238:	68b9      	ldr	r1, [r7, #8]
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f000 fa72 	bl	8009724 <xQueueCreateCountingSemaphore>
 8009240:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00c      	beq.n	8009262 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <osSemaphoreNew+0xfc>
          name = attr->name;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	617b      	str	r3, [r7, #20]
 8009254:	e001      	b.n	800925a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009256:	2300      	movs	r3, #0
 8009258:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800925a:	6979      	ldr	r1, [r7, #20]
 800925c:	69f8      	ldr	r0, [r7, #28]
 800925e:	f000 fe43 	bl	8009ee8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009262:	69fb      	ldr	r3, [r7, #28]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3720      	adds	r7, #32
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4a07      	ldr	r2, [pc, #28]	; (8009298 <vApplicationGetIdleTaskMemory+0x2c>)
 800927c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	4a06      	ldr	r2, [pc, #24]	; (800929c <vApplicationGetIdleTaskMemory+0x30>)
 8009282:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2280      	movs	r2, #128	; 0x80
 8009288:	601a      	str	r2, [r3, #0]
}
 800928a:	bf00      	nop
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	20000920 	.word	0x20000920
 800929c:	2000097c 	.word	0x2000097c

080092a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4a07      	ldr	r2, [pc, #28]	; (80092cc <vApplicationGetTimerTaskMemory+0x2c>)
 80092b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	4a06      	ldr	r2, [pc, #24]	; (80092d0 <vApplicationGetTimerTaskMemory+0x30>)
 80092b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092be:	601a      	str	r2, [r3, #0]
}
 80092c0:	bf00      	nop
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	20000b7c 	.word	0x20000b7c
 80092d0:	20000bd8 	.word	0x20000bd8

080092d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f103 0208 	add.w	r2, r3, #8
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f103 0208 	add.w	r2, r3, #8
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f103 0208 	add.w	r2, r3, #8
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009322:	bf00      	nop
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800932e:	b480      	push	{r7}
 8009330:	b085      	sub	sp, #20
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	689a      	ldr	r2, [r3, #8]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	601a      	str	r2, [r3, #0]
}
 800936a:	bf00      	nop
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009376:	b480      	push	{r7}
 8009378:	b085      	sub	sp, #20
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800938c:	d103      	bne.n	8009396 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	60fb      	str	r3, [r7, #12]
 8009394:	e00c      	b.n	80093b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3308      	adds	r3, #8
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	e002      	b.n	80093a4 <vListInsert+0x2e>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	60fb      	str	r3, [r7, #12]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d2f6      	bcs.n	800939e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	683a      	ldr	r2, [r7, #0]
 80093be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	601a      	str	r2, [r3, #0]
}
 80093dc:	bf00      	nop
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	6892      	ldr	r2, [r2, #8]
 80093fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	6852      	ldr	r2, [r2, #4]
 8009408:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	429a      	cmp	r2, r3
 8009412:	d103      	bne.n	800941c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	1e5a      	subs	r2, r3, #1
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009466:	f002 f93d 	bl	800b6e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009472:	68f9      	ldr	r1, [r7, #12]
 8009474:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009476:	fb01 f303 	mul.w	r3, r1, r3
 800947a:	441a      	add	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009496:	3b01      	subs	r3, #1
 8009498:	68f9      	ldr	r1, [r7, #12]
 800949a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800949c:	fb01 f303 	mul.w	r3, r1, r3
 80094a0:	441a      	add	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	22ff      	movs	r2, #255	; 0xff
 80094aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	22ff      	movs	r2, #255	; 0xff
 80094b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d114      	bne.n	80094e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d01a      	beq.n	80094fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3310      	adds	r3, #16
 80094c8:	4618      	mov	r0, r3
 80094ca:	f001 f9f5 	bl	800a8b8 <xTaskRemoveFromEventList>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d012      	beq.n	80094fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80094d4:	4b0c      	ldr	r3, [pc, #48]	; (8009508 <xQueueGenericReset+0xcc>)
 80094d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	e009      	b.n	80094fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3310      	adds	r3, #16
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff fef2 	bl	80092d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	3324      	adds	r3, #36	; 0x24
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7ff feed 	bl	80092d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80094fa:	f002 f923 	bl	800b744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80094fe:	2301      	movs	r3, #1
}
 8009500:	4618      	mov	r0, r3
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	e000ed04 	.word	0xe000ed04

0800950c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08e      	sub	sp, #56	; 0x38
 8009510:	af02      	add	r7, sp, #8
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
 8009518:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10a      	bne.n	8009552 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800954e:	bf00      	nop
 8009550:	e7fe      	b.n	8009550 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <xQueueGenericCreateStatic+0x52>
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <xQueueGenericCreateStatic+0x56>
 800955e:	2301      	movs	r3, #1
 8009560:	e000      	b.n	8009564 <xQueueGenericCreateStatic+0x58>
 8009562:	2300      	movs	r3, #0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	623b      	str	r3, [r7, #32]
}
 800957a:	bf00      	nop
 800957c:	e7fe      	b.n	800957c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d102      	bne.n	800958a <xQueueGenericCreateStatic+0x7e>
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <xQueueGenericCreateStatic+0x82>
 800958a:	2301      	movs	r3, #1
 800958c:	e000      	b.n	8009590 <xQueueGenericCreateStatic+0x84>
 800958e:	2300      	movs	r3, #0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	61fb      	str	r3, [r7, #28]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095aa:	2350      	movs	r3, #80	; 0x50
 80095ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b50      	cmp	r3, #80	; 0x50
 80095b2:	d00a      	beq.n	80095ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	61bb      	str	r3, [r7, #24]
}
 80095c6:	bf00      	nop
 80095c8:	e7fe      	b.n	80095c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80095d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00d      	beq.n	80095f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80095e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	4613      	mov	r3, r2
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 f83f 	bl	8009670 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80095f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3730      	adds	r7, #48	; 0x30
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b08a      	sub	sp, #40	; 0x28
 8009600:	af02      	add	r7, sp, #8
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	4613      	mov	r3, r2
 8009608:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10a      	bne.n	8009626 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	613b      	str	r3, [r7, #16]
}
 8009622:	bf00      	nop
 8009624:	e7fe      	b.n	8009624 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	fb02 f303 	mul.w	r3, r2, r3
 800962e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	3350      	adds	r3, #80	; 0x50
 8009634:	4618      	mov	r0, r3
 8009636:	f002 f977 	bl	800b928 <pvPortMalloc>
 800963a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d011      	beq.n	8009666 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	3350      	adds	r3, #80	; 0x50
 800964a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009654:	79fa      	ldrb	r2, [r7, #7]
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	4613      	mov	r3, r2
 800965c:	697a      	ldr	r2, [r7, #20]
 800965e:	68b9      	ldr	r1, [r7, #8]
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 f805 	bl	8009670 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009666:	69bb      	ldr	r3, [r7, #24]
	}
 8009668:	4618      	mov	r0, r3
 800966a:	3720      	adds	r7, #32
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d103      	bne.n	800968c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	69ba      	ldr	r2, [r7, #24]
 8009688:	601a      	str	r2, [r3, #0]
 800968a:	e002      	b.n	8009692 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800969e:	2101      	movs	r1, #1
 80096a0:	69b8      	ldr	r0, [r7, #24]
 80096a2:	f7ff fecb 	bl	800943c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	78fa      	ldrb	r2, [r7, #3]
 80096aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80096ae:	bf00      	nop
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b08a      	sub	sp, #40	; 0x28
 80096ba:	af02      	add	r7, sp, #8
 80096bc:	60f8      	str	r0, [r7, #12]
 80096be:	60b9      	str	r1, [r7, #8]
 80096c0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10a      	bne.n	80096de <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	61bb      	str	r3, [r7, #24]
}
 80096da:	bf00      	nop
 80096dc:	e7fe      	b.n	80096dc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d90a      	bls.n	80096fc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	617b      	str	r3, [r7, #20]
}
 80096f8:	bf00      	nop
 80096fa:	e7fe      	b.n	80096fa <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80096fc:	2302      	movs	r3, #2
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	2100      	movs	r1, #0
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f7ff ff00 	bl	800950c <xQueueGenericCreateStatic>
 800970c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800971a:	69fb      	ldr	r3, [r7, #28]
	}
 800971c:	4618      	mov	r0, r3
 800971e:	3720      	adds	r7, #32
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10a      	bne.n	800974a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	613b      	str	r3, [r7, #16]
}
 8009746:	bf00      	nop
 8009748:	e7fe      	b.n	8009748 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	429a      	cmp	r2, r3
 8009750:	d90a      	bls.n	8009768 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	60fb      	str	r3, [r7, #12]
}
 8009764:	bf00      	nop
 8009766:	e7fe      	b.n	8009766 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009768:	2202      	movs	r2, #2
 800976a:	2100      	movs	r1, #0
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7ff ff45 	bl	80095fc <xQueueGenericCreate>
 8009772:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d002      	beq.n	8009780 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	683a      	ldr	r2, [r7, #0]
 800977e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009780:	697b      	ldr	r3, [r7, #20]
	}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b08e      	sub	sp, #56	; 0x38
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800979a:	2300      	movs	r3, #0
 800979c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80097a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10a      	bne.n	80097be <xQueueGenericSend+0x32>
	__asm volatile
 80097a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097ba:	bf00      	nop
 80097bc:	e7fe      	b.n	80097bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d103      	bne.n	80097cc <xQueueGenericSend+0x40>
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <xQueueGenericSend+0x44>
 80097cc:	2301      	movs	r3, #1
 80097ce:	e000      	b.n	80097d2 <xQueueGenericSend+0x46>
 80097d0:	2300      	movs	r3, #0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10a      	bne.n	80097ec <xQueueGenericSend+0x60>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097e8:	bf00      	nop
 80097ea:	e7fe      	b.n	80097ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d103      	bne.n	80097fa <xQueueGenericSend+0x6e>
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d101      	bne.n	80097fe <xQueueGenericSend+0x72>
 80097fa:	2301      	movs	r3, #1
 80097fc:	e000      	b.n	8009800 <xQueueGenericSend+0x74>
 80097fe:	2300      	movs	r3, #0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10a      	bne.n	800981a <xQueueGenericSend+0x8e>
	__asm volatile
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	623b      	str	r3, [r7, #32]
}
 8009816:	bf00      	nop
 8009818:	e7fe      	b.n	8009818 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800981a:	f001 fa0b 	bl	800ac34 <xTaskGetSchedulerState>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d102      	bne.n	800982a <xQueueGenericSend+0x9e>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d101      	bne.n	800982e <xQueueGenericSend+0xa2>
 800982a:	2301      	movs	r3, #1
 800982c:	e000      	b.n	8009830 <xQueueGenericSend+0xa4>
 800982e:	2300      	movs	r3, #0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10a      	bne.n	800984a <xQueueGenericSend+0xbe>
	__asm volatile
 8009834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009838:	f383 8811 	msr	BASEPRI, r3
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	61fb      	str	r3, [r7, #28]
}
 8009846:	bf00      	nop
 8009848:	e7fe      	b.n	8009848 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800984a:	f001 ff4b 	bl	800b6e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009856:	429a      	cmp	r2, r3
 8009858:	d302      	bcc.n	8009860 <xQueueGenericSend+0xd4>
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	2b02      	cmp	r3, #2
 800985e:	d129      	bne.n	80098b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	68b9      	ldr	r1, [r7, #8]
 8009864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009866:	f000 fa2e 	bl	8009cc6 <prvCopyDataToQueue>
 800986a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800986c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	2b00      	cmp	r3, #0
 8009872:	d010      	beq.n	8009896 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009876:	3324      	adds	r3, #36	; 0x24
 8009878:	4618      	mov	r0, r3
 800987a:	f001 f81d 	bl	800a8b8 <xTaskRemoveFromEventList>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d013      	beq.n	80098ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009884:	4b3f      	ldr	r3, [pc, #252]	; (8009984 <xQueueGenericSend+0x1f8>)
 8009886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	e00a      	b.n	80098ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009898:	2b00      	cmp	r3, #0
 800989a:	d007      	beq.n	80098ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800989c:	4b39      	ldr	r3, [pc, #228]	; (8009984 <xQueueGenericSend+0x1f8>)
 800989e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80098ac:	f001 ff4a 	bl	800b744 <vPortExitCritical>
				return pdPASS;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e063      	b.n	800997c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d103      	bne.n	80098c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098ba:	f001 ff43 	bl	800b744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	e05c      	b.n	800997c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d106      	bne.n	80098d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098c8:	f107 0314 	add.w	r3, r7, #20
 80098cc:	4618      	mov	r0, r3
 80098ce:	f001 f857 	bl	800a980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098d2:	2301      	movs	r3, #1
 80098d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098d6:	f001 ff35 	bl	800b744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098da:	f000 fdc9 	bl	800a470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098de:	f001 ff01 	bl	800b6e4 <vPortEnterCritical>
 80098e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098e8:	b25b      	sxtb	r3, r3
 80098ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ee:	d103      	bne.n	80098f8 <xQueueGenericSend+0x16c>
 80098f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098fe:	b25b      	sxtb	r3, r3
 8009900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009904:	d103      	bne.n	800990e <xQueueGenericSend+0x182>
 8009906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009908:	2200      	movs	r2, #0
 800990a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800990e:	f001 ff19 	bl	800b744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009912:	1d3a      	adds	r2, r7, #4
 8009914:	f107 0314 	add.w	r3, r7, #20
 8009918:	4611      	mov	r1, r2
 800991a:	4618      	mov	r0, r3
 800991c:	f001 f846 	bl	800a9ac <xTaskCheckForTimeOut>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d124      	bne.n	8009970 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009928:	f000 fac5 	bl	8009eb6 <prvIsQueueFull>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d018      	beq.n	8009964 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	3310      	adds	r3, #16
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	4611      	mov	r1, r2
 800993a:	4618      	mov	r0, r3
 800993c:	f000 ff6c 	bl	800a818 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009942:	f000 fa50 	bl	8009de6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009946:	f000 fda1 	bl	800a48c <xTaskResumeAll>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	f47f af7c 	bne.w	800984a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009952:	4b0c      	ldr	r3, [pc, #48]	; (8009984 <xQueueGenericSend+0x1f8>)
 8009954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009958:	601a      	str	r2, [r3, #0]
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	e772      	b.n	800984a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009966:	f000 fa3e 	bl	8009de6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800996a:	f000 fd8f 	bl	800a48c <xTaskResumeAll>
 800996e:	e76c      	b.n	800984a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009972:	f000 fa38 	bl	8009de6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009976:	f000 fd89 	bl	800a48c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800997a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800997c:	4618      	mov	r0, r3
 800997e:	3738      	adds	r7, #56	; 0x38
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	e000ed04 	.word	0xe000ed04

08009988 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b090      	sub	sp, #64	; 0x40
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
 8009994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800999a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10a      	bne.n	80099b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80099b2:	bf00      	nop
 80099b4:	e7fe      	b.n	80099b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d103      	bne.n	80099c4 <xQueueGenericSendFromISR+0x3c>
 80099bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <xQueueGenericSendFromISR+0x40>
 80099c4:	2301      	movs	r3, #1
 80099c6:	e000      	b.n	80099ca <xQueueGenericSendFromISR+0x42>
 80099c8:	2300      	movs	r3, #0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10a      	bne.n	80099e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80099e0:	bf00      	nop
 80099e2:	e7fe      	b.n	80099e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d103      	bne.n	80099f2 <xQueueGenericSendFromISR+0x6a>
 80099ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d101      	bne.n	80099f6 <xQueueGenericSendFromISR+0x6e>
 80099f2:	2301      	movs	r3, #1
 80099f4:	e000      	b.n	80099f8 <xQueueGenericSendFromISR+0x70>
 80099f6:	2300      	movs	r3, #0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10a      	bne.n	8009a12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	623b      	str	r3, [r7, #32]
}
 8009a0e:	bf00      	nop
 8009a10:	e7fe      	b.n	8009a10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a12:	f001 ff49 	bl	800b8a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a16:	f3ef 8211 	mrs	r2, BASEPRI
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	61fa      	str	r2, [r7, #28]
 8009a2c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a2e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a30:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d302      	bcc.n	8009a44 <xQueueGenericSendFromISR+0xbc>
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d12f      	bne.n	8009aa4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a52:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	68b9      	ldr	r1, [r7, #8]
 8009a58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a5a:	f000 f934 	bl	8009cc6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a66:	d112      	bne.n	8009a8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d016      	beq.n	8009a9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a72:	3324      	adds	r3, #36	; 0x24
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 ff1f 	bl	800a8b8 <xTaskRemoveFromEventList>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00e      	beq.n	8009a9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00b      	beq.n	8009a9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	e007      	b.n	8009a9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a92:	3301      	adds	r3, #1
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	b25a      	sxtb	r2, r3
 8009a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009aa2:	e001      	b.n	8009aa8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aaa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ab2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3740      	adds	r7, #64	; 0x40
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
	...

08009ac0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b08c      	sub	sp, #48	; 0x30
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009acc:	2300      	movs	r3, #0
 8009ace:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10a      	bne.n	8009af0 <xQueueReceive+0x30>
	__asm volatile
 8009ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ade:	f383 8811 	msr	BASEPRI, r3
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	f3bf 8f4f 	dsb	sy
 8009aea:	623b      	str	r3, [r7, #32]
}
 8009aec:	bf00      	nop
 8009aee:	e7fe      	b.n	8009aee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d103      	bne.n	8009afe <xQueueReceive+0x3e>
 8009af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <xQueueReceive+0x42>
 8009afe:	2301      	movs	r3, #1
 8009b00:	e000      	b.n	8009b04 <xQueueReceive+0x44>
 8009b02:	2300      	movs	r3, #0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10a      	bne.n	8009b1e <xQueueReceive+0x5e>
	__asm volatile
 8009b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0c:	f383 8811 	msr	BASEPRI, r3
 8009b10:	f3bf 8f6f 	isb	sy
 8009b14:	f3bf 8f4f 	dsb	sy
 8009b18:	61fb      	str	r3, [r7, #28]
}
 8009b1a:	bf00      	nop
 8009b1c:	e7fe      	b.n	8009b1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b1e:	f001 f889 	bl	800ac34 <xTaskGetSchedulerState>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d102      	bne.n	8009b2e <xQueueReceive+0x6e>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <xQueueReceive+0x72>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e000      	b.n	8009b34 <xQueueReceive+0x74>
 8009b32:	2300      	movs	r3, #0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10a      	bne.n	8009b4e <xQueueReceive+0x8e>
	__asm volatile
 8009b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3c:	f383 8811 	msr	BASEPRI, r3
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	61bb      	str	r3, [r7, #24]
}
 8009b4a:	bf00      	nop
 8009b4c:	e7fe      	b.n	8009b4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b4e:	f001 fdc9 	bl	800b6e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d01f      	beq.n	8009b9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b5e:	68b9      	ldr	r1, [r7, #8]
 8009b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b62:	f000 f91a 	bl	8009d9a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	1e5a      	subs	r2, r3, #1
 8009b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00f      	beq.n	8009b96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b78:	3310      	adds	r3, #16
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 fe9c 	bl	800a8b8 <xTaskRemoveFromEventList>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d007      	beq.n	8009b96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b86:	4b3d      	ldr	r3, [pc, #244]	; (8009c7c <xQueueReceive+0x1bc>)
 8009b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b96:	f001 fdd5 	bl	800b744 <vPortExitCritical>
				return pdPASS;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e069      	b.n	8009c72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d103      	bne.n	8009bac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ba4:	f001 fdce 	bl	800b744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	e062      	b.n	8009c72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d106      	bne.n	8009bc0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bb2:	f107 0310 	add.w	r3, r7, #16
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f000 fee2 	bl	800a980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bc0:	f001 fdc0 	bl	800b744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bc4:	f000 fc54 	bl	800a470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bc8:	f001 fd8c 	bl	800b6e4 <vPortEnterCritical>
 8009bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bd2:	b25b      	sxtb	r3, r3
 8009bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bd8:	d103      	bne.n	8009be2 <xQueueReceive+0x122>
 8009bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009be8:	b25b      	sxtb	r3, r3
 8009bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bee:	d103      	bne.n	8009bf8 <xQueueReceive+0x138>
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bf8:	f001 fda4 	bl	800b744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bfc:	1d3a      	adds	r2, r7, #4
 8009bfe:	f107 0310 	add.w	r3, r7, #16
 8009c02:	4611      	mov	r1, r2
 8009c04:	4618      	mov	r0, r3
 8009c06:	f000 fed1 	bl	800a9ac <xTaskCheckForTimeOut>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d123      	bne.n	8009c58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c12:	f000 f93a 	bl	8009e8a <prvIsQueueEmpty>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d017      	beq.n	8009c4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1e:	3324      	adds	r3, #36	; 0x24
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	4611      	mov	r1, r2
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 fdf7 	bl	800a818 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c2c:	f000 f8db 	bl	8009de6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c30:	f000 fc2c 	bl	800a48c <xTaskResumeAll>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d189      	bne.n	8009b4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009c3a:	4b10      	ldr	r3, [pc, #64]	; (8009c7c <xQueueReceive+0x1bc>)
 8009c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	e780      	b.n	8009b4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c4e:	f000 f8ca 	bl	8009de6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c52:	f000 fc1b 	bl	800a48c <xTaskResumeAll>
 8009c56:	e77a      	b.n	8009b4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c5a:	f000 f8c4 	bl	8009de6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c5e:	f000 fc15 	bl	800a48c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c64:	f000 f911 	bl	8009e8a <prvIsQueueEmpty>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f43f af6f 	beq.w	8009b4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3730      	adds	r7, #48	; 0x30
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	e000ed04 	.word	0xe000ed04

08009c80 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <vQueueDelete+0x28>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	60bb      	str	r3, [r7, #8]
}
 8009ca4:	bf00      	nop
 8009ca6:	e7fe      	b.n	8009ca6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 f947 	bl	8009f3c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d102      	bne.n	8009cbe <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f001 ff01 	bl	800bac0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009cbe:	bf00      	nop
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b086      	sub	sp, #24
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	60f8      	str	r0, [r7, #12]
 8009cce:	60b9      	str	r1, [r7, #8]
 8009cd0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cda:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10d      	bne.n	8009d00 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d14d      	bne.n	8009d88 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 ffbd 	bl	800ac70 <xTaskPriorityDisinherit>
 8009cf6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	609a      	str	r2, [r3, #8]
 8009cfe:	e043      	b.n	8009d88 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d119      	bne.n	8009d3a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6858      	ldr	r0, [r3, #4]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	461a      	mov	r2, r3
 8009d10:	68b9      	ldr	r1, [r7, #8]
 8009d12:	f002 fd61 	bl	800c7d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	685a      	ldr	r2, [r3, #4]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1e:	441a      	add	r2, r3
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d32b      	bcc.n	8009d88 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	605a      	str	r2, [r3, #4]
 8009d38:	e026      	b.n	8009d88 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	68d8      	ldr	r0, [r3, #12]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d42:	461a      	mov	r2, r3
 8009d44:	68b9      	ldr	r1, [r7, #8]
 8009d46:	f002 fd47 	bl	800c7d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	68da      	ldr	r2, [r3, #12]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d52:	425b      	negs	r3, r3
 8009d54:	441a      	add	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	68da      	ldr	r2, [r3, #12]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d207      	bcs.n	8009d76 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	689a      	ldr	r2, [r3, #8]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6e:	425b      	negs	r3, r3
 8009d70:	441a      	add	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d105      	bne.n	8009d88 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d002      	beq.n	8009d88 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	1c5a      	adds	r2, r3, #1
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d90:	697b      	ldr	r3, [r7, #20]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d018      	beq.n	8009dde <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	68da      	ldr	r2, [r3, #12]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db4:	441a      	add	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68da      	ldr	r2, [r3, #12]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d303      	bcc.n	8009dce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68d9      	ldr	r1, [r3, #12]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	6838      	ldr	r0, [r7, #0]
 8009dda:	f002 fcfd 	bl	800c7d8 <memcpy>
	}
}
 8009dde:	bf00      	nop
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009dee:	f001 fc79 	bl	800b6e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009df8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009dfa:	e011      	b.n	8009e20 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d012      	beq.n	8009e2a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	3324      	adds	r3, #36	; 0x24
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f000 fd55 	bl	800a8b8 <xTaskRemoveFromEventList>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e14:	f000 fe2c 	bl	800aa70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	dce9      	bgt.n	8009dfc <prvUnlockQueue+0x16>
 8009e28:	e000      	b.n	8009e2c <prvUnlockQueue+0x46>
					break;
 8009e2a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	22ff      	movs	r2, #255	; 0xff
 8009e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e34:	f001 fc86 	bl	800b744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e38:	f001 fc54 	bl	800b6e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e42:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e44:	e011      	b.n	8009e6a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d012      	beq.n	8009e74 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	3310      	adds	r3, #16
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 fd30 	bl	800a8b8 <xTaskRemoveFromEventList>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e5e:	f000 fe07 	bl	800aa70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e62:	7bbb      	ldrb	r3, [r7, #14]
 8009e64:	3b01      	subs	r3, #1
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	dce9      	bgt.n	8009e46 <prvUnlockQueue+0x60>
 8009e72:	e000      	b.n	8009e76 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e74:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	22ff      	movs	r2, #255	; 0xff
 8009e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e7e:	f001 fc61 	bl	800b744 <vPortExitCritical>
}
 8009e82:	bf00      	nop
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b084      	sub	sp, #16
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e92:	f001 fc27 	bl	800b6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d102      	bne.n	8009ea4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	60fb      	str	r3, [r7, #12]
 8009ea2:	e001      	b.n	8009ea8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ea8:	f001 fc4c 	bl	800b744 <vPortExitCritical>

	return xReturn;
 8009eac:	68fb      	ldr	r3, [r7, #12]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ebe:	f001 fc11 	bl	800b6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d102      	bne.n	8009ed4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	e001      	b.n	8009ed8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ed8:	f001 fc34 	bl	800b744 <vPortExitCritical>

	return xReturn;
 8009edc:	68fb      	ldr	r3, [r7, #12]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
	...

08009ee8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	60fb      	str	r3, [r7, #12]
 8009ef6:	e014      	b.n	8009f22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ef8:	4a0f      	ldr	r2, [pc, #60]	; (8009f38 <vQueueAddToRegistry+0x50>)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10b      	bne.n	8009f1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009f04:	490c      	ldr	r1, [pc, #48]	; (8009f38 <vQueueAddToRegistry+0x50>)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f0e:	4a0a      	ldr	r2, [pc, #40]	; (8009f38 <vQueueAddToRegistry+0x50>)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	4413      	add	r3, r2
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f1a:	e006      	b.n	8009f2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	60fb      	str	r3, [r7, #12]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2b07      	cmp	r3, #7
 8009f26:	d9e7      	bls.n	8009ef8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f28:	bf00      	nop
 8009f2a:	bf00      	nop
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	20000fd8 	.word	0x20000fd8

08009f3c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f44:	2300      	movs	r3, #0
 8009f46:	60fb      	str	r3, [r7, #12]
 8009f48:	e016      	b.n	8009f78 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009f4a:	4a10      	ldr	r2, [pc, #64]	; (8009f8c <vQueueUnregisterQueue+0x50>)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	4413      	add	r3, r2
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d10b      	bne.n	8009f72 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009f5a:	4a0c      	ldr	r2, [pc, #48]	; (8009f8c <vQueueUnregisterQueue+0x50>)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2100      	movs	r1, #0
 8009f60:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009f64:	4a09      	ldr	r2, [pc, #36]	; (8009f8c <vQueueUnregisterQueue+0x50>)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	00db      	lsls	r3, r3, #3
 8009f6a:	4413      	add	r3, r2
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	605a      	str	r2, [r3, #4]
				break;
 8009f70:	e006      	b.n	8009f80 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3301      	adds	r3, #1
 8009f76:	60fb      	str	r3, [r7, #12]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b07      	cmp	r3, #7
 8009f7c:	d9e5      	bls.n	8009f4a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009f7e:	bf00      	nop
 8009f80:	bf00      	nop
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	20000fd8 	.word	0x20000fd8

08009f90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009fa0:	f001 fba0 	bl	800b6e4 <vPortEnterCritical>
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009faa:	b25b      	sxtb	r3, r3
 8009fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fb0:	d103      	bne.n	8009fba <vQueueWaitForMessageRestricted+0x2a>
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fc0:	b25b      	sxtb	r3, r3
 8009fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fc6:	d103      	bne.n	8009fd0 <vQueueWaitForMessageRestricted+0x40>
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fd0:	f001 fbb8 	bl	800b744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d106      	bne.n	8009fea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	3324      	adds	r3, #36	; 0x24
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	68b9      	ldr	r1, [r7, #8]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fc3b 	bl	800a860 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009fea:	6978      	ldr	r0, [r7, #20]
 8009fec:	f7ff fefb 	bl	8009de6 <prvUnlockQueue>
	}
 8009ff0:	bf00      	nop
 8009ff2:	3718      	adds	r7, #24
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b08e      	sub	sp, #56	; 0x38
 8009ffc:	af04      	add	r7, sp, #16
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
 800a004:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	623b      	str	r3, [r7, #32]
}
 800a01e:	bf00      	nop
 800a020:	e7fe      	b.n	800a020 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10a      	bne.n	800a03e <xTaskCreateStatic+0x46>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	61fb      	str	r3, [r7, #28]
}
 800a03a:	bf00      	nop
 800a03c:	e7fe      	b.n	800a03c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a03e:	235c      	movs	r3, #92	; 0x5c
 800a040:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	2b5c      	cmp	r3, #92	; 0x5c
 800a046:	d00a      	beq.n	800a05e <xTaskCreateStatic+0x66>
	__asm volatile
 800a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	61bb      	str	r3, [r7, #24]
}
 800a05a:	bf00      	nop
 800a05c:	e7fe      	b.n	800a05c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a05e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a062:	2b00      	cmp	r3, #0
 800a064:	d01e      	beq.n	800a0a4 <xTaskCreateStatic+0xac>
 800a066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d01b      	beq.n	800a0a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a074:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a078:	2202      	movs	r2, #2
 800a07a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a07e:	2300      	movs	r3, #0
 800a080:	9303      	str	r3, [sp, #12]
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	9302      	str	r3, [sp, #8]
 800a086:	f107 0314 	add.w	r3, r7, #20
 800a08a:	9301      	str	r3, [sp, #4]
 800a08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	68b9      	ldr	r1, [r7, #8]
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f000 f850 	bl	800a13c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a09c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a09e:	f000 f8dd 	bl	800a25c <prvAddNewTaskToReadyList>
 800a0a2:	e001      	b.n	800a0a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a0a8:	697b      	ldr	r3, [r7, #20]
	}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3728      	adds	r7, #40	; 0x28
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b08c      	sub	sp, #48	; 0x30
 800a0b6:	af04      	add	r7, sp, #16
 800a0b8:	60f8      	str	r0, [r7, #12]
 800a0ba:	60b9      	str	r1, [r7, #8]
 800a0bc:	603b      	str	r3, [r7, #0]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a0c2:	88fb      	ldrh	r3, [r7, #6]
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f001 fc2e 	bl	800b928 <pvPortMalloc>
 800a0cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00e      	beq.n	800a0f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a0d4:	205c      	movs	r0, #92	; 0x5c
 800a0d6:	f001 fc27 	bl	800b928 <pvPortMalloc>
 800a0da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d003      	beq.n	800a0ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	631a      	str	r2, [r3, #48]	; 0x30
 800a0e8:	e005      	b.n	800a0f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a0ea:	6978      	ldr	r0, [r7, #20]
 800a0ec:	f001 fce8 	bl	800bac0 <vPortFree>
 800a0f0:	e001      	b.n	800a0f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d017      	beq.n	800a12c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a104:	88fa      	ldrh	r2, [r7, #6]
 800a106:	2300      	movs	r3, #0
 800a108:	9303      	str	r3, [sp, #12]
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	9302      	str	r3, [sp, #8]
 800a10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a110:	9301      	str	r3, [sp, #4]
 800a112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	68b9      	ldr	r1, [r7, #8]
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 f80e 	bl	800a13c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a120:	69f8      	ldr	r0, [r7, #28]
 800a122:	f000 f89b 	bl	800a25c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a126:	2301      	movs	r3, #1
 800a128:	61bb      	str	r3, [r7, #24]
 800a12a:	e002      	b.n	800a132 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a12c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a130:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a132:	69bb      	ldr	r3, [r7, #24]
	}
 800a134:	4618      	mov	r0, r3
 800a136:	3720      	adds	r7, #32
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
 800a148:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	461a      	mov	r2, r3
 800a154:	21a5      	movs	r1, #165	; 0xa5
 800a156:	f002 fb07 	bl	800c768 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a164:	3b01      	subs	r3, #1
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	4413      	add	r3, r2
 800a16a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	f023 0307 	bic.w	r3, r3, #7
 800a172:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	f003 0307 	and.w	r3, r3, #7
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00a      	beq.n	800a194 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	617b      	str	r3, [r7, #20]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d01f      	beq.n	800a1da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a19a:	2300      	movs	r3, #0
 800a19c:	61fb      	str	r3, [r7, #28]
 800a19e:	e012      	b.n	800a1c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	7819      	ldrb	r1, [r3, #0]
 800a1a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	3334      	adds	r3, #52	; 0x34
 800a1b0:	460a      	mov	r2, r1
 800a1b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d006      	beq.n	800a1ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	61fb      	str	r3, [r7, #28]
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	2b0f      	cmp	r3, #15
 800a1ca:	d9e9      	bls.n	800a1a0 <prvInitialiseNewTask+0x64>
 800a1cc:	e000      	b.n	800a1d0 <prvInitialiseNewTask+0x94>
			{
				break;
 800a1ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1d8:	e003      	b.n	800a1e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	2b37      	cmp	r3, #55	; 0x37
 800a1e6:	d901      	bls.n	800a1ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a1e8:	2337      	movs	r3, #55	; 0x37
 800a1ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	3304      	adds	r3, #4
 800a202:	4618      	mov	r0, r3
 800a204:	f7ff f886 	bl	8009314 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20a:	3318      	adds	r3, #24
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7ff f881 	bl	8009314 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a216:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a220:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a226:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	2200      	movs	r2, #0
 800a22c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a230:	2200      	movs	r2, #0
 800a232:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	68f9      	ldr	r1, [r7, #12]
 800a23a:	69b8      	ldr	r0, [r7, #24]
 800a23c:	f001 f928 	bl	800b490 <pxPortInitialiseStack>
 800a240:	4602      	mov	r2, r0
 800a242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a244:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d002      	beq.n	800a252 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a250:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a252:	bf00      	nop
 800a254:	3720      	adds	r7, #32
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a264:	f001 fa3e 	bl	800b6e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a268:	4b2d      	ldr	r3, [pc, #180]	; (800a320 <prvAddNewTaskToReadyList+0xc4>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	3301      	adds	r3, #1
 800a26e:	4a2c      	ldr	r2, [pc, #176]	; (800a320 <prvAddNewTaskToReadyList+0xc4>)
 800a270:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a272:	4b2c      	ldr	r3, [pc, #176]	; (800a324 <prvAddNewTaskToReadyList+0xc8>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d109      	bne.n	800a28e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a27a:	4a2a      	ldr	r2, [pc, #168]	; (800a324 <prvAddNewTaskToReadyList+0xc8>)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a280:	4b27      	ldr	r3, [pc, #156]	; (800a320 <prvAddNewTaskToReadyList+0xc4>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d110      	bne.n	800a2aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a288:	f000 fc16 	bl	800aab8 <prvInitialiseTaskLists>
 800a28c:	e00d      	b.n	800a2aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a28e:	4b26      	ldr	r3, [pc, #152]	; (800a328 <prvAddNewTaskToReadyList+0xcc>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d109      	bne.n	800a2aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a296:	4b23      	ldr	r3, [pc, #140]	; (800a324 <prvAddNewTaskToReadyList+0xc8>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d802      	bhi.n	800a2aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a2a4:	4a1f      	ldr	r2, [pc, #124]	; (800a324 <prvAddNewTaskToReadyList+0xc8>)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a2aa:	4b20      	ldr	r3, [pc, #128]	; (800a32c <prvAddNewTaskToReadyList+0xd0>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	4a1e      	ldr	r2, [pc, #120]	; (800a32c <prvAddNewTaskToReadyList+0xd0>)
 800a2b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a2b4:	4b1d      	ldr	r3, [pc, #116]	; (800a32c <prvAddNewTaskToReadyList+0xd0>)
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c0:	4b1b      	ldr	r3, [pc, #108]	; (800a330 <prvAddNewTaskToReadyList+0xd4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d903      	bls.n	800a2d0 <prvAddNewTaskToReadyList+0x74>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2cc:	4a18      	ldr	r2, [pc, #96]	; (800a330 <prvAddNewTaskToReadyList+0xd4>)
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4413      	add	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4a15      	ldr	r2, [pc, #84]	; (800a334 <prvAddNewTaskToReadyList+0xd8>)
 800a2de:	441a      	add	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	f7ff f821 	bl	800932e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2ec:	f001 fa2a 	bl	800b744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2f0:	4b0d      	ldr	r3, [pc, #52]	; (800a328 <prvAddNewTaskToReadyList+0xcc>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00e      	beq.n	800a316 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2f8:	4b0a      	ldr	r3, [pc, #40]	; (800a324 <prvAddNewTaskToReadyList+0xc8>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a302:	429a      	cmp	r2, r3
 800a304:	d207      	bcs.n	800a316 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a306:	4b0c      	ldr	r3, [pc, #48]	; (800a338 <prvAddNewTaskToReadyList+0xdc>)
 800a308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a30c:	601a      	str	r2, [r3, #0]
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a316:	bf00      	nop
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	200014ec 	.word	0x200014ec
 800a324:	20001018 	.word	0x20001018
 800a328:	200014f8 	.word	0x200014f8
 800a32c:	20001508 	.word	0x20001508
 800a330:	200014f4 	.word	0x200014f4
 800a334:	2000101c 	.word	0x2000101c
 800a338:	e000ed04 	.word	0xe000ed04

0800a33c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a344:	2300      	movs	r3, #0
 800a346:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d017      	beq.n	800a37e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a34e:	4b13      	ldr	r3, [pc, #76]	; (800a39c <vTaskDelay+0x60>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <vTaskDelay+0x30>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	60bb      	str	r3, [r7, #8]
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a36c:	f000 f880 	bl	800a470 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a370:	2100      	movs	r1, #0
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fcea 	bl	800ad4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a378:	f000 f888 	bl	800a48c <xTaskResumeAll>
 800a37c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d107      	bne.n	800a394 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a384:	4b06      	ldr	r3, [pc, #24]	; (800a3a0 <vTaskDelay+0x64>)
 800a386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a38a:	601a      	str	r2, [r3, #0]
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a394:	bf00      	nop
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	20001514 	.word	0x20001514
 800a3a0:	e000ed04 	.word	0xe000ed04

0800a3a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08a      	sub	sp, #40	; 0x28
 800a3a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a3b2:	463a      	mov	r2, r7
 800a3b4:	1d39      	adds	r1, r7, #4
 800a3b6:	f107 0308 	add.w	r3, r7, #8
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fe ff56 	bl	800926c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	9202      	str	r2, [sp, #8]
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	460a      	mov	r2, r1
 800a3d2:	4921      	ldr	r1, [pc, #132]	; (800a458 <vTaskStartScheduler+0xb4>)
 800a3d4:	4821      	ldr	r0, [pc, #132]	; (800a45c <vTaskStartScheduler+0xb8>)
 800a3d6:	f7ff fe0f 	bl	8009ff8 <xTaskCreateStatic>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	4a20      	ldr	r2, [pc, #128]	; (800a460 <vTaskStartScheduler+0xbc>)
 800a3de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a3e0:	4b1f      	ldr	r3, [pc, #124]	; (800a460 <vTaskStartScheduler+0xbc>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	617b      	str	r3, [r7, #20]
 800a3ec:	e001      	b.n	800a3f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d102      	bne.n	800a3fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a3f8:	f000 fcfc 	bl	800adf4 <xTimerCreateTimerTask>
 800a3fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d116      	bne.n	800a432 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	613b      	str	r3, [r7, #16]
}
 800a416:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a418:	4b12      	ldr	r3, [pc, #72]	; (800a464 <vTaskStartScheduler+0xc0>)
 800a41a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a41e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a420:	4b11      	ldr	r3, [pc, #68]	; (800a468 <vTaskStartScheduler+0xc4>)
 800a422:	2201      	movs	r2, #1
 800a424:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a426:	4b11      	ldr	r3, [pc, #68]	; (800a46c <vTaskStartScheduler+0xc8>)
 800a428:	2200      	movs	r2, #0
 800a42a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a42c:	f001 f8b8 	bl	800b5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a430:	e00e      	b.n	800a450 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a438:	d10a      	bne.n	800a450 <vTaskStartScheduler+0xac>
	__asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	60fb      	str	r3, [r7, #12]
}
 800a44c:	bf00      	nop
 800a44e:	e7fe      	b.n	800a44e <vTaskStartScheduler+0xaa>
}
 800a450:	bf00      	nop
 800a452:	3718      	adds	r7, #24
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	0800fb7c 	.word	0x0800fb7c
 800a45c:	0800aa89 	.word	0x0800aa89
 800a460:	20001510 	.word	0x20001510
 800a464:	2000150c 	.word	0x2000150c
 800a468:	200014f8 	.word	0x200014f8
 800a46c:	200014f0 	.word	0x200014f0

0800a470 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a470:	b480      	push	{r7}
 800a472:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a474:	4b04      	ldr	r3, [pc, #16]	; (800a488 <vTaskSuspendAll+0x18>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3301      	adds	r3, #1
 800a47a:	4a03      	ldr	r2, [pc, #12]	; (800a488 <vTaskSuspendAll+0x18>)
 800a47c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a47e:	bf00      	nop
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	20001514 	.word	0x20001514

0800a48c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a492:	2300      	movs	r3, #0
 800a494:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a496:	2300      	movs	r3, #0
 800a498:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a49a:	4b42      	ldr	r3, [pc, #264]	; (800a5a4 <xTaskResumeAll+0x118>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10a      	bne.n	800a4b8 <xTaskResumeAll+0x2c>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	603b      	str	r3, [r7, #0]
}
 800a4b4:	bf00      	nop
 800a4b6:	e7fe      	b.n	800a4b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a4b8:	f001 f914 	bl	800b6e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a4bc:	4b39      	ldr	r3, [pc, #228]	; (800a5a4 <xTaskResumeAll+0x118>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	4a38      	ldr	r2, [pc, #224]	; (800a5a4 <xTaskResumeAll+0x118>)
 800a4c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4c6:	4b37      	ldr	r3, [pc, #220]	; (800a5a4 <xTaskResumeAll+0x118>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d162      	bne.n	800a594 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a4ce:	4b36      	ldr	r3, [pc, #216]	; (800a5a8 <xTaskResumeAll+0x11c>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d05e      	beq.n	800a594 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4d6:	e02f      	b.n	800a538 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d8:	4b34      	ldr	r3, [pc, #208]	; (800a5ac <xTaskResumeAll+0x120>)
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3318      	adds	r3, #24
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fe ff7f 	bl	80093e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fe ff7a 	bl	80093e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f8:	4b2d      	ldr	r3, [pc, #180]	; (800a5b0 <xTaskResumeAll+0x124>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d903      	bls.n	800a508 <xTaskResumeAll+0x7c>
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	4a2a      	ldr	r2, [pc, #168]	; (800a5b0 <xTaskResumeAll+0x124>)
 800a506:	6013      	str	r3, [r2, #0]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a50c:	4613      	mov	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4413      	add	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4a27      	ldr	r2, [pc, #156]	; (800a5b4 <xTaskResumeAll+0x128>)
 800a516:	441a      	add	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3304      	adds	r3, #4
 800a51c:	4619      	mov	r1, r3
 800a51e:	4610      	mov	r0, r2
 800a520:	f7fe ff05 	bl	800932e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a528:	4b23      	ldr	r3, [pc, #140]	; (800a5b8 <xTaskResumeAll+0x12c>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52e:	429a      	cmp	r2, r3
 800a530:	d302      	bcc.n	800a538 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a532:	4b22      	ldr	r3, [pc, #136]	; (800a5bc <xTaskResumeAll+0x130>)
 800a534:	2201      	movs	r2, #1
 800a536:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a538:	4b1c      	ldr	r3, [pc, #112]	; (800a5ac <xTaskResumeAll+0x120>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1cb      	bne.n	800a4d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a546:	f000 fb55 	bl	800abf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a54a:	4b1d      	ldr	r3, [pc, #116]	; (800a5c0 <xTaskResumeAll+0x134>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d010      	beq.n	800a578 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a556:	f000 f847 	bl	800a5e8 <xTaskIncrementTick>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d002      	beq.n	800a566 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a560:	4b16      	ldr	r3, [pc, #88]	; (800a5bc <xTaskResumeAll+0x130>)
 800a562:	2201      	movs	r2, #1
 800a564:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	3b01      	subs	r3, #1
 800a56a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1f1      	bne.n	800a556 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a572:	4b13      	ldr	r3, [pc, #76]	; (800a5c0 <xTaskResumeAll+0x134>)
 800a574:	2200      	movs	r2, #0
 800a576:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a578:	4b10      	ldr	r3, [pc, #64]	; (800a5bc <xTaskResumeAll+0x130>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d009      	beq.n	800a594 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a580:	2301      	movs	r3, #1
 800a582:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a584:	4b0f      	ldr	r3, [pc, #60]	; (800a5c4 <xTaskResumeAll+0x138>)
 800a586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a58a:	601a      	str	r2, [r3, #0]
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a594:	f001 f8d6 	bl	800b744 <vPortExitCritical>

	return xAlreadyYielded;
 800a598:	68bb      	ldr	r3, [r7, #8]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20001514 	.word	0x20001514
 800a5a8:	200014ec 	.word	0x200014ec
 800a5ac:	200014ac 	.word	0x200014ac
 800a5b0:	200014f4 	.word	0x200014f4
 800a5b4:	2000101c 	.word	0x2000101c
 800a5b8:	20001018 	.word	0x20001018
 800a5bc:	20001500 	.word	0x20001500
 800a5c0:	200014fc 	.word	0x200014fc
 800a5c4:	e000ed04 	.word	0xe000ed04

0800a5c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a5ce:	4b05      	ldr	r3, [pc, #20]	; (800a5e4 <xTaskGetTickCount+0x1c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a5d4:	687b      	ldr	r3, [r7, #4]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	200014f0 	.word	0x200014f0

0800a5e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5f2:	4b4f      	ldr	r3, [pc, #316]	; (800a730 <xTaskIncrementTick+0x148>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f040 808f 	bne.w	800a71a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5fc:	4b4d      	ldr	r3, [pc, #308]	; (800a734 <xTaskIncrementTick+0x14c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	3301      	adds	r3, #1
 800a602:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a604:	4a4b      	ldr	r2, [pc, #300]	; (800a734 <xTaskIncrementTick+0x14c>)
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d120      	bne.n	800a652 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a610:	4b49      	ldr	r3, [pc, #292]	; (800a738 <xTaskIncrementTick+0x150>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00a      	beq.n	800a630 <xTaskIncrementTick+0x48>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	603b      	str	r3, [r7, #0]
}
 800a62c:	bf00      	nop
 800a62e:	e7fe      	b.n	800a62e <xTaskIncrementTick+0x46>
 800a630:	4b41      	ldr	r3, [pc, #260]	; (800a738 <xTaskIncrementTick+0x150>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	60fb      	str	r3, [r7, #12]
 800a636:	4b41      	ldr	r3, [pc, #260]	; (800a73c <xTaskIncrementTick+0x154>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a3f      	ldr	r2, [pc, #252]	; (800a738 <xTaskIncrementTick+0x150>)
 800a63c:	6013      	str	r3, [r2, #0]
 800a63e:	4a3f      	ldr	r2, [pc, #252]	; (800a73c <xTaskIncrementTick+0x154>)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6013      	str	r3, [r2, #0]
 800a644:	4b3e      	ldr	r3, [pc, #248]	; (800a740 <xTaskIncrementTick+0x158>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3301      	adds	r3, #1
 800a64a:	4a3d      	ldr	r2, [pc, #244]	; (800a740 <xTaskIncrementTick+0x158>)
 800a64c:	6013      	str	r3, [r2, #0]
 800a64e:	f000 fad1 	bl	800abf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a652:	4b3c      	ldr	r3, [pc, #240]	; (800a744 <xTaskIncrementTick+0x15c>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d349      	bcc.n	800a6f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a65c:	4b36      	ldr	r3, [pc, #216]	; (800a738 <xTaskIncrementTick+0x150>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d104      	bne.n	800a670 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a666:	4b37      	ldr	r3, [pc, #220]	; (800a744 <xTaskIncrementTick+0x15c>)
 800a668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a66c:	601a      	str	r2, [r3, #0]
					break;
 800a66e:	e03f      	b.n	800a6f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a670:	4b31      	ldr	r3, [pc, #196]	; (800a738 <xTaskIncrementTick+0x150>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	429a      	cmp	r2, r3
 800a686:	d203      	bcs.n	800a690 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a688:	4a2e      	ldr	r2, [pc, #184]	; (800a744 <xTaskIncrementTick+0x15c>)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a68e:	e02f      	b.n	800a6f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	3304      	adds	r3, #4
 800a694:	4618      	mov	r0, r3
 800a696:	f7fe fea7 	bl	80093e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d004      	beq.n	800a6ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	3318      	adds	r3, #24
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe fe9e 	bl	80093e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b0:	4b25      	ldr	r3, [pc, #148]	; (800a748 <xTaskIncrementTick+0x160>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d903      	bls.n	800a6c0 <xTaskIncrementTick+0xd8>
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6bc:	4a22      	ldr	r2, [pc, #136]	; (800a748 <xTaskIncrementTick+0x160>)
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4413      	add	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4a1f      	ldr	r2, [pc, #124]	; (800a74c <xTaskIncrementTick+0x164>)
 800a6ce:	441a      	add	r2, r3
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	3304      	adds	r3, #4
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	f7fe fe29 	bl	800932e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e0:	4b1b      	ldr	r3, [pc, #108]	; (800a750 <xTaskIncrementTick+0x168>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d3b8      	bcc.n	800a65c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6ee:	e7b5      	b.n	800a65c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6f0:	4b17      	ldr	r3, [pc, #92]	; (800a750 <xTaskIncrementTick+0x168>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f6:	4915      	ldr	r1, [pc, #84]	; (800a74c <xTaskIncrementTick+0x164>)
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	440b      	add	r3, r1
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b01      	cmp	r3, #1
 800a706:	d901      	bls.n	800a70c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a708:	2301      	movs	r3, #1
 800a70a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a70c:	4b11      	ldr	r3, [pc, #68]	; (800a754 <xTaskIncrementTick+0x16c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d007      	beq.n	800a724 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a714:	2301      	movs	r3, #1
 800a716:	617b      	str	r3, [r7, #20]
 800a718:	e004      	b.n	800a724 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a71a:	4b0f      	ldr	r3, [pc, #60]	; (800a758 <xTaskIncrementTick+0x170>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3301      	adds	r3, #1
 800a720:	4a0d      	ldr	r2, [pc, #52]	; (800a758 <xTaskIncrementTick+0x170>)
 800a722:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a724:	697b      	ldr	r3, [r7, #20]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3718      	adds	r7, #24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20001514 	.word	0x20001514
 800a734:	200014f0 	.word	0x200014f0
 800a738:	200014a4 	.word	0x200014a4
 800a73c:	200014a8 	.word	0x200014a8
 800a740:	20001504 	.word	0x20001504
 800a744:	2000150c 	.word	0x2000150c
 800a748:	200014f4 	.word	0x200014f4
 800a74c:	2000101c 	.word	0x2000101c
 800a750:	20001018 	.word	0x20001018
 800a754:	20001500 	.word	0x20001500
 800a758:	200014fc 	.word	0x200014fc

0800a75c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a762:	4b28      	ldr	r3, [pc, #160]	; (800a804 <vTaskSwitchContext+0xa8>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d003      	beq.n	800a772 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a76a:	4b27      	ldr	r3, [pc, #156]	; (800a808 <vTaskSwitchContext+0xac>)
 800a76c:	2201      	movs	r2, #1
 800a76e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a770:	e041      	b.n	800a7f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a772:	4b25      	ldr	r3, [pc, #148]	; (800a808 <vTaskSwitchContext+0xac>)
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a778:	4b24      	ldr	r3, [pc, #144]	; (800a80c <vTaskSwitchContext+0xb0>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	60fb      	str	r3, [r7, #12]
 800a77e:	e010      	b.n	800a7a2 <vTaskSwitchContext+0x46>
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10a      	bne.n	800a79c <vTaskSwitchContext+0x40>
	__asm volatile
 800a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	607b      	str	r3, [r7, #4]
}
 800a798:	bf00      	nop
 800a79a:	e7fe      	b.n	800a79a <vTaskSwitchContext+0x3e>
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	60fb      	str	r3, [r7, #12]
 800a7a2:	491b      	ldr	r1, [pc, #108]	; (800a810 <vTaskSwitchContext+0xb4>)
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	440b      	add	r3, r1
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d0e4      	beq.n	800a780 <vTaskSwitchContext+0x24>
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	4413      	add	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4a13      	ldr	r2, [pc, #76]	; (800a810 <vTaskSwitchContext+0xb4>)
 800a7c2:	4413      	add	r3, r2
 800a7c4:	60bb      	str	r3, [r7, #8]
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	605a      	str	r2, [r3, #4]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	3308      	adds	r3, #8
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d104      	bne.n	800a7e6 <vTaskSwitchContext+0x8a>
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	685a      	ldr	r2, [r3, #4]
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	605a      	str	r2, [r3, #4]
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	4a09      	ldr	r2, [pc, #36]	; (800a814 <vTaskSwitchContext+0xb8>)
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	4a06      	ldr	r2, [pc, #24]	; (800a80c <vTaskSwitchContext+0xb0>)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6013      	str	r3, [r2, #0]
}
 800a7f6:	bf00      	nop
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	20001514 	.word	0x20001514
 800a808:	20001500 	.word	0x20001500
 800a80c:	200014f4 	.word	0x200014f4
 800a810:	2000101c 	.word	0x2000101c
 800a814:	20001018 	.word	0x20001018

0800a818 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10a      	bne.n	800a83e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	60fb      	str	r3, [r7, #12]
}
 800a83a:	bf00      	nop
 800a83c:	e7fe      	b.n	800a83c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a83e:	4b07      	ldr	r3, [pc, #28]	; (800a85c <vTaskPlaceOnEventList+0x44>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	3318      	adds	r3, #24
 800a844:	4619      	mov	r1, r3
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7fe fd95 	bl	8009376 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a84c:	2101      	movs	r1, #1
 800a84e:	6838      	ldr	r0, [r7, #0]
 800a850:	f000 fa7c 	bl	800ad4c <prvAddCurrentTaskToDelayedList>
}
 800a854:	bf00      	nop
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	20001018 	.word	0x20001018

0800a860 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10a      	bne.n	800a888 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a876:	f383 8811 	msr	BASEPRI, r3
 800a87a:	f3bf 8f6f 	isb	sy
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	617b      	str	r3, [r7, #20]
}
 800a884:	bf00      	nop
 800a886:	e7fe      	b.n	800a886 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a888:	4b0a      	ldr	r3, [pc, #40]	; (800a8b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	3318      	adds	r3, #24
 800a88e:	4619      	mov	r1, r3
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f7fe fd4c 	bl	800932e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a89c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a8a2:	6879      	ldr	r1, [r7, #4]
 800a8a4:	68b8      	ldr	r0, [r7, #8]
 800a8a6:	f000 fa51 	bl	800ad4c <prvAddCurrentTaskToDelayedList>
	}
 800a8aa:	bf00      	nop
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	20001018 	.word	0x20001018

0800a8b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10a      	bne.n	800a8e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	60fb      	str	r3, [r7, #12]
}
 800a8e0:	bf00      	nop
 800a8e2:	e7fe      	b.n	800a8e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	3318      	adds	r3, #24
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fe fd7d 	bl	80093e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ee:	4b1e      	ldr	r3, [pc, #120]	; (800a968 <xTaskRemoveFromEventList+0xb0>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d11d      	bne.n	800a932 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fe fd74 	bl	80093e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a904:	4b19      	ldr	r3, [pc, #100]	; (800a96c <xTaskRemoveFromEventList+0xb4>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d903      	bls.n	800a914 <xTaskRemoveFromEventList+0x5c>
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a910:	4a16      	ldr	r2, [pc, #88]	; (800a96c <xTaskRemoveFromEventList+0xb4>)
 800a912:	6013      	str	r3, [r2, #0]
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a918:	4613      	mov	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4a13      	ldr	r2, [pc, #76]	; (800a970 <xTaskRemoveFromEventList+0xb8>)
 800a922:	441a      	add	r2, r3
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	3304      	adds	r3, #4
 800a928:	4619      	mov	r1, r3
 800a92a:	4610      	mov	r0, r2
 800a92c:	f7fe fcff 	bl	800932e <vListInsertEnd>
 800a930:	e005      	b.n	800a93e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	3318      	adds	r3, #24
 800a936:	4619      	mov	r1, r3
 800a938:	480e      	ldr	r0, [pc, #56]	; (800a974 <xTaskRemoveFromEventList+0xbc>)
 800a93a:	f7fe fcf8 	bl	800932e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a942:	4b0d      	ldr	r3, [pc, #52]	; (800a978 <xTaskRemoveFromEventList+0xc0>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a948:	429a      	cmp	r2, r3
 800a94a:	d905      	bls.n	800a958 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a94c:	2301      	movs	r3, #1
 800a94e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a950:	4b0a      	ldr	r3, [pc, #40]	; (800a97c <xTaskRemoveFromEventList+0xc4>)
 800a952:	2201      	movs	r2, #1
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	e001      	b.n	800a95c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a958:	2300      	movs	r3, #0
 800a95a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a95c:	697b      	ldr	r3, [r7, #20]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20001514 	.word	0x20001514
 800a96c:	200014f4 	.word	0x200014f4
 800a970:	2000101c 	.word	0x2000101c
 800a974:	200014ac 	.word	0x200014ac
 800a978:	20001018 	.word	0x20001018
 800a97c:	20001500 	.word	0x20001500

0800a980 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a988:	4b06      	ldr	r3, [pc, #24]	; (800a9a4 <vTaskInternalSetTimeOutState+0x24>)
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a990:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <vTaskInternalSetTimeOutState+0x28>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	605a      	str	r2, [r3, #4]
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	20001504 	.word	0x20001504
 800a9a8:	200014f0 	.word	0x200014f0

0800a9ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b088      	sub	sp, #32
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	613b      	str	r3, [r7, #16]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10a      	bne.n	800a9ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	60fb      	str	r3, [r7, #12]
}
 800a9ea:	bf00      	nop
 800a9ec:	e7fe      	b.n	800a9ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a9ee:	f000 fe79 	bl	800b6e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9f2:	4b1d      	ldr	r3, [pc, #116]	; (800aa68 <xTaskCheckForTimeOut+0xbc>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	69ba      	ldr	r2, [r7, #24]
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa0a:	d102      	bne.n	800aa12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	61fb      	str	r3, [r7, #28]
 800aa10:	e023      	b.n	800aa5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	4b15      	ldr	r3, [pc, #84]	; (800aa6c <xTaskCheckForTimeOut+0xc0>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d007      	beq.n	800aa2e <xTaskCheckForTimeOut+0x82>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	69ba      	ldr	r2, [r7, #24]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d302      	bcc.n	800aa2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	61fb      	str	r3, [r7, #28]
 800aa2c:	e015      	b.n	800aa5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d20b      	bcs.n	800aa50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	1ad2      	subs	r2, r2, r3
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f7ff ff9b 	bl	800a980 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	61fb      	str	r3, [r7, #28]
 800aa4e:	e004      	b.n	800aa5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2200      	movs	r2, #0
 800aa54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa56:	2301      	movs	r3, #1
 800aa58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa5a:	f000 fe73 	bl	800b744 <vPortExitCritical>

	return xReturn;
 800aa5e:	69fb      	ldr	r3, [r7, #28]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3720      	adds	r7, #32
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	200014f0 	.word	0x200014f0
 800aa6c:	20001504 	.word	0x20001504

0800aa70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa70:	b480      	push	{r7}
 800aa72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa74:	4b03      	ldr	r3, [pc, #12]	; (800aa84 <vTaskMissedYield+0x14>)
 800aa76:	2201      	movs	r2, #1
 800aa78:	601a      	str	r2, [r3, #0]
}
 800aa7a:	bf00      	nop
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr
 800aa84:	20001500 	.word	0x20001500

0800aa88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa90:	f000 f852 	bl	800ab38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa94:	4b06      	ldr	r3, [pc, #24]	; (800aab0 <prvIdleTask+0x28>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d9f9      	bls.n	800aa90 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa9c:	4b05      	ldr	r3, [pc, #20]	; (800aab4 <prvIdleTask+0x2c>)
 800aa9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa2:	601a      	str	r2, [r3, #0]
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aaac:	e7f0      	b.n	800aa90 <prvIdleTask+0x8>
 800aaae:	bf00      	nop
 800aab0:	2000101c 	.word	0x2000101c
 800aab4:	e000ed04 	.word	0xe000ed04

0800aab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aabe:	2300      	movs	r3, #0
 800aac0:	607b      	str	r3, [r7, #4]
 800aac2:	e00c      	b.n	800aade <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	4613      	mov	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4a12      	ldr	r2, [pc, #72]	; (800ab18 <prvInitialiseTaskLists+0x60>)
 800aad0:	4413      	add	r3, r2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe fbfe 	bl	80092d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	3301      	adds	r3, #1
 800aadc:	607b      	str	r3, [r7, #4]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b37      	cmp	r3, #55	; 0x37
 800aae2:	d9ef      	bls.n	800aac4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aae4:	480d      	ldr	r0, [pc, #52]	; (800ab1c <prvInitialiseTaskLists+0x64>)
 800aae6:	f7fe fbf5 	bl	80092d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aaea:	480d      	ldr	r0, [pc, #52]	; (800ab20 <prvInitialiseTaskLists+0x68>)
 800aaec:	f7fe fbf2 	bl	80092d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aaf0:	480c      	ldr	r0, [pc, #48]	; (800ab24 <prvInitialiseTaskLists+0x6c>)
 800aaf2:	f7fe fbef 	bl	80092d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aaf6:	480c      	ldr	r0, [pc, #48]	; (800ab28 <prvInitialiseTaskLists+0x70>)
 800aaf8:	f7fe fbec 	bl	80092d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aafc:	480b      	ldr	r0, [pc, #44]	; (800ab2c <prvInitialiseTaskLists+0x74>)
 800aafe:	f7fe fbe9 	bl	80092d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ab02:	4b0b      	ldr	r3, [pc, #44]	; (800ab30 <prvInitialiseTaskLists+0x78>)
 800ab04:	4a05      	ldr	r2, [pc, #20]	; (800ab1c <prvInitialiseTaskLists+0x64>)
 800ab06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab08:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <prvInitialiseTaskLists+0x7c>)
 800ab0a:	4a05      	ldr	r2, [pc, #20]	; (800ab20 <prvInitialiseTaskLists+0x68>)
 800ab0c:	601a      	str	r2, [r3, #0]
}
 800ab0e:	bf00      	nop
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	2000101c 	.word	0x2000101c
 800ab1c:	2000147c 	.word	0x2000147c
 800ab20:	20001490 	.word	0x20001490
 800ab24:	200014ac 	.word	0x200014ac
 800ab28:	200014c0 	.word	0x200014c0
 800ab2c:	200014d8 	.word	0x200014d8
 800ab30:	200014a4 	.word	0x200014a4
 800ab34:	200014a8 	.word	0x200014a8

0800ab38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab3e:	e019      	b.n	800ab74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab40:	f000 fdd0 	bl	800b6e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab44:	4b10      	ldr	r3, [pc, #64]	; (800ab88 <prvCheckTasksWaitingTermination+0x50>)
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	3304      	adds	r3, #4
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fe fc49 	bl	80093e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab56:	4b0d      	ldr	r3, [pc, #52]	; (800ab8c <prvCheckTasksWaitingTermination+0x54>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	4a0b      	ldr	r2, [pc, #44]	; (800ab8c <prvCheckTasksWaitingTermination+0x54>)
 800ab5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab60:	4b0b      	ldr	r3, [pc, #44]	; (800ab90 <prvCheckTasksWaitingTermination+0x58>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	4a0a      	ldr	r2, [pc, #40]	; (800ab90 <prvCheckTasksWaitingTermination+0x58>)
 800ab68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab6a:	f000 fdeb 	bl	800b744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f810 	bl	800ab94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab74:	4b06      	ldr	r3, [pc, #24]	; (800ab90 <prvCheckTasksWaitingTermination+0x58>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1e1      	bne.n	800ab40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab7c:	bf00      	nop
 800ab7e:	bf00      	nop
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	200014c0 	.word	0x200014c0
 800ab8c:	200014ec 	.word	0x200014ec
 800ab90:	200014d4 	.word	0x200014d4

0800ab94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d108      	bne.n	800abb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 ff88 	bl	800bac0 <vPortFree>
				vPortFree( pxTCB );
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 ff85 	bl	800bac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800abb6:	e018      	b.n	800abea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d103      	bne.n	800abca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 ff7c 	bl	800bac0 <vPortFree>
	}
 800abc8:	e00f      	b.n	800abea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d00a      	beq.n	800abea <prvDeleteTCB+0x56>
	__asm volatile
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	60fb      	str	r3, [r7, #12]
}
 800abe6:	bf00      	nop
 800abe8:	e7fe      	b.n	800abe8 <prvDeleteTCB+0x54>
	}
 800abea:	bf00      	nop
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
	...

0800abf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abfa:	4b0c      	ldr	r3, [pc, #48]	; (800ac2c <prvResetNextTaskUnblockTime+0x38>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d104      	bne.n	800ac0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ac04:	4b0a      	ldr	r3, [pc, #40]	; (800ac30 <prvResetNextTaskUnblockTime+0x3c>)
 800ac06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ac0c:	e008      	b.n	800ac20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac0e:	4b07      	ldr	r3, [pc, #28]	; (800ac2c <prvResetNextTaskUnblockTime+0x38>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	4a04      	ldr	r2, [pc, #16]	; (800ac30 <prvResetNextTaskUnblockTime+0x3c>)
 800ac1e:	6013      	str	r3, [r2, #0]
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	200014a4 	.word	0x200014a4
 800ac30:	2000150c 	.word	0x2000150c

0800ac34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac3a:	4b0b      	ldr	r3, [pc, #44]	; (800ac68 <xTaskGetSchedulerState+0x34>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d102      	bne.n	800ac48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac42:	2301      	movs	r3, #1
 800ac44:	607b      	str	r3, [r7, #4]
 800ac46:	e008      	b.n	800ac5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac48:	4b08      	ldr	r3, [pc, #32]	; (800ac6c <xTaskGetSchedulerState+0x38>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d102      	bne.n	800ac56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac50:	2302      	movs	r3, #2
 800ac52:	607b      	str	r3, [r7, #4]
 800ac54:	e001      	b.n	800ac5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac56:	2300      	movs	r3, #0
 800ac58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac5a:	687b      	ldr	r3, [r7, #4]
	}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	200014f8 	.word	0x200014f8
 800ac6c:	20001514 	.word	0x20001514

0800ac70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d056      	beq.n	800ad34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac86:	4b2e      	ldr	r3, [pc, #184]	; (800ad40 <xTaskPriorityDisinherit+0xd0>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	693a      	ldr	r2, [r7, #16]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d00a      	beq.n	800aca6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	60fb      	str	r3, [r7, #12]
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10a      	bne.n	800acc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	60bb      	str	r3, [r7, #8]
}
 800acc0:	bf00      	nop
 800acc2:	e7fe      	b.n	800acc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acc8:	1e5a      	subs	r2, r3, #1
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d02c      	beq.n	800ad34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d128      	bne.n	800ad34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	3304      	adds	r3, #4
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fe fb7e 	bl	80093e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad04:	4b0f      	ldr	r3, [pc, #60]	; (800ad44 <xTaskPriorityDisinherit+0xd4>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d903      	bls.n	800ad14 <xTaskPriorityDisinherit+0xa4>
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad10:	4a0c      	ldr	r2, [pc, #48]	; (800ad44 <xTaskPriorityDisinherit+0xd4>)
 800ad12:	6013      	str	r3, [r2, #0]
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad18:	4613      	mov	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4a09      	ldr	r2, [pc, #36]	; (800ad48 <xTaskPriorityDisinherit+0xd8>)
 800ad22:	441a      	add	r2, r3
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	3304      	adds	r3, #4
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	f7fe faff 	bl	800932e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad30:	2301      	movs	r3, #1
 800ad32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad34:	697b      	ldr	r3, [r7, #20]
	}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3718      	adds	r7, #24
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	20001018 	.word	0x20001018
 800ad44:	200014f4 	.word	0x200014f4
 800ad48:	2000101c 	.word	0x2000101c

0800ad4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad56:	4b21      	ldr	r3, [pc, #132]	; (800addc <prvAddCurrentTaskToDelayedList+0x90>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad5c:	4b20      	ldr	r3, [pc, #128]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3304      	adds	r3, #4
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe fb40 	bl	80093e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad6e:	d10a      	bne.n	800ad86 <prvAddCurrentTaskToDelayedList+0x3a>
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d007      	beq.n	800ad86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad76:	4b1a      	ldr	r3, [pc, #104]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	4819      	ldr	r0, [pc, #100]	; (800ade4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad80:	f7fe fad5 	bl	800932e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad84:	e026      	b.n	800add4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad8e:	4b14      	ldr	r3, [pc, #80]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d209      	bcs.n	800adb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad9e:	4b12      	ldr	r3, [pc, #72]	; (800ade8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	4b0f      	ldr	r3, [pc, #60]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3304      	adds	r3, #4
 800ada8:	4619      	mov	r1, r3
 800adaa:	4610      	mov	r0, r2
 800adac:	f7fe fae3 	bl	8009376 <vListInsert>
}
 800adb0:	e010      	b.n	800add4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adb2:	4b0e      	ldr	r3, [pc, #56]	; (800adec <prvAddCurrentTaskToDelayedList+0xa0>)
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	4b0a      	ldr	r3, [pc, #40]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3304      	adds	r3, #4
 800adbc:	4619      	mov	r1, r3
 800adbe:	4610      	mov	r0, r2
 800adc0:	f7fe fad9 	bl	8009376 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800adc4:	4b0a      	ldr	r3, [pc, #40]	; (800adf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d202      	bcs.n	800add4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800adce:	4a08      	ldr	r2, [pc, #32]	; (800adf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	6013      	str	r3, [r2, #0]
}
 800add4:	bf00      	nop
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	200014f0 	.word	0x200014f0
 800ade0:	20001018 	.word	0x20001018
 800ade4:	200014d8 	.word	0x200014d8
 800ade8:	200014a8 	.word	0x200014a8
 800adec:	200014a4 	.word	0x200014a4
 800adf0:	2000150c 	.word	0x2000150c

0800adf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08a      	sub	sp, #40	; 0x28
 800adf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800adfa:	2300      	movs	r3, #0
 800adfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800adfe:	f000 fb07 	bl	800b410 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae02:	4b1c      	ldr	r3, [pc, #112]	; (800ae74 <xTimerCreateTimerTask+0x80>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d021      	beq.n	800ae4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae12:	1d3a      	adds	r2, r7, #4
 800ae14:	f107 0108 	add.w	r1, r7, #8
 800ae18:	f107 030c 	add.w	r3, r7, #12
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fe fa3f 	bl	80092a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae22:	6879      	ldr	r1, [r7, #4]
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	9202      	str	r2, [sp, #8]
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	2300      	movs	r3, #0
 800ae32:	460a      	mov	r2, r1
 800ae34:	4910      	ldr	r1, [pc, #64]	; (800ae78 <xTimerCreateTimerTask+0x84>)
 800ae36:	4811      	ldr	r0, [pc, #68]	; (800ae7c <xTimerCreateTimerTask+0x88>)
 800ae38:	f7ff f8de 	bl	8009ff8 <xTaskCreateStatic>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	4a10      	ldr	r2, [pc, #64]	; (800ae80 <xTimerCreateTimerTask+0x8c>)
 800ae40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae42:	4b0f      	ldr	r3, [pc, #60]	; (800ae80 <xTimerCreateTimerTask+0x8c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ae54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	613b      	str	r3, [r7, #16]
}
 800ae66:	bf00      	nop
 800ae68:	e7fe      	b.n	800ae68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae6a:	697b      	ldr	r3, [r7, #20]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	20001548 	.word	0x20001548
 800ae78:	0800fb84 	.word	0x0800fb84
 800ae7c:	0800afb9 	.word	0x0800afb9
 800ae80:	2000154c 	.word	0x2000154c

0800ae84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08a      	sub	sp, #40	; 0x28
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae92:	2300      	movs	r3, #0
 800ae94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	623b      	str	r3, [r7, #32]
}
 800aeae:	bf00      	nop
 800aeb0:	e7fe      	b.n	800aeb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aeb2:	4b1a      	ldr	r3, [pc, #104]	; (800af1c <xTimerGenericCommand+0x98>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d02a      	beq.n	800af10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2b05      	cmp	r3, #5
 800aeca:	dc18      	bgt.n	800aefe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aecc:	f7ff feb2 	bl	800ac34 <xTaskGetSchedulerState>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	d109      	bne.n	800aeea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aed6:	4b11      	ldr	r3, [pc, #68]	; (800af1c <xTimerGenericCommand+0x98>)
 800aed8:	6818      	ldr	r0, [r3, #0]
 800aeda:	f107 0110 	add.w	r1, r7, #16
 800aede:	2300      	movs	r3, #0
 800aee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aee2:	f7fe fc53 	bl	800978c <xQueueGenericSend>
 800aee6:	6278      	str	r0, [r7, #36]	; 0x24
 800aee8:	e012      	b.n	800af10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aeea:	4b0c      	ldr	r3, [pc, #48]	; (800af1c <xTimerGenericCommand+0x98>)
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	f107 0110 	add.w	r1, r7, #16
 800aef2:	2300      	movs	r3, #0
 800aef4:	2200      	movs	r2, #0
 800aef6:	f7fe fc49 	bl	800978c <xQueueGenericSend>
 800aefa:	6278      	str	r0, [r7, #36]	; 0x24
 800aefc:	e008      	b.n	800af10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aefe:	4b07      	ldr	r3, [pc, #28]	; (800af1c <xTimerGenericCommand+0x98>)
 800af00:	6818      	ldr	r0, [r3, #0]
 800af02:	f107 0110 	add.w	r1, r7, #16
 800af06:	2300      	movs	r3, #0
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	f7fe fd3d 	bl	8009988 <xQueueGenericSendFromISR>
 800af0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af12:	4618      	mov	r0, r3
 800af14:	3728      	adds	r7, #40	; 0x28
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20001548 	.word	0x20001548

0800af20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b088      	sub	sp, #32
 800af24:	af02      	add	r7, sp, #8
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af2a:	4b22      	ldr	r3, [pc, #136]	; (800afb4 <prvProcessExpiredTimer+0x94>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	3304      	adds	r3, #4
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fe fa55 	bl	80093e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af44:	f003 0304 	and.w	r3, r3, #4
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d022      	beq.n	800af92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	699a      	ldr	r2, [r3, #24]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	18d1      	adds	r1, r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	6978      	ldr	r0, [r7, #20]
 800af5a:	f000 f8d1 	bl	800b100 <prvInsertTimerInActiveList>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d01f      	beq.n	800afa4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af64:	2300      	movs	r3, #0
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	2300      	movs	r3, #0
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	2100      	movs	r1, #0
 800af6e:	6978      	ldr	r0, [r7, #20]
 800af70:	f7ff ff88 	bl	800ae84 <xTimerGenericCommand>
 800af74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d113      	bne.n	800afa4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800af7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af80:	f383 8811 	msr	BASEPRI, r3
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	60fb      	str	r3, [r7, #12]
}
 800af8e:	bf00      	nop
 800af90:	e7fe      	b.n	800af90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af98:	f023 0301 	bic.w	r3, r3, #1
 800af9c:	b2da      	uxtb	r2, r3
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	6a1b      	ldr	r3, [r3, #32]
 800afa8:	6978      	ldr	r0, [r7, #20]
 800afaa:	4798      	blx	r3
}
 800afac:	bf00      	nop
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	20001540 	.word	0x20001540

0800afb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afc0:	f107 0308 	add.w	r3, r7, #8
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 f857 	bl	800b078 <prvGetNextExpireTime>
 800afca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	4619      	mov	r1, r3
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 f803 	bl	800afdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800afd6:	f000 f8d5 	bl	800b184 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afda:	e7f1      	b.n	800afc0 <prvTimerTask+0x8>

0800afdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afe6:	f7ff fa43 	bl	800a470 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afea:	f107 0308 	add.w	r3, r7, #8
 800afee:	4618      	mov	r0, r3
 800aff0:	f000 f866 	bl	800b0c0 <prvSampleTimeNow>
 800aff4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d130      	bne.n	800b05e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d10a      	bne.n	800b018 <prvProcessTimerOrBlockTask+0x3c>
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	429a      	cmp	r2, r3
 800b008:	d806      	bhi.n	800b018 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b00a:	f7ff fa3f 	bl	800a48c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b00e:	68f9      	ldr	r1, [r7, #12]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7ff ff85 	bl	800af20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b016:	e024      	b.n	800b062 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d008      	beq.n	800b030 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b01e:	4b13      	ldr	r3, [pc, #76]	; (800b06c <prvProcessTimerOrBlockTask+0x90>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <prvProcessTimerOrBlockTask+0x50>
 800b028:	2301      	movs	r3, #1
 800b02a:	e000      	b.n	800b02e <prvProcessTimerOrBlockTask+0x52>
 800b02c:	2300      	movs	r3, #0
 800b02e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b030:	4b0f      	ldr	r3, [pc, #60]	; (800b070 <prvProcessTimerOrBlockTask+0x94>)
 800b032:	6818      	ldr	r0, [r3, #0]
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	4619      	mov	r1, r3
 800b03e:	f7fe ffa7 	bl	8009f90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b042:	f7ff fa23 	bl	800a48c <xTaskResumeAll>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10a      	bne.n	800b062 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b04c:	4b09      	ldr	r3, [pc, #36]	; (800b074 <prvProcessTimerOrBlockTask+0x98>)
 800b04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	f3bf 8f6f 	isb	sy
}
 800b05c:	e001      	b.n	800b062 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b05e:	f7ff fa15 	bl	800a48c <xTaskResumeAll>
}
 800b062:	bf00      	nop
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20001544 	.word	0x20001544
 800b070:	20001548 	.word	0x20001548
 800b074:	e000ed04 	.word	0xe000ed04

0800b078 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b080:	4b0e      	ldr	r3, [pc, #56]	; (800b0bc <prvGetNextExpireTime+0x44>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d101      	bne.n	800b08e <prvGetNextExpireTime+0x16>
 800b08a:	2201      	movs	r2, #1
 800b08c:	e000      	b.n	800b090 <prvGetNextExpireTime+0x18>
 800b08e:	2200      	movs	r2, #0
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d105      	bne.n	800b0a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b09c:	4b07      	ldr	r3, [pc, #28]	; (800b0bc <prvGetNextExpireTime+0x44>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	60fb      	str	r3, [r7, #12]
 800b0a6:	e001      	b.n	800b0ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3714      	adds	r7, #20
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	20001540 	.word	0x20001540

0800b0c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b0c8:	f7ff fa7e 	bl	800a5c8 <xTaskGetTickCount>
 800b0cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0ce:	4b0b      	ldr	r3, [pc, #44]	; (800b0fc <prvSampleTimeNow+0x3c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d205      	bcs.n	800b0e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b0d8:	f000 f936 	bl	800b348 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	601a      	str	r2, [r3, #0]
 800b0e2:	e002      	b.n	800b0ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0ea:	4a04      	ldr	r2, [pc, #16]	; (800b0fc <prvSampleTimeNow+0x3c>)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20001550 	.word	0x20001550

0800b100 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b10e:	2300      	movs	r3, #0
 800b110:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	429a      	cmp	r2, r3
 800b124:	d812      	bhi.n	800b14c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	1ad2      	subs	r2, r2, r3
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	429a      	cmp	r2, r3
 800b132:	d302      	bcc.n	800b13a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b134:	2301      	movs	r3, #1
 800b136:	617b      	str	r3, [r7, #20]
 800b138:	e01b      	b.n	800b172 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b13a:	4b10      	ldr	r3, [pc, #64]	; (800b17c <prvInsertTimerInActiveList+0x7c>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3304      	adds	r3, #4
 800b142:	4619      	mov	r1, r3
 800b144:	4610      	mov	r0, r2
 800b146:	f7fe f916 	bl	8009376 <vListInsert>
 800b14a:	e012      	b.n	800b172 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d206      	bcs.n	800b162 <prvInsertTimerInActiveList+0x62>
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d302      	bcc.n	800b162 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b15c:	2301      	movs	r3, #1
 800b15e:	617b      	str	r3, [r7, #20]
 800b160:	e007      	b.n	800b172 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b162:	4b07      	ldr	r3, [pc, #28]	; (800b180 <prvInsertTimerInActiveList+0x80>)
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3304      	adds	r3, #4
 800b16a:	4619      	mov	r1, r3
 800b16c:	4610      	mov	r0, r2
 800b16e:	f7fe f902 	bl	8009376 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b172:	697b      	ldr	r3, [r7, #20]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3718      	adds	r7, #24
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	20001544 	.word	0x20001544
 800b180:	20001540 	.word	0x20001540

0800b184 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b08e      	sub	sp, #56	; 0x38
 800b188:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b18a:	e0ca      	b.n	800b322 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	da18      	bge.n	800b1c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b192:	1d3b      	adds	r3, r7, #4
 800b194:	3304      	adds	r3, #4
 800b196:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10a      	bne.n	800b1b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	61fb      	str	r3, [r7, #28]
}
 800b1b0:	bf00      	nop
 800b1b2:	e7fe      	b.n	800b1b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1ba:	6850      	ldr	r0, [r2, #4]
 800b1bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1be:	6892      	ldr	r2, [r2, #8]
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f2c0 80ab 	blt.w	800b322 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d2:	695b      	ldr	r3, [r3, #20]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d004      	beq.n	800b1e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1da:	3304      	adds	r3, #4
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fe f903 	bl	80093e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1e2:	463b      	mov	r3, r7
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff ff6b 	bl	800b0c0 <prvSampleTimeNow>
 800b1ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b09      	cmp	r3, #9
 800b1f0:	f200 8096 	bhi.w	800b320 <prvProcessReceivedCommands+0x19c>
 800b1f4:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <prvProcessReceivedCommands+0x78>)
 800b1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fa:	bf00      	nop
 800b1fc:	0800b225 	.word	0x0800b225
 800b200:	0800b225 	.word	0x0800b225
 800b204:	0800b225 	.word	0x0800b225
 800b208:	0800b299 	.word	0x0800b299
 800b20c:	0800b2ad 	.word	0x0800b2ad
 800b210:	0800b2f7 	.word	0x0800b2f7
 800b214:	0800b225 	.word	0x0800b225
 800b218:	0800b225 	.word	0x0800b225
 800b21c:	0800b299 	.word	0x0800b299
 800b220:	0800b2ad 	.word	0x0800b2ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b22a:	f043 0301 	orr.w	r3, r3, #1
 800b22e:	b2da      	uxtb	r2, r3
 800b230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b236:	68ba      	ldr	r2, [r7, #8]
 800b238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	18d1      	adds	r1, r2, r3
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b244:	f7ff ff5c 	bl	800b100 <prvInsertTimerInActiveList>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d069      	beq.n	800b322 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b250:	6a1b      	ldr	r3, [r3, #32]
 800b252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b254:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b25c:	f003 0304 	and.w	r3, r3, #4
 800b260:	2b00      	cmp	r3, #0
 800b262:	d05e      	beq.n	800b322 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	441a      	add	r2, r3
 800b26c:	2300      	movs	r3, #0
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	2300      	movs	r3, #0
 800b272:	2100      	movs	r1, #0
 800b274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b276:	f7ff fe05 	bl	800ae84 <xTimerGenericCommand>
 800b27a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b27c:	6a3b      	ldr	r3, [r7, #32]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d14f      	bne.n	800b322 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	61bb      	str	r3, [r7, #24]
}
 800b294:	bf00      	nop
 800b296:	e7fe      	b.n	800b296 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b29e:	f023 0301 	bic.w	r3, r3, #1
 800b2a2:	b2da      	uxtb	r2, r3
 800b2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b2aa:	e03a      	b.n	800b322 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2b2:	f043 0301 	orr.w	r3, r3, #1
 800b2b6:	b2da      	uxtb	r2, r3
 800b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c6:	699b      	ldr	r3, [r3, #24]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10a      	bne.n	800b2e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	617b      	str	r3, [r7, #20]
}
 800b2de:	bf00      	nop
 800b2e0:	e7fe      	b.n	800b2e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e4:	699a      	ldr	r2, [r3, #24]
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	18d1      	adds	r1, r2, r3
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2f0:	f7ff ff06 	bl	800b100 <prvInsertTimerInActiveList>
					break;
 800b2f4:	e015      	b.n	800b322 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2fc:	f003 0302 	and.w	r3, r3, #2
 800b300:	2b00      	cmp	r3, #0
 800b302:	d103      	bne.n	800b30c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b306:	f000 fbdb 	bl	800bac0 <vPortFree>
 800b30a:	e00a      	b.n	800b322 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b312:	f023 0301 	bic.w	r3, r3, #1
 800b316:	b2da      	uxtb	r2, r3
 800b318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b31e:	e000      	b.n	800b322 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b320:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b322:	4b08      	ldr	r3, [pc, #32]	; (800b344 <prvProcessReceivedCommands+0x1c0>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	1d39      	adds	r1, r7, #4
 800b328:	2200      	movs	r2, #0
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fe fbc8 	bl	8009ac0 <xQueueReceive>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	f47f af2a 	bne.w	800b18c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b338:	bf00      	nop
 800b33a:	bf00      	nop
 800b33c:	3730      	adds	r7, #48	; 0x30
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20001548 	.word	0x20001548

0800b348 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b34e:	e048      	b.n	800b3e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b350:	4b2d      	ldr	r3, [pc, #180]	; (800b408 <prvSwitchTimerLists+0xc0>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b35a:	4b2b      	ldr	r3, [pc, #172]	; (800b408 <prvSwitchTimerLists+0xc0>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3304      	adds	r3, #4
 800b368:	4618      	mov	r0, r3
 800b36a:	f7fe f83d 	bl	80093e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6a1b      	ldr	r3, [r3, #32]
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b37c:	f003 0304 	and.w	r3, r3, #4
 800b380:	2b00      	cmp	r3, #0
 800b382:	d02e      	beq.n	800b3e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	699b      	ldr	r3, [r3, #24]
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	4413      	add	r3, r2
 800b38c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	429a      	cmp	r2, r3
 800b394:	d90e      	bls.n	800b3b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3a2:	4b19      	ldr	r3, [pc, #100]	; (800b408 <prvSwitchTimerLists+0xc0>)
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	f7fd ffe2 	bl	8009376 <vListInsert>
 800b3b2:	e016      	b.n	800b3e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	693a      	ldr	r2, [r7, #16]
 800b3bc:	2100      	movs	r1, #0
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f7ff fd60 	bl	800ae84 <xTimerGenericCommand>
 800b3c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10a      	bne.n	800b3e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	603b      	str	r3, [r7, #0]
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3e2:	4b09      	ldr	r3, [pc, #36]	; (800b408 <prvSwitchTimerLists+0xc0>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1b1      	bne.n	800b350 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3ec:	4b06      	ldr	r3, [pc, #24]	; (800b408 <prvSwitchTimerLists+0xc0>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3f2:	4b06      	ldr	r3, [pc, #24]	; (800b40c <prvSwitchTimerLists+0xc4>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a04      	ldr	r2, [pc, #16]	; (800b408 <prvSwitchTimerLists+0xc0>)
 800b3f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3fa:	4a04      	ldr	r2, [pc, #16]	; (800b40c <prvSwitchTimerLists+0xc4>)
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	6013      	str	r3, [r2, #0]
}
 800b400:	bf00      	nop
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	20001540 	.word	0x20001540
 800b40c:	20001544 	.word	0x20001544

0800b410 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b416:	f000 f965 	bl	800b6e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b41a:	4b15      	ldr	r3, [pc, #84]	; (800b470 <prvCheckForValidListAndQueue+0x60>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d120      	bne.n	800b464 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b422:	4814      	ldr	r0, [pc, #80]	; (800b474 <prvCheckForValidListAndQueue+0x64>)
 800b424:	f7fd ff56 	bl	80092d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b428:	4813      	ldr	r0, [pc, #76]	; (800b478 <prvCheckForValidListAndQueue+0x68>)
 800b42a:	f7fd ff53 	bl	80092d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b42e:	4b13      	ldr	r3, [pc, #76]	; (800b47c <prvCheckForValidListAndQueue+0x6c>)
 800b430:	4a10      	ldr	r2, [pc, #64]	; (800b474 <prvCheckForValidListAndQueue+0x64>)
 800b432:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b434:	4b12      	ldr	r3, [pc, #72]	; (800b480 <prvCheckForValidListAndQueue+0x70>)
 800b436:	4a10      	ldr	r2, [pc, #64]	; (800b478 <prvCheckForValidListAndQueue+0x68>)
 800b438:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b43a:	2300      	movs	r3, #0
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	4b11      	ldr	r3, [pc, #68]	; (800b484 <prvCheckForValidListAndQueue+0x74>)
 800b440:	4a11      	ldr	r2, [pc, #68]	; (800b488 <prvCheckForValidListAndQueue+0x78>)
 800b442:	2110      	movs	r1, #16
 800b444:	200a      	movs	r0, #10
 800b446:	f7fe f861 	bl	800950c <xQueueGenericCreateStatic>
 800b44a:	4603      	mov	r3, r0
 800b44c:	4a08      	ldr	r2, [pc, #32]	; (800b470 <prvCheckForValidListAndQueue+0x60>)
 800b44e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b450:	4b07      	ldr	r3, [pc, #28]	; (800b470 <prvCheckForValidListAndQueue+0x60>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d005      	beq.n	800b464 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b458:	4b05      	ldr	r3, [pc, #20]	; (800b470 <prvCheckForValidListAndQueue+0x60>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	490b      	ldr	r1, [pc, #44]	; (800b48c <prvCheckForValidListAndQueue+0x7c>)
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fe fd42 	bl	8009ee8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b464:	f000 f96e 	bl	800b744 <vPortExitCritical>
}
 800b468:	bf00      	nop
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20001548 	.word	0x20001548
 800b474:	20001518 	.word	0x20001518
 800b478:	2000152c 	.word	0x2000152c
 800b47c:	20001540 	.word	0x20001540
 800b480:	20001544 	.word	0x20001544
 800b484:	200015f4 	.word	0x200015f4
 800b488:	20001554 	.word	0x20001554
 800b48c:	0800fb8c 	.word	0x0800fb8c

0800b490 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b490:	b480      	push	{r7}
 800b492:	b085      	sub	sp, #20
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	3b04      	subs	r3, #4
 800b4a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	3b04      	subs	r3, #4
 800b4ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	f023 0201 	bic.w	r2, r3, #1
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	3b04      	subs	r3, #4
 800b4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4c0:	4a0c      	ldr	r2, [pc, #48]	; (800b4f4 <pxPortInitialiseStack+0x64>)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3b14      	subs	r3, #20
 800b4ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	3b04      	subs	r3, #4
 800b4d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f06f 0202 	mvn.w	r2, #2
 800b4de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	3b20      	subs	r3, #32
 800b4e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	0800b4f9 	.word	0x0800b4f9

0800b4f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b502:	4b12      	ldr	r3, [pc, #72]	; (800b54c <prvTaskExitError+0x54>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b50a:	d00a      	beq.n	800b522 <prvTaskExitError+0x2a>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	60fb      	str	r3, [r7, #12]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <prvTaskExitError+0x28>
	__asm volatile
 800b522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	60bb      	str	r3, [r7, #8]
}
 800b534:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b536:	bf00      	nop
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d0fc      	beq.n	800b538 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b53e:	bf00      	nop
 800b540:	bf00      	nop
 800b542:	3714      	adds	r7, #20
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	20000014 	.word	0x20000014

0800b550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b550:	4b07      	ldr	r3, [pc, #28]	; (800b570 <pxCurrentTCBConst2>)
 800b552:	6819      	ldr	r1, [r3, #0]
 800b554:	6808      	ldr	r0, [r1, #0]
 800b556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55a:	f380 8809 	msr	PSP, r0
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f04f 0000 	mov.w	r0, #0
 800b566:	f380 8811 	msr	BASEPRI, r0
 800b56a:	4770      	bx	lr
 800b56c:	f3af 8000 	nop.w

0800b570 <pxCurrentTCBConst2>:
 800b570:	20001018 	.word	0x20001018
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b574:	bf00      	nop
 800b576:	bf00      	nop

0800b578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b578:	4808      	ldr	r0, [pc, #32]	; (800b59c <prvPortStartFirstTask+0x24>)
 800b57a:	6800      	ldr	r0, [r0, #0]
 800b57c:	6800      	ldr	r0, [r0, #0]
 800b57e:	f380 8808 	msr	MSP, r0
 800b582:	f04f 0000 	mov.w	r0, #0
 800b586:	f380 8814 	msr	CONTROL, r0
 800b58a:	b662      	cpsie	i
 800b58c:	b661      	cpsie	f
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	f3bf 8f6f 	isb	sy
 800b596:	df00      	svc	0
 800b598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b59a:	bf00      	nop
 800b59c:	e000ed08 	.word	0xe000ed08

0800b5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5a6:	4b46      	ldr	r3, [pc, #280]	; (800b6c0 <xPortStartScheduler+0x120>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a46      	ldr	r2, [pc, #280]	; (800b6c4 <xPortStartScheduler+0x124>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d10a      	bne.n	800b5c6 <xPortStartScheduler+0x26>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	613b      	str	r3, [r7, #16]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5c6:	4b3e      	ldr	r3, [pc, #248]	; (800b6c0 <xPortStartScheduler+0x120>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a3f      	ldr	r2, [pc, #252]	; (800b6c8 <xPortStartScheduler+0x128>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d10a      	bne.n	800b5e6 <xPortStartScheduler+0x46>
	__asm volatile
 800b5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	60fb      	str	r3, [r7, #12]
}
 800b5e2:	bf00      	nop
 800b5e4:	e7fe      	b.n	800b5e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5e6:	4b39      	ldr	r3, [pc, #228]	; (800b6cc <xPortStartScheduler+0x12c>)
 800b5e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	22ff      	movs	r2, #255	; 0xff
 800b5f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	b2db      	uxtb	r3, r3
 800b604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	4b31      	ldr	r3, [pc, #196]	; (800b6d0 <xPortStartScheduler+0x130>)
 800b60c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b60e:	4b31      	ldr	r3, [pc, #196]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b610:	2207      	movs	r2, #7
 800b612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b614:	e009      	b.n	800b62a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b616:	4b2f      	ldr	r3, [pc, #188]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	4a2d      	ldr	r2, [pc, #180]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b61e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b620:	78fb      	ldrb	r3, [r7, #3]
 800b622:	b2db      	uxtb	r3, r3
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	b2db      	uxtb	r3, r3
 800b628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b62a:	78fb      	ldrb	r3, [r7, #3]
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b632:	2b80      	cmp	r3, #128	; 0x80
 800b634:	d0ef      	beq.n	800b616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b636:	4b27      	ldr	r3, [pc, #156]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f1c3 0307 	rsb	r3, r3, #7
 800b63e:	2b04      	cmp	r3, #4
 800b640:	d00a      	beq.n	800b658 <xPortStartScheduler+0xb8>
	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	60bb      	str	r3, [r7, #8]
}
 800b654:	bf00      	nop
 800b656:	e7fe      	b.n	800b656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b658:	4b1e      	ldr	r3, [pc, #120]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	021b      	lsls	r3, r3, #8
 800b65e:	4a1d      	ldr	r2, [pc, #116]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b662:	4b1c      	ldr	r3, [pc, #112]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b66a:	4a1a      	ldr	r2, [pc, #104]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b66c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	b2da      	uxtb	r2, r3
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b676:	4b18      	ldr	r3, [pc, #96]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a17      	ldr	r2, [pc, #92]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b67c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b682:	4b15      	ldr	r3, [pc, #84]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a14      	ldr	r2, [pc, #80]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b68c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b68e:	f000 f8dd 	bl	800b84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b692:	4b12      	ldr	r3, [pc, #72]	; (800b6dc <xPortStartScheduler+0x13c>)
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b698:	f000 f8fc 	bl	800b894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b69c:	4b10      	ldr	r3, [pc, #64]	; (800b6e0 <xPortStartScheduler+0x140>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a0f      	ldr	r2, [pc, #60]	; (800b6e0 <xPortStartScheduler+0x140>)
 800b6a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b6a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6a8:	f7ff ff66 	bl	800b578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6ac:	f7ff f856 	bl	800a75c <vTaskSwitchContext>
	prvTaskExitError();
 800b6b0:	f7ff ff22 	bl	800b4f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	e000ed00 	.word	0xe000ed00
 800b6c4:	410fc271 	.word	0x410fc271
 800b6c8:	410fc270 	.word	0x410fc270
 800b6cc:	e000e400 	.word	0xe000e400
 800b6d0:	20001644 	.word	0x20001644
 800b6d4:	20001648 	.word	0x20001648
 800b6d8:	e000ed20 	.word	0xe000ed20
 800b6dc:	20000014 	.word	0x20000014
 800b6e0:	e000ef34 	.word	0xe000ef34

0800b6e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	607b      	str	r3, [r7, #4]
}
 800b6fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6fe:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <vPortEnterCritical+0x58>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3301      	adds	r3, #1
 800b704:	4a0d      	ldr	r2, [pc, #52]	; (800b73c <vPortEnterCritical+0x58>)
 800b706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b708:	4b0c      	ldr	r3, [pc, #48]	; (800b73c <vPortEnterCritical+0x58>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d10f      	bne.n	800b730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b710:	4b0b      	ldr	r3, [pc, #44]	; (800b740 <vPortEnterCritical+0x5c>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00a      	beq.n	800b730 <vPortEnterCritical+0x4c>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	603b      	str	r3, [r7, #0]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <vPortEnterCritical+0x4a>
	}
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	20000014 	.word	0x20000014
 800b740:	e000ed04 	.word	0xe000ed04

0800b744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b74a:	4b12      	ldr	r3, [pc, #72]	; (800b794 <vPortExitCritical+0x50>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10a      	bne.n	800b768 <vPortExitCritical+0x24>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	607b      	str	r3, [r7, #4]
}
 800b764:	bf00      	nop
 800b766:	e7fe      	b.n	800b766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b768:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <vPortExitCritical+0x50>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	4a09      	ldr	r2, [pc, #36]	; (800b794 <vPortExitCritical+0x50>)
 800b770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b772:	4b08      	ldr	r3, [pc, #32]	; (800b794 <vPortExitCritical+0x50>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d105      	bne.n	800b786 <vPortExitCritical+0x42>
 800b77a:	2300      	movs	r3, #0
 800b77c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	f383 8811 	msr	BASEPRI, r3
}
 800b784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	20000014 	.word	0x20000014
	...

0800b7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7a0:	f3ef 8009 	mrs	r0, PSP
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	4b15      	ldr	r3, [pc, #84]	; (800b800 <pxCurrentTCBConst>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	f01e 0f10 	tst.w	lr, #16
 800b7b0:	bf08      	it	eq
 800b7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ba:	6010      	str	r0, [r2, #0]
 800b7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7c4:	f380 8811 	msr	BASEPRI, r0
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f7fe ffc4 	bl	800a75c <vTaskSwitchContext>
 800b7d4:	f04f 0000 	mov.w	r0, #0
 800b7d8:	f380 8811 	msr	BASEPRI, r0
 800b7dc:	bc09      	pop	{r0, r3}
 800b7de:	6819      	ldr	r1, [r3, #0]
 800b7e0:	6808      	ldr	r0, [r1, #0]
 800b7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e6:	f01e 0f10 	tst.w	lr, #16
 800b7ea:	bf08      	it	eq
 800b7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7f0:	f380 8809 	msr	PSP, r0
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	f3af 8000 	nop.w

0800b800 <pxCurrentTCBConst>:
 800b800:	20001018 	.word	0x20001018
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b804:	bf00      	nop
 800b806:	bf00      	nop

0800b808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	607b      	str	r3, [r7, #4]
}
 800b820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b822:	f7fe fee1 	bl	800a5e8 <xTaskIncrementTick>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d003      	beq.n	800b834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b82c:	4b06      	ldr	r3, [pc, #24]	; (800b848 <xPortSysTickHandler+0x40>)
 800b82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	2300      	movs	r3, #0
 800b836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	f383 8811 	msr	BASEPRI, r3
}
 800b83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b840:	bf00      	nop
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	e000ed04 	.word	0xe000ed04

0800b84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b850:	4b0b      	ldr	r3, [pc, #44]	; (800b880 <vPortSetupTimerInterrupt+0x34>)
 800b852:	2200      	movs	r2, #0
 800b854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b856:	4b0b      	ldr	r3, [pc, #44]	; (800b884 <vPortSetupTimerInterrupt+0x38>)
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b85c:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <vPortSetupTimerInterrupt+0x3c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a0a      	ldr	r2, [pc, #40]	; (800b88c <vPortSetupTimerInterrupt+0x40>)
 800b862:	fba2 2303 	umull	r2, r3, r2, r3
 800b866:	099b      	lsrs	r3, r3, #6
 800b868:	4a09      	ldr	r2, [pc, #36]	; (800b890 <vPortSetupTimerInterrupt+0x44>)
 800b86a:	3b01      	subs	r3, #1
 800b86c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b86e:	4b04      	ldr	r3, [pc, #16]	; (800b880 <vPortSetupTimerInterrupt+0x34>)
 800b870:	2207      	movs	r2, #7
 800b872:	601a      	str	r2, [r3, #0]
}
 800b874:	bf00      	nop
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	e000e010 	.word	0xe000e010
 800b884:	e000e018 	.word	0xe000e018
 800b888:	20000008 	.word	0x20000008
 800b88c:	10624dd3 	.word	0x10624dd3
 800b890:	e000e014 	.word	0xe000e014

0800b894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b8a4 <vPortEnableVFP+0x10>
 800b898:	6801      	ldr	r1, [r0, #0]
 800b89a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b89e:	6001      	str	r1, [r0, #0]
 800b8a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b8a2:	bf00      	nop
 800b8a4:	e000ed88 	.word	0xe000ed88

0800b8a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8ae:	f3ef 8305 	mrs	r3, IPSR
 800b8b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b0f      	cmp	r3, #15
 800b8b8:	d914      	bls.n	800b8e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8ba:	4a17      	ldr	r2, [pc, #92]	; (800b918 <vPortValidateInterruptPriority+0x70>)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	4413      	add	r3, r2
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8c4:	4b15      	ldr	r3, [pc, #84]	; (800b91c <vPortValidateInterruptPriority+0x74>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	7afa      	ldrb	r2, [r7, #11]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d20a      	bcs.n	800b8e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	607b      	str	r3, [r7, #4]
}
 800b8e0:	bf00      	nop
 800b8e2:	e7fe      	b.n	800b8e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8e4:	4b0e      	ldr	r3, [pc, #56]	; (800b920 <vPortValidateInterruptPriority+0x78>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8ec:	4b0d      	ldr	r3, [pc, #52]	; (800b924 <vPortValidateInterruptPriority+0x7c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d90a      	bls.n	800b90a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	603b      	str	r3, [r7, #0]
}
 800b906:	bf00      	nop
 800b908:	e7fe      	b.n	800b908 <vPortValidateInterruptPriority+0x60>
	}
 800b90a:	bf00      	nop
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	e000e3f0 	.word	0xe000e3f0
 800b91c:	20001644 	.word	0x20001644
 800b920:	e000ed0c 	.word	0xe000ed0c
 800b924:	20001648 	.word	0x20001648

0800b928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b08a      	sub	sp, #40	; 0x28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b930:	2300      	movs	r3, #0
 800b932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b934:	f7fe fd9c 	bl	800a470 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b938:	4b5b      	ldr	r3, [pc, #364]	; (800baa8 <pvPortMalloc+0x180>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b940:	f000 f920 	bl	800bb84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b944:	4b59      	ldr	r3, [pc, #356]	; (800baac <pvPortMalloc+0x184>)
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4013      	ands	r3, r2
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f040 8093 	bne.w	800ba78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d01d      	beq.n	800b994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b958:	2208      	movs	r2, #8
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4413      	add	r3, r2
 800b95e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f003 0307 	and.w	r3, r3, #7
 800b966:	2b00      	cmp	r3, #0
 800b968:	d014      	beq.n	800b994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f023 0307 	bic.w	r3, r3, #7
 800b970:	3308      	adds	r3, #8
 800b972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f003 0307 	and.w	r3, r3, #7
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00a      	beq.n	800b994 <pvPortMalloc+0x6c>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	617b      	str	r3, [r7, #20]
}
 800b990:	bf00      	nop
 800b992:	e7fe      	b.n	800b992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d06e      	beq.n	800ba78 <pvPortMalloc+0x150>
 800b99a:	4b45      	ldr	r3, [pc, #276]	; (800bab0 <pvPortMalloc+0x188>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d869      	bhi.n	800ba78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b9a4:	4b43      	ldr	r3, [pc, #268]	; (800bab4 <pvPortMalloc+0x18c>)
 800b9a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b9a8:	4b42      	ldr	r3, [pc, #264]	; (800bab4 <pvPortMalloc+0x18c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9ae:	e004      	b.n	800b9ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d903      	bls.n	800b9cc <pvPortMalloc+0xa4>
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1f1      	bne.n	800b9b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9cc:	4b36      	ldr	r3, [pc, #216]	; (800baa8 <pvPortMalloc+0x180>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d050      	beq.n	800ba78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2208      	movs	r2, #8
 800b9dc:	4413      	add	r3, r2
 800b9de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	1ad2      	subs	r2, r2, r3
 800b9f0:	2308      	movs	r3, #8
 800b9f2:	005b      	lsls	r3, r3, #1
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d91f      	bls.n	800ba38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	f003 0307 	and.w	r3, r3, #7
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00a      	beq.n	800ba20 <pvPortMalloc+0xf8>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	613b      	str	r3, [r7, #16]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	685a      	ldr	r2, [r3, #4]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	1ad2      	subs	r2, r2, r3
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba32:	69b8      	ldr	r0, [r7, #24]
 800ba34:	f000 f908 	bl	800bc48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba38:	4b1d      	ldr	r3, [pc, #116]	; (800bab0 <pvPortMalloc+0x188>)
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	4a1b      	ldr	r2, [pc, #108]	; (800bab0 <pvPortMalloc+0x188>)
 800ba44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba46:	4b1a      	ldr	r3, [pc, #104]	; (800bab0 <pvPortMalloc+0x188>)
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	4b1b      	ldr	r3, [pc, #108]	; (800bab8 <pvPortMalloc+0x190>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d203      	bcs.n	800ba5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba52:	4b17      	ldr	r3, [pc, #92]	; (800bab0 <pvPortMalloc+0x188>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a18      	ldr	r2, [pc, #96]	; (800bab8 <pvPortMalloc+0x190>)
 800ba58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5c:	685a      	ldr	r2, [r3, #4]
 800ba5e:	4b13      	ldr	r3, [pc, #76]	; (800baac <pvPortMalloc+0x184>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	431a      	orrs	r2, r3
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba6e:	4b13      	ldr	r3, [pc, #76]	; (800babc <pvPortMalloc+0x194>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3301      	adds	r3, #1
 800ba74:	4a11      	ldr	r2, [pc, #68]	; (800babc <pvPortMalloc+0x194>)
 800ba76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba78:	f7fe fd08 	bl	800a48c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	f003 0307 	and.w	r3, r3, #7
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00a      	beq.n	800ba9c <pvPortMalloc+0x174>
	__asm volatile
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	60fb      	str	r3, [r7, #12]
}
 800ba98:	bf00      	nop
 800ba9a:	e7fe      	b.n	800ba9a <pvPortMalloc+0x172>
	return pvReturn;
 800ba9c:	69fb      	ldr	r3, [r7, #28]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3728      	adds	r7, #40	; 0x28
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20005254 	.word	0x20005254
 800baac:	20005268 	.word	0x20005268
 800bab0:	20005258 	.word	0x20005258
 800bab4:	2000524c 	.word	0x2000524c
 800bab8:	2000525c 	.word	0x2000525c
 800babc:	20005260 	.word	0x20005260

0800bac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d04d      	beq.n	800bb6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bad2:	2308      	movs	r3, #8
 800bad4:	425b      	negs	r3, r3
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	4413      	add	r3, r2
 800bada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	4b24      	ldr	r3, [pc, #144]	; (800bb78 <vPortFree+0xb8>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4013      	ands	r3, r2
 800baea:	2b00      	cmp	r3, #0
 800baec:	d10a      	bne.n	800bb04 <vPortFree+0x44>
	__asm volatile
 800baee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	60fb      	str	r3, [r7, #12]
}
 800bb00:	bf00      	nop
 800bb02:	e7fe      	b.n	800bb02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00a      	beq.n	800bb22 <vPortFree+0x62>
	__asm volatile
 800bb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb10:	f383 8811 	msr	BASEPRI, r3
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	f3bf 8f4f 	dsb	sy
 800bb1c:	60bb      	str	r3, [r7, #8]
}
 800bb1e:	bf00      	nop
 800bb20:	e7fe      	b.n	800bb20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	4b14      	ldr	r3, [pc, #80]	; (800bb78 <vPortFree+0xb8>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4013      	ands	r3, r2
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d01e      	beq.n	800bb6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d11a      	bne.n	800bb6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	4b0e      	ldr	r3, [pc, #56]	; (800bb78 <vPortFree+0xb8>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	43db      	mvns	r3, r3
 800bb42:	401a      	ands	r2, r3
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb48:	f7fe fc92 	bl	800a470 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	685a      	ldr	r2, [r3, #4]
 800bb50:	4b0a      	ldr	r3, [pc, #40]	; (800bb7c <vPortFree+0xbc>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4413      	add	r3, r2
 800bb56:	4a09      	ldr	r2, [pc, #36]	; (800bb7c <vPortFree+0xbc>)
 800bb58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb5a:	6938      	ldr	r0, [r7, #16]
 800bb5c:	f000 f874 	bl	800bc48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb60:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <vPortFree+0xc0>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	3301      	adds	r3, #1
 800bb66:	4a06      	ldr	r2, [pc, #24]	; (800bb80 <vPortFree+0xc0>)
 800bb68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb6a:	f7fe fc8f 	bl	800a48c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb6e:	bf00      	nop
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	20005268 	.word	0x20005268
 800bb7c:	20005258 	.word	0x20005258
 800bb80:	20005264 	.word	0x20005264

0800bb84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bb8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb90:	4b27      	ldr	r3, [pc, #156]	; (800bc30 <prvHeapInit+0xac>)
 800bb92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f003 0307 	and.w	r3, r3, #7
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00c      	beq.n	800bbb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3307      	adds	r3, #7
 800bba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f023 0307 	bic.w	r3, r3, #7
 800bbaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bbac:	68ba      	ldr	r2, [r7, #8]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	4a1f      	ldr	r2, [pc, #124]	; (800bc30 <prvHeapInit+0xac>)
 800bbb4:	4413      	add	r3, r2
 800bbb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bbbc:	4a1d      	ldr	r2, [pc, #116]	; (800bc34 <prvHeapInit+0xb0>)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bbc2:	4b1c      	ldr	r3, [pc, #112]	; (800bc34 <prvHeapInit+0xb0>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	68ba      	ldr	r2, [r7, #8]
 800bbcc:	4413      	add	r3, r2
 800bbce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbd0:	2208      	movs	r2, #8
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	1a9b      	subs	r3, r3, r2
 800bbd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f023 0307 	bic.w	r3, r3, #7
 800bbde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	4a15      	ldr	r2, [pc, #84]	; (800bc38 <prvHeapInit+0xb4>)
 800bbe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbe6:	4b14      	ldr	r3, [pc, #80]	; (800bc38 <prvHeapInit+0xb4>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2200      	movs	r2, #0
 800bbec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbee:	4b12      	ldr	r3, [pc, #72]	; (800bc38 <prvHeapInit+0xb4>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	1ad2      	subs	r2, r2, r3
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc04:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <prvHeapInit+0xb4>)
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	4a0a      	ldr	r2, [pc, #40]	; (800bc3c <prvHeapInit+0xb8>)
 800bc12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	4a09      	ldr	r2, [pc, #36]	; (800bc40 <prvHeapInit+0xbc>)
 800bc1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc1c:	4b09      	ldr	r3, [pc, #36]	; (800bc44 <prvHeapInit+0xc0>)
 800bc1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc22:	601a      	str	r2, [r3, #0]
}
 800bc24:	bf00      	nop
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	2000164c 	.word	0x2000164c
 800bc34:	2000524c 	.word	0x2000524c
 800bc38:	20005254 	.word	0x20005254
 800bc3c:	2000525c 	.word	0x2000525c
 800bc40:	20005258 	.word	0x20005258
 800bc44:	20005268 	.word	0x20005268

0800bc48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc50:	4b28      	ldr	r3, [pc, #160]	; (800bcf4 <prvInsertBlockIntoFreeList+0xac>)
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	e002      	b.n	800bc5c <prvInsertBlockIntoFreeList+0x14>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	60fb      	str	r3, [r7, #12]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d8f7      	bhi.n	800bc56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	4413      	add	r3, r2
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d108      	bne.n	800bc8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	441a      	add	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	441a      	add	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d118      	bne.n	800bcd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	4b15      	ldr	r3, [pc, #84]	; (800bcf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d00d      	beq.n	800bcc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	685a      	ldr	r2, [r3, #4]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	441a      	add	r2, r3
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	e008      	b.n	800bcd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bcc6:	4b0c      	ldr	r3, [pc, #48]	; (800bcf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	e003      	b.n	800bcd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d002      	beq.n	800bce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bce6:	bf00      	nop
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	2000524c 	.word	0x2000524c
 800bcf8:	20005254 	.word	0x20005254

0800bcfc <__cvt>:
 800bcfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd00:	ec55 4b10 	vmov	r4, r5, d0
 800bd04:	2d00      	cmp	r5, #0
 800bd06:	460e      	mov	r6, r1
 800bd08:	4619      	mov	r1, r3
 800bd0a:	462b      	mov	r3, r5
 800bd0c:	bfbb      	ittet	lt
 800bd0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bd12:	461d      	movlt	r5, r3
 800bd14:	2300      	movge	r3, #0
 800bd16:	232d      	movlt	r3, #45	; 0x2d
 800bd18:	700b      	strb	r3, [r1, #0]
 800bd1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd20:	4691      	mov	r9, r2
 800bd22:	f023 0820 	bic.w	r8, r3, #32
 800bd26:	bfbc      	itt	lt
 800bd28:	4622      	movlt	r2, r4
 800bd2a:	4614      	movlt	r4, r2
 800bd2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd30:	d005      	beq.n	800bd3e <__cvt+0x42>
 800bd32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bd36:	d100      	bne.n	800bd3a <__cvt+0x3e>
 800bd38:	3601      	adds	r6, #1
 800bd3a:	2102      	movs	r1, #2
 800bd3c:	e000      	b.n	800bd40 <__cvt+0x44>
 800bd3e:	2103      	movs	r1, #3
 800bd40:	ab03      	add	r3, sp, #12
 800bd42:	9301      	str	r3, [sp, #4]
 800bd44:	ab02      	add	r3, sp, #8
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	ec45 4b10 	vmov	d0, r4, r5
 800bd4c:	4653      	mov	r3, sl
 800bd4e:	4632      	mov	r2, r6
 800bd50:	f000 fdda 	bl	800c908 <_dtoa_r>
 800bd54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd58:	4607      	mov	r7, r0
 800bd5a:	d102      	bne.n	800bd62 <__cvt+0x66>
 800bd5c:	f019 0f01 	tst.w	r9, #1
 800bd60:	d022      	beq.n	800bda8 <__cvt+0xac>
 800bd62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd66:	eb07 0906 	add.w	r9, r7, r6
 800bd6a:	d110      	bne.n	800bd8e <__cvt+0x92>
 800bd6c:	783b      	ldrb	r3, [r7, #0]
 800bd6e:	2b30      	cmp	r3, #48	; 0x30
 800bd70:	d10a      	bne.n	800bd88 <__cvt+0x8c>
 800bd72:	2200      	movs	r2, #0
 800bd74:	2300      	movs	r3, #0
 800bd76:	4620      	mov	r0, r4
 800bd78:	4629      	mov	r1, r5
 800bd7a:	f7f4 fea5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd7e:	b918      	cbnz	r0, 800bd88 <__cvt+0x8c>
 800bd80:	f1c6 0601 	rsb	r6, r6, #1
 800bd84:	f8ca 6000 	str.w	r6, [sl]
 800bd88:	f8da 3000 	ldr.w	r3, [sl]
 800bd8c:	4499      	add	r9, r3
 800bd8e:	2200      	movs	r2, #0
 800bd90:	2300      	movs	r3, #0
 800bd92:	4620      	mov	r0, r4
 800bd94:	4629      	mov	r1, r5
 800bd96:	f7f4 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd9a:	b108      	cbz	r0, 800bda0 <__cvt+0xa4>
 800bd9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bda0:	2230      	movs	r2, #48	; 0x30
 800bda2:	9b03      	ldr	r3, [sp, #12]
 800bda4:	454b      	cmp	r3, r9
 800bda6:	d307      	bcc.n	800bdb8 <__cvt+0xbc>
 800bda8:	9b03      	ldr	r3, [sp, #12]
 800bdaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdac:	1bdb      	subs	r3, r3, r7
 800bdae:	4638      	mov	r0, r7
 800bdb0:	6013      	str	r3, [r2, #0]
 800bdb2:	b004      	add	sp, #16
 800bdb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb8:	1c59      	adds	r1, r3, #1
 800bdba:	9103      	str	r1, [sp, #12]
 800bdbc:	701a      	strb	r2, [r3, #0]
 800bdbe:	e7f0      	b.n	800bda2 <__cvt+0xa6>

0800bdc0 <__exponent>:
 800bdc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2900      	cmp	r1, #0
 800bdc6:	bfb8      	it	lt
 800bdc8:	4249      	neglt	r1, r1
 800bdca:	f803 2b02 	strb.w	r2, [r3], #2
 800bdce:	bfb4      	ite	lt
 800bdd0:	222d      	movlt	r2, #45	; 0x2d
 800bdd2:	222b      	movge	r2, #43	; 0x2b
 800bdd4:	2909      	cmp	r1, #9
 800bdd6:	7042      	strb	r2, [r0, #1]
 800bdd8:	dd2a      	ble.n	800be30 <__exponent+0x70>
 800bdda:	f10d 0207 	add.w	r2, sp, #7
 800bdde:	4617      	mov	r7, r2
 800bde0:	260a      	movs	r6, #10
 800bde2:	4694      	mov	ip, r2
 800bde4:	fb91 f5f6 	sdiv	r5, r1, r6
 800bde8:	fb06 1415 	mls	r4, r6, r5, r1
 800bdec:	3430      	adds	r4, #48	; 0x30
 800bdee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	2c63      	cmp	r4, #99	; 0x63
 800bdf6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	dcf1      	bgt.n	800bde2 <__exponent+0x22>
 800bdfe:	3130      	adds	r1, #48	; 0x30
 800be00:	f1ac 0402 	sub.w	r4, ip, #2
 800be04:	f802 1c01 	strb.w	r1, [r2, #-1]
 800be08:	1c41      	adds	r1, r0, #1
 800be0a:	4622      	mov	r2, r4
 800be0c:	42ba      	cmp	r2, r7
 800be0e:	d30a      	bcc.n	800be26 <__exponent+0x66>
 800be10:	f10d 0209 	add.w	r2, sp, #9
 800be14:	eba2 020c 	sub.w	r2, r2, ip
 800be18:	42bc      	cmp	r4, r7
 800be1a:	bf88      	it	hi
 800be1c:	2200      	movhi	r2, #0
 800be1e:	4413      	add	r3, r2
 800be20:	1a18      	subs	r0, r3, r0
 800be22:	b003      	add	sp, #12
 800be24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be26:	f812 5b01 	ldrb.w	r5, [r2], #1
 800be2a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800be2e:	e7ed      	b.n	800be0c <__exponent+0x4c>
 800be30:	2330      	movs	r3, #48	; 0x30
 800be32:	3130      	adds	r1, #48	; 0x30
 800be34:	7083      	strb	r3, [r0, #2]
 800be36:	70c1      	strb	r1, [r0, #3]
 800be38:	1d03      	adds	r3, r0, #4
 800be3a:	e7f1      	b.n	800be20 <__exponent+0x60>

0800be3c <_printf_float>:
 800be3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be40:	ed2d 8b02 	vpush	{d8}
 800be44:	b08d      	sub	sp, #52	; 0x34
 800be46:	460c      	mov	r4, r1
 800be48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800be4c:	4616      	mov	r6, r2
 800be4e:	461f      	mov	r7, r3
 800be50:	4605      	mov	r5, r0
 800be52:	f000 fc91 	bl	800c778 <_localeconv_r>
 800be56:	f8d0 a000 	ldr.w	sl, [r0]
 800be5a:	4650      	mov	r0, sl
 800be5c:	f7f4 fa08 	bl	8000270 <strlen>
 800be60:	2300      	movs	r3, #0
 800be62:	930a      	str	r3, [sp, #40]	; 0x28
 800be64:	6823      	ldr	r3, [r4, #0]
 800be66:	9305      	str	r3, [sp, #20]
 800be68:	f8d8 3000 	ldr.w	r3, [r8]
 800be6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800be70:	3307      	adds	r3, #7
 800be72:	f023 0307 	bic.w	r3, r3, #7
 800be76:	f103 0208 	add.w	r2, r3, #8
 800be7a:	f8c8 2000 	str.w	r2, [r8]
 800be7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be86:	9307      	str	r3, [sp, #28]
 800be88:	f8cd 8018 	str.w	r8, [sp, #24]
 800be8c:	ee08 0a10 	vmov	s16, r0
 800be90:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800be94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be98:	4b9e      	ldr	r3, [pc, #632]	; (800c114 <_printf_float+0x2d8>)
 800be9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be9e:	f7f4 fe45 	bl	8000b2c <__aeabi_dcmpun>
 800bea2:	bb88      	cbnz	r0, 800bf08 <_printf_float+0xcc>
 800bea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bea8:	4b9a      	ldr	r3, [pc, #616]	; (800c114 <_printf_float+0x2d8>)
 800beaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800beae:	f7f4 fe1f 	bl	8000af0 <__aeabi_dcmple>
 800beb2:	bb48      	cbnz	r0, 800bf08 <_printf_float+0xcc>
 800beb4:	2200      	movs	r2, #0
 800beb6:	2300      	movs	r3, #0
 800beb8:	4640      	mov	r0, r8
 800beba:	4649      	mov	r1, r9
 800bebc:	f7f4 fe0e 	bl	8000adc <__aeabi_dcmplt>
 800bec0:	b110      	cbz	r0, 800bec8 <_printf_float+0x8c>
 800bec2:	232d      	movs	r3, #45	; 0x2d
 800bec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bec8:	4a93      	ldr	r2, [pc, #588]	; (800c118 <_printf_float+0x2dc>)
 800beca:	4b94      	ldr	r3, [pc, #592]	; (800c11c <_printf_float+0x2e0>)
 800becc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bed0:	bf94      	ite	ls
 800bed2:	4690      	movls	r8, r2
 800bed4:	4698      	movhi	r8, r3
 800bed6:	2303      	movs	r3, #3
 800bed8:	6123      	str	r3, [r4, #16]
 800beda:	9b05      	ldr	r3, [sp, #20]
 800bedc:	f023 0304 	bic.w	r3, r3, #4
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	f04f 0900 	mov.w	r9, #0
 800bee6:	9700      	str	r7, [sp, #0]
 800bee8:	4633      	mov	r3, r6
 800beea:	aa0b      	add	r2, sp, #44	; 0x2c
 800beec:	4621      	mov	r1, r4
 800beee:	4628      	mov	r0, r5
 800bef0:	f000 f9da 	bl	800c2a8 <_printf_common>
 800bef4:	3001      	adds	r0, #1
 800bef6:	f040 8090 	bne.w	800c01a <_printf_float+0x1de>
 800befa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800befe:	b00d      	add	sp, #52	; 0x34
 800bf00:	ecbd 8b02 	vpop	{d8}
 800bf04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf08:	4642      	mov	r2, r8
 800bf0a:	464b      	mov	r3, r9
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	4649      	mov	r1, r9
 800bf10:	f7f4 fe0c 	bl	8000b2c <__aeabi_dcmpun>
 800bf14:	b140      	cbz	r0, 800bf28 <_printf_float+0xec>
 800bf16:	464b      	mov	r3, r9
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	bfbc      	itt	lt
 800bf1c:	232d      	movlt	r3, #45	; 0x2d
 800bf1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf22:	4a7f      	ldr	r2, [pc, #508]	; (800c120 <_printf_float+0x2e4>)
 800bf24:	4b7f      	ldr	r3, [pc, #508]	; (800c124 <_printf_float+0x2e8>)
 800bf26:	e7d1      	b.n	800becc <_printf_float+0x90>
 800bf28:	6863      	ldr	r3, [r4, #4]
 800bf2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bf2e:	9206      	str	r2, [sp, #24]
 800bf30:	1c5a      	adds	r2, r3, #1
 800bf32:	d13f      	bne.n	800bfb4 <_printf_float+0x178>
 800bf34:	2306      	movs	r3, #6
 800bf36:	6063      	str	r3, [r4, #4]
 800bf38:	9b05      	ldr	r3, [sp, #20]
 800bf3a:	6861      	ldr	r1, [r4, #4]
 800bf3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf40:	2300      	movs	r3, #0
 800bf42:	9303      	str	r3, [sp, #12]
 800bf44:	ab0a      	add	r3, sp, #40	; 0x28
 800bf46:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bf4a:	ab09      	add	r3, sp, #36	; 0x24
 800bf4c:	ec49 8b10 	vmov	d0, r8, r9
 800bf50:	9300      	str	r3, [sp, #0]
 800bf52:	6022      	str	r2, [r4, #0]
 800bf54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf58:	4628      	mov	r0, r5
 800bf5a:	f7ff fecf 	bl	800bcfc <__cvt>
 800bf5e:	9b06      	ldr	r3, [sp, #24]
 800bf60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf62:	2b47      	cmp	r3, #71	; 0x47
 800bf64:	4680      	mov	r8, r0
 800bf66:	d108      	bne.n	800bf7a <_printf_float+0x13e>
 800bf68:	1cc8      	adds	r0, r1, #3
 800bf6a:	db02      	blt.n	800bf72 <_printf_float+0x136>
 800bf6c:	6863      	ldr	r3, [r4, #4]
 800bf6e:	4299      	cmp	r1, r3
 800bf70:	dd41      	ble.n	800bff6 <_printf_float+0x1ba>
 800bf72:	f1ab 0302 	sub.w	r3, fp, #2
 800bf76:	fa5f fb83 	uxtb.w	fp, r3
 800bf7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf7e:	d820      	bhi.n	800bfc2 <_printf_float+0x186>
 800bf80:	3901      	subs	r1, #1
 800bf82:	465a      	mov	r2, fp
 800bf84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf88:	9109      	str	r1, [sp, #36]	; 0x24
 800bf8a:	f7ff ff19 	bl	800bdc0 <__exponent>
 800bf8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf90:	1813      	adds	r3, r2, r0
 800bf92:	2a01      	cmp	r2, #1
 800bf94:	4681      	mov	r9, r0
 800bf96:	6123      	str	r3, [r4, #16]
 800bf98:	dc02      	bgt.n	800bfa0 <_printf_float+0x164>
 800bf9a:	6822      	ldr	r2, [r4, #0]
 800bf9c:	07d2      	lsls	r2, r2, #31
 800bf9e:	d501      	bpl.n	800bfa4 <_printf_float+0x168>
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	6123      	str	r3, [r4, #16]
 800bfa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d09c      	beq.n	800bee6 <_printf_float+0xaa>
 800bfac:	232d      	movs	r3, #45	; 0x2d
 800bfae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfb2:	e798      	b.n	800bee6 <_printf_float+0xaa>
 800bfb4:	9a06      	ldr	r2, [sp, #24]
 800bfb6:	2a47      	cmp	r2, #71	; 0x47
 800bfb8:	d1be      	bne.n	800bf38 <_printf_float+0xfc>
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1bc      	bne.n	800bf38 <_printf_float+0xfc>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e7b9      	b.n	800bf36 <_printf_float+0xfa>
 800bfc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bfc6:	d118      	bne.n	800bffa <_printf_float+0x1be>
 800bfc8:	2900      	cmp	r1, #0
 800bfca:	6863      	ldr	r3, [r4, #4]
 800bfcc:	dd0b      	ble.n	800bfe6 <_printf_float+0x1aa>
 800bfce:	6121      	str	r1, [r4, #16]
 800bfd0:	b913      	cbnz	r3, 800bfd8 <_printf_float+0x19c>
 800bfd2:	6822      	ldr	r2, [r4, #0]
 800bfd4:	07d0      	lsls	r0, r2, #31
 800bfd6:	d502      	bpl.n	800bfde <_printf_float+0x1a2>
 800bfd8:	3301      	adds	r3, #1
 800bfda:	440b      	add	r3, r1
 800bfdc:	6123      	str	r3, [r4, #16]
 800bfde:	65a1      	str	r1, [r4, #88]	; 0x58
 800bfe0:	f04f 0900 	mov.w	r9, #0
 800bfe4:	e7de      	b.n	800bfa4 <_printf_float+0x168>
 800bfe6:	b913      	cbnz	r3, 800bfee <_printf_float+0x1b2>
 800bfe8:	6822      	ldr	r2, [r4, #0]
 800bfea:	07d2      	lsls	r2, r2, #31
 800bfec:	d501      	bpl.n	800bff2 <_printf_float+0x1b6>
 800bfee:	3302      	adds	r3, #2
 800bff0:	e7f4      	b.n	800bfdc <_printf_float+0x1a0>
 800bff2:	2301      	movs	r3, #1
 800bff4:	e7f2      	b.n	800bfdc <_printf_float+0x1a0>
 800bff6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bffc:	4299      	cmp	r1, r3
 800bffe:	db05      	blt.n	800c00c <_printf_float+0x1d0>
 800c000:	6823      	ldr	r3, [r4, #0]
 800c002:	6121      	str	r1, [r4, #16]
 800c004:	07d8      	lsls	r0, r3, #31
 800c006:	d5ea      	bpl.n	800bfde <_printf_float+0x1a2>
 800c008:	1c4b      	adds	r3, r1, #1
 800c00a:	e7e7      	b.n	800bfdc <_printf_float+0x1a0>
 800c00c:	2900      	cmp	r1, #0
 800c00e:	bfd4      	ite	le
 800c010:	f1c1 0202 	rsble	r2, r1, #2
 800c014:	2201      	movgt	r2, #1
 800c016:	4413      	add	r3, r2
 800c018:	e7e0      	b.n	800bfdc <_printf_float+0x1a0>
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	055a      	lsls	r2, r3, #21
 800c01e:	d407      	bmi.n	800c030 <_printf_float+0x1f4>
 800c020:	6923      	ldr	r3, [r4, #16]
 800c022:	4642      	mov	r2, r8
 800c024:	4631      	mov	r1, r6
 800c026:	4628      	mov	r0, r5
 800c028:	47b8      	blx	r7
 800c02a:	3001      	adds	r0, #1
 800c02c:	d12c      	bne.n	800c088 <_printf_float+0x24c>
 800c02e:	e764      	b.n	800befa <_printf_float+0xbe>
 800c030:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c034:	f240 80e0 	bls.w	800c1f8 <_printf_float+0x3bc>
 800c038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c03c:	2200      	movs	r2, #0
 800c03e:	2300      	movs	r3, #0
 800c040:	f7f4 fd42 	bl	8000ac8 <__aeabi_dcmpeq>
 800c044:	2800      	cmp	r0, #0
 800c046:	d034      	beq.n	800c0b2 <_printf_float+0x276>
 800c048:	4a37      	ldr	r2, [pc, #220]	; (800c128 <_printf_float+0x2ec>)
 800c04a:	2301      	movs	r3, #1
 800c04c:	4631      	mov	r1, r6
 800c04e:	4628      	mov	r0, r5
 800c050:	47b8      	blx	r7
 800c052:	3001      	adds	r0, #1
 800c054:	f43f af51 	beq.w	800befa <_printf_float+0xbe>
 800c058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c05c:	429a      	cmp	r2, r3
 800c05e:	db02      	blt.n	800c066 <_printf_float+0x22a>
 800c060:	6823      	ldr	r3, [r4, #0]
 800c062:	07d8      	lsls	r0, r3, #31
 800c064:	d510      	bpl.n	800c088 <_printf_float+0x24c>
 800c066:	ee18 3a10 	vmov	r3, s16
 800c06a:	4652      	mov	r2, sl
 800c06c:	4631      	mov	r1, r6
 800c06e:	4628      	mov	r0, r5
 800c070:	47b8      	blx	r7
 800c072:	3001      	adds	r0, #1
 800c074:	f43f af41 	beq.w	800befa <_printf_float+0xbe>
 800c078:	f04f 0800 	mov.w	r8, #0
 800c07c:	f104 091a 	add.w	r9, r4, #26
 800c080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c082:	3b01      	subs	r3, #1
 800c084:	4543      	cmp	r3, r8
 800c086:	dc09      	bgt.n	800c09c <_printf_float+0x260>
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	079b      	lsls	r3, r3, #30
 800c08c:	f100 8107 	bmi.w	800c29e <_printf_float+0x462>
 800c090:	68e0      	ldr	r0, [r4, #12]
 800c092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c094:	4298      	cmp	r0, r3
 800c096:	bfb8      	it	lt
 800c098:	4618      	movlt	r0, r3
 800c09a:	e730      	b.n	800befe <_printf_float+0xc2>
 800c09c:	2301      	movs	r3, #1
 800c09e:	464a      	mov	r2, r9
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f af27 	beq.w	800befa <_printf_float+0xbe>
 800c0ac:	f108 0801 	add.w	r8, r8, #1
 800c0b0:	e7e6      	b.n	800c080 <_printf_float+0x244>
 800c0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	dc39      	bgt.n	800c12c <_printf_float+0x2f0>
 800c0b8:	4a1b      	ldr	r2, [pc, #108]	; (800c128 <_printf_float+0x2ec>)
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	4631      	mov	r1, r6
 800c0be:	4628      	mov	r0, r5
 800c0c0:	47b8      	blx	r7
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	f43f af19 	beq.w	800befa <_printf_float+0xbe>
 800c0c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	d102      	bne.n	800c0d6 <_printf_float+0x29a>
 800c0d0:	6823      	ldr	r3, [r4, #0]
 800c0d2:	07d9      	lsls	r1, r3, #31
 800c0d4:	d5d8      	bpl.n	800c088 <_printf_float+0x24c>
 800c0d6:	ee18 3a10 	vmov	r3, s16
 800c0da:	4652      	mov	r2, sl
 800c0dc:	4631      	mov	r1, r6
 800c0de:	4628      	mov	r0, r5
 800c0e0:	47b8      	blx	r7
 800c0e2:	3001      	adds	r0, #1
 800c0e4:	f43f af09 	beq.w	800befa <_printf_float+0xbe>
 800c0e8:	f04f 0900 	mov.w	r9, #0
 800c0ec:	f104 0a1a 	add.w	sl, r4, #26
 800c0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f2:	425b      	negs	r3, r3
 800c0f4:	454b      	cmp	r3, r9
 800c0f6:	dc01      	bgt.n	800c0fc <_printf_float+0x2c0>
 800c0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0fa:	e792      	b.n	800c022 <_printf_float+0x1e6>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	4652      	mov	r2, sl
 800c100:	4631      	mov	r1, r6
 800c102:	4628      	mov	r0, r5
 800c104:	47b8      	blx	r7
 800c106:	3001      	adds	r0, #1
 800c108:	f43f aef7 	beq.w	800befa <_printf_float+0xbe>
 800c10c:	f109 0901 	add.w	r9, r9, #1
 800c110:	e7ee      	b.n	800c0f0 <_printf_float+0x2b4>
 800c112:	bf00      	nop
 800c114:	7fefffff 	.word	0x7fefffff
 800c118:	080106d4 	.word	0x080106d4
 800c11c:	080106d8 	.word	0x080106d8
 800c120:	080106dc 	.word	0x080106dc
 800c124:	080106e0 	.word	0x080106e0
 800c128:	080106e4 	.word	0x080106e4
 800c12c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c12e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c130:	429a      	cmp	r2, r3
 800c132:	bfa8      	it	ge
 800c134:	461a      	movge	r2, r3
 800c136:	2a00      	cmp	r2, #0
 800c138:	4691      	mov	r9, r2
 800c13a:	dc37      	bgt.n	800c1ac <_printf_float+0x370>
 800c13c:	f04f 0b00 	mov.w	fp, #0
 800c140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c144:	f104 021a 	add.w	r2, r4, #26
 800c148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c14a:	9305      	str	r3, [sp, #20]
 800c14c:	eba3 0309 	sub.w	r3, r3, r9
 800c150:	455b      	cmp	r3, fp
 800c152:	dc33      	bgt.n	800c1bc <_printf_float+0x380>
 800c154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c158:	429a      	cmp	r2, r3
 800c15a:	db3b      	blt.n	800c1d4 <_printf_float+0x398>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	07da      	lsls	r2, r3, #31
 800c160:	d438      	bmi.n	800c1d4 <_printf_float+0x398>
 800c162:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c166:	eba2 0903 	sub.w	r9, r2, r3
 800c16a:	9b05      	ldr	r3, [sp, #20]
 800c16c:	1ad2      	subs	r2, r2, r3
 800c16e:	4591      	cmp	r9, r2
 800c170:	bfa8      	it	ge
 800c172:	4691      	movge	r9, r2
 800c174:	f1b9 0f00 	cmp.w	r9, #0
 800c178:	dc35      	bgt.n	800c1e6 <_printf_float+0x3aa>
 800c17a:	f04f 0800 	mov.w	r8, #0
 800c17e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c182:	f104 0a1a 	add.w	sl, r4, #26
 800c186:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c18a:	1a9b      	subs	r3, r3, r2
 800c18c:	eba3 0309 	sub.w	r3, r3, r9
 800c190:	4543      	cmp	r3, r8
 800c192:	f77f af79 	ble.w	800c088 <_printf_float+0x24c>
 800c196:	2301      	movs	r3, #1
 800c198:	4652      	mov	r2, sl
 800c19a:	4631      	mov	r1, r6
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b8      	blx	r7
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	f43f aeaa 	beq.w	800befa <_printf_float+0xbe>
 800c1a6:	f108 0801 	add.w	r8, r8, #1
 800c1aa:	e7ec      	b.n	800c186 <_printf_float+0x34a>
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	4631      	mov	r1, r6
 800c1b0:	4642      	mov	r2, r8
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	47b8      	blx	r7
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	d1c0      	bne.n	800c13c <_printf_float+0x300>
 800c1ba:	e69e      	b.n	800befa <_printf_float+0xbe>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	4631      	mov	r1, r6
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	9205      	str	r2, [sp, #20]
 800c1c4:	47b8      	blx	r7
 800c1c6:	3001      	adds	r0, #1
 800c1c8:	f43f ae97 	beq.w	800befa <_printf_float+0xbe>
 800c1cc:	9a05      	ldr	r2, [sp, #20]
 800c1ce:	f10b 0b01 	add.w	fp, fp, #1
 800c1d2:	e7b9      	b.n	800c148 <_printf_float+0x30c>
 800c1d4:	ee18 3a10 	vmov	r3, s16
 800c1d8:	4652      	mov	r2, sl
 800c1da:	4631      	mov	r1, r6
 800c1dc:	4628      	mov	r0, r5
 800c1de:	47b8      	blx	r7
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	d1be      	bne.n	800c162 <_printf_float+0x326>
 800c1e4:	e689      	b.n	800befa <_printf_float+0xbe>
 800c1e6:	9a05      	ldr	r2, [sp, #20]
 800c1e8:	464b      	mov	r3, r9
 800c1ea:	4442      	add	r2, r8
 800c1ec:	4631      	mov	r1, r6
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	47b8      	blx	r7
 800c1f2:	3001      	adds	r0, #1
 800c1f4:	d1c1      	bne.n	800c17a <_printf_float+0x33e>
 800c1f6:	e680      	b.n	800befa <_printf_float+0xbe>
 800c1f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1fa:	2a01      	cmp	r2, #1
 800c1fc:	dc01      	bgt.n	800c202 <_printf_float+0x3c6>
 800c1fe:	07db      	lsls	r3, r3, #31
 800c200:	d53a      	bpl.n	800c278 <_printf_float+0x43c>
 800c202:	2301      	movs	r3, #1
 800c204:	4642      	mov	r2, r8
 800c206:	4631      	mov	r1, r6
 800c208:	4628      	mov	r0, r5
 800c20a:	47b8      	blx	r7
 800c20c:	3001      	adds	r0, #1
 800c20e:	f43f ae74 	beq.w	800befa <_printf_float+0xbe>
 800c212:	ee18 3a10 	vmov	r3, s16
 800c216:	4652      	mov	r2, sl
 800c218:	4631      	mov	r1, r6
 800c21a:	4628      	mov	r0, r5
 800c21c:	47b8      	blx	r7
 800c21e:	3001      	adds	r0, #1
 800c220:	f43f ae6b 	beq.w	800befa <_printf_float+0xbe>
 800c224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c228:	2200      	movs	r2, #0
 800c22a:	2300      	movs	r3, #0
 800c22c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c230:	f7f4 fc4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c234:	b9d8      	cbnz	r0, 800c26e <_printf_float+0x432>
 800c236:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c23a:	f108 0201 	add.w	r2, r8, #1
 800c23e:	4631      	mov	r1, r6
 800c240:	4628      	mov	r0, r5
 800c242:	47b8      	blx	r7
 800c244:	3001      	adds	r0, #1
 800c246:	d10e      	bne.n	800c266 <_printf_float+0x42a>
 800c248:	e657      	b.n	800befa <_printf_float+0xbe>
 800c24a:	2301      	movs	r3, #1
 800c24c:	4652      	mov	r2, sl
 800c24e:	4631      	mov	r1, r6
 800c250:	4628      	mov	r0, r5
 800c252:	47b8      	blx	r7
 800c254:	3001      	adds	r0, #1
 800c256:	f43f ae50 	beq.w	800befa <_printf_float+0xbe>
 800c25a:	f108 0801 	add.w	r8, r8, #1
 800c25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c260:	3b01      	subs	r3, #1
 800c262:	4543      	cmp	r3, r8
 800c264:	dcf1      	bgt.n	800c24a <_printf_float+0x40e>
 800c266:	464b      	mov	r3, r9
 800c268:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c26c:	e6da      	b.n	800c024 <_printf_float+0x1e8>
 800c26e:	f04f 0800 	mov.w	r8, #0
 800c272:	f104 0a1a 	add.w	sl, r4, #26
 800c276:	e7f2      	b.n	800c25e <_printf_float+0x422>
 800c278:	2301      	movs	r3, #1
 800c27a:	4642      	mov	r2, r8
 800c27c:	e7df      	b.n	800c23e <_printf_float+0x402>
 800c27e:	2301      	movs	r3, #1
 800c280:	464a      	mov	r2, r9
 800c282:	4631      	mov	r1, r6
 800c284:	4628      	mov	r0, r5
 800c286:	47b8      	blx	r7
 800c288:	3001      	adds	r0, #1
 800c28a:	f43f ae36 	beq.w	800befa <_printf_float+0xbe>
 800c28e:	f108 0801 	add.w	r8, r8, #1
 800c292:	68e3      	ldr	r3, [r4, #12]
 800c294:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c296:	1a5b      	subs	r3, r3, r1
 800c298:	4543      	cmp	r3, r8
 800c29a:	dcf0      	bgt.n	800c27e <_printf_float+0x442>
 800c29c:	e6f8      	b.n	800c090 <_printf_float+0x254>
 800c29e:	f04f 0800 	mov.w	r8, #0
 800c2a2:	f104 0919 	add.w	r9, r4, #25
 800c2a6:	e7f4      	b.n	800c292 <_printf_float+0x456>

0800c2a8 <_printf_common>:
 800c2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2ac:	4616      	mov	r6, r2
 800c2ae:	4699      	mov	r9, r3
 800c2b0:	688a      	ldr	r2, [r1, #8]
 800c2b2:	690b      	ldr	r3, [r1, #16]
 800c2b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	bfb8      	it	lt
 800c2bc:	4613      	movlt	r3, r2
 800c2be:	6033      	str	r3, [r6, #0]
 800c2c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2c4:	4607      	mov	r7, r0
 800c2c6:	460c      	mov	r4, r1
 800c2c8:	b10a      	cbz	r2, 800c2ce <_printf_common+0x26>
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	6033      	str	r3, [r6, #0]
 800c2ce:	6823      	ldr	r3, [r4, #0]
 800c2d0:	0699      	lsls	r1, r3, #26
 800c2d2:	bf42      	ittt	mi
 800c2d4:	6833      	ldrmi	r3, [r6, #0]
 800c2d6:	3302      	addmi	r3, #2
 800c2d8:	6033      	strmi	r3, [r6, #0]
 800c2da:	6825      	ldr	r5, [r4, #0]
 800c2dc:	f015 0506 	ands.w	r5, r5, #6
 800c2e0:	d106      	bne.n	800c2f0 <_printf_common+0x48>
 800c2e2:	f104 0a19 	add.w	sl, r4, #25
 800c2e6:	68e3      	ldr	r3, [r4, #12]
 800c2e8:	6832      	ldr	r2, [r6, #0]
 800c2ea:	1a9b      	subs	r3, r3, r2
 800c2ec:	42ab      	cmp	r3, r5
 800c2ee:	dc26      	bgt.n	800c33e <_printf_common+0x96>
 800c2f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2f4:	1e13      	subs	r3, r2, #0
 800c2f6:	6822      	ldr	r2, [r4, #0]
 800c2f8:	bf18      	it	ne
 800c2fa:	2301      	movne	r3, #1
 800c2fc:	0692      	lsls	r2, r2, #26
 800c2fe:	d42b      	bmi.n	800c358 <_printf_common+0xb0>
 800c300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c304:	4649      	mov	r1, r9
 800c306:	4638      	mov	r0, r7
 800c308:	47c0      	blx	r8
 800c30a:	3001      	adds	r0, #1
 800c30c:	d01e      	beq.n	800c34c <_printf_common+0xa4>
 800c30e:	6823      	ldr	r3, [r4, #0]
 800c310:	6922      	ldr	r2, [r4, #16]
 800c312:	f003 0306 	and.w	r3, r3, #6
 800c316:	2b04      	cmp	r3, #4
 800c318:	bf02      	ittt	eq
 800c31a:	68e5      	ldreq	r5, [r4, #12]
 800c31c:	6833      	ldreq	r3, [r6, #0]
 800c31e:	1aed      	subeq	r5, r5, r3
 800c320:	68a3      	ldr	r3, [r4, #8]
 800c322:	bf0c      	ite	eq
 800c324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c328:	2500      	movne	r5, #0
 800c32a:	4293      	cmp	r3, r2
 800c32c:	bfc4      	itt	gt
 800c32e:	1a9b      	subgt	r3, r3, r2
 800c330:	18ed      	addgt	r5, r5, r3
 800c332:	2600      	movs	r6, #0
 800c334:	341a      	adds	r4, #26
 800c336:	42b5      	cmp	r5, r6
 800c338:	d11a      	bne.n	800c370 <_printf_common+0xc8>
 800c33a:	2000      	movs	r0, #0
 800c33c:	e008      	b.n	800c350 <_printf_common+0xa8>
 800c33e:	2301      	movs	r3, #1
 800c340:	4652      	mov	r2, sl
 800c342:	4649      	mov	r1, r9
 800c344:	4638      	mov	r0, r7
 800c346:	47c0      	blx	r8
 800c348:	3001      	adds	r0, #1
 800c34a:	d103      	bne.n	800c354 <_printf_common+0xac>
 800c34c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c354:	3501      	adds	r5, #1
 800c356:	e7c6      	b.n	800c2e6 <_printf_common+0x3e>
 800c358:	18e1      	adds	r1, r4, r3
 800c35a:	1c5a      	adds	r2, r3, #1
 800c35c:	2030      	movs	r0, #48	; 0x30
 800c35e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c362:	4422      	add	r2, r4
 800c364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c36c:	3302      	adds	r3, #2
 800c36e:	e7c7      	b.n	800c300 <_printf_common+0x58>
 800c370:	2301      	movs	r3, #1
 800c372:	4622      	mov	r2, r4
 800c374:	4649      	mov	r1, r9
 800c376:	4638      	mov	r0, r7
 800c378:	47c0      	blx	r8
 800c37a:	3001      	adds	r0, #1
 800c37c:	d0e6      	beq.n	800c34c <_printf_common+0xa4>
 800c37e:	3601      	adds	r6, #1
 800c380:	e7d9      	b.n	800c336 <_printf_common+0x8e>
	...

0800c384 <_printf_i>:
 800c384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c388:	7e0f      	ldrb	r7, [r1, #24]
 800c38a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c38c:	2f78      	cmp	r7, #120	; 0x78
 800c38e:	4691      	mov	r9, r2
 800c390:	4680      	mov	r8, r0
 800c392:	460c      	mov	r4, r1
 800c394:	469a      	mov	sl, r3
 800c396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c39a:	d807      	bhi.n	800c3ac <_printf_i+0x28>
 800c39c:	2f62      	cmp	r7, #98	; 0x62
 800c39e:	d80a      	bhi.n	800c3b6 <_printf_i+0x32>
 800c3a0:	2f00      	cmp	r7, #0
 800c3a2:	f000 80d4 	beq.w	800c54e <_printf_i+0x1ca>
 800c3a6:	2f58      	cmp	r7, #88	; 0x58
 800c3a8:	f000 80c0 	beq.w	800c52c <_printf_i+0x1a8>
 800c3ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3b4:	e03a      	b.n	800c42c <_printf_i+0xa8>
 800c3b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3ba:	2b15      	cmp	r3, #21
 800c3bc:	d8f6      	bhi.n	800c3ac <_printf_i+0x28>
 800c3be:	a101      	add	r1, pc, #4	; (adr r1, 800c3c4 <_printf_i+0x40>)
 800c3c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3c4:	0800c41d 	.word	0x0800c41d
 800c3c8:	0800c431 	.word	0x0800c431
 800c3cc:	0800c3ad 	.word	0x0800c3ad
 800c3d0:	0800c3ad 	.word	0x0800c3ad
 800c3d4:	0800c3ad 	.word	0x0800c3ad
 800c3d8:	0800c3ad 	.word	0x0800c3ad
 800c3dc:	0800c431 	.word	0x0800c431
 800c3e0:	0800c3ad 	.word	0x0800c3ad
 800c3e4:	0800c3ad 	.word	0x0800c3ad
 800c3e8:	0800c3ad 	.word	0x0800c3ad
 800c3ec:	0800c3ad 	.word	0x0800c3ad
 800c3f0:	0800c535 	.word	0x0800c535
 800c3f4:	0800c45d 	.word	0x0800c45d
 800c3f8:	0800c4ef 	.word	0x0800c4ef
 800c3fc:	0800c3ad 	.word	0x0800c3ad
 800c400:	0800c3ad 	.word	0x0800c3ad
 800c404:	0800c557 	.word	0x0800c557
 800c408:	0800c3ad 	.word	0x0800c3ad
 800c40c:	0800c45d 	.word	0x0800c45d
 800c410:	0800c3ad 	.word	0x0800c3ad
 800c414:	0800c3ad 	.word	0x0800c3ad
 800c418:	0800c4f7 	.word	0x0800c4f7
 800c41c:	682b      	ldr	r3, [r5, #0]
 800c41e:	1d1a      	adds	r2, r3, #4
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	602a      	str	r2, [r5, #0]
 800c424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c42c:	2301      	movs	r3, #1
 800c42e:	e09f      	b.n	800c570 <_printf_i+0x1ec>
 800c430:	6820      	ldr	r0, [r4, #0]
 800c432:	682b      	ldr	r3, [r5, #0]
 800c434:	0607      	lsls	r7, r0, #24
 800c436:	f103 0104 	add.w	r1, r3, #4
 800c43a:	6029      	str	r1, [r5, #0]
 800c43c:	d501      	bpl.n	800c442 <_printf_i+0xbe>
 800c43e:	681e      	ldr	r6, [r3, #0]
 800c440:	e003      	b.n	800c44a <_printf_i+0xc6>
 800c442:	0646      	lsls	r6, r0, #25
 800c444:	d5fb      	bpl.n	800c43e <_printf_i+0xba>
 800c446:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c44a:	2e00      	cmp	r6, #0
 800c44c:	da03      	bge.n	800c456 <_printf_i+0xd2>
 800c44e:	232d      	movs	r3, #45	; 0x2d
 800c450:	4276      	negs	r6, r6
 800c452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c456:	485a      	ldr	r0, [pc, #360]	; (800c5c0 <_printf_i+0x23c>)
 800c458:	230a      	movs	r3, #10
 800c45a:	e012      	b.n	800c482 <_printf_i+0xfe>
 800c45c:	682b      	ldr	r3, [r5, #0]
 800c45e:	6820      	ldr	r0, [r4, #0]
 800c460:	1d19      	adds	r1, r3, #4
 800c462:	6029      	str	r1, [r5, #0]
 800c464:	0605      	lsls	r5, r0, #24
 800c466:	d501      	bpl.n	800c46c <_printf_i+0xe8>
 800c468:	681e      	ldr	r6, [r3, #0]
 800c46a:	e002      	b.n	800c472 <_printf_i+0xee>
 800c46c:	0641      	lsls	r1, r0, #25
 800c46e:	d5fb      	bpl.n	800c468 <_printf_i+0xe4>
 800c470:	881e      	ldrh	r6, [r3, #0]
 800c472:	4853      	ldr	r0, [pc, #332]	; (800c5c0 <_printf_i+0x23c>)
 800c474:	2f6f      	cmp	r7, #111	; 0x6f
 800c476:	bf0c      	ite	eq
 800c478:	2308      	moveq	r3, #8
 800c47a:	230a      	movne	r3, #10
 800c47c:	2100      	movs	r1, #0
 800c47e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c482:	6865      	ldr	r5, [r4, #4]
 800c484:	60a5      	str	r5, [r4, #8]
 800c486:	2d00      	cmp	r5, #0
 800c488:	bfa2      	ittt	ge
 800c48a:	6821      	ldrge	r1, [r4, #0]
 800c48c:	f021 0104 	bicge.w	r1, r1, #4
 800c490:	6021      	strge	r1, [r4, #0]
 800c492:	b90e      	cbnz	r6, 800c498 <_printf_i+0x114>
 800c494:	2d00      	cmp	r5, #0
 800c496:	d04b      	beq.n	800c530 <_printf_i+0x1ac>
 800c498:	4615      	mov	r5, r2
 800c49a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c49e:	fb03 6711 	mls	r7, r3, r1, r6
 800c4a2:	5dc7      	ldrb	r7, [r0, r7]
 800c4a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4a8:	4637      	mov	r7, r6
 800c4aa:	42bb      	cmp	r3, r7
 800c4ac:	460e      	mov	r6, r1
 800c4ae:	d9f4      	bls.n	800c49a <_printf_i+0x116>
 800c4b0:	2b08      	cmp	r3, #8
 800c4b2:	d10b      	bne.n	800c4cc <_printf_i+0x148>
 800c4b4:	6823      	ldr	r3, [r4, #0]
 800c4b6:	07de      	lsls	r6, r3, #31
 800c4b8:	d508      	bpl.n	800c4cc <_printf_i+0x148>
 800c4ba:	6923      	ldr	r3, [r4, #16]
 800c4bc:	6861      	ldr	r1, [r4, #4]
 800c4be:	4299      	cmp	r1, r3
 800c4c0:	bfde      	ittt	le
 800c4c2:	2330      	movle	r3, #48	; 0x30
 800c4c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c4cc:	1b52      	subs	r2, r2, r5
 800c4ce:	6122      	str	r2, [r4, #16]
 800c4d0:	f8cd a000 	str.w	sl, [sp]
 800c4d4:	464b      	mov	r3, r9
 800c4d6:	aa03      	add	r2, sp, #12
 800c4d8:	4621      	mov	r1, r4
 800c4da:	4640      	mov	r0, r8
 800c4dc:	f7ff fee4 	bl	800c2a8 <_printf_common>
 800c4e0:	3001      	adds	r0, #1
 800c4e2:	d14a      	bne.n	800c57a <_printf_i+0x1f6>
 800c4e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4e8:	b004      	add	sp, #16
 800c4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	f043 0320 	orr.w	r3, r3, #32
 800c4f4:	6023      	str	r3, [r4, #0]
 800c4f6:	4833      	ldr	r0, [pc, #204]	; (800c5c4 <_printf_i+0x240>)
 800c4f8:	2778      	movs	r7, #120	; 0x78
 800c4fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	6829      	ldr	r1, [r5, #0]
 800c502:	061f      	lsls	r7, r3, #24
 800c504:	f851 6b04 	ldr.w	r6, [r1], #4
 800c508:	d402      	bmi.n	800c510 <_printf_i+0x18c>
 800c50a:	065f      	lsls	r7, r3, #25
 800c50c:	bf48      	it	mi
 800c50e:	b2b6      	uxthmi	r6, r6
 800c510:	07df      	lsls	r7, r3, #31
 800c512:	bf48      	it	mi
 800c514:	f043 0320 	orrmi.w	r3, r3, #32
 800c518:	6029      	str	r1, [r5, #0]
 800c51a:	bf48      	it	mi
 800c51c:	6023      	strmi	r3, [r4, #0]
 800c51e:	b91e      	cbnz	r6, 800c528 <_printf_i+0x1a4>
 800c520:	6823      	ldr	r3, [r4, #0]
 800c522:	f023 0320 	bic.w	r3, r3, #32
 800c526:	6023      	str	r3, [r4, #0]
 800c528:	2310      	movs	r3, #16
 800c52a:	e7a7      	b.n	800c47c <_printf_i+0xf8>
 800c52c:	4824      	ldr	r0, [pc, #144]	; (800c5c0 <_printf_i+0x23c>)
 800c52e:	e7e4      	b.n	800c4fa <_printf_i+0x176>
 800c530:	4615      	mov	r5, r2
 800c532:	e7bd      	b.n	800c4b0 <_printf_i+0x12c>
 800c534:	682b      	ldr	r3, [r5, #0]
 800c536:	6826      	ldr	r6, [r4, #0]
 800c538:	6961      	ldr	r1, [r4, #20]
 800c53a:	1d18      	adds	r0, r3, #4
 800c53c:	6028      	str	r0, [r5, #0]
 800c53e:	0635      	lsls	r5, r6, #24
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	d501      	bpl.n	800c548 <_printf_i+0x1c4>
 800c544:	6019      	str	r1, [r3, #0]
 800c546:	e002      	b.n	800c54e <_printf_i+0x1ca>
 800c548:	0670      	lsls	r0, r6, #25
 800c54a:	d5fb      	bpl.n	800c544 <_printf_i+0x1c0>
 800c54c:	8019      	strh	r1, [r3, #0]
 800c54e:	2300      	movs	r3, #0
 800c550:	6123      	str	r3, [r4, #16]
 800c552:	4615      	mov	r5, r2
 800c554:	e7bc      	b.n	800c4d0 <_printf_i+0x14c>
 800c556:	682b      	ldr	r3, [r5, #0]
 800c558:	1d1a      	adds	r2, r3, #4
 800c55a:	602a      	str	r2, [r5, #0]
 800c55c:	681d      	ldr	r5, [r3, #0]
 800c55e:	6862      	ldr	r2, [r4, #4]
 800c560:	2100      	movs	r1, #0
 800c562:	4628      	mov	r0, r5
 800c564:	f7f3 fe34 	bl	80001d0 <memchr>
 800c568:	b108      	cbz	r0, 800c56e <_printf_i+0x1ea>
 800c56a:	1b40      	subs	r0, r0, r5
 800c56c:	6060      	str	r0, [r4, #4]
 800c56e:	6863      	ldr	r3, [r4, #4]
 800c570:	6123      	str	r3, [r4, #16]
 800c572:	2300      	movs	r3, #0
 800c574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c578:	e7aa      	b.n	800c4d0 <_printf_i+0x14c>
 800c57a:	6923      	ldr	r3, [r4, #16]
 800c57c:	462a      	mov	r2, r5
 800c57e:	4649      	mov	r1, r9
 800c580:	4640      	mov	r0, r8
 800c582:	47d0      	blx	sl
 800c584:	3001      	adds	r0, #1
 800c586:	d0ad      	beq.n	800c4e4 <_printf_i+0x160>
 800c588:	6823      	ldr	r3, [r4, #0]
 800c58a:	079b      	lsls	r3, r3, #30
 800c58c:	d413      	bmi.n	800c5b6 <_printf_i+0x232>
 800c58e:	68e0      	ldr	r0, [r4, #12]
 800c590:	9b03      	ldr	r3, [sp, #12]
 800c592:	4298      	cmp	r0, r3
 800c594:	bfb8      	it	lt
 800c596:	4618      	movlt	r0, r3
 800c598:	e7a6      	b.n	800c4e8 <_printf_i+0x164>
 800c59a:	2301      	movs	r3, #1
 800c59c:	4632      	mov	r2, r6
 800c59e:	4649      	mov	r1, r9
 800c5a0:	4640      	mov	r0, r8
 800c5a2:	47d0      	blx	sl
 800c5a4:	3001      	adds	r0, #1
 800c5a6:	d09d      	beq.n	800c4e4 <_printf_i+0x160>
 800c5a8:	3501      	adds	r5, #1
 800c5aa:	68e3      	ldr	r3, [r4, #12]
 800c5ac:	9903      	ldr	r1, [sp, #12]
 800c5ae:	1a5b      	subs	r3, r3, r1
 800c5b0:	42ab      	cmp	r3, r5
 800c5b2:	dcf2      	bgt.n	800c59a <_printf_i+0x216>
 800c5b4:	e7eb      	b.n	800c58e <_printf_i+0x20a>
 800c5b6:	2500      	movs	r5, #0
 800c5b8:	f104 0619 	add.w	r6, r4, #25
 800c5bc:	e7f5      	b.n	800c5aa <_printf_i+0x226>
 800c5be:	bf00      	nop
 800c5c0:	080106e6 	.word	0x080106e6
 800c5c4:	080106f7 	.word	0x080106f7

0800c5c8 <siprintf>:
 800c5c8:	b40e      	push	{r1, r2, r3}
 800c5ca:	b500      	push	{lr}
 800c5cc:	b09c      	sub	sp, #112	; 0x70
 800c5ce:	ab1d      	add	r3, sp, #116	; 0x74
 800c5d0:	9002      	str	r0, [sp, #8]
 800c5d2:	9006      	str	r0, [sp, #24]
 800c5d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5d8:	4809      	ldr	r0, [pc, #36]	; (800c600 <siprintf+0x38>)
 800c5da:	9107      	str	r1, [sp, #28]
 800c5dc:	9104      	str	r1, [sp, #16]
 800c5de:	4909      	ldr	r1, [pc, #36]	; (800c604 <siprintf+0x3c>)
 800c5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5e4:	9105      	str	r1, [sp, #20]
 800c5e6:	6800      	ldr	r0, [r0, #0]
 800c5e8:	9301      	str	r3, [sp, #4]
 800c5ea:	a902      	add	r1, sp, #8
 800c5ec:	f000 ffd8 	bl	800d5a0 <_svfiprintf_r>
 800c5f0:	9b02      	ldr	r3, [sp, #8]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	701a      	strb	r2, [r3, #0]
 800c5f6:	b01c      	add	sp, #112	; 0x70
 800c5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5fc:	b003      	add	sp, #12
 800c5fe:	4770      	bx	lr
 800c600:	20000070 	.word	0x20000070
 800c604:	ffff0208 	.word	0xffff0208

0800c608 <std>:
 800c608:	2300      	movs	r3, #0
 800c60a:	b510      	push	{r4, lr}
 800c60c:	4604      	mov	r4, r0
 800c60e:	e9c0 3300 	strd	r3, r3, [r0]
 800c612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c616:	6083      	str	r3, [r0, #8]
 800c618:	8181      	strh	r1, [r0, #12]
 800c61a:	6643      	str	r3, [r0, #100]	; 0x64
 800c61c:	81c2      	strh	r2, [r0, #14]
 800c61e:	6183      	str	r3, [r0, #24]
 800c620:	4619      	mov	r1, r3
 800c622:	2208      	movs	r2, #8
 800c624:	305c      	adds	r0, #92	; 0x5c
 800c626:	f000 f89f 	bl	800c768 <memset>
 800c62a:	4b05      	ldr	r3, [pc, #20]	; (800c640 <std+0x38>)
 800c62c:	6263      	str	r3, [r4, #36]	; 0x24
 800c62e:	4b05      	ldr	r3, [pc, #20]	; (800c644 <std+0x3c>)
 800c630:	62a3      	str	r3, [r4, #40]	; 0x28
 800c632:	4b05      	ldr	r3, [pc, #20]	; (800c648 <std+0x40>)
 800c634:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c636:	4b05      	ldr	r3, [pc, #20]	; (800c64c <std+0x44>)
 800c638:	6224      	str	r4, [r4, #32]
 800c63a:	6323      	str	r3, [r4, #48]	; 0x30
 800c63c:	bd10      	pop	{r4, pc}
 800c63e:	bf00      	nop
 800c640:	0800e159 	.word	0x0800e159
 800c644:	0800e17b 	.word	0x0800e17b
 800c648:	0800e1b3 	.word	0x0800e1b3
 800c64c:	0800e1d7 	.word	0x0800e1d7

0800c650 <stdio_exit_handler>:
 800c650:	4a02      	ldr	r2, [pc, #8]	; (800c65c <stdio_exit_handler+0xc>)
 800c652:	4903      	ldr	r1, [pc, #12]	; (800c660 <stdio_exit_handler+0x10>)
 800c654:	4803      	ldr	r0, [pc, #12]	; (800c664 <stdio_exit_handler+0x14>)
 800c656:	f000 b869 	b.w	800c72c <_fwalk_sglue>
 800c65a:	bf00      	nop
 800c65c:	20000018 	.word	0x20000018
 800c660:	0800d9f9 	.word	0x0800d9f9
 800c664:	20000024 	.word	0x20000024

0800c668 <cleanup_stdio>:
 800c668:	6841      	ldr	r1, [r0, #4]
 800c66a:	4b0c      	ldr	r3, [pc, #48]	; (800c69c <cleanup_stdio+0x34>)
 800c66c:	4299      	cmp	r1, r3
 800c66e:	b510      	push	{r4, lr}
 800c670:	4604      	mov	r4, r0
 800c672:	d001      	beq.n	800c678 <cleanup_stdio+0x10>
 800c674:	f001 f9c0 	bl	800d9f8 <_fflush_r>
 800c678:	68a1      	ldr	r1, [r4, #8]
 800c67a:	4b09      	ldr	r3, [pc, #36]	; (800c6a0 <cleanup_stdio+0x38>)
 800c67c:	4299      	cmp	r1, r3
 800c67e:	d002      	beq.n	800c686 <cleanup_stdio+0x1e>
 800c680:	4620      	mov	r0, r4
 800c682:	f001 f9b9 	bl	800d9f8 <_fflush_r>
 800c686:	68e1      	ldr	r1, [r4, #12]
 800c688:	4b06      	ldr	r3, [pc, #24]	; (800c6a4 <cleanup_stdio+0x3c>)
 800c68a:	4299      	cmp	r1, r3
 800c68c:	d004      	beq.n	800c698 <cleanup_stdio+0x30>
 800c68e:	4620      	mov	r0, r4
 800c690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c694:	f001 b9b0 	b.w	800d9f8 <_fflush_r>
 800c698:	bd10      	pop	{r4, pc}
 800c69a:	bf00      	nop
 800c69c:	2000526c 	.word	0x2000526c
 800c6a0:	200052d4 	.word	0x200052d4
 800c6a4:	2000533c 	.word	0x2000533c

0800c6a8 <global_stdio_init.part.0>:
 800c6a8:	b510      	push	{r4, lr}
 800c6aa:	4b0b      	ldr	r3, [pc, #44]	; (800c6d8 <global_stdio_init.part.0+0x30>)
 800c6ac:	4c0b      	ldr	r4, [pc, #44]	; (800c6dc <global_stdio_init.part.0+0x34>)
 800c6ae:	4a0c      	ldr	r2, [pc, #48]	; (800c6e0 <global_stdio_init.part.0+0x38>)
 800c6b0:	601a      	str	r2, [r3, #0]
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	2104      	movs	r1, #4
 800c6b8:	f7ff ffa6 	bl	800c608 <std>
 800c6bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	2109      	movs	r1, #9
 800c6c4:	f7ff ffa0 	bl	800c608 <std>
 800c6c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c6cc:	2202      	movs	r2, #2
 800c6ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6d2:	2112      	movs	r1, #18
 800c6d4:	f7ff bf98 	b.w	800c608 <std>
 800c6d8:	200053a4 	.word	0x200053a4
 800c6dc:	2000526c 	.word	0x2000526c
 800c6e0:	0800c651 	.word	0x0800c651

0800c6e4 <__sfp_lock_acquire>:
 800c6e4:	4801      	ldr	r0, [pc, #4]	; (800c6ec <__sfp_lock_acquire+0x8>)
 800c6e6:	f000 b875 	b.w	800c7d4 <__retarget_lock_acquire_recursive>
 800c6ea:	bf00      	nop
 800c6ec:	200053a9 	.word	0x200053a9

0800c6f0 <__sfp_lock_release>:
 800c6f0:	4801      	ldr	r0, [pc, #4]	; (800c6f8 <__sfp_lock_release+0x8>)
 800c6f2:	f000 b870 	b.w	800c7d6 <__retarget_lock_release_recursive>
 800c6f6:	bf00      	nop
 800c6f8:	200053a9 	.word	0x200053a9

0800c6fc <__sinit>:
 800c6fc:	b510      	push	{r4, lr}
 800c6fe:	4604      	mov	r4, r0
 800c700:	f7ff fff0 	bl	800c6e4 <__sfp_lock_acquire>
 800c704:	6a23      	ldr	r3, [r4, #32]
 800c706:	b11b      	cbz	r3, 800c710 <__sinit+0x14>
 800c708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c70c:	f7ff bff0 	b.w	800c6f0 <__sfp_lock_release>
 800c710:	4b04      	ldr	r3, [pc, #16]	; (800c724 <__sinit+0x28>)
 800c712:	6223      	str	r3, [r4, #32]
 800c714:	4b04      	ldr	r3, [pc, #16]	; (800c728 <__sinit+0x2c>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1f5      	bne.n	800c708 <__sinit+0xc>
 800c71c:	f7ff ffc4 	bl	800c6a8 <global_stdio_init.part.0>
 800c720:	e7f2      	b.n	800c708 <__sinit+0xc>
 800c722:	bf00      	nop
 800c724:	0800c669 	.word	0x0800c669
 800c728:	200053a4 	.word	0x200053a4

0800c72c <_fwalk_sglue>:
 800c72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c730:	4607      	mov	r7, r0
 800c732:	4688      	mov	r8, r1
 800c734:	4614      	mov	r4, r2
 800c736:	2600      	movs	r6, #0
 800c738:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c73c:	f1b9 0901 	subs.w	r9, r9, #1
 800c740:	d505      	bpl.n	800c74e <_fwalk_sglue+0x22>
 800c742:	6824      	ldr	r4, [r4, #0]
 800c744:	2c00      	cmp	r4, #0
 800c746:	d1f7      	bne.n	800c738 <_fwalk_sglue+0xc>
 800c748:	4630      	mov	r0, r6
 800c74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c74e:	89ab      	ldrh	r3, [r5, #12]
 800c750:	2b01      	cmp	r3, #1
 800c752:	d907      	bls.n	800c764 <_fwalk_sglue+0x38>
 800c754:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c758:	3301      	adds	r3, #1
 800c75a:	d003      	beq.n	800c764 <_fwalk_sglue+0x38>
 800c75c:	4629      	mov	r1, r5
 800c75e:	4638      	mov	r0, r7
 800c760:	47c0      	blx	r8
 800c762:	4306      	orrs	r6, r0
 800c764:	3568      	adds	r5, #104	; 0x68
 800c766:	e7e9      	b.n	800c73c <_fwalk_sglue+0x10>

0800c768 <memset>:
 800c768:	4402      	add	r2, r0
 800c76a:	4603      	mov	r3, r0
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d100      	bne.n	800c772 <memset+0xa>
 800c770:	4770      	bx	lr
 800c772:	f803 1b01 	strb.w	r1, [r3], #1
 800c776:	e7f9      	b.n	800c76c <memset+0x4>

0800c778 <_localeconv_r>:
 800c778:	4800      	ldr	r0, [pc, #0]	; (800c77c <_localeconv_r+0x4>)
 800c77a:	4770      	bx	lr
 800c77c:	20000164 	.word	0x20000164

0800c780 <__errno>:
 800c780:	4b01      	ldr	r3, [pc, #4]	; (800c788 <__errno+0x8>)
 800c782:	6818      	ldr	r0, [r3, #0]
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop
 800c788:	20000070 	.word	0x20000070

0800c78c <__libc_init_array>:
 800c78c:	b570      	push	{r4, r5, r6, lr}
 800c78e:	4d0d      	ldr	r5, [pc, #52]	; (800c7c4 <__libc_init_array+0x38>)
 800c790:	4c0d      	ldr	r4, [pc, #52]	; (800c7c8 <__libc_init_array+0x3c>)
 800c792:	1b64      	subs	r4, r4, r5
 800c794:	10a4      	asrs	r4, r4, #2
 800c796:	2600      	movs	r6, #0
 800c798:	42a6      	cmp	r6, r4
 800c79a:	d109      	bne.n	800c7b0 <__libc_init_array+0x24>
 800c79c:	4d0b      	ldr	r5, [pc, #44]	; (800c7cc <__libc_init_array+0x40>)
 800c79e:	4c0c      	ldr	r4, [pc, #48]	; (800c7d0 <__libc_init_array+0x44>)
 800c7a0:	f003 f9b2 	bl	800fb08 <_init>
 800c7a4:	1b64      	subs	r4, r4, r5
 800c7a6:	10a4      	asrs	r4, r4, #2
 800c7a8:	2600      	movs	r6, #0
 800c7aa:	42a6      	cmp	r6, r4
 800c7ac:	d105      	bne.n	800c7ba <__libc_init_array+0x2e>
 800c7ae:	bd70      	pop	{r4, r5, r6, pc}
 800c7b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7b4:	4798      	blx	r3
 800c7b6:	3601      	adds	r6, #1
 800c7b8:	e7ee      	b.n	800c798 <__libc_init_array+0xc>
 800c7ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7be:	4798      	blx	r3
 800c7c0:	3601      	adds	r6, #1
 800c7c2:	e7f2      	b.n	800c7aa <__libc_init_array+0x1e>
 800c7c4:	08010c28 	.word	0x08010c28
 800c7c8:	08010c28 	.word	0x08010c28
 800c7cc:	08010c28 	.word	0x08010c28
 800c7d0:	08010c2c 	.word	0x08010c2c

0800c7d4 <__retarget_lock_acquire_recursive>:
 800c7d4:	4770      	bx	lr

0800c7d6 <__retarget_lock_release_recursive>:
 800c7d6:	4770      	bx	lr

0800c7d8 <memcpy>:
 800c7d8:	440a      	add	r2, r1
 800c7da:	4291      	cmp	r1, r2
 800c7dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c7e0:	d100      	bne.n	800c7e4 <memcpy+0xc>
 800c7e2:	4770      	bx	lr
 800c7e4:	b510      	push	{r4, lr}
 800c7e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7ee:	4291      	cmp	r1, r2
 800c7f0:	d1f9      	bne.n	800c7e6 <memcpy+0xe>
 800c7f2:	bd10      	pop	{r4, pc}

0800c7f4 <quorem>:
 800c7f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f8:	6903      	ldr	r3, [r0, #16]
 800c7fa:	690c      	ldr	r4, [r1, #16]
 800c7fc:	42a3      	cmp	r3, r4
 800c7fe:	4607      	mov	r7, r0
 800c800:	db7e      	blt.n	800c900 <quorem+0x10c>
 800c802:	3c01      	subs	r4, #1
 800c804:	f101 0814 	add.w	r8, r1, #20
 800c808:	f100 0514 	add.w	r5, r0, #20
 800c80c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c810:	9301      	str	r3, [sp, #4]
 800c812:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c816:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c81a:	3301      	adds	r3, #1
 800c81c:	429a      	cmp	r2, r3
 800c81e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c822:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c826:	fbb2 f6f3 	udiv	r6, r2, r3
 800c82a:	d331      	bcc.n	800c890 <quorem+0x9c>
 800c82c:	f04f 0e00 	mov.w	lr, #0
 800c830:	4640      	mov	r0, r8
 800c832:	46ac      	mov	ip, r5
 800c834:	46f2      	mov	sl, lr
 800c836:	f850 2b04 	ldr.w	r2, [r0], #4
 800c83a:	b293      	uxth	r3, r2
 800c83c:	fb06 e303 	mla	r3, r6, r3, lr
 800c840:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c844:	0c1a      	lsrs	r2, r3, #16
 800c846:	b29b      	uxth	r3, r3
 800c848:	ebaa 0303 	sub.w	r3, sl, r3
 800c84c:	f8dc a000 	ldr.w	sl, [ip]
 800c850:	fa13 f38a 	uxtah	r3, r3, sl
 800c854:	fb06 220e 	mla	r2, r6, lr, r2
 800c858:	9300      	str	r3, [sp, #0]
 800c85a:	9b00      	ldr	r3, [sp, #0]
 800c85c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c860:	b292      	uxth	r2, r2
 800c862:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c866:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c86a:	f8bd 3000 	ldrh.w	r3, [sp]
 800c86e:	4581      	cmp	r9, r0
 800c870:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c874:	f84c 3b04 	str.w	r3, [ip], #4
 800c878:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c87c:	d2db      	bcs.n	800c836 <quorem+0x42>
 800c87e:	f855 300b 	ldr.w	r3, [r5, fp]
 800c882:	b92b      	cbnz	r3, 800c890 <quorem+0x9c>
 800c884:	9b01      	ldr	r3, [sp, #4]
 800c886:	3b04      	subs	r3, #4
 800c888:	429d      	cmp	r5, r3
 800c88a:	461a      	mov	r2, r3
 800c88c:	d32c      	bcc.n	800c8e8 <quorem+0xf4>
 800c88e:	613c      	str	r4, [r7, #16]
 800c890:	4638      	mov	r0, r7
 800c892:	f001 fb61 	bl	800df58 <__mcmp>
 800c896:	2800      	cmp	r0, #0
 800c898:	db22      	blt.n	800c8e0 <quorem+0xec>
 800c89a:	3601      	adds	r6, #1
 800c89c:	4629      	mov	r1, r5
 800c89e:	2000      	movs	r0, #0
 800c8a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c8a4:	f8d1 c000 	ldr.w	ip, [r1]
 800c8a8:	b293      	uxth	r3, r2
 800c8aa:	1ac3      	subs	r3, r0, r3
 800c8ac:	0c12      	lsrs	r2, r2, #16
 800c8ae:	fa13 f38c 	uxtah	r3, r3, ip
 800c8b2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c8b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8c0:	45c1      	cmp	r9, r8
 800c8c2:	f841 3b04 	str.w	r3, [r1], #4
 800c8c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c8ca:	d2e9      	bcs.n	800c8a0 <quorem+0xac>
 800c8cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8d4:	b922      	cbnz	r2, 800c8e0 <quorem+0xec>
 800c8d6:	3b04      	subs	r3, #4
 800c8d8:	429d      	cmp	r5, r3
 800c8da:	461a      	mov	r2, r3
 800c8dc:	d30a      	bcc.n	800c8f4 <quorem+0x100>
 800c8de:	613c      	str	r4, [r7, #16]
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	b003      	add	sp, #12
 800c8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e8:	6812      	ldr	r2, [r2, #0]
 800c8ea:	3b04      	subs	r3, #4
 800c8ec:	2a00      	cmp	r2, #0
 800c8ee:	d1ce      	bne.n	800c88e <quorem+0x9a>
 800c8f0:	3c01      	subs	r4, #1
 800c8f2:	e7c9      	b.n	800c888 <quorem+0x94>
 800c8f4:	6812      	ldr	r2, [r2, #0]
 800c8f6:	3b04      	subs	r3, #4
 800c8f8:	2a00      	cmp	r2, #0
 800c8fa:	d1f0      	bne.n	800c8de <quorem+0xea>
 800c8fc:	3c01      	subs	r4, #1
 800c8fe:	e7eb      	b.n	800c8d8 <quorem+0xe4>
 800c900:	2000      	movs	r0, #0
 800c902:	e7ee      	b.n	800c8e2 <quorem+0xee>
 800c904:	0000      	movs	r0, r0
	...

0800c908 <_dtoa_r>:
 800c908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c90c:	ed2d 8b04 	vpush	{d8-d9}
 800c910:	69c5      	ldr	r5, [r0, #28]
 800c912:	b093      	sub	sp, #76	; 0x4c
 800c914:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c918:	ec57 6b10 	vmov	r6, r7, d0
 800c91c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c920:	9107      	str	r1, [sp, #28]
 800c922:	4604      	mov	r4, r0
 800c924:	920a      	str	r2, [sp, #40]	; 0x28
 800c926:	930d      	str	r3, [sp, #52]	; 0x34
 800c928:	b975      	cbnz	r5, 800c948 <_dtoa_r+0x40>
 800c92a:	2010      	movs	r0, #16
 800c92c:	f000 ff36 	bl	800d79c <malloc>
 800c930:	4602      	mov	r2, r0
 800c932:	61e0      	str	r0, [r4, #28]
 800c934:	b920      	cbnz	r0, 800c940 <_dtoa_r+0x38>
 800c936:	4bae      	ldr	r3, [pc, #696]	; (800cbf0 <_dtoa_r+0x2e8>)
 800c938:	21ef      	movs	r1, #239	; 0xef
 800c93a:	48ae      	ldr	r0, [pc, #696]	; (800cbf4 <_dtoa_r+0x2ec>)
 800c93c:	f001 fcee 	bl	800e31c <__assert_func>
 800c940:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c944:	6005      	str	r5, [r0, #0]
 800c946:	60c5      	str	r5, [r0, #12]
 800c948:	69e3      	ldr	r3, [r4, #28]
 800c94a:	6819      	ldr	r1, [r3, #0]
 800c94c:	b151      	cbz	r1, 800c964 <_dtoa_r+0x5c>
 800c94e:	685a      	ldr	r2, [r3, #4]
 800c950:	604a      	str	r2, [r1, #4]
 800c952:	2301      	movs	r3, #1
 800c954:	4093      	lsls	r3, r2
 800c956:	608b      	str	r3, [r1, #8]
 800c958:	4620      	mov	r0, r4
 800c95a:	f001 f8c1 	bl	800dae0 <_Bfree>
 800c95e:	69e3      	ldr	r3, [r4, #28]
 800c960:	2200      	movs	r2, #0
 800c962:	601a      	str	r2, [r3, #0]
 800c964:	1e3b      	subs	r3, r7, #0
 800c966:	bfbb      	ittet	lt
 800c968:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c96c:	9303      	strlt	r3, [sp, #12]
 800c96e:	2300      	movge	r3, #0
 800c970:	2201      	movlt	r2, #1
 800c972:	bfac      	ite	ge
 800c974:	f8c8 3000 	strge.w	r3, [r8]
 800c978:	f8c8 2000 	strlt.w	r2, [r8]
 800c97c:	4b9e      	ldr	r3, [pc, #632]	; (800cbf8 <_dtoa_r+0x2f0>)
 800c97e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c982:	ea33 0308 	bics.w	r3, r3, r8
 800c986:	d11b      	bne.n	800c9c0 <_dtoa_r+0xb8>
 800c988:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c98a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c98e:	6013      	str	r3, [r2, #0]
 800c990:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c994:	4333      	orrs	r3, r6
 800c996:	f000 8593 	beq.w	800d4c0 <_dtoa_r+0xbb8>
 800c99a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c99c:	b963      	cbnz	r3, 800c9b8 <_dtoa_r+0xb0>
 800c99e:	4b97      	ldr	r3, [pc, #604]	; (800cbfc <_dtoa_r+0x2f4>)
 800c9a0:	e027      	b.n	800c9f2 <_dtoa_r+0xea>
 800c9a2:	4b97      	ldr	r3, [pc, #604]	; (800cc00 <_dtoa_r+0x2f8>)
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	3308      	adds	r3, #8
 800c9a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c9aa:	6013      	str	r3, [r2, #0]
 800c9ac:	9800      	ldr	r0, [sp, #0]
 800c9ae:	b013      	add	sp, #76	; 0x4c
 800c9b0:	ecbd 8b04 	vpop	{d8-d9}
 800c9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b8:	4b90      	ldr	r3, [pc, #576]	; (800cbfc <_dtoa_r+0x2f4>)
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	3303      	adds	r3, #3
 800c9be:	e7f3      	b.n	800c9a8 <_dtoa_r+0xa0>
 800c9c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	ec51 0b17 	vmov	r0, r1, d7
 800c9ca:	eeb0 8a47 	vmov.f32	s16, s14
 800c9ce:	eef0 8a67 	vmov.f32	s17, s15
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	f7f4 f878 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9d8:	4681      	mov	r9, r0
 800c9da:	b160      	cbz	r0, 800c9f6 <_dtoa_r+0xee>
 800c9dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9de:	2301      	movs	r3, #1
 800c9e0:	6013      	str	r3, [r2, #0]
 800c9e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f000 8568 	beq.w	800d4ba <_dtoa_r+0xbb2>
 800c9ea:	4b86      	ldr	r3, [pc, #536]	; (800cc04 <_dtoa_r+0x2fc>)
 800c9ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c9ee:	6013      	str	r3, [r2, #0]
 800c9f0:	3b01      	subs	r3, #1
 800c9f2:	9300      	str	r3, [sp, #0]
 800c9f4:	e7da      	b.n	800c9ac <_dtoa_r+0xa4>
 800c9f6:	aa10      	add	r2, sp, #64	; 0x40
 800c9f8:	a911      	add	r1, sp, #68	; 0x44
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	eeb0 0a48 	vmov.f32	s0, s16
 800ca00:	eef0 0a68 	vmov.f32	s1, s17
 800ca04:	f001 fb4e 	bl	800e0a4 <__d2b>
 800ca08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ca0c:	4682      	mov	sl, r0
 800ca0e:	2d00      	cmp	r5, #0
 800ca10:	d07f      	beq.n	800cb12 <_dtoa_r+0x20a>
 800ca12:	ee18 3a90 	vmov	r3, s17
 800ca16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca1a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ca1e:	ec51 0b18 	vmov	r0, r1, d8
 800ca22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ca26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ca2a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ca2e:	4619      	mov	r1, r3
 800ca30:	2200      	movs	r2, #0
 800ca32:	4b75      	ldr	r3, [pc, #468]	; (800cc08 <_dtoa_r+0x300>)
 800ca34:	f7f3 fc28 	bl	8000288 <__aeabi_dsub>
 800ca38:	a367      	add	r3, pc, #412	; (adr r3, 800cbd8 <_dtoa_r+0x2d0>)
 800ca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3e:	f7f3 fddb 	bl	80005f8 <__aeabi_dmul>
 800ca42:	a367      	add	r3, pc, #412	; (adr r3, 800cbe0 <_dtoa_r+0x2d8>)
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	f7f3 fc20 	bl	800028c <__adddf3>
 800ca4c:	4606      	mov	r6, r0
 800ca4e:	4628      	mov	r0, r5
 800ca50:	460f      	mov	r7, r1
 800ca52:	f7f3 fd67 	bl	8000524 <__aeabi_i2d>
 800ca56:	a364      	add	r3, pc, #400	; (adr r3, 800cbe8 <_dtoa_r+0x2e0>)
 800ca58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5c:	f7f3 fdcc 	bl	80005f8 <__aeabi_dmul>
 800ca60:	4602      	mov	r2, r0
 800ca62:	460b      	mov	r3, r1
 800ca64:	4630      	mov	r0, r6
 800ca66:	4639      	mov	r1, r7
 800ca68:	f7f3 fc10 	bl	800028c <__adddf3>
 800ca6c:	4606      	mov	r6, r0
 800ca6e:	460f      	mov	r7, r1
 800ca70:	f7f4 f872 	bl	8000b58 <__aeabi_d2iz>
 800ca74:	2200      	movs	r2, #0
 800ca76:	4683      	mov	fp, r0
 800ca78:	2300      	movs	r3, #0
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	4639      	mov	r1, r7
 800ca7e:	f7f4 f82d 	bl	8000adc <__aeabi_dcmplt>
 800ca82:	b148      	cbz	r0, 800ca98 <_dtoa_r+0x190>
 800ca84:	4658      	mov	r0, fp
 800ca86:	f7f3 fd4d 	bl	8000524 <__aeabi_i2d>
 800ca8a:	4632      	mov	r2, r6
 800ca8c:	463b      	mov	r3, r7
 800ca8e:	f7f4 f81b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca92:	b908      	cbnz	r0, 800ca98 <_dtoa_r+0x190>
 800ca94:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ca98:	f1bb 0f16 	cmp.w	fp, #22
 800ca9c:	d857      	bhi.n	800cb4e <_dtoa_r+0x246>
 800ca9e:	4b5b      	ldr	r3, [pc, #364]	; (800cc0c <_dtoa_r+0x304>)
 800caa0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800caa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa8:	ec51 0b18 	vmov	r0, r1, d8
 800caac:	f7f4 f816 	bl	8000adc <__aeabi_dcmplt>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d04e      	beq.n	800cb52 <_dtoa_r+0x24a>
 800cab4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cab8:	2300      	movs	r3, #0
 800caba:	930c      	str	r3, [sp, #48]	; 0x30
 800cabc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cabe:	1b5b      	subs	r3, r3, r5
 800cac0:	1e5a      	subs	r2, r3, #1
 800cac2:	bf45      	ittet	mi
 800cac4:	f1c3 0301 	rsbmi	r3, r3, #1
 800cac8:	9305      	strmi	r3, [sp, #20]
 800caca:	2300      	movpl	r3, #0
 800cacc:	2300      	movmi	r3, #0
 800cace:	9206      	str	r2, [sp, #24]
 800cad0:	bf54      	ite	pl
 800cad2:	9305      	strpl	r3, [sp, #20]
 800cad4:	9306      	strmi	r3, [sp, #24]
 800cad6:	f1bb 0f00 	cmp.w	fp, #0
 800cada:	db3c      	blt.n	800cb56 <_dtoa_r+0x24e>
 800cadc:	9b06      	ldr	r3, [sp, #24]
 800cade:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800cae2:	445b      	add	r3, fp
 800cae4:	9306      	str	r3, [sp, #24]
 800cae6:	2300      	movs	r3, #0
 800cae8:	9308      	str	r3, [sp, #32]
 800caea:	9b07      	ldr	r3, [sp, #28]
 800caec:	2b09      	cmp	r3, #9
 800caee:	d868      	bhi.n	800cbc2 <_dtoa_r+0x2ba>
 800caf0:	2b05      	cmp	r3, #5
 800caf2:	bfc4      	itt	gt
 800caf4:	3b04      	subgt	r3, #4
 800caf6:	9307      	strgt	r3, [sp, #28]
 800caf8:	9b07      	ldr	r3, [sp, #28]
 800cafa:	f1a3 0302 	sub.w	r3, r3, #2
 800cafe:	bfcc      	ite	gt
 800cb00:	2500      	movgt	r5, #0
 800cb02:	2501      	movle	r5, #1
 800cb04:	2b03      	cmp	r3, #3
 800cb06:	f200 8085 	bhi.w	800cc14 <_dtoa_r+0x30c>
 800cb0a:	e8df f003 	tbb	[pc, r3]
 800cb0e:	3b2e      	.short	0x3b2e
 800cb10:	5839      	.short	0x5839
 800cb12:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cb16:	441d      	add	r5, r3
 800cb18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cb1c:	2b20      	cmp	r3, #32
 800cb1e:	bfc1      	itttt	gt
 800cb20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cb24:	fa08 f803 	lslgt.w	r8, r8, r3
 800cb28:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800cb2c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800cb30:	bfd6      	itet	le
 800cb32:	f1c3 0320 	rsble	r3, r3, #32
 800cb36:	ea48 0003 	orrgt.w	r0, r8, r3
 800cb3a:	fa06 f003 	lslle.w	r0, r6, r3
 800cb3e:	f7f3 fce1 	bl	8000504 <__aeabi_ui2d>
 800cb42:	2201      	movs	r2, #1
 800cb44:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800cb48:	3d01      	subs	r5, #1
 800cb4a:	920e      	str	r2, [sp, #56]	; 0x38
 800cb4c:	e76f      	b.n	800ca2e <_dtoa_r+0x126>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e7b3      	b.n	800caba <_dtoa_r+0x1b2>
 800cb52:	900c      	str	r0, [sp, #48]	; 0x30
 800cb54:	e7b2      	b.n	800cabc <_dtoa_r+0x1b4>
 800cb56:	9b05      	ldr	r3, [sp, #20]
 800cb58:	eba3 030b 	sub.w	r3, r3, fp
 800cb5c:	9305      	str	r3, [sp, #20]
 800cb5e:	f1cb 0300 	rsb	r3, fp, #0
 800cb62:	9308      	str	r3, [sp, #32]
 800cb64:	2300      	movs	r3, #0
 800cb66:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb68:	e7bf      	b.n	800caea <_dtoa_r+0x1e2>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	dc52      	bgt.n	800cc1a <_dtoa_r+0x312>
 800cb74:	2301      	movs	r3, #1
 800cb76:	9301      	str	r3, [sp, #4]
 800cb78:	9304      	str	r3, [sp, #16]
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	920a      	str	r2, [sp, #40]	; 0x28
 800cb7e:	e00b      	b.n	800cb98 <_dtoa_r+0x290>
 800cb80:	2301      	movs	r3, #1
 800cb82:	e7f3      	b.n	800cb6c <_dtoa_r+0x264>
 800cb84:	2300      	movs	r3, #0
 800cb86:	9309      	str	r3, [sp, #36]	; 0x24
 800cb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb8a:	445b      	add	r3, fp
 800cb8c:	9301      	str	r3, [sp, #4]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	9304      	str	r3, [sp, #16]
 800cb94:	bfb8      	it	lt
 800cb96:	2301      	movlt	r3, #1
 800cb98:	69e0      	ldr	r0, [r4, #28]
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	2204      	movs	r2, #4
 800cb9e:	f102 0614 	add.w	r6, r2, #20
 800cba2:	429e      	cmp	r6, r3
 800cba4:	d93d      	bls.n	800cc22 <_dtoa_r+0x31a>
 800cba6:	6041      	str	r1, [r0, #4]
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f000 ff59 	bl	800da60 <_Balloc>
 800cbae:	9000      	str	r0, [sp, #0]
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	d139      	bne.n	800cc28 <_dtoa_r+0x320>
 800cbb4:	4b16      	ldr	r3, [pc, #88]	; (800cc10 <_dtoa_r+0x308>)
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	f240 11af 	movw	r1, #431	; 0x1af
 800cbbc:	e6bd      	b.n	800c93a <_dtoa_r+0x32>
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e7e1      	b.n	800cb86 <_dtoa_r+0x27e>
 800cbc2:	2501      	movs	r5, #1
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	9307      	str	r3, [sp, #28]
 800cbc8:	9509      	str	r5, [sp, #36]	; 0x24
 800cbca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbce:	9301      	str	r3, [sp, #4]
 800cbd0:	9304      	str	r3, [sp, #16]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	2312      	movs	r3, #18
 800cbd6:	e7d1      	b.n	800cb7c <_dtoa_r+0x274>
 800cbd8:	636f4361 	.word	0x636f4361
 800cbdc:	3fd287a7 	.word	0x3fd287a7
 800cbe0:	8b60c8b3 	.word	0x8b60c8b3
 800cbe4:	3fc68a28 	.word	0x3fc68a28
 800cbe8:	509f79fb 	.word	0x509f79fb
 800cbec:	3fd34413 	.word	0x3fd34413
 800cbf0:	08010715 	.word	0x08010715
 800cbf4:	0801072c 	.word	0x0801072c
 800cbf8:	7ff00000 	.word	0x7ff00000
 800cbfc:	08010711 	.word	0x08010711
 800cc00:	08010708 	.word	0x08010708
 800cc04:	080106e5 	.word	0x080106e5
 800cc08:	3ff80000 	.word	0x3ff80000
 800cc0c:	08010828 	.word	0x08010828
 800cc10:	08010784 	.word	0x08010784
 800cc14:	2301      	movs	r3, #1
 800cc16:	9309      	str	r3, [sp, #36]	; 0x24
 800cc18:	e7d7      	b.n	800cbca <_dtoa_r+0x2c2>
 800cc1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc1c:	9301      	str	r3, [sp, #4]
 800cc1e:	9304      	str	r3, [sp, #16]
 800cc20:	e7ba      	b.n	800cb98 <_dtoa_r+0x290>
 800cc22:	3101      	adds	r1, #1
 800cc24:	0052      	lsls	r2, r2, #1
 800cc26:	e7ba      	b.n	800cb9e <_dtoa_r+0x296>
 800cc28:	69e3      	ldr	r3, [r4, #28]
 800cc2a:	9a00      	ldr	r2, [sp, #0]
 800cc2c:	601a      	str	r2, [r3, #0]
 800cc2e:	9b04      	ldr	r3, [sp, #16]
 800cc30:	2b0e      	cmp	r3, #14
 800cc32:	f200 80a8 	bhi.w	800cd86 <_dtoa_r+0x47e>
 800cc36:	2d00      	cmp	r5, #0
 800cc38:	f000 80a5 	beq.w	800cd86 <_dtoa_r+0x47e>
 800cc3c:	f1bb 0f00 	cmp.w	fp, #0
 800cc40:	dd38      	ble.n	800ccb4 <_dtoa_r+0x3ac>
 800cc42:	4bc0      	ldr	r3, [pc, #768]	; (800cf44 <_dtoa_r+0x63c>)
 800cc44:	f00b 020f 	and.w	r2, fp, #15
 800cc48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cc50:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cc54:	ea4f 182b 	mov.w	r8, fp, asr #4
 800cc58:	d019      	beq.n	800cc8e <_dtoa_r+0x386>
 800cc5a:	4bbb      	ldr	r3, [pc, #748]	; (800cf48 <_dtoa_r+0x640>)
 800cc5c:	ec51 0b18 	vmov	r0, r1, d8
 800cc60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc64:	f7f3 fdf2 	bl	800084c <__aeabi_ddiv>
 800cc68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc6c:	f008 080f 	and.w	r8, r8, #15
 800cc70:	2503      	movs	r5, #3
 800cc72:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cf48 <_dtoa_r+0x640>
 800cc76:	f1b8 0f00 	cmp.w	r8, #0
 800cc7a:	d10a      	bne.n	800cc92 <_dtoa_r+0x38a>
 800cc7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc80:	4632      	mov	r2, r6
 800cc82:	463b      	mov	r3, r7
 800cc84:	f7f3 fde2 	bl	800084c <__aeabi_ddiv>
 800cc88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc8c:	e02b      	b.n	800cce6 <_dtoa_r+0x3de>
 800cc8e:	2502      	movs	r5, #2
 800cc90:	e7ef      	b.n	800cc72 <_dtoa_r+0x36a>
 800cc92:	f018 0f01 	tst.w	r8, #1
 800cc96:	d008      	beq.n	800ccaa <_dtoa_r+0x3a2>
 800cc98:	4630      	mov	r0, r6
 800cc9a:	4639      	mov	r1, r7
 800cc9c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cca0:	f7f3 fcaa 	bl	80005f8 <__aeabi_dmul>
 800cca4:	3501      	adds	r5, #1
 800cca6:	4606      	mov	r6, r0
 800cca8:	460f      	mov	r7, r1
 800ccaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ccae:	f109 0908 	add.w	r9, r9, #8
 800ccb2:	e7e0      	b.n	800cc76 <_dtoa_r+0x36e>
 800ccb4:	f000 809f 	beq.w	800cdf6 <_dtoa_r+0x4ee>
 800ccb8:	f1cb 0600 	rsb	r6, fp, #0
 800ccbc:	4ba1      	ldr	r3, [pc, #644]	; (800cf44 <_dtoa_r+0x63c>)
 800ccbe:	4fa2      	ldr	r7, [pc, #648]	; (800cf48 <_dtoa_r+0x640>)
 800ccc0:	f006 020f 	and.w	r2, r6, #15
 800ccc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cccc:	ec51 0b18 	vmov	r0, r1, d8
 800ccd0:	f7f3 fc92 	bl	80005f8 <__aeabi_dmul>
 800ccd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccd8:	1136      	asrs	r6, r6, #4
 800ccda:	2300      	movs	r3, #0
 800ccdc:	2502      	movs	r5, #2
 800ccde:	2e00      	cmp	r6, #0
 800cce0:	d17e      	bne.n	800cde0 <_dtoa_r+0x4d8>
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d1d0      	bne.n	800cc88 <_dtoa_r+0x380>
 800cce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cce8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f000 8084 	beq.w	800cdfa <_dtoa_r+0x4f2>
 800ccf2:	4b96      	ldr	r3, [pc, #600]	; (800cf4c <_dtoa_r+0x644>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	4640      	mov	r0, r8
 800ccf8:	4649      	mov	r1, r9
 800ccfa:	f7f3 feef 	bl	8000adc <__aeabi_dcmplt>
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	d07b      	beq.n	800cdfa <_dtoa_r+0x4f2>
 800cd02:	9b04      	ldr	r3, [sp, #16]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d078      	beq.n	800cdfa <_dtoa_r+0x4f2>
 800cd08:	9b01      	ldr	r3, [sp, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	dd39      	ble.n	800cd82 <_dtoa_r+0x47a>
 800cd0e:	4b90      	ldr	r3, [pc, #576]	; (800cf50 <_dtoa_r+0x648>)
 800cd10:	2200      	movs	r2, #0
 800cd12:	4640      	mov	r0, r8
 800cd14:	4649      	mov	r1, r9
 800cd16:	f7f3 fc6f 	bl	80005f8 <__aeabi_dmul>
 800cd1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd1e:	9e01      	ldr	r6, [sp, #4]
 800cd20:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800cd24:	3501      	adds	r5, #1
 800cd26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f7f3 fbfa 	bl	8000524 <__aeabi_i2d>
 800cd30:	4642      	mov	r2, r8
 800cd32:	464b      	mov	r3, r9
 800cd34:	f7f3 fc60 	bl	80005f8 <__aeabi_dmul>
 800cd38:	4b86      	ldr	r3, [pc, #536]	; (800cf54 <_dtoa_r+0x64c>)
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f7f3 faa6 	bl	800028c <__adddf3>
 800cd40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cd44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd48:	9303      	str	r3, [sp, #12]
 800cd4a:	2e00      	cmp	r6, #0
 800cd4c:	d158      	bne.n	800ce00 <_dtoa_r+0x4f8>
 800cd4e:	4b82      	ldr	r3, [pc, #520]	; (800cf58 <_dtoa_r+0x650>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	4640      	mov	r0, r8
 800cd54:	4649      	mov	r1, r9
 800cd56:	f7f3 fa97 	bl	8000288 <__aeabi_dsub>
 800cd5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd5e:	4680      	mov	r8, r0
 800cd60:	4689      	mov	r9, r1
 800cd62:	f7f3 fed9 	bl	8000b18 <__aeabi_dcmpgt>
 800cd66:	2800      	cmp	r0, #0
 800cd68:	f040 8296 	bne.w	800d298 <_dtoa_r+0x990>
 800cd6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cd70:	4640      	mov	r0, r8
 800cd72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd76:	4649      	mov	r1, r9
 800cd78:	f7f3 feb0 	bl	8000adc <__aeabi_dcmplt>
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	f040 8289 	bne.w	800d294 <_dtoa_r+0x98c>
 800cd82:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cd86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	f2c0 814e 	blt.w	800d02a <_dtoa_r+0x722>
 800cd8e:	f1bb 0f0e 	cmp.w	fp, #14
 800cd92:	f300 814a 	bgt.w	800d02a <_dtoa_r+0x722>
 800cd96:	4b6b      	ldr	r3, [pc, #428]	; (800cf44 <_dtoa_r+0x63c>)
 800cd98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cd9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cda0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f280 80dc 	bge.w	800cf60 <_dtoa_r+0x658>
 800cda8:	9b04      	ldr	r3, [sp, #16]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f300 80d8 	bgt.w	800cf60 <_dtoa_r+0x658>
 800cdb0:	f040 826f 	bne.w	800d292 <_dtoa_r+0x98a>
 800cdb4:	4b68      	ldr	r3, [pc, #416]	; (800cf58 <_dtoa_r+0x650>)
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	4640      	mov	r0, r8
 800cdba:	4649      	mov	r1, r9
 800cdbc:	f7f3 fc1c 	bl	80005f8 <__aeabi_dmul>
 800cdc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdc4:	f7f3 fe9e 	bl	8000b04 <__aeabi_dcmpge>
 800cdc8:	9e04      	ldr	r6, [sp, #16]
 800cdca:	4637      	mov	r7, r6
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	f040 8245 	bne.w	800d25c <_dtoa_r+0x954>
 800cdd2:	9d00      	ldr	r5, [sp, #0]
 800cdd4:	2331      	movs	r3, #49	; 0x31
 800cdd6:	f805 3b01 	strb.w	r3, [r5], #1
 800cdda:	f10b 0b01 	add.w	fp, fp, #1
 800cdde:	e241      	b.n	800d264 <_dtoa_r+0x95c>
 800cde0:	07f2      	lsls	r2, r6, #31
 800cde2:	d505      	bpl.n	800cdf0 <_dtoa_r+0x4e8>
 800cde4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cde8:	f7f3 fc06 	bl	80005f8 <__aeabi_dmul>
 800cdec:	3501      	adds	r5, #1
 800cdee:	2301      	movs	r3, #1
 800cdf0:	1076      	asrs	r6, r6, #1
 800cdf2:	3708      	adds	r7, #8
 800cdf4:	e773      	b.n	800ccde <_dtoa_r+0x3d6>
 800cdf6:	2502      	movs	r5, #2
 800cdf8:	e775      	b.n	800cce6 <_dtoa_r+0x3de>
 800cdfa:	9e04      	ldr	r6, [sp, #16]
 800cdfc:	465f      	mov	r7, fp
 800cdfe:	e792      	b.n	800cd26 <_dtoa_r+0x41e>
 800ce00:	9900      	ldr	r1, [sp, #0]
 800ce02:	4b50      	ldr	r3, [pc, #320]	; (800cf44 <_dtoa_r+0x63c>)
 800ce04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce08:	4431      	add	r1, r6
 800ce0a:	9102      	str	r1, [sp, #8]
 800ce0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce0e:	eeb0 9a47 	vmov.f32	s18, s14
 800ce12:	eef0 9a67 	vmov.f32	s19, s15
 800ce16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ce1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ce1e:	2900      	cmp	r1, #0
 800ce20:	d044      	beq.n	800ceac <_dtoa_r+0x5a4>
 800ce22:	494e      	ldr	r1, [pc, #312]	; (800cf5c <_dtoa_r+0x654>)
 800ce24:	2000      	movs	r0, #0
 800ce26:	f7f3 fd11 	bl	800084c <__aeabi_ddiv>
 800ce2a:	ec53 2b19 	vmov	r2, r3, d9
 800ce2e:	f7f3 fa2b 	bl	8000288 <__aeabi_dsub>
 800ce32:	9d00      	ldr	r5, [sp, #0]
 800ce34:	ec41 0b19 	vmov	d9, r0, r1
 800ce38:	4649      	mov	r1, r9
 800ce3a:	4640      	mov	r0, r8
 800ce3c:	f7f3 fe8c 	bl	8000b58 <__aeabi_d2iz>
 800ce40:	4606      	mov	r6, r0
 800ce42:	f7f3 fb6f 	bl	8000524 <__aeabi_i2d>
 800ce46:	4602      	mov	r2, r0
 800ce48:	460b      	mov	r3, r1
 800ce4a:	4640      	mov	r0, r8
 800ce4c:	4649      	mov	r1, r9
 800ce4e:	f7f3 fa1b 	bl	8000288 <__aeabi_dsub>
 800ce52:	3630      	adds	r6, #48	; 0x30
 800ce54:	f805 6b01 	strb.w	r6, [r5], #1
 800ce58:	ec53 2b19 	vmov	r2, r3, d9
 800ce5c:	4680      	mov	r8, r0
 800ce5e:	4689      	mov	r9, r1
 800ce60:	f7f3 fe3c 	bl	8000adc <__aeabi_dcmplt>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d164      	bne.n	800cf32 <_dtoa_r+0x62a>
 800ce68:	4642      	mov	r2, r8
 800ce6a:	464b      	mov	r3, r9
 800ce6c:	4937      	ldr	r1, [pc, #220]	; (800cf4c <_dtoa_r+0x644>)
 800ce6e:	2000      	movs	r0, #0
 800ce70:	f7f3 fa0a 	bl	8000288 <__aeabi_dsub>
 800ce74:	ec53 2b19 	vmov	r2, r3, d9
 800ce78:	f7f3 fe30 	bl	8000adc <__aeabi_dcmplt>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	f040 80b6 	bne.w	800cfee <_dtoa_r+0x6e6>
 800ce82:	9b02      	ldr	r3, [sp, #8]
 800ce84:	429d      	cmp	r5, r3
 800ce86:	f43f af7c 	beq.w	800cd82 <_dtoa_r+0x47a>
 800ce8a:	4b31      	ldr	r3, [pc, #196]	; (800cf50 <_dtoa_r+0x648>)
 800ce8c:	ec51 0b19 	vmov	r0, r1, d9
 800ce90:	2200      	movs	r2, #0
 800ce92:	f7f3 fbb1 	bl	80005f8 <__aeabi_dmul>
 800ce96:	4b2e      	ldr	r3, [pc, #184]	; (800cf50 <_dtoa_r+0x648>)
 800ce98:	ec41 0b19 	vmov	d9, r0, r1
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	4640      	mov	r0, r8
 800cea0:	4649      	mov	r1, r9
 800cea2:	f7f3 fba9 	bl	80005f8 <__aeabi_dmul>
 800cea6:	4680      	mov	r8, r0
 800cea8:	4689      	mov	r9, r1
 800ceaa:	e7c5      	b.n	800ce38 <_dtoa_r+0x530>
 800ceac:	ec51 0b17 	vmov	r0, r1, d7
 800ceb0:	f7f3 fba2 	bl	80005f8 <__aeabi_dmul>
 800ceb4:	9b02      	ldr	r3, [sp, #8]
 800ceb6:	9d00      	ldr	r5, [sp, #0]
 800ceb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ceba:	ec41 0b19 	vmov	d9, r0, r1
 800cebe:	4649      	mov	r1, r9
 800cec0:	4640      	mov	r0, r8
 800cec2:	f7f3 fe49 	bl	8000b58 <__aeabi_d2iz>
 800cec6:	4606      	mov	r6, r0
 800cec8:	f7f3 fb2c 	bl	8000524 <__aeabi_i2d>
 800cecc:	3630      	adds	r6, #48	; 0x30
 800cece:	4602      	mov	r2, r0
 800ced0:	460b      	mov	r3, r1
 800ced2:	4640      	mov	r0, r8
 800ced4:	4649      	mov	r1, r9
 800ced6:	f7f3 f9d7 	bl	8000288 <__aeabi_dsub>
 800ceda:	f805 6b01 	strb.w	r6, [r5], #1
 800cede:	9b02      	ldr	r3, [sp, #8]
 800cee0:	429d      	cmp	r5, r3
 800cee2:	4680      	mov	r8, r0
 800cee4:	4689      	mov	r9, r1
 800cee6:	f04f 0200 	mov.w	r2, #0
 800ceea:	d124      	bne.n	800cf36 <_dtoa_r+0x62e>
 800ceec:	4b1b      	ldr	r3, [pc, #108]	; (800cf5c <_dtoa_r+0x654>)
 800ceee:	ec51 0b19 	vmov	r0, r1, d9
 800cef2:	f7f3 f9cb 	bl	800028c <__adddf3>
 800cef6:	4602      	mov	r2, r0
 800cef8:	460b      	mov	r3, r1
 800cefa:	4640      	mov	r0, r8
 800cefc:	4649      	mov	r1, r9
 800cefe:	f7f3 fe0b 	bl	8000b18 <__aeabi_dcmpgt>
 800cf02:	2800      	cmp	r0, #0
 800cf04:	d173      	bne.n	800cfee <_dtoa_r+0x6e6>
 800cf06:	ec53 2b19 	vmov	r2, r3, d9
 800cf0a:	4914      	ldr	r1, [pc, #80]	; (800cf5c <_dtoa_r+0x654>)
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	f7f3 f9bb 	bl	8000288 <__aeabi_dsub>
 800cf12:	4602      	mov	r2, r0
 800cf14:	460b      	mov	r3, r1
 800cf16:	4640      	mov	r0, r8
 800cf18:	4649      	mov	r1, r9
 800cf1a:	f7f3 fddf 	bl	8000adc <__aeabi_dcmplt>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	f43f af2f 	beq.w	800cd82 <_dtoa_r+0x47a>
 800cf24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cf26:	1e6b      	subs	r3, r5, #1
 800cf28:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cf2e:	2b30      	cmp	r3, #48	; 0x30
 800cf30:	d0f8      	beq.n	800cf24 <_dtoa_r+0x61c>
 800cf32:	46bb      	mov	fp, r7
 800cf34:	e04a      	b.n	800cfcc <_dtoa_r+0x6c4>
 800cf36:	4b06      	ldr	r3, [pc, #24]	; (800cf50 <_dtoa_r+0x648>)
 800cf38:	f7f3 fb5e 	bl	80005f8 <__aeabi_dmul>
 800cf3c:	4680      	mov	r8, r0
 800cf3e:	4689      	mov	r9, r1
 800cf40:	e7bd      	b.n	800cebe <_dtoa_r+0x5b6>
 800cf42:	bf00      	nop
 800cf44:	08010828 	.word	0x08010828
 800cf48:	08010800 	.word	0x08010800
 800cf4c:	3ff00000 	.word	0x3ff00000
 800cf50:	40240000 	.word	0x40240000
 800cf54:	401c0000 	.word	0x401c0000
 800cf58:	40140000 	.word	0x40140000
 800cf5c:	3fe00000 	.word	0x3fe00000
 800cf60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cf64:	9d00      	ldr	r5, [sp, #0]
 800cf66:	4642      	mov	r2, r8
 800cf68:	464b      	mov	r3, r9
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	4639      	mov	r1, r7
 800cf6e:	f7f3 fc6d 	bl	800084c <__aeabi_ddiv>
 800cf72:	f7f3 fdf1 	bl	8000b58 <__aeabi_d2iz>
 800cf76:	9001      	str	r0, [sp, #4]
 800cf78:	f7f3 fad4 	bl	8000524 <__aeabi_i2d>
 800cf7c:	4642      	mov	r2, r8
 800cf7e:	464b      	mov	r3, r9
 800cf80:	f7f3 fb3a 	bl	80005f8 <__aeabi_dmul>
 800cf84:	4602      	mov	r2, r0
 800cf86:	460b      	mov	r3, r1
 800cf88:	4630      	mov	r0, r6
 800cf8a:	4639      	mov	r1, r7
 800cf8c:	f7f3 f97c 	bl	8000288 <__aeabi_dsub>
 800cf90:	9e01      	ldr	r6, [sp, #4]
 800cf92:	9f04      	ldr	r7, [sp, #16]
 800cf94:	3630      	adds	r6, #48	; 0x30
 800cf96:	f805 6b01 	strb.w	r6, [r5], #1
 800cf9a:	9e00      	ldr	r6, [sp, #0]
 800cf9c:	1bae      	subs	r6, r5, r6
 800cf9e:	42b7      	cmp	r7, r6
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	d134      	bne.n	800d010 <_dtoa_r+0x708>
 800cfa6:	f7f3 f971 	bl	800028c <__adddf3>
 800cfaa:	4642      	mov	r2, r8
 800cfac:	464b      	mov	r3, r9
 800cfae:	4606      	mov	r6, r0
 800cfb0:	460f      	mov	r7, r1
 800cfb2:	f7f3 fdb1 	bl	8000b18 <__aeabi_dcmpgt>
 800cfb6:	b9c8      	cbnz	r0, 800cfec <_dtoa_r+0x6e4>
 800cfb8:	4642      	mov	r2, r8
 800cfba:	464b      	mov	r3, r9
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	4639      	mov	r1, r7
 800cfc0:	f7f3 fd82 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfc4:	b110      	cbz	r0, 800cfcc <_dtoa_r+0x6c4>
 800cfc6:	9b01      	ldr	r3, [sp, #4]
 800cfc8:	07db      	lsls	r3, r3, #31
 800cfca:	d40f      	bmi.n	800cfec <_dtoa_r+0x6e4>
 800cfcc:	4651      	mov	r1, sl
 800cfce:	4620      	mov	r0, r4
 800cfd0:	f000 fd86 	bl	800dae0 <_Bfree>
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cfd8:	702b      	strb	r3, [r5, #0]
 800cfda:	f10b 0301 	add.w	r3, fp, #1
 800cfde:	6013      	str	r3, [r2, #0]
 800cfe0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	f43f ace2 	beq.w	800c9ac <_dtoa_r+0xa4>
 800cfe8:	601d      	str	r5, [r3, #0]
 800cfea:	e4df      	b.n	800c9ac <_dtoa_r+0xa4>
 800cfec:	465f      	mov	r7, fp
 800cfee:	462b      	mov	r3, r5
 800cff0:	461d      	mov	r5, r3
 800cff2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cff6:	2a39      	cmp	r2, #57	; 0x39
 800cff8:	d106      	bne.n	800d008 <_dtoa_r+0x700>
 800cffa:	9a00      	ldr	r2, [sp, #0]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d1f7      	bne.n	800cff0 <_dtoa_r+0x6e8>
 800d000:	9900      	ldr	r1, [sp, #0]
 800d002:	2230      	movs	r2, #48	; 0x30
 800d004:	3701      	adds	r7, #1
 800d006:	700a      	strb	r2, [r1, #0]
 800d008:	781a      	ldrb	r2, [r3, #0]
 800d00a:	3201      	adds	r2, #1
 800d00c:	701a      	strb	r2, [r3, #0]
 800d00e:	e790      	b.n	800cf32 <_dtoa_r+0x62a>
 800d010:	4ba3      	ldr	r3, [pc, #652]	; (800d2a0 <_dtoa_r+0x998>)
 800d012:	2200      	movs	r2, #0
 800d014:	f7f3 faf0 	bl	80005f8 <__aeabi_dmul>
 800d018:	2200      	movs	r2, #0
 800d01a:	2300      	movs	r3, #0
 800d01c:	4606      	mov	r6, r0
 800d01e:	460f      	mov	r7, r1
 800d020:	f7f3 fd52 	bl	8000ac8 <__aeabi_dcmpeq>
 800d024:	2800      	cmp	r0, #0
 800d026:	d09e      	beq.n	800cf66 <_dtoa_r+0x65e>
 800d028:	e7d0      	b.n	800cfcc <_dtoa_r+0x6c4>
 800d02a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d02c:	2a00      	cmp	r2, #0
 800d02e:	f000 80ca 	beq.w	800d1c6 <_dtoa_r+0x8be>
 800d032:	9a07      	ldr	r2, [sp, #28]
 800d034:	2a01      	cmp	r2, #1
 800d036:	f300 80ad 	bgt.w	800d194 <_dtoa_r+0x88c>
 800d03a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d03c:	2a00      	cmp	r2, #0
 800d03e:	f000 80a5 	beq.w	800d18c <_dtoa_r+0x884>
 800d042:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d046:	9e08      	ldr	r6, [sp, #32]
 800d048:	9d05      	ldr	r5, [sp, #20]
 800d04a:	9a05      	ldr	r2, [sp, #20]
 800d04c:	441a      	add	r2, r3
 800d04e:	9205      	str	r2, [sp, #20]
 800d050:	9a06      	ldr	r2, [sp, #24]
 800d052:	2101      	movs	r1, #1
 800d054:	441a      	add	r2, r3
 800d056:	4620      	mov	r0, r4
 800d058:	9206      	str	r2, [sp, #24]
 800d05a:	f000 fdf7 	bl	800dc4c <__i2b>
 800d05e:	4607      	mov	r7, r0
 800d060:	b165      	cbz	r5, 800d07c <_dtoa_r+0x774>
 800d062:	9b06      	ldr	r3, [sp, #24]
 800d064:	2b00      	cmp	r3, #0
 800d066:	dd09      	ble.n	800d07c <_dtoa_r+0x774>
 800d068:	42ab      	cmp	r3, r5
 800d06a:	9a05      	ldr	r2, [sp, #20]
 800d06c:	bfa8      	it	ge
 800d06e:	462b      	movge	r3, r5
 800d070:	1ad2      	subs	r2, r2, r3
 800d072:	9205      	str	r2, [sp, #20]
 800d074:	9a06      	ldr	r2, [sp, #24]
 800d076:	1aed      	subs	r5, r5, r3
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	9306      	str	r3, [sp, #24]
 800d07c:	9b08      	ldr	r3, [sp, #32]
 800d07e:	b1f3      	cbz	r3, 800d0be <_dtoa_r+0x7b6>
 800d080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d082:	2b00      	cmp	r3, #0
 800d084:	f000 80a3 	beq.w	800d1ce <_dtoa_r+0x8c6>
 800d088:	2e00      	cmp	r6, #0
 800d08a:	dd10      	ble.n	800d0ae <_dtoa_r+0x7a6>
 800d08c:	4639      	mov	r1, r7
 800d08e:	4632      	mov	r2, r6
 800d090:	4620      	mov	r0, r4
 800d092:	f000 fe9b 	bl	800ddcc <__pow5mult>
 800d096:	4652      	mov	r2, sl
 800d098:	4601      	mov	r1, r0
 800d09a:	4607      	mov	r7, r0
 800d09c:	4620      	mov	r0, r4
 800d09e:	f000 fdeb 	bl	800dc78 <__multiply>
 800d0a2:	4651      	mov	r1, sl
 800d0a4:	4680      	mov	r8, r0
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f000 fd1a 	bl	800dae0 <_Bfree>
 800d0ac:	46c2      	mov	sl, r8
 800d0ae:	9b08      	ldr	r3, [sp, #32]
 800d0b0:	1b9a      	subs	r2, r3, r6
 800d0b2:	d004      	beq.n	800d0be <_dtoa_r+0x7b6>
 800d0b4:	4651      	mov	r1, sl
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f000 fe88 	bl	800ddcc <__pow5mult>
 800d0bc:	4682      	mov	sl, r0
 800d0be:	2101      	movs	r1, #1
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f000 fdc3 	bl	800dc4c <__i2b>
 800d0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	4606      	mov	r6, r0
 800d0cc:	f340 8081 	ble.w	800d1d2 <_dtoa_r+0x8ca>
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	4601      	mov	r1, r0
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	f000 fe79 	bl	800ddcc <__pow5mult>
 800d0da:	9b07      	ldr	r3, [sp, #28]
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	4606      	mov	r6, r0
 800d0e0:	dd7a      	ble.n	800d1d8 <_dtoa_r+0x8d0>
 800d0e2:	f04f 0800 	mov.w	r8, #0
 800d0e6:	6933      	ldr	r3, [r6, #16]
 800d0e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d0ec:	6918      	ldr	r0, [r3, #16]
 800d0ee:	f000 fd5f 	bl	800dbb0 <__hi0bits>
 800d0f2:	f1c0 0020 	rsb	r0, r0, #32
 800d0f6:	9b06      	ldr	r3, [sp, #24]
 800d0f8:	4418      	add	r0, r3
 800d0fa:	f010 001f 	ands.w	r0, r0, #31
 800d0fe:	f000 8094 	beq.w	800d22a <_dtoa_r+0x922>
 800d102:	f1c0 0320 	rsb	r3, r0, #32
 800d106:	2b04      	cmp	r3, #4
 800d108:	f340 8085 	ble.w	800d216 <_dtoa_r+0x90e>
 800d10c:	9b05      	ldr	r3, [sp, #20]
 800d10e:	f1c0 001c 	rsb	r0, r0, #28
 800d112:	4403      	add	r3, r0
 800d114:	9305      	str	r3, [sp, #20]
 800d116:	9b06      	ldr	r3, [sp, #24]
 800d118:	4403      	add	r3, r0
 800d11a:	4405      	add	r5, r0
 800d11c:	9306      	str	r3, [sp, #24]
 800d11e:	9b05      	ldr	r3, [sp, #20]
 800d120:	2b00      	cmp	r3, #0
 800d122:	dd05      	ble.n	800d130 <_dtoa_r+0x828>
 800d124:	4651      	mov	r1, sl
 800d126:	461a      	mov	r2, r3
 800d128:	4620      	mov	r0, r4
 800d12a:	f000 fea9 	bl	800de80 <__lshift>
 800d12e:	4682      	mov	sl, r0
 800d130:	9b06      	ldr	r3, [sp, #24]
 800d132:	2b00      	cmp	r3, #0
 800d134:	dd05      	ble.n	800d142 <_dtoa_r+0x83a>
 800d136:	4631      	mov	r1, r6
 800d138:	461a      	mov	r2, r3
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 fea0 	bl	800de80 <__lshift>
 800d140:	4606      	mov	r6, r0
 800d142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d144:	2b00      	cmp	r3, #0
 800d146:	d072      	beq.n	800d22e <_dtoa_r+0x926>
 800d148:	4631      	mov	r1, r6
 800d14a:	4650      	mov	r0, sl
 800d14c:	f000 ff04 	bl	800df58 <__mcmp>
 800d150:	2800      	cmp	r0, #0
 800d152:	da6c      	bge.n	800d22e <_dtoa_r+0x926>
 800d154:	2300      	movs	r3, #0
 800d156:	4651      	mov	r1, sl
 800d158:	220a      	movs	r2, #10
 800d15a:	4620      	mov	r0, r4
 800d15c:	f000 fce2 	bl	800db24 <__multadd>
 800d160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d162:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d166:	4682      	mov	sl, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f000 81b0 	beq.w	800d4ce <_dtoa_r+0xbc6>
 800d16e:	2300      	movs	r3, #0
 800d170:	4639      	mov	r1, r7
 800d172:	220a      	movs	r2, #10
 800d174:	4620      	mov	r0, r4
 800d176:	f000 fcd5 	bl	800db24 <__multadd>
 800d17a:	9b01      	ldr	r3, [sp, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	4607      	mov	r7, r0
 800d180:	f300 8096 	bgt.w	800d2b0 <_dtoa_r+0x9a8>
 800d184:	9b07      	ldr	r3, [sp, #28]
 800d186:	2b02      	cmp	r3, #2
 800d188:	dc59      	bgt.n	800d23e <_dtoa_r+0x936>
 800d18a:	e091      	b.n	800d2b0 <_dtoa_r+0x9a8>
 800d18c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d18e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d192:	e758      	b.n	800d046 <_dtoa_r+0x73e>
 800d194:	9b04      	ldr	r3, [sp, #16]
 800d196:	1e5e      	subs	r6, r3, #1
 800d198:	9b08      	ldr	r3, [sp, #32]
 800d19a:	42b3      	cmp	r3, r6
 800d19c:	bfbf      	itttt	lt
 800d19e:	9b08      	ldrlt	r3, [sp, #32]
 800d1a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d1a2:	9608      	strlt	r6, [sp, #32]
 800d1a4:	1af3      	sublt	r3, r6, r3
 800d1a6:	bfb4      	ite	lt
 800d1a8:	18d2      	addlt	r2, r2, r3
 800d1aa:	1b9e      	subge	r6, r3, r6
 800d1ac:	9b04      	ldr	r3, [sp, #16]
 800d1ae:	bfbc      	itt	lt
 800d1b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d1b2:	2600      	movlt	r6, #0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	bfb7      	itett	lt
 800d1b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d1bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d1c0:	1a9d      	sublt	r5, r3, r2
 800d1c2:	2300      	movlt	r3, #0
 800d1c4:	e741      	b.n	800d04a <_dtoa_r+0x742>
 800d1c6:	9e08      	ldr	r6, [sp, #32]
 800d1c8:	9d05      	ldr	r5, [sp, #20]
 800d1ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d1cc:	e748      	b.n	800d060 <_dtoa_r+0x758>
 800d1ce:	9a08      	ldr	r2, [sp, #32]
 800d1d0:	e770      	b.n	800d0b4 <_dtoa_r+0x7ac>
 800d1d2:	9b07      	ldr	r3, [sp, #28]
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	dc19      	bgt.n	800d20c <_dtoa_r+0x904>
 800d1d8:	9b02      	ldr	r3, [sp, #8]
 800d1da:	b9bb      	cbnz	r3, 800d20c <_dtoa_r+0x904>
 800d1dc:	9b03      	ldr	r3, [sp, #12]
 800d1de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1e2:	b99b      	cbnz	r3, 800d20c <_dtoa_r+0x904>
 800d1e4:	9b03      	ldr	r3, [sp, #12]
 800d1e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d1ea:	0d1b      	lsrs	r3, r3, #20
 800d1ec:	051b      	lsls	r3, r3, #20
 800d1ee:	b183      	cbz	r3, 800d212 <_dtoa_r+0x90a>
 800d1f0:	9b05      	ldr	r3, [sp, #20]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	9305      	str	r3, [sp, #20]
 800d1f6:	9b06      	ldr	r3, [sp, #24]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	9306      	str	r3, [sp, #24]
 800d1fc:	f04f 0801 	mov.w	r8, #1
 800d200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d202:	2b00      	cmp	r3, #0
 800d204:	f47f af6f 	bne.w	800d0e6 <_dtoa_r+0x7de>
 800d208:	2001      	movs	r0, #1
 800d20a:	e774      	b.n	800d0f6 <_dtoa_r+0x7ee>
 800d20c:	f04f 0800 	mov.w	r8, #0
 800d210:	e7f6      	b.n	800d200 <_dtoa_r+0x8f8>
 800d212:	4698      	mov	r8, r3
 800d214:	e7f4      	b.n	800d200 <_dtoa_r+0x8f8>
 800d216:	d082      	beq.n	800d11e <_dtoa_r+0x816>
 800d218:	9a05      	ldr	r2, [sp, #20]
 800d21a:	331c      	adds	r3, #28
 800d21c:	441a      	add	r2, r3
 800d21e:	9205      	str	r2, [sp, #20]
 800d220:	9a06      	ldr	r2, [sp, #24]
 800d222:	441a      	add	r2, r3
 800d224:	441d      	add	r5, r3
 800d226:	9206      	str	r2, [sp, #24]
 800d228:	e779      	b.n	800d11e <_dtoa_r+0x816>
 800d22a:	4603      	mov	r3, r0
 800d22c:	e7f4      	b.n	800d218 <_dtoa_r+0x910>
 800d22e:	9b04      	ldr	r3, [sp, #16]
 800d230:	2b00      	cmp	r3, #0
 800d232:	dc37      	bgt.n	800d2a4 <_dtoa_r+0x99c>
 800d234:	9b07      	ldr	r3, [sp, #28]
 800d236:	2b02      	cmp	r3, #2
 800d238:	dd34      	ble.n	800d2a4 <_dtoa_r+0x99c>
 800d23a:	9b04      	ldr	r3, [sp, #16]
 800d23c:	9301      	str	r3, [sp, #4]
 800d23e:	9b01      	ldr	r3, [sp, #4]
 800d240:	b963      	cbnz	r3, 800d25c <_dtoa_r+0x954>
 800d242:	4631      	mov	r1, r6
 800d244:	2205      	movs	r2, #5
 800d246:	4620      	mov	r0, r4
 800d248:	f000 fc6c 	bl	800db24 <__multadd>
 800d24c:	4601      	mov	r1, r0
 800d24e:	4606      	mov	r6, r0
 800d250:	4650      	mov	r0, sl
 800d252:	f000 fe81 	bl	800df58 <__mcmp>
 800d256:	2800      	cmp	r0, #0
 800d258:	f73f adbb 	bgt.w	800cdd2 <_dtoa_r+0x4ca>
 800d25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d25e:	9d00      	ldr	r5, [sp, #0]
 800d260:	ea6f 0b03 	mvn.w	fp, r3
 800d264:	f04f 0800 	mov.w	r8, #0
 800d268:	4631      	mov	r1, r6
 800d26a:	4620      	mov	r0, r4
 800d26c:	f000 fc38 	bl	800dae0 <_Bfree>
 800d270:	2f00      	cmp	r7, #0
 800d272:	f43f aeab 	beq.w	800cfcc <_dtoa_r+0x6c4>
 800d276:	f1b8 0f00 	cmp.w	r8, #0
 800d27a:	d005      	beq.n	800d288 <_dtoa_r+0x980>
 800d27c:	45b8      	cmp	r8, r7
 800d27e:	d003      	beq.n	800d288 <_dtoa_r+0x980>
 800d280:	4641      	mov	r1, r8
 800d282:	4620      	mov	r0, r4
 800d284:	f000 fc2c 	bl	800dae0 <_Bfree>
 800d288:	4639      	mov	r1, r7
 800d28a:	4620      	mov	r0, r4
 800d28c:	f000 fc28 	bl	800dae0 <_Bfree>
 800d290:	e69c      	b.n	800cfcc <_dtoa_r+0x6c4>
 800d292:	2600      	movs	r6, #0
 800d294:	4637      	mov	r7, r6
 800d296:	e7e1      	b.n	800d25c <_dtoa_r+0x954>
 800d298:	46bb      	mov	fp, r7
 800d29a:	4637      	mov	r7, r6
 800d29c:	e599      	b.n	800cdd2 <_dtoa_r+0x4ca>
 800d29e:	bf00      	nop
 800d2a0:	40240000 	.word	0x40240000
 800d2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	f000 80c8 	beq.w	800d43c <_dtoa_r+0xb34>
 800d2ac:	9b04      	ldr	r3, [sp, #16]
 800d2ae:	9301      	str	r3, [sp, #4]
 800d2b0:	2d00      	cmp	r5, #0
 800d2b2:	dd05      	ble.n	800d2c0 <_dtoa_r+0x9b8>
 800d2b4:	4639      	mov	r1, r7
 800d2b6:	462a      	mov	r2, r5
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	f000 fde1 	bl	800de80 <__lshift>
 800d2be:	4607      	mov	r7, r0
 800d2c0:	f1b8 0f00 	cmp.w	r8, #0
 800d2c4:	d05b      	beq.n	800d37e <_dtoa_r+0xa76>
 800d2c6:	6879      	ldr	r1, [r7, #4]
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f000 fbc9 	bl	800da60 <_Balloc>
 800d2ce:	4605      	mov	r5, r0
 800d2d0:	b928      	cbnz	r0, 800d2de <_dtoa_r+0x9d6>
 800d2d2:	4b83      	ldr	r3, [pc, #524]	; (800d4e0 <_dtoa_r+0xbd8>)
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d2da:	f7ff bb2e 	b.w	800c93a <_dtoa_r+0x32>
 800d2de:	693a      	ldr	r2, [r7, #16]
 800d2e0:	3202      	adds	r2, #2
 800d2e2:	0092      	lsls	r2, r2, #2
 800d2e4:	f107 010c 	add.w	r1, r7, #12
 800d2e8:	300c      	adds	r0, #12
 800d2ea:	f7ff fa75 	bl	800c7d8 <memcpy>
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	f000 fdc4 	bl	800de80 <__lshift>
 800d2f8:	9b00      	ldr	r3, [sp, #0]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	9304      	str	r3, [sp, #16]
 800d2fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d302:	4413      	add	r3, r2
 800d304:	9308      	str	r3, [sp, #32]
 800d306:	9b02      	ldr	r3, [sp, #8]
 800d308:	f003 0301 	and.w	r3, r3, #1
 800d30c:	46b8      	mov	r8, r7
 800d30e:	9306      	str	r3, [sp, #24]
 800d310:	4607      	mov	r7, r0
 800d312:	9b04      	ldr	r3, [sp, #16]
 800d314:	4631      	mov	r1, r6
 800d316:	3b01      	subs	r3, #1
 800d318:	4650      	mov	r0, sl
 800d31a:	9301      	str	r3, [sp, #4]
 800d31c:	f7ff fa6a 	bl	800c7f4 <quorem>
 800d320:	4641      	mov	r1, r8
 800d322:	9002      	str	r0, [sp, #8]
 800d324:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d328:	4650      	mov	r0, sl
 800d32a:	f000 fe15 	bl	800df58 <__mcmp>
 800d32e:	463a      	mov	r2, r7
 800d330:	9005      	str	r0, [sp, #20]
 800d332:	4631      	mov	r1, r6
 800d334:	4620      	mov	r0, r4
 800d336:	f000 fe2b 	bl	800df90 <__mdiff>
 800d33a:	68c2      	ldr	r2, [r0, #12]
 800d33c:	4605      	mov	r5, r0
 800d33e:	bb02      	cbnz	r2, 800d382 <_dtoa_r+0xa7a>
 800d340:	4601      	mov	r1, r0
 800d342:	4650      	mov	r0, sl
 800d344:	f000 fe08 	bl	800df58 <__mcmp>
 800d348:	4602      	mov	r2, r0
 800d34a:	4629      	mov	r1, r5
 800d34c:	4620      	mov	r0, r4
 800d34e:	9209      	str	r2, [sp, #36]	; 0x24
 800d350:	f000 fbc6 	bl	800dae0 <_Bfree>
 800d354:	9b07      	ldr	r3, [sp, #28]
 800d356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d358:	9d04      	ldr	r5, [sp, #16]
 800d35a:	ea43 0102 	orr.w	r1, r3, r2
 800d35e:	9b06      	ldr	r3, [sp, #24]
 800d360:	4319      	orrs	r1, r3
 800d362:	d110      	bne.n	800d386 <_dtoa_r+0xa7e>
 800d364:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d368:	d029      	beq.n	800d3be <_dtoa_r+0xab6>
 800d36a:	9b05      	ldr	r3, [sp, #20]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	dd02      	ble.n	800d376 <_dtoa_r+0xa6e>
 800d370:	9b02      	ldr	r3, [sp, #8]
 800d372:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d376:	9b01      	ldr	r3, [sp, #4]
 800d378:	f883 9000 	strb.w	r9, [r3]
 800d37c:	e774      	b.n	800d268 <_dtoa_r+0x960>
 800d37e:	4638      	mov	r0, r7
 800d380:	e7ba      	b.n	800d2f8 <_dtoa_r+0x9f0>
 800d382:	2201      	movs	r2, #1
 800d384:	e7e1      	b.n	800d34a <_dtoa_r+0xa42>
 800d386:	9b05      	ldr	r3, [sp, #20]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	db04      	blt.n	800d396 <_dtoa_r+0xa8e>
 800d38c:	9907      	ldr	r1, [sp, #28]
 800d38e:	430b      	orrs	r3, r1
 800d390:	9906      	ldr	r1, [sp, #24]
 800d392:	430b      	orrs	r3, r1
 800d394:	d120      	bne.n	800d3d8 <_dtoa_r+0xad0>
 800d396:	2a00      	cmp	r2, #0
 800d398:	dded      	ble.n	800d376 <_dtoa_r+0xa6e>
 800d39a:	4651      	mov	r1, sl
 800d39c:	2201      	movs	r2, #1
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f000 fd6e 	bl	800de80 <__lshift>
 800d3a4:	4631      	mov	r1, r6
 800d3a6:	4682      	mov	sl, r0
 800d3a8:	f000 fdd6 	bl	800df58 <__mcmp>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	dc03      	bgt.n	800d3b8 <_dtoa_r+0xab0>
 800d3b0:	d1e1      	bne.n	800d376 <_dtoa_r+0xa6e>
 800d3b2:	f019 0f01 	tst.w	r9, #1
 800d3b6:	d0de      	beq.n	800d376 <_dtoa_r+0xa6e>
 800d3b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d3bc:	d1d8      	bne.n	800d370 <_dtoa_r+0xa68>
 800d3be:	9a01      	ldr	r2, [sp, #4]
 800d3c0:	2339      	movs	r3, #57	; 0x39
 800d3c2:	7013      	strb	r3, [r2, #0]
 800d3c4:	462b      	mov	r3, r5
 800d3c6:	461d      	mov	r5, r3
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d3ce:	2a39      	cmp	r2, #57	; 0x39
 800d3d0:	d06c      	beq.n	800d4ac <_dtoa_r+0xba4>
 800d3d2:	3201      	adds	r2, #1
 800d3d4:	701a      	strb	r2, [r3, #0]
 800d3d6:	e747      	b.n	800d268 <_dtoa_r+0x960>
 800d3d8:	2a00      	cmp	r2, #0
 800d3da:	dd07      	ble.n	800d3ec <_dtoa_r+0xae4>
 800d3dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d3e0:	d0ed      	beq.n	800d3be <_dtoa_r+0xab6>
 800d3e2:	9a01      	ldr	r2, [sp, #4]
 800d3e4:	f109 0301 	add.w	r3, r9, #1
 800d3e8:	7013      	strb	r3, [r2, #0]
 800d3ea:	e73d      	b.n	800d268 <_dtoa_r+0x960>
 800d3ec:	9b04      	ldr	r3, [sp, #16]
 800d3ee:	9a08      	ldr	r2, [sp, #32]
 800d3f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d043      	beq.n	800d480 <_dtoa_r+0xb78>
 800d3f8:	4651      	mov	r1, sl
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	220a      	movs	r2, #10
 800d3fe:	4620      	mov	r0, r4
 800d400:	f000 fb90 	bl	800db24 <__multadd>
 800d404:	45b8      	cmp	r8, r7
 800d406:	4682      	mov	sl, r0
 800d408:	f04f 0300 	mov.w	r3, #0
 800d40c:	f04f 020a 	mov.w	r2, #10
 800d410:	4641      	mov	r1, r8
 800d412:	4620      	mov	r0, r4
 800d414:	d107      	bne.n	800d426 <_dtoa_r+0xb1e>
 800d416:	f000 fb85 	bl	800db24 <__multadd>
 800d41a:	4680      	mov	r8, r0
 800d41c:	4607      	mov	r7, r0
 800d41e:	9b04      	ldr	r3, [sp, #16]
 800d420:	3301      	adds	r3, #1
 800d422:	9304      	str	r3, [sp, #16]
 800d424:	e775      	b.n	800d312 <_dtoa_r+0xa0a>
 800d426:	f000 fb7d 	bl	800db24 <__multadd>
 800d42a:	4639      	mov	r1, r7
 800d42c:	4680      	mov	r8, r0
 800d42e:	2300      	movs	r3, #0
 800d430:	220a      	movs	r2, #10
 800d432:	4620      	mov	r0, r4
 800d434:	f000 fb76 	bl	800db24 <__multadd>
 800d438:	4607      	mov	r7, r0
 800d43a:	e7f0      	b.n	800d41e <_dtoa_r+0xb16>
 800d43c:	9b04      	ldr	r3, [sp, #16]
 800d43e:	9301      	str	r3, [sp, #4]
 800d440:	9d00      	ldr	r5, [sp, #0]
 800d442:	4631      	mov	r1, r6
 800d444:	4650      	mov	r0, sl
 800d446:	f7ff f9d5 	bl	800c7f4 <quorem>
 800d44a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d44e:	9b00      	ldr	r3, [sp, #0]
 800d450:	f805 9b01 	strb.w	r9, [r5], #1
 800d454:	1aea      	subs	r2, r5, r3
 800d456:	9b01      	ldr	r3, [sp, #4]
 800d458:	4293      	cmp	r3, r2
 800d45a:	dd07      	ble.n	800d46c <_dtoa_r+0xb64>
 800d45c:	4651      	mov	r1, sl
 800d45e:	2300      	movs	r3, #0
 800d460:	220a      	movs	r2, #10
 800d462:	4620      	mov	r0, r4
 800d464:	f000 fb5e 	bl	800db24 <__multadd>
 800d468:	4682      	mov	sl, r0
 800d46a:	e7ea      	b.n	800d442 <_dtoa_r+0xb3a>
 800d46c:	9b01      	ldr	r3, [sp, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	bfc8      	it	gt
 800d472:	461d      	movgt	r5, r3
 800d474:	9b00      	ldr	r3, [sp, #0]
 800d476:	bfd8      	it	le
 800d478:	2501      	movle	r5, #1
 800d47a:	441d      	add	r5, r3
 800d47c:	f04f 0800 	mov.w	r8, #0
 800d480:	4651      	mov	r1, sl
 800d482:	2201      	movs	r2, #1
 800d484:	4620      	mov	r0, r4
 800d486:	f000 fcfb 	bl	800de80 <__lshift>
 800d48a:	4631      	mov	r1, r6
 800d48c:	4682      	mov	sl, r0
 800d48e:	f000 fd63 	bl	800df58 <__mcmp>
 800d492:	2800      	cmp	r0, #0
 800d494:	dc96      	bgt.n	800d3c4 <_dtoa_r+0xabc>
 800d496:	d102      	bne.n	800d49e <_dtoa_r+0xb96>
 800d498:	f019 0f01 	tst.w	r9, #1
 800d49c:	d192      	bne.n	800d3c4 <_dtoa_r+0xabc>
 800d49e:	462b      	mov	r3, r5
 800d4a0:	461d      	mov	r5, r3
 800d4a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4a6:	2a30      	cmp	r2, #48	; 0x30
 800d4a8:	d0fa      	beq.n	800d4a0 <_dtoa_r+0xb98>
 800d4aa:	e6dd      	b.n	800d268 <_dtoa_r+0x960>
 800d4ac:	9a00      	ldr	r2, [sp, #0]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d189      	bne.n	800d3c6 <_dtoa_r+0xabe>
 800d4b2:	f10b 0b01 	add.w	fp, fp, #1
 800d4b6:	2331      	movs	r3, #49	; 0x31
 800d4b8:	e796      	b.n	800d3e8 <_dtoa_r+0xae0>
 800d4ba:	4b0a      	ldr	r3, [pc, #40]	; (800d4e4 <_dtoa_r+0xbdc>)
 800d4bc:	f7ff ba99 	b.w	800c9f2 <_dtoa_r+0xea>
 800d4c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	f47f aa6d 	bne.w	800c9a2 <_dtoa_r+0x9a>
 800d4c8:	4b07      	ldr	r3, [pc, #28]	; (800d4e8 <_dtoa_r+0xbe0>)
 800d4ca:	f7ff ba92 	b.w	800c9f2 <_dtoa_r+0xea>
 800d4ce:	9b01      	ldr	r3, [sp, #4]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	dcb5      	bgt.n	800d440 <_dtoa_r+0xb38>
 800d4d4:	9b07      	ldr	r3, [sp, #28]
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	f73f aeb1 	bgt.w	800d23e <_dtoa_r+0x936>
 800d4dc:	e7b0      	b.n	800d440 <_dtoa_r+0xb38>
 800d4de:	bf00      	nop
 800d4e0:	08010784 	.word	0x08010784
 800d4e4:	080106e4 	.word	0x080106e4
 800d4e8:	08010708 	.word	0x08010708

0800d4ec <__ssputs_r>:
 800d4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4f0:	688e      	ldr	r6, [r1, #8]
 800d4f2:	461f      	mov	r7, r3
 800d4f4:	42be      	cmp	r6, r7
 800d4f6:	680b      	ldr	r3, [r1, #0]
 800d4f8:	4682      	mov	sl, r0
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	4690      	mov	r8, r2
 800d4fe:	d82c      	bhi.n	800d55a <__ssputs_r+0x6e>
 800d500:	898a      	ldrh	r2, [r1, #12]
 800d502:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d506:	d026      	beq.n	800d556 <__ssputs_r+0x6a>
 800d508:	6965      	ldr	r5, [r4, #20]
 800d50a:	6909      	ldr	r1, [r1, #16]
 800d50c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d510:	eba3 0901 	sub.w	r9, r3, r1
 800d514:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d518:	1c7b      	adds	r3, r7, #1
 800d51a:	444b      	add	r3, r9
 800d51c:	106d      	asrs	r5, r5, #1
 800d51e:	429d      	cmp	r5, r3
 800d520:	bf38      	it	cc
 800d522:	461d      	movcc	r5, r3
 800d524:	0553      	lsls	r3, r2, #21
 800d526:	d527      	bpl.n	800d578 <__ssputs_r+0x8c>
 800d528:	4629      	mov	r1, r5
 800d52a:	f000 f95f 	bl	800d7ec <_malloc_r>
 800d52e:	4606      	mov	r6, r0
 800d530:	b360      	cbz	r0, 800d58c <__ssputs_r+0xa0>
 800d532:	6921      	ldr	r1, [r4, #16]
 800d534:	464a      	mov	r2, r9
 800d536:	f7ff f94f 	bl	800c7d8 <memcpy>
 800d53a:	89a3      	ldrh	r3, [r4, #12]
 800d53c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d544:	81a3      	strh	r3, [r4, #12]
 800d546:	6126      	str	r6, [r4, #16]
 800d548:	6165      	str	r5, [r4, #20]
 800d54a:	444e      	add	r6, r9
 800d54c:	eba5 0509 	sub.w	r5, r5, r9
 800d550:	6026      	str	r6, [r4, #0]
 800d552:	60a5      	str	r5, [r4, #8]
 800d554:	463e      	mov	r6, r7
 800d556:	42be      	cmp	r6, r7
 800d558:	d900      	bls.n	800d55c <__ssputs_r+0x70>
 800d55a:	463e      	mov	r6, r7
 800d55c:	6820      	ldr	r0, [r4, #0]
 800d55e:	4632      	mov	r2, r6
 800d560:	4641      	mov	r1, r8
 800d562:	f000 fe6b 	bl	800e23c <memmove>
 800d566:	68a3      	ldr	r3, [r4, #8]
 800d568:	1b9b      	subs	r3, r3, r6
 800d56a:	60a3      	str	r3, [r4, #8]
 800d56c:	6823      	ldr	r3, [r4, #0]
 800d56e:	4433      	add	r3, r6
 800d570:	6023      	str	r3, [r4, #0]
 800d572:	2000      	movs	r0, #0
 800d574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d578:	462a      	mov	r2, r5
 800d57a:	f000 fe30 	bl	800e1de <_realloc_r>
 800d57e:	4606      	mov	r6, r0
 800d580:	2800      	cmp	r0, #0
 800d582:	d1e0      	bne.n	800d546 <__ssputs_r+0x5a>
 800d584:	6921      	ldr	r1, [r4, #16]
 800d586:	4650      	mov	r0, sl
 800d588:	f000 fefc 	bl	800e384 <_free_r>
 800d58c:	230c      	movs	r3, #12
 800d58e:	f8ca 3000 	str.w	r3, [sl]
 800d592:	89a3      	ldrh	r3, [r4, #12]
 800d594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d598:	81a3      	strh	r3, [r4, #12]
 800d59a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d59e:	e7e9      	b.n	800d574 <__ssputs_r+0x88>

0800d5a0 <_svfiprintf_r>:
 800d5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a4:	4698      	mov	r8, r3
 800d5a6:	898b      	ldrh	r3, [r1, #12]
 800d5a8:	061b      	lsls	r3, r3, #24
 800d5aa:	b09d      	sub	sp, #116	; 0x74
 800d5ac:	4607      	mov	r7, r0
 800d5ae:	460d      	mov	r5, r1
 800d5b0:	4614      	mov	r4, r2
 800d5b2:	d50e      	bpl.n	800d5d2 <_svfiprintf_r+0x32>
 800d5b4:	690b      	ldr	r3, [r1, #16]
 800d5b6:	b963      	cbnz	r3, 800d5d2 <_svfiprintf_r+0x32>
 800d5b8:	2140      	movs	r1, #64	; 0x40
 800d5ba:	f000 f917 	bl	800d7ec <_malloc_r>
 800d5be:	6028      	str	r0, [r5, #0]
 800d5c0:	6128      	str	r0, [r5, #16]
 800d5c2:	b920      	cbnz	r0, 800d5ce <_svfiprintf_r+0x2e>
 800d5c4:	230c      	movs	r3, #12
 800d5c6:	603b      	str	r3, [r7, #0]
 800d5c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5cc:	e0d0      	b.n	800d770 <_svfiprintf_r+0x1d0>
 800d5ce:	2340      	movs	r3, #64	; 0x40
 800d5d0:	616b      	str	r3, [r5, #20]
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d5d6:	2320      	movs	r3, #32
 800d5d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5e0:	2330      	movs	r3, #48	; 0x30
 800d5e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d788 <_svfiprintf_r+0x1e8>
 800d5e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5ea:	f04f 0901 	mov.w	r9, #1
 800d5ee:	4623      	mov	r3, r4
 800d5f0:	469a      	mov	sl, r3
 800d5f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5f6:	b10a      	cbz	r2, 800d5fc <_svfiprintf_r+0x5c>
 800d5f8:	2a25      	cmp	r2, #37	; 0x25
 800d5fa:	d1f9      	bne.n	800d5f0 <_svfiprintf_r+0x50>
 800d5fc:	ebba 0b04 	subs.w	fp, sl, r4
 800d600:	d00b      	beq.n	800d61a <_svfiprintf_r+0x7a>
 800d602:	465b      	mov	r3, fp
 800d604:	4622      	mov	r2, r4
 800d606:	4629      	mov	r1, r5
 800d608:	4638      	mov	r0, r7
 800d60a:	f7ff ff6f 	bl	800d4ec <__ssputs_r>
 800d60e:	3001      	adds	r0, #1
 800d610:	f000 80a9 	beq.w	800d766 <_svfiprintf_r+0x1c6>
 800d614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d616:	445a      	add	r2, fp
 800d618:	9209      	str	r2, [sp, #36]	; 0x24
 800d61a:	f89a 3000 	ldrb.w	r3, [sl]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f000 80a1 	beq.w	800d766 <_svfiprintf_r+0x1c6>
 800d624:	2300      	movs	r3, #0
 800d626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d62a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d62e:	f10a 0a01 	add.w	sl, sl, #1
 800d632:	9304      	str	r3, [sp, #16]
 800d634:	9307      	str	r3, [sp, #28]
 800d636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d63a:	931a      	str	r3, [sp, #104]	; 0x68
 800d63c:	4654      	mov	r4, sl
 800d63e:	2205      	movs	r2, #5
 800d640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d644:	4850      	ldr	r0, [pc, #320]	; (800d788 <_svfiprintf_r+0x1e8>)
 800d646:	f7f2 fdc3 	bl	80001d0 <memchr>
 800d64a:	9a04      	ldr	r2, [sp, #16]
 800d64c:	b9d8      	cbnz	r0, 800d686 <_svfiprintf_r+0xe6>
 800d64e:	06d0      	lsls	r0, r2, #27
 800d650:	bf44      	itt	mi
 800d652:	2320      	movmi	r3, #32
 800d654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d658:	0711      	lsls	r1, r2, #28
 800d65a:	bf44      	itt	mi
 800d65c:	232b      	movmi	r3, #43	; 0x2b
 800d65e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d662:	f89a 3000 	ldrb.w	r3, [sl]
 800d666:	2b2a      	cmp	r3, #42	; 0x2a
 800d668:	d015      	beq.n	800d696 <_svfiprintf_r+0xf6>
 800d66a:	9a07      	ldr	r2, [sp, #28]
 800d66c:	4654      	mov	r4, sl
 800d66e:	2000      	movs	r0, #0
 800d670:	f04f 0c0a 	mov.w	ip, #10
 800d674:	4621      	mov	r1, r4
 800d676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d67a:	3b30      	subs	r3, #48	; 0x30
 800d67c:	2b09      	cmp	r3, #9
 800d67e:	d94d      	bls.n	800d71c <_svfiprintf_r+0x17c>
 800d680:	b1b0      	cbz	r0, 800d6b0 <_svfiprintf_r+0x110>
 800d682:	9207      	str	r2, [sp, #28]
 800d684:	e014      	b.n	800d6b0 <_svfiprintf_r+0x110>
 800d686:	eba0 0308 	sub.w	r3, r0, r8
 800d68a:	fa09 f303 	lsl.w	r3, r9, r3
 800d68e:	4313      	orrs	r3, r2
 800d690:	9304      	str	r3, [sp, #16]
 800d692:	46a2      	mov	sl, r4
 800d694:	e7d2      	b.n	800d63c <_svfiprintf_r+0x9c>
 800d696:	9b03      	ldr	r3, [sp, #12]
 800d698:	1d19      	adds	r1, r3, #4
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	9103      	str	r1, [sp, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	bfbb      	ittet	lt
 800d6a2:	425b      	neglt	r3, r3
 800d6a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d6a8:	9307      	strge	r3, [sp, #28]
 800d6aa:	9307      	strlt	r3, [sp, #28]
 800d6ac:	bfb8      	it	lt
 800d6ae:	9204      	strlt	r2, [sp, #16]
 800d6b0:	7823      	ldrb	r3, [r4, #0]
 800d6b2:	2b2e      	cmp	r3, #46	; 0x2e
 800d6b4:	d10c      	bne.n	800d6d0 <_svfiprintf_r+0x130>
 800d6b6:	7863      	ldrb	r3, [r4, #1]
 800d6b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d6ba:	d134      	bne.n	800d726 <_svfiprintf_r+0x186>
 800d6bc:	9b03      	ldr	r3, [sp, #12]
 800d6be:	1d1a      	adds	r2, r3, #4
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	9203      	str	r2, [sp, #12]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	bfb8      	it	lt
 800d6c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d6cc:	3402      	adds	r4, #2
 800d6ce:	9305      	str	r3, [sp, #20]
 800d6d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d798 <_svfiprintf_r+0x1f8>
 800d6d4:	7821      	ldrb	r1, [r4, #0]
 800d6d6:	2203      	movs	r2, #3
 800d6d8:	4650      	mov	r0, sl
 800d6da:	f7f2 fd79 	bl	80001d0 <memchr>
 800d6de:	b138      	cbz	r0, 800d6f0 <_svfiprintf_r+0x150>
 800d6e0:	9b04      	ldr	r3, [sp, #16]
 800d6e2:	eba0 000a 	sub.w	r0, r0, sl
 800d6e6:	2240      	movs	r2, #64	; 0x40
 800d6e8:	4082      	lsls	r2, r0
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	3401      	adds	r4, #1
 800d6ee:	9304      	str	r3, [sp, #16]
 800d6f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f4:	4825      	ldr	r0, [pc, #148]	; (800d78c <_svfiprintf_r+0x1ec>)
 800d6f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6fa:	2206      	movs	r2, #6
 800d6fc:	f7f2 fd68 	bl	80001d0 <memchr>
 800d700:	2800      	cmp	r0, #0
 800d702:	d038      	beq.n	800d776 <_svfiprintf_r+0x1d6>
 800d704:	4b22      	ldr	r3, [pc, #136]	; (800d790 <_svfiprintf_r+0x1f0>)
 800d706:	bb1b      	cbnz	r3, 800d750 <_svfiprintf_r+0x1b0>
 800d708:	9b03      	ldr	r3, [sp, #12]
 800d70a:	3307      	adds	r3, #7
 800d70c:	f023 0307 	bic.w	r3, r3, #7
 800d710:	3308      	adds	r3, #8
 800d712:	9303      	str	r3, [sp, #12]
 800d714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d716:	4433      	add	r3, r6
 800d718:	9309      	str	r3, [sp, #36]	; 0x24
 800d71a:	e768      	b.n	800d5ee <_svfiprintf_r+0x4e>
 800d71c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d720:	460c      	mov	r4, r1
 800d722:	2001      	movs	r0, #1
 800d724:	e7a6      	b.n	800d674 <_svfiprintf_r+0xd4>
 800d726:	2300      	movs	r3, #0
 800d728:	3401      	adds	r4, #1
 800d72a:	9305      	str	r3, [sp, #20]
 800d72c:	4619      	mov	r1, r3
 800d72e:	f04f 0c0a 	mov.w	ip, #10
 800d732:	4620      	mov	r0, r4
 800d734:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d738:	3a30      	subs	r2, #48	; 0x30
 800d73a:	2a09      	cmp	r2, #9
 800d73c:	d903      	bls.n	800d746 <_svfiprintf_r+0x1a6>
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d0c6      	beq.n	800d6d0 <_svfiprintf_r+0x130>
 800d742:	9105      	str	r1, [sp, #20]
 800d744:	e7c4      	b.n	800d6d0 <_svfiprintf_r+0x130>
 800d746:	fb0c 2101 	mla	r1, ip, r1, r2
 800d74a:	4604      	mov	r4, r0
 800d74c:	2301      	movs	r3, #1
 800d74e:	e7f0      	b.n	800d732 <_svfiprintf_r+0x192>
 800d750:	ab03      	add	r3, sp, #12
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	462a      	mov	r2, r5
 800d756:	4b0f      	ldr	r3, [pc, #60]	; (800d794 <_svfiprintf_r+0x1f4>)
 800d758:	a904      	add	r1, sp, #16
 800d75a:	4638      	mov	r0, r7
 800d75c:	f7fe fb6e 	bl	800be3c <_printf_float>
 800d760:	1c42      	adds	r2, r0, #1
 800d762:	4606      	mov	r6, r0
 800d764:	d1d6      	bne.n	800d714 <_svfiprintf_r+0x174>
 800d766:	89ab      	ldrh	r3, [r5, #12]
 800d768:	065b      	lsls	r3, r3, #25
 800d76a:	f53f af2d 	bmi.w	800d5c8 <_svfiprintf_r+0x28>
 800d76e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d770:	b01d      	add	sp, #116	; 0x74
 800d772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d776:	ab03      	add	r3, sp, #12
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	462a      	mov	r2, r5
 800d77c:	4b05      	ldr	r3, [pc, #20]	; (800d794 <_svfiprintf_r+0x1f4>)
 800d77e:	a904      	add	r1, sp, #16
 800d780:	4638      	mov	r0, r7
 800d782:	f7fe fdff 	bl	800c384 <_printf_i>
 800d786:	e7eb      	b.n	800d760 <_svfiprintf_r+0x1c0>
 800d788:	08010795 	.word	0x08010795
 800d78c:	0801079f 	.word	0x0801079f
 800d790:	0800be3d 	.word	0x0800be3d
 800d794:	0800d4ed 	.word	0x0800d4ed
 800d798:	0801079b 	.word	0x0801079b

0800d79c <malloc>:
 800d79c:	4b02      	ldr	r3, [pc, #8]	; (800d7a8 <malloc+0xc>)
 800d79e:	4601      	mov	r1, r0
 800d7a0:	6818      	ldr	r0, [r3, #0]
 800d7a2:	f000 b823 	b.w	800d7ec <_malloc_r>
 800d7a6:	bf00      	nop
 800d7a8:	20000070 	.word	0x20000070

0800d7ac <sbrk_aligned>:
 800d7ac:	b570      	push	{r4, r5, r6, lr}
 800d7ae:	4e0e      	ldr	r6, [pc, #56]	; (800d7e8 <sbrk_aligned+0x3c>)
 800d7b0:	460c      	mov	r4, r1
 800d7b2:	6831      	ldr	r1, [r6, #0]
 800d7b4:	4605      	mov	r5, r0
 800d7b6:	b911      	cbnz	r1, 800d7be <sbrk_aligned+0x12>
 800d7b8:	f000 fd8e 	bl	800e2d8 <_sbrk_r>
 800d7bc:	6030      	str	r0, [r6, #0]
 800d7be:	4621      	mov	r1, r4
 800d7c0:	4628      	mov	r0, r5
 800d7c2:	f000 fd89 	bl	800e2d8 <_sbrk_r>
 800d7c6:	1c43      	adds	r3, r0, #1
 800d7c8:	d00a      	beq.n	800d7e0 <sbrk_aligned+0x34>
 800d7ca:	1cc4      	adds	r4, r0, #3
 800d7cc:	f024 0403 	bic.w	r4, r4, #3
 800d7d0:	42a0      	cmp	r0, r4
 800d7d2:	d007      	beq.n	800d7e4 <sbrk_aligned+0x38>
 800d7d4:	1a21      	subs	r1, r4, r0
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	f000 fd7e 	bl	800e2d8 <_sbrk_r>
 800d7dc:	3001      	adds	r0, #1
 800d7de:	d101      	bne.n	800d7e4 <sbrk_aligned+0x38>
 800d7e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	bd70      	pop	{r4, r5, r6, pc}
 800d7e8:	200053b0 	.word	0x200053b0

0800d7ec <_malloc_r>:
 800d7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7f0:	1ccd      	adds	r5, r1, #3
 800d7f2:	f025 0503 	bic.w	r5, r5, #3
 800d7f6:	3508      	adds	r5, #8
 800d7f8:	2d0c      	cmp	r5, #12
 800d7fa:	bf38      	it	cc
 800d7fc:	250c      	movcc	r5, #12
 800d7fe:	2d00      	cmp	r5, #0
 800d800:	4607      	mov	r7, r0
 800d802:	db01      	blt.n	800d808 <_malloc_r+0x1c>
 800d804:	42a9      	cmp	r1, r5
 800d806:	d905      	bls.n	800d814 <_malloc_r+0x28>
 800d808:	230c      	movs	r3, #12
 800d80a:	603b      	str	r3, [r7, #0]
 800d80c:	2600      	movs	r6, #0
 800d80e:	4630      	mov	r0, r6
 800d810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d814:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d8e8 <_malloc_r+0xfc>
 800d818:	f000 f916 	bl	800da48 <__malloc_lock>
 800d81c:	f8d8 3000 	ldr.w	r3, [r8]
 800d820:	461c      	mov	r4, r3
 800d822:	bb5c      	cbnz	r4, 800d87c <_malloc_r+0x90>
 800d824:	4629      	mov	r1, r5
 800d826:	4638      	mov	r0, r7
 800d828:	f7ff ffc0 	bl	800d7ac <sbrk_aligned>
 800d82c:	1c43      	adds	r3, r0, #1
 800d82e:	4604      	mov	r4, r0
 800d830:	d155      	bne.n	800d8de <_malloc_r+0xf2>
 800d832:	f8d8 4000 	ldr.w	r4, [r8]
 800d836:	4626      	mov	r6, r4
 800d838:	2e00      	cmp	r6, #0
 800d83a:	d145      	bne.n	800d8c8 <_malloc_r+0xdc>
 800d83c:	2c00      	cmp	r4, #0
 800d83e:	d048      	beq.n	800d8d2 <_malloc_r+0xe6>
 800d840:	6823      	ldr	r3, [r4, #0]
 800d842:	4631      	mov	r1, r6
 800d844:	4638      	mov	r0, r7
 800d846:	eb04 0903 	add.w	r9, r4, r3
 800d84a:	f000 fd45 	bl	800e2d8 <_sbrk_r>
 800d84e:	4581      	cmp	r9, r0
 800d850:	d13f      	bne.n	800d8d2 <_malloc_r+0xe6>
 800d852:	6821      	ldr	r1, [r4, #0]
 800d854:	1a6d      	subs	r5, r5, r1
 800d856:	4629      	mov	r1, r5
 800d858:	4638      	mov	r0, r7
 800d85a:	f7ff ffa7 	bl	800d7ac <sbrk_aligned>
 800d85e:	3001      	adds	r0, #1
 800d860:	d037      	beq.n	800d8d2 <_malloc_r+0xe6>
 800d862:	6823      	ldr	r3, [r4, #0]
 800d864:	442b      	add	r3, r5
 800d866:	6023      	str	r3, [r4, #0]
 800d868:	f8d8 3000 	ldr.w	r3, [r8]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d038      	beq.n	800d8e2 <_malloc_r+0xf6>
 800d870:	685a      	ldr	r2, [r3, #4]
 800d872:	42a2      	cmp	r2, r4
 800d874:	d12b      	bne.n	800d8ce <_malloc_r+0xe2>
 800d876:	2200      	movs	r2, #0
 800d878:	605a      	str	r2, [r3, #4]
 800d87a:	e00f      	b.n	800d89c <_malloc_r+0xb0>
 800d87c:	6822      	ldr	r2, [r4, #0]
 800d87e:	1b52      	subs	r2, r2, r5
 800d880:	d41f      	bmi.n	800d8c2 <_malloc_r+0xd6>
 800d882:	2a0b      	cmp	r2, #11
 800d884:	d917      	bls.n	800d8b6 <_malloc_r+0xca>
 800d886:	1961      	adds	r1, r4, r5
 800d888:	42a3      	cmp	r3, r4
 800d88a:	6025      	str	r5, [r4, #0]
 800d88c:	bf18      	it	ne
 800d88e:	6059      	strne	r1, [r3, #4]
 800d890:	6863      	ldr	r3, [r4, #4]
 800d892:	bf08      	it	eq
 800d894:	f8c8 1000 	streq.w	r1, [r8]
 800d898:	5162      	str	r2, [r4, r5]
 800d89a:	604b      	str	r3, [r1, #4]
 800d89c:	4638      	mov	r0, r7
 800d89e:	f104 060b 	add.w	r6, r4, #11
 800d8a2:	f000 f8d7 	bl	800da54 <__malloc_unlock>
 800d8a6:	f026 0607 	bic.w	r6, r6, #7
 800d8aa:	1d23      	adds	r3, r4, #4
 800d8ac:	1af2      	subs	r2, r6, r3
 800d8ae:	d0ae      	beq.n	800d80e <_malloc_r+0x22>
 800d8b0:	1b9b      	subs	r3, r3, r6
 800d8b2:	50a3      	str	r3, [r4, r2]
 800d8b4:	e7ab      	b.n	800d80e <_malloc_r+0x22>
 800d8b6:	42a3      	cmp	r3, r4
 800d8b8:	6862      	ldr	r2, [r4, #4]
 800d8ba:	d1dd      	bne.n	800d878 <_malloc_r+0x8c>
 800d8bc:	f8c8 2000 	str.w	r2, [r8]
 800d8c0:	e7ec      	b.n	800d89c <_malloc_r+0xb0>
 800d8c2:	4623      	mov	r3, r4
 800d8c4:	6864      	ldr	r4, [r4, #4]
 800d8c6:	e7ac      	b.n	800d822 <_malloc_r+0x36>
 800d8c8:	4634      	mov	r4, r6
 800d8ca:	6876      	ldr	r6, [r6, #4]
 800d8cc:	e7b4      	b.n	800d838 <_malloc_r+0x4c>
 800d8ce:	4613      	mov	r3, r2
 800d8d0:	e7cc      	b.n	800d86c <_malloc_r+0x80>
 800d8d2:	230c      	movs	r3, #12
 800d8d4:	603b      	str	r3, [r7, #0]
 800d8d6:	4638      	mov	r0, r7
 800d8d8:	f000 f8bc 	bl	800da54 <__malloc_unlock>
 800d8dc:	e797      	b.n	800d80e <_malloc_r+0x22>
 800d8de:	6025      	str	r5, [r4, #0]
 800d8e0:	e7dc      	b.n	800d89c <_malloc_r+0xb0>
 800d8e2:	605b      	str	r3, [r3, #4]
 800d8e4:	deff      	udf	#255	; 0xff
 800d8e6:	bf00      	nop
 800d8e8:	200053ac 	.word	0x200053ac

0800d8ec <__sflush_r>:
 800d8ec:	898a      	ldrh	r2, [r1, #12]
 800d8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f2:	4605      	mov	r5, r0
 800d8f4:	0710      	lsls	r0, r2, #28
 800d8f6:	460c      	mov	r4, r1
 800d8f8:	d458      	bmi.n	800d9ac <__sflush_r+0xc0>
 800d8fa:	684b      	ldr	r3, [r1, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	dc05      	bgt.n	800d90c <__sflush_r+0x20>
 800d900:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d902:	2b00      	cmp	r3, #0
 800d904:	dc02      	bgt.n	800d90c <__sflush_r+0x20>
 800d906:	2000      	movs	r0, #0
 800d908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d90c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d90e:	2e00      	cmp	r6, #0
 800d910:	d0f9      	beq.n	800d906 <__sflush_r+0x1a>
 800d912:	2300      	movs	r3, #0
 800d914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d918:	682f      	ldr	r7, [r5, #0]
 800d91a:	6a21      	ldr	r1, [r4, #32]
 800d91c:	602b      	str	r3, [r5, #0]
 800d91e:	d032      	beq.n	800d986 <__sflush_r+0x9a>
 800d920:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d922:	89a3      	ldrh	r3, [r4, #12]
 800d924:	075a      	lsls	r2, r3, #29
 800d926:	d505      	bpl.n	800d934 <__sflush_r+0x48>
 800d928:	6863      	ldr	r3, [r4, #4]
 800d92a:	1ac0      	subs	r0, r0, r3
 800d92c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d92e:	b10b      	cbz	r3, 800d934 <__sflush_r+0x48>
 800d930:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d932:	1ac0      	subs	r0, r0, r3
 800d934:	2300      	movs	r3, #0
 800d936:	4602      	mov	r2, r0
 800d938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d93a:	6a21      	ldr	r1, [r4, #32]
 800d93c:	4628      	mov	r0, r5
 800d93e:	47b0      	blx	r6
 800d940:	1c43      	adds	r3, r0, #1
 800d942:	89a3      	ldrh	r3, [r4, #12]
 800d944:	d106      	bne.n	800d954 <__sflush_r+0x68>
 800d946:	6829      	ldr	r1, [r5, #0]
 800d948:	291d      	cmp	r1, #29
 800d94a:	d82b      	bhi.n	800d9a4 <__sflush_r+0xb8>
 800d94c:	4a29      	ldr	r2, [pc, #164]	; (800d9f4 <__sflush_r+0x108>)
 800d94e:	410a      	asrs	r2, r1
 800d950:	07d6      	lsls	r6, r2, #31
 800d952:	d427      	bmi.n	800d9a4 <__sflush_r+0xb8>
 800d954:	2200      	movs	r2, #0
 800d956:	6062      	str	r2, [r4, #4]
 800d958:	04d9      	lsls	r1, r3, #19
 800d95a:	6922      	ldr	r2, [r4, #16]
 800d95c:	6022      	str	r2, [r4, #0]
 800d95e:	d504      	bpl.n	800d96a <__sflush_r+0x7e>
 800d960:	1c42      	adds	r2, r0, #1
 800d962:	d101      	bne.n	800d968 <__sflush_r+0x7c>
 800d964:	682b      	ldr	r3, [r5, #0]
 800d966:	b903      	cbnz	r3, 800d96a <__sflush_r+0x7e>
 800d968:	6560      	str	r0, [r4, #84]	; 0x54
 800d96a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d96c:	602f      	str	r7, [r5, #0]
 800d96e:	2900      	cmp	r1, #0
 800d970:	d0c9      	beq.n	800d906 <__sflush_r+0x1a>
 800d972:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d976:	4299      	cmp	r1, r3
 800d978:	d002      	beq.n	800d980 <__sflush_r+0x94>
 800d97a:	4628      	mov	r0, r5
 800d97c:	f000 fd02 	bl	800e384 <_free_r>
 800d980:	2000      	movs	r0, #0
 800d982:	6360      	str	r0, [r4, #52]	; 0x34
 800d984:	e7c0      	b.n	800d908 <__sflush_r+0x1c>
 800d986:	2301      	movs	r3, #1
 800d988:	4628      	mov	r0, r5
 800d98a:	47b0      	blx	r6
 800d98c:	1c41      	adds	r1, r0, #1
 800d98e:	d1c8      	bne.n	800d922 <__sflush_r+0x36>
 800d990:	682b      	ldr	r3, [r5, #0]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d0c5      	beq.n	800d922 <__sflush_r+0x36>
 800d996:	2b1d      	cmp	r3, #29
 800d998:	d001      	beq.n	800d99e <__sflush_r+0xb2>
 800d99a:	2b16      	cmp	r3, #22
 800d99c:	d101      	bne.n	800d9a2 <__sflush_r+0xb6>
 800d99e:	602f      	str	r7, [r5, #0]
 800d9a0:	e7b1      	b.n	800d906 <__sflush_r+0x1a>
 800d9a2:	89a3      	ldrh	r3, [r4, #12]
 800d9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9a8:	81a3      	strh	r3, [r4, #12]
 800d9aa:	e7ad      	b.n	800d908 <__sflush_r+0x1c>
 800d9ac:	690f      	ldr	r7, [r1, #16]
 800d9ae:	2f00      	cmp	r7, #0
 800d9b0:	d0a9      	beq.n	800d906 <__sflush_r+0x1a>
 800d9b2:	0793      	lsls	r3, r2, #30
 800d9b4:	680e      	ldr	r6, [r1, #0]
 800d9b6:	bf08      	it	eq
 800d9b8:	694b      	ldreq	r3, [r1, #20]
 800d9ba:	600f      	str	r7, [r1, #0]
 800d9bc:	bf18      	it	ne
 800d9be:	2300      	movne	r3, #0
 800d9c0:	eba6 0807 	sub.w	r8, r6, r7
 800d9c4:	608b      	str	r3, [r1, #8]
 800d9c6:	f1b8 0f00 	cmp.w	r8, #0
 800d9ca:	dd9c      	ble.n	800d906 <__sflush_r+0x1a>
 800d9cc:	6a21      	ldr	r1, [r4, #32]
 800d9ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d9d0:	4643      	mov	r3, r8
 800d9d2:	463a      	mov	r2, r7
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	47b0      	blx	r6
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	dc06      	bgt.n	800d9ea <__sflush_r+0xfe>
 800d9dc:	89a3      	ldrh	r3, [r4, #12]
 800d9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9e2:	81a3      	strh	r3, [r4, #12]
 800d9e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9e8:	e78e      	b.n	800d908 <__sflush_r+0x1c>
 800d9ea:	4407      	add	r7, r0
 800d9ec:	eba8 0800 	sub.w	r8, r8, r0
 800d9f0:	e7e9      	b.n	800d9c6 <__sflush_r+0xda>
 800d9f2:	bf00      	nop
 800d9f4:	dfbffffe 	.word	0xdfbffffe

0800d9f8 <_fflush_r>:
 800d9f8:	b538      	push	{r3, r4, r5, lr}
 800d9fa:	690b      	ldr	r3, [r1, #16]
 800d9fc:	4605      	mov	r5, r0
 800d9fe:	460c      	mov	r4, r1
 800da00:	b913      	cbnz	r3, 800da08 <_fflush_r+0x10>
 800da02:	2500      	movs	r5, #0
 800da04:	4628      	mov	r0, r5
 800da06:	bd38      	pop	{r3, r4, r5, pc}
 800da08:	b118      	cbz	r0, 800da12 <_fflush_r+0x1a>
 800da0a:	6a03      	ldr	r3, [r0, #32]
 800da0c:	b90b      	cbnz	r3, 800da12 <_fflush_r+0x1a>
 800da0e:	f7fe fe75 	bl	800c6fc <__sinit>
 800da12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d0f3      	beq.n	800da02 <_fflush_r+0xa>
 800da1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da1c:	07d0      	lsls	r0, r2, #31
 800da1e:	d404      	bmi.n	800da2a <_fflush_r+0x32>
 800da20:	0599      	lsls	r1, r3, #22
 800da22:	d402      	bmi.n	800da2a <_fflush_r+0x32>
 800da24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da26:	f7fe fed5 	bl	800c7d4 <__retarget_lock_acquire_recursive>
 800da2a:	4628      	mov	r0, r5
 800da2c:	4621      	mov	r1, r4
 800da2e:	f7ff ff5d 	bl	800d8ec <__sflush_r>
 800da32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da34:	07da      	lsls	r2, r3, #31
 800da36:	4605      	mov	r5, r0
 800da38:	d4e4      	bmi.n	800da04 <_fflush_r+0xc>
 800da3a:	89a3      	ldrh	r3, [r4, #12]
 800da3c:	059b      	lsls	r3, r3, #22
 800da3e:	d4e1      	bmi.n	800da04 <_fflush_r+0xc>
 800da40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da42:	f7fe fec8 	bl	800c7d6 <__retarget_lock_release_recursive>
 800da46:	e7dd      	b.n	800da04 <_fflush_r+0xc>

0800da48 <__malloc_lock>:
 800da48:	4801      	ldr	r0, [pc, #4]	; (800da50 <__malloc_lock+0x8>)
 800da4a:	f7fe bec3 	b.w	800c7d4 <__retarget_lock_acquire_recursive>
 800da4e:	bf00      	nop
 800da50:	200053a8 	.word	0x200053a8

0800da54 <__malloc_unlock>:
 800da54:	4801      	ldr	r0, [pc, #4]	; (800da5c <__malloc_unlock+0x8>)
 800da56:	f7fe bebe 	b.w	800c7d6 <__retarget_lock_release_recursive>
 800da5a:	bf00      	nop
 800da5c:	200053a8 	.word	0x200053a8

0800da60 <_Balloc>:
 800da60:	b570      	push	{r4, r5, r6, lr}
 800da62:	69c6      	ldr	r6, [r0, #28]
 800da64:	4604      	mov	r4, r0
 800da66:	460d      	mov	r5, r1
 800da68:	b976      	cbnz	r6, 800da88 <_Balloc+0x28>
 800da6a:	2010      	movs	r0, #16
 800da6c:	f7ff fe96 	bl	800d79c <malloc>
 800da70:	4602      	mov	r2, r0
 800da72:	61e0      	str	r0, [r4, #28]
 800da74:	b920      	cbnz	r0, 800da80 <_Balloc+0x20>
 800da76:	4b18      	ldr	r3, [pc, #96]	; (800dad8 <_Balloc+0x78>)
 800da78:	4818      	ldr	r0, [pc, #96]	; (800dadc <_Balloc+0x7c>)
 800da7a:	216b      	movs	r1, #107	; 0x6b
 800da7c:	f000 fc4e 	bl	800e31c <__assert_func>
 800da80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da84:	6006      	str	r6, [r0, #0]
 800da86:	60c6      	str	r6, [r0, #12]
 800da88:	69e6      	ldr	r6, [r4, #28]
 800da8a:	68f3      	ldr	r3, [r6, #12]
 800da8c:	b183      	cbz	r3, 800dab0 <_Balloc+0x50>
 800da8e:	69e3      	ldr	r3, [r4, #28]
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da96:	b9b8      	cbnz	r0, 800dac8 <_Balloc+0x68>
 800da98:	2101      	movs	r1, #1
 800da9a:	fa01 f605 	lsl.w	r6, r1, r5
 800da9e:	1d72      	adds	r2, r6, #5
 800daa0:	0092      	lsls	r2, r2, #2
 800daa2:	4620      	mov	r0, r4
 800daa4:	f000 fc58 	bl	800e358 <_calloc_r>
 800daa8:	b160      	cbz	r0, 800dac4 <_Balloc+0x64>
 800daaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800daae:	e00e      	b.n	800dace <_Balloc+0x6e>
 800dab0:	2221      	movs	r2, #33	; 0x21
 800dab2:	2104      	movs	r1, #4
 800dab4:	4620      	mov	r0, r4
 800dab6:	f000 fc4f 	bl	800e358 <_calloc_r>
 800daba:	69e3      	ldr	r3, [r4, #28]
 800dabc:	60f0      	str	r0, [r6, #12]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d1e4      	bne.n	800da8e <_Balloc+0x2e>
 800dac4:	2000      	movs	r0, #0
 800dac6:	bd70      	pop	{r4, r5, r6, pc}
 800dac8:	6802      	ldr	r2, [r0, #0]
 800daca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dace:	2300      	movs	r3, #0
 800dad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dad4:	e7f7      	b.n	800dac6 <_Balloc+0x66>
 800dad6:	bf00      	nop
 800dad8:	08010715 	.word	0x08010715
 800dadc:	080107a6 	.word	0x080107a6

0800dae0 <_Bfree>:
 800dae0:	b570      	push	{r4, r5, r6, lr}
 800dae2:	69c6      	ldr	r6, [r0, #28]
 800dae4:	4605      	mov	r5, r0
 800dae6:	460c      	mov	r4, r1
 800dae8:	b976      	cbnz	r6, 800db08 <_Bfree+0x28>
 800daea:	2010      	movs	r0, #16
 800daec:	f7ff fe56 	bl	800d79c <malloc>
 800daf0:	4602      	mov	r2, r0
 800daf2:	61e8      	str	r0, [r5, #28]
 800daf4:	b920      	cbnz	r0, 800db00 <_Bfree+0x20>
 800daf6:	4b09      	ldr	r3, [pc, #36]	; (800db1c <_Bfree+0x3c>)
 800daf8:	4809      	ldr	r0, [pc, #36]	; (800db20 <_Bfree+0x40>)
 800dafa:	218f      	movs	r1, #143	; 0x8f
 800dafc:	f000 fc0e 	bl	800e31c <__assert_func>
 800db00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db04:	6006      	str	r6, [r0, #0]
 800db06:	60c6      	str	r6, [r0, #12]
 800db08:	b13c      	cbz	r4, 800db1a <_Bfree+0x3a>
 800db0a:	69eb      	ldr	r3, [r5, #28]
 800db0c:	6862      	ldr	r2, [r4, #4]
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db14:	6021      	str	r1, [r4, #0]
 800db16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db1a:	bd70      	pop	{r4, r5, r6, pc}
 800db1c:	08010715 	.word	0x08010715
 800db20:	080107a6 	.word	0x080107a6

0800db24 <__multadd>:
 800db24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db28:	690d      	ldr	r5, [r1, #16]
 800db2a:	4607      	mov	r7, r0
 800db2c:	460c      	mov	r4, r1
 800db2e:	461e      	mov	r6, r3
 800db30:	f101 0c14 	add.w	ip, r1, #20
 800db34:	2000      	movs	r0, #0
 800db36:	f8dc 3000 	ldr.w	r3, [ip]
 800db3a:	b299      	uxth	r1, r3
 800db3c:	fb02 6101 	mla	r1, r2, r1, r6
 800db40:	0c1e      	lsrs	r6, r3, #16
 800db42:	0c0b      	lsrs	r3, r1, #16
 800db44:	fb02 3306 	mla	r3, r2, r6, r3
 800db48:	b289      	uxth	r1, r1
 800db4a:	3001      	adds	r0, #1
 800db4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db50:	4285      	cmp	r5, r0
 800db52:	f84c 1b04 	str.w	r1, [ip], #4
 800db56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db5a:	dcec      	bgt.n	800db36 <__multadd+0x12>
 800db5c:	b30e      	cbz	r6, 800dba2 <__multadd+0x7e>
 800db5e:	68a3      	ldr	r3, [r4, #8]
 800db60:	42ab      	cmp	r3, r5
 800db62:	dc19      	bgt.n	800db98 <__multadd+0x74>
 800db64:	6861      	ldr	r1, [r4, #4]
 800db66:	4638      	mov	r0, r7
 800db68:	3101      	adds	r1, #1
 800db6a:	f7ff ff79 	bl	800da60 <_Balloc>
 800db6e:	4680      	mov	r8, r0
 800db70:	b928      	cbnz	r0, 800db7e <__multadd+0x5a>
 800db72:	4602      	mov	r2, r0
 800db74:	4b0c      	ldr	r3, [pc, #48]	; (800dba8 <__multadd+0x84>)
 800db76:	480d      	ldr	r0, [pc, #52]	; (800dbac <__multadd+0x88>)
 800db78:	21ba      	movs	r1, #186	; 0xba
 800db7a:	f000 fbcf 	bl	800e31c <__assert_func>
 800db7e:	6922      	ldr	r2, [r4, #16]
 800db80:	3202      	adds	r2, #2
 800db82:	f104 010c 	add.w	r1, r4, #12
 800db86:	0092      	lsls	r2, r2, #2
 800db88:	300c      	adds	r0, #12
 800db8a:	f7fe fe25 	bl	800c7d8 <memcpy>
 800db8e:	4621      	mov	r1, r4
 800db90:	4638      	mov	r0, r7
 800db92:	f7ff ffa5 	bl	800dae0 <_Bfree>
 800db96:	4644      	mov	r4, r8
 800db98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db9c:	3501      	adds	r5, #1
 800db9e:	615e      	str	r6, [r3, #20]
 800dba0:	6125      	str	r5, [r4, #16]
 800dba2:	4620      	mov	r0, r4
 800dba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dba8:	08010784 	.word	0x08010784
 800dbac:	080107a6 	.word	0x080107a6

0800dbb0 <__hi0bits>:
 800dbb0:	0c03      	lsrs	r3, r0, #16
 800dbb2:	041b      	lsls	r3, r3, #16
 800dbb4:	b9d3      	cbnz	r3, 800dbec <__hi0bits+0x3c>
 800dbb6:	0400      	lsls	r0, r0, #16
 800dbb8:	2310      	movs	r3, #16
 800dbba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dbbe:	bf04      	itt	eq
 800dbc0:	0200      	lsleq	r0, r0, #8
 800dbc2:	3308      	addeq	r3, #8
 800dbc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dbc8:	bf04      	itt	eq
 800dbca:	0100      	lsleq	r0, r0, #4
 800dbcc:	3304      	addeq	r3, #4
 800dbce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dbd2:	bf04      	itt	eq
 800dbd4:	0080      	lsleq	r0, r0, #2
 800dbd6:	3302      	addeq	r3, #2
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	db05      	blt.n	800dbe8 <__hi0bits+0x38>
 800dbdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dbe0:	f103 0301 	add.w	r3, r3, #1
 800dbe4:	bf08      	it	eq
 800dbe6:	2320      	moveq	r3, #32
 800dbe8:	4618      	mov	r0, r3
 800dbea:	4770      	bx	lr
 800dbec:	2300      	movs	r3, #0
 800dbee:	e7e4      	b.n	800dbba <__hi0bits+0xa>

0800dbf0 <__lo0bits>:
 800dbf0:	6803      	ldr	r3, [r0, #0]
 800dbf2:	f013 0207 	ands.w	r2, r3, #7
 800dbf6:	d00c      	beq.n	800dc12 <__lo0bits+0x22>
 800dbf8:	07d9      	lsls	r1, r3, #31
 800dbfa:	d422      	bmi.n	800dc42 <__lo0bits+0x52>
 800dbfc:	079a      	lsls	r2, r3, #30
 800dbfe:	bf49      	itett	mi
 800dc00:	085b      	lsrmi	r3, r3, #1
 800dc02:	089b      	lsrpl	r3, r3, #2
 800dc04:	6003      	strmi	r3, [r0, #0]
 800dc06:	2201      	movmi	r2, #1
 800dc08:	bf5c      	itt	pl
 800dc0a:	6003      	strpl	r3, [r0, #0]
 800dc0c:	2202      	movpl	r2, #2
 800dc0e:	4610      	mov	r0, r2
 800dc10:	4770      	bx	lr
 800dc12:	b299      	uxth	r1, r3
 800dc14:	b909      	cbnz	r1, 800dc1a <__lo0bits+0x2a>
 800dc16:	0c1b      	lsrs	r3, r3, #16
 800dc18:	2210      	movs	r2, #16
 800dc1a:	b2d9      	uxtb	r1, r3
 800dc1c:	b909      	cbnz	r1, 800dc22 <__lo0bits+0x32>
 800dc1e:	3208      	adds	r2, #8
 800dc20:	0a1b      	lsrs	r3, r3, #8
 800dc22:	0719      	lsls	r1, r3, #28
 800dc24:	bf04      	itt	eq
 800dc26:	091b      	lsreq	r3, r3, #4
 800dc28:	3204      	addeq	r2, #4
 800dc2a:	0799      	lsls	r1, r3, #30
 800dc2c:	bf04      	itt	eq
 800dc2e:	089b      	lsreq	r3, r3, #2
 800dc30:	3202      	addeq	r2, #2
 800dc32:	07d9      	lsls	r1, r3, #31
 800dc34:	d403      	bmi.n	800dc3e <__lo0bits+0x4e>
 800dc36:	085b      	lsrs	r3, r3, #1
 800dc38:	f102 0201 	add.w	r2, r2, #1
 800dc3c:	d003      	beq.n	800dc46 <__lo0bits+0x56>
 800dc3e:	6003      	str	r3, [r0, #0]
 800dc40:	e7e5      	b.n	800dc0e <__lo0bits+0x1e>
 800dc42:	2200      	movs	r2, #0
 800dc44:	e7e3      	b.n	800dc0e <__lo0bits+0x1e>
 800dc46:	2220      	movs	r2, #32
 800dc48:	e7e1      	b.n	800dc0e <__lo0bits+0x1e>
	...

0800dc4c <__i2b>:
 800dc4c:	b510      	push	{r4, lr}
 800dc4e:	460c      	mov	r4, r1
 800dc50:	2101      	movs	r1, #1
 800dc52:	f7ff ff05 	bl	800da60 <_Balloc>
 800dc56:	4602      	mov	r2, r0
 800dc58:	b928      	cbnz	r0, 800dc66 <__i2b+0x1a>
 800dc5a:	4b05      	ldr	r3, [pc, #20]	; (800dc70 <__i2b+0x24>)
 800dc5c:	4805      	ldr	r0, [pc, #20]	; (800dc74 <__i2b+0x28>)
 800dc5e:	f240 1145 	movw	r1, #325	; 0x145
 800dc62:	f000 fb5b 	bl	800e31c <__assert_func>
 800dc66:	2301      	movs	r3, #1
 800dc68:	6144      	str	r4, [r0, #20]
 800dc6a:	6103      	str	r3, [r0, #16]
 800dc6c:	bd10      	pop	{r4, pc}
 800dc6e:	bf00      	nop
 800dc70:	08010784 	.word	0x08010784
 800dc74:	080107a6 	.word	0x080107a6

0800dc78 <__multiply>:
 800dc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7c:	4691      	mov	r9, r2
 800dc7e:	690a      	ldr	r2, [r1, #16]
 800dc80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	bfb8      	it	lt
 800dc88:	460b      	movlt	r3, r1
 800dc8a:	460c      	mov	r4, r1
 800dc8c:	bfbc      	itt	lt
 800dc8e:	464c      	movlt	r4, r9
 800dc90:	4699      	movlt	r9, r3
 800dc92:	6927      	ldr	r7, [r4, #16]
 800dc94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc98:	68a3      	ldr	r3, [r4, #8]
 800dc9a:	6861      	ldr	r1, [r4, #4]
 800dc9c:	eb07 060a 	add.w	r6, r7, sl
 800dca0:	42b3      	cmp	r3, r6
 800dca2:	b085      	sub	sp, #20
 800dca4:	bfb8      	it	lt
 800dca6:	3101      	addlt	r1, #1
 800dca8:	f7ff feda 	bl	800da60 <_Balloc>
 800dcac:	b930      	cbnz	r0, 800dcbc <__multiply+0x44>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	4b44      	ldr	r3, [pc, #272]	; (800ddc4 <__multiply+0x14c>)
 800dcb2:	4845      	ldr	r0, [pc, #276]	; (800ddc8 <__multiply+0x150>)
 800dcb4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800dcb8:	f000 fb30 	bl	800e31c <__assert_func>
 800dcbc:	f100 0514 	add.w	r5, r0, #20
 800dcc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dcc4:	462b      	mov	r3, r5
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	4543      	cmp	r3, r8
 800dcca:	d321      	bcc.n	800dd10 <__multiply+0x98>
 800dccc:	f104 0314 	add.w	r3, r4, #20
 800dcd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dcd4:	f109 0314 	add.w	r3, r9, #20
 800dcd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dcdc:	9202      	str	r2, [sp, #8]
 800dcde:	1b3a      	subs	r2, r7, r4
 800dce0:	3a15      	subs	r2, #21
 800dce2:	f022 0203 	bic.w	r2, r2, #3
 800dce6:	3204      	adds	r2, #4
 800dce8:	f104 0115 	add.w	r1, r4, #21
 800dcec:	428f      	cmp	r7, r1
 800dcee:	bf38      	it	cc
 800dcf0:	2204      	movcc	r2, #4
 800dcf2:	9201      	str	r2, [sp, #4]
 800dcf4:	9a02      	ldr	r2, [sp, #8]
 800dcf6:	9303      	str	r3, [sp, #12]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d80c      	bhi.n	800dd16 <__multiply+0x9e>
 800dcfc:	2e00      	cmp	r6, #0
 800dcfe:	dd03      	ble.n	800dd08 <__multiply+0x90>
 800dd00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d05b      	beq.n	800ddc0 <__multiply+0x148>
 800dd08:	6106      	str	r6, [r0, #16]
 800dd0a:	b005      	add	sp, #20
 800dd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd10:	f843 2b04 	str.w	r2, [r3], #4
 800dd14:	e7d8      	b.n	800dcc8 <__multiply+0x50>
 800dd16:	f8b3 a000 	ldrh.w	sl, [r3]
 800dd1a:	f1ba 0f00 	cmp.w	sl, #0
 800dd1e:	d024      	beq.n	800dd6a <__multiply+0xf2>
 800dd20:	f104 0e14 	add.w	lr, r4, #20
 800dd24:	46a9      	mov	r9, r5
 800dd26:	f04f 0c00 	mov.w	ip, #0
 800dd2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dd2e:	f8d9 1000 	ldr.w	r1, [r9]
 800dd32:	fa1f fb82 	uxth.w	fp, r2
 800dd36:	b289      	uxth	r1, r1
 800dd38:	fb0a 110b 	mla	r1, sl, fp, r1
 800dd3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dd40:	f8d9 2000 	ldr.w	r2, [r9]
 800dd44:	4461      	add	r1, ip
 800dd46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd4a:	fb0a c20b 	mla	r2, sl, fp, ip
 800dd4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dd52:	b289      	uxth	r1, r1
 800dd54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd58:	4577      	cmp	r7, lr
 800dd5a:	f849 1b04 	str.w	r1, [r9], #4
 800dd5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd62:	d8e2      	bhi.n	800dd2a <__multiply+0xb2>
 800dd64:	9a01      	ldr	r2, [sp, #4]
 800dd66:	f845 c002 	str.w	ip, [r5, r2]
 800dd6a:	9a03      	ldr	r2, [sp, #12]
 800dd6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd70:	3304      	adds	r3, #4
 800dd72:	f1b9 0f00 	cmp.w	r9, #0
 800dd76:	d021      	beq.n	800ddbc <__multiply+0x144>
 800dd78:	6829      	ldr	r1, [r5, #0]
 800dd7a:	f104 0c14 	add.w	ip, r4, #20
 800dd7e:	46ae      	mov	lr, r5
 800dd80:	f04f 0a00 	mov.w	sl, #0
 800dd84:	f8bc b000 	ldrh.w	fp, [ip]
 800dd88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd8c:	fb09 220b 	mla	r2, r9, fp, r2
 800dd90:	4452      	add	r2, sl
 800dd92:	b289      	uxth	r1, r1
 800dd94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd98:	f84e 1b04 	str.w	r1, [lr], #4
 800dd9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dda0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dda4:	f8be 1000 	ldrh.w	r1, [lr]
 800dda8:	fb09 110a 	mla	r1, r9, sl, r1
 800ddac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ddb0:	4567      	cmp	r7, ip
 800ddb2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ddb6:	d8e5      	bhi.n	800dd84 <__multiply+0x10c>
 800ddb8:	9a01      	ldr	r2, [sp, #4]
 800ddba:	50a9      	str	r1, [r5, r2]
 800ddbc:	3504      	adds	r5, #4
 800ddbe:	e799      	b.n	800dcf4 <__multiply+0x7c>
 800ddc0:	3e01      	subs	r6, #1
 800ddc2:	e79b      	b.n	800dcfc <__multiply+0x84>
 800ddc4:	08010784 	.word	0x08010784
 800ddc8:	080107a6 	.word	0x080107a6

0800ddcc <__pow5mult>:
 800ddcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddd0:	4615      	mov	r5, r2
 800ddd2:	f012 0203 	ands.w	r2, r2, #3
 800ddd6:	4606      	mov	r6, r0
 800ddd8:	460f      	mov	r7, r1
 800ddda:	d007      	beq.n	800ddec <__pow5mult+0x20>
 800dddc:	4c25      	ldr	r4, [pc, #148]	; (800de74 <__pow5mult+0xa8>)
 800ddde:	3a01      	subs	r2, #1
 800dde0:	2300      	movs	r3, #0
 800dde2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dde6:	f7ff fe9d 	bl	800db24 <__multadd>
 800ddea:	4607      	mov	r7, r0
 800ddec:	10ad      	asrs	r5, r5, #2
 800ddee:	d03d      	beq.n	800de6c <__pow5mult+0xa0>
 800ddf0:	69f4      	ldr	r4, [r6, #28]
 800ddf2:	b97c      	cbnz	r4, 800de14 <__pow5mult+0x48>
 800ddf4:	2010      	movs	r0, #16
 800ddf6:	f7ff fcd1 	bl	800d79c <malloc>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	61f0      	str	r0, [r6, #28]
 800ddfe:	b928      	cbnz	r0, 800de0c <__pow5mult+0x40>
 800de00:	4b1d      	ldr	r3, [pc, #116]	; (800de78 <__pow5mult+0xac>)
 800de02:	481e      	ldr	r0, [pc, #120]	; (800de7c <__pow5mult+0xb0>)
 800de04:	f240 11b3 	movw	r1, #435	; 0x1b3
 800de08:	f000 fa88 	bl	800e31c <__assert_func>
 800de0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de10:	6004      	str	r4, [r0, #0]
 800de12:	60c4      	str	r4, [r0, #12]
 800de14:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800de18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de1c:	b94c      	cbnz	r4, 800de32 <__pow5mult+0x66>
 800de1e:	f240 2171 	movw	r1, #625	; 0x271
 800de22:	4630      	mov	r0, r6
 800de24:	f7ff ff12 	bl	800dc4c <__i2b>
 800de28:	2300      	movs	r3, #0
 800de2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800de2e:	4604      	mov	r4, r0
 800de30:	6003      	str	r3, [r0, #0]
 800de32:	f04f 0900 	mov.w	r9, #0
 800de36:	07eb      	lsls	r3, r5, #31
 800de38:	d50a      	bpl.n	800de50 <__pow5mult+0x84>
 800de3a:	4639      	mov	r1, r7
 800de3c:	4622      	mov	r2, r4
 800de3e:	4630      	mov	r0, r6
 800de40:	f7ff ff1a 	bl	800dc78 <__multiply>
 800de44:	4639      	mov	r1, r7
 800de46:	4680      	mov	r8, r0
 800de48:	4630      	mov	r0, r6
 800de4a:	f7ff fe49 	bl	800dae0 <_Bfree>
 800de4e:	4647      	mov	r7, r8
 800de50:	106d      	asrs	r5, r5, #1
 800de52:	d00b      	beq.n	800de6c <__pow5mult+0xa0>
 800de54:	6820      	ldr	r0, [r4, #0]
 800de56:	b938      	cbnz	r0, 800de68 <__pow5mult+0x9c>
 800de58:	4622      	mov	r2, r4
 800de5a:	4621      	mov	r1, r4
 800de5c:	4630      	mov	r0, r6
 800de5e:	f7ff ff0b 	bl	800dc78 <__multiply>
 800de62:	6020      	str	r0, [r4, #0]
 800de64:	f8c0 9000 	str.w	r9, [r0]
 800de68:	4604      	mov	r4, r0
 800de6a:	e7e4      	b.n	800de36 <__pow5mult+0x6a>
 800de6c:	4638      	mov	r0, r7
 800de6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de72:	bf00      	nop
 800de74:	080108f0 	.word	0x080108f0
 800de78:	08010715 	.word	0x08010715
 800de7c:	080107a6 	.word	0x080107a6

0800de80 <__lshift>:
 800de80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de84:	460c      	mov	r4, r1
 800de86:	6849      	ldr	r1, [r1, #4]
 800de88:	6923      	ldr	r3, [r4, #16]
 800de8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de8e:	68a3      	ldr	r3, [r4, #8]
 800de90:	4607      	mov	r7, r0
 800de92:	4691      	mov	r9, r2
 800de94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de98:	f108 0601 	add.w	r6, r8, #1
 800de9c:	42b3      	cmp	r3, r6
 800de9e:	db0b      	blt.n	800deb8 <__lshift+0x38>
 800dea0:	4638      	mov	r0, r7
 800dea2:	f7ff fddd 	bl	800da60 <_Balloc>
 800dea6:	4605      	mov	r5, r0
 800dea8:	b948      	cbnz	r0, 800debe <__lshift+0x3e>
 800deaa:	4602      	mov	r2, r0
 800deac:	4b28      	ldr	r3, [pc, #160]	; (800df50 <__lshift+0xd0>)
 800deae:	4829      	ldr	r0, [pc, #164]	; (800df54 <__lshift+0xd4>)
 800deb0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800deb4:	f000 fa32 	bl	800e31c <__assert_func>
 800deb8:	3101      	adds	r1, #1
 800deba:	005b      	lsls	r3, r3, #1
 800debc:	e7ee      	b.n	800de9c <__lshift+0x1c>
 800debe:	2300      	movs	r3, #0
 800dec0:	f100 0114 	add.w	r1, r0, #20
 800dec4:	f100 0210 	add.w	r2, r0, #16
 800dec8:	4618      	mov	r0, r3
 800deca:	4553      	cmp	r3, sl
 800decc:	db33      	blt.n	800df36 <__lshift+0xb6>
 800dece:	6920      	ldr	r0, [r4, #16]
 800ded0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ded4:	f104 0314 	add.w	r3, r4, #20
 800ded8:	f019 091f 	ands.w	r9, r9, #31
 800dedc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dee0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dee4:	d02b      	beq.n	800df3e <__lshift+0xbe>
 800dee6:	f1c9 0e20 	rsb	lr, r9, #32
 800deea:	468a      	mov	sl, r1
 800deec:	2200      	movs	r2, #0
 800deee:	6818      	ldr	r0, [r3, #0]
 800def0:	fa00 f009 	lsl.w	r0, r0, r9
 800def4:	4310      	orrs	r0, r2
 800def6:	f84a 0b04 	str.w	r0, [sl], #4
 800defa:	f853 2b04 	ldr.w	r2, [r3], #4
 800defe:	459c      	cmp	ip, r3
 800df00:	fa22 f20e 	lsr.w	r2, r2, lr
 800df04:	d8f3      	bhi.n	800deee <__lshift+0x6e>
 800df06:	ebac 0304 	sub.w	r3, ip, r4
 800df0a:	3b15      	subs	r3, #21
 800df0c:	f023 0303 	bic.w	r3, r3, #3
 800df10:	3304      	adds	r3, #4
 800df12:	f104 0015 	add.w	r0, r4, #21
 800df16:	4584      	cmp	ip, r0
 800df18:	bf38      	it	cc
 800df1a:	2304      	movcc	r3, #4
 800df1c:	50ca      	str	r2, [r1, r3]
 800df1e:	b10a      	cbz	r2, 800df24 <__lshift+0xa4>
 800df20:	f108 0602 	add.w	r6, r8, #2
 800df24:	3e01      	subs	r6, #1
 800df26:	4638      	mov	r0, r7
 800df28:	612e      	str	r6, [r5, #16]
 800df2a:	4621      	mov	r1, r4
 800df2c:	f7ff fdd8 	bl	800dae0 <_Bfree>
 800df30:	4628      	mov	r0, r5
 800df32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df36:	f842 0f04 	str.w	r0, [r2, #4]!
 800df3a:	3301      	adds	r3, #1
 800df3c:	e7c5      	b.n	800deca <__lshift+0x4a>
 800df3e:	3904      	subs	r1, #4
 800df40:	f853 2b04 	ldr.w	r2, [r3], #4
 800df44:	f841 2f04 	str.w	r2, [r1, #4]!
 800df48:	459c      	cmp	ip, r3
 800df4a:	d8f9      	bhi.n	800df40 <__lshift+0xc0>
 800df4c:	e7ea      	b.n	800df24 <__lshift+0xa4>
 800df4e:	bf00      	nop
 800df50:	08010784 	.word	0x08010784
 800df54:	080107a6 	.word	0x080107a6

0800df58 <__mcmp>:
 800df58:	b530      	push	{r4, r5, lr}
 800df5a:	6902      	ldr	r2, [r0, #16]
 800df5c:	690c      	ldr	r4, [r1, #16]
 800df5e:	1b12      	subs	r2, r2, r4
 800df60:	d10e      	bne.n	800df80 <__mcmp+0x28>
 800df62:	f100 0314 	add.w	r3, r0, #20
 800df66:	3114      	adds	r1, #20
 800df68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800df6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800df70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800df74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800df78:	42a5      	cmp	r5, r4
 800df7a:	d003      	beq.n	800df84 <__mcmp+0x2c>
 800df7c:	d305      	bcc.n	800df8a <__mcmp+0x32>
 800df7e:	2201      	movs	r2, #1
 800df80:	4610      	mov	r0, r2
 800df82:	bd30      	pop	{r4, r5, pc}
 800df84:	4283      	cmp	r3, r0
 800df86:	d3f3      	bcc.n	800df70 <__mcmp+0x18>
 800df88:	e7fa      	b.n	800df80 <__mcmp+0x28>
 800df8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df8e:	e7f7      	b.n	800df80 <__mcmp+0x28>

0800df90 <__mdiff>:
 800df90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df94:	460c      	mov	r4, r1
 800df96:	4606      	mov	r6, r0
 800df98:	4611      	mov	r1, r2
 800df9a:	4620      	mov	r0, r4
 800df9c:	4690      	mov	r8, r2
 800df9e:	f7ff ffdb 	bl	800df58 <__mcmp>
 800dfa2:	1e05      	subs	r5, r0, #0
 800dfa4:	d110      	bne.n	800dfc8 <__mdiff+0x38>
 800dfa6:	4629      	mov	r1, r5
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	f7ff fd59 	bl	800da60 <_Balloc>
 800dfae:	b930      	cbnz	r0, 800dfbe <__mdiff+0x2e>
 800dfb0:	4b3a      	ldr	r3, [pc, #232]	; (800e09c <__mdiff+0x10c>)
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	f240 2137 	movw	r1, #567	; 0x237
 800dfb8:	4839      	ldr	r0, [pc, #228]	; (800e0a0 <__mdiff+0x110>)
 800dfba:	f000 f9af 	bl	800e31c <__assert_func>
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dfc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc8:	bfa4      	itt	ge
 800dfca:	4643      	movge	r3, r8
 800dfcc:	46a0      	movge	r8, r4
 800dfce:	4630      	mov	r0, r6
 800dfd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dfd4:	bfa6      	itte	ge
 800dfd6:	461c      	movge	r4, r3
 800dfd8:	2500      	movge	r5, #0
 800dfda:	2501      	movlt	r5, #1
 800dfdc:	f7ff fd40 	bl	800da60 <_Balloc>
 800dfe0:	b920      	cbnz	r0, 800dfec <__mdiff+0x5c>
 800dfe2:	4b2e      	ldr	r3, [pc, #184]	; (800e09c <__mdiff+0x10c>)
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	f240 2145 	movw	r1, #581	; 0x245
 800dfea:	e7e5      	b.n	800dfb8 <__mdiff+0x28>
 800dfec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dff0:	6926      	ldr	r6, [r4, #16]
 800dff2:	60c5      	str	r5, [r0, #12]
 800dff4:	f104 0914 	add.w	r9, r4, #20
 800dff8:	f108 0514 	add.w	r5, r8, #20
 800dffc:	f100 0e14 	add.w	lr, r0, #20
 800e000:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e004:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e008:	f108 0210 	add.w	r2, r8, #16
 800e00c:	46f2      	mov	sl, lr
 800e00e:	2100      	movs	r1, #0
 800e010:	f859 3b04 	ldr.w	r3, [r9], #4
 800e014:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e018:	fa11 f88b 	uxtah	r8, r1, fp
 800e01c:	b299      	uxth	r1, r3
 800e01e:	0c1b      	lsrs	r3, r3, #16
 800e020:	eba8 0801 	sub.w	r8, r8, r1
 800e024:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e028:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e02c:	fa1f f888 	uxth.w	r8, r8
 800e030:	1419      	asrs	r1, r3, #16
 800e032:	454e      	cmp	r6, r9
 800e034:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e038:	f84a 3b04 	str.w	r3, [sl], #4
 800e03c:	d8e8      	bhi.n	800e010 <__mdiff+0x80>
 800e03e:	1b33      	subs	r3, r6, r4
 800e040:	3b15      	subs	r3, #21
 800e042:	f023 0303 	bic.w	r3, r3, #3
 800e046:	3304      	adds	r3, #4
 800e048:	3415      	adds	r4, #21
 800e04a:	42a6      	cmp	r6, r4
 800e04c:	bf38      	it	cc
 800e04e:	2304      	movcc	r3, #4
 800e050:	441d      	add	r5, r3
 800e052:	4473      	add	r3, lr
 800e054:	469e      	mov	lr, r3
 800e056:	462e      	mov	r6, r5
 800e058:	4566      	cmp	r6, ip
 800e05a:	d30e      	bcc.n	800e07a <__mdiff+0xea>
 800e05c:	f10c 0203 	add.w	r2, ip, #3
 800e060:	1b52      	subs	r2, r2, r5
 800e062:	f022 0203 	bic.w	r2, r2, #3
 800e066:	3d03      	subs	r5, #3
 800e068:	45ac      	cmp	ip, r5
 800e06a:	bf38      	it	cc
 800e06c:	2200      	movcc	r2, #0
 800e06e:	4413      	add	r3, r2
 800e070:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e074:	b17a      	cbz	r2, 800e096 <__mdiff+0x106>
 800e076:	6107      	str	r7, [r0, #16]
 800e078:	e7a4      	b.n	800dfc4 <__mdiff+0x34>
 800e07a:	f856 8b04 	ldr.w	r8, [r6], #4
 800e07e:	fa11 f288 	uxtah	r2, r1, r8
 800e082:	1414      	asrs	r4, r2, #16
 800e084:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e088:	b292      	uxth	r2, r2
 800e08a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e08e:	f84e 2b04 	str.w	r2, [lr], #4
 800e092:	1421      	asrs	r1, r4, #16
 800e094:	e7e0      	b.n	800e058 <__mdiff+0xc8>
 800e096:	3f01      	subs	r7, #1
 800e098:	e7ea      	b.n	800e070 <__mdiff+0xe0>
 800e09a:	bf00      	nop
 800e09c:	08010784 	.word	0x08010784
 800e0a0:	080107a6 	.word	0x080107a6

0800e0a4 <__d2b>:
 800e0a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e0a8:	460f      	mov	r7, r1
 800e0aa:	2101      	movs	r1, #1
 800e0ac:	ec59 8b10 	vmov	r8, r9, d0
 800e0b0:	4616      	mov	r6, r2
 800e0b2:	f7ff fcd5 	bl	800da60 <_Balloc>
 800e0b6:	4604      	mov	r4, r0
 800e0b8:	b930      	cbnz	r0, 800e0c8 <__d2b+0x24>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	4b24      	ldr	r3, [pc, #144]	; (800e150 <__d2b+0xac>)
 800e0be:	4825      	ldr	r0, [pc, #148]	; (800e154 <__d2b+0xb0>)
 800e0c0:	f240 310f 	movw	r1, #783	; 0x30f
 800e0c4:	f000 f92a 	bl	800e31c <__assert_func>
 800e0c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e0cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0d0:	bb2d      	cbnz	r5, 800e11e <__d2b+0x7a>
 800e0d2:	9301      	str	r3, [sp, #4]
 800e0d4:	f1b8 0300 	subs.w	r3, r8, #0
 800e0d8:	d026      	beq.n	800e128 <__d2b+0x84>
 800e0da:	4668      	mov	r0, sp
 800e0dc:	9300      	str	r3, [sp, #0]
 800e0de:	f7ff fd87 	bl	800dbf0 <__lo0bits>
 800e0e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e0e6:	b1e8      	cbz	r0, 800e124 <__d2b+0x80>
 800e0e8:	f1c0 0320 	rsb	r3, r0, #32
 800e0ec:	fa02 f303 	lsl.w	r3, r2, r3
 800e0f0:	430b      	orrs	r3, r1
 800e0f2:	40c2      	lsrs	r2, r0
 800e0f4:	6163      	str	r3, [r4, #20]
 800e0f6:	9201      	str	r2, [sp, #4]
 800e0f8:	9b01      	ldr	r3, [sp, #4]
 800e0fa:	61a3      	str	r3, [r4, #24]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	bf14      	ite	ne
 800e100:	2202      	movne	r2, #2
 800e102:	2201      	moveq	r2, #1
 800e104:	6122      	str	r2, [r4, #16]
 800e106:	b1bd      	cbz	r5, 800e138 <__d2b+0x94>
 800e108:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e10c:	4405      	add	r5, r0
 800e10e:	603d      	str	r5, [r7, #0]
 800e110:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e114:	6030      	str	r0, [r6, #0]
 800e116:	4620      	mov	r0, r4
 800e118:	b003      	add	sp, #12
 800e11a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e11e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e122:	e7d6      	b.n	800e0d2 <__d2b+0x2e>
 800e124:	6161      	str	r1, [r4, #20]
 800e126:	e7e7      	b.n	800e0f8 <__d2b+0x54>
 800e128:	a801      	add	r0, sp, #4
 800e12a:	f7ff fd61 	bl	800dbf0 <__lo0bits>
 800e12e:	9b01      	ldr	r3, [sp, #4]
 800e130:	6163      	str	r3, [r4, #20]
 800e132:	3020      	adds	r0, #32
 800e134:	2201      	movs	r2, #1
 800e136:	e7e5      	b.n	800e104 <__d2b+0x60>
 800e138:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e13c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e140:	6038      	str	r0, [r7, #0]
 800e142:	6918      	ldr	r0, [r3, #16]
 800e144:	f7ff fd34 	bl	800dbb0 <__hi0bits>
 800e148:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e14c:	e7e2      	b.n	800e114 <__d2b+0x70>
 800e14e:	bf00      	nop
 800e150:	08010784 	.word	0x08010784
 800e154:	080107a6 	.word	0x080107a6

0800e158 <__sread>:
 800e158:	b510      	push	{r4, lr}
 800e15a:	460c      	mov	r4, r1
 800e15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e160:	f000 f8a8 	bl	800e2b4 <_read_r>
 800e164:	2800      	cmp	r0, #0
 800e166:	bfab      	itete	ge
 800e168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e16a:	89a3      	ldrhlt	r3, [r4, #12]
 800e16c:	181b      	addge	r3, r3, r0
 800e16e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e172:	bfac      	ite	ge
 800e174:	6563      	strge	r3, [r4, #84]	; 0x54
 800e176:	81a3      	strhlt	r3, [r4, #12]
 800e178:	bd10      	pop	{r4, pc}

0800e17a <__swrite>:
 800e17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e17e:	461f      	mov	r7, r3
 800e180:	898b      	ldrh	r3, [r1, #12]
 800e182:	05db      	lsls	r3, r3, #23
 800e184:	4605      	mov	r5, r0
 800e186:	460c      	mov	r4, r1
 800e188:	4616      	mov	r6, r2
 800e18a:	d505      	bpl.n	800e198 <__swrite+0x1e>
 800e18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e190:	2302      	movs	r3, #2
 800e192:	2200      	movs	r2, #0
 800e194:	f000 f87c 	bl	800e290 <_lseek_r>
 800e198:	89a3      	ldrh	r3, [r4, #12]
 800e19a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e19e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1a2:	81a3      	strh	r3, [r4, #12]
 800e1a4:	4632      	mov	r2, r6
 800e1a6:	463b      	mov	r3, r7
 800e1a8:	4628      	mov	r0, r5
 800e1aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ae:	f000 b8a3 	b.w	800e2f8 <_write_r>

0800e1b2 <__sseek>:
 800e1b2:	b510      	push	{r4, lr}
 800e1b4:	460c      	mov	r4, r1
 800e1b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ba:	f000 f869 	bl	800e290 <_lseek_r>
 800e1be:	1c43      	adds	r3, r0, #1
 800e1c0:	89a3      	ldrh	r3, [r4, #12]
 800e1c2:	bf15      	itete	ne
 800e1c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e1c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e1ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e1ce:	81a3      	strheq	r3, [r4, #12]
 800e1d0:	bf18      	it	ne
 800e1d2:	81a3      	strhne	r3, [r4, #12]
 800e1d4:	bd10      	pop	{r4, pc}

0800e1d6 <__sclose>:
 800e1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1da:	f000 b849 	b.w	800e270 <_close_r>

0800e1de <_realloc_r>:
 800e1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e2:	4680      	mov	r8, r0
 800e1e4:	4614      	mov	r4, r2
 800e1e6:	460e      	mov	r6, r1
 800e1e8:	b921      	cbnz	r1, 800e1f4 <_realloc_r+0x16>
 800e1ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ee:	4611      	mov	r1, r2
 800e1f0:	f7ff bafc 	b.w	800d7ec <_malloc_r>
 800e1f4:	b92a      	cbnz	r2, 800e202 <_realloc_r+0x24>
 800e1f6:	f000 f8c5 	bl	800e384 <_free_r>
 800e1fa:	4625      	mov	r5, r4
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e202:	f000 f91d 	bl	800e440 <_malloc_usable_size_r>
 800e206:	4284      	cmp	r4, r0
 800e208:	4607      	mov	r7, r0
 800e20a:	d802      	bhi.n	800e212 <_realloc_r+0x34>
 800e20c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e210:	d812      	bhi.n	800e238 <_realloc_r+0x5a>
 800e212:	4621      	mov	r1, r4
 800e214:	4640      	mov	r0, r8
 800e216:	f7ff fae9 	bl	800d7ec <_malloc_r>
 800e21a:	4605      	mov	r5, r0
 800e21c:	2800      	cmp	r0, #0
 800e21e:	d0ed      	beq.n	800e1fc <_realloc_r+0x1e>
 800e220:	42bc      	cmp	r4, r7
 800e222:	4622      	mov	r2, r4
 800e224:	4631      	mov	r1, r6
 800e226:	bf28      	it	cs
 800e228:	463a      	movcs	r2, r7
 800e22a:	f7fe fad5 	bl	800c7d8 <memcpy>
 800e22e:	4631      	mov	r1, r6
 800e230:	4640      	mov	r0, r8
 800e232:	f000 f8a7 	bl	800e384 <_free_r>
 800e236:	e7e1      	b.n	800e1fc <_realloc_r+0x1e>
 800e238:	4635      	mov	r5, r6
 800e23a:	e7df      	b.n	800e1fc <_realloc_r+0x1e>

0800e23c <memmove>:
 800e23c:	4288      	cmp	r0, r1
 800e23e:	b510      	push	{r4, lr}
 800e240:	eb01 0402 	add.w	r4, r1, r2
 800e244:	d902      	bls.n	800e24c <memmove+0x10>
 800e246:	4284      	cmp	r4, r0
 800e248:	4623      	mov	r3, r4
 800e24a:	d807      	bhi.n	800e25c <memmove+0x20>
 800e24c:	1e43      	subs	r3, r0, #1
 800e24e:	42a1      	cmp	r1, r4
 800e250:	d008      	beq.n	800e264 <memmove+0x28>
 800e252:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e25a:	e7f8      	b.n	800e24e <memmove+0x12>
 800e25c:	4402      	add	r2, r0
 800e25e:	4601      	mov	r1, r0
 800e260:	428a      	cmp	r2, r1
 800e262:	d100      	bne.n	800e266 <memmove+0x2a>
 800e264:	bd10      	pop	{r4, pc}
 800e266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e26a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e26e:	e7f7      	b.n	800e260 <memmove+0x24>

0800e270 <_close_r>:
 800e270:	b538      	push	{r3, r4, r5, lr}
 800e272:	4d06      	ldr	r5, [pc, #24]	; (800e28c <_close_r+0x1c>)
 800e274:	2300      	movs	r3, #0
 800e276:	4604      	mov	r4, r0
 800e278:	4608      	mov	r0, r1
 800e27a:	602b      	str	r3, [r5, #0]
 800e27c:	f7f5 ffb7 	bl	80041ee <_close>
 800e280:	1c43      	adds	r3, r0, #1
 800e282:	d102      	bne.n	800e28a <_close_r+0x1a>
 800e284:	682b      	ldr	r3, [r5, #0]
 800e286:	b103      	cbz	r3, 800e28a <_close_r+0x1a>
 800e288:	6023      	str	r3, [r4, #0]
 800e28a:	bd38      	pop	{r3, r4, r5, pc}
 800e28c:	200053b4 	.word	0x200053b4

0800e290 <_lseek_r>:
 800e290:	b538      	push	{r3, r4, r5, lr}
 800e292:	4d07      	ldr	r5, [pc, #28]	; (800e2b0 <_lseek_r+0x20>)
 800e294:	4604      	mov	r4, r0
 800e296:	4608      	mov	r0, r1
 800e298:	4611      	mov	r1, r2
 800e29a:	2200      	movs	r2, #0
 800e29c:	602a      	str	r2, [r5, #0]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	f7f5 ffcc 	bl	800423c <_lseek>
 800e2a4:	1c43      	adds	r3, r0, #1
 800e2a6:	d102      	bne.n	800e2ae <_lseek_r+0x1e>
 800e2a8:	682b      	ldr	r3, [r5, #0]
 800e2aa:	b103      	cbz	r3, 800e2ae <_lseek_r+0x1e>
 800e2ac:	6023      	str	r3, [r4, #0]
 800e2ae:	bd38      	pop	{r3, r4, r5, pc}
 800e2b0:	200053b4 	.word	0x200053b4

0800e2b4 <_read_r>:
 800e2b4:	b538      	push	{r3, r4, r5, lr}
 800e2b6:	4d07      	ldr	r5, [pc, #28]	; (800e2d4 <_read_r+0x20>)
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	4608      	mov	r0, r1
 800e2bc:	4611      	mov	r1, r2
 800e2be:	2200      	movs	r2, #0
 800e2c0:	602a      	str	r2, [r5, #0]
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	f7f5 ff5a 	bl	800417c <_read>
 800e2c8:	1c43      	adds	r3, r0, #1
 800e2ca:	d102      	bne.n	800e2d2 <_read_r+0x1e>
 800e2cc:	682b      	ldr	r3, [r5, #0]
 800e2ce:	b103      	cbz	r3, 800e2d2 <_read_r+0x1e>
 800e2d0:	6023      	str	r3, [r4, #0]
 800e2d2:	bd38      	pop	{r3, r4, r5, pc}
 800e2d4:	200053b4 	.word	0x200053b4

0800e2d8 <_sbrk_r>:
 800e2d8:	b538      	push	{r3, r4, r5, lr}
 800e2da:	4d06      	ldr	r5, [pc, #24]	; (800e2f4 <_sbrk_r+0x1c>)
 800e2dc:	2300      	movs	r3, #0
 800e2de:	4604      	mov	r4, r0
 800e2e0:	4608      	mov	r0, r1
 800e2e2:	602b      	str	r3, [r5, #0]
 800e2e4:	f7f5 ffb8 	bl	8004258 <_sbrk>
 800e2e8:	1c43      	adds	r3, r0, #1
 800e2ea:	d102      	bne.n	800e2f2 <_sbrk_r+0x1a>
 800e2ec:	682b      	ldr	r3, [r5, #0]
 800e2ee:	b103      	cbz	r3, 800e2f2 <_sbrk_r+0x1a>
 800e2f0:	6023      	str	r3, [r4, #0]
 800e2f2:	bd38      	pop	{r3, r4, r5, pc}
 800e2f4:	200053b4 	.word	0x200053b4

0800e2f8 <_write_r>:
 800e2f8:	b538      	push	{r3, r4, r5, lr}
 800e2fa:	4d07      	ldr	r5, [pc, #28]	; (800e318 <_write_r+0x20>)
 800e2fc:	4604      	mov	r4, r0
 800e2fe:	4608      	mov	r0, r1
 800e300:	4611      	mov	r1, r2
 800e302:	2200      	movs	r2, #0
 800e304:	602a      	str	r2, [r5, #0]
 800e306:	461a      	mov	r2, r3
 800e308:	f7f5 ff55 	bl	80041b6 <_write>
 800e30c:	1c43      	adds	r3, r0, #1
 800e30e:	d102      	bne.n	800e316 <_write_r+0x1e>
 800e310:	682b      	ldr	r3, [r5, #0]
 800e312:	b103      	cbz	r3, 800e316 <_write_r+0x1e>
 800e314:	6023      	str	r3, [r4, #0]
 800e316:	bd38      	pop	{r3, r4, r5, pc}
 800e318:	200053b4 	.word	0x200053b4

0800e31c <__assert_func>:
 800e31c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e31e:	4614      	mov	r4, r2
 800e320:	461a      	mov	r2, r3
 800e322:	4b09      	ldr	r3, [pc, #36]	; (800e348 <__assert_func+0x2c>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4605      	mov	r5, r0
 800e328:	68d8      	ldr	r0, [r3, #12]
 800e32a:	b14c      	cbz	r4, 800e340 <__assert_func+0x24>
 800e32c:	4b07      	ldr	r3, [pc, #28]	; (800e34c <__assert_func+0x30>)
 800e32e:	9100      	str	r1, [sp, #0]
 800e330:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e334:	4906      	ldr	r1, [pc, #24]	; (800e350 <__assert_func+0x34>)
 800e336:	462b      	mov	r3, r5
 800e338:	f000 f88a 	bl	800e450 <fiprintf>
 800e33c:	f000 f8a7 	bl	800e48e <abort>
 800e340:	4b04      	ldr	r3, [pc, #16]	; (800e354 <__assert_func+0x38>)
 800e342:	461c      	mov	r4, r3
 800e344:	e7f3      	b.n	800e32e <__assert_func+0x12>
 800e346:	bf00      	nop
 800e348:	20000070 	.word	0x20000070
 800e34c:	08010a07 	.word	0x08010a07
 800e350:	08010a14 	.word	0x08010a14
 800e354:	08010a42 	.word	0x08010a42

0800e358 <_calloc_r>:
 800e358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e35a:	fba1 2402 	umull	r2, r4, r1, r2
 800e35e:	b94c      	cbnz	r4, 800e374 <_calloc_r+0x1c>
 800e360:	4611      	mov	r1, r2
 800e362:	9201      	str	r2, [sp, #4]
 800e364:	f7ff fa42 	bl	800d7ec <_malloc_r>
 800e368:	9a01      	ldr	r2, [sp, #4]
 800e36a:	4605      	mov	r5, r0
 800e36c:	b930      	cbnz	r0, 800e37c <_calloc_r+0x24>
 800e36e:	4628      	mov	r0, r5
 800e370:	b003      	add	sp, #12
 800e372:	bd30      	pop	{r4, r5, pc}
 800e374:	220c      	movs	r2, #12
 800e376:	6002      	str	r2, [r0, #0]
 800e378:	2500      	movs	r5, #0
 800e37a:	e7f8      	b.n	800e36e <_calloc_r+0x16>
 800e37c:	4621      	mov	r1, r4
 800e37e:	f7fe f9f3 	bl	800c768 <memset>
 800e382:	e7f4      	b.n	800e36e <_calloc_r+0x16>

0800e384 <_free_r>:
 800e384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e386:	2900      	cmp	r1, #0
 800e388:	d044      	beq.n	800e414 <_free_r+0x90>
 800e38a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e38e:	9001      	str	r0, [sp, #4]
 800e390:	2b00      	cmp	r3, #0
 800e392:	f1a1 0404 	sub.w	r4, r1, #4
 800e396:	bfb8      	it	lt
 800e398:	18e4      	addlt	r4, r4, r3
 800e39a:	f7ff fb55 	bl	800da48 <__malloc_lock>
 800e39e:	4a1e      	ldr	r2, [pc, #120]	; (800e418 <_free_r+0x94>)
 800e3a0:	9801      	ldr	r0, [sp, #4]
 800e3a2:	6813      	ldr	r3, [r2, #0]
 800e3a4:	b933      	cbnz	r3, 800e3b4 <_free_r+0x30>
 800e3a6:	6063      	str	r3, [r4, #4]
 800e3a8:	6014      	str	r4, [r2, #0]
 800e3aa:	b003      	add	sp, #12
 800e3ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3b0:	f7ff bb50 	b.w	800da54 <__malloc_unlock>
 800e3b4:	42a3      	cmp	r3, r4
 800e3b6:	d908      	bls.n	800e3ca <_free_r+0x46>
 800e3b8:	6825      	ldr	r5, [r4, #0]
 800e3ba:	1961      	adds	r1, r4, r5
 800e3bc:	428b      	cmp	r3, r1
 800e3be:	bf01      	itttt	eq
 800e3c0:	6819      	ldreq	r1, [r3, #0]
 800e3c2:	685b      	ldreq	r3, [r3, #4]
 800e3c4:	1949      	addeq	r1, r1, r5
 800e3c6:	6021      	streq	r1, [r4, #0]
 800e3c8:	e7ed      	b.n	800e3a6 <_free_r+0x22>
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	b10b      	cbz	r3, 800e3d4 <_free_r+0x50>
 800e3d0:	42a3      	cmp	r3, r4
 800e3d2:	d9fa      	bls.n	800e3ca <_free_r+0x46>
 800e3d4:	6811      	ldr	r1, [r2, #0]
 800e3d6:	1855      	adds	r5, r2, r1
 800e3d8:	42a5      	cmp	r5, r4
 800e3da:	d10b      	bne.n	800e3f4 <_free_r+0x70>
 800e3dc:	6824      	ldr	r4, [r4, #0]
 800e3de:	4421      	add	r1, r4
 800e3e0:	1854      	adds	r4, r2, r1
 800e3e2:	42a3      	cmp	r3, r4
 800e3e4:	6011      	str	r1, [r2, #0]
 800e3e6:	d1e0      	bne.n	800e3aa <_free_r+0x26>
 800e3e8:	681c      	ldr	r4, [r3, #0]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	6053      	str	r3, [r2, #4]
 800e3ee:	440c      	add	r4, r1
 800e3f0:	6014      	str	r4, [r2, #0]
 800e3f2:	e7da      	b.n	800e3aa <_free_r+0x26>
 800e3f4:	d902      	bls.n	800e3fc <_free_r+0x78>
 800e3f6:	230c      	movs	r3, #12
 800e3f8:	6003      	str	r3, [r0, #0]
 800e3fa:	e7d6      	b.n	800e3aa <_free_r+0x26>
 800e3fc:	6825      	ldr	r5, [r4, #0]
 800e3fe:	1961      	adds	r1, r4, r5
 800e400:	428b      	cmp	r3, r1
 800e402:	bf04      	itt	eq
 800e404:	6819      	ldreq	r1, [r3, #0]
 800e406:	685b      	ldreq	r3, [r3, #4]
 800e408:	6063      	str	r3, [r4, #4]
 800e40a:	bf04      	itt	eq
 800e40c:	1949      	addeq	r1, r1, r5
 800e40e:	6021      	streq	r1, [r4, #0]
 800e410:	6054      	str	r4, [r2, #4]
 800e412:	e7ca      	b.n	800e3aa <_free_r+0x26>
 800e414:	b003      	add	sp, #12
 800e416:	bd30      	pop	{r4, r5, pc}
 800e418:	200053ac 	.word	0x200053ac

0800e41c <__ascii_mbtowc>:
 800e41c:	b082      	sub	sp, #8
 800e41e:	b901      	cbnz	r1, 800e422 <__ascii_mbtowc+0x6>
 800e420:	a901      	add	r1, sp, #4
 800e422:	b142      	cbz	r2, 800e436 <__ascii_mbtowc+0x1a>
 800e424:	b14b      	cbz	r3, 800e43a <__ascii_mbtowc+0x1e>
 800e426:	7813      	ldrb	r3, [r2, #0]
 800e428:	600b      	str	r3, [r1, #0]
 800e42a:	7812      	ldrb	r2, [r2, #0]
 800e42c:	1e10      	subs	r0, r2, #0
 800e42e:	bf18      	it	ne
 800e430:	2001      	movne	r0, #1
 800e432:	b002      	add	sp, #8
 800e434:	4770      	bx	lr
 800e436:	4610      	mov	r0, r2
 800e438:	e7fb      	b.n	800e432 <__ascii_mbtowc+0x16>
 800e43a:	f06f 0001 	mvn.w	r0, #1
 800e43e:	e7f8      	b.n	800e432 <__ascii_mbtowc+0x16>

0800e440 <_malloc_usable_size_r>:
 800e440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e444:	1f18      	subs	r0, r3, #4
 800e446:	2b00      	cmp	r3, #0
 800e448:	bfbc      	itt	lt
 800e44a:	580b      	ldrlt	r3, [r1, r0]
 800e44c:	18c0      	addlt	r0, r0, r3
 800e44e:	4770      	bx	lr

0800e450 <fiprintf>:
 800e450:	b40e      	push	{r1, r2, r3}
 800e452:	b503      	push	{r0, r1, lr}
 800e454:	4601      	mov	r1, r0
 800e456:	ab03      	add	r3, sp, #12
 800e458:	4805      	ldr	r0, [pc, #20]	; (800e470 <fiprintf+0x20>)
 800e45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e45e:	6800      	ldr	r0, [r0, #0]
 800e460:	9301      	str	r3, [sp, #4]
 800e462:	f000 f845 	bl	800e4f0 <_vfiprintf_r>
 800e466:	b002      	add	sp, #8
 800e468:	f85d eb04 	ldr.w	lr, [sp], #4
 800e46c:	b003      	add	sp, #12
 800e46e:	4770      	bx	lr
 800e470:	20000070 	.word	0x20000070

0800e474 <__ascii_wctomb>:
 800e474:	b149      	cbz	r1, 800e48a <__ascii_wctomb+0x16>
 800e476:	2aff      	cmp	r2, #255	; 0xff
 800e478:	bf85      	ittet	hi
 800e47a:	238a      	movhi	r3, #138	; 0x8a
 800e47c:	6003      	strhi	r3, [r0, #0]
 800e47e:	700a      	strbls	r2, [r1, #0]
 800e480:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e484:	bf98      	it	ls
 800e486:	2001      	movls	r0, #1
 800e488:	4770      	bx	lr
 800e48a:	4608      	mov	r0, r1
 800e48c:	4770      	bx	lr

0800e48e <abort>:
 800e48e:	b508      	push	{r3, lr}
 800e490:	2006      	movs	r0, #6
 800e492:	f000 fa89 	bl	800e9a8 <raise>
 800e496:	2001      	movs	r0, #1
 800e498:	f7f5 fe66 	bl	8004168 <_exit>

0800e49c <__sfputc_r>:
 800e49c:	6893      	ldr	r3, [r2, #8]
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	b410      	push	{r4}
 800e4a4:	6093      	str	r3, [r2, #8]
 800e4a6:	da08      	bge.n	800e4ba <__sfputc_r+0x1e>
 800e4a8:	6994      	ldr	r4, [r2, #24]
 800e4aa:	42a3      	cmp	r3, r4
 800e4ac:	db01      	blt.n	800e4b2 <__sfputc_r+0x16>
 800e4ae:	290a      	cmp	r1, #10
 800e4b0:	d103      	bne.n	800e4ba <__sfputc_r+0x1e>
 800e4b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4b6:	f000 b935 	b.w	800e724 <__swbuf_r>
 800e4ba:	6813      	ldr	r3, [r2, #0]
 800e4bc:	1c58      	adds	r0, r3, #1
 800e4be:	6010      	str	r0, [r2, #0]
 800e4c0:	7019      	strb	r1, [r3, #0]
 800e4c2:	4608      	mov	r0, r1
 800e4c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4c8:	4770      	bx	lr

0800e4ca <__sfputs_r>:
 800e4ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4cc:	4606      	mov	r6, r0
 800e4ce:	460f      	mov	r7, r1
 800e4d0:	4614      	mov	r4, r2
 800e4d2:	18d5      	adds	r5, r2, r3
 800e4d4:	42ac      	cmp	r4, r5
 800e4d6:	d101      	bne.n	800e4dc <__sfputs_r+0x12>
 800e4d8:	2000      	movs	r0, #0
 800e4da:	e007      	b.n	800e4ec <__sfputs_r+0x22>
 800e4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e0:	463a      	mov	r2, r7
 800e4e2:	4630      	mov	r0, r6
 800e4e4:	f7ff ffda 	bl	800e49c <__sfputc_r>
 800e4e8:	1c43      	adds	r3, r0, #1
 800e4ea:	d1f3      	bne.n	800e4d4 <__sfputs_r+0xa>
 800e4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e4f0 <_vfiprintf_r>:
 800e4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f4:	460d      	mov	r5, r1
 800e4f6:	b09d      	sub	sp, #116	; 0x74
 800e4f8:	4614      	mov	r4, r2
 800e4fa:	4698      	mov	r8, r3
 800e4fc:	4606      	mov	r6, r0
 800e4fe:	b118      	cbz	r0, 800e508 <_vfiprintf_r+0x18>
 800e500:	6a03      	ldr	r3, [r0, #32]
 800e502:	b90b      	cbnz	r3, 800e508 <_vfiprintf_r+0x18>
 800e504:	f7fe f8fa 	bl	800c6fc <__sinit>
 800e508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e50a:	07d9      	lsls	r1, r3, #31
 800e50c:	d405      	bmi.n	800e51a <_vfiprintf_r+0x2a>
 800e50e:	89ab      	ldrh	r3, [r5, #12]
 800e510:	059a      	lsls	r2, r3, #22
 800e512:	d402      	bmi.n	800e51a <_vfiprintf_r+0x2a>
 800e514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e516:	f7fe f95d 	bl	800c7d4 <__retarget_lock_acquire_recursive>
 800e51a:	89ab      	ldrh	r3, [r5, #12]
 800e51c:	071b      	lsls	r3, r3, #28
 800e51e:	d501      	bpl.n	800e524 <_vfiprintf_r+0x34>
 800e520:	692b      	ldr	r3, [r5, #16]
 800e522:	b99b      	cbnz	r3, 800e54c <_vfiprintf_r+0x5c>
 800e524:	4629      	mov	r1, r5
 800e526:	4630      	mov	r0, r6
 800e528:	f000 f93a 	bl	800e7a0 <__swsetup_r>
 800e52c:	b170      	cbz	r0, 800e54c <_vfiprintf_r+0x5c>
 800e52e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e530:	07dc      	lsls	r4, r3, #31
 800e532:	d504      	bpl.n	800e53e <_vfiprintf_r+0x4e>
 800e534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e538:	b01d      	add	sp, #116	; 0x74
 800e53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e53e:	89ab      	ldrh	r3, [r5, #12]
 800e540:	0598      	lsls	r0, r3, #22
 800e542:	d4f7      	bmi.n	800e534 <_vfiprintf_r+0x44>
 800e544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e546:	f7fe f946 	bl	800c7d6 <__retarget_lock_release_recursive>
 800e54a:	e7f3      	b.n	800e534 <_vfiprintf_r+0x44>
 800e54c:	2300      	movs	r3, #0
 800e54e:	9309      	str	r3, [sp, #36]	; 0x24
 800e550:	2320      	movs	r3, #32
 800e552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e556:	f8cd 800c 	str.w	r8, [sp, #12]
 800e55a:	2330      	movs	r3, #48	; 0x30
 800e55c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e710 <_vfiprintf_r+0x220>
 800e560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e564:	f04f 0901 	mov.w	r9, #1
 800e568:	4623      	mov	r3, r4
 800e56a:	469a      	mov	sl, r3
 800e56c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e570:	b10a      	cbz	r2, 800e576 <_vfiprintf_r+0x86>
 800e572:	2a25      	cmp	r2, #37	; 0x25
 800e574:	d1f9      	bne.n	800e56a <_vfiprintf_r+0x7a>
 800e576:	ebba 0b04 	subs.w	fp, sl, r4
 800e57a:	d00b      	beq.n	800e594 <_vfiprintf_r+0xa4>
 800e57c:	465b      	mov	r3, fp
 800e57e:	4622      	mov	r2, r4
 800e580:	4629      	mov	r1, r5
 800e582:	4630      	mov	r0, r6
 800e584:	f7ff ffa1 	bl	800e4ca <__sfputs_r>
 800e588:	3001      	adds	r0, #1
 800e58a:	f000 80a9 	beq.w	800e6e0 <_vfiprintf_r+0x1f0>
 800e58e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e590:	445a      	add	r2, fp
 800e592:	9209      	str	r2, [sp, #36]	; 0x24
 800e594:	f89a 3000 	ldrb.w	r3, [sl]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f000 80a1 	beq.w	800e6e0 <_vfiprintf_r+0x1f0>
 800e59e:	2300      	movs	r3, #0
 800e5a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5a8:	f10a 0a01 	add.w	sl, sl, #1
 800e5ac:	9304      	str	r3, [sp, #16]
 800e5ae:	9307      	str	r3, [sp, #28]
 800e5b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5b4:	931a      	str	r3, [sp, #104]	; 0x68
 800e5b6:	4654      	mov	r4, sl
 800e5b8:	2205      	movs	r2, #5
 800e5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5be:	4854      	ldr	r0, [pc, #336]	; (800e710 <_vfiprintf_r+0x220>)
 800e5c0:	f7f1 fe06 	bl	80001d0 <memchr>
 800e5c4:	9a04      	ldr	r2, [sp, #16]
 800e5c6:	b9d8      	cbnz	r0, 800e600 <_vfiprintf_r+0x110>
 800e5c8:	06d1      	lsls	r1, r2, #27
 800e5ca:	bf44      	itt	mi
 800e5cc:	2320      	movmi	r3, #32
 800e5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5d2:	0713      	lsls	r3, r2, #28
 800e5d4:	bf44      	itt	mi
 800e5d6:	232b      	movmi	r3, #43	; 0x2b
 800e5d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800e5e2:	d015      	beq.n	800e610 <_vfiprintf_r+0x120>
 800e5e4:	9a07      	ldr	r2, [sp, #28]
 800e5e6:	4654      	mov	r4, sl
 800e5e8:	2000      	movs	r0, #0
 800e5ea:	f04f 0c0a 	mov.w	ip, #10
 800e5ee:	4621      	mov	r1, r4
 800e5f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5f4:	3b30      	subs	r3, #48	; 0x30
 800e5f6:	2b09      	cmp	r3, #9
 800e5f8:	d94d      	bls.n	800e696 <_vfiprintf_r+0x1a6>
 800e5fa:	b1b0      	cbz	r0, 800e62a <_vfiprintf_r+0x13a>
 800e5fc:	9207      	str	r2, [sp, #28]
 800e5fe:	e014      	b.n	800e62a <_vfiprintf_r+0x13a>
 800e600:	eba0 0308 	sub.w	r3, r0, r8
 800e604:	fa09 f303 	lsl.w	r3, r9, r3
 800e608:	4313      	orrs	r3, r2
 800e60a:	9304      	str	r3, [sp, #16]
 800e60c:	46a2      	mov	sl, r4
 800e60e:	e7d2      	b.n	800e5b6 <_vfiprintf_r+0xc6>
 800e610:	9b03      	ldr	r3, [sp, #12]
 800e612:	1d19      	adds	r1, r3, #4
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	9103      	str	r1, [sp, #12]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	bfbb      	ittet	lt
 800e61c:	425b      	neglt	r3, r3
 800e61e:	f042 0202 	orrlt.w	r2, r2, #2
 800e622:	9307      	strge	r3, [sp, #28]
 800e624:	9307      	strlt	r3, [sp, #28]
 800e626:	bfb8      	it	lt
 800e628:	9204      	strlt	r2, [sp, #16]
 800e62a:	7823      	ldrb	r3, [r4, #0]
 800e62c:	2b2e      	cmp	r3, #46	; 0x2e
 800e62e:	d10c      	bne.n	800e64a <_vfiprintf_r+0x15a>
 800e630:	7863      	ldrb	r3, [r4, #1]
 800e632:	2b2a      	cmp	r3, #42	; 0x2a
 800e634:	d134      	bne.n	800e6a0 <_vfiprintf_r+0x1b0>
 800e636:	9b03      	ldr	r3, [sp, #12]
 800e638:	1d1a      	adds	r2, r3, #4
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	9203      	str	r2, [sp, #12]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	bfb8      	it	lt
 800e642:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e646:	3402      	adds	r4, #2
 800e648:	9305      	str	r3, [sp, #20]
 800e64a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e720 <_vfiprintf_r+0x230>
 800e64e:	7821      	ldrb	r1, [r4, #0]
 800e650:	2203      	movs	r2, #3
 800e652:	4650      	mov	r0, sl
 800e654:	f7f1 fdbc 	bl	80001d0 <memchr>
 800e658:	b138      	cbz	r0, 800e66a <_vfiprintf_r+0x17a>
 800e65a:	9b04      	ldr	r3, [sp, #16]
 800e65c:	eba0 000a 	sub.w	r0, r0, sl
 800e660:	2240      	movs	r2, #64	; 0x40
 800e662:	4082      	lsls	r2, r0
 800e664:	4313      	orrs	r3, r2
 800e666:	3401      	adds	r4, #1
 800e668:	9304      	str	r3, [sp, #16]
 800e66a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e66e:	4829      	ldr	r0, [pc, #164]	; (800e714 <_vfiprintf_r+0x224>)
 800e670:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e674:	2206      	movs	r2, #6
 800e676:	f7f1 fdab 	bl	80001d0 <memchr>
 800e67a:	2800      	cmp	r0, #0
 800e67c:	d03f      	beq.n	800e6fe <_vfiprintf_r+0x20e>
 800e67e:	4b26      	ldr	r3, [pc, #152]	; (800e718 <_vfiprintf_r+0x228>)
 800e680:	bb1b      	cbnz	r3, 800e6ca <_vfiprintf_r+0x1da>
 800e682:	9b03      	ldr	r3, [sp, #12]
 800e684:	3307      	adds	r3, #7
 800e686:	f023 0307 	bic.w	r3, r3, #7
 800e68a:	3308      	adds	r3, #8
 800e68c:	9303      	str	r3, [sp, #12]
 800e68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e690:	443b      	add	r3, r7
 800e692:	9309      	str	r3, [sp, #36]	; 0x24
 800e694:	e768      	b.n	800e568 <_vfiprintf_r+0x78>
 800e696:	fb0c 3202 	mla	r2, ip, r2, r3
 800e69a:	460c      	mov	r4, r1
 800e69c:	2001      	movs	r0, #1
 800e69e:	e7a6      	b.n	800e5ee <_vfiprintf_r+0xfe>
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	3401      	adds	r4, #1
 800e6a4:	9305      	str	r3, [sp, #20]
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	f04f 0c0a 	mov.w	ip, #10
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6b2:	3a30      	subs	r2, #48	; 0x30
 800e6b4:	2a09      	cmp	r2, #9
 800e6b6:	d903      	bls.n	800e6c0 <_vfiprintf_r+0x1d0>
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d0c6      	beq.n	800e64a <_vfiprintf_r+0x15a>
 800e6bc:	9105      	str	r1, [sp, #20]
 800e6be:	e7c4      	b.n	800e64a <_vfiprintf_r+0x15a>
 800e6c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6c4:	4604      	mov	r4, r0
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e7f0      	b.n	800e6ac <_vfiprintf_r+0x1bc>
 800e6ca:	ab03      	add	r3, sp, #12
 800e6cc:	9300      	str	r3, [sp, #0]
 800e6ce:	462a      	mov	r2, r5
 800e6d0:	4b12      	ldr	r3, [pc, #72]	; (800e71c <_vfiprintf_r+0x22c>)
 800e6d2:	a904      	add	r1, sp, #16
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	f7fd fbb1 	bl	800be3c <_printf_float>
 800e6da:	4607      	mov	r7, r0
 800e6dc:	1c78      	adds	r0, r7, #1
 800e6de:	d1d6      	bne.n	800e68e <_vfiprintf_r+0x19e>
 800e6e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6e2:	07d9      	lsls	r1, r3, #31
 800e6e4:	d405      	bmi.n	800e6f2 <_vfiprintf_r+0x202>
 800e6e6:	89ab      	ldrh	r3, [r5, #12]
 800e6e8:	059a      	lsls	r2, r3, #22
 800e6ea:	d402      	bmi.n	800e6f2 <_vfiprintf_r+0x202>
 800e6ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6ee:	f7fe f872 	bl	800c7d6 <__retarget_lock_release_recursive>
 800e6f2:	89ab      	ldrh	r3, [r5, #12]
 800e6f4:	065b      	lsls	r3, r3, #25
 800e6f6:	f53f af1d 	bmi.w	800e534 <_vfiprintf_r+0x44>
 800e6fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6fc:	e71c      	b.n	800e538 <_vfiprintf_r+0x48>
 800e6fe:	ab03      	add	r3, sp, #12
 800e700:	9300      	str	r3, [sp, #0]
 800e702:	462a      	mov	r2, r5
 800e704:	4b05      	ldr	r3, [pc, #20]	; (800e71c <_vfiprintf_r+0x22c>)
 800e706:	a904      	add	r1, sp, #16
 800e708:	4630      	mov	r0, r6
 800e70a:	f7fd fe3b 	bl	800c384 <_printf_i>
 800e70e:	e7e4      	b.n	800e6da <_vfiprintf_r+0x1ea>
 800e710:	08010795 	.word	0x08010795
 800e714:	0801079f 	.word	0x0801079f
 800e718:	0800be3d 	.word	0x0800be3d
 800e71c:	0800e4cb 	.word	0x0800e4cb
 800e720:	0801079b 	.word	0x0801079b

0800e724 <__swbuf_r>:
 800e724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e726:	460e      	mov	r6, r1
 800e728:	4614      	mov	r4, r2
 800e72a:	4605      	mov	r5, r0
 800e72c:	b118      	cbz	r0, 800e736 <__swbuf_r+0x12>
 800e72e:	6a03      	ldr	r3, [r0, #32]
 800e730:	b90b      	cbnz	r3, 800e736 <__swbuf_r+0x12>
 800e732:	f7fd ffe3 	bl	800c6fc <__sinit>
 800e736:	69a3      	ldr	r3, [r4, #24]
 800e738:	60a3      	str	r3, [r4, #8]
 800e73a:	89a3      	ldrh	r3, [r4, #12]
 800e73c:	071a      	lsls	r2, r3, #28
 800e73e:	d525      	bpl.n	800e78c <__swbuf_r+0x68>
 800e740:	6923      	ldr	r3, [r4, #16]
 800e742:	b31b      	cbz	r3, 800e78c <__swbuf_r+0x68>
 800e744:	6823      	ldr	r3, [r4, #0]
 800e746:	6922      	ldr	r2, [r4, #16]
 800e748:	1a98      	subs	r0, r3, r2
 800e74a:	6963      	ldr	r3, [r4, #20]
 800e74c:	b2f6      	uxtb	r6, r6
 800e74e:	4283      	cmp	r3, r0
 800e750:	4637      	mov	r7, r6
 800e752:	dc04      	bgt.n	800e75e <__swbuf_r+0x3a>
 800e754:	4621      	mov	r1, r4
 800e756:	4628      	mov	r0, r5
 800e758:	f7ff f94e 	bl	800d9f8 <_fflush_r>
 800e75c:	b9e0      	cbnz	r0, 800e798 <__swbuf_r+0x74>
 800e75e:	68a3      	ldr	r3, [r4, #8]
 800e760:	3b01      	subs	r3, #1
 800e762:	60a3      	str	r3, [r4, #8]
 800e764:	6823      	ldr	r3, [r4, #0]
 800e766:	1c5a      	adds	r2, r3, #1
 800e768:	6022      	str	r2, [r4, #0]
 800e76a:	701e      	strb	r6, [r3, #0]
 800e76c:	6962      	ldr	r2, [r4, #20]
 800e76e:	1c43      	adds	r3, r0, #1
 800e770:	429a      	cmp	r2, r3
 800e772:	d004      	beq.n	800e77e <__swbuf_r+0x5a>
 800e774:	89a3      	ldrh	r3, [r4, #12]
 800e776:	07db      	lsls	r3, r3, #31
 800e778:	d506      	bpl.n	800e788 <__swbuf_r+0x64>
 800e77a:	2e0a      	cmp	r6, #10
 800e77c:	d104      	bne.n	800e788 <__swbuf_r+0x64>
 800e77e:	4621      	mov	r1, r4
 800e780:	4628      	mov	r0, r5
 800e782:	f7ff f939 	bl	800d9f8 <_fflush_r>
 800e786:	b938      	cbnz	r0, 800e798 <__swbuf_r+0x74>
 800e788:	4638      	mov	r0, r7
 800e78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e78c:	4621      	mov	r1, r4
 800e78e:	4628      	mov	r0, r5
 800e790:	f000 f806 	bl	800e7a0 <__swsetup_r>
 800e794:	2800      	cmp	r0, #0
 800e796:	d0d5      	beq.n	800e744 <__swbuf_r+0x20>
 800e798:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e79c:	e7f4      	b.n	800e788 <__swbuf_r+0x64>
	...

0800e7a0 <__swsetup_r>:
 800e7a0:	b538      	push	{r3, r4, r5, lr}
 800e7a2:	4b2a      	ldr	r3, [pc, #168]	; (800e84c <__swsetup_r+0xac>)
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	6818      	ldr	r0, [r3, #0]
 800e7a8:	460c      	mov	r4, r1
 800e7aa:	b118      	cbz	r0, 800e7b4 <__swsetup_r+0x14>
 800e7ac:	6a03      	ldr	r3, [r0, #32]
 800e7ae:	b90b      	cbnz	r3, 800e7b4 <__swsetup_r+0x14>
 800e7b0:	f7fd ffa4 	bl	800c6fc <__sinit>
 800e7b4:	89a3      	ldrh	r3, [r4, #12]
 800e7b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7ba:	0718      	lsls	r0, r3, #28
 800e7bc:	d422      	bmi.n	800e804 <__swsetup_r+0x64>
 800e7be:	06d9      	lsls	r1, r3, #27
 800e7c0:	d407      	bmi.n	800e7d2 <__swsetup_r+0x32>
 800e7c2:	2309      	movs	r3, #9
 800e7c4:	602b      	str	r3, [r5, #0]
 800e7c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e7ca:	81a3      	strh	r3, [r4, #12]
 800e7cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7d0:	e034      	b.n	800e83c <__swsetup_r+0x9c>
 800e7d2:	0758      	lsls	r0, r3, #29
 800e7d4:	d512      	bpl.n	800e7fc <__swsetup_r+0x5c>
 800e7d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7d8:	b141      	cbz	r1, 800e7ec <__swsetup_r+0x4c>
 800e7da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7de:	4299      	cmp	r1, r3
 800e7e0:	d002      	beq.n	800e7e8 <__swsetup_r+0x48>
 800e7e2:	4628      	mov	r0, r5
 800e7e4:	f7ff fdce 	bl	800e384 <_free_r>
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	6363      	str	r3, [r4, #52]	; 0x34
 800e7ec:	89a3      	ldrh	r3, [r4, #12]
 800e7ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e7f2:	81a3      	strh	r3, [r4, #12]
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	6063      	str	r3, [r4, #4]
 800e7f8:	6923      	ldr	r3, [r4, #16]
 800e7fa:	6023      	str	r3, [r4, #0]
 800e7fc:	89a3      	ldrh	r3, [r4, #12]
 800e7fe:	f043 0308 	orr.w	r3, r3, #8
 800e802:	81a3      	strh	r3, [r4, #12]
 800e804:	6923      	ldr	r3, [r4, #16]
 800e806:	b94b      	cbnz	r3, 800e81c <__swsetup_r+0x7c>
 800e808:	89a3      	ldrh	r3, [r4, #12]
 800e80a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e80e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e812:	d003      	beq.n	800e81c <__swsetup_r+0x7c>
 800e814:	4621      	mov	r1, r4
 800e816:	4628      	mov	r0, r5
 800e818:	f000 f840 	bl	800e89c <__smakebuf_r>
 800e81c:	89a0      	ldrh	r0, [r4, #12]
 800e81e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e822:	f010 0301 	ands.w	r3, r0, #1
 800e826:	d00a      	beq.n	800e83e <__swsetup_r+0x9e>
 800e828:	2300      	movs	r3, #0
 800e82a:	60a3      	str	r3, [r4, #8]
 800e82c:	6963      	ldr	r3, [r4, #20]
 800e82e:	425b      	negs	r3, r3
 800e830:	61a3      	str	r3, [r4, #24]
 800e832:	6923      	ldr	r3, [r4, #16]
 800e834:	b943      	cbnz	r3, 800e848 <__swsetup_r+0xa8>
 800e836:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e83a:	d1c4      	bne.n	800e7c6 <__swsetup_r+0x26>
 800e83c:	bd38      	pop	{r3, r4, r5, pc}
 800e83e:	0781      	lsls	r1, r0, #30
 800e840:	bf58      	it	pl
 800e842:	6963      	ldrpl	r3, [r4, #20]
 800e844:	60a3      	str	r3, [r4, #8]
 800e846:	e7f4      	b.n	800e832 <__swsetup_r+0x92>
 800e848:	2000      	movs	r0, #0
 800e84a:	e7f7      	b.n	800e83c <__swsetup_r+0x9c>
 800e84c:	20000070 	.word	0x20000070

0800e850 <__swhatbuf_r>:
 800e850:	b570      	push	{r4, r5, r6, lr}
 800e852:	460c      	mov	r4, r1
 800e854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e858:	2900      	cmp	r1, #0
 800e85a:	b096      	sub	sp, #88	; 0x58
 800e85c:	4615      	mov	r5, r2
 800e85e:	461e      	mov	r6, r3
 800e860:	da0d      	bge.n	800e87e <__swhatbuf_r+0x2e>
 800e862:	89a3      	ldrh	r3, [r4, #12]
 800e864:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e868:	f04f 0100 	mov.w	r1, #0
 800e86c:	bf0c      	ite	eq
 800e86e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e872:	2340      	movne	r3, #64	; 0x40
 800e874:	2000      	movs	r0, #0
 800e876:	6031      	str	r1, [r6, #0]
 800e878:	602b      	str	r3, [r5, #0]
 800e87a:	b016      	add	sp, #88	; 0x58
 800e87c:	bd70      	pop	{r4, r5, r6, pc}
 800e87e:	466a      	mov	r2, sp
 800e880:	f000 f848 	bl	800e914 <_fstat_r>
 800e884:	2800      	cmp	r0, #0
 800e886:	dbec      	blt.n	800e862 <__swhatbuf_r+0x12>
 800e888:	9901      	ldr	r1, [sp, #4]
 800e88a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e88e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e892:	4259      	negs	r1, r3
 800e894:	4159      	adcs	r1, r3
 800e896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e89a:	e7eb      	b.n	800e874 <__swhatbuf_r+0x24>

0800e89c <__smakebuf_r>:
 800e89c:	898b      	ldrh	r3, [r1, #12]
 800e89e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e8a0:	079d      	lsls	r5, r3, #30
 800e8a2:	4606      	mov	r6, r0
 800e8a4:	460c      	mov	r4, r1
 800e8a6:	d507      	bpl.n	800e8b8 <__smakebuf_r+0x1c>
 800e8a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e8ac:	6023      	str	r3, [r4, #0]
 800e8ae:	6123      	str	r3, [r4, #16]
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	6163      	str	r3, [r4, #20]
 800e8b4:	b002      	add	sp, #8
 800e8b6:	bd70      	pop	{r4, r5, r6, pc}
 800e8b8:	ab01      	add	r3, sp, #4
 800e8ba:	466a      	mov	r2, sp
 800e8bc:	f7ff ffc8 	bl	800e850 <__swhatbuf_r>
 800e8c0:	9900      	ldr	r1, [sp, #0]
 800e8c2:	4605      	mov	r5, r0
 800e8c4:	4630      	mov	r0, r6
 800e8c6:	f7fe ff91 	bl	800d7ec <_malloc_r>
 800e8ca:	b948      	cbnz	r0, 800e8e0 <__smakebuf_r+0x44>
 800e8cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8d0:	059a      	lsls	r2, r3, #22
 800e8d2:	d4ef      	bmi.n	800e8b4 <__smakebuf_r+0x18>
 800e8d4:	f023 0303 	bic.w	r3, r3, #3
 800e8d8:	f043 0302 	orr.w	r3, r3, #2
 800e8dc:	81a3      	strh	r3, [r4, #12]
 800e8de:	e7e3      	b.n	800e8a8 <__smakebuf_r+0xc>
 800e8e0:	89a3      	ldrh	r3, [r4, #12]
 800e8e2:	6020      	str	r0, [r4, #0]
 800e8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8e8:	81a3      	strh	r3, [r4, #12]
 800e8ea:	9b00      	ldr	r3, [sp, #0]
 800e8ec:	6163      	str	r3, [r4, #20]
 800e8ee:	9b01      	ldr	r3, [sp, #4]
 800e8f0:	6120      	str	r0, [r4, #16]
 800e8f2:	b15b      	cbz	r3, 800e90c <__smakebuf_r+0x70>
 800e8f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	f000 f81d 	bl	800e938 <_isatty_r>
 800e8fe:	b128      	cbz	r0, 800e90c <__smakebuf_r+0x70>
 800e900:	89a3      	ldrh	r3, [r4, #12]
 800e902:	f023 0303 	bic.w	r3, r3, #3
 800e906:	f043 0301 	orr.w	r3, r3, #1
 800e90a:	81a3      	strh	r3, [r4, #12]
 800e90c:	89a3      	ldrh	r3, [r4, #12]
 800e90e:	431d      	orrs	r5, r3
 800e910:	81a5      	strh	r5, [r4, #12]
 800e912:	e7cf      	b.n	800e8b4 <__smakebuf_r+0x18>

0800e914 <_fstat_r>:
 800e914:	b538      	push	{r3, r4, r5, lr}
 800e916:	4d07      	ldr	r5, [pc, #28]	; (800e934 <_fstat_r+0x20>)
 800e918:	2300      	movs	r3, #0
 800e91a:	4604      	mov	r4, r0
 800e91c:	4608      	mov	r0, r1
 800e91e:	4611      	mov	r1, r2
 800e920:	602b      	str	r3, [r5, #0]
 800e922:	f7f5 fc70 	bl	8004206 <_fstat>
 800e926:	1c43      	adds	r3, r0, #1
 800e928:	d102      	bne.n	800e930 <_fstat_r+0x1c>
 800e92a:	682b      	ldr	r3, [r5, #0]
 800e92c:	b103      	cbz	r3, 800e930 <_fstat_r+0x1c>
 800e92e:	6023      	str	r3, [r4, #0]
 800e930:	bd38      	pop	{r3, r4, r5, pc}
 800e932:	bf00      	nop
 800e934:	200053b4 	.word	0x200053b4

0800e938 <_isatty_r>:
 800e938:	b538      	push	{r3, r4, r5, lr}
 800e93a:	4d06      	ldr	r5, [pc, #24]	; (800e954 <_isatty_r+0x1c>)
 800e93c:	2300      	movs	r3, #0
 800e93e:	4604      	mov	r4, r0
 800e940:	4608      	mov	r0, r1
 800e942:	602b      	str	r3, [r5, #0]
 800e944:	f7f5 fc6f 	bl	8004226 <_isatty>
 800e948:	1c43      	adds	r3, r0, #1
 800e94a:	d102      	bne.n	800e952 <_isatty_r+0x1a>
 800e94c:	682b      	ldr	r3, [r5, #0]
 800e94e:	b103      	cbz	r3, 800e952 <_isatty_r+0x1a>
 800e950:	6023      	str	r3, [r4, #0]
 800e952:	bd38      	pop	{r3, r4, r5, pc}
 800e954:	200053b4 	.word	0x200053b4

0800e958 <_raise_r>:
 800e958:	291f      	cmp	r1, #31
 800e95a:	b538      	push	{r3, r4, r5, lr}
 800e95c:	4604      	mov	r4, r0
 800e95e:	460d      	mov	r5, r1
 800e960:	d904      	bls.n	800e96c <_raise_r+0x14>
 800e962:	2316      	movs	r3, #22
 800e964:	6003      	str	r3, [r0, #0]
 800e966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e96a:	bd38      	pop	{r3, r4, r5, pc}
 800e96c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e96e:	b112      	cbz	r2, 800e976 <_raise_r+0x1e>
 800e970:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e974:	b94b      	cbnz	r3, 800e98a <_raise_r+0x32>
 800e976:	4620      	mov	r0, r4
 800e978:	f000 f830 	bl	800e9dc <_getpid_r>
 800e97c:	462a      	mov	r2, r5
 800e97e:	4601      	mov	r1, r0
 800e980:	4620      	mov	r0, r4
 800e982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e986:	f000 b817 	b.w	800e9b8 <_kill_r>
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d00a      	beq.n	800e9a4 <_raise_r+0x4c>
 800e98e:	1c59      	adds	r1, r3, #1
 800e990:	d103      	bne.n	800e99a <_raise_r+0x42>
 800e992:	2316      	movs	r3, #22
 800e994:	6003      	str	r3, [r0, #0]
 800e996:	2001      	movs	r0, #1
 800e998:	e7e7      	b.n	800e96a <_raise_r+0x12>
 800e99a:	2400      	movs	r4, #0
 800e99c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e9a0:	4628      	mov	r0, r5
 800e9a2:	4798      	blx	r3
 800e9a4:	2000      	movs	r0, #0
 800e9a6:	e7e0      	b.n	800e96a <_raise_r+0x12>

0800e9a8 <raise>:
 800e9a8:	4b02      	ldr	r3, [pc, #8]	; (800e9b4 <raise+0xc>)
 800e9aa:	4601      	mov	r1, r0
 800e9ac:	6818      	ldr	r0, [r3, #0]
 800e9ae:	f7ff bfd3 	b.w	800e958 <_raise_r>
 800e9b2:	bf00      	nop
 800e9b4:	20000070 	.word	0x20000070

0800e9b8 <_kill_r>:
 800e9b8:	b538      	push	{r3, r4, r5, lr}
 800e9ba:	4d07      	ldr	r5, [pc, #28]	; (800e9d8 <_kill_r+0x20>)
 800e9bc:	2300      	movs	r3, #0
 800e9be:	4604      	mov	r4, r0
 800e9c0:	4608      	mov	r0, r1
 800e9c2:	4611      	mov	r1, r2
 800e9c4:	602b      	str	r3, [r5, #0]
 800e9c6:	f7f5 fbbf 	bl	8004148 <_kill>
 800e9ca:	1c43      	adds	r3, r0, #1
 800e9cc:	d102      	bne.n	800e9d4 <_kill_r+0x1c>
 800e9ce:	682b      	ldr	r3, [r5, #0]
 800e9d0:	b103      	cbz	r3, 800e9d4 <_kill_r+0x1c>
 800e9d2:	6023      	str	r3, [r4, #0]
 800e9d4:	bd38      	pop	{r3, r4, r5, pc}
 800e9d6:	bf00      	nop
 800e9d8:	200053b4 	.word	0x200053b4

0800e9dc <_getpid_r>:
 800e9dc:	f7f5 bbac 	b.w	8004138 <_getpid>

0800e9e0 <cos>:
 800e9e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9e2:	ec53 2b10 	vmov	r2, r3, d0
 800e9e6:	4826      	ldr	r0, [pc, #152]	; (800ea80 <cos+0xa0>)
 800e9e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e9ec:	4281      	cmp	r1, r0
 800e9ee:	dc06      	bgt.n	800e9fe <cos+0x1e>
 800e9f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ea78 <cos+0x98>
 800e9f4:	b005      	add	sp, #20
 800e9f6:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9fa:	f000 bdf5 	b.w	800f5e8 <__kernel_cos>
 800e9fe:	4821      	ldr	r0, [pc, #132]	; (800ea84 <cos+0xa4>)
 800ea00:	4281      	cmp	r1, r0
 800ea02:	dd09      	ble.n	800ea18 <cos+0x38>
 800ea04:	ee10 0a10 	vmov	r0, s0
 800ea08:	4619      	mov	r1, r3
 800ea0a:	f7f1 fc3d 	bl	8000288 <__aeabi_dsub>
 800ea0e:	ec41 0b10 	vmov	d0, r0, r1
 800ea12:	b005      	add	sp, #20
 800ea14:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea18:	4668      	mov	r0, sp
 800ea1a:	f000 f88d 	bl	800eb38 <__ieee754_rem_pio2>
 800ea1e:	f000 0003 	and.w	r0, r0, #3
 800ea22:	2801      	cmp	r0, #1
 800ea24:	d00b      	beq.n	800ea3e <cos+0x5e>
 800ea26:	2802      	cmp	r0, #2
 800ea28:	d016      	beq.n	800ea58 <cos+0x78>
 800ea2a:	b9e0      	cbnz	r0, 800ea66 <cos+0x86>
 800ea2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ea30:	ed9d 0b00 	vldr	d0, [sp]
 800ea34:	f000 fdd8 	bl	800f5e8 <__kernel_cos>
 800ea38:	ec51 0b10 	vmov	r0, r1, d0
 800ea3c:	e7e7      	b.n	800ea0e <cos+0x2e>
 800ea3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ea42:	ed9d 0b00 	vldr	d0, [sp]
 800ea46:	f000 fe97 	bl	800f778 <__kernel_sin>
 800ea4a:	ec53 2b10 	vmov	r2, r3, d0
 800ea4e:	ee10 0a10 	vmov	r0, s0
 800ea52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ea56:	e7da      	b.n	800ea0e <cos+0x2e>
 800ea58:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ea5c:	ed9d 0b00 	vldr	d0, [sp]
 800ea60:	f000 fdc2 	bl	800f5e8 <__kernel_cos>
 800ea64:	e7f1      	b.n	800ea4a <cos+0x6a>
 800ea66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ea6a:	ed9d 0b00 	vldr	d0, [sp]
 800ea6e:	2001      	movs	r0, #1
 800ea70:	f000 fe82 	bl	800f778 <__kernel_sin>
 800ea74:	e7e0      	b.n	800ea38 <cos+0x58>
 800ea76:	bf00      	nop
	...
 800ea80:	3fe921fb 	.word	0x3fe921fb
 800ea84:	7fefffff 	.word	0x7fefffff

0800ea88 <sin>:
 800ea88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea8a:	ec53 2b10 	vmov	r2, r3, d0
 800ea8e:	4828      	ldr	r0, [pc, #160]	; (800eb30 <sin+0xa8>)
 800ea90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ea94:	4281      	cmp	r1, r0
 800ea96:	dc07      	bgt.n	800eaa8 <sin+0x20>
 800ea98:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800eb28 <sin+0xa0>
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	b005      	add	sp, #20
 800eaa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800eaa4:	f000 be68 	b.w	800f778 <__kernel_sin>
 800eaa8:	4822      	ldr	r0, [pc, #136]	; (800eb34 <sin+0xac>)
 800eaaa:	4281      	cmp	r1, r0
 800eaac:	dd09      	ble.n	800eac2 <sin+0x3a>
 800eaae:	ee10 0a10 	vmov	r0, s0
 800eab2:	4619      	mov	r1, r3
 800eab4:	f7f1 fbe8 	bl	8000288 <__aeabi_dsub>
 800eab8:	ec41 0b10 	vmov	d0, r0, r1
 800eabc:	b005      	add	sp, #20
 800eabe:	f85d fb04 	ldr.w	pc, [sp], #4
 800eac2:	4668      	mov	r0, sp
 800eac4:	f000 f838 	bl	800eb38 <__ieee754_rem_pio2>
 800eac8:	f000 0003 	and.w	r0, r0, #3
 800eacc:	2801      	cmp	r0, #1
 800eace:	d00c      	beq.n	800eaea <sin+0x62>
 800ead0:	2802      	cmp	r0, #2
 800ead2:	d011      	beq.n	800eaf8 <sin+0x70>
 800ead4:	b9f0      	cbnz	r0, 800eb14 <sin+0x8c>
 800ead6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eada:	ed9d 0b00 	vldr	d0, [sp]
 800eade:	2001      	movs	r0, #1
 800eae0:	f000 fe4a 	bl	800f778 <__kernel_sin>
 800eae4:	ec51 0b10 	vmov	r0, r1, d0
 800eae8:	e7e6      	b.n	800eab8 <sin+0x30>
 800eaea:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eaee:	ed9d 0b00 	vldr	d0, [sp]
 800eaf2:	f000 fd79 	bl	800f5e8 <__kernel_cos>
 800eaf6:	e7f5      	b.n	800eae4 <sin+0x5c>
 800eaf8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eafc:	ed9d 0b00 	vldr	d0, [sp]
 800eb00:	2001      	movs	r0, #1
 800eb02:	f000 fe39 	bl	800f778 <__kernel_sin>
 800eb06:	ec53 2b10 	vmov	r2, r3, d0
 800eb0a:	ee10 0a10 	vmov	r0, s0
 800eb0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800eb12:	e7d1      	b.n	800eab8 <sin+0x30>
 800eb14:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb18:	ed9d 0b00 	vldr	d0, [sp]
 800eb1c:	f000 fd64 	bl	800f5e8 <__kernel_cos>
 800eb20:	e7f1      	b.n	800eb06 <sin+0x7e>
 800eb22:	bf00      	nop
 800eb24:	f3af 8000 	nop.w
	...
 800eb30:	3fe921fb 	.word	0x3fe921fb
 800eb34:	7fefffff 	.word	0x7fefffff

0800eb38 <__ieee754_rem_pio2>:
 800eb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb3c:	ed2d 8b02 	vpush	{d8}
 800eb40:	ec55 4b10 	vmov	r4, r5, d0
 800eb44:	4bca      	ldr	r3, [pc, #808]	; (800ee70 <__ieee754_rem_pio2+0x338>)
 800eb46:	b08b      	sub	sp, #44	; 0x2c
 800eb48:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800eb4c:	4598      	cmp	r8, r3
 800eb4e:	4682      	mov	sl, r0
 800eb50:	9502      	str	r5, [sp, #8]
 800eb52:	dc08      	bgt.n	800eb66 <__ieee754_rem_pio2+0x2e>
 800eb54:	2200      	movs	r2, #0
 800eb56:	2300      	movs	r3, #0
 800eb58:	ed80 0b00 	vstr	d0, [r0]
 800eb5c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eb60:	f04f 0b00 	mov.w	fp, #0
 800eb64:	e028      	b.n	800ebb8 <__ieee754_rem_pio2+0x80>
 800eb66:	4bc3      	ldr	r3, [pc, #780]	; (800ee74 <__ieee754_rem_pio2+0x33c>)
 800eb68:	4598      	cmp	r8, r3
 800eb6a:	dc78      	bgt.n	800ec5e <__ieee754_rem_pio2+0x126>
 800eb6c:	9b02      	ldr	r3, [sp, #8]
 800eb6e:	4ec2      	ldr	r6, [pc, #776]	; (800ee78 <__ieee754_rem_pio2+0x340>)
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	ee10 0a10 	vmov	r0, s0
 800eb76:	a3b0      	add	r3, pc, #704	; (adr r3, 800ee38 <__ieee754_rem_pio2+0x300>)
 800eb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7c:	4629      	mov	r1, r5
 800eb7e:	dd39      	ble.n	800ebf4 <__ieee754_rem_pio2+0xbc>
 800eb80:	f7f1 fb82 	bl	8000288 <__aeabi_dsub>
 800eb84:	45b0      	cmp	r8, r6
 800eb86:	4604      	mov	r4, r0
 800eb88:	460d      	mov	r5, r1
 800eb8a:	d01b      	beq.n	800ebc4 <__ieee754_rem_pio2+0x8c>
 800eb8c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ee40 <__ieee754_rem_pio2+0x308>)
 800eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb92:	f7f1 fb79 	bl	8000288 <__aeabi_dsub>
 800eb96:	4602      	mov	r2, r0
 800eb98:	460b      	mov	r3, r1
 800eb9a:	e9ca 2300 	strd	r2, r3, [sl]
 800eb9e:	4620      	mov	r0, r4
 800eba0:	4629      	mov	r1, r5
 800eba2:	f7f1 fb71 	bl	8000288 <__aeabi_dsub>
 800eba6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ee40 <__ieee754_rem_pio2+0x308>)
 800eba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebac:	f7f1 fb6c 	bl	8000288 <__aeabi_dsub>
 800ebb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ebb4:	f04f 0b01 	mov.w	fp, #1
 800ebb8:	4658      	mov	r0, fp
 800ebba:	b00b      	add	sp, #44	; 0x2c
 800ebbc:	ecbd 8b02 	vpop	{d8}
 800ebc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc4:	a3a0      	add	r3, pc, #640	; (adr r3, 800ee48 <__ieee754_rem_pio2+0x310>)
 800ebc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebca:	f7f1 fb5d 	bl	8000288 <__aeabi_dsub>
 800ebce:	a3a0      	add	r3, pc, #640	; (adr r3, 800ee50 <__ieee754_rem_pio2+0x318>)
 800ebd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd4:	4604      	mov	r4, r0
 800ebd6:	460d      	mov	r5, r1
 800ebd8:	f7f1 fb56 	bl	8000288 <__aeabi_dsub>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	460b      	mov	r3, r1
 800ebe0:	e9ca 2300 	strd	r2, r3, [sl]
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	4629      	mov	r1, r5
 800ebe8:	f7f1 fb4e 	bl	8000288 <__aeabi_dsub>
 800ebec:	a398      	add	r3, pc, #608	; (adr r3, 800ee50 <__ieee754_rem_pio2+0x318>)
 800ebee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf2:	e7db      	b.n	800ebac <__ieee754_rem_pio2+0x74>
 800ebf4:	f7f1 fb4a 	bl	800028c <__adddf3>
 800ebf8:	45b0      	cmp	r8, r6
 800ebfa:	4604      	mov	r4, r0
 800ebfc:	460d      	mov	r5, r1
 800ebfe:	d016      	beq.n	800ec2e <__ieee754_rem_pio2+0xf6>
 800ec00:	a38f      	add	r3, pc, #572	; (adr r3, 800ee40 <__ieee754_rem_pio2+0x308>)
 800ec02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec06:	f7f1 fb41 	bl	800028c <__adddf3>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	e9ca 2300 	strd	r2, r3, [sl]
 800ec12:	4620      	mov	r0, r4
 800ec14:	4629      	mov	r1, r5
 800ec16:	f7f1 fb37 	bl	8000288 <__aeabi_dsub>
 800ec1a:	a389      	add	r3, pc, #548	; (adr r3, 800ee40 <__ieee754_rem_pio2+0x308>)
 800ec1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec20:	f7f1 fb34 	bl	800028c <__adddf3>
 800ec24:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800ec28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec2c:	e7c4      	b.n	800ebb8 <__ieee754_rem_pio2+0x80>
 800ec2e:	a386      	add	r3, pc, #536	; (adr r3, 800ee48 <__ieee754_rem_pio2+0x310>)
 800ec30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec34:	f7f1 fb2a 	bl	800028c <__adddf3>
 800ec38:	a385      	add	r3, pc, #532	; (adr r3, 800ee50 <__ieee754_rem_pio2+0x318>)
 800ec3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3e:	4604      	mov	r4, r0
 800ec40:	460d      	mov	r5, r1
 800ec42:	f7f1 fb23 	bl	800028c <__adddf3>
 800ec46:	4602      	mov	r2, r0
 800ec48:	460b      	mov	r3, r1
 800ec4a:	e9ca 2300 	strd	r2, r3, [sl]
 800ec4e:	4620      	mov	r0, r4
 800ec50:	4629      	mov	r1, r5
 800ec52:	f7f1 fb19 	bl	8000288 <__aeabi_dsub>
 800ec56:	a37e      	add	r3, pc, #504	; (adr r3, 800ee50 <__ieee754_rem_pio2+0x318>)
 800ec58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5c:	e7e0      	b.n	800ec20 <__ieee754_rem_pio2+0xe8>
 800ec5e:	4b87      	ldr	r3, [pc, #540]	; (800ee7c <__ieee754_rem_pio2+0x344>)
 800ec60:	4598      	cmp	r8, r3
 800ec62:	f300 80d8 	bgt.w	800ee16 <__ieee754_rem_pio2+0x2de>
 800ec66:	f000 fe45 	bl	800f8f4 <fabs>
 800ec6a:	ec55 4b10 	vmov	r4, r5, d0
 800ec6e:	ee10 0a10 	vmov	r0, s0
 800ec72:	a379      	add	r3, pc, #484	; (adr r3, 800ee58 <__ieee754_rem_pio2+0x320>)
 800ec74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec78:	4629      	mov	r1, r5
 800ec7a:	f7f1 fcbd 	bl	80005f8 <__aeabi_dmul>
 800ec7e:	4b80      	ldr	r3, [pc, #512]	; (800ee80 <__ieee754_rem_pio2+0x348>)
 800ec80:	2200      	movs	r2, #0
 800ec82:	f7f1 fb03 	bl	800028c <__adddf3>
 800ec86:	f7f1 ff67 	bl	8000b58 <__aeabi_d2iz>
 800ec8a:	4683      	mov	fp, r0
 800ec8c:	f7f1 fc4a 	bl	8000524 <__aeabi_i2d>
 800ec90:	4602      	mov	r2, r0
 800ec92:	460b      	mov	r3, r1
 800ec94:	ec43 2b18 	vmov	d8, r2, r3
 800ec98:	a367      	add	r3, pc, #412	; (adr r3, 800ee38 <__ieee754_rem_pio2+0x300>)
 800ec9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9e:	f7f1 fcab 	bl	80005f8 <__aeabi_dmul>
 800eca2:	4602      	mov	r2, r0
 800eca4:	460b      	mov	r3, r1
 800eca6:	4620      	mov	r0, r4
 800eca8:	4629      	mov	r1, r5
 800ecaa:	f7f1 faed 	bl	8000288 <__aeabi_dsub>
 800ecae:	a364      	add	r3, pc, #400	; (adr r3, 800ee40 <__ieee754_rem_pio2+0x308>)
 800ecb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb4:	4606      	mov	r6, r0
 800ecb6:	460f      	mov	r7, r1
 800ecb8:	ec51 0b18 	vmov	r0, r1, d8
 800ecbc:	f7f1 fc9c 	bl	80005f8 <__aeabi_dmul>
 800ecc0:	f1bb 0f1f 	cmp.w	fp, #31
 800ecc4:	4604      	mov	r4, r0
 800ecc6:	460d      	mov	r5, r1
 800ecc8:	dc0d      	bgt.n	800ece6 <__ieee754_rem_pio2+0x1ae>
 800ecca:	4b6e      	ldr	r3, [pc, #440]	; (800ee84 <__ieee754_rem_pio2+0x34c>)
 800eccc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800ecd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecd4:	4543      	cmp	r3, r8
 800ecd6:	d006      	beq.n	800ece6 <__ieee754_rem_pio2+0x1ae>
 800ecd8:	4622      	mov	r2, r4
 800ecda:	462b      	mov	r3, r5
 800ecdc:	4630      	mov	r0, r6
 800ecde:	4639      	mov	r1, r7
 800ece0:	f7f1 fad2 	bl	8000288 <__aeabi_dsub>
 800ece4:	e00e      	b.n	800ed04 <__ieee754_rem_pio2+0x1cc>
 800ece6:	462b      	mov	r3, r5
 800ece8:	4622      	mov	r2, r4
 800ecea:	4630      	mov	r0, r6
 800ecec:	4639      	mov	r1, r7
 800ecee:	f7f1 facb 	bl	8000288 <__aeabi_dsub>
 800ecf2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ecf6:	9303      	str	r3, [sp, #12]
 800ecf8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ecfc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ed00:	2b10      	cmp	r3, #16
 800ed02:	dc02      	bgt.n	800ed0a <__ieee754_rem_pio2+0x1d2>
 800ed04:	e9ca 0100 	strd	r0, r1, [sl]
 800ed08:	e039      	b.n	800ed7e <__ieee754_rem_pio2+0x246>
 800ed0a:	a34f      	add	r3, pc, #316	; (adr r3, 800ee48 <__ieee754_rem_pio2+0x310>)
 800ed0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed10:	ec51 0b18 	vmov	r0, r1, d8
 800ed14:	f7f1 fc70 	bl	80005f8 <__aeabi_dmul>
 800ed18:	4604      	mov	r4, r0
 800ed1a:	460d      	mov	r5, r1
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	460b      	mov	r3, r1
 800ed20:	4630      	mov	r0, r6
 800ed22:	4639      	mov	r1, r7
 800ed24:	f7f1 fab0 	bl	8000288 <__aeabi_dsub>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	4680      	mov	r8, r0
 800ed2e:	4689      	mov	r9, r1
 800ed30:	4630      	mov	r0, r6
 800ed32:	4639      	mov	r1, r7
 800ed34:	f7f1 faa8 	bl	8000288 <__aeabi_dsub>
 800ed38:	4622      	mov	r2, r4
 800ed3a:	462b      	mov	r3, r5
 800ed3c:	f7f1 faa4 	bl	8000288 <__aeabi_dsub>
 800ed40:	a343      	add	r3, pc, #268	; (adr r3, 800ee50 <__ieee754_rem_pio2+0x318>)
 800ed42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed46:	4604      	mov	r4, r0
 800ed48:	460d      	mov	r5, r1
 800ed4a:	ec51 0b18 	vmov	r0, r1, d8
 800ed4e:	f7f1 fc53 	bl	80005f8 <__aeabi_dmul>
 800ed52:	4622      	mov	r2, r4
 800ed54:	462b      	mov	r3, r5
 800ed56:	f7f1 fa97 	bl	8000288 <__aeabi_dsub>
 800ed5a:	4602      	mov	r2, r0
 800ed5c:	460b      	mov	r3, r1
 800ed5e:	4604      	mov	r4, r0
 800ed60:	460d      	mov	r5, r1
 800ed62:	4640      	mov	r0, r8
 800ed64:	4649      	mov	r1, r9
 800ed66:	f7f1 fa8f 	bl	8000288 <__aeabi_dsub>
 800ed6a:	9a03      	ldr	r2, [sp, #12]
 800ed6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ed70:	1ad3      	subs	r3, r2, r3
 800ed72:	2b31      	cmp	r3, #49	; 0x31
 800ed74:	dc24      	bgt.n	800edc0 <__ieee754_rem_pio2+0x288>
 800ed76:	e9ca 0100 	strd	r0, r1, [sl]
 800ed7a:	4646      	mov	r6, r8
 800ed7c:	464f      	mov	r7, r9
 800ed7e:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed82:	4630      	mov	r0, r6
 800ed84:	4642      	mov	r2, r8
 800ed86:	464b      	mov	r3, r9
 800ed88:	4639      	mov	r1, r7
 800ed8a:	f7f1 fa7d 	bl	8000288 <__aeabi_dsub>
 800ed8e:	462b      	mov	r3, r5
 800ed90:	4622      	mov	r2, r4
 800ed92:	f7f1 fa79 	bl	8000288 <__aeabi_dsub>
 800ed96:	9b02      	ldr	r3, [sp, #8]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed9e:	f6bf af0b 	bge.w	800ebb8 <__ieee754_rem_pio2+0x80>
 800eda2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800eda6:	f8ca 3004 	str.w	r3, [sl, #4]
 800edaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edae:	f8ca 8000 	str.w	r8, [sl]
 800edb2:	f8ca 0008 	str.w	r0, [sl, #8]
 800edb6:	f8ca 300c 	str.w	r3, [sl, #12]
 800edba:	f1cb 0b00 	rsb	fp, fp, #0
 800edbe:	e6fb      	b.n	800ebb8 <__ieee754_rem_pio2+0x80>
 800edc0:	a327      	add	r3, pc, #156	; (adr r3, 800ee60 <__ieee754_rem_pio2+0x328>)
 800edc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc6:	ec51 0b18 	vmov	r0, r1, d8
 800edca:	f7f1 fc15 	bl	80005f8 <__aeabi_dmul>
 800edce:	4604      	mov	r4, r0
 800edd0:	460d      	mov	r5, r1
 800edd2:	4602      	mov	r2, r0
 800edd4:	460b      	mov	r3, r1
 800edd6:	4640      	mov	r0, r8
 800edd8:	4649      	mov	r1, r9
 800edda:	f7f1 fa55 	bl	8000288 <__aeabi_dsub>
 800edde:	4602      	mov	r2, r0
 800ede0:	460b      	mov	r3, r1
 800ede2:	4606      	mov	r6, r0
 800ede4:	460f      	mov	r7, r1
 800ede6:	4640      	mov	r0, r8
 800ede8:	4649      	mov	r1, r9
 800edea:	f7f1 fa4d 	bl	8000288 <__aeabi_dsub>
 800edee:	4622      	mov	r2, r4
 800edf0:	462b      	mov	r3, r5
 800edf2:	f7f1 fa49 	bl	8000288 <__aeabi_dsub>
 800edf6:	a31c      	add	r3, pc, #112	; (adr r3, 800ee68 <__ieee754_rem_pio2+0x330>)
 800edf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfc:	4604      	mov	r4, r0
 800edfe:	460d      	mov	r5, r1
 800ee00:	ec51 0b18 	vmov	r0, r1, d8
 800ee04:	f7f1 fbf8 	bl	80005f8 <__aeabi_dmul>
 800ee08:	4622      	mov	r2, r4
 800ee0a:	462b      	mov	r3, r5
 800ee0c:	f7f1 fa3c 	bl	8000288 <__aeabi_dsub>
 800ee10:	4604      	mov	r4, r0
 800ee12:	460d      	mov	r5, r1
 800ee14:	e760      	b.n	800ecd8 <__ieee754_rem_pio2+0x1a0>
 800ee16:	4b1c      	ldr	r3, [pc, #112]	; (800ee88 <__ieee754_rem_pio2+0x350>)
 800ee18:	4598      	cmp	r8, r3
 800ee1a:	dd37      	ble.n	800ee8c <__ieee754_rem_pio2+0x354>
 800ee1c:	ee10 2a10 	vmov	r2, s0
 800ee20:	462b      	mov	r3, r5
 800ee22:	4620      	mov	r0, r4
 800ee24:	4629      	mov	r1, r5
 800ee26:	f7f1 fa2f 	bl	8000288 <__aeabi_dsub>
 800ee2a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee2e:	e9ca 0100 	strd	r0, r1, [sl]
 800ee32:	e695      	b.n	800eb60 <__ieee754_rem_pio2+0x28>
 800ee34:	f3af 8000 	nop.w
 800ee38:	54400000 	.word	0x54400000
 800ee3c:	3ff921fb 	.word	0x3ff921fb
 800ee40:	1a626331 	.word	0x1a626331
 800ee44:	3dd0b461 	.word	0x3dd0b461
 800ee48:	1a600000 	.word	0x1a600000
 800ee4c:	3dd0b461 	.word	0x3dd0b461
 800ee50:	2e037073 	.word	0x2e037073
 800ee54:	3ba3198a 	.word	0x3ba3198a
 800ee58:	6dc9c883 	.word	0x6dc9c883
 800ee5c:	3fe45f30 	.word	0x3fe45f30
 800ee60:	2e000000 	.word	0x2e000000
 800ee64:	3ba3198a 	.word	0x3ba3198a
 800ee68:	252049c1 	.word	0x252049c1
 800ee6c:	397b839a 	.word	0x397b839a
 800ee70:	3fe921fb 	.word	0x3fe921fb
 800ee74:	4002d97b 	.word	0x4002d97b
 800ee78:	3ff921fb 	.word	0x3ff921fb
 800ee7c:	413921fb 	.word	0x413921fb
 800ee80:	3fe00000 	.word	0x3fe00000
 800ee84:	08010a44 	.word	0x08010a44
 800ee88:	7fefffff 	.word	0x7fefffff
 800ee8c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800ee90:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800ee94:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800ee98:	4620      	mov	r0, r4
 800ee9a:	460d      	mov	r5, r1
 800ee9c:	f7f1 fe5c 	bl	8000b58 <__aeabi_d2iz>
 800eea0:	f7f1 fb40 	bl	8000524 <__aeabi_i2d>
 800eea4:	4602      	mov	r2, r0
 800eea6:	460b      	mov	r3, r1
 800eea8:	4620      	mov	r0, r4
 800eeaa:	4629      	mov	r1, r5
 800eeac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eeb0:	f7f1 f9ea 	bl	8000288 <__aeabi_dsub>
 800eeb4:	4b21      	ldr	r3, [pc, #132]	; (800ef3c <__ieee754_rem_pio2+0x404>)
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	f7f1 fb9e 	bl	80005f8 <__aeabi_dmul>
 800eebc:	460d      	mov	r5, r1
 800eebe:	4604      	mov	r4, r0
 800eec0:	f7f1 fe4a 	bl	8000b58 <__aeabi_d2iz>
 800eec4:	f7f1 fb2e 	bl	8000524 <__aeabi_i2d>
 800eec8:	4602      	mov	r2, r0
 800eeca:	460b      	mov	r3, r1
 800eecc:	4620      	mov	r0, r4
 800eece:	4629      	mov	r1, r5
 800eed0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eed4:	f7f1 f9d8 	bl	8000288 <__aeabi_dsub>
 800eed8:	4b18      	ldr	r3, [pc, #96]	; (800ef3c <__ieee754_rem_pio2+0x404>)
 800eeda:	2200      	movs	r2, #0
 800eedc:	f7f1 fb8c 	bl	80005f8 <__aeabi_dmul>
 800eee0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eee4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800eee8:	2703      	movs	r7, #3
 800eeea:	2400      	movs	r4, #0
 800eeec:	2500      	movs	r5, #0
 800eeee:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800eef2:	4622      	mov	r2, r4
 800eef4:	462b      	mov	r3, r5
 800eef6:	46b9      	mov	r9, r7
 800eef8:	3f01      	subs	r7, #1
 800eefa:	f7f1 fde5 	bl	8000ac8 <__aeabi_dcmpeq>
 800eefe:	2800      	cmp	r0, #0
 800ef00:	d1f5      	bne.n	800eeee <__ieee754_rem_pio2+0x3b6>
 800ef02:	4b0f      	ldr	r3, [pc, #60]	; (800ef40 <__ieee754_rem_pio2+0x408>)
 800ef04:	9301      	str	r3, [sp, #4]
 800ef06:	2302      	movs	r3, #2
 800ef08:	9300      	str	r3, [sp, #0]
 800ef0a:	4632      	mov	r2, r6
 800ef0c:	464b      	mov	r3, r9
 800ef0e:	4651      	mov	r1, sl
 800ef10:	a804      	add	r0, sp, #16
 800ef12:	f000 f819 	bl	800ef48 <__kernel_rem_pio2>
 800ef16:	9b02      	ldr	r3, [sp, #8]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	4683      	mov	fp, r0
 800ef1c:	f6bf ae4c 	bge.w	800ebb8 <__ieee754_rem_pio2+0x80>
 800ef20:	e9da 2100 	ldrd	r2, r1, [sl]
 800ef24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef28:	e9ca 2300 	strd	r2, r3, [sl]
 800ef2c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ef30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef34:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ef38:	e73f      	b.n	800edba <__ieee754_rem_pio2+0x282>
 800ef3a:	bf00      	nop
 800ef3c:	41700000 	.word	0x41700000
 800ef40:	08010ac4 	.word	0x08010ac4
 800ef44:	00000000 	.word	0x00000000

0800ef48 <__kernel_rem_pio2>:
 800ef48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef4c:	ed2d 8b02 	vpush	{d8}
 800ef50:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ef54:	f112 0f14 	cmn.w	r2, #20
 800ef58:	9306      	str	r3, [sp, #24]
 800ef5a:	9104      	str	r1, [sp, #16]
 800ef5c:	4bc2      	ldr	r3, [pc, #776]	; (800f268 <__kernel_rem_pio2+0x320>)
 800ef5e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ef60:	9009      	str	r0, [sp, #36]	; 0x24
 800ef62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	9b06      	ldr	r3, [sp, #24]
 800ef6a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ef6e:	bfa8      	it	ge
 800ef70:	1ed4      	subge	r4, r2, #3
 800ef72:	9305      	str	r3, [sp, #20]
 800ef74:	bfb2      	itee	lt
 800ef76:	2400      	movlt	r4, #0
 800ef78:	2318      	movge	r3, #24
 800ef7a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ef7e:	f06f 0317 	mvn.w	r3, #23
 800ef82:	fb04 3303 	mla	r3, r4, r3, r3
 800ef86:	eb03 0a02 	add.w	sl, r3, r2
 800ef8a:	9b00      	ldr	r3, [sp, #0]
 800ef8c:	9a05      	ldr	r2, [sp, #20]
 800ef8e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800f258 <__kernel_rem_pio2+0x310>
 800ef92:	eb03 0802 	add.w	r8, r3, r2
 800ef96:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ef98:	1aa7      	subs	r7, r4, r2
 800ef9a:	ae20      	add	r6, sp, #128	; 0x80
 800ef9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800efa0:	2500      	movs	r5, #0
 800efa2:	4545      	cmp	r5, r8
 800efa4:	dd13      	ble.n	800efce <__kernel_rem_pio2+0x86>
 800efa6:	9b06      	ldr	r3, [sp, #24]
 800efa8:	aa20      	add	r2, sp, #128	; 0x80
 800efaa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800efae:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800efb2:	f04f 0800 	mov.w	r8, #0
 800efb6:	9b00      	ldr	r3, [sp, #0]
 800efb8:	4598      	cmp	r8, r3
 800efba:	dc31      	bgt.n	800f020 <__kernel_rem_pio2+0xd8>
 800efbc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800f258 <__kernel_rem_pio2+0x310>
 800efc0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800efc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800efc8:	462f      	mov	r7, r5
 800efca:	2600      	movs	r6, #0
 800efcc:	e01b      	b.n	800f006 <__kernel_rem_pio2+0xbe>
 800efce:	42ef      	cmn	r7, r5
 800efd0:	d407      	bmi.n	800efe2 <__kernel_rem_pio2+0x9a>
 800efd2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800efd6:	f7f1 faa5 	bl	8000524 <__aeabi_i2d>
 800efda:	e8e6 0102 	strd	r0, r1, [r6], #8
 800efde:	3501      	adds	r5, #1
 800efe0:	e7df      	b.n	800efa2 <__kernel_rem_pio2+0x5a>
 800efe2:	ec51 0b18 	vmov	r0, r1, d8
 800efe6:	e7f8      	b.n	800efda <__kernel_rem_pio2+0x92>
 800efe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800eff0:	f7f1 fb02 	bl	80005f8 <__aeabi_dmul>
 800eff4:	4602      	mov	r2, r0
 800eff6:	460b      	mov	r3, r1
 800eff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800effc:	f7f1 f946 	bl	800028c <__adddf3>
 800f000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f004:	3601      	adds	r6, #1
 800f006:	9b05      	ldr	r3, [sp, #20]
 800f008:	429e      	cmp	r6, r3
 800f00a:	f1a7 0708 	sub.w	r7, r7, #8
 800f00e:	ddeb      	ble.n	800efe8 <__kernel_rem_pio2+0xa0>
 800f010:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f014:	f108 0801 	add.w	r8, r8, #1
 800f018:	ecab 7b02 	vstmia	fp!, {d7}
 800f01c:	3508      	adds	r5, #8
 800f01e:	e7ca      	b.n	800efb6 <__kernel_rem_pio2+0x6e>
 800f020:	9b00      	ldr	r3, [sp, #0]
 800f022:	aa0c      	add	r2, sp, #48	; 0x30
 800f024:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f028:	930b      	str	r3, [sp, #44]	; 0x2c
 800f02a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f02c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f030:	9c00      	ldr	r4, [sp, #0]
 800f032:	930a      	str	r3, [sp, #40]	; 0x28
 800f034:	00e3      	lsls	r3, r4, #3
 800f036:	9308      	str	r3, [sp, #32]
 800f038:	ab98      	add	r3, sp, #608	; 0x260
 800f03a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f03e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f042:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800f046:	ab70      	add	r3, sp, #448	; 0x1c0
 800f048:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f04c:	46c3      	mov	fp, r8
 800f04e:	46a1      	mov	r9, r4
 800f050:	f1b9 0f00 	cmp.w	r9, #0
 800f054:	f1a5 0508 	sub.w	r5, r5, #8
 800f058:	dc77      	bgt.n	800f14a <__kernel_rem_pio2+0x202>
 800f05a:	ec47 6b10 	vmov	d0, r6, r7
 800f05e:	4650      	mov	r0, sl
 800f060:	f000 fc52 	bl	800f908 <scalbn>
 800f064:	ec57 6b10 	vmov	r6, r7, d0
 800f068:	2200      	movs	r2, #0
 800f06a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f06e:	ee10 0a10 	vmov	r0, s0
 800f072:	4639      	mov	r1, r7
 800f074:	f7f1 fac0 	bl	80005f8 <__aeabi_dmul>
 800f078:	ec41 0b10 	vmov	d0, r0, r1
 800f07c:	f000 fcc4 	bl	800fa08 <floor>
 800f080:	4b7a      	ldr	r3, [pc, #488]	; (800f26c <__kernel_rem_pio2+0x324>)
 800f082:	ec51 0b10 	vmov	r0, r1, d0
 800f086:	2200      	movs	r2, #0
 800f088:	f7f1 fab6 	bl	80005f8 <__aeabi_dmul>
 800f08c:	4602      	mov	r2, r0
 800f08e:	460b      	mov	r3, r1
 800f090:	4630      	mov	r0, r6
 800f092:	4639      	mov	r1, r7
 800f094:	f7f1 f8f8 	bl	8000288 <__aeabi_dsub>
 800f098:	460f      	mov	r7, r1
 800f09a:	4606      	mov	r6, r0
 800f09c:	f7f1 fd5c 	bl	8000b58 <__aeabi_d2iz>
 800f0a0:	9002      	str	r0, [sp, #8]
 800f0a2:	f7f1 fa3f 	bl	8000524 <__aeabi_i2d>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	4639      	mov	r1, r7
 800f0ae:	f7f1 f8eb 	bl	8000288 <__aeabi_dsub>
 800f0b2:	f1ba 0f00 	cmp.w	sl, #0
 800f0b6:	4606      	mov	r6, r0
 800f0b8:	460f      	mov	r7, r1
 800f0ba:	dd6d      	ble.n	800f198 <__kernel_rem_pio2+0x250>
 800f0bc:	1e61      	subs	r1, r4, #1
 800f0be:	ab0c      	add	r3, sp, #48	; 0x30
 800f0c0:	9d02      	ldr	r5, [sp, #8]
 800f0c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f0c6:	f1ca 0018 	rsb	r0, sl, #24
 800f0ca:	fa43 f200 	asr.w	r2, r3, r0
 800f0ce:	4415      	add	r5, r2
 800f0d0:	4082      	lsls	r2, r0
 800f0d2:	1a9b      	subs	r3, r3, r2
 800f0d4:	aa0c      	add	r2, sp, #48	; 0x30
 800f0d6:	9502      	str	r5, [sp, #8]
 800f0d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f0dc:	f1ca 0217 	rsb	r2, sl, #23
 800f0e0:	fa43 fb02 	asr.w	fp, r3, r2
 800f0e4:	f1bb 0f00 	cmp.w	fp, #0
 800f0e8:	dd65      	ble.n	800f1b6 <__kernel_rem_pio2+0x26e>
 800f0ea:	9b02      	ldr	r3, [sp, #8]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	9302      	str	r3, [sp, #8]
 800f0f2:	4615      	mov	r5, r2
 800f0f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f0f8:	4294      	cmp	r4, r2
 800f0fa:	f300 809f 	bgt.w	800f23c <__kernel_rem_pio2+0x2f4>
 800f0fe:	f1ba 0f00 	cmp.w	sl, #0
 800f102:	dd07      	ble.n	800f114 <__kernel_rem_pio2+0x1cc>
 800f104:	f1ba 0f01 	cmp.w	sl, #1
 800f108:	f000 80c1 	beq.w	800f28e <__kernel_rem_pio2+0x346>
 800f10c:	f1ba 0f02 	cmp.w	sl, #2
 800f110:	f000 80c7 	beq.w	800f2a2 <__kernel_rem_pio2+0x35a>
 800f114:	f1bb 0f02 	cmp.w	fp, #2
 800f118:	d14d      	bne.n	800f1b6 <__kernel_rem_pio2+0x26e>
 800f11a:	4632      	mov	r2, r6
 800f11c:	463b      	mov	r3, r7
 800f11e:	4954      	ldr	r1, [pc, #336]	; (800f270 <__kernel_rem_pio2+0x328>)
 800f120:	2000      	movs	r0, #0
 800f122:	f7f1 f8b1 	bl	8000288 <__aeabi_dsub>
 800f126:	4606      	mov	r6, r0
 800f128:	460f      	mov	r7, r1
 800f12a:	2d00      	cmp	r5, #0
 800f12c:	d043      	beq.n	800f1b6 <__kernel_rem_pio2+0x26e>
 800f12e:	4650      	mov	r0, sl
 800f130:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800f260 <__kernel_rem_pio2+0x318>
 800f134:	f000 fbe8 	bl	800f908 <scalbn>
 800f138:	4630      	mov	r0, r6
 800f13a:	4639      	mov	r1, r7
 800f13c:	ec53 2b10 	vmov	r2, r3, d0
 800f140:	f7f1 f8a2 	bl	8000288 <__aeabi_dsub>
 800f144:	4606      	mov	r6, r0
 800f146:	460f      	mov	r7, r1
 800f148:	e035      	b.n	800f1b6 <__kernel_rem_pio2+0x26e>
 800f14a:	4b4a      	ldr	r3, [pc, #296]	; (800f274 <__kernel_rem_pio2+0x32c>)
 800f14c:	2200      	movs	r2, #0
 800f14e:	4630      	mov	r0, r6
 800f150:	4639      	mov	r1, r7
 800f152:	f7f1 fa51 	bl	80005f8 <__aeabi_dmul>
 800f156:	f7f1 fcff 	bl	8000b58 <__aeabi_d2iz>
 800f15a:	f7f1 f9e3 	bl	8000524 <__aeabi_i2d>
 800f15e:	4602      	mov	r2, r0
 800f160:	460b      	mov	r3, r1
 800f162:	ec43 2b18 	vmov	d8, r2, r3
 800f166:	4b44      	ldr	r3, [pc, #272]	; (800f278 <__kernel_rem_pio2+0x330>)
 800f168:	2200      	movs	r2, #0
 800f16a:	f7f1 fa45 	bl	80005f8 <__aeabi_dmul>
 800f16e:	4602      	mov	r2, r0
 800f170:	460b      	mov	r3, r1
 800f172:	4630      	mov	r0, r6
 800f174:	4639      	mov	r1, r7
 800f176:	f7f1 f887 	bl	8000288 <__aeabi_dsub>
 800f17a:	f7f1 fced 	bl	8000b58 <__aeabi_d2iz>
 800f17e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f182:	f84b 0b04 	str.w	r0, [fp], #4
 800f186:	ec51 0b18 	vmov	r0, r1, d8
 800f18a:	f7f1 f87f 	bl	800028c <__adddf3>
 800f18e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f192:	4606      	mov	r6, r0
 800f194:	460f      	mov	r7, r1
 800f196:	e75b      	b.n	800f050 <__kernel_rem_pio2+0x108>
 800f198:	d106      	bne.n	800f1a8 <__kernel_rem_pio2+0x260>
 800f19a:	1e63      	subs	r3, r4, #1
 800f19c:	aa0c      	add	r2, sp, #48	; 0x30
 800f19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1a2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800f1a6:	e79d      	b.n	800f0e4 <__kernel_rem_pio2+0x19c>
 800f1a8:	4b34      	ldr	r3, [pc, #208]	; (800f27c <__kernel_rem_pio2+0x334>)
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f7f1 fcaa 	bl	8000b04 <__aeabi_dcmpge>
 800f1b0:	2800      	cmp	r0, #0
 800f1b2:	d140      	bne.n	800f236 <__kernel_rem_pio2+0x2ee>
 800f1b4:	4683      	mov	fp, r0
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	4630      	mov	r0, r6
 800f1bc:	4639      	mov	r1, r7
 800f1be:	f7f1 fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1c2:	2800      	cmp	r0, #0
 800f1c4:	f000 80c1 	beq.w	800f34a <__kernel_rem_pio2+0x402>
 800f1c8:	1e65      	subs	r5, r4, #1
 800f1ca:	462b      	mov	r3, r5
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	9900      	ldr	r1, [sp, #0]
 800f1d0:	428b      	cmp	r3, r1
 800f1d2:	da6d      	bge.n	800f2b0 <__kernel_rem_pio2+0x368>
 800f1d4:	2a00      	cmp	r2, #0
 800f1d6:	f000 808a 	beq.w	800f2ee <__kernel_rem_pio2+0x3a6>
 800f1da:	ab0c      	add	r3, sp, #48	; 0x30
 800f1dc:	f1aa 0a18 	sub.w	sl, sl, #24
 800f1e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	f000 80ae 	beq.w	800f346 <__kernel_rem_pio2+0x3fe>
 800f1ea:	4650      	mov	r0, sl
 800f1ec:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800f260 <__kernel_rem_pio2+0x318>
 800f1f0:	f000 fb8a 	bl	800f908 <scalbn>
 800f1f4:	1c6b      	adds	r3, r5, #1
 800f1f6:	00da      	lsls	r2, r3, #3
 800f1f8:	9205      	str	r2, [sp, #20]
 800f1fa:	ec57 6b10 	vmov	r6, r7, d0
 800f1fe:	aa70      	add	r2, sp, #448	; 0x1c0
 800f200:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800f274 <__kernel_rem_pio2+0x32c>
 800f204:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800f208:	462c      	mov	r4, r5
 800f20a:	f04f 0800 	mov.w	r8, #0
 800f20e:	2c00      	cmp	r4, #0
 800f210:	f280 80d4 	bge.w	800f3bc <__kernel_rem_pio2+0x474>
 800f214:	462c      	mov	r4, r5
 800f216:	2c00      	cmp	r4, #0
 800f218:	f2c0 8102 	blt.w	800f420 <__kernel_rem_pio2+0x4d8>
 800f21c:	4b18      	ldr	r3, [pc, #96]	; (800f280 <__kernel_rem_pio2+0x338>)
 800f21e:	461e      	mov	r6, r3
 800f220:	ab70      	add	r3, sp, #448	; 0x1c0
 800f222:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800f226:	1b2b      	subs	r3, r5, r4
 800f228:	f04f 0900 	mov.w	r9, #0
 800f22c:	f04f 0a00 	mov.w	sl, #0
 800f230:	2700      	movs	r7, #0
 800f232:	9306      	str	r3, [sp, #24]
 800f234:	e0e6      	b.n	800f404 <__kernel_rem_pio2+0x4bc>
 800f236:	f04f 0b02 	mov.w	fp, #2
 800f23a:	e756      	b.n	800f0ea <__kernel_rem_pio2+0x1a2>
 800f23c:	f8d8 3000 	ldr.w	r3, [r8]
 800f240:	bb05      	cbnz	r5, 800f284 <__kernel_rem_pio2+0x33c>
 800f242:	b123      	cbz	r3, 800f24e <__kernel_rem_pio2+0x306>
 800f244:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f248:	f8c8 3000 	str.w	r3, [r8]
 800f24c:	2301      	movs	r3, #1
 800f24e:	3201      	adds	r2, #1
 800f250:	f108 0804 	add.w	r8, r8, #4
 800f254:	461d      	mov	r5, r3
 800f256:	e74f      	b.n	800f0f8 <__kernel_rem_pio2+0x1b0>
	...
 800f264:	3ff00000 	.word	0x3ff00000
 800f268:	08010c10 	.word	0x08010c10
 800f26c:	40200000 	.word	0x40200000
 800f270:	3ff00000 	.word	0x3ff00000
 800f274:	3e700000 	.word	0x3e700000
 800f278:	41700000 	.word	0x41700000
 800f27c:	3fe00000 	.word	0x3fe00000
 800f280:	08010bd0 	.word	0x08010bd0
 800f284:	1acb      	subs	r3, r1, r3
 800f286:	f8c8 3000 	str.w	r3, [r8]
 800f28a:	462b      	mov	r3, r5
 800f28c:	e7df      	b.n	800f24e <__kernel_rem_pio2+0x306>
 800f28e:	1e62      	subs	r2, r4, #1
 800f290:	ab0c      	add	r3, sp, #48	; 0x30
 800f292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f296:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f29a:	a90c      	add	r1, sp, #48	; 0x30
 800f29c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f2a0:	e738      	b.n	800f114 <__kernel_rem_pio2+0x1cc>
 800f2a2:	1e62      	subs	r2, r4, #1
 800f2a4:	ab0c      	add	r3, sp, #48	; 0x30
 800f2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f2ae:	e7f4      	b.n	800f29a <__kernel_rem_pio2+0x352>
 800f2b0:	a90c      	add	r1, sp, #48	; 0x30
 800f2b2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f2b6:	3b01      	subs	r3, #1
 800f2b8:	430a      	orrs	r2, r1
 800f2ba:	e788      	b.n	800f1ce <__kernel_rem_pio2+0x286>
 800f2bc:	3301      	adds	r3, #1
 800f2be:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f2c2:	2900      	cmp	r1, #0
 800f2c4:	d0fa      	beq.n	800f2bc <__kernel_rem_pio2+0x374>
 800f2c6:	9a08      	ldr	r2, [sp, #32]
 800f2c8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800f2cc:	446a      	add	r2, sp
 800f2ce:	3a98      	subs	r2, #152	; 0x98
 800f2d0:	9208      	str	r2, [sp, #32]
 800f2d2:	9a06      	ldr	r2, [sp, #24]
 800f2d4:	a920      	add	r1, sp, #128	; 0x80
 800f2d6:	18a2      	adds	r2, r4, r2
 800f2d8:	18e3      	adds	r3, r4, r3
 800f2da:	f104 0801 	add.w	r8, r4, #1
 800f2de:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800f2e2:	9302      	str	r3, [sp, #8]
 800f2e4:	9b02      	ldr	r3, [sp, #8]
 800f2e6:	4543      	cmp	r3, r8
 800f2e8:	da04      	bge.n	800f2f4 <__kernel_rem_pio2+0x3ac>
 800f2ea:	461c      	mov	r4, r3
 800f2ec:	e6a2      	b.n	800f034 <__kernel_rem_pio2+0xec>
 800f2ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	e7e4      	b.n	800f2be <__kernel_rem_pio2+0x376>
 800f2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2f6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f2fa:	f7f1 f913 	bl	8000524 <__aeabi_i2d>
 800f2fe:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f304:	46ab      	mov	fp, r5
 800f306:	461c      	mov	r4, r3
 800f308:	f04f 0900 	mov.w	r9, #0
 800f30c:	2600      	movs	r6, #0
 800f30e:	2700      	movs	r7, #0
 800f310:	9b05      	ldr	r3, [sp, #20]
 800f312:	4599      	cmp	r9, r3
 800f314:	dd06      	ble.n	800f324 <__kernel_rem_pio2+0x3dc>
 800f316:	9b08      	ldr	r3, [sp, #32]
 800f318:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f31c:	f108 0801 	add.w	r8, r8, #1
 800f320:	9308      	str	r3, [sp, #32]
 800f322:	e7df      	b.n	800f2e4 <__kernel_rem_pio2+0x39c>
 800f324:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f328:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f32c:	f7f1 f964 	bl	80005f8 <__aeabi_dmul>
 800f330:	4602      	mov	r2, r0
 800f332:	460b      	mov	r3, r1
 800f334:	4630      	mov	r0, r6
 800f336:	4639      	mov	r1, r7
 800f338:	f7f0 ffa8 	bl	800028c <__adddf3>
 800f33c:	f109 0901 	add.w	r9, r9, #1
 800f340:	4606      	mov	r6, r0
 800f342:	460f      	mov	r7, r1
 800f344:	e7e4      	b.n	800f310 <__kernel_rem_pio2+0x3c8>
 800f346:	3d01      	subs	r5, #1
 800f348:	e747      	b.n	800f1da <__kernel_rem_pio2+0x292>
 800f34a:	ec47 6b10 	vmov	d0, r6, r7
 800f34e:	f1ca 0000 	rsb	r0, sl, #0
 800f352:	f000 fad9 	bl	800f908 <scalbn>
 800f356:	ec57 6b10 	vmov	r6, r7, d0
 800f35a:	4ba0      	ldr	r3, [pc, #640]	; (800f5dc <__kernel_rem_pio2+0x694>)
 800f35c:	ee10 0a10 	vmov	r0, s0
 800f360:	2200      	movs	r2, #0
 800f362:	4639      	mov	r1, r7
 800f364:	f7f1 fbce 	bl	8000b04 <__aeabi_dcmpge>
 800f368:	b1f8      	cbz	r0, 800f3aa <__kernel_rem_pio2+0x462>
 800f36a:	4b9d      	ldr	r3, [pc, #628]	; (800f5e0 <__kernel_rem_pio2+0x698>)
 800f36c:	2200      	movs	r2, #0
 800f36e:	4630      	mov	r0, r6
 800f370:	4639      	mov	r1, r7
 800f372:	f7f1 f941 	bl	80005f8 <__aeabi_dmul>
 800f376:	f7f1 fbef 	bl	8000b58 <__aeabi_d2iz>
 800f37a:	4680      	mov	r8, r0
 800f37c:	f7f1 f8d2 	bl	8000524 <__aeabi_i2d>
 800f380:	4b96      	ldr	r3, [pc, #600]	; (800f5dc <__kernel_rem_pio2+0x694>)
 800f382:	2200      	movs	r2, #0
 800f384:	f7f1 f938 	bl	80005f8 <__aeabi_dmul>
 800f388:	460b      	mov	r3, r1
 800f38a:	4602      	mov	r2, r0
 800f38c:	4639      	mov	r1, r7
 800f38e:	4630      	mov	r0, r6
 800f390:	f7f0 ff7a 	bl	8000288 <__aeabi_dsub>
 800f394:	f7f1 fbe0 	bl	8000b58 <__aeabi_d2iz>
 800f398:	1c65      	adds	r5, r4, #1
 800f39a:	ab0c      	add	r3, sp, #48	; 0x30
 800f39c:	f10a 0a18 	add.w	sl, sl, #24
 800f3a0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f3a4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f3a8:	e71f      	b.n	800f1ea <__kernel_rem_pio2+0x2a2>
 800f3aa:	4630      	mov	r0, r6
 800f3ac:	4639      	mov	r1, r7
 800f3ae:	f7f1 fbd3 	bl	8000b58 <__aeabi_d2iz>
 800f3b2:	ab0c      	add	r3, sp, #48	; 0x30
 800f3b4:	4625      	mov	r5, r4
 800f3b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f3ba:	e716      	b.n	800f1ea <__kernel_rem_pio2+0x2a2>
 800f3bc:	ab0c      	add	r3, sp, #48	; 0x30
 800f3be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f3c2:	f7f1 f8af 	bl	8000524 <__aeabi_i2d>
 800f3c6:	4632      	mov	r2, r6
 800f3c8:	463b      	mov	r3, r7
 800f3ca:	f7f1 f915 	bl	80005f8 <__aeabi_dmul>
 800f3ce:	4642      	mov	r2, r8
 800f3d0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f3d4:	464b      	mov	r3, r9
 800f3d6:	4630      	mov	r0, r6
 800f3d8:	4639      	mov	r1, r7
 800f3da:	f7f1 f90d 	bl	80005f8 <__aeabi_dmul>
 800f3de:	3c01      	subs	r4, #1
 800f3e0:	4606      	mov	r6, r0
 800f3e2:	460f      	mov	r7, r1
 800f3e4:	e713      	b.n	800f20e <__kernel_rem_pio2+0x2c6>
 800f3e6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800f3ea:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800f3ee:	f7f1 f903 	bl	80005f8 <__aeabi_dmul>
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	460b      	mov	r3, r1
 800f3f6:	4648      	mov	r0, r9
 800f3f8:	4651      	mov	r1, sl
 800f3fa:	f7f0 ff47 	bl	800028c <__adddf3>
 800f3fe:	3701      	adds	r7, #1
 800f400:	4681      	mov	r9, r0
 800f402:	468a      	mov	sl, r1
 800f404:	9b00      	ldr	r3, [sp, #0]
 800f406:	429f      	cmp	r7, r3
 800f408:	dc02      	bgt.n	800f410 <__kernel_rem_pio2+0x4c8>
 800f40a:	9b06      	ldr	r3, [sp, #24]
 800f40c:	429f      	cmp	r7, r3
 800f40e:	ddea      	ble.n	800f3e6 <__kernel_rem_pio2+0x49e>
 800f410:	9a06      	ldr	r2, [sp, #24]
 800f412:	ab48      	add	r3, sp, #288	; 0x120
 800f414:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800f418:	e9c6 9a00 	strd	r9, sl, [r6]
 800f41c:	3c01      	subs	r4, #1
 800f41e:	e6fa      	b.n	800f216 <__kernel_rem_pio2+0x2ce>
 800f420:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f422:	2b02      	cmp	r3, #2
 800f424:	dc0b      	bgt.n	800f43e <__kernel_rem_pio2+0x4f6>
 800f426:	2b00      	cmp	r3, #0
 800f428:	dc39      	bgt.n	800f49e <__kernel_rem_pio2+0x556>
 800f42a:	d05d      	beq.n	800f4e8 <__kernel_rem_pio2+0x5a0>
 800f42c:	9b02      	ldr	r3, [sp, #8]
 800f42e:	f003 0007 	and.w	r0, r3, #7
 800f432:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f436:	ecbd 8b02 	vpop	{d8}
 800f43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f43e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f440:	2b03      	cmp	r3, #3
 800f442:	d1f3      	bne.n	800f42c <__kernel_rem_pio2+0x4e4>
 800f444:	9b05      	ldr	r3, [sp, #20]
 800f446:	9500      	str	r5, [sp, #0]
 800f448:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f44c:	eb0d 0403 	add.w	r4, sp, r3
 800f450:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800f454:	46a2      	mov	sl, r4
 800f456:	9b00      	ldr	r3, [sp, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	f1aa 0a08 	sub.w	sl, sl, #8
 800f45e:	dc69      	bgt.n	800f534 <__kernel_rem_pio2+0x5ec>
 800f460:	46aa      	mov	sl, r5
 800f462:	f1ba 0f01 	cmp.w	sl, #1
 800f466:	f1a4 0408 	sub.w	r4, r4, #8
 800f46a:	f300 8083 	bgt.w	800f574 <__kernel_rem_pio2+0x62c>
 800f46e:	9c05      	ldr	r4, [sp, #20]
 800f470:	ab48      	add	r3, sp, #288	; 0x120
 800f472:	441c      	add	r4, r3
 800f474:	2000      	movs	r0, #0
 800f476:	2100      	movs	r1, #0
 800f478:	2d01      	cmp	r5, #1
 800f47a:	f300 809a 	bgt.w	800f5b2 <__kernel_rem_pio2+0x66a>
 800f47e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800f482:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f486:	f1bb 0f00 	cmp.w	fp, #0
 800f48a:	f040 8098 	bne.w	800f5be <__kernel_rem_pio2+0x676>
 800f48e:	9b04      	ldr	r3, [sp, #16]
 800f490:	e9c3 7800 	strd	r7, r8, [r3]
 800f494:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f498:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f49c:	e7c6      	b.n	800f42c <__kernel_rem_pio2+0x4e4>
 800f49e:	9e05      	ldr	r6, [sp, #20]
 800f4a0:	ab48      	add	r3, sp, #288	; 0x120
 800f4a2:	441e      	add	r6, r3
 800f4a4:	462c      	mov	r4, r5
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	2100      	movs	r1, #0
 800f4aa:	2c00      	cmp	r4, #0
 800f4ac:	da33      	bge.n	800f516 <__kernel_rem_pio2+0x5ce>
 800f4ae:	f1bb 0f00 	cmp.w	fp, #0
 800f4b2:	d036      	beq.n	800f522 <__kernel_rem_pio2+0x5da>
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4ba:	9c04      	ldr	r4, [sp, #16]
 800f4bc:	e9c4 2300 	strd	r2, r3, [r4]
 800f4c0:	4602      	mov	r2, r0
 800f4c2:	460b      	mov	r3, r1
 800f4c4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f4c8:	f7f0 fede 	bl	8000288 <__aeabi_dsub>
 800f4cc:	ae4a      	add	r6, sp, #296	; 0x128
 800f4ce:	2401      	movs	r4, #1
 800f4d0:	42a5      	cmp	r5, r4
 800f4d2:	da29      	bge.n	800f528 <__kernel_rem_pio2+0x5e0>
 800f4d4:	f1bb 0f00 	cmp.w	fp, #0
 800f4d8:	d002      	beq.n	800f4e0 <__kernel_rem_pio2+0x598>
 800f4da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4de:	4619      	mov	r1, r3
 800f4e0:	9b04      	ldr	r3, [sp, #16]
 800f4e2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f4e6:	e7a1      	b.n	800f42c <__kernel_rem_pio2+0x4e4>
 800f4e8:	9c05      	ldr	r4, [sp, #20]
 800f4ea:	ab48      	add	r3, sp, #288	; 0x120
 800f4ec:	441c      	add	r4, r3
 800f4ee:	2000      	movs	r0, #0
 800f4f0:	2100      	movs	r1, #0
 800f4f2:	2d00      	cmp	r5, #0
 800f4f4:	da09      	bge.n	800f50a <__kernel_rem_pio2+0x5c2>
 800f4f6:	f1bb 0f00 	cmp.w	fp, #0
 800f4fa:	d002      	beq.n	800f502 <__kernel_rem_pio2+0x5ba>
 800f4fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f500:	4619      	mov	r1, r3
 800f502:	9b04      	ldr	r3, [sp, #16]
 800f504:	e9c3 0100 	strd	r0, r1, [r3]
 800f508:	e790      	b.n	800f42c <__kernel_rem_pio2+0x4e4>
 800f50a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f50e:	f7f0 febd 	bl	800028c <__adddf3>
 800f512:	3d01      	subs	r5, #1
 800f514:	e7ed      	b.n	800f4f2 <__kernel_rem_pio2+0x5aa>
 800f516:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f51a:	f7f0 feb7 	bl	800028c <__adddf3>
 800f51e:	3c01      	subs	r4, #1
 800f520:	e7c3      	b.n	800f4aa <__kernel_rem_pio2+0x562>
 800f522:	4602      	mov	r2, r0
 800f524:	460b      	mov	r3, r1
 800f526:	e7c8      	b.n	800f4ba <__kernel_rem_pio2+0x572>
 800f528:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f52c:	f7f0 feae 	bl	800028c <__adddf3>
 800f530:	3401      	adds	r4, #1
 800f532:	e7cd      	b.n	800f4d0 <__kernel_rem_pio2+0x588>
 800f534:	e9da 8900 	ldrd	r8, r9, [sl]
 800f538:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f53c:	9b00      	ldr	r3, [sp, #0]
 800f53e:	3b01      	subs	r3, #1
 800f540:	9300      	str	r3, [sp, #0]
 800f542:	4632      	mov	r2, r6
 800f544:	463b      	mov	r3, r7
 800f546:	4640      	mov	r0, r8
 800f548:	4649      	mov	r1, r9
 800f54a:	f7f0 fe9f 	bl	800028c <__adddf3>
 800f54e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f552:	4602      	mov	r2, r0
 800f554:	460b      	mov	r3, r1
 800f556:	4640      	mov	r0, r8
 800f558:	4649      	mov	r1, r9
 800f55a:	f7f0 fe95 	bl	8000288 <__aeabi_dsub>
 800f55e:	4632      	mov	r2, r6
 800f560:	463b      	mov	r3, r7
 800f562:	f7f0 fe93 	bl	800028c <__adddf3>
 800f566:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f56a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f56e:	ed8a 7b00 	vstr	d7, [sl]
 800f572:	e770      	b.n	800f456 <__kernel_rem_pio2+0x50e>
 800f574:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f578:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f57c:	4640      	mov	r0, r8
 800f57e:	4632      	mov	r2, r6
 800f580:	463b      	mov	r3, r7
 800f582:	4649      	mov	r1, r9
 800f584:	f7f0 fe82 	bl	800028c <__adddf3>
 800f588:	e9cd 0100 	strd	r0, r1, [sp]
 800f58c:	4602      	mov	r2, r0
 800f58e:	460b      	mov	r3, r1
 800f590:	4640      	mov	r0, r8
 800f592:	4649      	mov	r1, r9
 800f594:	f7f0 fe78 	bl	8000288 <__aeabi_dsub>
 800f598:	4632      	mov	r2, r6
 800f59a:	463b      	mov	r3, r7
 800f59c:	f7f0 fe76 	bl	800028c <__adddf3>
 800f5a0:	ed9d 7b00 	vldr	d7, [sp]
 800f5a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f5a8:	ed84 7b00 	vstr	d7, [r4]
 800f5ac:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f5b0:	e757      	b.n	800f462 <__kernel_rem_pio2+0x51a>
 800f5b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f5b6:	f7f0 fe69 	bl	800028c <__adddf3>
 800f5ba:	3d01      	subs	r5, #1
 800f5bc:	e75c      	b.n	800f478 <__kernel_rem_pio2+0x530>
 800f5be:	9b04      	ldr	r3, [sp, #16]
 800f5c0:	9a04      	ldr	r2, [sp, #16]
 800f5c2:	601f      	str	r7, [r3, #0]
 800f5c4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f5c8:	605c      	str	r4, [r3, #4]
 800f5ca:	609d      	str	r5, [r3, #8]
 800f5cc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f5d0:	60d3      	str	r3, [r2, #12]
 800f5d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5d6:	6110      	str	r0, [r2, #16]
 800f5d8:	6153      	str	r3, [r2, #20]
 800f5da:	e727      	b.n	800f42c <__kernel_rem_pio2+0x4e4>
 800f5dc:	41700000 	.word	0x41700000
 800f5e0:	3e700000 	.word	0x3e700000
 800f5e4:	00000000 	.word	0x00000000

0800f5e8 <__kernel_cos>:
 800f5e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ec:	ec57 6b10 	vmov	r6, r7, d0
 800f5f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f5f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f5f8:	ed8d 1b00 	vstr	d1, [sp]
 800f5fc:	da07      	bge.n	800f60e <__kernel_cos+0x26>
 800f5fe:	ee10 0a10 	vmov	r0, s0
 800f602:	4639      	mov	r1, r7
 800f604:	f7f1 faa8 	bl	8000b58 <__aeabi_d2iz>
 800f608:	2800      	cmp	r0, #0
 800f60a:	f000 8088 	beq.w	800f71e <__kernel_cos+0x136>
 800f60e:	4632      	mov	r2, r6
 800f610:	463b      	mov	r3, r7
 800f612:	4630      	mov	r0, r6
 800f614:	4639      	mov	r1, r7
 800f616:	f7f0 ffef 	bl	80005f8 <__aeabi_dmul>
 800f61a:	4b51      	ldr	r3, [pc, #324]	; (800f760 <__kernel_cos+0x178>)
 800f61c:	2200      	movs	r2, #0
 800f61e:	4604      	mov	r4, r0
 800f620:	460d      	mov	r5, r1
 800f622:	f7f0 ffe9 	bl	80005f8 <__aeabi_dmul>
 800f626:	a340      	add	r3, pc, #256	; (adr r3, 800f728 <__kernel_cos+0x140>)
 800f628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62c:	4682      	mov	sl, r0
 800f62e:	468b      	mov	fp, r1
 800f630:	4620      	mov	r0, r4
 800f632:	4629      	mov	r1, r5
 800f634:	f7f0 ffe0 	bl	80005f8 <__aeabi_dmul>
 800f638:	a33d      	add	r3, pc, #244	; (adr r3, 800f730 <__kernel_cos+0x148>)
 800f63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63e:	f7f0 fe25 	bl	800028c <__adddf3>
 800f642:	4622      	mov	r2, r4
 800f644:	462b      	mov	r3, r5
 800f646:	f7f0 ffd7 	bl	80005f8 <__aeabi_dmul>
 800f64a:	a33b      	add	r3, pc, #236	; (adr r3, 800f738 <__kernel_cos+0x150>)
 800f64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f650:	f7f0 fe1a 	bl	8000288 <__aeabi_dsub>
 800f654:	4622      	mov	r2, r4
 800f656:	462b      	mov	r3, r5
 800f658:	f7f0 ffce 	bl	80005f8 <__aeabi_dmul>
 800f65c:	a338      	add	r3, pc, #224	; (adr r3, 800f740 <__kernel_cos+0x158>)
 800f65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f662:	f7f0 fe13 	bl	800028c <__adddf3>
 800f666:	4622      	mov	r2, r4
 800f668:	462b      	mov	r3, r5
 800f66a:	f7f0 ffc5 	bl	80005f8 <__aeabi_dmul>
 800f66e:	a336      	add	r3, pc, #216	; (adr r3, 800f748 <__kernel_cos+0x160>)
 800f670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f674:	f7f0 fe08 	bl	8000288 <__aeabi_dsub>
 800f678:	4622      	mov	r2, r4
 800f67a:	462b      	mov	r3, r5
 800f67c:	f7f0 ffbc 	bl	80005f8 <__aeabi_dmul>
 800f680:	a333      	add	r3, pc, #204	; (adr r3, 800f750 <__kernel_cos+0x168>)
 800f682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f686:	f7f0 fe01 	bl	800028c <__adddf3>
 800f68a:	4622      	mov	r2, r4
 800f68c:	462b      	mov	r3, r5
 800f68e:	f7f0 ffb3 	bl	80005f8 <__aeabi_dmul>
 800f692:	4622      	mov	r2, r4
 800f694:	462b      	mov	r3, r5
 800f696:	f7f0 ffaf 	bl	80005f8 <__aeabi_dmul>
 800f69a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f69e:	4604      	mov	r4, r0
 800f6a0:	460d      	mov	r5, r1
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	4639      	mov	r1, r7
 800f6a6:	f7f0 ffa7 	bl	80005f8 <__aeabi_dmul>
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	4602      	mov	r2, r0
 800f6ae:	4629      	mov	r1, r5
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f7f0 fde9 	bl	8000288 <__aeabi_dsub>
 800f6b6:	4b2b      	ldr	r3, [pc, #172]	; (800f764 <__kernel_cos+0x17c>)
 800f6b8:	4598      	cmp	r8, r3
 800f6ba:	4606      	mov	r6, r0
 800f6bc:	460f      	mov	r7, r1
 800f6be:	dc10      	bgt.n	800f6e2 <__kernel_cos+0xfa>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	4650      	mov	r0, sl
 800f6c6:	4659      	mov	r1, fp
 800f6c8:	f7f0 fdde 	bl	8000288 <__aeabi_dsub>
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	4926      	ldr	r1, [pc, #152]	; (800f768 <__kernel_cos+0x180>)
 800f6d0:	4602      	mov	r2, r0
 800f6d2:	2000      	movs	r0, #0
 800f6d4:	f7f0 fdd8 	bl	8000288 <__aeabi_dsub>
 800f6d8:	ec41 0b10 	vmov	d0, r0, r1
 800f6dc:	b003      	add	sp, #12
 800f6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6e2:	4b22      	ldr	r3, [pc, #136]	; (800f76c <__kernel_cos+0x184>)
 800f6e4:	4920      	ldr	r1, [pc, #128]	; (800f768 <__kernel_cos+0x180>)
 800f6e6:	4598      	cmp	r8, r3
 800f6e8:	bfcc      	ite	gt
 800f6ea:	4d21      	ldrgt	r5, [pc, #132]	; (800f770 <__kernel_cos+0x188>)
 800f6ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f6f0:	2400      	movs	r4, #0
 800f6f2:	4622      	mov	r2, r4
 800f6f4:	462b      	mov	r3, r5
 800f6f6:	2000      	movs	r0, #0
 800f6f8:	f7f0 fdc6 	bl	8000288 <__aeabi_dsub>
 800f6fc:	4622      	mov	r2, r4
 800f6fe:	4680      	mov	r8, r0
 800f700:	4689      	mov	r9, r1
 800f702:	462b      	mov	r3, r5
 800f704:	4650      	mov	r0, sl
 800f706:	4659      	mov	r1, fp
 800f708:	f7f0 fdbe 	bl	8000288 <__aeabi_dsub>
 800f70c:	4632      	mov	r2, r6
 800f70e:	463b      	mov	r3, r7
 800f710:	f7f0 fdba 	bl	8000288 <__aeabi_dsub>
 800f714:	4602      	mov	r2, r0
 800f716:	460b      	mov	r3, r1
 800f718:	4640      	mov	r0, r8
 800f71a:	4649      	mov	r1, r9
 800f71c:	e7da      	b.n	800f6d4 <__kernel_cos+0xec>
 800f71e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f758 <__kernel_cos+0x170>
 800f722:	e7db      	b.n	800f6dc <__kernel_cos+0xf4>
 800f724:	f3af 8000 	nop.w
 800f728:	be8838d4 	.word	0xbe8838d4
 800f72c:	bda8fae9 	.word	0xbda8fae9
 800f730:	bdb4b1c4 	.word	0xbdb4b1c4
 800f734:	3e21ee9e 	.word	0x3e21ee9e
 800f738:	809c52ad 	.word	0x809c52ad
 800f73c:	3e927e4f 	.word	0x3e927e4f
 800f740:	19cb1590 	.word	0x19cb1590
 800f744:	3efa01a0 	.word	0x3efa01a0
 800f748:	16c15177 	.word	0x16c15177
 800f74c:	3f56c16c 	.word	0x3f56c16c
 800f750:	5555554c 	.word	0x5555554c
 800f754:	3fa55555 	.word	0x3fa55555
 800f758:	00000000 	.word	0x00000000
 800f75c:	3ff00000 	.word	0x3ff00000
 800f760:	3fe00000 	.word	0x3fe00000
 800f764:	3fd33332 	.word	0x3fd33332
 800f768:	3ff00000 	.word	0x3ff00000
 800f76c:	3fe90000 	.word	0x3fe90000
 800f770:	3fd20000 	.word	0x3fd20000
 800f774:	00000000 	.word	0x00000000

0800f778 <__kernel_sin>:
 800f778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f77c:	ed2d 8b04 	vpush	{d8-d9}
 800f780:	eeb0 8a41 	vmov.f32	s16, s2
 800f784:	eef0 8a61 	vmov.f32	s17, s3
 800f788:	ec55 4b10 	vmov	r4, r5, d0
 800f78c:	b083      	sub	sp, #12
 800f78e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f792:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f796:	9001      	str	r0, [sp, #4]
 800f798:	da06      	bge.n	800f7a8 <__kernel_sin+0x30>
 800f79a:	ee10 0a10 	vmov	r0, s0
 800f79e:	4629      	mov	r1, r5
 800f7a0:	f7f1 f9da 	bl	8000b58 <__aeabi_d2iz>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	d051      	beq.n	800f84c <__kernel_sin+0xd4>
 800f7a8:	4622      	mov	r2, r4
 800f7aa:	462b      	mov	r3, r5
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	4629      	mov	r1, r5
 800f7b0:	f7f0 ff22 	bl	80005f8 <__aeabi_dmul>
 800f7b4:	4682      	mov	sl, r0
 800f7b6:	468b      	mov	fp, r1
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	4620      	mov	r0, r4
 800f7be:	4629      	mov	r1, r5
 800f7c0:	f7f0 ff1a 	bl	80005f8 <__aeabi_dmul>
 800f7c4:	a341      	add	r3, pc, #260	; (adr r3, 800f8cc <__kernel_sin+0x154>)
 800f7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ca:	4680      	mov	r8, r0
 800f7cc:	4689      	mov	r9, r1
 800f7ce:	4650      	mov	r0, sl
 800f7d0:	4659      	mov	r1, fp
 800f7d2:	f7f0 ff11 	bl	80005f8 <__aeabi_dmul>
 800f7d6:	a33f      	add	r3, pc, #252	; (adr r3, 800f8d4 <__kernel_sin+0x15c>)
 800f7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7dc:	f7f0 fd54 	bl	8000288 <__aeabi_dsub>
 800f7e0:	4652      	mov	r2, sl
 800f7e2:	465b      	mov	r3, fp
 800f7e4:	f7f0 ff08 	bl	80005f8 <__aeabi_dmul>
 800f7e8:	a33c      	add	r3, pc, #240	; (adr r3, 800f8dc <__kernel_sin+0x164>)
 800f7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ee:	f7f0 fd4d 	bl	800028c <__adddf3>
 800f7f2:	4652      	mov	r2, sl
 800f7f4:	465b      	mov	r3, fp
 800f7f6:	f7f0 feff 	bl	80005f8 <__aeabi_dmul>
 800f7fa:	a33a      	add	r3, pc, #232	; (adr r3, 800f8e4 <__kernel_sin+0x16c>)
 800f7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f800:	f7f0 fd42 	bl	8000288 <__aeabi_dsub>
 800f804:	4652      	mov	r2, sl
 800f806:	465b      	mov	r3, fp
 800f808:	f7f0 fef6 	bl	80005f8 <__aeabi_dmul>
 800f80c:	a337      	add	r3, pc, #220	; (adr r3, 800f8ec <__kernel_sin+0x174>)
 800f80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f812:	f7f0 fd3b 	bl	800028c <__adddf3>
 800f816:	9b01      	ldr	r3, [sp, #4]
 800f818:	4606      	mov	r6, r0
 800f81a:	460f      	mov	r7, r1
 800f81c:	b9eb      	cbnz	r3, 800f85a <__kernel_sin+0xe2>
 800f81e:	4602      	mov	r2, r0
 800f820:	460b      	mov	r3, r1
 800f822:	4650      	mov	r0, sl
 800f824:	4659      	mov	r1, fp
 800f826:	f7f0 fee7 	bl	80005f8 <__aeabi_dmul>
 800f82a:	a325      	add	r3, pc, #148	; (adr r3, 800f8c0 <__kernel_sin+0x148>)
 800f82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f830:	f7f0 fd2a 	bl	8000288 <__aeabi_dsub>
 800f834:	4642      	mov	r2, r8
 800f836:	464b      	mov	r3, r9
 800f838:	f7f0 fede 	bl	80005f8 <__aeabi_dmul>
 800f83c:	4602      	mov	r2, r0
 800f83e:	460b      	mov	r3, r1
 800f840:	4620      	mov	r0, r4
 800f842:	4629      	mov	r1, r5
 800f844:	f7f0 fd22 	bl	800028c <__adddf3>
 800f848:	4604      	mov	r4, r0
 800f84a:	460d      	mov	r5, r1
 800f84c:	ec45 4b10 	vmov	d0, r4, r5
 800f850:	b003      	add	sp, #12
 800f852:	ecbd 8b04 	vpop	{d8-d9}
 800f856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f85a:	4b1b      	ldr	r3, [pc, #108]	; (800f8c8 <__kernel_sin+0x150>)
 800f85c:	ec51 0b18 	vmov	r0, r1, d8
 800f860:	2200      	movs	r2, #0
 800f862:	f7f0 fec9 	bl	80005f8 <__aeabi_dmul>
 800f866:	4632      	mov	r2, r6
 800f868:	ec41 0b19 	vmov	d9, r0, r1
 800f86c:	463b      	mov	r3, r7
 800f86e:	4640      	mov	r0, r8
 800f870:	4649      	mov	r1, r9
 800f872:	f7f0 fec1 	bl	80005f8 <__aeabi_dmul>
 800f876:	4602      	mov	r2, r0
 800f878:	460b      	mov	r3, r1
 800f87a:	ec51 0b19 	vmov	r0, r1, d9
 800f87e:	f7f0 fd03 	bl	8000288 <__aeabi_dsub>
 800f882:	4652      	mov	r2, sl
 800f884:	465b      	mov	r3, fp
 800f886:	f7f0 feb7 	bl	80005f8 <__aeabi_dmul>
 800f88a:	ec53 2b18 	vmov	r2, r3, d8
 800f88e:	f7f0 fcfb 	bl	8000288 <__aeabi_dsub>
 800f892:	a30b      	add	r3, pc, #44	; (adr r3, 800f8c0 <__kernel_sin+0x148>)
 800f894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f898:	4606      	mov	r6, r0
 800f89a:	460f      	mov	r7, r1
 800f89c:	4640      	mov	r0, r8
 800f89e:	4649      	mov	r1, r9
 800f8a0:	f7f0 feaa 	bl	80005f8 <__aeabi_dmul>
 800f8a4:	4602      	mov	r2, r0
 800f8a6:	460b      	mov	r3, r1
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	4639      	mov	r1, r7
 800f8ac:	f7f0 fcee 	bl	800028c <__adddf3>
 800f8b0:	4602      	mov	r2, r0
 800f8b2:	460b      	mov	r3, r1
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	4629      	mov	r1, r5
 800f8b8:	f7f0 fce6 	bl	8000288 <__aeabi_dsub>
 800f8bc:	e7c4      	b.n	800f848 <__kernel_sin+0xd0>
 800f8be:	bf00      	nop
 800f8c0:	55555549 	.word	0x55555549
 800f8c4:	3fc55555 	.word	0x3fc55555
 800f8c8:	3fe00000 	.word	0x3fe00000
 800f8cc:	5acfd57c 	.word	0x5acfd57c
 800f8d0:	3de5d93a 	.word	0x3de5d93a
 800f8d4:	8a2b9ceb 	.word	0x8a2b9ceb
 800f8d8:	3e5ae5e6 	.word	0x3e5ae5e6
 800f8dc:	57b1fe7d 	.word	0x57b1fe7d
 800f8e0:	3ec71de3 	.word	0x3ec71de3
 800f8e4:	19c161d5 	.word	0x19c161d5
 800f8e8:	3f2a01a0 	.word	0x3f2a01a0
 800f8ec:	1110f8a6 	.word	0x1110f8a6
 800f8f0:	3f811111 	.word	0x3f811111

0800f8f4 <fabs>:
 800f8f4:	ec51 0b10 	vmov	r0, r1, d0
 800f8f8:	ee10 2a10 	vmov	r2, s0
 800f8fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f900:	ec43 2b10 	vmov	d0, r2, r3
 800f904:	4770      	bx	lr
	...

0800f908 <scalbn>:
 800f908:	b570      	push	{r4, r5, r6, lr}
 800f90a:	ec55 4b10 	vmov	r4, r5, d0
 800f90e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f912:	4606      	mov	r6, r0
 800f914:	462b      	mov	r3, r5
 800f916:	b999      	cbnz	r1, 800f940 <scalbn+0x38>
 800f918:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f91c:	4323      	orrs	r3, r4
 800f91e:	d03f      	beq.n	800f9a0 <scalbn+0x98>
 800f920:	4b35      	ldr	r3, [pc, #212]	; (800f9f8 <scalbn+0xf0>)
 800f922:	4629      	mov	r1, r5
 800f924:	ee10 0a10 	vmov	r0, s0
 800f928:	2200      	movs	r2, #0
 800f92a:	f7f0 fe65 	bl	80005f8 <__aeabi_dmul>
 800f92e:	4b33      	ldr	r3, [pc, #204]	; (800f9fc <scalbn+0xf4>)
 800f930:	429e      	cmp	r6, r3
 800f932:	4604      	mov	r4, r0
 800f934:	460d      	mov	r5, r1
 800f936:	da10      	bge.n	800f95a <scalbn+0x52>
 800f938:	a327      	add	r3, pc, #156	; (adr r3, 800f9d8 <scalbn+0xd0>)
 800f93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93e:	e01f      	b.n	800f980 <scalbn+0x78>
 800f940:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f944:	4291      	cmp	r1, r2
 800f946:	d10c      	bne.n	800f962 <scalbn+0x5a>
 800f948:	ee10 2a10 	vmov	r2, s0
 800f94c:	4620      	mov	r0, r4
 800f94e:	4629      	mov	r1, r5
 800f950:	f7f0 fc9c 	bl	800028c <__adddf3>
 800f954:	4604      	mov	r4, r0
 800f956:	460d      	mov	r5, r1
 800f958:	e022      	b.n	800f9a0 <scalbn+0x98>
 800f95a:	460b      	mov	r3, r1
 800f95c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f960:	3936      	subs	r1, #54	; 0x36
 800f962:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f966:	4296      	cmp	r6, r2
 800f968:	dd0d      	ble.n	800f986 <scalbn+0x7e>
 800f96a:	2d00      	cmp	r5, #0
 800f96c:	a11c      	add	r1, pc, #112	; (adr r1, 800f9e0 <scalbn+0xd8>)
 800f96e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f972:	da02      	bge.n	800f97a <scalbn+0x72>
 800f974:	a11c      	add	r1, pc, #112	; (adr r1, 800f9e8 <scalbn+0xe0>)
 800f976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f97a:	a319      	add	r3, pc, #100	; (adr r3, 800f9e0 <scalbn+0xd8>)
 800f97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f980:	f7f0 fe3a 	bl	80005f8 <__aeabi_dmul>
 800f984:	e7e6      	b.n	800f954 <scalbn+0x4c>
 800f986:	1872      	adds	r2, r6, r1
 800f988:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f98c:	428a      	cmp	r2, r1
 800f98e:	dcec      	bgt.n	800f96a <scalbn+0x62>
 800f990:	2a00      	cmp	r2, #0
 800f992:	dd08      	ble.n	800f9a6 <scalbn+0x9e>
 800f994:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f998:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f99c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f9a0:	ec45 4b10 	vmov	d0, r4, r5
 800f9a4:	bd70      	pop	{r4, r5, r6, pc}
 800f9a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f9aa:	da08      	bge.n	800f9be <scalbn+0xb6>
 800f9ac:	2d00      	cmp	r5, #0
 800f9ae:	a10a      	add	r1, pc, #40	; (adr r1, 800f9d8 <scalbn+0xd0>)
 800f9b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9b4:	dac0      	bge.n	800f938 <scalbn+0x30>
 800f9b6:	a10e      	add	r1, pc, #56	; (adr r1, 800f9f0 <scalbn+0xe8>)
 800f9b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9bc:	e7bc      	b.n	800f938 <scalbn+0x30>
 800f9be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f9c2:	3236      	adds	r2, #54	; 0x36
 800f9c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f9c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f9cc:	4620      	mov	r0, r4
 800f9ce:	4b0c      	ldr	r3, [pc, #48]	; (800fa00 <scalbn+0xf8>)
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	e7d5      	b.n	800f980 <scalbn+0x78>
 800f9d4:	f3af 8000 	nop.w
 800f9d8:	c2f8f359 	.word	0xc2f8f359
 800f9dc:	01a56e1f 	.word	0x01a56e1f
 800f9e0:	8800759c 	.word	0x8800759c
 800f9e4:	7e37e43c 	.word	0x7e37e43c
 800f9e8:	8800759c 	.word	0x8800759c
 800f9ec:	fe37e43c 	.word	0xfe37e43c
 800f9f0:	c2f8f359 	.word	0xc2f8f359
 800f9f4:	81a56e1f 	.word	0x81a56e1f
 800f9f8:	43500000 	.word	0x43500000
 800f9fc:	ffff3cb0 	.word	0xffff3cb0
 800fa00:	3c900000 	.word	0x3c900000
 800fa04:	00000000 	.word	0x00000000

0800fa08 <floor>:
 800fa08:	ec51 0b10 	vmov	r0, r1, d0
 800fa0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fa10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa14:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800fa18:	2e13      	cmp	r6, #19
 800fa1a:	ee10 5a10 	vmov	r5, s0
 800fa1e:	ee10 8a10 	vmov	r8, s0
 800fa22:	460c      	mov	r4, r1
 800fa24:	dc31      	bgt.n	800fa8a <floor+0x82>
 800fa26:	2e00      	cmp	r6, #0
 800fa28:	da14      	bge.n	800fa54 <floor+0x4c>
 800fa2a:	a333      	add	r3, pc, #204	; (adr r3, 800faf8 <floor+0xf0>)
 800fa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa30:	f7f0 fc2c 	bl	800028c <__adddf3>
 800fa34:	2200      	movs	r2, #0
 800fa36:	2300      	movs	r3, #0
 800fa38:	f7f1 f86e 	bl	8000b18 <__aeabi_dcmpgt>
 800fa3c:	b138      	cbz	r0, 800fa4e <floor+0x46>
 800fa3e:	2c00      	cmp	r4, #0
 800fa40:	da53      	bge.n	800faea <floor+0xe2>
 800fa42:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800fa46:	4325      	orrs	r5, r4
 800fa48:	d052      	beq.n	800faf0 <floor+0xe8>
 800fa4a:	4c2d      	ldr	r4, [pc, #180]	; (800fb00 <floor+0xf8>)
 800fa4c:	2500      	movs	r5, #0
 800fa4e:	4621      	mov	r1, r4
 800fa50:	4628      	mov	r0, r5
 800fa52:	e024      	b.n	800fa9e <floor+0x96>
 800fa54:	4f2b      	ldr	r7, [pc, #172]	; (800fb04 <floor+0xfc>)
 800fa56:	4137      	asrs	r7, r6
 800fa58:	ea01 0307 	and.w	r3, r1, r7
 800fa5c:	4303      	orrs	r3, r0
 800fa5e:	d01e      	beq.n	800fa9e <floor+0x96>
 800fa60:	a325      	add	r3, pc, #148	; (adr r3, 800faf8 <floor+0xf0>)
 800fa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa66:	f7f0 fc11 	bl	800028c <__adddf3>
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	f7f1 f853 	bl	8000b18 <__aeabi_dcmpgt>
 800fa72:	2800      	cmp	r0, #0
 800fa74:	d0eb      	beq.n	800fa4e <floor+0x46>
 800fa76:	2c00      	cmp	r4, #0
 800fa78:	bfbe      	ittt	lt
 800fa7a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fa7e:	4133      	asrlt	r3, r6
 800fa80:	18e4      	addlt	r4, r4, r3
 800fa82:	ea24 0407 	bic.w	r4, r4, r7
 800fa86:	2500      	movs	r5, #0
 800fa88:	e7e1      	b.n	800fa4e <floor+0x46>
 800fa8a:	2e33      	cmp	r6, #51	; 0x33
 800fa8c:	dd0b      	ble.n	800faa6 <floor+0x9e>
 800fa8e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fa92:	d104      	bne.n	800fa9e <floor+0x96>
 800fa94:	ee10 2a10 	vmov	r2, s0
 800fa98:	460b      	mov	r3, r1
 800fa9a:	f7f0 fbf7 	bl	800028c <__adddf3>
 800fa9e:	ec41 0b10 	vmov	d0, r0, r1
 800faa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faa6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800faaa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800faae:	40df      	lsrs	r7, r3
 800fab0:	4238      	tst	r0, r7
 800fab2:	d0f4      	beq.n	800fa9e <floor+0x96>
 800fab4:	a310      	add	r3, pc, #64	; (adr r3, 800faf8 <floor+0xf0>)
 800fab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faba:	f7f0 fbe7 	bl	800028c <__adddf3>
 800fabe:	2200      	movs	r2, #0
 800fac0:	2300      	movs	r3, #0
 800fac2:	f7f1 f829 	bl	8000b18 <__aeabi_dcmpgt>
 800fac6:	2800      	cmp	r0, #0
 800fac8:	d0c1      	beq.n	800fa4e <floor+0x46>
 800faca:	2c00      	cmp	r4, #0
 800facc:	da0a      	bge.n	800fae4 <floor+0xdc>
 800face:	2e14      	cmp	r6, #20
 800fad0:	d101      	bne.n	800fad6 <floor+0xce>
 800fad2:	3401      	adds	r4, #1
 800fad4:	e006      	b.n	800fae4 <floor+0xdc>
 800fad6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fada:	2301      	movs	r3, #1
 800fadc:	40b3      	lsls	r3, r6
 800fade:	441d      	add	r5, r3
 800fae0:	45a8      	cmp	r8, r5
 800fae2:	d8f6      	bhi.n	800fad2 <floor+0xca>
 800fae4:	ea25 0507 	bic.w	r5, r5, r7
 800fae8:	e7b1      	b.n	800fa4e <floor+0x46>
 800faea:	2500      	movs	r5, #0
 800faec:	462c      	mov	r4, r5
 800faee:	e7ae      	b.n	800fa4e <floor+0x46>
 800faf0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800faf4:	e7ab      	b.n	800fa4e <floor+0x46>
 800faf6:	bf00      	nop
 800faf8:	8800759c 	.word	0x8800759c
 800fafc:	7e37e43c 	.word	0x7e37e43c
 800fb00:	bff00000 	.word	0xbff00000
 800fb04:	000fffff 	.word	0x000fffff

0800fb08 <_init>:
 800fb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb0a:	bf00      	nop
 800fb0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb0e:	bc08      	pop	{r3}
 800fb10:	469e      	mov	lr, r3
 800fb12:	4770      	bx	lr

0800fb14 <_fini>:
 800fb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb16:	bf00      	nop
 800fb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb1a:	bc08      	pop	{r3}
 800fb1c:	469e      	mov	lr, r3
 800fb1e:	4770      	bx	lr
