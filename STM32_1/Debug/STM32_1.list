
STM32_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005104  08005104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800511c  0800511c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005124  08005124  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005128  08005128  00015128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800512c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000608  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000618  20000618  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e179  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002199  00000000  00000000  0002e1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e70  00000000  00000000  00030398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b47  00000000  00000000  00031208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021831  00000000  00000000  00031d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000106be  00000000  00000000  00053580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cbafd  00000000  00000000  00063c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003cf0  00000000  00000000  0012f73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0013342c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080050ec 	.word	0x080050ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080050ec 	.word	0x080050ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <imu_init>:

/*+++++++++++++++++++++++++++++++++++*/

/*----------------------------------------------------------------*/

uint8_t imu_init(I2C_HandleTypeDef* hi2c_ptr) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	hi2c1_ptr = hi2c_ptr;
 80004cc:	4a4b      	ldr	r2, [pc, #300]	; (80005fc <imu_init+0x138>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6013      	str	r3, [r2, #0]

	// Reset chip
	if (!write_one_byte(0, B0_PWR_MGMT_1, 0x80 | 0x41)) return 1;
 80004d2:	22c1      	movs	r2, #193	; 0xc1
 80004d4:	2106      	movs	r1, #6
 80004d6:	2000      	movs	r0, #0
 80004d8:	f000 f8d8 	bl	800068c <write_one_byte>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d101      	bne.n	80004e6 <imu_init+0x22>
 80004e2:	2301      	movs	r3, #1
 80004e4:	e085      	b.n	80005f2 <imu_init+0x12e>

	cur_bank = get_cur_bank();
 80004e6:	f000 f933 	bl	8000750 <get_cur_bank>
 80004ea:	4603      	mov	r3, r0
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b44      	ldr	r3, [pc, #272]	; (8000600 <imu_init+0x13c>)
 80004f0:	701a      	strb	r2, [r3, #0]

	HAL_Delay(100);
 80004f2:	2064      	movs	r0, #100	; 0x64
 80004f4:	f001 fd70 	bl	8001fd8 <HAL_Delay>
	uint8_t who_am_i = read_one_byte(0, 0);
 80004f8:	2100      	movs	r1, #0
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 f88e 	bl	800061c <read_one_byte>
 8000500:	4603      	mov	r3, r0
 8000502:	73fb      	strb	r3, [r7, #15]
	if (who_am_i != 0xEA) { 	// read WHO_AM_I register, should receive 0xEA
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	2bea      	cmp	r3, #234	; 0xea
 8000508:	d001      	beq.n	800050e <imu_init+0x4a>
		return 2;
 800050a:	2302      	movs	r3, #2
 800050c:	e071      	b.n	80005f2 <imu_init+0x12e>
	}

	// Wake up chip
	if (!write_one_byte(0, B0_PWR_MGMT_1, ~0x40 & 0x41)) return 3;
 800050e:	2201      	movs	r2, #1
 8000510:	2106      	movs	r1, #6
 8000512:	2000      	movs	r0, #0
 8000514:	f000 f8ba 	bl	800068c <write_one_byte>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d101      	bne.n	8000522 <imu_init+0x5e>
 800051e:	2303      	movs	r3, #3
 8000520:	e067      	b.n	80005f2 <imu_init+0x12e>

	// Enables ODR start-time alignment when any of the following registers is written: GYRO_SMPLRT_DIV,
	// ACCEL_SMPLRT_DIV_1, ACCEL_SMPLRT_DIV_2, I2C_MST_ODR_CONFIG.
	if (!write_one_byte(2, B2_ODR_ALIGN_EN, 0x01)) return 4;
 8000522:	2201      	movs	r2, #1
 8000524:	2109      	movs	r1, #9
 8000526:	2002      	movs	r0, #2
 8000528:	f000 f8b0 	bl	800068c <write_one_byte>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d101      	bne.n	8000536 <imu_init+0x72>
 8000532:	2304      	movs	r3, #4
 8000534:	e05d      	b.n	80005f2 <imu_init+0x12e>

	// Set accel low pass filter
	if (!write_one_byte(2, B2_ACCEL_CONFIG, (ACCEL_DLPFCFG_val << 3) | ACCEL_FCHOICE_val)) return 5;
 8000536:	4b33      	ldr	r3, [pc, #204]	; (8000604 <imu_init+0x140>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	b25a      	sxtb	r2, r3
 800053e:	4b32      	ldr	r3, [pc, #200]	; (8000608 <imu_init+0x144>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b25b      	sxtb	r3, r3
 8000544:	4313      	orrs	r3, r2
 8000546:	b25b      	sxtb	r3, r3
 8000548:	b2db      	uxtb	r3, r3
 800054a:	461a      	mov	r2, r3
 800054c:	2114      	movs	r1, #20
 800054e:	2002      	movs	r0, #2
 8000550:	f000 f89c 	bl	800068c <write_one_byte>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d101      	bne.n	800055e <imu_init+0x9a>
 800055a:	2305      	movs	r3, #5
 800055c:	e049      	b.n	80005f2 <imu_init+0x12e>

	// Set gyro low pass filter
	if (!write_one_byte(2, B2_GYRO_CONFIG_1, (GYRO_DLPFCFG_val << 3) | GYRO_FCHOICE_val)) return 6;
 800055e:	4b2b      	ldr	r3, [pc, #172]	; (800060c <imu_init+0x148>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	00db      	lsls	r3, r3, #3
 8000564:	b25a      	sxtb	r2, r3
 8000566:	4b2a      	ldr	r3, [pc, #168]	; (8000610 <imu_init+0x14c>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b25b      	sxtb	r3, r3
 800056c:	4313      	orrs	r3, r2
 800056e:	b25b      	sxtb	r3, r3
 8000570:	b2db      	uxtb	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	2101      	movs	r1, #1
 8000576:	2002      	movs	r0, #2
 8000578:	f000 f888 	bl	800068c <write_one_byte>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d101      	bne.n	8000586 <imu_init+0xc2>
 8000582:	2306      	movs	r3, #6
 8000584:	e035      	b.n	80005f2 <imu_init+0x12e>

	// Set accel sample rate divider
	if (ACCEL_SMPLRT_DIV_val > 0x0FFF) ACCEL_SMPLRT_DIV_val = 0x0FFF;
 8000586:	4b23      	ldr	r3, [pc, #140]	; (8000614 <imu_init+0x150>)
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800058e:	d303      	bcc.n	8000598 <imu_init+0xd4>
 8000590:	4b20      	ldr	r3, [pc, #128]	; (8000614 <imu_init+0x150>)
 8000592:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000596:	801a      	strh	r2, [r3, #0]
	if (!write_one_byte(2, B2_ACCEL_SMPLRT_DIV_1, (uint8_t)(ACCEL_SMPLRT_DIV_val >> 8))) return 7;
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <imu_init+0x150>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	b29b      	uxth	r3, r3
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	461a      	mov	r2, r3
 80005a4:	2110      	movs	r1, #16
 80005a6:	2002      	movs	r0, #2
 80005a8:	f000 f870 	bl	800068c <write_one_byte>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d101      	bne.n	80005b6 <imu_init+0xf2>
 80005b2:	2307      	movs	r3, #7
 80005b4:	e01d      	b.n	80005f2 <imu_init+0x12e>
	if (!write_one_byte(2, B2_ACCEL_SMPLRT_DIV_2, (uint8_t)(ACCEL_SMPLRT_DIV_val & 0x00FF))) return 8;
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <imu_init+0x150>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	2111      	movs	r1, #17
 80005c0:	2002      	movs	r0, #2
 80005c2:	f000 f863 	bl	800068c <write_one_byte>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d101      	bne.n	80005d0 <imu_init+0x10c>
 80005cc:	2308      	movs	r3, #8
 80005ce:	e010      	b.n	80005f2 <imu_init+0x12e>

	// Set gyro sample rate divider
	if (!write_one_byte(2, B2_GYRO_SMPLRT_DIV, GYRO_SMPLRT_DIV_val)) return 9;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <imu_init+0x154>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	2002      	movs	r0, #2
 80005da:	f000 f857 	bl	800068c <write_one_byte>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d101      	bne.n	80005e8 <imu_init+0x124>
 80005e4:	2309      	movs	r3, #9
 80005e6:	e004      	b.n	80005f2 <imu_init+0x12e>

	// Caliberate accelerometer (eliminate bias)
	accel_caliberate();
 80005e8:	f000 f928 	bl	800083c <accel_caliberate>

	// Caliberate gyroscope (eliminate bias)
	gyro_caliberate();
 80005ec:	f000 fa66 	bl	8000abc <gyro_caliberate>

	return 0;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000002c 	.word	0x2000002c
 8000600:	20000000 	.word	0x20000000
 8000604:	20000030 	.word	0x20000030
 8000608:	20000001 	.word	0x20000001
 800060c:	20000034 	.word	0x20000034
 8000610:	20000002 	.word	0x20000002
 8000614:	20000032 	.word	0x20000032
 8000618:	20000035 	.word	0x20000035

0800061c <read_one_byte>:

uint8_t read_one_byte(uint8_t bank, uint8_t regAddr) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	4603      	mov	r3, r0
 8000624:	460a      	mov	r2, r1
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	4613      	mov	r3, r2
 800062a:	71bb      	strb	r3, [r7, #6]

	if (!select_bank(bank)) return 0;
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f85a 	bl	80006e8 <select_bank>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <read_one_byte+0x22>
 800063a:	2300      	movs	r3, #0
 800063c:	e020      	b.n	8000680 <read_one_byte+0x64>
	uint8_t buf[1];

	uint8_t reg = regAddr;
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	72fb      	strb	r3, [r7, #11]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <read_one_byte+0x6c>)
 8000644:	6818      	ldr	r0, [r3, #0]
 8000646:	f107 020b 	add.w	r2, r7, #11
 800064a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2301      	movs	r3, #1
 8000652:	21d0      	movs	r1, #208	; 0xd0
 8000654:	f002 f8f0 	bl	8002838 <HAL_I2C_Master_Transmit>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d10f      	bne.n	800067e <read_one_byte+0x62>
		if (HAL_I2C_Master_Receive(hi2c1_ptr, IMU_I2C_ADDR, buf, 1, HAL_MAX_DELAY) == HAL_OK) {
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <read_one_byte+0x6c>)
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	f107 020c 	add.w	r2, r7, #12
 8000666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2301      	movs	r3, #1
 800066e:	21d0      	movs	r1, #208	; 0xd0
 8000670:	f002 f9e0 	bl	8002a34 <HAL_I2C_Master_Receive>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d101      	bne.n	800067e <read_one_byte+0x62>
			return buf[0];
 800067a:	7b3b      	ldrb	r3, [r7, #12]
 800067c:	e000      	b.n	8000680 <read_one_byte+0x64>
		}
	}
	return 0;
 800067e:	2300      	movs	r3, #0
}
 8000680:	4618      	mov	r0, r3
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000002c 	.word	0x2000002c

0800068c <write_one_byte>:

uint8_t write_one_byte(uint8_t bank, uint8_t regAddr, uint8_t data) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af02      	add	r7, sp, #8
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	460b      	mov	r3, r1
 8000698:	71bb      	strb	r3, [r7, #6]
 800069a:	4613      	mov	r3, r2
 800069c:	717b      	strb	r3, [r7, #5]

	if (!select_bank(bank)) return 0;
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f821 	bl	80006e8 <select_bank>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <write_one_byte+0x24>
 80006ac:	2300      	movs	r3, #0
 80006ae:	e014      	b.n	80006da <write_one_byte+0x4e>
	uint8_t buf[2];
	buf[0] = regAddr;
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, buf, 2, HAL_MAX_DELAY) == HAL_OK) {
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <write_one_byte+0x58>)
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	f107 020c 	add.w	r2, r7, #12
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2302      	movs	r3, #2
 80006c8:	21d0      	movs	r1, #208	; 0xd0
 80006ca:	f002 f8b5 	bl	8002838 <HAL_I2C_Master_Transmit>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d101      	bne.n	80006d8 <write_one_byte+0x4c>
		return 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	e000      	b.n	80006da <write_one_byte+0x4e>
	}
	return 0;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000002c 	.word	0x2000002c

080006e8 <select_bank>:

uint8_t select_bank(uint8_t bank) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af02      	add	r7, sp, #8
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]

	if (bank > 3) return 0;
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d901      	bls.n	80006fc <select_bank+0x14>
 80006f8:	2300      	movs	r3, #0
 80006fa:	e020      	b.n	800073e <select_bank+0x56>
	if (cur_bank == bank) return 1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <select_bank+0x60>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	79fa      	ldrb	r2, [r7, #7]
 8000702:	429a      	cmp	r2, r3
 8000704:	d101      	bne.n	800070a <select_bank+0x22>
 8000706:	2301      	movs	r3, #1
 8000708:	e019      	b.n	800073e <select_bank+0x56>
	uint8_t buf[2];
	buf[0] = REG_BANK_SEL;
 800070a:	237f      	movs	r3, #127	; 0x7f
 800070c:	733b      	strb	r3, [r7, #12]
	buf[1] = bank << 4;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	011b      	lsls	r3, r3, #4
 8000712:	b2db      	uxtb	r3, r3
 8000714:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, buf, 2, HAL_MAX_DELAY) == HAL_OK) {
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <select_bank+0x64>)
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	f107 020c 	add.w	r2, r7, #12
 800071e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2302      	movs	r3, #2
 8000726:	21d0      	movs	r1, #208	; 0xd0
 8000728:	f002 f886 	bl	8002838 <HAL_I2C_Master_Transmit>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d104      	bne.n	800073c <select_bank+0x54>
		cur_bank = bank;
 8000732:	4a05      	ldr	r2, [pc, #20]	; (8000748 <select_bank+0x60>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	7013      	strb	r3, [r2, #0]
		return 1;
 8000738:	2301      	movs	r3, #1
 800073a:	e000      	b.n	800073e <select_bank+0x56>
	}
	return 0;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000000 	.word	0x20000000
 800074c:	2000002c 	.word	0x2000002c

08000750 <get_cur_bank>:

uint8_t get_cur_bank() {
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af02      	add	r7, sp, #8
	uint8_t buf[1];

	uint8_t reg = REG_BANK_SEL;
 8000756:	237f      	movs	r3, #127	; 0x7f
 8000758:	70fb      	strb	r3, [r7, #3]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <get_cur_bank+0x58>)
 800075c:	6818      	ldr	r0, [r3, #0]
 800075e:	1cfa      	adds	r2, r7, #3
 8000760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2301      	movs	r3, #1
 8000768:	21d0      	movs	r1, #208	; 0xd0
 800076a:	f002 f865 	bl	8002838 <HAL_I2C_Master_Transmit>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d113      	bne.n	800079c <get_cur_bank+0x4c>
		if (HAL_I2C_Master_Receive(hi2c1_ptr, IMU_I2C_ADDR, buf, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <get_cur_bank+0x58>)
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	1d3a      	adds	r2, r7, #4
 800077a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	21d0      	movs	r1, #208	; 0xd0
 8000784:	f002 f956 	bl	8002a34 <HAL_I2C_Master_Receive>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d106      	bne.n	800079c <get_cur_bank+0x4c>
			return (buf[0] >> 4) & 0x3;
 800078e:	793b      	ldrb	r3, [r7, #4]
 8000790:	091b      	lsrs	r3, r3, #4
 8000792:	b2db      	uxtb	r3, r3
 8000794:	f003 0303 	and.w	r3, r3, #3
 8000798:	b2db      	uxtb	r3, r3
 800079a:	e000      	b.n	800079e <get_cur_bank+0x4e>
		}
	}
	return 4;
 800079c:	2304      	movs	r3, #4
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000002c 	.word	0x2000002c

080007ac <read_raw_accel_x>:

int16_t read_raw_accel_x() {
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_ACCEL_XOUT_H) << 8) | read_one_byte(0, B0_ACCEL_XOUT_L));
 80007b2:	212d      	movs	r1, #45	; 0x2d
 80007b4:	2000      	movs	r0, #0
 80007b6:	f7ff ff31 	bl	800061c <read_one_byte>
 80007ba:	4603      	mov	r3, r0
 80007bc:	021b      	lsls	r3, r3, #8
 80007be:	b21c      	sxth	r4, r3
 80007c0:	212e      	movs	r1, #46	; 0x2e
 80007c2:	2000      	movs	r0, #0
 80007c4:	f7ff ff2a 	bl	800061c <read_one_byte>
 80007c8:	4603      	mov	r3, r0
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	4323      	orrs	r3, r4
 80007ce:	80fb      	strh	r3, [r7, #6]
	return raw;
 80007d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd90      	pop	{r4, r7, pc}

080007dc <read_raw_accel_y>:
	int16_t raw = read_raw_accel_x();
	float result = ((float)raw / ACCEL_SENSITIVITY_SCALE) * G;
	return result;
}

int16_t read_raw_accel_y() {
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_ACCEL_YOUT_H) << 8) | read_one_byte(0, B0_ACCEL_YOUT_L));
 80007e2:	212f      	movs	r1, #47	; 0x2f
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ff19 	bl	800061c <read_one_byte>
 80007ea:	4603      	mov	r3, r0
 80007ec:	021b      	lsls	r3, r3, #8
 80007ee:	b21c      	sxth	r4, r3
 80007f0:	2130      	movs	r1, #48	; 0x30
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff ff12 	bl	800061c <read_one_byte>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	4323      	orrs	r3, r4
 80007fe:	80fb      	strh	r3, [r7, #6]
	return raw;
 8000800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000804:	4618      	mov	r0, r3
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bd90      	pop	{r4, r7, pc}

0800080c <read_raw_accel_z>:
	int16_t raw = read_raw_accel_y();
	float result = ((float)raw / ACCEL_SENSITIVITY_SCALE) * G;
	return result;
}

int16_t read_raw_accel_z() {
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_ACCEL_ZOUT_H) << 8) | read_one_byte(0, B0_ACCEL_ZOUT_L));
 8000812:	2131      	movs	r1, #49	; 0x31
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff ff01 	bl	800061c <read_one_byte>
 800081a:	4603      	mov	r3, r0
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	b21c      	sxth	r4, r3
 8000820:	2132      	movs	r1, #50	; 0x32
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fefa 	bl	800061c <read_one_byte>
 8000828:	4603      	mov	r3, r0
 800082a:	b21b      	sxth	r3, r3
 800082c:	4323      	orrs	r3, r4
 800082e:	80fb      	strh	r3, [r7, #6]
	return raw;
 8000830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bd90      	pop	{r4, r7, pc}

0800083c <accel_caliberate>:
}

/*
 * Assumption: Device is initialize on flat surface (ax = ay = 0, az = g)
 */
void accel_caliberate() {
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b089      	sub	sp, #36	; 0x24
 8000840:	af00      	add	r7, sp, #0
	int32_t accel_bias_x = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
	int32_t accel_bias_y = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
	int32_t accel_bias_z = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 100; i++) {
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	e017      	b.n	8000884 <accel_caliberate+0x48>
		accel_bias_x += read_raw_accel_x();
 8000854:	f7ff ffaa 	bl	80007ac <read_raw_accel_x>
 8000858:	4603      	mov	r3, r0
 800085a:	461a      	mov	r2, r3
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	4413      	add	r3, r2
 8000860:	61fb      	str	r3, [r7, #28]
		accel_bias_y += read_raw_accel_y();
 8000862:	f7ff ffbb 	bl	80007dc <read_raw_accel_y>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	4413      	add	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]
		accel_bias_z += read_raw_accel_z();
 8000870:	f7ff ffcc 	bl	800080c <read_raw_accel_z>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	4413      	add	r3, r2
 800087c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 100; i++) {
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	3301      	adds	r3, #1
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	2b63      	cmp	r3, #99	; 0x63
 8000888:	dde4      	ble.n	8000854 <accel_caliberate+0x18>
	}
	accel_bias_x /= 100;
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	4a57      	ldr	r2, [pc, #348]	; (80009ec <accel_caliberate+0x1b0>)
 800088e:	fb82 1203 	smull	r1, r2, r2, r3
 8000892:	1152      	asrs	r2, r2, #5
 8000894:	17db      	asrs	r3, r3, #31
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	61fb      	str	r3, [r7, #28]
	accel_bias_y /= 100;
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	4a53      	ldr	r2, [pc, #332]	; (80009ec <accel_caliberate+0x1b0>)
 800089e:	fb82 1203 	smull	r1, r2, r2, r3
 80008a2:	1152      	asrs	r2, r2, #5
 80008a4:	17db      	asrs	r3, r3, #31
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	61bb      	str	r3, [r7, #24]
	accel_bias_z /= 100;
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	4a4f      	ldr	r2, [pc, #316]	; (80009ec <accel_caliberate+0x1b0>)
 80008ae:	fb82 1203 	smull	r1, r2, r2, r3
 80008b2:	1152      	asrs	r2, r2, #5
 80008b4:	17db      	asrs	r3, r3, #31
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	617b      	str	r3, [r7, #20]
	accel_bias_z -= ACCEL_SENSITIVITY_SCALE;
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80008c0:	617b      	str	r3, [r7, #20]
	// Measured scale: 16384 lsb/g. Offset scale: 0.98 mg/lsb. Convert by offset = - measurement / 16
	accel_bias_x = -accel_bias_x / 16;
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	425b      	negs	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	da00      	bge.n	80008cc <accel_caliberate+0x90>
 80008ca:	330f      	adds	r3, #15
 80008cc:	111b      	asrs	r3, r3, #4
 80008ce:	61fb      	str	r3, [r7, #28]
	accel_bias_y = -accel_bias_y / 16;
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	425b      	negs	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	da00      	bge.n	80008da <accel_caliberate+0x9e>
 80008d8:	330f      	adds	r3, #15
 80008da:	111b      	asrs	r3, r3, #4
 80008dc:	61bb      	str	r3, [r7, #24]
	accel_bias_z = -accel_bias_z / 16;
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	425b      	negs	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	da00      	bge.n	80008e8 <accel_caliberate+0xac>
 80008e6:	330f      	adds	r3, #15
 80008e8:	111b      	asrs	r3, r3, #4
 80008ea:	617b      	str	r3, [r7, #20]
	// Get the preloaded offset and add with our custom bias
	int16_t accel_offset_x = (int16_t)(read_one_byte(1, B1_XA_OFFS_H) << 8 | read_one_byte(1, B1_XA_OFFS_L)) >> 1;
 80008ec:	2114      	movs	r1, #20
 80008ee:	2001      	movs	r0, #1
 80008f0:	f7ff fe94 	bl	800061c <read_one_byte>
 80008f4:	4603      	mov	r3, r0
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21c      	sxth	r4, r3
 80008fa:	2115      	movs	r1, #21
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff fe8d 	bl	800061c <read_one_byte>
 8000902:	4603      	mov	r3, r0
 8000904:	b21b      	sxth	r3, r3
 8000906:	4323      	orrs	r3, r4
 8000908:	b21b      	sxth	r3, r3
 800090a:	105b      	asrs	r3, r3, #1
 800090c:	81fb      	strh	r3, [r7, #14]
	int16_t accel_offset_y = (int16_t)(read_one_byte(1, B1_YA_OFFS_H) << 8 | read_one_byte(1, B1_YA_OFFS_L)) >> 1;
 800090e:	2117      	movs	r1, #23
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff fe83 	bl	800061c <read_one_byte>
 8000916:	4603      	mov	r3, r0
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	b21c      	sxth	r4, r3
 800091c:	2118      	movs	r1, #24
 800091e:	2001      	movs	r0, #1
 8000920:	f7ff fe7c 	bl	800061c <read_one_byte>
 8000924:	4603      	mov	r3, r0
 8000926:	b21b      	sxth	r3, r3
 8000928:	4323      	orrs	r3, r4
 800092a:	b21b      	sxth	r3, r3
 800092c:	105b      	asrs	r3, r3, #1
 800092e:	81bb      	strh	r3, [r7, #12]
	int16_t accel_offset_z = (int16_t)(read_one_byte(1, B1_ZA_OFFS_H) << 8 | read_one_byte(1, B1_ZA_OFFS_L)) >> 1;
 8000930:	211a      	movs	r1, #26
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff fe72 	bl	800061c <read_one_byte>
 8000938:	4603      	mov	r3, r0
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	b21c      	sxth	r4, r3
 800093e:	211b      	movs	r1, #27
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fe6b 	bl	800061c <read_one_byte>
 8000946:	4603      	mov	r3, r0
 8000948:	b21b      	sxth	r3, r3
 800094a:	4323      	orrs	r3, r4
 800094c:	b21b      	sxth	r3, r3
 800094e:	105b      	asrs	r3, r3, #1
 8000950:	817b      	strh	r3, [r7, #10]

	accel_bias_x += accel_offset_x;
 8000952:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000956:	69fa      	ldr	r2, [r7, #28]
 8000958:	4413      	add	r3, r2
 800095a:	61fb      	str	r3, [r7, #28]
	accel_bias_y += accel_offset_y;
 800095c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4413      	add	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
	accel_bias_z += accel_offset_z;
 8000966:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	4413      	add	r3, r2
 800096e:	617b      	str	r3, [r7, #20]

	// Separate accel_bias into 2 part: [14:7] and [6:0]
	uint8_t accel_bias_x_h = (uint8_t)(accel_bias_x >> 7);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	11db      	asrs	r3, r3, #7
 8000974:	727b      	strb	r3, [r7, #9]
	uint8_t accel_bias_x_l = (uint8_t)(accel_bias_x << 1);
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	723b      	strb	r3, [r7, #8]
	uint8_t accel_bias_y_h = (uint8_t)(accel_bias_y >> 7);
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	11db      	asrs	r3, r3, #7
 8000982:	71fb      	strb	r3, [r7, #7]
	uint8_t accel_bias_y_l = (uint8_t)(accel_bias_y << 1);
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	71bb      	strb	r3, [r7, #6]
	uint8_t accel_bias_z_h = (uint8_t)(accel_bias_z >> 7);
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	11db      	asrs	r3, r3, #7
 8000990:	717b      	strb	r3, [r7, #5]
	uint8_t accel_bias_z_l = (uint8_t)(accel_bias_z << 1);
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	713b      	strb	r3, [r7, #4]
	// Write to registers
	write_one_byte(1, B1_XA_OFFS_H, accel_bias_x_h);
 800099a:	7a7b      	ldrb	r3, [r7, #9]
 800099c:	461a      	mov	r2, r3
 800099e:	2114      	movs	r1, #20
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff fe73 	bl	800068c <write_one_byte>
	write_one_byte(1, B1_XA_OFFS_L, accel_bias_x_l);
 80009a6:	7a3b      	ldrb	r3, [r7, #8]
 80009a8:	461a      	mov	r2, r3
 80009aa:	2115      	movs	r1, #21
 80009ac:	2001      	movs	r0, #1
 80009ae:	f7ff fe6d 	bl	800068c <write_one_byte>
	write_one_byte(1, B1_YA_OFFS_H, accel_bias_y_h);
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	461a      	mov	r2, r3
 80009b6:	2117      	movs	r1, #23
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff fe67 	bl	800068c <write_one_byte>
	write_one_byte(1, B1_YA_OFFS_L, accel_bias_y_l);
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	461a      	mov	r2, r3
 80009c2:	2118      	movs	r1, #24
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fe61 	bl	800068c <write_one_byte>
	write_one_byte(1, B1_ZA_OFFS_H, accel_bias_z_h);
 80009ca:	797b      	ldrb	r3, [r7, #5]
 80009cc:	461a      	mov	r2, r3
 80009ce:	211a      	movs	r1, #26
 80009d0:	2001      	movs	r0, #1
 80009d2:	f7ff fe5b 	bl	800068c <write_one_byte>
	write_one_byte(1, B1_ZA_OFFS_L, accel_bias_z_l);
 80009d6:	793b      	ldrb	r3, [r7, #4]
 80009d8:	461a      	mov	r2, r3
 80009da:	211b      	movs	r1, #27
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff fe55 	bl	800068c <write_one_byte>
}
 80009e2:	bf00      	nop
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd90      	pop	{r4, r7, pc}
 80009ea:	bf00      	nop
 80009ec:	51eb851f 	.word	0x51eb851f

080009f0 <read_raw_gyro_x>:

int16_t read_raw_gyro_x() {
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_XOUT_H) << 8) | read_one_byte(0, B0_GYRO_XOUT_L));
 80009f6:	2133      	movs	r1, #51	; 0x33
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff fe0f 	bl	800061c <read_one_byte>
 80009fe:	4603      	mov	r3, r0
 8000a00:	021b      	lsls	r3, r3, #8
 8000a02:	b21c      	sxth	r4, r3
 8000a04:	2134      	movs	r1, #52	; 0x34
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff fe08 	bl	800061c <read_one_byte>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	4323      	orrs	r3, r4
 8000a12:	80fb      	strh	r3, [r7, #6]
	return raw;
 8000a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd90      	pop	{r4, r7, pc}

08000a20 <read_raw_gyro_y>:
	int16_t raw = read_raw_gyro_x();
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
	return result;
}

int16_t read_raw_gyro_y() {
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_YOUT_H) << 8) | read_one_byte(0, B0_GYRO_YOUT_L));
 8000a26:	2135      	movs	r1, #53	; 0x35
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f7ff fdf7 	bl	800061c <read_one_byte>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	021b      	lsls	r3, r3, #8
 8000a32:	b21c      	sxth	r4, r3
 8000a34:	2136      	movs	r1, #54	; 0x36
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff fdf0 	bl	800061c <read_one_byte>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	4323      	orrs	r3, r4
 8000a42:	80fb      	strh	r3, [r7, #6]
	return raw;
 8000a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd90      	pop	{r4, r7, pc}

08000a50 <read_raw_gyro_z>:
	int16_t raw = read_raw_gyro_y();
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
	return result;
}

int16_t read_raw_gyro_z() {
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_ZOUT_H) << 8) | read_one_byte(0, B0_GYRO_ZOUT_L));
 8000a56:	2137      	movs	r1, #55	; 0x37
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fddf 	bl	800061c <read_one_byte>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	b21c      	sxth	r4, r3
 8000a64:	2138      	movs	r1, #56	; 0x38
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff fdd8 	bl	800061c <read_one_byte>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	4323      	orrs	r3, r4
 8000a72:	80fb      	strh	r3, [r7, #6]
	return raw;
 8000a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd90      	pop	{r4, r7, pc}

08000a80 <read_gyro_z>:

float read_gyro_z() {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
	int16_t raw = read_raw_gyro_z();
 8000a86:	f7ff ffe3 	bl	8000a50 <read_raw_gyro_z>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
 8000a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a92:	ee07 3a90 	vmov	s15, r3
 8000a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a9a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000ab8 <read_gyro_z+0x38>
 8000a9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aa2:	edc7 7a00 	vstr	s15, [r7]
	return result;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	ee07 3a90 	vmov	s15, r3
}
 8000aac:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	43030000 	.word	0x43030000

08000abc <gyro_caliberate>:
	gyro->x = read_gyro_x();
	gyro->y = read_gyro_y();
	gyro->z = read_gyro_z();
}

void gyro_caliberate() {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
	int32_t gyro_bias_x = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
	int32_t gyro_bias_y = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
	int32_t gyro_bias_z = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	e017      	b.n	8000b04 <gyro_caliberate+0x48>
		gyro_bias_x += read_raw_gyro_x();
 8000ad4:	f7ff ff8c 	bl	80009f0 <read_raw_gyro_x>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	4413      	add	r3, r2
 8000ae0:	617b      	str	r3, [r7, #20]
		gyro_bias_y += read_raw_gyro_y();
 8000ae2:	f7ff ff9d 	bl	8000a20 <read_raw_gyro_y>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	4413      	add	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
		gyro_bias_z += read_raw_gyro_z();
 8000af0:	f7ff ffae 	bl	8000a50 <read_raw_gyro_z>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	2b63      	cmp	r3, #99	; 0x63
 8000b08:	dde4      	ble.n	8000ad4 <gyro_caliberate+0x18>
	}
	gyro_bias_x /= 100;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	4a31      	ldr	r2, [pc, #196]	; (8000bd4 <gyro_caliberate+0x118>)
 8000b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b12:	1152      	asrs	r2, r2, #5
 8000b14:	17db      	asrs	r3, r3, #31
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	617b      	str	r3, [r7, #20]
	gyro_bias_y /= 100;
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	4a2d      	ldr	r2, [pc, #180]	; (8000bd4 <gyro_caliberate+0x118>)
 8000b1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b22:	1152      	asrs	r2, r2, #5
 8000b24:	17db      	asrs	r3, r3, #31
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	613b      	str	r3, [r7, #16]
	gyro_bias_z /= 100;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <gyro_caliberate+0x118>)
 8000b2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b32:	1152      	asrs	r2, r2, #5
 8000b34:	17db      	asrs	r3, r3, #31
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	60fb      	str	r3, [r7, #12]
	// Step size for offset register: 0.0305 dps/LSB; Offset = Measurement / 4;
	gyro_bias_x = -gyro_bias_x / 4;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	425b      	negs	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	da00      	bge.n	8000b44 <gyro_caliberate+0x88>
 8000b42:	3303      	adds	r3, #3
 8000b44:	109b      	asrs	r3, r3, #2
 8000b46:	617b      	str	r3, [r7, #20]
	gyro_bias_y = -gyro_bias_y / 4;
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	425b      	negs	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	da00      	bge.n	8000b52 <gyro_caliberate+0x96>
 8000b50:	3303      	adds	r3, #3
 8000b52:	109b      	asrs	r3, r3, #2
 8000b54:	613b      	str	r3, [r7, #16]
	gyro_bias_z = -gyro_bias_z / 4;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	425b      	negs	r3, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	da00      	bge.n	8000b60 <gyro_caliberate+0xa4>
 8000b5e:	3303      	adds	r3, #3
 8000b60:	109b      	asrs	r3, r3, #2
 8000b62:	60fb      	str	r3, [r7, #12]
	// Separate gyro_bias into 2 parts: [15:8] and [7:0]
	uint8_t gyro_bias_x_h = (uint8_t)(gyro_bias_x >> 8);
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	121b      	asrs	r3, r3, #8
 8000b68:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_bias_x_l = (uint8_t)gyro_bias_x;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	71bb      	strb	r3, [r7, #6]
	uint8_t gyro_bias_y_h = (uint8_t)(gyro_bias_y >> 8);
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	121b      	asrs	r3, r3, #8
 8000b72:	717b      	strb	r3, [r7, #5]
	uint8_t gyro_bias_y_l = (uint8_t)gyro_bias_y;
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	713b      	strb	r3, [r7, #4]
	uint8_t gyro_bias_z_h = (uint8_t)(gyro_bias_z >> 8);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	121b      	asrs	r3, r3, #8
 8000b7c:	70fb      	strb	r3, [r7, #3]
	uint8_t gyro_bias_z_l = (uint8_t)gyro_bias_z;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	70bb      	strb	r3, [r7, #2]
	// Write to registers
	write_one_byte(2, B2_XG_OFFS_USRH, gyro_bias_x_h);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	461a      	mov	r2, r3
 8000b86:	2103      	movs	r1, #3
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fd7f 	bl	800068c <write_one_byte>
	write_one_byte(2, B2_XG_OFFS_USRL, gyro_bias_x_l);
 8000b8e:	79bb      	ldrb	r3, [r7, #6]
 8000b90:	461a      	mov	r2, r3
 8000b92:	2104      	movs	r1, #4
 8000b94:	2002      	movs	r0, #2
 8000b96:	f7ff fd79 	bl	800068c <write_one_byte>
	write_one_byte(2, B2_YG_OFFS_USRH, gyro_bias_y_h);
 8000b9a:	797b      	ldrb	r3, [r7, #5]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	2105      	movs	r1, #5
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f7ff fd73 	bl	800068c <write_one_byte>
	write_one_byte(2, B2_YG_OFFS_USRL, gyro_bias_y_l);
 8000ba6:	793b      	ldrb	r3, [r7, #4]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	2106      	movs	r1, #6
 8000bac:	2002      	movs	r0, #2
 8000bae:	f7ff fd6d 	bl	800068c <write_one_byte>
	write_one_byte(2, B2_ZG_OFFS_USRH, gyro_bias_z_h);
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	2107      	movs	r1, #7
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f7ff fd67 	bl	800068c <write_one_byte>
	write_one_byte(2, B2_ZG_OFFS_USRL, gyro_bias_z_l);
 8000bbe:	78bb      	ldrb	r3, [r7, #2]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f7ff fd61 	bl	800068c <write_one_byte>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	51eb851f 	.word	0x51eb851f

08000bd8 <calcOri>:

float calcOri(uint32_t lastSampleTime, float lastSampleOri) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	ed87 0a00 	vstr	s0, [r7]
	float angular_speed = read_gyro_z();
 8000be4:	f7ff ff4c 	bl	8000a80 <read_gyro_z>
 8000be8:	ed87 0a05 	vstr	s0, [r7, #20]
	uint32_t curTime = HAL_GetTick();
 8000bec:	f001 f9e8 	bl	8001fc0 <HAL_GetTick>
 8000bf0:	6138      	str	r0, [r7, #16]
	uint16_t dt = lastSampleTime - curTime;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	81fb      	strh	r3, [r7, #14]
	return lastSampleOri + angular_speed * dt;
 8000bfe:	89fb      	ldrh	r3, [r7, #14]
 8000c00:	ee07 3a90 	vmov	s15, r3
 8000c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c08:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c10:	edd7 7a00 	vldr	s15, [r7]
 8000c14:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000c18:	eeb0 0a67 	vmov.f32	s0, s15
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {		// Motor A's interrupt
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <HAL_TIM_IC_CaptureCallback+0x98>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d11c      	bne.n	8000c6e <HAL_TIM_IC_CaptureCallback+0x4a>
		uint32_t counter = __HAL_TIM_GET_COUNTER(htim);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3a:	60fb      	str	r3, [r7, #12]
		mtrAPID.count = (int16_t)counter;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000c42:	801a      	strh	r2, [r3, #0]
		mtrAPID.angle = (int)((mtrAPID.count/2)*360/(PULSE_PER_REV));
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c4a:	0fda      	lsrs	r2, r3, #31
 8000c4c:	4413      	add	r3, r2
 8000c4e:	105b      	asrs	r3, r3, #1
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	461a      	mov	r2, r3
 8000c54:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000c58:	fb02 f303 	mul.w	r3, r2, r3
 8000c5c:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000c5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c62:	11d2      	asrs	r2, r2, #7
 8000c64:	17db      	asrs	r3, r3, #31
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000c6c:	805a      	strh	r2, [r3, #2]
	}
	if (htim == &htim3) {		// Motor B's interrupt
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d11c      	bne.n	8000cb0 <HAL_TIM_IC_CaptureCallback+0x8c>
		uint32_t counter = __HAL_TIM_GET_COUNTER(htim);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7c:	60bb      	str	r3, [r7, #8]
		mtrBPID.count = (int16_t)counter;
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000c84:	801a      	strh	r2, [r3, #0]
		mtrBPID.angle = (int)((mtrBPID.count/2)*360/(PULSE_PER_REV));
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c8c:	0fda      	lsrs	r2, r3, #31
 8000c8e:	4413      	add	r3, r2
 8000c90:	105b      	asrs	r3, r3, #1
 8000c92:	b21b      	sxth	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca4:	11d2      	asrs	r2, r2, #7
 8000ca6:	17db      	asrs	r3, r3, #31
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000cae:	805a      	strh	r2, [r3, #2]
	}
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	200000d4 	.word	0x200000d4
 8000cc0:	200001b8 	.word	0x200001b8
 8000cc4:	634c0635 	.word	0x634c0635
 8000cc8:	2000011c 	.word	0x2000011c
 8000ccc:	200001d8 	.word	0x200001d8

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd6:	f001 f90d 	bl	8001ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cda:	f000 f84d 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cde:	f000 fac7 	bl	8001270 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000ce2:	f000 fa1b 	bl	800111c <MX_TIM8_Init>
  MX_I2C1_Init();
 8000ce6:	f000 f8a5 	bl	8000e34 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000cea:	f000 f96f 	bl	8000fcc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cee:	f000 f9c1 	bl	8001074 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000cf2:	f000 f8cd 	bl	8000e90 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t ori_lastSampleTime = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]

  OLED_Init();
 8000cfa:	f000 fe43 	bl	8001984 <OLED_Init>

  mtr_init(&htim8, &htim2, &htim3, &mtrA, &mtrB, &mtrAPID, &mtrBPID);
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <main+0x84>)
 8000d00:	9302      	str	r3, [sp, #8]
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <main+0x88>)
 8000d04:	9301      	str	r3, [sp, #4]
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <main+0x8c>)
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <main+0x90>)
 8000d0c:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <main+0x94>)
 8000d0e:	4916      	ldr	r1, [pc, #88]	; (8000d68 <main+0x98>)
 8000d10:	4816      	ldr	r0, [pc, #88]	; (8000d6c <main+0x9c>)
 8000d12:	f000 fb29 	bl	8001368 <mtr_init>

  imu_init(&hi2c1);
 8000d16:	4816      	ldr	r0, [pc, #88]	; (8000d70 <main+0xa0>)
 8000d18:	f7ff fbd4 	bl	80004c4 <imu_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mtr_mov_deg(720, 720);
 8000d1c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8000d20:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 8000d24:	f000 fcb2 	bl	800168c <mtr_mov_deg>
	  orientation = calcOri(ori_lastSampleTime, orientation);
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <main+0xa4>)
 8000d2a:	edd3 7a00 	vldr	s15, [r3]
 8000d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ff50 	bl	8000bd8 <calcOri>
 8000d38:	eef0 7a40 	vmov.f32	s15, s0
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <main+0xa4>)
 8000d3e:	edc3 7a00 	vstr	s15, [r3]
	  ori_lastSampleTime = HAL_GetTick();
 8000d42:	f001 f93d 	bl	8001fc0 <HAL_GetTick>
 8000d46:	6078      	str	r0, [r7, #4]
	  HAL_Delay(2000);
 8000d48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d4c:	f001 f944 	bl	8001fd8 <HAL_Delay>
	  mtr_mov_deg(720, 720);
 8000d50:	e7e4      	b.n	8000d1c <main+0x4c>
 8000d52:	bf00      	nop
 8000d54:	200001d8 	.word	0x200001d8
 8000d58:	200001b8 	.word	0x200001b8
 8000d5c:	200001b4 	.word	0x200001b4
 8000d60:	200001b0 	.word	0x200001b0
 8000d64:	2000011c 	.word	0x2000011c
 8000d68:	200000d4 	.word	0x200000d4
 8000d6c:	20000164 	.word	0x20000164
 8000d70:	20000038 	.word	0x20000038
 8000d74:	200001ac 	.word	0x200001ac

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b094      	sub	sp, #80	; 0x50
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	2230      	movs	r2, #48	; 0x30
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f004 f984 	bl	8005094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <SystemClock_Config+0xb4>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <SystemClock_Config+0xb4>)
 8000da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000daa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <SystemClock_Config+0xb4>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <SystemClock_Config+0xb8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <SystemClock_Config+0xb8>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <SystemClock_Config+0xb8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ddc:	2310      	movs	r3, #16
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 fb9f 	bl	800352c <HAL_RCC_OscConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000df4:	f000 fab2 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df8:	230f      	movs	r3, #15
 8000dfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 fe02 	bl	8003a1c <HAL_RCC_ClockConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e1e:	f000 fa9d 	bl	800135c <Error_Handler>
  }
}
 8000e22:	bf00      	nop
 8000e24:	3750      	adds	r7, #80	; 0x50
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <MX_I2C1_Init+0x54>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <MX_I2C1_Init+0x58>)
 8000e42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e72:	f001 fb9d 	bl	80025b0 <HAL_I2C_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e7c:	f000 fa6e 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000038 	.word	0x20000038
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	000186a0 	.word	0x000186a0

08000e90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b096      	sub	sp, #88	; 0x58
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f004 f8e3 	bl	8005094 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ece:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <MX_TIM1_Init+0x134>)
 8000ed0:	4a3d      	ldr	r2, [pc, #244]	; (8000fc8 <MX_TIM1_Init+0x138>)
 8000ed2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8000ed4:	4b3b      	ldr	r3, [pc, #236]	; (8000fc4 <MX_TIM1_Init+0x134>)
 8000ed6:	22a0      	movs	r2, #160	; 0xa0
 8000ed8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <MX_TIM1_Init+0x134>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000ee0:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <MX_TIM1_Init+0x134>)
 8000ee2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ee6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <MX_TIM1_Init+0x134>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eee:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <MX_TIM1_Init+0x134>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ef4:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <MX_TIM1_Init+0x134>)
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000efa:	4832      	ldr	r0, [pc, #200]	; (8000fc4 <MX_TIM1_Init+0x134>)
 8000efc:	f002 ff5a 	bl	8003db4 <HAL_TIM_Base_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f06:	f000 fa29 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f14:	4619      	mov	r1, r3
 8000f16:	482b      	ldr	r0, [pc, #172]	; (8000fc4 <MX_TIM1_Init+0x134>)
 8000f18:	f003 fbda 	bl	80046d0 <HAL_TIM_ConfigClockSource>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f22:	f000 fa1b 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f26:	4827      	ldr	r0, [pc, #156]	; (8000fc4 <MX_TIM1_Init+0x134>)
 8000f28:	f002 ff93 	bl	8003e52 <HAL_TIM_PWM_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f32:	f000 fa13 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f42:	4619      	mov	r1, r3
 8000f44:	481f      	ldr	r0, [pc, #124]	; (8000fc4 <MX_TIM1_Init+0x134>)
 8000f46:	f003 ffc3 	bl	8004ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f50:	f000 fa04 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f54:	2360      	movs	r3, #96	; 0x60
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	220c      	movs	r2, #12
 8000f72:	4619      	mov	r1, r3
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <MX_TIM1_Init+0x134>)
 8000f76:	f003 fae9 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000f80:	f000 f9ec 	bl	800135c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <MX_TIM1_Init+0x134>)
 8000fa8:	f004 f80e 	bl	8004fc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000fb2:	f000 f9d3 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fb6:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <MX_TIM1_Init+0x134>)
 8000fb8:	f000 fee8 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 8000fbc:	bf00      	nop
 8000fbe:	3758      	adds	r7, #88	; 0x58
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000008c 	.word	0x2000008c
 8000fc8:	40010000 	.word	0x40010000

08000fcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	2224      	movs	r2, #36	; 0x24
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 f85a 	bl	8005094 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <MX_TIM2_Init+0xa4>)
 8000fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_TIM2_Init+0xa4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_TIM2_Init+0xa4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_TIM2_Init+0xa4>)
 8000ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001002:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_TIM2_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_TIM2_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001010:	2303      	movs	r3, #3
 8001012:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001018:	2301      	movs	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001020:	230a      	movs	r3, #10
 8001022:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001028:	2301      	movs	r3, #1
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001030:	230a      	movs	r3, #10
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4619      	mov	r1, r3
 800103a:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_TIM2_Init+0xa4>)
 800103c:	f003 f82a 	bl	8004094 <HAL_TIM_Encoder_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001046:	f000 f989 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <MX_TIM2_Init+0xa4>)
 8001058:	f003 ff3a 	bl	8004ed0 <HAL_TIMEx_MasterConfigSynchronization>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001062:	f000 f97b 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3730      	adds	r7, #48	; 0x30
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000d4 	.word	0x200000d4

08001074 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	; 0x30
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2224      	movs	r2, #36	; 0x24
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f004 f806 	bl	8005094 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_TIM3_Init+0xa0>)
 8001092:	4a21      	ldr	r2, [pc, #132]	; (8001118 <MX_TIM3_Init+0xa4>)
 8001094:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_TIM3_Init+0xa0>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_TIM3_Init+0xa0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_TIM3_Init+0xa0>)
 80010a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_TIM3_Init+0xa0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_TIM3_Init+0xa0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010b6:	2303      	movs	r3, #3
 80010b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010be:	2301      	movs	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80010c6:	230a      	movs	r3, #10
 80010c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ce:	2301      	movs	r3, #1
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80010d6:	230a      	movs	r3, #10
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	4619      	mov	r1, r3
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <MX_TIM3_Init+0xa0>)
 80010e2:	f002 ffd7 	bl	8004094 <HAL_TIM_Encoder_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80010ec:	f000 f936 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_TIM3_Init+0xa0>)
 80010fe:	f003 fee7 	bl	8004ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001108:	f000 f928 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	3730      	adds	r7, #48	; 0x30
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000011c 	.word	0x2000011c
 8001118:	40000400 	.word	0x40000400

0800111c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b096      	sub	sp, #88	; 0x58
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]
 800114a:	615a      	str	r2, [r3, #20]
 800114c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2220      	movs	r2, #32
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f003 ff9d 	bl	8005094 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800115a:	4b43      	ldr	r3, [pc, #268]	; (8001268 <MX_TIM8_Init+0x14c>)
 800115c:	4a43      	ldr	r2, [pc, #268]	; (800126c <MX_TIM8_Init+0x150>)
 800115e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001160:	4b41      	ldr	r3, [pc, #260]	; (8001268 <MX_TIM8_Init+0x14c>)
 8001162:	2200      	movs	r2, #0
 8001164:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b40      	ldr	r3, [pc, #256]	; (8001268 <MX_TIM8_Init+0x14c>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 800116c:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <MX_TIM8_Init+0x14c>)
 800116e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001172:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <MX_TIM8_Init+0x14c>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <MX_TIM8_Init+0x14c>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <MX_TIM8_Init+0x14c>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001186:	4838      	ldr	r0, [pc, #224]	; (8001268 <MX_TIM8_Init+0x14c>)
 8001188:	f002 fe14 	bl	8003db4 <HAL_TIM_Base_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001192:	f000 f8e3 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800119c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011a0:	4619      	mov	r1, r3
 80011a2:	4831      	ldr	r0, [pc, #196]	; (8001268 <MX_TIM8_Init+0x14c>)
 80011a4:	f003 fa94 	bl	80046d0 <HAL_TIM_ConfigClockSource>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80011ae:	f000 f8d5 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011b2:	482d      	ldr	r0, [pc, #180]	; (8001268 <MX_TIM8_Init+0x14c>)
 80011b4:	f002 fe4d 	bl	8003e52 <HAL_TIM_PWM_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80011be:	f000 f8cd 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ce:	4619      	mov	r1, r3
 80011d0:	4825      	ldr	r0, [pc, #148]	; (8001268 <MX_TIM8_Init+0x14c>)
 80011d2:	f003 fe7d 	bl	8004ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80011dc:	f000 f8be 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e0:	2360      	movs	r3, #96	; 0x60
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011ec:	2300      	movs	r3, #0
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	4818      	ldr	r0, [pc, #96]	; (8001268 <MX_TIM8_Init+0x14c>)
 8001206:	f003 f9a1 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001210:	f000 f8a4 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	2204      	movs	r2, #4
 800121a:	4619      	mov	r1, r3
 800121c:	4812      	ldr	r0, [pc, #72]	; (8001268 <MX_TIM8_Init+0x14c>)
 800121e:	f003 f995 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001228:	f000 f898 	bl	800135c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001244:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_TIM8_Init+0x14c>)
 8001250:	f003 feba 	bl	8004fc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800125a:	f000 f87f 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3758      	adds	r7, #88	; 0x58
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000164 	.word	0x20000164
 800126c:	40010400 	.word	0x40010400

08001270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b31      	ldr	r3, [pc, #196]	; (8001350 <MX_GPIO_Init+0xe0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a30      	ldr	r2, [pc, #192]	; (8001350 <MX_GPIO_Init+0xe0>)
 8001290:	f043 0310 	orr.w	r3, r3, #16
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <MX_GPIO_Init+0xe0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <MX_GPIO_Init+0xe0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a29      	ldr	r2, [pc, #164]	; (8001350 <MX_GPIO_Init+0xe0>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <MX_GPIO_Init+0xe0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b23      	ldr	r3, [pc, #140]	; (8001350 <MX_GPIO_Init+0xe0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a22      	ldr	r2, [pc, #136]	; (8001350 <MX_GPIO_Init+0xe0>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <MX_GPIO_Init+0xe0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_GPIO_Init+0xe0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a1b      	ldr	r2, [pc, #108]	; (8001350 <MX_GPIO_Init+0xe0>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_GPIO_Init+0xe0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80012fc:	4815      	ldr	r0, [pc, #84]	; (8001354 <MX_GPIO_Init+0xe4>)
 80012fe:	f001 f93d 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	213c      	movs	r1, #60	; 0x3c
 8001306:	4814      	ldr	r0, [pc, #80]	; (8001358 <MX_GPIO_Init+0xe8>)
 8001308:	f001 f938 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800130c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <MX_GPIO_Init+0xe4>)
 8001326:	f000 ff8d 	bl	8002244 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800132a:	233c      	movs	r3, #60	; 0x3c
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001336:	2302      	movs	r3, #2
 8001338:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_GPIO_Init+0xe8>)
 8001342:	f000 ff7f 	bl	8002244 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001346:	bf00      	nop
 8001348:	3728      	adds	r7, #40	; 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40021000 	.word	0x40021000
 8001358:	40020000 	.word	0x40020000

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>
	...

08001368 <mtr_init>:
TIM_HandleTypeDef* htim8Ptr;	// Pointer of the timer for pwm generation (by default should pass &htim8)
TIM_HandleTypeDef* htim2Ptr;	// Pointer of the timer for motor A encoding (by default should pass &htim2)
TIM_HandleTypeDef* htim3Ptr;	// Pointer of the timer for motor B encoding (by default should pass &htim3)

void mtr_init(TIM_HandleTypeDef* pwm_htimPtr, TIM_HandleTypeDef* encodeA_htimPtr, TIM_HandleTypeDef* encodeB_htimPtr,
		MotorData* mtrA, MotorData* mtrB, MotorPIDData* mtrAPID, MotorPIDData* mtrBPID) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]

	motorA = mtrA;
 8001376:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <mtr_init+0x90>)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	6013      	str	r3, [r2, #0]
	motorB = mtrB;
 800137c:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <mtr_init+0x94>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	6013      	str	r3, [r2, #0]
	motorAPID = mtrAPID;
 8001382:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <mtr_init+0x98>)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	6013      	str	r3, [r2, #0]
	motorBPID = mtrBPID;
 8001388:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <mtr_init+0x9c>)
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	6013      	str	r3, [r2, #0]

	mtrA_init(0, 20, 0, 0.001);
 800138e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8001408 <mtr_init+0xa0>
 8001392:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800140c <mtr_init+0xa4>
 8001396:	2114      	movs	r1, #20
 8001398:	2000      	movs	r0, #0
 800139a:	f000 f83f 	bl	800141c <mtrA_init>
	mtrB_init(0, 20, 0, 0.001);
 800139e:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8001408 <mtr_init+0xa0>
 80013a2:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800140c <mtr_init+0xa4>
 80013a6:	2114      	movs	r1, #20
 80013a8:	2000      	movs	r0, #0
 80013aa:	f000 f889 	bl	80014c0 <mtrB_init>

	htim8Ptr = pwm_htimPtr;
 80013ae:	4a18      	ldr	r2, [pc, #96]	; (8001410 <mtr_init+0xa8>)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6013      	str	r3, [r2, #0]
	htim2Ptr = encodeA_htimPtr;
 80013b4:	4a17      	ldr	r2, [pc, #92]	; (8001414 <mtr_init+0xac>)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	6013      	str	r3, [r2, #0]
	htim3Ptr = encodeB_htimPtr;
 80013ba:	4a17      	ldr	r2, [pc, #92]	; (8001418 <mtr_init+0xb0>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim8Ptr, PWMA_TIM_CH);
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <mtr_init+0xa8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fd9c 	bl	8003f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim8Ptr, PWMB_TIM_CH);
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <mtr_init+0xa8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2104      	movs	r1, #4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 fd96 	bl	8003f04 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start_IT(htim2Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <mtr_init+0xac>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	213c      	movs	r1, #60	; 0x3c
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fefe 	bl	80041e0 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(htim3Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <mtr_init+0xb0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	213c      	movs	r1, #60	; 0x3c
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fef8 	bl	80041e0 <HAL_TIM_Encoder_Start_IT>
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200001f8 	.word	0x200001f8
 80013fc:	200001fc 	.word	0x200001fc
 8001400:	20000200 	.word	0x20000200
 8001404:	20000204 	.word	0x20000204
 8001408:	3a83126f 	.word	0x3a83126f
 800140c:	00000000 	.word	0x00000000
 8001410:	20000208 	.word	0x20000208
 8001414:	2000020c 	.word	0x2000020c
 8001418:	20000210 	.word	0x20000210

0800141c <mtrA_init>:

void mtrA_init(int16_t target_angle, int16_t Kp, float Kd, float Ki) {
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	460a      	mov	r2, r1
 8001426:	ed87 0a02 	vstr	s0, [r7, #8]
 800142a:	edc7 0a01 	vstr	s1, [r7, #4]
 800142e:	81fb      	strh	r3, [r7, #14]
 8001430:	4613      	mov	r3, r2
 8001432:	81bb      	strh	r3, [r7, #12]

	motorA->dir = DIR_FWD;
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <mtrA_init+0x9c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
	motorA->pwmVal = 0;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <mtrA_init+0x9c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2200      	movs	r2, #0
 8001442:	805a      	strh	r2, [r3, #2]

	motorAPID->count = 0;       		// Counter (signed value)
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <mtrA_init+0xa0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	801a      	strh	r2, [r3, #0]
	motorAPID->angle = 0;      			// angle of rotation, in degree resolution = 360/260
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <mtrA_init+0xa0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	805a      	strh	r2, [r3, #2]
	motorAPID->target_angle = target_angle; 		// target angle of rotation,
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <mtrA_init+0xa0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	89fa      	ldrh	r2, [r7, #14]
 800145a:	809a      	strh	r2, [r3, #4]
	motorAPID->error = motorAPID->target_angle - motorAPID->angle;           	// error between target and actual
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <mtrA_init+0xa0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <mtrA_init+0xa0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800146e:	b29b      	uxth	r3, r3
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	b29a      	uxth	r2, r3
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <mtrA_init+0xa0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	b212      	sxth	r2, r2
 800147a:	80da      	strh	r2, [r3, #6]
	motorAPID->error_area = 0;  		// area under error - to calculate I for PI implementation
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <mtrA_init+0xa0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
	motorAPID->error_old = 0; 			// to calculate D for PID control
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <mtrA_init+0xa0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
	motorAPID->millisOld = 0;			// to calculate I and D for PID control
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <mtrA_init+0xa0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
	motorAPID->Kp = Kp;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <mtrA_init+0xa0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	89ba      	ldrh	r2, [r7, #12]
 800149a:	829a      	strh	r2, [r3, #20]
	motorAPID->Kd = Kd;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <mtrA_init+0xa0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	619a      	str	r2, [r3, #24]
	motorAPID->Ki = Ki;
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <mtrA_init+0xa0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	61da      	str	r2, [r3, #28]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	200001f8 	.word	0x200001f8
 80014bc:	20000200 	.word	0x20000200

080014c0 <mtrB_init>:

void mtrB_init(int16_t target_angle, int16_t Kp, float Kd, float Ki) {
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	460a      	mov	r2, r1
 80014ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80014ce:	edc7 0a01 	vstr	s1, [r7, #4]
 80014d2:	81fb      	strh	r3, [r7, #14]
 80014d4:	4613      	mov	r3, r2
 80014d6:	81bb      	strh	r3, [r7, #12]

	motorB->dir = DIR_FWD;
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <mtrB_init+0x9c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
	motorB->pwmVal = 0;
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <mtrB_init+0x9c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	805a      	strh	r2, [r3, #2]

	motorBPID->count = 0;       		// Counter (signed value)
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <mtrB_init+0xa0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	801a      	strh	r2, [r3, #0]
	motorBPID->angle = 0;      			// angle of rotation, in degree resolution = 360/260
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <mtrB_init+0xa0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2200      	movs	r2, #0
 80014f6:	805a      	strh	r2, [r3, #2]
	motorBPID->target_angle = target_angle; 		// target angle of rotation,
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <mtrB_init+0xa0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	89fa      	ldrh	r2, [r7, #14]
 80014fe:	809a      	strh	r2, [r3, #4]
	motorBPID->error = motorBPID->target_angle - motorBPID->angle;           	// error between target and actual
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <mtrB_init+0xa0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <mtrB_init+0xa0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001512:	b29b      	uxth	r3, r3
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	b29a      	uxth	r2, r3
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <mtrB_init+0xa0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	b212      	sxth	r2, r2
 800151e:	80da      	strh	r2, [r3, #6]
	motorBPID->error_area = 0;  		// area under error - to calculate I for PI implementation
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <mtrB_init+0xa0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
	motorBPID->error_old = 0; 			// to calculate D for PID control
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <mtrB_init+0xa0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
	motorBPID->millisOld = 0;			// to calculate I and D for PID control
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <mtrB_init+0xa0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
	motorBPID->Kp = Kp;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <mtrB_init+0xa0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	89ba      	ldrh	r2, [r7, #12]
 800153e:	829a      	strh	r2, [r3, #20]
	motorBPID->Kd = Kd;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <mtrB_init+0xa0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	619a      	str	r2, [r3, #24]
	motorBPID->Ki = Ki;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <mtrB_init+0xa0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	61da      	str	r2, [r3, #28]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	200001fc 	.word	0x200001fc
 8001560:	20000204 	.word	0x20000204

08001564 <mtrA_mov>:

void mtrA_mov(uint8_t direction, uint16_t speed) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	460a      	mov	r2, r1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	4613      	mov	r3, r2
 8001572:	80bb      	strh	r3, [r7, #4]

	// Backward
	if (direction == DIR_BCK) {
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10a      	bne.n	8001590 <mtrA_mov+0x2c>
		MOTOR_AIN1_Clr();
 800157a:	2200      	movs	r2, #0
 800157c:	2108      	movs	r1, #8
 800157e:	4811      	ldr	r0, [pc, #68]	; (80015c4 <mtrA_mov+0x60>)
 8001580:	f000 fffc 	bl	800257c <HAL_GPIO_WritePin>
		MOTOR_AIN2_Set();
 8001584:	2201      	movs	r2, #1
 8001586:	2104      	movs	r1, #4
 8001588:	480e      	ldr	r0, [pc, #56]	; (80015c4 <mtrA_mov+0x60>)
 800158a:	f000 fff7 	bl	800257c <HAL_GPIO_WritePin>
 800158e:	e009      	b.n	80015a4 <mtrA_mov+0x40>
	}
	// Forward
	else {
		MOTOR_AIN1_Set();
 8001590:	2201      	movs	r2, #1
 8001592:	2108      	movs	r1, #8
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <mtrA_mov+0x60>)
 8001596:	f000 fff1 	bl	800257c <HAL_GPIO_WritePin>
		MOTOR_AIN2_Clr();
 800159a:	2200      	movs	r2, #0
 800159c:	2104      	movs	r1, #4
 800159e:	4809      	ldr	r0, [pc, #36]	; (80015c4 <mtrA_mov+0x60>)
 80015a0:	f000 ffec 	bl	800257c <HAL_GPIO_WritePin>
	}

	// Set speed
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 80015a4:	88bb      	ldrh	r3, [r7, #4]
 80015a6:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80015aa:	d302      	bcc.n	80015b2 <mtrA_mov+0x4e>
 80015ac:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80015b0:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim8Ptr, PWMA_TIM_CH, speed);
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <mtrA_mov+0x64>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	88ba      	ldrh	r2, [r7, #4]
 80015ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40020000 	.word	0x40020000
 80015c8:	20000208 	.word	0x20000208

080015cc <mtrB_mov>:

void mtrB_mov(uint8_t direction, uint16_t speed) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	460a      	mov	r2, r1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]

	// Backward
	if (direction == DIR_BCK) {
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10a      	bne.n	80015f8 <mtrB_mov+0x2c>
		MOTOR_BIN1_Clr();
 80015e2:	2200      	movs	r2, #0
 80015e4:	2110      	movs	r1, #16
 80015e6:	4811      	ldr	r0, [pc, #68]	; (800162c <mtrB_mov+0x60>)
 80015e8:	f000 ffc8 	bl	800257c <HAL_GPIO_WritePin>
		MOTOR_BIN2_Set();
 80015ec:	2201      	movs	r2, #1
 80015ee:	2120      	movs	r1, #32
 80015f0:	480e      	ldr	r0, [pc, #56]	; (800162c <mtrB_mov+0x60>)
 80015f2:	f000 ffc3 	bl	800257c <HAL_GPIO_WritePin>
 80015f6:	e009      	b.n	800160c <mtrB_mov+0x40>
	}
	// Forward
	else {
		MOTOR_BIN1_Set();
 80015f8:	2201      	movs	r2, #1
 80015fa:	2110      	movs	r1, #16
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <mtrB_mov+0x60>)
 80015fe:	f000 ffbd 	bl	800257c <HAL_GPIO_WritePin>
		MOTOR_BIN2_Clr();
 8001602:	2200      	movs	r2, #0
 8001604:	2120      	movs	r1, #32
 8001606:	4809      	ldr	r0, [pc, #36]	; (800162c <mtrB_mov+0x60>)
 8001608:	f000 ffb8 	bl	800257c <HAL_GPIO_WritePin>
	}

	// Set speed
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 800160c:	88bb      	ldrh	r3, [r7, #4]
 800160e:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8001612:	d302      	bcc.n	800161a <mtrB_mov+0x4e>
 8001614:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8001618:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim8Ptr, PWMB_TIM_CH, speed);
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <mtrB_mov+0x64>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	88ba      	ldrh	r2, [r7, #4]
 8001622:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40020000 	.word	0x40020000
 8001630:	20000208 	.word	0x20000208

08001634 <mtr_mov>:

void mtr_mov(MotorData* motor) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	if (motor == motorA) {
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <mtr_mov+0x50>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	d10a      	bne.n	800165c <mtr_mov+0x28>
		mtrA_mov(motor->dir, motor->pwmVal);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001650:	b29b      	uxth	r3, r3
 8001652:	4619      	mov	r1, r3
 8001654:	4610      	mov	r0, r2
 8001656:	f7ff ff85 	bl	8001564 <mtrA_mov>
	}
	else if (motor == motorB) {
		mtrB_mov(motor->dir, motor->pwmVal);
	}
}
 800165a:	e00e      	b.n	800167a <mtr_mov+0x46>
	else if (motor == motorB) {
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <mtr_mov+0x54>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	d109      	bne.n	800167a <mtr_mov+0x46>
		mtrB_mov(motor->dir, motor->pwmVal);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	781a      	ldrb	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001670:	b29b      	uxth	r3, r3
 8001672:	4619      	mov	r1, r3
 8001674:	4610      	mov	r0, r2
 8001676:	f7ff ffa9 	bl	80015cc <mtrB_mov>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200001f8 	.word	0x200001f8
 8001688:	200001fc 	.word	0x200001fc

0800168c <mtr_mov_deg>:

void mtr_mov_deg(int degree_A, int degree_B) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
	mtrA_init((int16_t)degree_A,20,0,0.001);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	b21b      	sxth	r3, r3
 800169a:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8001704 <mtr_mov_deg+0x78>
 800169e:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001708 <mtr_mov_deg+0x7c>
 80016a2:	2114      	movs	r1, #20
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff feb9 	bl	800141c <mtrA_init>
	mtrB_init((int16_t)degree_B,20,0,0.001);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	eddf 0a15 	vldr	s1, [pc, #84]	; 8001704 <mtr_mov_deg+0x78>
 80016b2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001708 <mtr_mov_deg+0x7c>
 80016b6:	2114      	movs	r1, #20
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff01 	bl	80014c0 <mtrB_init>
	while ((motorAPID->error > 2) || (motorBPID->error > 2)) {
 80016be:	e00f      	b.n	80016e0 <mtr_mov_deg+0x54>
		PID_Control(motorA, motorAPID);
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <mtr_mov_deg+0x80>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a12      	ldr	r2, [pc, #72]	; (8001710 <mtr_mov_deg+0x84>)
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f826 	bl	800171c <PID_Control>
		PID_Control(motorB, motorBPID);
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <mtr_mov_deg+0x88>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a10      	ldr	r2, [pc, #64]	; (8001718 <mtr_mov_deg+0x8c>)
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f81e 	bl	800171c <PID_Control>
	while ((motorAPID->error > 2) || (motorBPID->error > 2)) {
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <mtr_mov_deg+0x84>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	dce9      	bgt.n	80016c0 <mtr_mov_deg+0x34>
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <mtr_mov_deg+0x8c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	dce3      	bgt.n	80016c0 <mtr_mov_deg+0x34>
	}
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	3a83126f 	.word	0x3a83126f
 8001708:	00000000 	.word	0x00000000
 800170c:	200001f8 	.word	0x200001f8
 8001710:	20000200 	.word	0x20000200
 8001714:	200001fc 	.word	0x200001fc
 8001718:	20000204 	.word	0x20000204

0800171c <PID_Control>:

void PID_Control(MotorData* motor, MotorPIDData* motorPID) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
	  //Control Loop
	if (abs(motorPID->error)>2) { //more than 2 degree difference
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800172c:	2b00      	cmp	r3, #0
 800172e:	bfb8      	it	lt
 8001730:	425b      	neglt	r3, r3
 8001732:	b29b      	uxth	r3, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d979      	bls.n	800182c <PID_Control+0x110>
  	    motorPID->error = motorPID->target_angle - motorPID->angle;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800173e:	b29a      	uxth	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001746:	b29b      	uxth	r3, r3
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	b29b      	uxth	r3, r3
 800174c:	b21a      	sxth	r2, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	80da      	strh	r2, [r3, #6]

        if (motorPID->error > 0)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001758:	2b00      	cmp	r3, #0
 800175a:	dd03      	ble.n	8001764 <PID_Control+0x48>
        	motor->dir = DIR_FWD;	// Forward
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	e002      	b.n	800176a <PID_Control+0x4e>
        else
        	motor->dir = DIR_BCK;	// Backward
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]

        int32_t millisNow = HAL_GetTick();
 800176a:	f000 fc29 	bl	8001fc0 <HAL_GetTick>
 800176e:	4603      	mov	r3, r0
 8001770:	617b      	str	r3, [r7, #20]
        int32_t dt = (millisNow - motorPID->millisOld); // time elapsed in millisecond
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	613b      	str	r3, [r7, #16]
        motorPID->millisOld = millisNow; // store the current time for next round
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	611a      	str	r2, [r3, #16]

        motorPID->error_area = motorPID->error_area + motorPID->error * dt; // area under error for Ki
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800178c:	4619      	mov	r1, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	441a      	add	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	609a      	str	r2, [r3, #8]

        int32_t error_change = motorPID->error - motorPID->error_old; // change in error
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017a0:	461a      	mov	r2, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	60fb      	str	r3, [r7, #12]
        motorPID->error_old = motorPID->error; //store the error for next round
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017b0:	461a      	mov	r2, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	60da      	str	r2, [r3, #12]
        float error_rate = (float)error_change / dt; // for Kd
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ce:	edc7 7a02 	vstr	s15, [r7, #8]

        motor->pwmVal = (int)(motorPID->error * motorPID->Kp + motorPID->error_area * motorPID->Ki + error_rate * motorPID->Kd);  // PID
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017d8:	461a      	mov	r2, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80017e0:	fb02 f303 	mul.w	r3, r2, r3
 80017e4:	ee07 3a90 	vmov	s15, r3
 80017e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80017fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001802:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	edd3 6a06 	vldr	s13, [r3, #24]
 800180c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181c:	ee17 3a90 	vmov	r3, s15
 8001820:	b21a      	sxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	805a      	strh	r2, [r3, #2]

        mtr_mov(motor);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ff04 	bl	8001634 <mtr_mov>
	} // if loop
}
 800182c:	bf00      	nop
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800183a:	2300      	movs	r3, #0
 800183c:	71fb      	strb	r3, [r7, #7]
 800183e:	e026      	b.n	800188e <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	3b50      	subs	r3, #80	; 0x50
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f82b 	bl	80018a4 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800184e:	2100      	movs	r1, #0
 8001850:	2000      	movs	r0, #0
 8001852:	f000 f827 	bl	80018a4 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8001856:	2100      	movs	r1, #0
 8001858:	2010      	movs	r0, #16
 800185a:	f000 f823 	bl	80018a4 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800185e:	2300      	movs	r3, #0
 8001860:	71bb      	strb	r3, [r7, #6]
 8001862:	e00d      	b.n	8001880 <OLED_Refresh_Gram+0x4c>
 8001864:	79ba      	ldrb	r2, [r7, #6]
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	490d      	ldr	r1, [pc, #52]	; (80018a0 <OLED_Refresh_Gram+0x6c>)
 800186a:	00d2      	lsls	r2, r2, #3
 800186c:	440a      	add	r2, r1
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2101      	movs	r1, #1
 8001874:	4618      	mov	r0, r3
 8001876:	f000 f815 	bl	80018a4 <OLED_WR_Byte>
 800187a:	79bb      	ldrb	r3, [r7, #6]
 800187c:	3301      	adds	r3, #1
 800187e:	71bb      	strb	r3, [r7, #6]
 8001880:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001884:	2b00      	cmp	r3, #0
 8001886:	daed      	bge.n	8001864 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	3301      	adds	r3, #1
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b07      	cmp	r3, #7
 8001892:	d9d5      	bls.n	8001840 <OLED_Refresh_Gram+0xc>
	}   
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000214 	.word	0x20000214

080018a4 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	460a      	mov	r2, r1
 80018ae:	71fb      	strb	r3, [r7, #7]
 80018b0:	4613      	mov	r3, r2
 80018b2:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80018b4:	79bb      	ldrb	r3, [r7, #6]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d006      	beq.n	80018c8 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c0:	481c      	ldr	r0, [pc, #112]	; (8001934 <OLED_WR_Byte+0x90>)
 80018c2:	f000 fe5b 	bl	800257c <HAL_GPIO_WritePin>
 80018c6:	e005      	b.n	80018d4 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ce:	4819      	ldr	r0, [pc, #100]	; (8001934 <OLED_WR_Byte+0x90>)
 80018d0:	f000 fe54 	bl	800257c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	e01e      	b.n	8001918 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80018da:	2200      	movs	r2, #0
 80018dc:	2120      	movs	r1, #32
 80018de:	4815      	ldr	r0, [pc, #84]	; (8001934 <OLED_WR_Byte+0x90>)
 80018e0:	f000 fe4c 	bl	800257c <HAL_GPIO_WritePin>
		if(dat&0x80)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da05      	bge.n	80018f8 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80018ec:	2201      	movs	r2, #1
 80018ee:	2140      	movs	r1, #64	; 0x40
 80018f0:	4810      	ldr	r0, [pc, #64]	; (8001934 <OLED_WR_Byte+0x90>)
 80018f2:	f000 fe43 	bl	800257c <HAL_GPIO_WritePin>
 80018f6:	e004      	b.n	8001902 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80018f8:	2200      	movs	r2, #0
 80018fa:	2140      	movs	r1, #64	; 0x40
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <OLED_WR_Byte+0x90>)
 80018fe:	f000 fe3d 	bl	800257c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8001902:	2201      	movs	r2, #1
 8001904:	2120      	movs	r1, #32
 8001906:	480b      	ldr	r0, [pc, #44]	; (8001934 <OLED_WR_Byte+0x90>)
 8001908:	f000 fe38 	bl	800257c <HAL_GPIO_WritePin>
		dat<<=1;   
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	3301      	adds	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	2b07      	cmp	r3, #7
 800191c:	d9dd      	bls.n	80018da <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800191e:	2201      	movs	r2, #1
 8001920:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <OLED_WR_Byte+0x90>)
 8001926:	f000 fe29 	bl	800257c <HAL_GPIO_WritePin>
} 
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000

08001938 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800193e:	2300      	movs	r3, #0
 8001940:	71fb      	strb	r3, [r7, #7]
 8001942:	e014      	b.n	800196e <OLED_Clear+0x36>
 8001944:	2300      	movs	r3, #0
 8001946:	71bb      	strb	r3, [r7, #6]
 8001948:	e00a      	b.n	8001960 <OLED_Clear+0x28>
 800194a:	79ba      	ldrb	r2, [r7, #6]
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	490c      	ldr	r1, [pc, #48]	; (8001980 <OLED_Clear+0x48>)
 8001950:	00d2      	lsls	r2, r2, #3
 8001952:	440a      	add	r2, r1
 8001954:	4413      	add	r3, r2
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	79bb      	ldrb	r3, [r7, #6]
 800195c:	3301      	adds	r3, #1
 800195e:	71bb      	strb	r3, [r7, #6]
 8001960:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001964:	2b00      	cmp	r3, #0
 8001966:	daf0      	bge.n	800194a <OLED_Clear+0x12>
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	3301      	adds	r3, #1
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b07      	cmp	r3, #7
 8001972:	d9e7      	bls.n	8001944 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8001974:	f7ff ff5e 	bl	8001834 <OLED_Refresh_Gram>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000214 	.word	0x20000214

08001984 <OLED_Init>:
        p++;
    }  
}	 

void OLED_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8001988:	f001 fda8 	bl	80034dc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800198c:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <OLED_Init+0x110>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001990:	4a40      	ldr	r2, [pc, #256]	; (8001a94 <OLED_Init+0x110>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	6713      	str	r3, [r2, #112]	; 0x70
 8001998:	4b3e      	ldr	r3, [pc, #248]	; (8001a94 <OLED_Init+0x110>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	4a3d      	ldr	r2, [pc, #244]	; (8001a94 <OLED_Init+0x110>)
 800199e:	f023 0304 	bic.w	r3, r3, #4
 80019a2:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80019a4:	f001 fdae 	bl	8003504 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80019a8:	2200      	movs	r2, #0
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	483a      	ldr	r0, [pc, #232]	; (8001a98 <OLED_Init+0x114>)
 80019ae:	f000 fde5 	bl	800257c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80019b2:	2064      	movs	r0, #100	; 0x64
 80019b4:	f000 fb10 	bl	8001fd8 <HAL_Delay>
	OLED_RST_Set();
 80019b8:	2201      	movs	r2, #1
 80019ba:	2180      	movs	r1, #128	; 0x80
 80019bc:	4836      	ldr	r0, [pc, #216]	; (8001a98 <OLED_Init+0x114>)
 80019be:	f000 fddd 	bl	800257c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80019c2:	2100      	movs	r1, #0
 80019c4:	20ae      	movs	r0, #174	; 0xae
 80019c6:	f7ff ff6d 	bl	80018a4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80019ca:	2100      	movs	r1, #0
 80019cc:	20d5      	movs	r0, #213	; 0xd5
 80019ce:	f7ff ff69 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80019d2:	2100      	movs	r1, #0
 80019d4:	2050      	movs	r0, #80	; 0x50
 80019d6:	f7ff ff65 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80019da:	2100      	movs	r1, #0
 80019dc:	20a8      	movs	r0, #168	; 0xa8
 80019de:	f7ff ff61 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80019e2:	2100      	movs	r1, #0
 80019e4:	203f      	movs	r0, #63	; 0x3f
 80019e6:	f7ff ff5d 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80019ea:	2100      	movs	r1, #0
 80019ec:	20d3      	movs	r0, #211	; 0xd3
 80019ee:	f7ff ff59 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff ff55 	bl	80018a4 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80019fa:	2100      	movs	r1, #0
 80019fc:	2040      	movs	r0, #64	; 0x40
 80019fe:	f7ff ff51 	bl	80018a4 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8001a02:	2100      	movs	r1, #0
 8001a04:	208d      	movs	r0, #141	; 0x8d
 8001a06:	f7ff ff4d 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2014      	movs	r0, #20
 8001a0e:	f7ff ff49 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8001a12:	2100      	movs	r1, #0
 8001a14:	2020      	movs	r0, #32
 8001a16:	f7ff ff45 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f7ff ff41 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8001a22:	2100      	movs	r1, #0
 8001a24:	20a1      	movs	r0, #161	; 0xa1
 8001a26:	f7ff ff3d 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	20c0      	movs	r0, #192	; 0xc0
 8001a2e:	f7ff ff39 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8001a32:	2100      	movs	r1, #0
 8001a34:	20da      	movs	r0, #218	; 0xda
 8001a36:	f7ff ff35 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2012      	movs	r0, #18
 8001a3e:	f7ff ff31 	bl	80018a4 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8001a42:	2100      	movs	r1, #0
 8001a44:	2081      	movs	r0, #129	; 0x81
 8001a46:	f7ff ff2d 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	20ef      	movs	r0, #239	; 0xef
 8001a4e:	f7ff ff29 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8001a52:	2100      	movs	r1, #0
 8001a54:	20d9      	movs	r0, #217	; 0xd9
 8001a56:	f7ff ff25 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	20f1      	movs	r0, #241	; 0xf1
 8001a5e:	f7ff ff21 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8001a62:	2100      	movs	r1, #0
 8001a64:	20db      	movs	r0, #219	; 0xdb
 8001a66:	f7ff ff1d 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2030      	movs	r0, #48	; 0x30
 8001a6e:	f7ff ff19 	bl	80018a4 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8001a72:	2100      	movs	r1, #0
 8001a74:	20a4      	movs	r0, #164	; 0xa4
 8001a76:	f7ff ff15 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	20a6      	movs	r0, #166	; 0xa6
 8001a7e:	f7ff ff11 	bl	80018a4 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8001a82:	2100      	movs	r1, #0
 8001a84:	20af      	movs	r0, #175	; 0xaf
 8001a86:	f7ff ff0d 	bl	80018a4 <OLED_WR_Byte>
	OLED_Clear(); 
 8001a8a:	f7ff ff55 	bl	8001938 <OLED_Clear>
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800

08001aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a19      	ldr	r2, [pc, #100]	; (8001b70 <HAL_I2C_MspInit+0x84>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d12c      	bne.n	8001b68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_I2C_MspInit+0x88>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a17      	ldr	r2, [pc, #92]	; (8001b74 <HAL_I2C_MspInit+0x88>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_I2C_MspInit+0x88>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8001b2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b30:	2312      	movs	r3, #18
 8001b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	480c      	ldr	r0, [pc, #48]	; (8001b78 <HAL_I2C_MspInit+0x8c>)
 8001b48:	f000 fb7c 	bl	8002244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_I2C_MspInit+0x88>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_I2C_MspInit+0x88>)
 8001b56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_I2C_MspInit+0x88>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40005400 	.word	0x40005400
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020400 	.word	0x40020400

08001b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <HAL_TIM_Base_MspInit+0xac>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d10e      	bne.n	8001bbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_TIM_Base_MspInit+0xb0>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a21      	ldr	r2, [pc, #132]	; (8001c2c <HAL_TIM_Base_MspInit+0xb0>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <HAL_TIM_Base_MspInit+0xb0>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001bba:	e030      	b.n	8001c1e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <HAL_TIM_Base_MspInit+0xb4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d12b      	bne.n	8001c1e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_TIM_Base_MspInit+0xb0>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_TIM_Base_MspInit+0xb0>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_TIM_Base_MspInit+0xb0>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_TIM_Base_MspInit+0xb0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <HAL_TIM_Base_MspInit+0xb0>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_TIM_Base_MspInit+0xb0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8001bfe:	23c0      	movs	r3, #192	; 0xc0
 8001c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	4806      	ldr	r0, [pc, #24]	; (8001c34 <HAL_TIM_Base_MspInit+0xb8>)
 8001c1a:	f000 fb13 	bl	8002244 <HAL_GPIO_Init>
}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40010400 	.word	0x40010400
 8001c34:	40020800 	.word	0x40020800

08001c38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08c      	sub	sp, #48	; 0x30
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c58:	d153      	bne.n	8001d02 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b44      	ldr	r3, [pc, #272]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a3f      	ldr	r2, [pc, #252]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a38      	ldr	r2, [pc, #224]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	482d      	ldr	r0, [pc, #180]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x148>)
 8001ccc:	f000 faba 	bl	8002244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4826      	ldr	r0, [pc, #152]	; (8001d84 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001cec:	f000 faaa 	bl	8002244 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	201c      	movs	r0, #28
 8001cf6:	f000 fa6e 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cfa:	201c      	movs	r0, #28
 8001cfc:	f000 fa87 	bl	800220e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d00:	e038      	b.n	8001d74 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM3)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a20      	ldr	r2, [pc, #128]	; (8001d88 <HAL_TIM_Encoder_MspInit+0x150>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d133      	bne.n	8001d74 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6313      	str	r3, [r2, #48]	; 0x30
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x144>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d44:	23c0      	movs	r3, #192	; 0xc0
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d54:	2302      	movs	r3, #2
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4808      	ldr	r0, [pc, #32]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x148>)
 8001d60:	f000 fa70 	bl	8002244 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	201d      	movs	r0, #29
 8001d6a:	f000 fa34 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d6e:	201d      	movs	r0, #29
 8001d70:	f000 fa4d 	bl	800220e <HAL_NVIC_EnableIRQ>
}
 8001d74:	bf00      	nop
 8001d76:	3730      	adds	r7, #48	; 0x30
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40020400 	.word	0x40020400
 8001d88:	40000400 	.word	0x40000400

08001d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <HAL_TIM_MspPostInit+0x68>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d11e      	bne.n	8001dec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_TIM_MspPostInit+0x6c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a10      	ldr	r2, [pc, #64]	; (8001df8 <HAL_TIM_MspPostInit+0x6c>)
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_TIM_MspPostInit+0x6c>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001dca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001de0:	f107 030c 	add.w	r3, r7, #12
 8001de4:	4619      	mov	r1, r3
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <HAL_TIM_MspPostInit+0x70>)
 8001de8:	f000 fa2c 	bl	8002244 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dec:	bf00      	nop
 8001dee:	3720      	adds	r7, #32
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40010000 	.word	0x40010000
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40021000 	.word	0x40021000

08001e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <NMI_Handler+0x4>

08001e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <HardFault_Handler+0x4>

08001e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <MemManage_Handler+0x4>

08001e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <BusFault_Handler+0x4>

08001e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <UsageFault_Handler+0x4>

08001e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4c:	f000 f8a4 	bl	8001f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <TIM2_IRQHandler+0x10>)
 8001e5a:	f002 fa6f 	bl	800433c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200000d4 	.word	0x200000d4

08001e68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM3_IRQHandler+0x10>)
 8001e6e:	f002 fa65 	bl	800433c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000011c 	.word	0x2000011c

08001e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <SystemInit+0x20>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <SystemInit+0x20>)
 8001e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ea6:	490e      	ldr	r1, [pc, #56]	; (8001ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eac:	e002      	b.n	8001eb4 <LoopCopyDataInit>

08001eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb2:	3304      	adds	r3, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb8:	d3f9      	bcc.n	8001eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eba:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ebc:	4c0b      	ldr	r4, [pc, #44]	; (8001eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec0:	e001      	b.n	8001ec6 <LoopFillZerobss>

08001ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec4:	3204      	adds	r2, #4

08001ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec8:	d3fb      	bcc.n	8001ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eca:	f7ff ffd7 	bl	8001e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ece:	f003 f8e9 	bl	80050a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed2:	f7fe fefd 	bl	8000cd0 <main>
  bx  lr    
 8001ed6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ee4:	0800512c 	.word	0x0800512c
  ldr r2, =_sbss
 8001ee8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001eec:	20000618 	.word	0x20000618

08001ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC_IRQHandler>
	...

08001ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <HAL_Init+0x40>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_Init+0x40>)
 8001f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <HAL_Init+0x40>)
 8001f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f000 f94f 	bl	80021c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f22:	200f      	movs	r0, #15
 8001f24:	f000 f808 	bl	8001f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f28:	f7ff fdb8 	bl	8001a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023c00 	.word	0x40023c00

08001f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_InitTick+0x54>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_InitTick+0x58>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f967 	bl	800222a <HAL_SYSTICK_Config>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00e      	b.n	8001f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b0f      	cmp	r3, #15
 8001f6a:	d80a      	bhi.n	8001f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f74:	f000 f92f 	bl	80021d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f78:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <HAL_InitTick+0x5c>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	2000000c 	.word	0x2000000c
 8001f94:	20000008 	.word	0x20000008

08001f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	2000000c 	.word	0x2000000c
 8001fbc:	20000614 	.word	0x20000614

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000614 	.word	0x20000614

08001fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff ffee 	bl	8001fc0 <HAL_GetTick>
 8001fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff0:	d005      	beq.n	8001ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_Delay+0x44>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ffe:	bf00      	nop
 8002000:	f7ff ffde 	bl	8001fc0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d8f7      	bhi.n	8002000 <HAL_Delay+0x28>
  {
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000000c 	.word	0x2000000c

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db0b      	blt.n	80020ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4907      	ldr	r1, [pc, #28]	; (80020bc <__NVIC_EnableIRQ+0x38>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2001      	movs	r0, #1
 80020a6:	fa00 f202 	lsl.w	r2, r0, r2
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000e100 	.word	0xe000e100

080020c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	db0a      	blt.n	80020ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	490c      	ldr	r1, [pc, #48]	; (800210c <__NVIC_SetPriority+0x4c>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	0112      	lsls	r2, r2, #4
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	440b      	add	r3, r1
 80020e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e8:	e00a      	b.n	8002100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4908      	ldr	r1, [pc, #32]	; (8002110 <__NVIC_SetPriority+0x50>)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	3b04      	subs	r3, #4
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	440b      	add	r3, r1
 80020fe:	761a      	strb	r2, [r3, #24]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000e100 	.word	0xe000e100
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f1c3 0307 	rsb	r3, r3, #7
 800212e:	2b04      	cmp	r3, #4
 8002130:	bf28      	it	cs
 8002132:	2304      	movcs	r3, #4
 8002134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3304      	adds	r3, #4
 800213a:	2b06      	cmp	r3, #6
 800213c:	d902      	bls.n	8002144 <NVIC_EncodePriority+0x30>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b03      	subs	r3, #3
 8002142:	e000      	b.n	8002146 <NVIC_EncodePriority+0x32>
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	401a      	ands	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800215c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43d9      	mvns	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	4313      	orrs	r3, r2
         );
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800218c:	d301      	bcc.n	8002192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218e:	2301      	movs	r3, #1
 8002190:	e00f      	b.n	80021b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <SysTick_Config+0x40>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219a:	210f      	movs	r1, #15
 800219c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021a0:	f7ff ff8e 	bl	80020c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <SysTick_Config+0x40>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <SysTick_Config+0x40>)
 80021ac:	2207      	movs	r2, #7
 80021ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	e000e010 	.word	0xe000e010

080021c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff29 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e8:	f7ff ff3e 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	f7ff ff8e 	bl	8002114 <NVIC_EncodePriority>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff5d 	bl	80020c0 <__NVIC_SetPriority>
}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff31 	bl	8002084 <__NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffa2 	bl	800217c <SysTick_Config>
 8002238:	4603      	mov	r3, r0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	e16b      	b.n	8002538 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002260:	2201      	movs	r2, #1
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	429a      	cmp	r2, r3
 800227a:	f040 815a 	bne.w	8002532 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d005      	beq.n	8002296 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002292:	2b02      	cmp	r3, #2
 8002294:	d130      	bne.n	80022f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	2203      	movs	r2, #3
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022cc:	2201      	movs	r2, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 0201 	and.w	r2, r3, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b03      	cmp	r3, #3
 8002302:	d017      	beq.n	8002334 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d123      	bne.n	8002388 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	08da      	lsrs	r2, r3, #3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3208      	adds	r2, #8
 8002348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	220f      	movs	r2, #15
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	08da      	lsrs	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3208      	adds	r2, #8
 8002382:	69b9      	ldr	r1, [r7, #24]
 8002384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0203 	and.w	r2, r3, #3
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80b4 	beq.w	8002532 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b60      	ldr	r3, [pc, #384]	; (8002550 <HAL_GPIO_Init+0x30c>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	4a5f      	ldr	r2, [pc, #380]	; (8002550 <HAL_GPIO_Init+0x30c>)
 80023d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d8:	6453      	str	r3, [r2, #68]	; 0x44
 80023da:	4b5d      	ldr	r3, [pc, #372]	; (8002550 <HAL_GPIO_Init+0x30c>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023e6:	4a5b      	ldr	r2, [pc, #364]	; (8002554 <HAL_GPIO_Init+0x310>)
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	3302      	adds	r3, #2
 80023ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	220f      	movs	r2, #15
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a52      	ldr	r2, [pc, #328]	; (8002558 <HAL_GPIO_Init+0x314>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d02b      	beq.n	800246a <HAL_GPIO_Init+0x226>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a51      	ldr	r2, [pc, #324]	; (800255c <HAL_GPIO_Init+0x318>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d025      	beq.n	8002466 <HAL_GPIO_Init+0x222>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a50      	ldr	r2, [pc, #320]	; (8002560 <HAL_GPIO_Init+0x31c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d01f      	beq.n	8002462 <HAL_GPIO_Init+0x21e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4f      	ldr	r2, [pc, #316]	; (8002564 <HAL_GPIO_Init+0x320>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d019      	beq.n	800245e <HAL_GPIO_Init+0x21a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4e      	ldr	r2, [pc, #312]	; (8002568 <HAL_GPIO_Init+0x324>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d013      	beq.n	800245a <HAL_GPIO_Init+0x216>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4d      	ldr	r2, [pc, #308]	; (800256c <HAL_GPIO_Init+0x328>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00d      	beq.n	8002456 <HAL_GPIO_Init+0x212>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4c      	ldr	r2, [pc, #304]	; (8002570 <HAL_GPIO_Init+0x32c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d007      	beq.n	8002452 <HAL_GPIO_Init+0x20e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4b      	ldr	r2, [pc, #300]	; (8002574 <HAL_GPIO_Init+0x330>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d101      	bne.n	800244e <HAL_GPIO_Init+0x20a>
 800244a:	2307      	movs	r3, #7
 800244c:	e00e      	b.n	800246c <HAL_GPIO_Init+0x228>
 800244e:	2308      	movs	r3, #8
 8002450:	e00c      	b.n	800246c <HAL_GPIO_Init+0x228>
 8002452:	2306      	movs	r3, #6
 8002454:	e00a      	b.n	800246c <HAL_GPIO_Init+0x228>
 8002456:	2305      	movs	r3, #5
 8002458:	e008      	b.n	800246c <HAL_GPIO_Init+0x228>
 800245a:	2304      	movs	r3, #4
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x228>
 800245e:	2303      	movs	r3, #3
 8002460:	e004      	b.n	800246c <HAL_GPIO_Init+0x228>
 8002462:	2302      	movs	r3, #2
 8002464:	e002      	b.n	800246c <HAL_GPIO_Init+0x228>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0x228>
 800246a:	2300      	movs	r3, #0
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	f002 0203 	and.w	r2, r2, #3
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	4093      	lsls	r3, r2
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800247c:	4935      	ldr	r1, [pc, #212]	; (8002554 <HAL_GPIO_Init+0x310>)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248a:	4b3b      	ldr	r3, [pc, #236]	; (8002578 <HAL_GPIO_Init+0x334>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ae:	4a32      	ldr	r2, [pc, #200]	; (8002578 <HAL_GPIO_Init+0x334>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b4:	4b30      	ldr	r3, [pc, #192]	; (8002578 <HAL_GPIO_Init+0x334>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d8:	4a27      	ldr	r2, [pc, #156]	; (8002578 <HAL_GPIO_Init+0x334>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024de:	4b26      	ldr	r3, [pc, #152]	; (8002578 <HAL_GPIO_Init+0x334>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002502:	4a1d      	ldr	r2, [pc, #116]	; (8002578 <HAL_GPIO_Init+0x334>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_GPIO_Init+0x334>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800252c:	4a12      	ldr	r2, [pc, #72]	; (8002578 <HAL_GPIO_Init+0x334>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3301      	adds	r3, #1
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b0f      	cmp	r3, #15
 800253c:	f67f ae90 	bls.w	8002260 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	40013800 	.word	0x40013800
 8002558:	40020000 	.word	0x40020000
 800255c:	40020400 	.word	0x40020400
 8002560:	40020800 	.word	0x40020800
 8002564:	40020c00 	.word	0x40020c00
 8002568:	40021000 	.word	0x40021000
 800256c:	40021400 	.word	0x40021400
 8002570:	40021800 	.word	0x40021800
 8002574:	40021c00 	.word	0x40021c00
 8002578:	40013c00 	.word	0x40013c00

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
 8002588:	4613      	mov	r3, r2
 800258a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002598:	e003      	b.n	80025a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800259a:	887b      	ldrh	r3, [r7, #2]
 800259c:	041a      	lsls	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	619a      	str	r2, [r3, #24]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e12b      	b.n	800281a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff fa88 	bl	8001aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	; 0x24
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002602:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002612:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002614:	f001 fbba 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8002618:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4a81      	ldr	r2, [pc, #516]	; (8002824 <HAL_I2C_Init+0x274>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d807      	bhi.n	8002634 <HAL_I2C_Init+0x84>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4a80      	ldr	r2, [pc, #512]	; (8002828 <HAL_I2C_Init+0x278>)
 8002628:	4293      	cmp	r3, r2
 800262a:	bf94      	ite	ls
 800262c:	2301      	movls	r3, #1
 800262e:	2300      	movhi	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e006      	b.n	8002642 <HAL_I2C_Init+0x92>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a7d      	ldr	r2, [pc, #500]	; (800282c <HAL_I2C_Init+0x27c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	bf94      	ite	ls
 800263c:	2301      	movls	r3, #1
 800263e:	2300      	movhi	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0e7      	b.n	800281a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4a78      	ldr	r2, [pc, #480]	; (8002830 <HAL_I2C_Init+0x280>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0c9b      	lsrs	r3, r3, #18
 8002654:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a6a      	ldr	r2, [pc, #424]	; (8002824 <HAL_I2C_Init+0x274>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d802      	bhi.n	8002684 <HAL_I2C_Init+0xd4>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3301      	adds	r3, #1
 8002682:	e009      	b.n	8002698 <HAL_I2C_Init+0xe8>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	4a69      	ldr	r2, [pc, #420]	; (8002834 <HAL_I2C_Init+0x284>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	099b      	lsrs	r3, r3, #6
 8002696:	3301      	adds	r3, #1
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	430b      	orrs	r3, r1
 800269e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	495c      	ldr	r1, [pc, #368]	; (8002824 <HAL_I2C_Init+0x274>)
 80026b4:	428b      	cmp	r3, r1
 80026b6:	d819      	bhi.n	80026ec <HAL_I2C_Init+0x13c>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1e59      	subs	r1, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c6:	1c59      	adds	r1, r3, #1
 80026c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026cc:	400b      	ands	r3, r1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_I2C_Init+0x138>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1e59      	subs	r1, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e0:	3301      	adds	r3, #1
 80026e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e6:	e051      	b.n	800278c <HAL_I2C_Init+0x1dc>
 80026e8:	2304      	movs	r3, #4
 80026ea:	e04f      	b.n	800278c <HAL_I2C_Init+0x1dc>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d111      	bne.n	8002718 <HAL_I2C_Init+0x168>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1e58      	subs	r0, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	440b      	add	r3, r1
 8002702:	fbb0 f3f3 	udiv	r3, r0, r3
 8002706:	3301      	adds	r3, #1
 8002708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	e012      	b.n	800273e <HAL_I2C_Init+0x18e>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1e58      	subs	r0, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	0099      	lsls	r1, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	fbb0 f3f3 	udiv	r3, r0, r3
 800272e:	3301      	adds	r3, #1
 8002730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Init+0x196>
 8002742:	2301      	movs	r3, #1
 8002744:	e022      	b.n	800278c <HAL_I2C_Init+0x1dc>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10e      	bne.n	800276c <HAL_I2C_Init+0x1bc>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1e58      	subs	r0, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	460b      	mov	r3, r1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	440b      	add	r3, r1
 800275c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002760:	3301      	adds	r3, #1
 8002762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800276a:	e00f      	b.n	800278c <HAL_I2C_Init+0x1dc>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1e58      	subs	r0, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	0099      	lsls	r1, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002782:	3301      	adds	r3, #1
 8002784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	6809      	ldr	r1, [r1, #0]
 8002790:	4313      	orrs	r3, r2
 8002792:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6911      	ldr	r1, [r2, #16]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68d2      	ldr	r2, [r2, #12]
 80027c6:	4311      	orrs	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	000186a0 	.word	0x000186a0
 8002828:	001e847f 	.word	0x001e847f
 800282c:	003d08ff 	.word	0x003d08ff
 8002830:	431bde83 	.word	0x431bde83
 8002834:	10624dd3 	.word	0x10624dd3

08002838 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	461a      	mov	r2, r3
 8002844:	460b      	mov	r3, r1
 8002846:	817b      	strh	r3, [r7, #10]
 8002848:	4613      	mov	r3, r2
 800284a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800284c:	f7ff fbb8 	bl	8001fc0 <HAL_GetTick>
 8002850:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	f040 80e0 	bne.w	8002a20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2319      	movs	r3, #25
 8002866:	2201      	movs	r2, #1
 8002868:	4970      	ldr	r1, [pc, #448]	; (8002a2c <HAL_I2C_Master_Transmit+0x1f4>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fc58 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002876:	2302      	movs	r3, #2
 8002878:	e0d3      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_I2C_Master_Transmit+0x50>
 8002884:	2302      	movs	r3, #2
 8002886:	e0cc      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d007      	beq.n	80028ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2221      	movs	r2, #33	; 0x21
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2210      	movs	r2, #16
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	893a      	ldrh	r2, [r7, #8]
 80028de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a50      	ldr	r2, [pc, #320]	; (8002a30 <HAL_I2C_Master_Transmit+0x1f8>)
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028f0:	8979      	ldrh	r1, [r7, #10]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	6a3a      	ldr	r2, [r7, #32]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fac2 	bl	8002e80 <I2C_MasterRequestWrite>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e08d      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800291c:	e066      	b.n	80029ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	6a39      	ldr	r1, [r7, #32]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fcd2 	bl	80032cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00d      	beq.n	800294a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	2b04      	cmp	r3, #4
 8002934:	d107      	bne.n	8002946 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002944:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e06b      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d11b      	bne.n	80029c0 <HAL_I2C_Master_Transmit+0x188>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d017      	beq.n	80029c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	6a39      	ldr	r1, [r7, #32]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fcc2 	bl	800334e <I2C_WaitOnBTFFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00d      	beq.n	80029ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d107      	bne.n	80029e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e01a      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d194      	bne.n	800291e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e000      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
  }
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	00100002 	.word	0x00100002
 8002a30:	ffff0000 	.word	0xffff0000

08002a34 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	; 0x30
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	460b      	mov	r3, r1
 8002a42:	817b      	strh	r3, [r7, #10]
 8002a44:	4613      	mov	r3, r2
 8002a46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff faba 	bl	8001fc0 <HAL_GetTick>
 8002a4c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	f040 820b 	bne.w	8002e72 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2319      	movs	r3, #25
 8002a62:	2201      	movs	r2, #1
 8002a64:	497c      	ldr	r1, [pc, #496]	; (8002c58 <HAL_I2C_Master_Receive+0x224>)
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fb5a 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002a72:	2302      	movs	r3, #2
 8002a74:	e1fe      	b.n	8002e74 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_I2C_Master_Receive+0x50>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e1f7      	b.n	8002e74 <HAL_I2C_Master_Receive+0x440>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d007      	beq.n	8002aaa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2222      	movs	r2, #34	; 0x22
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2210      	movs	r2, #16
 8002ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	893a      	ldrh	r2, [r7, #8]
 8002ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a5c      	ldr	r2, [pc, #368]	; (8002c5c <HAL_I2C_Master_Receive+0x228>)
 8002aea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002aec:	8979      	ldrh	r1, [r7, #10]
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fa46 	bl	8002f84 <I2C_MasterRequestRead>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e1b8      	b.n	8002e74 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d113      	bne.n	8002b32 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	623b      	str	r3, [r7, #32]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	623b      	str	r3, [r7, #32]
 8002b1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e18c      	b.n	8002e4c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d11b      	bne.n	8002b72 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e16c      	b.n	8002e4c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d11b      	bne.n	8002bb2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	e14c      	b.n	8002e4c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bd8:	e138      	b.n	8002e4c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	f200 80f1 	bhi.w	8002dc6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d123      	bne.n	8002c34 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fbed 	bl	80033d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e139      	b.n	8002e74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c32:	e10b      	b.n	8002e4c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d14e      	bne.n	8002cda <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c42:	2200      	movs	r2, #0
 8002c44:	4906      	ldr	r1, [pc, #24]	; (8002c60 <HAL_I2C_Master_Receive+0x22c>)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fa6a 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d008      	beq.n	8002c64 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e10e      	b.n	8002e74 <HAL_I2C_Master_Receive+0x440>
 8002c56:	bf00      	nop
 8002c58:	00100002 	.word	0x00100002
 8002c5c:	ffff0000 	.word	0xffff0000
 8002c60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cd8:	e0b8      	b.n	8002e4c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4966      	ldr	r1, [pc, #408]	; (8002e7c <HAL_I2C_Master_Receive+0x448>)
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fa1b 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0bf      	b.n	8002e74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	494f      	ldr	r1, [pc, #316]	; (8002e7c <HAL_I2C_Master_Receive+0x448>)
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f9ed 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e091      	b.n	8002e74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dc4:	e042      	b.n	8002e4c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fb00 	bl	80033d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e04c      	b.n	8002e74 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d118      	bne.n	8002e4c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f47f aec2 	bne.w	8002bda <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e000      	b.n	8002e74 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
  }
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3728      	adds	r7, #40	; 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	00010004 	.word	0x00010004

08002e80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d006      	beq.n	8002eaa <I2C_MasterRequestWrite+0x2a>
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d003      	beq.n	8002eaa <I2C_MasterRequestWrite+0x2a>
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ea8:	d108      	bne.n	8002ebc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e00b      	b.n	8002ed4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	2b12      	cmp	r3, #18
 8002ec2:	d107      	bne.n	8002ed4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f91d 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00d      	beq.n	8002f08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efa:	d103      	bne.n	8002f04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e035      	b.n	8002f74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f10:	d108      	bne.n	8002f24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f12:	897b      	ldrh	r3, [r7, #10]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f20:	611a      	str	r2, [r3, #16]
 8002f22:	e01b      	b.n	8002f5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f24:	897b      	ldrh	r3, [r7, #10]
 8002f26:	11db      	asrs	r3, r3, #7
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f003 0306 	and.w	r3, r3, #6
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f063 030f 	orn	r3, r3, #15
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	490e      	ldr	r1, [pc, #56]	; (8002f7c <I2C_MasterRequestWrite+0xfc>)
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f943 	bl	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e010      	b.n	8002f74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f52:	897b      	ldrh	r3, [r7, #10]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4907      	ldr	r1, [pc, #28]	; (8002f80 <I2C_MasterRequestWrite+0x100>)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f933 	bl	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	00010008 	.word	0x00010008
 8002f80:	00010002 	.word	0x00010002

08002f84 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	460b      	mov	r3, r1
 8002f92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fa8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d006      	beq.n	8002fbe <I2C_MasterRequestRead+0x3a>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d003      	beq.n	8002fbe <I2C_MasterRequestRead+0x3a>
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fbc:	d108      	bne.n	8002fd0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e00b      	b.n	8002fe8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	2b11      	cmp	r3, #17
 8002fd6:	d107      	bne.n	8002fe8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f893 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00d      	beq.n	800301c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300e:	d103      	bne.n	8003018 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003016:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e079      	b.n	8003110 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003024:	d108      	bne.n	8003038 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003026:	897b      	ldrh	r3, [r7, #10]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	611a      	str	r2, [r3, #16]
 8003036:	e05f      	b.n	80030f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003038:	897b      	ldrh	r3, [r7, #10]
 800303a:	11db      	asrs	r3, r3, #7
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 0306 	and.w	r3, r3, #6
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f063 030f 	orn	r3, r3, #15
 8003048:	b2da      	uxtb	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4930      	ldr	r1, [pc, #192]	; (8003118 <I2C_MasterRequestRead+0x194>)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f8b9 	bl	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e054      	b.n	8003110 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003066:	897b      	ldrh	r3, [r7, #10]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	4929      	ldr	r1, [pc, #164]	; (800311c <I2C_MasterRequestRead+0x198>)
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f8a9 	bl	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e044      	b.n	8003110 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f831 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d2:	d103      	bne.n	80030dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e017      	b.n	8003110 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80030e0:	897b      	ldrh	r3, [r7, #10]
 80030e2:	11db      	asrs	r3, r3, #7
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f003 0306 	and.w	r3, r3, #6
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f063 030e 	orn	r3, r3, #14
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4907      	ldr	r1, [pc, #28]	; (800311c <I2C_MasterRequestRead+0x198>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f865 	bl	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	00010008 	.word	0x00010008
 800311c:	00010002 	.word	0x00010002

08003120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003130:	e025      	b.n	800317e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003138:	d021      	beq.n	800317e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7fe ff41 	bl	8001fc0 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d116      	bne.n	800317e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f043 0220 	orr.w	r2, r3, #32
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e023      	b.n	80031c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d10d      	bne.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	43da      	mvns	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4013      	ands	r3, r2
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	bf0c      	ite	eq
 800319a:	2301      	moveq	r3, #1
 800319c:	2300      	movne	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	e00c      	b.n	80031be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	43da      	mvns	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4013      	ands	r3, r2
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf0c      	ite	eq
 80031b6:	2301      	moveq	r3, #1
 80031b8:	2300      	movne	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d0b6      	beq.n	8003132 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031dc:	e051      	b.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ec:	d123      	bne.n	8003236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003206:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f043 0204 	orr.w	r2, r3, #4
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e046      	b.n	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800323c:	d021      	beq.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323e:	f7fe febf 	bl	8001fc0 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d116      	bne.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e020      	b.n	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d10c      	bne.n	80032a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	43da      	mvns	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4013      	ands	r3, r2
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	e00b      	b.n	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	43da      	mvns	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4013      	ands	r3, r2
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d18d      	bne.n	80031de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d8:	e02d      	b.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f8ce 	bl	800347c <I2C_IsAcknowledgeFailed>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e02d      	b.n	8003346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f0:	d021      	beq.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	f7fe fe65 	bl	8001fc0 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d116      	bne.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f043 0220 	orr.w	r2, r3, #32
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e007      	b.n	8003346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003340:	2b80      	cmp	r3, #128	; 0x80
 8003342:	d1ca      	bne.n	80032da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800335a:	e02d      	b.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f88d 	bl	800347c <I2C_IsAcknowledgeFailed>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e02d      	b.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003372:	d021      	beq.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003374:	f7fe fe24 	bl	8001fc0 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	d302      	bcc.n	800338a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d116      	bne.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e007      	b.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d1ca      	bne.n	800335c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033dc:	e042      	b.n	8003464 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b10      	cmp	r3, #16
 80033ea:	d119      	bne.n	8003420 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0210 	mvn.w	r2, #16
 80033f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e029      	b.n	8003474 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003420:	f7fe fdce 	bl	8001fc0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	d302      	bcc.n	8003436 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e007      	b.n	8003474 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d1b5      	bne.n	80033de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003492:	d11b      	bne.n	80034cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800349c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f043 0204 	orr.w	r2, r3, #4
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_PWR_EnableBkUpAccess+0x20>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_PWR_EnableBkUpAccess+0x24>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80034ee:	687b      	ldr	r3, [r7, #4]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	420e0020 	.word	0x420e0020
 8003500:	40007000 	.word	0x40007000

08003504 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_PWR_DisableBkUpAccess+0x20>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_PWR_DisableBkUpAccess+0x24>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003516:	687b      	ldr	r3, [r7, #4]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	420e0020 	.word	0x420e0020
 8003528:	40007000 	.word	0x40007000

0800352c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e267      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d075      	beq.n	8003636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354a:	4b88      	ldr	r3, [pc, #544]	; (800376c <HAL_RCC_OscConfig+0x240>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b04      	cmp	r3, #4
 8003554:	d00c      	beq.n	8003570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003556:	4b85      	ldr	r3, [pc, #532]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800355e:	2b08      	cmp	r3, #8
 8003560:	d112      	bne.n	8003588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003562:	4b82      	ldr	r3, [pc, #520]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800356e:	d10b      	bne.n	8003588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	4b7e      	ldr	r3, [pc, #504]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d05b      	beq.n	8003634 <HAL_RCC_OscConfig+0x108>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d157      	bne.n	8003634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e242      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d106      	bne.n	80035a0 <HAL_RCC_OscConfig+0x74>
 8003592:	4b76      	ldr	r3, [pc, #472]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a75      	ldr	r2, [pc, #468]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e01d      	b.n	80035dc <HAL_RCC_OscConfig+0xb0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x98>
 80035aa:	4b70      	ldr	r3, [pc, #448]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6f      	ldr	r2, [pc, #444]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b6d      	ldr	r3, [pc, #436]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a6c      	ldr	r2, [pc, #432]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e00b      	b.n	80035dc <HAL_RCC_OscConfig+0xb0>
 80035c4:	4b69      	ldr	r3, [pc, #420]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a68      	ldr	r2, [pc, #416]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4b66      	ldr	r3, [pc, #408]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a65      	ldr	r2, [pc, #404]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe fcec 	bl	8001fc0 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fe fce8 	bl	8001fc0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e207      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	4b5b      	ldr	r3, [pc, #364]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0xc0>
 800360a:	e014      	b.n	8003636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fe fcd8 	bl	8001fc0 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe fcd4 	bl	8001fc0 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1f3      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	4b51      	ldr	r3, [pc, #324]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0xe8>
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d063      	beq.n	800370a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003642:	4b4a      	ldr	r3, [pc, #296]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364e:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003656:	2b08      	cmp	r3, #8
 8003658:	d11c      	bne.n	8003694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365a:	4b44      	ldr	r3, [pc, #272]	; (800376c <HAL_RCC_OscConfig+0x240>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d116      	bne.n	8003694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	4b41      	ldr	r3, [pc, #260]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_RCC_OscConfig+0x152>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e1c7      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367e:	4b3b      	ldr	r3, [pc, #236]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4937      	ldr	r1, [pc, #220]	; (800376c <HAL_RCC_OscConfig+0x240>)
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003692:	e03a      	b.n	800370a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d020      	beq.n	80036de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369c:	4b34      	ldr	r3, [pc, #208]	; (8003770 <HAL_RCC_OscConfig+0x244>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fe fc8d 	bl	8001fc0 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe fc89 	bl	8001fc0 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1a8      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	4b2b      	ldr	r3, [pc, #172]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b28      	ldr	r3, [pc, #160]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4925      	ldr	r1, [pc, #148]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
 80036dc:	e015      	b.n	800370a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCC_OscConfig+0x244>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe fc6c 	bl	8001fc0 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ec:	f7fe fc68 	bl	8001fc0 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e187      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	4b1b      	ldr	r3, [pc, #108]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d036      	beq.n	8003784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_RCC_OscConfig+0x248>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe fc4c 	bl	8001fc0 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372c:	f7fe fc48 	bl	8001fc0 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e167      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x200>
 800374a:	e01b      	b.n	8003784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_RCC_OscConfig+0x248>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003752:	f7fe fc35 	bl	8001fc0 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	e00e      	b.n	8003778 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375a:	f7fe fc31 	bl	8001fc0 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d907      	bls.n	8003778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e150      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
 800376c:	40023800 	.word	0x40023800
 8003770:	42470000 	.word	0x42470000
 8003774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003778:	4b88      	ldr	r3, [pc, #544]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800377a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ea      	bne.n	800375a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8097 	beq.w	80038c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003796:	4b81      	ldr	r3, [pc, #516]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10f      	bne.n	80037c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	4b7d      	ldr	r3, [pc, #500]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a7c      	ldr	r2, [pc, #496]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
 80037b2:	4b7a      	ldr	r3, [pc, #488]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037be:	2301      	movs	r3, #1
 80037c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c2:	4b77      	ldr	r3, [pc, #476]	; (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d118      	bne.n	8003800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ce:	4b74      	ldr	r3, [pc, #464]	; (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a73      	ldr	r2, [pc, #460]	; (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037da:	f7fe fbf1 	bl	8001fc0 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e2:	f7fe fbed 	bl	8001fc0 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e10c      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	4b6a      	ldr	r3, [pc, #424]	; (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x2ea>
 8003808:	4b64      	ldr	r3, [pc, #400]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380c:	4a63      	ldr	r2, [pc, #396]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6713      	str	r3, [r2, #112]	; 0x70
 8003814:	e01c      	b.n	8003850 <HAL_RCC_OscConfig+0x324>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b05      	cmp	r3, #5
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0x30c>
 800381e:	4b5f      	ldr	r3, [pc, #380]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	4a5e      	ldr	r2, [pc, #376]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	6713      	str	r3, [r2, #112]	; 0x70
 800382a:	4b5c      	ldr	r3, [pc, #368]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	4a5b      	ldr	r2, [pc, #364]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6713      	str	r3, [r2, #112]	; 0x70
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0x324>
 8003838:	4b58      	ldr	r3, [pc, #352]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	4a57      	ldr	r2, [pc, #348]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	; 0x70
 8003844:	4b55      	ldr	r3, [pc, #340]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	4a54      	ldr	r2, [pc, #336]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800384a:	f023 0304 	bic.w	r3, r3, #4
 800384e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d015      	beq.n	8003884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fe fbb2 	bl	8001fc0 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	e00a      	b.n	8003876 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fe fbae 	bl	8001fc0 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0cb      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003876:	4b49      	ldr	r3, [pc, #292]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ee      	beq.n	8003860 <HAL_RCC_OscConfig+0x334>
 8003882:	e014      	b.n	80038ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003884:	f7fe fb9c 	bl	8001fc0 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fe fb98 	bl	8001fc0 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e0b5      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a2:	4b3e      	ldr	r3, [pc, #248]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ee      	bne.n	800388c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b4:	4b39      	ldr	r3, [pc, #228]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	4a38      	ldr	r2, [pc, #224]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80038ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80a1 	beq.w	8003a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ca:	4b34      	ldr	r3, [pc, #208]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d05c      	beq.n	8003990 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d141      	bne.n	8003962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <HAL_RCC_OscConfig+0x478>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fe fb6c 	bl	8001fc0 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fe fb68 	bl	8001fc0 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e087      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	4b27      	ldr	r3, [pc, #156]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	019b      	lsls	r3, r3, #6
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	3b01      	subs	r3, #1
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	491b      	ldr	r1, [pc, #108]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <HAL_RCC_OscConfig+0x478>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393a:	f7fe fb41 	bl	8001fc0 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003942:	f7fe fb3d 	bl	8001fc0 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e05c      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003954:	4b11      	ldr	r3, [pc, #68]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x416>
 8003960:	e054      	b.n	8003a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <HAL_RCC_OscConfig+0x478>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fe fb2a 	bl	8001fc0 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003970:	f7fe fb26 	bl	8001fc0 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e045      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x444>
 800398e:	e03d      	b.n	8003a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e038      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
 800399c:	40023800 	.word	0x40023800
 80039a0:	40007000 	.word	0x40007000
 80039a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a8:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x4ec>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d028      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d121      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d11a      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039d8:	4013      	ands	r3, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d111      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	3b01      	subs	r3, #1
 80039f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d107      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800

08003a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0cc      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b68      	ldr	r3, [pc, #416]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d90c      	bls.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b65      	ldr	r3, [pc, #404]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b63      	ldr	r3, [pc, #396]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0b8      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a70:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4a58      	ldr	r2, [pc, #352]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a88:	4b53      	ldr	r3, [pc, #332]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a52      	ldr	r2, [pc, #328]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a94:	4b50      	ldr	r3, [pc, #320]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	494d      	ldr	r1, [pc, #308]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d044      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d119      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e07f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d003      	beq.n	8003ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ada:	4b3f      	ldr	r3, [pc, #252]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e06f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aea:	4b3b      	ldr	r3, [pc, #236]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e067      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afa:	4b37      	ldr	r3, [pc, #220]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f023 0203 	bic.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4934      	ldr	r1, [pc, #208]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b0c:	f7fe fa58 	bl	8001fc0 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fe fa54 	bl	8001fc0 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e04f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 020c 	and.w	r2, r3, #12
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d1eb      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d20c      	bcs.n	8003b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e032      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4916      	ldr	r1, [pc, #88]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b8e:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	490e      	ldr	r1, [pc, #56]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ba2:	f000 f821 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	490a      	ldr	r1, [pc, #40]	; (8003bdc <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	5ccb      	ldrb	r3, [r1, r3]
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	4a09      	ldr	r2, [pc, #36]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe f9b8 	bl	8001f38 <HAL_InitTick>

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023c00 	.word	0x40023c00
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	08005104 	.word	0x08005104
 8003be0:	20000004 	.word	0x20000004
 8003be4:	20000008 	.word	0x20000008

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bec:	b090      	sub	sp, #64	; 0x40
 8003bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c00:	4b59      	ldr	r3, [pc, #356]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d00d      	beq.n	8003c28 <HAL_RCC_GetSysClockFreq+0x40>
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	f200 80a1 	bhi.w	8003d54 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x34>
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d003      	beq.n	8003c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c1a:	e09b      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b53      	ldr	r3, [pc, #332]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c20:	e09b      	b.n	8003d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c22:	4b53      	ldr	r3, [pc, #332]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c26:	e098      	b.n	8003d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c28:	4b4f      	ldr	r3, [pc, #316]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c32:	4b4d      	ldr	r3, [pc, #308]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d028      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3e:	4b4a      	ldr	r3, [pc, #296]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	099b      	lsrs	r3, r3, #6
 8003c44:	2200      	movs	r2, #0
 8003c46:	623b      	str	r3, [r7, #32]
 8003c48:	627a      	str	r2, [r7, #36]	; 0x24
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c50:	2100      	movs	r1, #0
 8003c52:	4b47      	ldr	r3, [pc, #284]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c54:	fb03 f201 	mul.w	r2, r3, r1
 8003c58:	2300      	movs	r3, #0
 8003c5a:	fb00 f303 	mul.w	r3, r0, r3
 8003c5e:	4413      	add	r3, r2
 8003c60:	4a43      	ldr	r2, [pc, #268]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c62:	fba0 1202 	umull	r1, r2, r0, r2
 8003c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c68:	460a      	mov	r2, r1
 8003c6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6e:	4413      	add	r3, r2
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c74:	2200      	movs	r2, #0
 8003c76:	61bb      	str	r3, [r7, #24]
 8003c78:	61fa      	str	r2, [r7, #28]
 8003c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c82:	f7fc faa1 	bl	80001c8 <__aeabi_uldivmod>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8e:	e053      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c90:	4b35      	ldr	r3, [pc, #212]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	099b      	lsrs	r3, r3, #6
 8003c96:	2200      	movs	r2, #0
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	617a      	str	r2, [r7, #20]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ca2:	f04f 0b00 	mov.w	fp, #0
 8003ca6:	4652      	mov	r2, sl
 8003ca8:	465b      	mov	r3, fp
 8003caa:	f04f 0000 	mov.w	r0, #0
 8003cae:	f04f 0100 	mov.w	r1, #0
 8003cb2:	0159      	lsls	r1, r3, #5
 8003cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb8:	0150      	lsls	r0, r2, #5
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	ebb2 080a 	subs.w	r8, r2, sl
 8003cc2:	eb63 090b 	sbc.w	r9, r3, fp
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cda:	ebb2 0408 	subs.w	r4, r2, r8
 8003cde:	eb63 0509 	sbc.w	r5, r3, r9
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	00eb      	lsls	r3, r5, #3
 8003cec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf0:	00e2      	lsls	r2, r4, #3
 8003cf2:	4614      	mov	r4, r2
 8003cf4:	461d      	mov	r5, r3
 8003cf6:	eb14 030a 	adds.w	r3, r4, sl
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	eb45 030b 	adc.w	r3, r5, fp
 8003d00:	607b      	str	r3, [r7, #4]
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d0e:	4629      	mov	r1, r5
 8003d10:	028b      	lsls	r3, r1, #10
 8003d12:	4621      	mov	r1, r4
 8003d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d18:	4621      	mov	r1, r4
 8003d1a:	028a      	lsls	r2, r1, #10
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d22:	2200      	movs	r2, #0
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	60fa      	str	r2, [r7, #12]
 8003d28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d2c:	f7fc fa4c 	bl	80001c8 <__aeabi_uldivmod>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4613      	mov	r3, r2
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	0c1b      	lsrs	r3, r3, #16
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	3301      	adds	r3, #1
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d52:	e002      	b.n	8003d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3740      	adds	r7, #64	; 0x40
 8003d60:	46bd      	mov	sp, r7
 8003d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d66:	bf00      	nop
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	00f42400 	.word	0x00f42400
 8003d70:	017d7840 	.word	0x017d7840

08003d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d78:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	20000004 	.word	0x20000004

08003d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d90:	f7ff fff0 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003d94:	4602      	mov	r2, r0
 8003d96:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	0a9b      	lsrs	r3, r3, #10
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	4903      	ldr	r1, [pc, #12]	; (8003db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003da2:	5ccb      	ldrb	r3, [r1, r3]
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40023800 	.word	0x40023800
 8003db0:	08005114 	.word	0x08005114

08003db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e041      	b.n	8003e4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd fece 	bl	8001b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4619      	mov	r1, r3
 8003df2:	4610      	mov	r0, r2
 8003df4:	f000 fd5c 	bl	80048b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e041      	b.n	8003ee8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d106      	bne.n	8003e7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f839 	bl	8003ef0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4610      	mov	r0, r2
 8003e92:	f000 fd0d 	bl	80048b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <HAL_TIM_PWM_Start+0x24>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	bf14      	ite	ne
 8003f20:	2301      	movne	r3, #1
 8003f22:	2300      	moveq	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	e022      	b.n	8003f6e <HAL_TIM_PWM_Start+0x6a>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d109      	bne.n	8003f42 <HAL_TIM_PWM_Start+0x3e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	bf14      	ite	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	2300      	moveq	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	e015      	b.n	8003f6e <HAL_TIM_PWM_Start+0x6a>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d109      	bne.n	8003f5c <HAL_TIM_PWM_Start+0x58>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	bf14      	ite	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	2300      	moveq	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e008      	b.n	8003f6e <HAL_TIM_PWM_Start+0x6a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	bf14      	ite	ne
 8003f68:	2301      	movne	r3, #1
 8003f6a:	2300      	moveq	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e07c      	b.n	8004070 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d104      	bne.n	8003f86 <HAL_TIM_PWM_Start+0x82>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f84:	e013      	b.n	8003fae <HAL_TIM_PWM_Start+0xaa>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d104      	bne.n	8003f96 <HAL_TIM_PWM_Start+0x92>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f94:	e00b      	b.n	8003fae <HAL_TIM_PWM_Start+0xaa>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d104      	bne.n	8003fa6 <HAL_TIM_PWM_Start+0xa2>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa4:	e003      	b.n	8003fae <HAL_TIM_PWM_Start+0xaa>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	6839      	ldr	r1, [r7, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 ff64 	bl	8004e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a2d      	ldr	r2, [pc, #180]	; (8004078 <HAL_TIM_PWM_Start+0x174>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_PWM_Start+0xcc>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2c      	ldr	r2, [pc, #176]	; (800407c <HAL_TIM_PWM_Start+0x178>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIM_PWM_Start+0xd0>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_TIM_PWM_Start+0xd2>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a22      	ldr	r2, [pc, #136]	; (8004078 <HAL_TIM_PWM_Start+0x174>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d022      	beq.n	800403a <HAL_TIM_PWM_Start+0x136>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffc:	d01d      	beq.n	800403a <HAL_TIM_PWM_Start+0x136>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <HAL_TIM_PWM_Start+0x17c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d018      	beq.n	800403a <HAL_TIM_PWM_Start+0x136>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <HAL_TIM_PWM_Start+0x180>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_TIM_PWM_Start+0x136>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <HAL_TIM_PWM_Start+0x184>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00e      	beq.n	800403a <HAL_TIM_PWM_Start+0x136>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a16      	ldr	r2, [pc, #88]	; (800407c <HAL_TIM_PWM_Start+0x178>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d009      	beq.n	800403a <HAL_TIM_PWM_Start+0x136>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a18      	ldr	r2, [pc, #96]	; (800408c <HAL_TIM_PWM_Start+0x188>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_TIM_PWM_Start+0x136>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a16      	ldr	r2, [pc, #88]	; (8004090 <HAL_TIM_PWM_Start+0x18c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d111      	bne.n	800405e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b06      	cmp	r3, #6
 800404a:	d010      	beq.n	800406e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405c:	e007      	b.n	800406e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40010000 	.word	0x40010000
 800407c:	40010400 	.word	0x40010400
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800
 8004088:	40000c00 	.word	0x40000c00
 800408c:	40014000 	.word	0x40014000
 8004090:	40001800 	.word	0x40001800

08004094 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e097      	b.n	80041d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7fd fdbb 	bl	8001c38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d8:	f023 0307 	bic.w	r3, r3, #7
 80040dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4619      	mov	r1, r3
 80040e8:	4610      	mov	r0, r2
 80040ea:	f000 fbe1 	bl	80048b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004116:	f023 0303 	bic.w	r3, r3, #3
 800411a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	4313      	orrs	r3, r2
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004134:	f023 030c 	bic.w	r3, r3, #12
 8004138:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	4313      	orrs	r3, r2
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	011a      	lsls	r2, r3, #4
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	031b      	lsls	r3, r3, #12
 8004164:	4313      	orrs	r3, r2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	4313      	orrs	r3, r2
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004200:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004208:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d110      	bne.n	8004232 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d102      	bne.n	800421c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004216:	7b7b      	ldrb	r3, [r7, #13]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d001      	beq.n	8004220 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e089      	b.n	8004334 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004230:	e031      	b.n	8004296 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b04      	cmp	r3, #4
 8004236:	d110      	bne.n	800425a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004238:	7bbb      	ldrb	r3, [r7, #14]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d102      	bne.n	8004244 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800423e:	7b3b      	ldrb	r3, [r7, #12]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d001      	beq.n	8004248 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e075      	b.n	8004334 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004258:	e01d      	b.n	8004296 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d108      	bne.n	8004272 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004260:	7bbb      	ldrb	r3, [r7, #14]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d105      	bne.n	8004272 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004266:	7b7b      	ldrb	r3, [r7, #13]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d102      	bne.n	8004272 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800426c:	7b3b      	ldrb	r3, [r7, #12]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d001      	beq.n	8004276 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e05e      	b.n	8004334 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2202      	movs	r2, #2
 8004282:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_TIM_Encoder_Start_IT+0xc4>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d010      	beq.n	80042c4 <HAL_TIM_Encoder_Start_IT+0xe4>
 80042a2:	e01f      	b.n	80042e4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2201      	movs	r2, #1
 80042aa:	2100      	movs	r1, #0
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fde9 	bl	8004e84 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0202 	orr.w	r2, r2, #2
 80042c0:	60da      	str	r2, [r3, #12]
      break;
 80042c2:	e02e      	b.n	8004322 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2201      	movs	r2, #1
 80042ca:	2104      	movs	r1, #4
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fdd9 	bl	8004e84 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0204 	orr.w	r2, r2, #4
 80042e0:	60da      	str	r2, [r3, #12]
      break;
 80042e2:	e01e      	b.n	8004322 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2201      	movs	r2, #1
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fdc9 	bl	8004e84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2201      	movs	r2, #1
 80042f8:	2104      	movs	r1, #4
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fdc2 	bl	8004e84 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0202 	orr.w	r2, r2, #2
 800430e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0204 	orr.w	r2, r2, #4
 800431e:	60da      	str	r2, [r3, #12]
      break;
 8004320:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0201 	orr.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b02      	cmp	r3, #2
 8004350:	d122      	bne.n	8004398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b02      	cmp	r3, #2
 800435e:	d11b      	bne.n	8004398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0202 	mvn.w	r2, #2
 8004368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fc fc50 	bl	8000c24 <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa73 	bl	8004872 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fa7a 	bl	8004886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d122      	bne.n	80043ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d11b      	bne.n	80043ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0204 	mvn.w	r2, #4
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fc fc26 	bl	8000c24 <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fa49 	bl	8004872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fa50 	bl	8004886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d122      	bne.n	8004440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b08      	cmp	r3, #8
 8004406:	d11b      	bne.n	8004440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0208 	mvn.w	r2, #8
 8004410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2204      	movs	r2, #4
 8004416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fc fbfc 	bl	8000c24 <HAL_TIM_IC_CaptureCallback>
 800442c:	e005      	b.n	800443a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fa1f 	bl	8004872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fa26 	bl	8004886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b10      	cmp	r3, #16
 800444c:	d122      	bne.n	8004494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b10      	cmp	r3, #16
 800445a:	d11b      	bne.n	8004494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0210 	mvn.w	r2, #16
 8004464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2208      	movs	r2, #8
 800446a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fc fbd2 	bl	8000c24 <HAL_TIM_IC_CaptureCallback>
 8004480:	e005      	b.n	800448e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f9f5 	bl	8004872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f9fc 	bl	8004886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d10e      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d107      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0201 	mvn.w	r2, #1
 80044b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f9cf 	bl	800485e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ca:	2b80      	cmp	r3, #128	; 0x80
 80044cc:	d10e      	bne.n	80044ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d8:	2b80      	cmp	r3, #128	; 0x80
 80044da:	d107      	bne.n	80044ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fdca 	bl	8005080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	d10e      	bne.n	8004518 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	2b40      	cmp	r3, #64	; 0x40
 8004506:	d107      	bne.n	8004518 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f9c1 	bl	800489a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b20      	cmp	r3, #32
 8004524:	d10e      	bne.n	8004544 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b20      	cmp	r3, #32
 8004532:	d107      	bne.n	8004544 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0220 	mvn.w	r2, #32
 800453c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fd94 	bl	800506c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004544:	bf00      	nop
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004566:	2302      	movs	r3, #2
 8004568:	e0ae      	b.n	80046c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b0c      	cmp	r3, #12
 8004576:	f200 809f 	bhi.w	80046b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800457a:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	080045b5 	.word	0x080045b5
 8004584:	080046b9 	.word	0x080046b9
 8004588:	080046b9 	.word	0x080046b9
 800458c:	080046b9 	.word	0x080046b9
 8004590:	080045f5 	.word	0x080045f5
 8004594:	080046b9 	.word	0x080046b9
 8004598:	080046b9 	.word	0x080046b9
 800459c:	080046b9 	.word	0x080046b9
 80045a0:	08004637 	.word	0x08004637
 80045a4:	080046b9 	.word	0x080046b9
 80045a8:	080046b9 	.word	0x080046b9
 80045ac:	080046b9 	.word	0x080046b9
 80045b0:	08004677 	.word	0x08004677
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fa18 	bl	80049f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0208 	orr.w	r2, r2, #8
 80045ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0204 	bic.w	r2, r2, #4
 80045de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6999      	ldr	r1, [r3, #24]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	619a      	str	r2, [r3, #24]
      break;
 80045f2:	e064      	b.n	80046be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fa68 	bl	8004ad0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800460e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6999      	ldr	r1, [r3, #24]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	021a      	lsls	r2, r3, #8
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	619a      	str	r2, [r3, #24]
      break;
 8004634:	e043      	b.n	80046be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fabd 	bl	8004bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0208 	orr.w	r2, r2, #8
 8004650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0204 	bic.w	r2, r2, #4
 8004660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69d9      	ldr	r1, [r3, #28]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	61da      	str	r2, [r3, #28]
      break;
 8004674:	e023      	b.n	80046be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fb11 	bl	8004ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69d9      	ldr	r1, [r3, #28]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	021a      	lsls	r2, r3, #8
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	61da      	str	r2, [r3, #28]
      break;
 80046b6:	e002      	b.n	80046be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	75fb      	strb	r3, [r7, #23]
      break;
 80046bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_TIM_ConfigClockSource+0x1c>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e0b4      	b.n	8004856 <HAL_TIM_ConfigClockSource+0x186>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800470a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004724:	d03e      	beq.n	80047a4 <HAL_TIM_ConfigClockSource+0xd4>
 8004726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472a:	f200 8087 	bhi.w	800483c <HAL_TIM_ConfigClockSource+0x16c>
 800472e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004732:	f000 8086 	beq.w	8004842 <HAL_TIM_ConfigClockSource+0x172>
 8004736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473a:	d87f      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b70      	cmp	r3, #112	; 0x70
 800473e:	d01a      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0xa6>
 8004740:	2b70      	cmp	r3, #112	; 0x70
 8004742:	d87b      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
 8004744:	2b60      	cmp	r3, #96	; 0x60
 8004746:	d050      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x11a>
 8004748:	2b60      	cmp	r3, #96	; 0x60
 800474a:	d877      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
 800474c:	2b50      	cmp	r3, #80	; 0x50
 800474e:	d03c      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0xfa>
 8004750:	2b50      	cmp	r3, #80	; 0x50
 8004752:	d873      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
 8004754:	2b40      	cmp	r3, #64	; 0x40
 8004756:	d058      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x13a>
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d86f      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
 800475c:	2b30      	cmp	r3, #48	; 0x30
 800475e:	d064      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x15a>
 8004760:	2b30      	cmp	r3, #48	; 0x30
 8004762:	d86b      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
 8004764:	2b20      	cmp	r3, #32
 8004766:	d060      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x15a>
 8004768:	2b20      	cmp	r3, #32
 800476a:	d867      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d05c      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x15a>
 8004770:	2b10      	cmp	r3, #16
 8004772:	d05a      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x15a>
 8004774:	e062      	b.n	800483c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6899      	ldr	r1, [r3, #8]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f000 fb5d 	bl	8004e44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	609a      	str	r2, [r3, #8]
      break;
 80047a2:	e04f      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	6899      	ldr	r1, [r3, #8]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f000 fb46 	bl	8004e44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047c6:	609a      	str	r2, [r3, #8]
      break;
 80047c8:	e03c      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6859      	ldr	r1, [r3, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	461a      	mov	r2, r3
 80047d8:	f000 faba 	bl	8004d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2150      	movs	r1, #80	; 0x50
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fb13 	bl	8004e0e <TIM_ITRx_SetConfig>
      break;
 80047e8:	e02c      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6859      	ldr	r1, [r3, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f000 fad9 	bl	8004dae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2160      	movs	r1, #96	; 0x60
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fb03 	bl	8004e0e <TIM_ITRx_SetConfig>
      break;
 8004808:	e01c      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6859      	ldr	r1, [r3, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	461a      	mov	r2, r3
 8004818:	f000 fa9a 	bl	8004d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2140      	movs	r1, #64	; 0x40
 8004822:	4618      	mov	r0, r3
 8004824:	f000 faf3 	bl	8004e0e <TIM_ITRx_SetConfig>
      break;
 8004828:	e00c      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4619      	mov	r1, r3
 8004834:	4610      	mov	r0, r2
 8004836:	f000 faea 	bl	8004e0e <TIM_ITRx_SetConfig>
      break;
 800483a:	e003      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
      break;
 8004840:	e000      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a40      	ldr	r2, [pc, #256]	; (80049c4 <TIM_Base_SetConfig+0x114>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d013      	beq.n	80048f0 <TIM_Base_SetConfig+0x40>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d00f      	beq.n	80048f0 <TIM_Base_SetConfig+0x40>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a3d      	ldr	r2, [pc, #244]	; (80049c8 <TIM_Base_SetConfig+0x118>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00b      	beq.n	80048f0 <TIM_Base_SetConfig+0x40>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a3c      	ldr	r2, [pc, #240]	; (80049cc <TIM_Base_SetConfig+0x11c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d007      	beq.n	80048f0 <TIM_Base_SetConfig+0x40>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a3b      	ldr	r2, [pc, #236]	; (80049d0 <TIM_Base_SetConfig+0x120>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_Base_SetConfig+0x40>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a3a      	ldr	r2, [pc, #232]	; (80049d4 <TIM_Base_SetConfig+0x124>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d108      	bne.n	8004902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2f      	ldr	r2, [pc, #188]	; (80049c4 <TIM_Base_SetConfig+0x114>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d02b      	beq.n	8004962 <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004910:	d027      	beq.n	8004962 <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a2c      	ldr	r2, [pc, #176]	; (80049c8 <TIM_Base_SetConfig+0x118>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d023      	beq.n	8004962 <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a2b      	ldr	r2, [pc, #172]	; (80049cc <TIM_Base_SetConfig+0x11c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01f      	beq.n	8004962 <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a2a      	ldr	r2, [pc, #168]	; (80049d0 <TIM_Base_SetConfig+0x120>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d01b      	beq.n	8004962 <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a29      	ldr	r2, [pc, #164]	; (80049d4 <TIM_Base_SetConfig+0x124>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d017      	beq.n	8004962 <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a28      	ldr	r2, [pc, #160]	; (80049d8 <TIM_Base_SetConfig+0x128>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d013      	beq.n	8004962 <TIM_Base_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a27      	ldr	r2, [pc, #156]	; (80049dc <TIM_Base_SetConfig+0x12c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00f      	beq.n	8004962 <TIM_Base_SetConfig+0xb2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a26      	ldr	r2, [pc, #152]	; (80049e0 <TIM_Base_SetConfig+0x130>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00b      	beq.n	8004962 <TIM_Base_SetConfig+0xb2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a25      	ldr	r2, [pc, #148]	; (80049e4 <TIM_Base_SetConfig+0x134>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d007      	beq.n	8004962 <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a24      	ldr	r2, [pc, #144]	; (80049e8 <TIM_Base_SetConfig+0x138>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d003      	beq.n	8004962 <TIM_Base_SetConfig+0xb2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a23      	ldr	r2, [pc, #140]	; (80049ec <TIM_Base_SetConfig+0x13c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d108      	bne.n	8004974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <TIM_Base_SetConfig+0x114>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d003      	beq.n	80049a8 <TIM_Base_SetConfig+0xf8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a0c      	ldr	r2, [pc, #48]	; (80049d4 <TIM_Base_SetConfig+0x124>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d103      	bne.n	80049b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	615a      	str	r2, [r3, #20]
}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	40000c00 	.word	0x40000c00
 80049d4:	40010400 	.word	0x40010400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40014400 	.word	0x40014400
 80049e0:	40014800 	.word	0x40014800
 80049e4:	40001800 	.word	0x40001800
 80049e8:	40001c00 	.word	0x40001c00
 80049ec:	40002000 	.word	0x40002000

080049f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0201 	bic.w	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f023 0302 	bic.w	r3, r3, #2
 8004a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a20      	ldr	r2, [pc, #128]	; (8004ac8 <TIM_OC1_SetConfig+0xd8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_OC1_SetConfig+0x64>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a1f      	ldr	r2, [pc, #124]	; (8004acc <TIM_OC1_SetConfig+0xdc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d10c      	bne.n	8004a6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f023 0308 	bic.w	r3, r3, #8
 8004a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f023 0304 	bic.w	r3, r3, #4
 8004a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <TIM_OC1_SetConfig+0xd8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d003      	beq.n	8004a7e <TIM_OC1_SetConfig+0x8e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a14      	ldr	r2, [pc, #80]	; (8004acc <TIM_OC1_SetConfig+0xdc>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d111      	bne.n	8004aa2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	621a      	str	r2, [r3, #32]
}
 8004abc:	bf00      	nop
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40010400 	.word	0x40010400

08004ad0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f023 0210 	bic.w	r2, r3, #16
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f023 0320 	bic.w	r3, r3, #32
 8004b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a22      	ldr	r2, [pc, #136]	; (8004bb4 <TIM_OC2_SetConfig+0xe4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_OC2_SetConfig+0x68>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a21      	ldr	r2, [pc, #132]	; (8004bb8 <TIM_OC2_SetConfig+0xe8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d10d      	bne.n	8004b54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a17      	ldr	r2, [pc, #92]	; (8004bb4 <TIM_OC2_SetConfig+0xe4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d003      	beq.n	8004b64 <TIM_OC2_SetConfig+0x94>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a16      	ldr	r2, [pc, #88]	; (8004bb8 <TIM_OC2_SetConfig+0xe8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d113      	bne.n	8004b8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40010400 	.word	0x40010400

08004bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0303 	bic.w	r3, r3, #3
 8004bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a21      	ldr	r2, [pc, #132]	; (8004c9c <TIM_OC3_SetConfig+0xe0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_OC3_SetConfig+0x66>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a20      	ldr	r2, [pc, #128]	; (8004ca0 <TIM_OC3_SetConfig+0xe4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d10d      	bne.n	8004c3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a16      	ldr	r2, [pc, #88]	; (8004c9c <TIM_OC3_SetConfig+0xe0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d003      	beq.n	8004c4e <TIM_OC3_SetConfig+0x92>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <TIM_OC3_SetConfig+0xe4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d113      	bne.n	8004c76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	621a      	str	r2, [r3, #32]
}
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40010000 	.word	0x40010000
 8004ca0:	40010400 	.word	0x40010400

08004ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	031b      	lsls	r3, r3, #12
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a12      	ldr	r2, [pc, #72]	; (8004d48 <TIM_OC4_SetConfig+0xa4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_OC4_SetConfig+0x68>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a11      	ldr	r2, [pc, #68]	; (8004d4c <TIM_OC4_SetConfig+0xa8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d109      	bne.n	8004d20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	019b      	lsls	r3, r3, #6
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	40010400 	.word	0x40010400

08004d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f023 0201 	bic.w	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f023 030a 	bic.w	r3, r3, #10
 8004d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	621a      	str	r2, [r3, #32]
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b087      	sub	sp, #28
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0210 	bic.w	r2, r3, #16
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	031b      	lsls	r3, r3, #12
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	621a      	str	r2, [r3, #32]
}
 8004e02:	bf00      	nop
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f043 0307 	orr.w	r3, r3, #7
 8004e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	609a      	str	r2, [r3, #8]
}
 8004e38:	bf00      	nop
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	021a      	lsls	r2, r3, #8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	609a      	str	r2, [r3, #8]
}
 8004e78:	bf00      	nop
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 031f 	and.w	r3, r3, #31
 8004e96:	2201      	movs	r2, #1
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a1a      	ldr	r2, [r3, #32]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	401a      	ands	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a1a      	ldr	r2, [r3, #32]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
	...

08004ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e05a      	b.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a21      	ldr	r2, [pc, #132]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d022      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f34:	d01d      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1d      	ldr	r2, [pc, #116]	; (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d018      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a1b      	ldr	r2, [pc, #108]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1a      	ldr	r2, [pc, #104]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00e      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a18      	ldr	r2, [pc, #96]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d009      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d004      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a15      	ldr	r2, [pc, #84]	; (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d10c      	bne.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40000800 	.word	0x40000800
 8004fb8:	40000c00 	.word	0x40000c00
 8004fbc:	40010400 	.word	0x40010400
 8004fc0:	40014000 	.word	0x40014000
 8004fc4:	40001800 	.word	0x40001800

08004fc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e03d      	b.n	8005060 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <memset>:
 8005094:	4402      	add	r2, r0
 8005096:	4603      	mov	r3, r0
 8005098:	4293      	cmp	r3, r2
 800509a:	d100      	bne.n	800509e <memset+0xa>
 800509c:	4770      	bx	lr
 800509e:	f803 1b01 	strb.w	r1, [r3], #1
 80050a2:	e7f9      	b.n	8005098 <memset+0x4>

080050a4 <__libc_init_array>:
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	4d0d      	ldr	r5, [pc, #52]	; (80050dc <__libc_init_array+0x38>)
 80050a8:	4c0d      	ldr	r4, [pc, #52]	; (80050e0 <__libc_init_array+0x3c>)
 80050aa:	1b64      	subs	r4, r4, r5
 80050ac:	10a4      	asrs	r4, r4, #2
 80050ae:	2600      	movs	r6, #0
 80050b0:	42a6      	cmp	r6, r4
 80050b2:	d109      	bne.n	80050c8 <__libc_init_array+0x24>
 80050b4:	4d0b      	ldr	r5, [pc, #44]	; (80050e4 <__libc_init_array+0x40>)
 80050b6:	4c0c      	ldr	r4, [pc, #48]	; (80050e8 <__libc_init_array+0x44>)
 80050b8:	f000 f818 	bl	80050ec <_init>
 80050bc:	1b64      	subs	r4, r4, r5
 80050be:	10a4      	asrs	r4, r4, #2
 80050c0:	2600      	movs	r6, #0
 80050c2:	42a6      	cmp	r6, r4
 80050c4:	d105      	bne.n	80050d2 <__libc_init_array+0x2e>
 80050c6:	bd70      	pop	{r4, r5, r6, pc}
 80050c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050cc:	4798      	blx	r3
 80050ce:	3601      	adds	r6, #1
 80050d0:	e7ee      	b.n	80050b0 <__libc_init_array+0xc>
 80050d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d6:	4798      	blx	r3
 80050d8:	3601      	adds	r6, #1
 80050da:	e7f2      	b.n	80050c2 <__libc_init_array+0x1e>
 80050dc:	08005124 	.word	0x08005124
 80050e0:	08005124 	.word	0x08005124
 80050e4:	08005124 	.word	0x08005124
 80050e8:	08005128 	.word	0x08005128

080050ec <_init>:
 80050ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ee:	bf00      	nop
 80050f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f2:	bc08      	pop	{r3}
 80050f4:	469e      	mov	lr, r3
 80050f6:	4770      	bx	lr

080050f8 <_fini>:
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	bf00      	nop
 80050fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fe:	bc08      	pop	{r3}
 8005100:	469e      	mov	lr, r3
 8005102:	4770      	bx	lr
