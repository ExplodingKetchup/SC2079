
STM32_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f0c  0800fd50  0800fd50  0001fd50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c5c  08010c5c  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08010c5c  08010c5c  00020c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c64  08010c64  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c64  08010c64  00020c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c68  08010c68  00020c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08010c6c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          000052c0  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200054b8  200054b8  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f689  00000000  00000000  000302ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004675  00000000  00000000  0004f937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c50  00000000  00000000  00053fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000161a  00000000  00000000  00055c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026f6a  00000000  00000000  0005721a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020f8b  00000000  00000000  0007e184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e8237  00000000  00000000  0009f10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008934  00000000  00000000  00187348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0018fc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fd38 	.word	0x0800fd38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800fd38 	.word	0x0800fd38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <comm_init>:

void uart_ack(uint8_t id);

/* Functions */

void comm_init(UART_HandleTypeDef* uart, Instruction* curInstObjRef, CompleteError* cpltErrObjRef) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	instructionId = 0;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <comm_init+0x78>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
	ack_tx = 0;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <comm_init+0x7c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]

	huart3Ptr = uart;
 8000ebc:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <comm_init+0x80>)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6013      	str	r3, [r2, #0]
	curInstPtr = curInstObjRef;
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <comm_init+0x84>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	6013      	str	r3, [r2, #0]
	cpltErrPtr = cpltErrObjRef;
 8000ec8:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <comm_init+0x88>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]

	curInstPtr->id = 0;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <comm_init+0x84>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
	curInstPtr->type = INST_TYPE_UNDEFINED;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <comm_init+0x84>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2202      	movs	r2, #2
 8000edc:	705a      	strb	r2, [r3, #1]
	curInstPtr->val = 0;
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <comm_init+0x84>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	805a      	strh	r2, [r3, #2]

	cpltErrPtr->id = 0;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <comm_init+0x88>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
	cpltErrPtr->type = CPLTERR_TYPE_UNDEFINED;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <comm_init+0x88>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	705a      	strb	r2, [r3, #1]
	cpltErrPtr->pos_x = 0;
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <comm_init+0x88>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2200      	movs	r2, #0
 8000efc:	805a      	strh	r2, [r3, #2]
	cpltErrPtr->pos_y = 0;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <comm_init+0x88>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2200      	movs	r2, #0
 8000f04:	809a      	strh	r2, [r3, #4]
	cpltErrPtr->finished = 1;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <comm_init+0x88>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	719a      	strb	r2, [r3, #6]

	return;
 8000f0e:	bf00      	nop
}
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000214 	.word	0x20000214
 8000f20:	20000215 	.word	0x20000215
 8000f24:	20000228 	.word	0x20000228
 8000f28:	2000022c 	.word	0x2000022c
 8000f2c:	20000230 	.word	0x20000230

08000f30 <uart_send_cam>:
		}*/
	}
	return HAL_OK;
}

HAL_StatusTypeDef uart_send_cam(uint8_t obstacle_id) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	if ((obstacle_id != 1) && (obstacle_id != 2)) return HAL_ERROR;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d004      	beq.n	8000f4a <uart_send_cam+0x1a>
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d001      	beq.n	8000f4a <uart_send_cam+0x1a>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e014      	b.n	8000f74 <uart_send_cam+0x44>
	uartbuf[0] = 0x43;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <uart_send_cam+0x4c>)
 8000f4c:	2243      	movs	r2, #67	; 0x43
 8000f4e:	701a      	strb	r2, [r3, #0]
	uartbuf[1] = 0x41;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <uart_send_cam+0x4c>)
 8000f52:	2241      	movs	r2, #65	; 0x41
 8000f54:	705a      	strb	r2, [r3, #1]
	uartbuf[2] = 0x4D;
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <uart_send_cam+0x4c>)
 8000f58:	224d      	movs	r2, #77	; 0x4d
 8000f5a:	709a      	strb	r2, [r3, #2]
	uartbuf[3] = obstacle_id;
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <uart_send_cam+0x4c>)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	70d3      	strb	r3, [r2, #3]
	return HAL_UART_Transmit(huart3Ptr, (uint8_t*)uartbuf, 4, UART_ACK_MAX_DELAY);
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <uart_send_cam+0x50>)
 8000f64:	6818      	ldr	r0, [r3, #0]
 8000f66:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	4903      	ldr	r1, [pc, #12]	; (8000f7c <uart_send_cam+0x4c>)
 8000f6e:	f008 f8ee 	bl	800914e <HAL_UART_Transmit>
 8000f72:	4603      	mov	r3, r0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000218 	.word	0x20000218
 8000f80:	20000228 	.word	0x20000228

08000f84 <uart_receive_cam>:
	}
	//uart_ack(instructionId);
	return HAL_ERROR;
}

uint8_t uart_receive_cam(const uint8_t* buf) {
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	uint8_t id = buf[3];
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3303      	adds	r3, #3
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	73fb      	strb	r3, [r7, #15]
	if (id == 0) {
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <uart_receive_cam+0x1a>
		return 0x80;
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	e00c      	b.n	8000fb8 <uart_receive_cam+0x34>
	}
	if (buf[0] == 0x00) {	// LEFT
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <uart_receive_cam+0x26>
		return 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e006      	b.n	8000fb8 <uart_receive_cam+0x34>
	}
	else if (buf[0] == 0xFF) {	// RIGHT
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2bff      	cmp	r3, #255	; 0xff
 8000fb0:	d101      	bne.n	8000fb6 <uart_receive_cam+0x32>
		return 2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e000      	b.n	8000fb8 <uart_receive_cam+0x34>
	}
	return 0xFF;
 8000fb6:	23ff      	movs	r3, #255	; 0xff
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <imu_init>:

/*+++++++++++++++++++++++++++++++++++*/

/*----------------------------------------------------------------*/

uint8_t imu_init(I2C_HandleTypeDef* hi2c_ptr) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	hi2c1_ptr = hi2c_ptr;
 8000fcc:	4a37      	ldr	r2, [pc, #220]	; (80010ac <imu_init+0xe8>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]

	// Reset chip
	if (!write_one_byte(0, B0_PWR_MGMT_1, 0x80 | 0x41)) return 1;
 8000fd2:	22c1      	movs	r2, #193	; 0xc1
 8000fd4:	2106      	movs	r1, #6
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 f8ac 	bl	8001134 <write_one_byte>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <imu_init+0x22>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e05d      	b.n	80010a2 <imu_init+0xde>

	cur_bank = get_cur_bank();
 8000fe6:	f000 f907 	bl	80011f8 <get_cur_bank>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <imu_init+0xec>)
 8000ff0:	701a      	strb	r2, [r3, #0]

	HAL_Delay(100);
 8000ff2:	2064      	movs	r0, #100	; 0x64
 8000ff4:	f003 ff64 	bl	8004ec0 <HAL_Delay>
	uint8_t who_am_i = read_one_byte(0, 0);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 f862 	bl	80010c4 <read_one_byte>
 8001000:	4603      	mov	r3, r0
 8001002:	73fb      	strb	r3, [r7, #15]
	if (who_am_i != 0xEA) { 	// read WHO_AM_I register, should receive 0xEA
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2bea      	cmp	r3, #234	; 0xea
 8001008:	d001      	beq.n	800100e <imu_init+0x4a>
		return 2;
 800100a:	2302      	movs	r3, #2
 800100c:	e049      	b.n	80010a2 <imu_init+0xde>
	}

	// Wake up chip
	if (!write_one_byte(0, B0_PWR_MGMT_1, ~0x40 & 0x41)) return 3;
 800100e:	2201      	movs	r2, #1
 8001010:	2106      	movs	r1, #6
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f88e 	bl	8001134 <write_one_byte>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <imu_init+0x5e>
 800101e:	2303      	movs	r3, #3
 8001020:	e03f      	b.n	80010a2 <imu_init+0xde>
	HAL_Delay(50);
 8001022:	2032      	movs	r0, #50	; 0x32
 8001024:	f003 ff4c 	bl	8004ec0 <HAL_Delay>

	// Enables ODR start-time alignment when any of the following registers is written: GYRO_SMPLRT_DIV,
	// ACCEL_SMPLRT_DIV_1, ACCEL_SMPLRT_DIV_2, I2C_MST_ODR_CONFIG.
	if (!write_one_byte(2, B2_ODR_ALIGN_EN, 0x01)) return 4;
 8001028:	2201      	movs	r2, #1
 800102a:	2109      	movs	r1, #9
 800102c:	2002      	movs	r0, #2
 800102e:	f000 f881 	bl	8001134 <write_one_byte>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <imu_init+0x78>
 8001038:	2304      	movs	r3, #4
 800103a:	e032      	b.n	80010a2 <imu_init+0xde>
	HAL_Delay(50);
 800103c:	2032      	movs	r0, #50	; 0x32
 800103e:	f003 ff3f 	bl	8004ec0 <HAL_Delay>

	// Set accel low pass filter
	//if (!write_one_byte(2, B2_ACCEL_CONFIG, (ACCEL_DLPFCFG_val << 3) | ACCEL_FCHOICE_val)) return 5;

	// Set gyro low pass filter and scale
	if (!write_one_byte(2, B2_GYRO_CONFIG_1, (((GYRO_DLPFCFG_val << 2) | GYRO_FS_SEL_val) << 1) | GYRO_FCHOICE_val)) return 6;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <imu_init+0xf0>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <imu_init+0xf4>)
 800104a:	7812      	ldrb	r2, [r2, #0]
 800104c:	4313      	orrs	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	b25a      	sxtb	r2, r3
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <imu_init+0xf8>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b25b      	sxtb	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b25b      	sxtb	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	2101      	movs	r1, #1
 8001062:	2002      	movs	r0, #2
 8001064:	f000 f866 	bl	8001134 <write_one_byte>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <imu_init+0xae>
 800106e:	2306      	movs	r3, #6
 8001070:	e017      	b.n	80010a2 <imu_init+0xde>
	HAL_Delay(50);
 8001072:	2032      	movs	r0, #50	; 0x32
 8001074:	f003 ff24 	bl	8004ec0 <HAL_Delay>
	//if (ACCEL_SMPLRT_DIV_val > 0x0FFF) ACCEL_SMPLRT_DIV_val = 0x0FFF;
	//if (!write_one_byte(2, B2_ACCEL_SMPLRT_DIV_1, (uint8_t)(ACCEL_SMPLRT_DIV_val >> 8))) return 7;
	//if (!write_one_byte(2, B2_ACCEL_SMPLRT_DIV_2, (uint8_t)(ACCEL_SMPLRT_DIV_val & 0x00FF))) return 8;

	// Set gyro sample rate divider
	if (!write_one_byte(2, B2_GYRO_SMPLRT_DIV, GYRO_SMPLRT_DIV_val)) return 9;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <imu_init+0xfc>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	2100      	movs	r1, #0
 8001080:	2002      	movs	r0, #2
 8001082:	f000 f857 	bl	8001134 <write_one_byte>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <imu_init+0xcc>
 800108c:	2309      	movs	r3, #9
 800108e:	e008      	b.n	80010a2 <imu_init+0xde>
	HAL_Delay(50);
 8001090:	2032      	movs	r0, #50	; 0x32
 8001092:	f003 ff15 	bl	8004ec0 <HAL_Delay>

	// Caliberate accelerometer (eliminate bias)
	//accel_caliberate();

	// Caliberate gyroscope (eliminate bias)
	gyro_caliberate();
 8001096:	f000 f943 	bl	8001320 <gyro_caliberate>
	HAL_Delay(50);
 800109a:	2032      	movs	r0, #50	; 0x32
 800109c:	f003 ff10 	bl	8004ec0 <HAL_Delay>

	return 0;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000234 	.word	0x20000234
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000002 	.word	0x20000002
 80010b8:	20000238 	.word	0x20000238
 80010bc:	20000001 	.word	0x20000001
 80010c0:	20000239 	.word	0x20000239

080010c4 <read_one_byte>:

uint8_t read_one_byte(uint8_t bank, uint8_t regAddr) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]

	if (!select_bank(bank)) return 0;
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f85a 	bl	8001190 <select_bank>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <read_one_byte+0x22>
 80010e2:	2300      	movs	r3, #0
 80010e4:	e020      	b.n	8001128 <read_one_byte+0x64>
	uint8_t buf[1];

	uint8_t reg = regAddr;
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	72fb      	strb	r3, [r7, #11]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <read_one_byte+0x6c>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	f107 020b 	add.w	r2, r7, #11
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	21d0      	movs	r1, #208	; 0xd0
 80010fc:	f004 ffa2 	bl	8006044 <HAL_I2C_Master_Transmit>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10f      	bne.n	8001126 <read_one_byte+0x62>
		if (HAL_I2C_Master_Receive(hi2c1_ptr, IMU_I2C_ADDR, buf, 1, I2C_MAX_DELAY) == HAL_OK) {
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <read_one_byte+0x6c>)
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	f107 020c 	add.w	r2, r7, #12
 800110e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	21d0      	movs	r1, #208	; 0xd0
 8001118:	f005 f892 	bl	8006240 <HAL_I2C_Master_Receive>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <read_one_byte+0x62>
			return buf[0];
 8001122:	7b3b      	ldrb	r3, [r7, #12]
 8001124:	e000      	b.n	8001128 <read_one_byte+0x64>
		}
	}
	return 0;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000234 	.word	0x20000234

08001134 <write_one_byte>:

uint8_t write_one_byte(uint8_t bank, uint8_t regAddr, uint8_t data) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af02      	add	r7, sp, #8
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	460b      	mov	r3, r1
 8001140:	71bb      	strb	r3, [r7, #6]
 8001142:	4613      	mov	r3, r2
 8001144:	717b      	strb	r3, [r7, #5]

	if (!select_bank(bank)) return 0;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f821 	bl	8001190 <select_bank>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <write_one_byte+0x24>
 8001154:	2300      	movs	r3, #0
 8001156:	e014      	b.n	8001182 <write_one_byte+0x4e>
	uint8_t buf[2];
	buf[0] = regAddr;
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 800115c:	797b      	ldrb	r3, [r7, #5]
 800115e:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, buf, 2, HAL_MAX_DELAY) == HAL_OK) {
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <write_one_byte+0x58>)
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	f107 020c 	add.w	r2, r7, #12
 8001168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2302      	movs	r3, #2
 8001170:	21d0      	movs	r1, #208	; 0xd0
 8001172:	f004 ff67 	bl	8006044 <HAL_I2C_Master_Transmit>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <write_one_byte+0x4c>
		return 1;
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <write_one_byte+0x4e>
	}
	return 0;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000234 	.word	0x20000234

08001190 <select_bank>:

uint8_t select_bank(uint8_t bank) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af02      	add	r7, sp, #8
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]

	if (bank > 3) return 0;
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d901      	bls.n	80011a4 <select_bank+0x14>
 80011a0:	2300      	movs	r3, #0
 80011a2:	e020      	b.n	80011e6 <select_bank+0x56>
	if (cur_bank == bank) return 1;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <select_bank+0x60>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	79fa      	ldrb	r2, [r7, #7]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d101      	bne.n	80011b2 <select_bank+0x22>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e019      	b.n	80011e6 <select_bank+0x56>
	uint8_t buf[2];
	buf[0] = REG_BANK_SEL;
 80011b2:	237f      	movs	r3, #127	; 0x7f
 80011b4:	733b      	strb	r3, [r7, #12]
	buf[1] = bank << 4;
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, buf, 2, HAL_MAX_DELAY) == HAL_OK) {
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <select_bank+0x64>)
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	f107 020c 	add.w	r2, r7, #12
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2302      	movs	r3, #2
 80011ce:	21d0      	movs	r1, #208	; 0xd0
 80011d0:	f004 ff38 	bl	8006044 <HAL_I2C_Master_Transmit>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d104      	bne.n	80011e4 <select_bank+0x54>
		cur_bank = bank;
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <select_bank+0x60>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	7013      	strb	r3, [r2, #0]
		return 1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <select_bank+0x56>
	}
	return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000234 	.word	0x20000234

080011f8 <get_cur_bank>:

uint8_t get_cur_bank() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af02      	add	r7, sp, #8
	uint8_t buf[1];

	uint8_t reg = REG_BANK_SEL;
 80011fe:	237f      	movs	r3, #127	; 0x7f
 8001200:	70fb      	strb	r3, [r7, #3]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <get_cur_bank+0x58>)
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	1cfa      	adds	r2, r7, #3
 8001208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	21d0      	movs	r1, #208	; 0xd0
 8001212:	f004 ff17 	bl	8006044 <HAL_I2C_Master_Transmit>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d113      	bne.n	8001244 <get_cur_bank+0x4c>
		if (HAL_I2C_Master_Receive(hi2c1_ptr, IMU_I2C_ADDR, buf, 1, HAL_MAX_DELAY) == HAL_OK) {
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <get_cur_bank+0x58>)
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	1d3a      	adds	r2, r7, #4
 8001222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	21d0      	movs	r1, #208	; 0xd0
 800122c:	f005 f808 	bl	8006240 <HAL_I2C_Master_Receive>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d106      	bne.n	8001244 <get_cur_bank+0x4c>
			return (buf[0] >> 4) & 0x3;
 8001236:	793b      	ldrb	r3, [r7, #4]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	e000      	b.n	8001246 <get_cur_bank+0x4e>
		}
	}
	return 4;
 8001244:	2304      	movs	r3, #4
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000234 	.word	0x20000234

08001254 <read_raw_gyro_x>:
	write_one_byte(1, B1_YA_OFFS_L, accel_bias_y_l);
	write_one_byte(1, B1_ZA_OFFS_H, accel_bias_z_h);
	write_one_byte(1, B1_ZA_OFFS_L, accel_bias_z_l);
}

int16_t read_raw_gyro_x() {
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_XOUT_H) << 8) | read_one_byte(0, B0_GYRO_XOUT_L));
 800125a:	2133      	movs	r1, #51	; 0x33
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff ff31 	bl	80010c4 <read_one_byte>
 8001262:	4603      	mov	r3, r0
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21c      	sxth	r4, r3
 8001268:	2134      	movs	r1, #52	; 0x34
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff ff2a 	bl	80010c4 <read_one_byte>
 8001270:	4603      	mov	r3, r0
 8001272:	b21b      	sxth	r3, r3
 8001274:	4323      	orrs	r3, r4
 8001276:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bd90      	pop	{r4, r7, pc}

08001284 <read_raw_gyro_y>:
	int16_t raw = read_raw_gyro_x();
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
	return result;
}

int16_t read_raw_gyro_y() {
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_YOUT_H) << 8) | read_one_byte(0, B0_GYRO_YOUT_L));
 800128a:	2135      	movs	r1, #53	; 0x35
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff ff19 	bl	80010c4 <read_one_byte>
 8001292:	4603      	mov	r3, r0
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21c      	sxth	r4, r3
 8001298:	2136      	movs	r1, #54	; 0x36
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff ff12 	bl	80010c4 <read_one_byte>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4323      	orrs	r3, r4
 80012a6:	80fb      	strh	r3, [r7, #6]
	return raw;
 80012a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd90      	pop	{r4, r7, pc}

080012b4 <read_raw_gyro_z>:
	int16_t raw = read_raw_gyro_y();
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
	return result;
}

int16_t read_raw_gyro_z() {
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_ZOUT_H) << 8) | read_one_byte(0, B0_GYRO_ZOUT_L));
 80012ba:	2137      	movs	r1, #55	; 0x37
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff ff01 	bl	80010c4 <read_one_byte>
 80012c2:	4603      	mov	r3, r0
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21c      	sxth	r4, r3
 80012c8:	2138      	movs	r1, #56	; 0x38
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff fefa 	bl	80010c4 <read_one_byte>
 80012d0:	4603      	mov	r3, r0
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	4323      	orrs	r3, r4
 80012d6:	80fb      	strh	r3, [r7, #6]
	return raw;
 80012d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}

080012e4 <read_gyro_z>:

float read_gyro_z() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	int16_t raw = read_raw_gyro_z();
 80012ea:	f7ff ffe3 	bl	80012b4 <read_raw_gyro_z>
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
 80012f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fe:	eddf 6a07 	vldr	s13, [pc, #28]	; 800131c <read_gyro_z+0x38>
 8001302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001306:	edc7 7a00 	vstr	s15, [r7]
	return result;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	ee07 3a90 	vmov	s15, r3
}
 8001310:	eeb0 0a67 	vmov.f32	s0, s15
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	43030000 	.word	0x43030000

08001320 <gyro_caliberate>:
	gyro->x = read_gyro_x();
	gyro->y = read_gyro_y();
	gyro->z = read_gyro_z();
}

void gyro_caliberate() {
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
	int32_t gyro_bias_x = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
	int32_t gyro_bias_y = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
	int32_t gyro_bias_z = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	e017      	b.n	8001368 <gyro_caliberate+0x48>
		gyro_bias_x += read_raw_gyro_x();
 8001338:	f7ff ff8c 	bl	8001254 <read_raw_gyro_x>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	4413      	add	r3, r2
 8001344:	617b      	str	r3, [r7, #20]
		gyro_bias_y += read_raw_gyro_y();
 8001346:	f7ff ff9d 	bl	8001284 <read_raw_gyro_y>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4413      	add	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
		gyro_bias_z += read_raw_gyro_z();
 8001354:	f7ff ffae 	bl	80012b4 <read_raw_gyro_z>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3301      	adds	r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b63      	cmp	r3, #99	; 0x63
 800136c:	dde4      	ble.n	8001338 <gyro_caliberate+0x18>
	}
	gyro_bias_x /= 100;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	4a31      	ldr	r2, [pc, #196]	; (8001438 <gyro_caliberate+0x118>)
 8001372:	fb82 1203 	smull	r1, r2, r2, r3
 8001376:	1152      	asrs	r2, r2, #5
 8001378:	17db      	asrs	r3, r3, #31
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
	gyro_bias_y /= 100;
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4a2d      	ldr	r2, [pc, #180]	; (8001438 <gyro_caliberate+0x118>)
 8001382:	fb82 1203 	smull	r1, r2, r2, r3
 8001386:	1152      	asrs	r2, r2, #5
 8001388:	17db      	asrs	r3, r3, #31
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	613b      	str	r3, [r7, #16]
	gyro_bias_z /= 100;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4a29      	ldr	r2, [pc, #164]	; (8001438 <gyro_caliberate+0x118>)
 8001392:	fb82 1203 	smull	r1, r2, r2, r3
 8001396:	1152      	asrs	r2, r2, #5
 8001398:	17db      	asrs	r3, r3, #31
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	60fb      	str	r3, [r7, #12]
	// Step size for offset register: 0.0305 dps/LSB; Offset = Measurement / 4;
	gyro_bias_x = -gyro_bias_x / 4;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	425b      	negs	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	da00      	bge.n	80013a8 <gyro_caliberate+0x88>
 80013a6:	3303      	adds	r3, #3
 80013a8:	109b      	asrs	r3, r3, #2
 80013aa:	617b      	str	r3, [r7, #20]
	gyro_bias_y = -gyro_bias_y / 4;
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	425b      	negs	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	da00      	bge.n	80013b6 <gyro_caliberate+0x96>
 80013b4:	3303      	adds	r3, #3
 80013b6:	109b      	asrs	r3, r3, #2
 80013b8:	613b      	str	r3, [r7, #16]
	gyro_bias_z = -gyro_bias_z / 4;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	425b      	negs	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	da00      	bge.n	80013c4 <gyro_caliberate+0xa4>
 80013c2:	3303      	adds	r3, #3
 80013c4:	109b      	asrs	r3, r3, #2
 80013c6:	60fb      	str	r3, [r7, #12]
	/*gyro_bias_x = -gyro_bias_x * 2;
	gyro_bias_y = -gyro_bias_y * 2;
	gyro_bias_z = -gyro_bias_z * 2;*/
	// Separate gyro_bias into 2 parts: [15:8] and [7:0]
	uint8_t gyro_bias_x_h = (uint8_t)(gyro_bias_x >> 8);
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	121b      	asrs	r3, r3, #8
 80013cc:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_bias_x_l = (uint8_t)gyro_bias_x;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	71bb      	strb	r3, [r7, #6]
	uint8_t gyro_bias_y_h = (uint8_t)(gyro_bias_y >> 8);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	121b      	asrs	r3, r3, #8
 80013d6:	717b      	strb	r3, [r7, #5]
	uint8_t gyro_bias_y_l = (uint8_t)gyro_bias_y;
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	713b      	strb	r3, [r7, #4]
	uint8_t gyro_bias_z_h = (uint8_t)(gyro_bias_z >> 8);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	121b      	asrs	r3, r3, #8
 80013e0:	70fb      	strb	r3, [r7, #3]
	uint8_t gyro_bias_z_l = (uint8_t)gyro_bias_z;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	70bb      	strb	r3, [r7, #2]
	// Write to registers
	write_one_byte(2, B2_XG_OFFS_USRH, gyro_bias_x_h);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	461a      	mov	r2, r3
 80013ea:	2103      	movs	r1, #3
 80013ec:	2002      	movs	r0, #2
 80013ee:	f7ff fea1 	bl	8001134 <write_one_byte>
	write_one_byte(2, B2_XG_OFFS_USRL, gyro_bias_x_l);
 80013f2:	79bb      	ldrb	r3, [r7, #6]
 80013f4:	461a      	mov	r2, r3
 80013f6:	2104      	movs	r1, #4
 80013f8:	2002      	movs	r0, #2
 80013fa:	f7ff fe9b 	bl	8001134 <write_one_byte>
	write_one_byte(2, B2_YG_OFFS_USRH, gyro_bias_y_h);
 80013fe:	797b      	ldrb	r3, [r7, #5]
 8001400:	461a      	mov	r2, r3
 8001402:	2105      	movs	r1, #5
 8001404:	2002      	movs	r0, #2
 8001406:	f7ff fe95 	bl	8001134 <write_one_byte>
	write_one_byte(2, B2_YG_OFFS_USRL, gyro_bias_y_l);
 800140a:	793b      	ldrb	r3, [r7, #4]
 800140c:	461a      	mov	r2, r3
 800140e:	2106      	movs	r1, #6
 8001410:	2002      	movs	r0, #2
 8001412:	f7ff fe8f 	bl	8001134 <write_one_byte>
	write_one_byte(2, B2_ZG_OFFS_USRH, gyro_bias_z_h);
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	461a      	mov	r2, r3
 800141a:	2107      	movs	r1, #7
 800141c:	2002      	movs	r0, #2
 800141e:	f7ff fe89 	bl	8001134 <write_one_byte>
	write_one_byte(2, B2_ZG_OFFS_USRL, gyro_bias_z_l);
 8001422:	78bb      	ldrb	r3, [r7, #2]
 8001424:	461a      	mov	r2, r3
 8001426:	2108      	movs	r1, #8
 8001428:	2002      	movs	r0, #2
 800142a:	f7ff fe83 	bl	8001134 <write_one_byte>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	51eb851f 	.word	0x51eb851f

0800143c <calcOri>:

float calcOri(uint32_t* lastSampleTime, float lastSampleOri) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	ed87 0a00 	vstr	s0, [r7]
	float angular_speed = 0;
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
	angular_speed += read_gyro_z();
 800144e:	f7ff ff49 	bl	80012e4 <read_gyro_z>
 8001452:	eeb0 7a40 	vmov.f32	s14, s0
 8001456:	edd7 7a05 	vldr	s15, [r7, #20]
 800145a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800145e:	edc7 7a05 	vstr	s15, [r7, #20]
	if (abs(angular_speed) < MIN_ANG_SPD)
 8001462:	edd7 7a05 	vldr	s15, [r7, #20]
 8001466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146a:	ee17 3a90 	vmov	r3, s15
 800146e:	2b00      	cmp	r3, #0
 8001470:	bfb8      	it	lt
 8001472:	425b      	neglt	r3, r3
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	d502      	bpl.n	8001490 <calcOri+0x54>
		angular_speed = 0;
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
	uint32_t curTime = HAL_GetTick();
 8001490:	f003 fd0a 	bl	8004ea8 <HAL_GetTick>
 8001494:	60f8      	str	r0, [r7, #12]
	uint16_t dt = curTime - (*lastSampleTime);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	b29a      	uxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	817b      	strh	r3, [r7, #10]
	*lastSampleTime = curTime;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	601a      	str	r2, [r3, #0]
	float result = lastSampleOri + angular_speed * dt / 1000;
 80014aa:	897b      	ldrh	r3, [r7, #10]
 80014ac:	ee07 3a90 	vmov	s15, r3
 80014b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014bc:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001524 <calcOri+0xe8>
 80014c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c4:	ed97 7a00 	vldr	s14, [r7]
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result >= 360)
 80014d0:	e007      	b.n	80014e2 <calcOri+0xa6>
		result -= 360;
 80014d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80014d6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001528 <calcOri+0xec>
 80014da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014de:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result >= 360)
 80014e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80014e6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001528 <calcOri+0xec>
 80014ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	daee      	bge.n	80014d2 <calcOri+0x96>
	while (result < 0)
 80014f4:	e007      	b.n	8001506 <calcOri+0xca>
		result += 360;
 80014f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80014fa:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001528 <calcOri+0xec>
 80014fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001502:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result < 0)
 8001506:	edd7 7a04 	vldr	s15, [r7, #16]
 800150a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001512:	d4f0      	bmi.n	80014f6 <calcOri+0xba>
	return result;
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	ee07 3a90 	vmov	s15, r3
}
 800151a:	eeb0 0a67 	vmov.f32	s0, s15
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	447a0000 	.word	0x447a0000
 8001528:	43b40000 	.word	0x43b40000

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001532:	f003 fc53 	bl	8004ddc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001536:	f000 f8e3 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153a:	f000 fcaf 	bl	8001e9c <MX_GPIO_Init>
  MX_TIM8_Init();
 800153e:	f000 fbaf 	bl	8001ca0 <MX_TIM8_Init>
  MX_I2C1_Init();
 8001542:	f000 f9df 	bl	8001904 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001546:	f000 facd 	bl	8001ae4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800154a:	f000 fb1f 	bl	8001b8c <MX_TIM3_Init>
  MX_TIM1_Init();
 800154e:	f000 fa07 	bl	8001960 <MX_TIM1_Init>
  MX_TIM6_Init();
 8001552:	f000 fb6f 	bl	8001c34 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001556:	f000 fc77 	bl	8001e48 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800155a:	f000 fc4b 	bl	8001df4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800155e:	f000 f92d 	bl	80017bc <MX_ADC1_Init>
  MX_ADC2_Init();
 8001562:	f000 f97d 	bl	8001860 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8001566:	f002 febb 	bl	80042e0 <OLED_Init>
  HAL_TIM_Base_Start(&htim6);
 800156a:	4843      	ldr	r0, [pc, #268]	; (8001678 <main+0x14c>)
 800156c:	f006 f88c 	bl	8007688 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001570:	2100      	movs	r1, #0
 8001572:	4842      	ldr	r0, [pc, #264]	; (800167c <main+0x150>)
 8001574:	f006 fa6c 	bl	8007a50 <HAL_TIM_IC_Start_IT>
  comm_init(&huart3, &curInst, &cpltErr);
 8001578:	4a41      	ldr	r2, [pc, #260]	; (8001680 <main+0x154>)
 800157a:	4942      	ldr	r1, [pc, #264]	; (8001684 <main+0x158>)
 800157c:	4842      	ldr	r0, [pc, #264]	; (8001688 <main+0x15c>)
 800157e:	f7ff fc91 	bl	8000ea4 <comm_init>
  HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001588:	4840      	ldr	r0, [pc, #256]	; (800168c <main+0x160>)
 800158a:	f004 fbfd 	bl	8005d88 <HAL_GPIO_WritePin>
  while (HAL_UART_Receive_IT(&huart3, (uint8_t*) buf, UART_PACKET_SIZE) != HAL_OK){
 800158e:	e010      	b.n	80015b2 <main+0x86>
	  HAL_Delay(100);
 8001590:	2064      	movs	r0, #100	; 0x64
 8001592:	f003 fc95 	bl	8004ec0 <HAL_Delay>
	  OLED_Clear();
 8001596:	f002 fd7f 	bl	8004098 <OLED_Clear>
	  		sprintf(oledbuf, "Uart err: %d", 1);
 800159a:	2201      	movs	r2, #1
 800159c:	493c      	ldr	r1, [pc, #240]	; (8001690 <main+0x164>)
 800159e:	483d      	ldr	r0, [pc, #244]	; (8001694 <main+0x168>)
 80015a0:	f00c f962 	bl	800d868 <siprintf>
	  		OLED_ShowString(10, 15, &oledbuf[0]);
 80015a4:	4a3b      	ldr	r2, [pc, #236]	; (8001694 <main+0x168>)
 80015a6:	210f      	movs	r1, #15
 80015a8:	200a      	movs	r0, #10
 80015aa:	f002 fe67 	bl	800427c <OLED_ShowString>
	  		OLED_Refresh_Gram();
 80015ae:	f002 fcf1 	bl	8003f94 <OLED_Refresh_Gram>
  while (HAL_UART_Receive_IT(&huart3, (uint8_t*) buf, UART_PACKET_SIZE) != HAL_OK){
 80015b2:	2204      	movs	r2, #4
 80015b4:	4938      	ldr	r1, [pc, #224]	; (8001698 <main+0x16c>)
 80015b6:	4834      	ldr	r0, [pc, #208]	; (8001688 <main+0x15c>)
 80015b8:	f007 fe5b 	bl	8009272 <HAL_UART_Receive_IT>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1e6      	bne.n	8001590 <main+0x64>
  }
  OLED_Clear();
 80015c2:	f002 fd69 	bl	8004098 <OLED_Clear>
  uint8_t imuerr = imu_init(&hi2c1);
 80015c6:	4835      	ldr	r0, [pc, #212]	; (800169c <main+0x170>)
 80015c8:	f7ff fcfc 	bl	8000fc4 <imu_init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	71fb      	strb	r3, [r7, #7]
	if (imuerr != 0) {
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00e      	beq.n	80015f4 <main+0xc8>
	  OLED_Clear();
 80015d6:	f002 fd5f 	bl	8004098 <OLED_Clear>
		sprintf(oledbuf, "Imu err: %d", imuerr);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	461a      	mov	r2, r3
 80015de:	4930      	ldr	r1, [pc, #192]	; (80016a0 <main+0x174>)
 80015e0:	482c      	ldr	r0, [pc, #176]	; (8001694 <main+0x168>)
 80015e2:	f00c f941 	bl	800d868 <siprintf>
		OLED_ShowString(10, 15, &oledbuf[0]);
 80015e6:	4a2b      	ldr	r2, [pc, #172]	; (8001694 <main+0x168>)
 80015e8:	210f      	movs	r1, #15
 80015ea:	200a      	movs	r0, #10
 80015ec:	f002 fe46 	bl	800427c <OLED_ShowString>
		OLED_Refresh_Gram();
 80015f0:	f002 fcd0 	bl	8003f94 <OLED_Refresh_Gram>
	}
  mtr_init(&htim8, &htim2, &htim3, &mtrA, &mtrB, &mtrAPID, &mtrBPID, &backupObj, &orientation, &ori_semaphoreHandle);
 80015f4:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <main+0x178>)
 80015f6:	9305      	str	r3, [sp, #20]
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <main+0x17c>)
 80015fa:	9304      	str	r3, [sp, #16]
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <main+0x180>)
 80015fe:	9303      	str	r3, [sp, #12]
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <main+0x184>)
 8001602:	9302      	str	r3, [sp, #8]
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <main+0x188>)
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <main+0x18c>)
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <main+0x190>)
 800160e:	4a2c      	ldr	r2, [pc, #176]	; (80016c0 <main+0x194>)
 8001610:	492c      	ldr	r1, [pc, #176]	; (80016c4 <main+0x198>)
 8001612:	482d      	ldr	r0, [pc, #180]	; (80016c8 <main+0x19c>)
 8001614:	f001 fd88 	bl	8003128 <mtr_init>
  servoInit(&htim1);
 8001618:	4818      	ldr	r0, [pc, #96]	; (800167c <main+0x150>)
 800161a:	f002 ff5b 	bl	80044d4 <servoInit>
  //HAL_UART_Receive_IT(&huart1, (uint8_t*) buf, UART_PACKET_SIZE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800161e:	f008 fdf5 	bl	800a20c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ori_semaphore */
  ori_semaphoreHandle = osSemaphoreNew(1, 1, &ori_semaphore_attributes);
 8001622:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <main+0x1a0>)
 8001624:	2101      	movs	r1, #1
 8001626:	2001      	movs	r0, #1
 8001628:	f008 fee7 	bl	800a3fa <osSemaphoreNew>
 800162c:	4603      	mov	r3, r0
 800162e:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <main+0x178>)
 8001630:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001632:	4a27      	ldr	r2, [pc, #156]	; (80016d0 <main+0x1a4>)
 8001634:	2100      	movs	r1, #0
 8001636:	4827      	ldr	r0, [pc, #156]	; (80016d4 <main+0x1a8>)
 8001638:	f008 fe32 	bl	800a2a0 <osThreadNew>
 800163c:	4603      	mov	r3, r0
 800163e:	4a26      	ldr	r2, [pc, #152]	; (80016d8 <main+0x1ac>)
 8001640:	6013      	str	r3, [r2, #0]

  /* creation of motorServo */
  motorServoHandle = osThreadNew(StartMotorServo, NULL, &motorServo_attributes);
 8001642:	4a26      	ldr	r2, [pc, #152]	; (80016dc <main+0x1b0>)
 8001644:	2100      	movs	r1, #0
 8001646:	4826      	ldr	r0, [pc, #152]	; (80016e0 <main+0x1b4>)
 8001648:	f008 fe2a 	bl	800a2a0 <osThreadNew>
 800164c:	4603      	mov	r3, r0
 800164e:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <main+0x1b8>)
 8001650:	6013      	str	r3, [r2, #0]

  /* creation of imu */
  imuHandle = osThreadNew(StartIMU, NULL, &imu_attributes);
 8001652:	4a25      	ldr	r2, [pc, #148]	; (80016e8 <main+0x1bc>)
 8001654:	2100      	movs	r1, #0
 8001656:	4825      	ldr	r0, [pc, #148]	; (80016ec <main+0x1c0>)
 8001658:	f008 fe22 	bl	800a2a0 <osThreadNew>
 800165c:	4603      	mov	r3, r0
 800165e:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <main+0x1c4>)
 8001660:	6013      	str	r3, [r2, #0]

  /* creation of ultrasound */
  ultrasoundHandle = osThreadNew(StartUS, NULL, &ultrasound_attributes);
 8001662:	4a24      	ldr	r2, [pc, #144]	; (80016f4 <main+0x1c8>)
 8001664:	2100      	movs	r1, #0
 8001666:	4824      	ldr	r0, [pc, #144]	; (80016f8 <main+0x1cc>)
 8001668:	f008 fe1a 	bl	800a2a0 <osThreadNew>
 800166c:	4603      	mov	r3, r0
 800166e:	4a23      	ldr	r2, [pc, #140]	; (80016fc <main+0x1d0>)
 8001670:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001672:	f008 fdef 	bl	800a254 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001676:	e7fe      	b.n	8001676 <main+0x14a>
 8001678:	200003f8 	.word	0x200003f8
 800167c:	20000320 	.word	0x20000320
 8001680:	20000580 	.word	0x20000580
 8001684:	2000057c 	.word	0x2000057c
 8001688:	200004cc 	.word	0x200004cc
 800168c:	40021000 	.word	0x40021000
 8001690:	0800fd88 	.word	0x0800fd88
 8001694:	20000538 	.word	0x20000538
 8001698:	2000054c 	.word	0x2000054c
 800169c:	200002cc 	.word	0x200002cc
 80016a0:	0800fd98 	.word	0x0800fd98
 80016a4:	20000520 	.word	0x20000520
 80016a8:	20000528 	.word	0x20000528
 80016ac:	200005d8 	.word	0x200005d8
 80016b0:	200005b8 	.word	0x200005b8
 80016b4:	20000598 	.word	0x20000598
 80016b8:	20000590 	.word	0x20000590
 80016bc:	20000588 	.word	0x20000588
 80016c0:	200003b0 	.word	0x200003b0
 80016c4:	20000368 	.word	0x20000368
 80016c8:	20000440 	.word	0x20000440
 80016cc:	0800fe5c 	.word	0x0800fe5c
 80016d0:	0800fdcc 	.word	0x0800fdcc
 80016d4:	080023b1 	.word	0x080023b1
 80016d8:	20000510 	.word	0x20000510
 80016dc:	0800fdf0 	.word	0x0800fdf0
 80016e0:	080023c9 	.word	0x080023c9
 80016e4:	20000514 	.word	0x20000514
 80016e8:	0800fe14 	.word	0x0800fe14
 80016ec:	080030a1 	.word	0x080030a1
 80016f0:	20000518 	.word	0x20000518
 80016f4:	0800fe38 	.word	0x0800fe38
 80016f8:	080030e5 	.word	0x080030e5
 80016fc:	2000051c 	.word	0x2000051c

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	; 0x50
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	2230      	movs	r2, #48	; 0x30
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f00c f98c 	bl	800da2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <SystemClock_Config+0xb4>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <SystemClock_Config+0xb4>)
 800172e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001732:	6413      	str	r3, [r2, #64]	; 0x40
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <SystemClock_Config+0xb4>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <SystemClock_Config+0xb8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1b      	ldr	r2, [pc, #108]	; (80017b8 <SystemClock_Config+0xb8>)
 800174a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <SystemClock_Config+0xb8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800175c:	2302      	movs	r3, #2
 800175e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001760:	2301      	movs	r3, #1
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001764:	2310      	movs	r3, #16
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001768:	2300      	movs	r3, #0
 800176a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176c:	f107 0320 	add.w	r3, r7, #32
 8001770:	4618      	mov	r0, r3
 8001772:	f005 fae1 	bl	8006d38 <HAL_RCC_OscConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800177c:	f001 fcce 	bl	800311c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001780:	230f      	movs	r3, #15
 8001782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f005 fd44 	bl	8007228 <HAL_RCC_ClockConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80017a6:	f001 fcb9 	bl	800311c <Error_Handler>
  }
}
 80017aa:	bf00      	nop
 80017ac:	3750      	adds	r7, #80	; 0x50
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40007000 	.word	0x40007000

080017bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017c2:	463b      	mov	r3, r7
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <MX_ADC1_Init+0x98>)
 80017d0:	4a21      	ldr	r2, [pc, #132]	; (8001858 <MX_ADC1_Init+0x9c>)
 80017d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <MX_ADC1_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <MX_ADC1_Init+0x98>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <MX_ADC1_Init+0x98>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <MX_ADC1_Init+0x98>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_ADC1_Init+0x98>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <MX_ADC1_Init+0x98>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <MX_ADC1_Init+0x98>)
 80017fc:	4a17      	ldr	r2, [pc, #92]	; (800185c <MX_ADC1_Init+0xa0>)
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <MX_ADC1_Init+0x98>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <MX_ADC1_Init+0x98>)
 8001808:	2201      	movs	r2, #1
 800180a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MX_ADC1_Init+0x98>)
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_ADC1_Init+0x98>)
 8001816:	2201      	movs	r2, #1
 8001818:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800181a:	480e      	ldr	r0, [pc, #56]	; (8001854 <MX_ADC1_Init+0x98>)
 800181c:	f003 fb74 	bl	8004f08 <HAL_ADC_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001826:	f001 fc79 	bl	800311c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800182a:	230b      	movs	r3, #11
 800182c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800182e:	2301      	movs	r3, #1
 8001830:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001836:	463b      	mov	r3, r7
 8001838:	4619      	mov	r1, r3
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <MX_ADC1_Init+0x98>)
 800183c:	f003 fd46 	bl	80052cc <HAL_ADC_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001846:	f001 fc69 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000023c 	.word	0x2000023c
 8001858:	40012000 	.word	0x40012000
 800185c:	0f000001 	.word	0x0f000001

08001860 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001866:	463b      	mov	r3, r7
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <MX_ADC2_Init+0x98>)
 8001874:	4a21      	ldr	r2, [pc, #132]	; (80018fc <MX_ADC2_Init+0x9c>)
 8001876:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <MX_ADC2_Init+0x98>)
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <MX_ADC2_Init+0x98>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <MX_ADC2_Init+0x98>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <MX_ADC2_Init+0x98>)
 800188c:	2201      	movs	r2, #1
 800188e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <MX_ADC2_Init+0x98>)
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <MX_ADC2_Init+0x98>)
 800189a:	2200      	movs	r2, #0
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <MX_ADC2_Init+0x98>)
 80018a0:	4a17      	ldr	r2, [pc, #92]	; (8001900 <MX_ADC2_Init+0xa0>)
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <MX_ADC2_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <MX_ADC2_Init+0x98>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_ADC2_Init+0x98>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_ADC2_Init+0x98>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018be:	480e      	ldr	r0, [pc, #56]	; (80018f8 <MX_ADC2_Init+0x98>)
 80018c0:	f003 fb22 	bl	8004f08 <HAL_ADC_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80018ca:	f001 fc27 	bl	800311c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80018ce:	230c      	movs	r3, #12
 80018d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018d2:	2301      	movs	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018da:	463b      	mov	r3, r7
 80018dc:	4619      	mov	r1, r3
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <MX_ADC2_Init+0x98>)
 80018e0:	f003 fcf4 	bl	80052cc <HAL_ADC_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80018ea:	f001 fc17 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000284 	.word	0x20000284
 80018fc:	40012100 	.word	0x40012100
 8001900:	0f000001 	.word	0x0f000001

08001904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_I2C1_Init+0x50>)
 800190a:	4a13      	ldr	r2, [pc, #76]	; (8001958 <MX_I2C1_Init+0x54>)
 800190c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_I2C1_Init+0x50>)
 8001910:	4a12      	ldr	r2, [pc, #72]	; (800195c <MX_I2C1_Init+0x58>)
 8001912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_I2C1_Init+0x50>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_I2C1_Init+0x50>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_I2C1_Init+0x50>)
 8001922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001926:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <MX_I2C1_Init+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_I2C1_Init+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_I2C1_Init+0x50>)
 8001942:	f004 fa3b 	bl	8005dbc <HAL_I2C_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800194c:	f001 fbe6 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200002cc 	.word	0x200002cc
 8001958:	40005400 	.word	0x40005400
 800195c:	000186a0 	.word	0x000186a0

08001960 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b09a      	sub	sp, #104	; 0x68
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800197e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
 800199c:	615a      	str	r2, [r3, #20]
 800199e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	2220      	movs	r2, #32
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f00c f840 	bl	800da2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ac:	4b4b      	ldr	r3, [pc, #300]	; (8001adc <MX_TIM1_Init+0x17c>)
 80019ae:	4a4c      	ldr	r2, [pc, #304]	; (8001ae0 <MX_TIM1_Init+0x180>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80019b2:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <MX_TIM1_Init+0x17c>)
 80019b4:	220f      	movs	r2, #15
 80019b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b48      	ldr	r3, [pc, #288]	; (8001adc <MX_TIM1_Init+0x17c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <MX_TIM1_Init+0x17c>)
 80019c0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c6:	4b45      	ldr	r3, [pc, #276]	; (8001adc <MX_TIM1_Init+0x17c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019cc:	4b43      	ldr	r3, [pc, #268]	; (8001adc <MX_TIM1_Init+0x17c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d2:	4b42      	ldr	r3, [pc, #264]	; (8001adc <MX_TIM1_Init+0x17c>)
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019d8:	4840      	ldr	r0, [pc, #256]	; (8001adc <MX_TIM1_Init+0x17c>)
 80019da:	f005 fe05 	bl	80075e8 <HAL_TIM_Base_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80019e4:	f001 fb9a 	bl	800311c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ec:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019f2:	4619      	mov	r1, r3
 80019f4:	4839      	ldr	r0, [pc, #228]	; (8001adc <MX_TIM1_Init+0x17c>)
 80019f6:	f006 fd0d 	bl	8008414 <HAL_TIM_ConfigClockSource>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a00:	f001 fb8c 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001a04:	4835      	ldr	r0, [pc, #212]	; (8001adc <MX_TIM1_Init+0x17c>)
 8001a06:	f005 ffc9 	bl	800799c <HAL_TIM_IC_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001a10:	f001 fb84 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a14:	4831      	ldr	r0, [pc, #196]	; (8001adc <MX_TIM1_Init+0x17c>)
 8001a16:	f005 fe9f 	bl	8007758 <HAL_TIM_PWM_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a20:	f001 fb7c 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a30:	4619      	mov	r1, r3
 8001a32:	482a      	ldr	r0, [pc, #168]	; (8001adc <MX_TIM1_Init+0x17c>)
 8001a34:	f007 fa5c 	bl	8008ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8001a3e:	f001 fb6d 	bl	800311c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001a42:	230a      	movs	r3, #10
 8001a44:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a46:	2301      	movs	r3, #1
 8001a48:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a56:	2200      	movs	r2, #0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4820      	ldr	r0, [pc, #128]	; (8001adc <MX_TIM1_Init+0x17c>)
 8001a5c:	f006 fb7c 	bl	8008158 <HAL_TIM_IC_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001a66:	f001 fb59 	bl	800311c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a6a:	2360      	movs	r3, #96	; 0x60
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a86:	220c      	movs	r2, #12
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4814      	ldr	r0, [pc, #80]	; (8001adc <MX_TIM1_Init+0x17c>)
 8001a8c:	f006 fc00 	bl	8008290 <HAL_TIM_PWM_ConfigChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001a96:	f001 fb41 	bl	800311c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	4807      	ldr	r0, [pc, #28]	; (8001adc <MX_TIM1_Init+0x17c>)
 8001abe:	f007 fa93 	bl	8008fe8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001ac8:	f001 fb28 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001acc:	4803      	ldr	r0, [pc, #12]	; (8001adc <MX_TIM1_Init+0x17c>)
 8001ace:	f002 ff63 	bl	8004998 <HAL_TIM_MspPostInit>

}
 8001ad2:	bf00      	nop
 8001ad4:	3768      	adds	r7, #104	; 0x68
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000320 	.word	0x20000320
 8001ae0:	40010000 	.word	0x40010000

08001ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	; 0x30
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	2224      	movs	r2, #36	; 0x24
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f00b ff9a 	bl	800da2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b00:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <MX_TIM2_Init+0xa4>)
 8001b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <MX_TIM2_Init+0xa4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <MX_TIM2_Init+0xa4>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <MX_TIM2_Init+0xa4>)
 8001b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_TIM2_Init+0xa4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <MX_TIM2_Init+0xa4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b30:	2301      	movs	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b38:	230a      	movs	r3, #10
 8001b3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b40:	2301      	movs	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001b48:	230a      	movs	r3, #10
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	4619      	mov	r1, r3
 8001b52:	480d      	ldr	r0, [pc, #52]	; (8001b88 <MX_TIM2_Init+0xa4>)
 8001b54:	f006 f8a4 	bl	8007ca0 <HAL_TIM_Encoder_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b5e:	f001 fadd 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4806      	ldr	r0, [pc, #24]	; (8001b88 <MX_TIM2_Init+0xa4>)
 8001b70:	f007 f9be 	bl	8008ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b7a:	f001 facf 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	3730      	adds	r7, #48	; 0x30
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000368 	.word	0x20000368

08001b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	; 0x30
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	2224      	movs	r2, #36	; 0x24
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f00b ff46 	bl	800da2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <MX_TIM3_Init+0xa0>)
 8001baa:	4a21      	ldr	r2, [pc, #132]	; (8001c30 <MX_TIM3_Init+0xa4>)
 8001bac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bae:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <MX_TIM3_Init+0xa0>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <MX_TIM3_Init+0xa0>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <MX_TIM3_Init+0xa0>)
 8001bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <MX_TIM3_Init+0xa0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <MX_TIM3_Init+0xa0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001bde:	230a      	movs	r3, #10
 8001be0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001be2:	2302      	movs	r3, #2
 8001be4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001be6:	2301      	movs	r3, #1
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001bee:	230a      	movs	r3, #10
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <MX_TIM3_Init+0xa0>)
 8001bfa:	f006 f851 	bl	8007ca0 <HAL_TIM_Encoder_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c04:	f001 fa8a 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	4619      	mov	r1, r3
 8001c14:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_TIM3_Init+0xa0>)
 8001c16:	f007 f96b 	bl	8008ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c20:	f001 fa7c 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	3730      	adds	r7, #48	; 0x30
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	200003b0 	.word	0x200003b0
 8001c30:	40000400 	.word	0x40000400

08001c34 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <MX_TIM6_Init+0x64>)
 8001c44:	4a15      	ldr	r2, [pc, #84]	; (8001c9c <MX_TIM6_Init+0x68>)
 8001c46:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <MX_TIM6_Init+0x64>)
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <MX_TIM6_Init+0x64>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001c54:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <MX_TIM6_Init+0x64>)
 8001c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_TIM6_Init+0x64>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c62:	480d      	ldr	r0, [pc, #52]	; (8001c98 <MX_TIM6_Init+0x64>)
 8001c64:	f005 fcc0 	bl	80075e8 <HAL_TIM_Base_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001c6e:	f001 fa55 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4806      	ldr	r0, [pc, #24]	; (8001c98 <MX_TIM6_Init+0x64>)
 8001c80:	f007 f936 	bl	8008ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c8a:	f001 fa47 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200003f8 	.word	0x200003f8
 8001c9c:	40001000 	.word	0x40001000

08001ca0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b096      	sub	sp, #88	; 0x58
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]
 8001cce:	615a      	str	r2, [r3, #20]
 8001cd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f00b fea7 	bl	800da2c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001cde:	4b43      	ldr	r3, [pc, #268]	; (8001dec <MX_TIM8_Init+0x14c>)
 8001ce0:	4a43      	ldr	r2, [pc, #268]	; (8001df0 <MX_TIM8_Init+0x150>)
 8001ce2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ce4:	4b41      	ldr	r3, [pc, #260]	; (8001dec <MX_TIM8_Init+0x14c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b40      	ldr	r3, [pc, #256]	; (8001dec <MX_TIM8_Init+0x14c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001cf0:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <MX_TIM8_Init+0x14c>)
 8001cf2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001cf6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf8:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <MX_TIM8_Init+0x14c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <MX_TIM8_Init+0x14c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d04:	4b39      	ldr	r3, [pc, #228]	; (8001dec <MX_TIM8_Init+0x14c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d0a:	4838      	ldr	r0, [pc, #224]	; (8001dec <MX_TIM8_Init+0x14c>)
 8001d0c:	f005 fc6c 	bl	80075e8 <HAL_TIM_Base_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001d16:	f001 fa01 	bl	800311c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d24:	4619      	mov	r1, r3
 8001d26:	4831      	ldr	r0, [pc, #196]	; (8001dec <MX_TIM8_Init+0x14c>)
 8001d28:	f006 fb74 	bl	8008414 <HAL_TIM_ConfigClockSource>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001d32:	f001 f9f3 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d36:	482d      	ldr	r0, [pc, #180]	; (8001dec <MX_TIM8_Init+0x14c>)
 8001d38:	f005 fd0e 	bl	8007758 <HAL_TIM_PWM_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001d42:	f001 f9eb 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d52:	4619      	mov	r1, r3
 8001d54:	4825      	ldr	r0, [pc, #148]	; (8001dec <MX_TIM8_Init+0x14c>)
 8001d56:	f007 f8cb 	bl	8008ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001d60:	f001 f9dc 	bl	800311c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d64:	2360      	movs	r3, #96	; 0x60
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d70:	2300      	movs	r3, #0
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d84:	2200      	movs	r2, #0
 8001d86:	4619      	mov	r1, r3
 8001d88:	4818      	ldr	r0, [pc, #96]	; (8001dec <MX_TIM8_Init+0x14c>)
 8001d8a:	f006 fa81 	bl	8008290 <HAL_TIM_PWM_ConfigChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001d94:	f001 f9c2 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4812      	ldr	r0, [pc, #72]	; (8001dec <MX_TIM8_Init+0x14c>)
 8001da2:	f006 fa75 	bl	8008290 <HAL_TIM_PWM_ConfigChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001dac:	f001 f9b6 	bl	800311c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dc8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4806      	ldr	r0, [pc, #24]	; (8001dec <MX_TIM8_Init+0x14c>)
 8001dd4:	f007 f908 	bl	8008fe8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001dde:	f001 f99d 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	3758      	adds	r7, #88	; 0x58
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000440 	.word	0x20000440
 8001df0:	40010400 	.word	0x40010400

08001df4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_USART1_UART_Init+0x4c>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <MX_USART1_UART_Init+0x50>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <MX_USART1_UART_Init+0x4c>)
 8001e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <MX_USART1_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_USART1_UART_Init+0x4c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <MX_USART1_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_USART1_UART_Init+0x4c>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <MX_USART1_UART_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_USART1_UART_Init+0x4c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_USART1_UART_Init+0x4c>)
 8001e2c:	f007 f942 	bl	80090b4 <HAL_UART_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e36:	f001 f971 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000488 	.word	0x20000488
 8001e44:	40011000 	.word	0x40011000

08001e48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_USART3_UART_Init+0x4c>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <MX_USART3_UART_Init+0x50>)
 8001e50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <MX_USART3_UART_Init+0x4c>)
 8001e54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_USART3_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_USART3_UART_Init+0x4c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <MX_USART3_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_USART3_UART_Init+0x4c>)
 8001e6e:	220c      	movs	r2, #12
 8001e70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <MX_USART3_UART_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_USART3_UART_Init+0x4c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_USART3_UART_Init+0x4c>)
 8001e80:	f007 f918 	bl	80090b4 <HAL_UART_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e8a:	f001 f947 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200004cc 	.word	0x200004cc
 8001e98:	40004800 	.word	0x40004800

08001e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <MX_GPIO_Init+0x104>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a39      	ldr	r2, [pc, #228]	; (8001fa0 <MX_GPIO_Init+0x104>)
 8001ebc:	f043 0310 	orr.w	r3, r3, #16
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b37      	ldr	r3, [pc, #220]	; (8001fa0 <MX_GPIO_Init+0x104>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <MX_GPIO_Init+0x104>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a32      	ldr	r2, [pc, #200]	; (8001fa0 <MX_GPIO_Init+0x104>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <MX_GPIO_Init+0x104>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <MX_GPIO_Init+0x104>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <MX_GPIO_Init+0x104>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <MX_GPIO_Init+0x104>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <MX_GPIO_Init+0x104>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <MX_GPIO_Init+0x104>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <MX_GPIO_Init+0x104>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001f28:	481e      	ldr	r0, [pc, #120]	; (8001fa4 <MX_GPIO_Init+0x108>)
 8001f2a:	f003 ff2d 	bl	8005d88 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	213c      	movs	r1, #60	; 0x3c
 8001f32:	481d      	ldr	r0, [pc, #116]	; (8001fa8 <MX_GPIO_Init+0x10c>)
 8001f34:	f003 ff28 	bl	8005d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2110      	movs	r1, #16
 8001f3c:	481b      	ldr	r0, [pc, #108]	; (8001fac <MX_GPIO_Init+0x110>)
 8001f3e:	f003 ff23 	bl	8005d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 PE7 PE8
                           LED3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001f42:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001f46:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4812      	ldr	r0, [pc, #72]	; (8001fa4 <MX_GPIO_Init+0x108>)
 8001f5c:	f003 fd78 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001f60:	233c      	movs	r3, #60	; 0x3c
 8001f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f64:	2301      	movs	r3, #1
 8001f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <MX_GPIO_Init+0x10c>)
 8001f78:	f003 fd6a 	bl	8005a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 8001f7c:	2310      	movs	r3, #16
 8001f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f80:	2301      	movs	r3, #1
 8001f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4619      	mov	r1, r3
 8001f92:	4806      	ldr	r0, [pc, #24]	; (8001fac <MX_GPIO_Init+0x110>)
 8001f94:	f003 fd5c 	bl	8005a50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020400 	.word	0x40020400

08001fb0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {		// Ultrasound Echo
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a7d      	ldr	r2, [pc, #500]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	f040 80d8 	bne.w	8002172 <HAL_TIM_IC_CaptureCallback+0x1c2>
		if (echo_upEdge > 20000) {
 8001fc2:	4b7c      	ldr	r3, [pc, #496]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x204>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d908      	bls.n	8001fe0 <HAL_TIM_IC_CaptureCallback+0x30>
			echo_upEdge = (uint16_t)HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001fce:	2100      	movs	r1, #0
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f006 fae7 	bl	80085a4 <HAL_TIM_ReadCapturedValue>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x204>)
 8001fdc:	801a      	strh	r2, [r3, #0]
 8001fde:	e0c8      	b.n	8002172 <HAL_TIM_IC_CaptureCallback+0x1c2>
		}
		else {
			echo_downEdge = (uint16_t)HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f006 fade 	bl	80085a4 <HAL_TIM_ReadCapturedValue>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b72      	ldr	r3, [pc, #456]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x208>)
 8001fee:	801a      	strh	r2, [r3, #0]
			if (echo_upEdge > echo_downEdge) {
 8001ff0:	4b70      	ldr	r3, [pc, #448]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x204>)
 8001ff2:	881a      	ldrh	r2, [r3, #0]
 8001ff4:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x208>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d90a      	bls.n	8002012 <HAL_TIM_IC_CaptureCallback+0x62>
				echo = (echo_downEdge + 20000) - echo_upEdge;
 8001ffc:	4b6e      	ldr	r3, [pc, #440]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x208>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8002004:	3320      	adds	r3, #32
 8002006:	4a6b      	ldr	r2, [pc, #428]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x204>)
 8002008:	8812      	ldrh	r2, [r2, #0]
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	4a6b      	ldr	r2, [pc, #428]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x20c>)
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	e007      	b.n	8002022 <HAL_TIM_IC_CaptureCallback+0x72>
			}
			else {
				echo = echo_downEdge - echo_upEdge;
 8002012:	4b69      	ldr	r3, [pc, #420]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x204>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	4a67      	ldr	r2, [pc, #412]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002020:	6013      	str	r3, [r2, #0]
			}
			echo_upEdge = 65535;
 8002022:	4b64      	ldr	r3, [pc, #400]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x204>)
 8002024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002028:	801a      	strh	r2, [r3, #0]
			echo_downEdge = 65535;
 800202a:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x208>)
 800202c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002030:	801a      	strh	r2, [r3, #0]
			sprintf(oledbuf, "Dist: %5.1f", echo * 0.01715f);
			OLED_ShowString(10, 15, &oledbuf[0]);
			OLED_Refresh_Gram();*/

			// Calculate distance
			if (reqDist > 0) {
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	dd73      	ble.n	8002122 <HAL_TIM_IC_CaptureCallback+0x172>
				if (((abs(lastEcho1 - echo) > 300) || (abs(lastEcho2 - echo) > 300)) || (abs(lastEcho1 - lastEcho2) > 300)) {	// System not stabilised yet, wait
 800203a:	4b62      	ldr	r3, [pc, #392]	; (80021c4 <HAL_TIM_IC_CaptureCallback+0x214>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b5f      	ldr	r3, [pc, #380]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	bfb8      	it	lt
 8002048:	425b      	neglt	r3, r3
 800204a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800204e:	dc15      	bgt.n	800207c <HAL_TIM_IC_CaptureCallback+0xcc>
 8002050:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b59      	ldr	r3, [pc, #356]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	bfb8      	it	lt
 800205e:	425b      	neglt	r3, r3
 8002060:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002064:	dc0a      	bgt.n	800207c <HAL_TIM_IC_CaptureCallback+0xcc>
 8002066:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b57      	ldr	r3, [pc, #348]	; (80021c8 <HAL_TIM_IC_CaptureCallback+0x218>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	bfb8      	it	lt
 8002074:	425b      	neglt	r3, r3
 8002076:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800207a:	dd08      	ble.n	800208e <HAL_TIM_IC_CaptureCallback+0xde>
					lastEcho2 = lastEcho1;
 800207c:	4b51      	ldr	r3, [pc, #324]	; (80021c4 <HAL_TIM_IC_CaptureCallback+0x214>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a51      	ldr	r2, [pc, #324]	; (80021c8 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002082:	6013      	str	r3, [r2, #0]
					lastEcho1 = echo;
 8002084:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a4e      	ldr	r2, [pc, #312]	; (80021c4 <HAL_TIM_IC_CaptureCallback+0x214>)
 800208a:	6013      	str	r3, [r2, #0]
					return;
 800208c:	e088      	b.n	80021a0 <HAL_TIM_IC_CaptureCallback+0x1f0>
				}
				if (us_alert < 5) {
 800208e:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b04      	cmp	r3, #4
 8002094:	d80d      	bhi.n	80020b2 <HAL_TIM_IC_CaptureCallback+0x102>
					echoToObstacle += echo;
 8002096:	4b4e      	ldr	r3, [pc, #312]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b48      	ldr	r3, [pc, #288]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x20c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0x220>)
 80020a2:	6013      	str	r3, [r2, #0]
					us_alert++;
 80020a4:	4b49      	ldr	r3, [pc, #292]	; (80021cc <HAL_TIM_IC_CaptureCallback+0x21c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_TIM_IC_CaptureCallback+0x21c>)
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e05f      	b.n	8002172 <HAL_TIM_IC_CaptureCallback+0x1c2>
				}
				else {
					echoToObstacle /= 5;
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0x220>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a47      	ldr	r2, [pc, #284]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0x224>)
 80020b8:	fb82 1203 	smull	r1, r2, r2, r3
 80020bc:	1052      	asrs	r2, r2, #1
 80020be:	17db      	asrs	r3, r3, #31
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	4a43      	ldr	r2, [pc, #268]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0x220>)
 80020c4:	6013      	str	r3, [r2, #0]
					distToObstacle = (double)echoToObstacle * 0.01715f;
 80020c6:	4b42      	ldr	r3, [pc, #264]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0x220>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fa2a 	bl	8000524 <__aeabi_i2d>
 80020d0:	a335      	add	r3, pc, #212	; (adr r3, 80021a8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	f7fe fa8f 	bl	80005f8 <__aeabi_dmul>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	493e      	ldr	r1, [pc, #248]	; (80021d8 <HAL_TIM_IC_CaptureCallback+0x228>)
 80020e0:	e9c1 2300 	strd	r2, r3, [r1]
					lastEcho1 = 65535;
 80020e4:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <HAL_TIM_IC_CaptureCallback+0x214>)
 80020e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ea:	601a      	str	r2, [r3, #0]
					lastEcho2 = 65535;
 80020ec:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <HAL_TIM_IC_CaptureCallback+0x218>)
 80020ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f2:	601a      	str	r2, [r3, #0]
					if (distToObstacle < distToObstacle_min) {
 80020f4:	4b38      	ldr	r3, [pc, #224]	; (80021d8 <HAL_TIM_IC_CaptureCallback+0x228>)
 80020f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020fa:	4b38      	ldr	r3, [pc, #224]	; (80021dc <HAL_TIM_IC_CaptureCallback+0x22c>)
 80020fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002100:	f7fe fcec 	bl	8000adc <__aeabi_dcmplt>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <HAL_TIM_IC_CaptureCallback+0x164>
						reqDist = -1;
 800210a:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x210>)
 800210c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e002      	b.n	800211a <HAL_TIM_IC_CaptureCallback+0x16a>
					}
					else {
						reqDist = 0;
 8002114:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
					}
					distReady = 1;
 800211a:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_TIM_IC_CaptureCallback+0x230>)
 800211c:	2201      	movs	r2, #1
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	e027      	b.n	8002172 <HAL_TIM_IC_CaptureCallback+0x1c2>
				}
			}
			else if (reqDist == 0) {
 8002122:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d123      	bne.n	8002172 <HAL_TIM_IC_CaptureCallback+0x1c2>
				if (!cpltErr.finished) {	// Car is running, needs passive measurement
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_TIM_IC_CaptureCallback+0x234>)
 800212c:	799b      	ldrb	r3, [r3, #6]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d11f      	bne.n	8002172 <HAL_TIM_IC_CaptureCallback+0x1c2>
					if (echo * 0.01715f <= distToObstacle_min) {
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800213e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80021e8 <HAL_TIM_IC_CaptureCallback+0x238>
 8002142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002146:	ee17 0a90 	vmov	r0, s15
 800214a:	f7fe f9fd 	bl	8000548 <__aeabi_f2d>
 800214e:	4b23      	ldr	r3, [pc, #140]	; (80021dc <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002154:	f7fe fccc 	bl	8000af0 <__aeabi_dcmple>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_TIM_IC_CaptureCallback+0x1c2>
						stopPID();
 800215e:	f001 fbf5 	bl	800394c <stopPID>
						mtrA.suspend = SUS_STOP;
 8002162:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_TIM_IC_CaptureCallback+0x23c>)
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
						mtrB.suspend = SUS_STOP;
 8002168:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_TIM_IC_CaptureCallback+0x240>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
						// Activate active measurement to confirm
						usEnableActiveMeasure();
 800216e:	f000 f8b1 	bl	80022d4 <usEnableActiveMeasure>
					}
				}
			}
		}
	}
	if (htim == &htim2) {		// Motor A's interrupt
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d108      	bne.n	800218c <HAL_TIM_IC_CaptureCallback+0x1dc>
		mtrAPID.count = -(int16_t)__HAL_TIM_GET_COUNTER(htim);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	b29b      	uxth	r3, r3
 8002182:	425b      	negs	r3, r3
 8002184:	b29b      	uxth	r3, r3
 8002186:	b21a      	sxth	r2, r3
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_TIM_IC_CaptureCallback+0x248>)
 800218a:	801a      	strh	r2, [r3, #0]
	}
	if (htim == &htim3) {		// Motor B's interrupt
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d105      	bne.n	80021a0 <HAL_TIM_IC_CaptureCallback+0x1f0>
		mtrBPID.count = (int16_t)__HAL_TIM_GET_COUNTER(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	b21a      	sxth	r2, r3
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HAL_TIM_IC_CaptureCallback+0x250>)
 800219e:	801a      	strh	r2, [r3, #0]
	}
}
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	00000000 	.word	0x00000000
 80021ac:	3f918fc5 	.word	0x3f918fc5
 80021b0:	20000320 	.word	0x20000320
 80021b4:	20000004 	.word	0x20000004
 80021b8:	20000006 	.word	0x20000006
 80021bc:	20000560 	.word	0x20000560
 80021c0:	20000574 	.word	0x20000574
 80021c4:	20000564 	.word	0x20000564
 80021c8:	20000568 	.word	0x20000568
 80021cc:	2000056c 	.word	0x2000056c
 80021d0:	20000570 	.word	0x20000570
 80021d4:	66666667 	.word	0x66666667
 80021d8:	20000008 	.word	0x20000008
 80021dc:	20000018 	.word	0x20000018
 80021e0:	20000578 	.word	0x20000578
 80021e4:	20000580 	.word	0x20000580
 80021e8:	3c8c7e28 	.word	0x3c8c7e28
 80021ec:	20000588 	.word	0x20000588
 80021f0:	20000590 	.word	0x20000590
 80021f4:	20000368 	.word	0x20000368
 80021f8:	20000598 	.word	0x20000598
 80021fc:	200003b0 	.word	0x200003b0
 8002200:	200005b8 	.word	0x200005b8

08002204 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af02      	add	r7, sp, #8
 800220a:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	//MX_USART3_UART_Init();
	turnDir = uart_receive_cam((uint8_t*) buf);
 800220c:	4820      	ldr	r0, [pc, #128]	; (8002290 <HAL_UART_RxCpltCallback+0x8c>)
 800220e:	f7fe feb9 	bl	8000f84 <uart_receive_cam>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <HAL_UART_RxCpltCallback+0x90>)
 8002218:	701a      	strb	r2, [r3, #0]
	if (turnDir == 0x80) {
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <HAL_UART_RxCpltCallback+0x90>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b80      	cmp	r3, #128	; 0x80
 8002220:	d105      	bne.n	800222e <HAL_UART_RxCpltCallback+0x2a>
		start = 1;
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_UART_RxCpltCallback+0x94>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
		turnDir = 0xFF;
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_UART_RxCpltCallback+0x90>)
 800222a:	22ff      	movs	r2, #255	; 0xff
 800222c:	701a      	strb	r2, [r3, #0]
	}
	OLED_Clear();
 800222e:	f001 ff33 	bl	8004098 <OLED_Clear>
	sprintf(oledbuf, "%2x %2x %2x %2x", buf[0], buf[1], buf[2], buf[3]);
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <HAL_UART_RxCpltCallback+0x8c>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_UART_RxCpltCallback+0x8c>)
 800223a:	785b      	ldrb	r3, [r3, #1]
 800223c:	4618      	mov	r0, r3
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <HAL_UART_RxCpltCallback+0x8c>)
 8002240:	789b      	ldrb	r3, [r3, #2]
 8002242:	461a      	mov	r2, r3
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_UART_RxCpltCallback+0x8c>)
 8002246:	78db      	ldrb	r3, [r3, #3]
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	9200      	str	r2, [sp, #0]
 800224c:	4603      	mov	r3, r0
 800224e:	460a      	mov	r2, r1
 8002250:	4912      	ldr	r1, [pc, #72]	; (800229c <HAL_UART_RxCpltCallback+0x98>)
 8002252:	4813      	ldr	r0, [pc, #76]	; (80022a0 <HAL_UART_RxCpltCallback+0x9c>)
 8002254:	f00b fb08 	bl	800d868 <siprintf>
	OLED_ShowString(10, 15, &oledbuf[0]);
 8002258:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_UART_RxCpltCallback+0x9c>)
 800225a:	210f      	movs	r1, #15
 800225c:	200a      	movs	r0, #10
 800225e:	f002 f80d 	bl	800427c <OLED_ShowString>
	OLED_Refresh_Gram();
 8002262:	f001 fe97 	bl	8003f94 <OLED_Refresh_Gram>
	//huart->RxState = HAL_UART_STATE_READY;
	buf[0] = 0;
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_UART_RxCpltCallback+0x8c>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
	buf[1] = 0;
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_UART_RxCpltCallback+0x8c>)
 800226e:	2200      	movs	r2, #0
 8002270:	705a      	strb	r2, [r3, #1]
	buf[2] = 0;
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <HAL_UART_RxCpltCallback+0x8c>)
 8002274:	2200      	movs	r2, #0
 8002276:	709a      	strb	r2, [r3, #2]
	buf[3] = 0;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_UART_RxCpltCallback+0x8c>)
 800227a:	2200      	movs	r2, #0
 800227c:	70da      	strb	r2, [r3, #3]

	HAL_UART_Receive_IT(huart, (uint8_t*) buf, UART_PACKET_SIZE);
 800227e:	2204      	movs	r2, #4
 8002280:	4903      	ldr	r1, [pc, #12]	; (8002290 <HAL_UART_RxCpltCallback+0x8c>)
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f006 fff5 	bl	8009272 <HAL_UART_Receive_IT>
		sprintf(oledbuf, "Fin: %d", cpltErr.finished);
		OLED_ShowString(10, 45, &oledbuf[0]);
		OLED_Refresh_Gram();
	}
	*/
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	2000054c 	.word	0x2000054c
 8002294:	20000010 	.word	0x20000010
 8002298:	20000524 	.word	0x20000524
 800229c:	0800fda4 	.word	0x0800fda4
 80022a0:	20000538 	.word	0x20000538

080022a4 <Delay_us>:

void Delay_us(uint16_t us) {
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <Delay_us+0x2c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2200      	movs	r2, #0
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < us);
 80022b6:	bf00      	nop
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <Delay_us+0x2c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d3f9      	bcc.n	80022b8 <Delay_us+0x14>
	return;
 80022c4:	bf00      	nop
}
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	200003f8 	.word	0x200003f8

080022d4 <usEnableActiveMeasure>:

void usEnableActiveMeasure() {
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
	distReady = 0;
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <usEnableActiveMeasure+0x34>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
	echoToObstacle = 0;
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <usEnableActiveMeasure+0x38>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
	distToObstacle = 0;
 80022e4:	490a      	ldr	r1, [pc, #40]	; (8002310 <usEnableActiveMeasure+0x3c>)
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9c1 2300 	strd	r2, r3, [r1]
	us_alert = 0;
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <usEnableActiveMeasure+0x40>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
	reqDist = 1;
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <usEnableActiveMeasure+0x44>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	20000578 	.word	0x20000578
 800230c:	20000570 	.word	0x20000570
 8002310:	20000008 	.word	0x20000008
 8002314:	2000056c 	.word	0x2000056c
 8002318:	20000574 	.word	0x20000574

0800231c <getIRReading>:

int getIRReading(uint8_t ir) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
	int retval = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 5; i++) {
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	e02b      	b.n	8002388 <getIRReading+0x6c>
		if (ir == LEFT) {
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d111      	bne.n	800235a <getIRReading+0x3e>
			HAL_ADC_Start(&hadc2);
 8002336:	481b      	ldr	r0, [pc, #108]	; (80023a4 <getIRReading+0x88>)
 8002338:	f002 fe2a 	bl	8004f90 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc2, 10);
 800233c:	210a      	movs	r1, #10
 800233e:	4819      	ldr	r0, [pc, #100]	; (80023a4 <getIRReading+0x88>)
 8002340:	f002 ff2b 	bl	800519a <HAL_ADC_PollForConversion>
			retval += HAL_ADC_GetValue(&hadc2);
 8002344:	4817      	ldr	r0, [pc, #92]	; (80023a4 <getIRReading+0x88>)
 8002346:	f002 ffb3 	bl	80052b0 <HAL_ADC_GetValue>
 800234a:	4602      	mov	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
			HAL_ADC_Stop(&hadc2);
 8002352:	4814      	ldr	r0, [pc, #80]	; (80023a4 <getIRReading+0x88>)
 8002354:	f002 feee 	bl	8005134 <HAL_ADC_Stop>
 8002358:	e013      	b.n	8002382 <getIRReading+0x66>
		}
		else if (ir == RIGHT) {
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d110      	bne.n	8002382 <getIRReading+0x66>
			HAL_ADC_Start(&hadc1);
 8002360:	4811      	ldr	r0, [pc, #68]	; (80023a8 <getIRReading+0x8c>)
 8002362:	f002 fe15 	bl	8004f90 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 10);
 8002366:	210a      	movs	r1, #10
 8002368:	480f      	ldr	r0, [pc, #60]	; (80023a8 <getIRReading+0x8c>)
 800236a:	f002 ff16 	bl	800519a <HAL_ADC_PollForConversion>
			retval += HAL_ADC_GetValue(&hadc1);
 800236e:	480e      	ldr	r0, [pc, #56]	; (80023a8 <getIRReading+0x8c>)
 8002370:	f002 ff9e 	bl	80052b0 <HAL_ADC_GetValue>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4413      	add	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
			HAL_ADC_Stop(&hadc1);
 800237c:	480a      	ldr	r0, [pc, #40]	; (80023a8 <getIRReading+0x8c>)
 800237e:	f002 fed9 	bl	8005134 <HAL_ADC_Stop>
	for (int i = 0; i < 5; i++) {
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3301      	adds	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b04      	cmp	r3, #4
 800238c:	ddd0      	ble.n	8002330 <getIRReading+0x14>
		}
	}
	return retval/5;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4a06      	ldr	r2, [pc, #24]	; (80023ac <getIRReading+0x90>)
 8002392:	fb82 1203 	smull	r1, r2, r2, r3
 8002396:	1052      	asrs	r2, r2, #1
 8002398:	17db      	asrs	r3, r3, #31
 800239a:	1ad3      	subs	r3, r2, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000284 	.word	0x20000284
 80023a8:	2000023c 	.word	0x2000023c
 80023ac:	66666667 	.word	0x66666667

080023b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 80023b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80023bc:	f008 f802 	bl	800a3c4 <osDelay>
 80023c0:	e7fa      	b.n	80023b8 <StartDefaultTask+0x8>
 80023c2:	0000      	movs	r0, r0
 80023c4:	0000      	movs	r0, r0
	...

080023c8 <StartMotorServo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorServo */
void StartMotorServo(void *argument)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	; 0x30
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorServo */
	uint8_t carTurnOk = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t selectedIr = 0xFF;
 80023d6:	23ff      	movs	r3, #255	; 0xff
 80023d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	double distPreRun = 0;
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double distPostRun = 0;
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  /* Infinite loop */
	//start = 1;
  for(;;)
  {
	  // Step 0: Check for start condition
	  if (!start) continue;
 80023f4:	4b9c      	ldr	r3, [pc, #624]	; (8002668 <StartMotorServo+0x2a0>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8633 	beq.w	8003064 <StartMotorServo+0xc9c>

	  // Step 1: Move towards 1st obstacle, safe distance = 30 - 35 cm from obstacle
	  distToObstacle_min = 25;
 80023fe:	499b      	ldr	r1, [pc, #620]	; (800266c <StartMotorServo+0x2a4>)
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	4b9a      	ldr	r3, [pc, #616]	; (8002670 <StartMotorServo+0x2a8>)
 8002406:	e9c1 2300 	strd	r2, r3, [r1]
	  do {
		  // Request us distance
		  usEnableActiveMeasure();
 800240a:	f7ff ff63 	bl	80022d4 <usEnableActiveMeasure>
		  while (!distReady) osDelay(10);
 800240e:	e002      	b.n	8002416 <StartMotorServo+0x4e>
 8002410:	200a      	movs	r0, #10
 8002412:	f007 ffd7 	bl	800a3c4 <osDelay>
 8002416:	4b97      	ldr	r3, [pc, #604]	; (8002674 <StartMotorServo+0x2ac>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f8      	beq.n	8002410 <StartMotorServo+0x48>
		  if ((distToObstacle - distToObstacle_min > -1) && (distToObstacle - distToObstacle_min < 1)) {
 800241e:	4b96      	ldr	r3, [pc, #600]	; (8002678 <StartMotorServo+0x2b0>)
 8002420:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002424:	4b91      	ldr	r3, [pc, #580]	; (800266c <StartMotorServo+0x2a4>)
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	f7fd ff2d 	bl	8000288 <__aeabi_dsub>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	4b90      	ldr	r3, [pc, #576]	; (800267c <StartMotorServo+0x2b4>)
 800243c:	f7fe fb6c 	bl	8000b18 <__aeabi_dcmpgt>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d014      	beq.n	8002470 <StartMotorServo+0xa8>
 8002446:	4b8c      	ldr	r3, [pc, #560]	; (8002678 <StartMotorServo+0x2b0>)
 8002448:	e9d3 0100 	ldrd	r0, r1, [r3]
 800244c:	4b87      	ldr	r3, [pc, #540]	; (800266c <StartMotorServo+0x2a4>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	f7fd ff19 	bl	8000288 <__aeabi_dsub>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	4b87      	ldr	r3, [pc, #540]	; (8002680 <StartMotorServo+0x2b8>)
 8002464:	f7fe fb3a 	bl	8000adc <__aeabi_dcmplt>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	f040 8099 	bne.w	80025a2 <StartMotorServo+0x1da>
			  break;
		  }
		  cpltErr.finished = 0;
 8002470:	4b84      	ldr	r3, [pc, #528]	; (8002684 <StartMotorServo+0x2bc>)
 8002472:	2200      	movs	r2, #0
 8002474:	719a      	strb	r2, [r3, #6]
		  pos_y += mtr_mov_cm(distToObstacle - distToObstacle_min);
 8002476:	4b80      	ldr	r3, [pc, #512]	; (8002678 <StartMotorServo+0x2b0>)
 8002478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800247c:	4b7b      	ldr	r3, [pc, #492]	; (800266c <StartMotorServo+0x2a4>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	f7fd ff01 	bl	8000288 <__aeabi_dsub>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	ec43 2b17 	vmov	d7, r2, r3
 800248e:	eeb0 0a47 	vmov.f32	s0, s14
 8002492:	eef0 0a67 	vmov.f32	s1, s15
 8002496:	f001 f95b 	bl	8003750 <mtr_mov_cm>
 800249a:	ec51 0b10 	vmov	r0, r1, d0
 800249e:	4b7a      	ldr	r3, [pc, #488]	; (8002688 <StartMotorServo+0x2c0>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fd fef2 	bl	800028c <__adddf3>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4976      	ldr	r1, [pc, #472]	; (8002688 <StartMotorServo+0x2c0>)
 80024ae:	e9c1 2300 	strd	r2, r3, [r1]
		  cpltErr.finished = 1;
 80024b2:	4b74      	ldr	r3, [pc, #464]	; (8002684 <StartMotorServo+0x2bc>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	719a      	strb	r2, [r3, #6]
		  while ((mtrA.suspend) || (mtrB.suspend)) {	// Operation is interrupted by us
 80024b8:	e034      	b.n	8002524 <StartMotorServo+0x15c>
			  while (!distReady) osDelay(10);
 80024ba:	200a      	movs	r0, #10
 80024bc:	f007 ff82 	bl	800a3c4 <osDelay>
 80024c0:	4b6c      	ldr	r3, [pc, #432]	; (8002674 <StartMotorServo+0x2ac>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f8      	beq.n	80024ba <StartMotorServo+0xf2>
			  reqDist = -1;
 80024c8:	4b70      	ldr	r3, [pc, #448]	; (800268c <StartMotorServo+0x2c4>)
 80024ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024ce:	601a      	str	r2, [r3, #0]
			  mtrA.suspend = SUS_OFF;
 80024d0:	4b6f      	ldr	r3, [pc, #444]	; (8002690 <StartMotorServo+0x2c8>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
			  mtrB.suspend = SUS_OFF;
 80024d6:	4b6f      	ldr	r3, [pc, #444]	; (8002694 <StartMotorServo+0x2cc>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
			  cpltErr.finished = 0;
 80024dc:	4b69      	ldr	r3, [pc, #420]	; (8002684 <StartMotorServo+0x2bc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	719a      	strb	r2, [r3, #6]
			  pos_y += mtr_mov_cm(distToObstacle - distToObstacle_min);
 80024e2:	4b65      	ldr	r3, [pc, #404]	; (8002678 <StartMotorServo+0x2b0>)
 80024e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e8:	4b60      	ldr	r3, [pc, #384]	; (800266c <StartMotorServo+0x2a4>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	f7fd fecb 	bl	8000288 <__aeabi_dsub>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	ec43 2b17 	vmov	d7, r2, r3
 80024fa:	eeb0 0a47 	vmov.f32	s0, s14
 80024fe:	eef0 0a67 	vmov.f32	s1, s15
 8002502:	f001 f925 	bl	8003750 <mtr_mov_cm>
 8002506:	ec51 0b10 	vmov	r0, r1, d0
 800250a:	4b5f      	ldr	r3, [pc, #380]	; (8002688 <StartMotorServo+0x2c0>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f7fd febc 	bl	800028c <__adddf3>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	495b      	ldr	r1, [pc, #364]	; (8002688 <StartMotorServo+0x2c0>)
 800251a:	e9c1 2300 	strd	r2, r3, [r1]
			  cpltErr.finished = 1;
 800251e:	4b59      	ldr	r3, [pc, #356]	; (8002684 <StartMotorServo+0x2bc>)
 8002520:	2201      	movs	r2, #1
 8002522:	719a      	strb	r2, [r3, #6]
		  while ((mtrA.suspend) || (mtrB.suspend)) {	// Operation is interrupted by us
 8002524:	4b5a      	ldr	r3, [pc, #360]	; (8002690 <StartMotorServo+0x2c8>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1c9      	bne.n	80024c0 <StartMotorServo+0xf8>
 800252c:	4b59      	ldr	r3, [pc, #356]	; (8002694 <StartMotorServo+0x2cc>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1c5      	bne.n	80024c0 <StartMotorServo+0xf8>
		  }
		  usEnableActiveMeasure();
 8002534:	f7ff fece 	bl	80022d4 <usEnableActiveMeasure>
		  while (!distReady) osDelay(10);
 8002538:	e002      	b.n	8002540 <StartMotorServo+0x178>
 800253a:	200a      	movs	r0, #10
 800253c:	f007 ff42 	bl	800a3c4 <osDelay>
 8002540:	4b4c      	ldr	r3, [pc, #304]	; (8002674 <StartMotorServo+0x2ac>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f8      	beq.n	800253a <StartMotorServo+0x172>
		  if (distToObstacle > 50) break;
 8002548:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <StartMotorServo+0x2b0>)
 800254a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	4b51      	ldr	r3, [pc, #324]	; (8002698 <StartMotorServo+0x2d0>)
 8002554:	f7fe fae0 	bl	8000b18 <__aeabi_dcmpgt>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d123      	bne.n	80025a6 <StartMotorServo+0x1de>
	  } while((distToObstacle < distToObstacle_min) || (distToObstacle > distToObstacle_min + 3));
 800255e:	4b46      	ldr	r3, [pc, #280]	; (8002678 <StartMotorServo+0x2b0>)
 8002560:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002564:	4b41      	ldr	r3, [pc, #260]	; (800266c <StartMotorServo+0x2a4>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	f7fe fab7 	bl	8000adc <__aeabi_dcmplt>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	f47f af4a 	bne.w	800240a <StartMotorServo+0x42>
 8002576:	4b3d      	ldr	r3, [pc, #244]	; (800266c <StartMotorServo+0x2a4>)
 8002578:	e9d3 0100 	ldrd	r0, r1, [r3]
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	4b46      	ldr	r3, [pc, #280]	; (800269c <StartMotorServo+0x2d4>)
 8002582:	f7fd fe83 	bl	800028c <__adddf3>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	4b3a      	ldr	r3, [pc, #232]	; (8002678 <StartMotorServo+0x2b0>)
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	f7fe faa2 	bl	8000adc <__aeabi_dcmplt>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	f47f af35 	bne.w	800240a <StartMotorServo+0x42>
 80025a0:	e002      	b.n	80025a8 <StartMotorServo+0x1e0>
			  break;
 80025a2:	bf00      	nop
 80025a4:	e000      	b.n	80025a8 <StartMotorServo+0x1e0>
		  if (distToObstacle > 50) break;
 80025a6:	bf00      	nop

	  // Step 2: Request camera and wait for result
	  uart_send_cam(1);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7fe fcc1 	bl	8000f30 <uart_send_cam>
	  //turnDir = LEFT;		// Testing only
	  while (turnDir == 0xFF);
 80025ae:	bf00      	nop
 80025b0:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <StartMotorServo+0x2d8>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2bff      	cmp	r3, #255	; 0xff
 80025b6:	d0fb      	beq.n	80025b0 <StartMotorServo+0x1e8>

	  // Step 3: Turn past 1st obstacle (10x10)
	  reqDist = -1;
 80025b8:	4b34      	ldr	r3, [pc, #208]	; (800268c <StartMotorServo+0x2c4>)
 80025ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025be:	601a      	str	r2, [r3, #0]
	  if (turnDir == LEFT) {
 80025c0:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <StartMotorServo+0x2d8>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d120      	bne.n	800260a <StartMotorServo+0x242>
		  cpltErr.finished = 0;
 80025c8:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <StartMotorServo+0x2bc>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	719a      	strb	r2, [r3, #6]
		  carTurn(1, 50);
 80025ce:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80026a4 <StartMotorServo+0x2dc>
 80025d2:	2001      	movs	r0, #1
 80025d4:	f001 fb6a 	bl	8003cac <carTurn>
		  carTurn(1, 250);
 80025d8:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80026a8 <StartMotorServo+0x2e0>
 80025dc:	2001      	movs	r0, #1
 80025de:	f001 fb65 	bl	8003cac <carTurn>
		  mtr_mov_cm(-8);
 80025e2:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8002658 <StartMotorServo+0x290>
 80025e6:	f001 f8b3 	bl	8003750 <mtr_mov_cm>
		  carTurn(1, 360 - orientation);
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <StartMotorServo+0x2e4>)
 80025ec:	edd3 7a00 	vldr	s15, [r3]
 80025f0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80026b0 <StartMotorServo+0x2e8>
 80025f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f8:	eeb0 0a67 	vmov.f32	s0, s15
 80025fc:	2001      	movs	r0, #1
 80025fe:	f001 fb55 	bl	8003cac <carTurn>
		  cpltErr.finished = 1;
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <StartMotorServo+0x2bc>)
 8002604:	2201      	movs	r2, #1
 8002606:	719a      	strb	r2, [r3, #6]
 8002608:	e023      	b.n	8002652 <StartMotorServo+0x28a>
	  }
	  else if (turnDir == RIGHT) {
 800260a:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <StartMotorServo+0x2d8>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d11f      	bne.n	8002652 <StartMotorServo+0x28a>
		  cpltErr.finished = 0;
 8002612:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <StartMotorServo+0x2bc>)
 8002614:	2200      	movs	r2, #0
 8002616:	719a      	strb	r2, [r3, #6]
		  carTurn(1, 310);
 8002618:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80026b4 <StartMotorServo+0x2ec>
 800261c:	2001      	movs	r0, #1
 800261e:	f001 fb45 	bl	8003cac <carTurn>
		  carTurn(1, 110);
 8002622:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80026b8 <StartMotorServo+0x2f0>
 8002626:	2001      	movs	r0, #1
 8002628:	f001 fb40 	bl	8003cac <carTurn>
		  mtr_mov_cm(-10);
 800262c:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8002660 <StartMotorServo+0x298>
 8002630:	f001 f88e 	bl	8003750 <mtr_mov_cm>
		  carTurn(1, 360 - orientation);
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <StartMotorServo+0x2e4>)
 8002636:	edd3 7a00 	vldr	s15, [r3]
 800263a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80026b0 <StartMotorServo+0x2e8>
 800263e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002642:	eeb0 0a67 	vmov.f32	s0, s15
 8002646:	2001      	movs	r0, #1
 8002648:	f001 fb30 	bl	8003cac <carTurn>
		  cpltErr.finished = 1;
 800264c:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <StartMotorServo+0x2bc>)
 800264e:	2201      	movs	r2, #1
 8002650:	719a      	strb	r2, [r3, #6]
	  }

	  // Step 4: Move towards 2nd obstacle, safe distance = 40 - 45 cm from obstacle (if carTurnOk)
	  // 25 - 30 cm from obstacle (if not carTurnOk)
	  usEnableActiveMeasure();
 8002652:	f7ff fe3f 	bl	80022d4 <usEnableActiveMeasure>
	  while (!distReady) osDelay(10);
 8002656:	e034      	b.n	80026c2 <StartMotorServo+0x2fa>
 8002658:	00000000 	.word	0x00000000
 800265c:	c0200000 	.word	0xc0200000
 8002660:	00000000 	.word	0x00000000
 8002664:	c0240000 	.word	0xc0240000
 8002668:	20000524 	.word	0x20000524
 800266c:	20000018 	.word	0x20000018
 8002670:	40390000 	.word	0x40390000
 8002674:	20000578 	.word	0x20000578
 8002678:	20000008 	.word	0x20000008
 800267c:	bff00000 	.word	0xbff00000
 8002680:	3ff00000 	.word	0x3ff00000
 8002684:	20000580 	.word	0x20000580
 8002688:	20000530 	.word	0x20000530
 800268c:	20000574 	.word	0x20000574
 8002690:	20000588 	.word	0x20000588
 8002694:	20000590 	.word	0x20000590
 8002698:	40490000 	.word	0x40490000
 800269c:	40080000 	.word	0x40080000
 80026a0:	20000010 	.word	0x20000010
 80026a4:	42480000 	.word	0x42480000
 80026a8:	437a0000 	.word	0x437a0000
 80026ac:	20000528 	.word	0x20000528
 80026b0:	43b40000 	.word	0x43b40000
 80026b4:	439b0000 	.word	0x439b0000
 80026b8:	42dc0000 	.word	0x42dc0000
 80026bc:	200a      	movs	r0, #10
 80026be:	f007 fe81 	bl	800a3c4 <osDelay>
 80026c2:	4b97      	ldr	r3, [pc, #604]	; (8002920 <StartMotorServo+0x558>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f8      	beq.n	80026bc <StartMotorServo+0x2f4>
	  if (distToObstacle > 150) {
 80026ca:	4b96      	ldr	r3, [pc, #600]	; (8002924 <StartMotorServo+0x55c>)
 80026cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026d0:	a38d      	add	r3, pc, #564	; (adr r3, 8002908 <StartMotorServo+0x540>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f7fe fa1f 	bl	8000b18 <__aeabi_dcmpgt>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00e      	beq.n	80026fe <StartMotorServo+0x336>
		  distToObstacle = (double)echo * 0.01715f;
 80026e0:	4b91      	ldr	r3, [pc, #580]	; (8002928 <StartMotorServo+0x560>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd ff1d 	bl	8000524 <__aeabi_i2d>
 80026ea:	a389      	add	r3, pc, #548	; (adr r3, 8002910 <StartMotorServo+0x548>)
 80026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f0:	f7fd ff82 	bl	80005f8 <__aeabi_dmul>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	498a      	ldr	r1, [pc, #552]	; (8002924 <StartMotorServo+0x55c>)
 80026fa:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  //if (distToObstacle >= 150) mtr_mov_cm(-5);
	  if (distToObstacle <= 20) {
 80026fe:	4b89      	ldr	r3, [pc, #548]	; (8002924 <StartMotorServo+0x55c>)
 8002700:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	4b88      	ldr	r3, [pc, #544]	; (800292c <StartMotorServo+0x564>)
 800270a:	f7fe f9f1 	bl	8000af0 <__aeabi_dcmple>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <StartMotorServo+0x360>
		  carTurnOk = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  distToObstacle_min = 16;
 800271a:	4985      	ldr	r1, [pc, #532]	; (8002930 <StartMotorServo+0x568>)
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	4b84      	ldr	r3, [pc, #528]	; (8002934 <StartMotorServo+0x56c>)
 8002722:	e9c1 2300 	strd	r2, r3, [r1]
 8002726:	e008      	b.n	800273a <StartMotorServo+0x372>
	  }
	  else {
		  carTurnOk = 1;
 8002728:	2301      	movs	r3, #1
 800272a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  distToObstacle_min = 45;
 800272e:	4980      	ldr	r1, [pc, #512]	; (8002930 <StartMotorServo+0x568>)
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	4b80      	ldr	r3, [pc, #512]	; (8002938 <StartMotorServo+0x570>)
 8002736:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  if (distToObstacle > 150) {
 800273a:	4b7a      	ldr	r3, [pc, #488]	; (8002924 <StartMotorServo+0x55c>)
 800273c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002740:	a371      	add	r3, pc, #452	; (adr r3, 8002908 <StartMotorServo+0x540>)
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	f7fe f9e7 	bl	8000b18 <__aeabi_dcmpgt>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d04c      	beq.n	80027ea <StartMotorServo+0x422>
		  mtr_mov_cm(-7);
 8002750:	ed9f 0b71 	vldr	d0, [pc, #452]	; 8002918 <StartMotorServo+0x550>
 8002754:	f000 fffc 	bl	8003750 <mtr_mov_cm>
		  osDelay(500);
 8002758:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800275c:	f007 fe32 	bl	800a3c4 <osDelay>
		  reqDist = 0;
 8002760:	4b76      	ldr	r3, [pc, #472]	; (800293c <StartMotorServo+0x574>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
		  cpltErr.finished = 0;
 8002766:	4b76      	ldr	r3, [pc, #472]	; (8002940 <StartMotorServo+0x578>)
 8002768:	2200      	movs	r2, #0
 800276a:	719a      	strb	r2, [r3, #6]
		  mtr_SetParamAndMove(&mtrA, DIR_FWD, 2000);
 800276c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002770:	2101      	movs	r1, #1
 8002772:	4874      	ldr	r0, [pc, #464]	; (8002944 <StartMotorServo+0x57c>)
 8002774:	f000 fef8 	bl	8003568 <mtr_SetParamAndMove>
		  mtr_SetParamAndMove(&mtrB, DIR_FWD, 2000);
 8002778:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800277c:	2101      	movs	r1, #1
 800277e:	4872      	ldr	r0, [pc, #456]	; (8002948 <StartMotorServo+0x580>)
 8002780:	f000 fef2 	bl	8003568 <mtr_SetParamAndMove>
		  cpltErr.finished = 1;
 8002784:	4b6e      	ldr	r3, [pc, #440]	; (8002940 <StartMotorServo+0x578>)
 8002786:	2201      	movs	r2, #1
 8002788:	719a      	strb	r2, [r3, #6]
		  while(!mtrA.suspend) osDelay(10);
 800278a:	e002      	b.n	8002792 <StartMotorServo+0x3ca>
 800278c:	200a      	movs	r0, #10
 800278e:	f007 fe19 	bl	800a3c4 <osDelay>
 8002792:	4b6c      	ldr	r3, [pc, #432]	; (8002944 <StartMotorServo+0x57c>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f8      	beq.n	800278c <StartMotorServo+0x3c4>
		  while (!distReady) osDelay(10);
 800279a:	e002      	b.n	80027a2 <StartMotorServo+0x3da>
 800279c:	200a      	movs	r0, #10
 800279e:	f007 fe11 	bl	800a3c4 <osDelay>
 80027a2:	4b5f      	ldr	r3, [pc, #380]	; (8002920 <StartMotorServo+0x558>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f8      	beq.n	800279c <StartMotorServo+0x3d4>
		  if (distToObstacle > 150) {
 80027aa:	4b5e      	ldr	r3, [pc, #376]	; (8002924 <StartMotorServo+0x55c>)
 80027ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027b0:	a355      	add	r3, pc, #340	; (adr r3, 8002908 <StartMotorServo+0x540>)
 80027b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b6:	f7fe f9af 	bl	8000b18 <__aeabi_dcmpgt>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00e      	beq.n	80027de <StartMotorServo+0x416>
			  distToObstacle = (double)echo * 0.01715f;
 80027c0:	4b59      	ldr	r3, [pc, #356]	; (8002928 <StartMotorServo+0x560>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fd fead 	bl	8000524 <__aeabi_i2d>
 80027ca:	a351      	add	r3, pc, #324	; (adr r3, 8002910 <StartMotorServo+0x548>)
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	f7fd ff12 	bl	80005f8 <__aeabi_dmul>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4952      	ldr	r1, [pc, #328]	; (8002924 <StartMotorServo+0x55c>)
 80027da:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  mtrA.suspend = SUS_OFF;
 80027de:	4b59      	ldr	r3, [pc, #356]	; (8002944 <StartMotorServo+0x57c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
		  mtrB.suspend = SUS_OFF;
 80027e4:	4b58      	ldr	r3, [pc, #352]	; (8002948 <StartMotorServo+0x580>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
	  }

	  do {
		  if ((distToObstacle - distToObstacle_min > -1) && (distToObstacle - distToObstacle_min < 1)) {
 80027ea:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <StartMotorServo+0x55c>)
 80027ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027f0:	4b4f      	ldr	r3, [pc, #316]	; (8002930 <StartMotorServo+0x568>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f7fd fd47 	bl	8000288 <__aeabi_dsub>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	4b51      	ldr	r3, [pc, #324]	; (800294c <StartMotorServo+0x584>)
 8002808:	f7fe f986 	bl	8000b18 <__aeabi_dcmpgt>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d014      	beq.n	800283c <StartMotorServo+0x474>
 8002812:	4b44      	ldr	r3, [pc, #272]	; (8002924 <StartMotorServo+0x55c>)
 8002814:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002818:	4b45      	ldr	r3, [pc, #276]	; (8002930 <StartMotorServo+0x568>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fd fd33 	bl	8000288 <__aeabi_dsub>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	4b48      	ldr	r3, [pc, #288]	; (8002950 <StartMotorServo+0x588>)
 8002830:	f7fe f954 	bl	8000adc <__aeabi_dcmplt>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 80d1 	bne.w	80029de <StartMotorServo+0x616>
			  break;
		  }
		  cpltErr.finished = 0;
 800283c:	4b40      	ldr	r3, [pc, #256]	; (8002940 <StartMotorServo+0x578>)
 800283e:	2200      	movs	r2, #0
 8002840:	719a      	strb	r2, [r3, #6]
		  pos_y += mtr_mov_cm(distToObstacle - distToObstacle_min);
 8002842:	4b38      	ldr	r3, [pc, #224]	; (8002924 <StartMotorServo+0x55c>)
 8002844:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002848:	4b39      	ldr	r3, [pc, #228]	; (8002930 <StartMotorServo+0x568>)
 800284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284e:	f7fd fd1b 	bl	8000288 <__aeabi_dsub>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	ec43 2b17 	vmov	d7, r2, r3
 800285a:	eeb0 0a47 	vmov.f32	s0, s14
 800285e:	eef0 0a67 	vmov.f32	s1, s15
 8002862:	f000 ff75 	bl	8003750 <mtr_mov_cm>
 8002866:	ec51 0b10 	vmov	r0, r1, d0
 800286a:	4b3a      	ldr	r3, [pc, #232]	; (8002954 <StartMotorServo+0x58c>)
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	f7fd fd0c 	bl	800028c <__adddf3>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4936      	ldr	r1, [pc, #216]	; (8002954 <StartMotorServo+0x58c>)
 800287a:	e9c1 2300 	strd	r2, r3, [r1]
		  cpltErr.finished = 1;
 800287e:	4b30      	ldr	r3, [pc, #192]	; (8002940 <StartMotorServo+0x578>)
 8002880:	2201      	movs	r2, #1
 8002882:	719a      	strb	r2, [r3, #6]
		  while ((mtrA.suspend) || (mtrB.suspend)) {	// Operation is interrupted by us
 8002884:	e034      	b.n	80028f0 <StartMotorServo+0x528>
			  while (!distReady) osDelay(10);
 8002886:	200a      	movs	r0, #10
 8002888:	f007 fd9c 	bl	800a3c4 <osDelay>
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <StartMotorServo+0x558>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f8      	beq.n	8002886 <StartMotorServo+0x4be>
			  reqDist = -1;
 8002894:	4b29      	ldr	r3, [pc, #164]	; (800293c <StartMotorServo+0x574>)
 8002896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800289a:	601a      	str	r2, [r3, #0]
			  mtrA.suspend = SUS_OFF;
 800289c:	4b29      	ldr	r3, [pc, #164]	; (8002944 <StartMotorServo+0x57c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
			  mtrB.suspend = SUS_OFF;
 80028a2:	4b29      	ldr	r3, [pc, #164]	; (8002948 <StartMotorServo+0x580>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
			  cpltErr.finished = 0;
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <StartMotorServo+0x578>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	719a      	strb	r2, [r3, #6]
			  pos_y += mtr_mov_cm(distToObstacle - distToObstacle_min);
 80028ae:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <StartMotorServo+0x55c>)
 80028b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028b4:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <StartMotorServo+0x568>)
 80028b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ba:	f7fd fce5 	bl	8000288 <__aeabi_dsub>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	ec43 2b17 	vmov	d7, r2, r3
 80028c6:	eeb0 0a47 	vmov.f32	s0, s14
 80028ca:	eef0 0a67 	vmov.f32	s1, s15
 80028ce:	f000 ff3f 	bl	8003750 <mtr_mov_cm>
 80028d2:	ec51 0b10 	vmov	r0, r1, d0
 80028d6:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <StartMotorServo+0x58c>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fd fcd6 	bl	800028c <__adddf3>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	491b      	ldr	r1, [pc, #108]	; (8002954 <StartMotorServo+0x58c>)
 80028e6:	e9c1 2300 	strd	r2, r3, [r1]
			  cpltErr.finished = 1;
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <StartMotorServo+0x578>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	719a      	strb	r2, [r3, #6]
		  while ((mtrA.suspend) || (mtrB.suspend)) {	// Operation is interrupted by us
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <StartMotorServo+0x57c>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1c9      	bne.n	800288c <StartMotorServo+0x4c4>
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <StartMotorServo+0x580>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1c5      	bne.n	800288c <StartMotorServo+0x4c4>
		  }
		  usEnableActiveMeasure();
 8002900:	f7ff fce8 	bl	80022d4 <usEnableActiveMeasure>
		  while (!distReady) osDelay(10);
 8002904:	e02b      	b.n	800295e <StartMotorServo+0x596>
 8002906:	bf00      	nop
 8002908:	00000000 	.word	0x00000000
 800290c:	4062c000 	.word	0x4062c000
 8002910:	00000000 	.word	0x00000000
 8002914:	3f918fc5 	.word	0x3f918fc5
 8002918:	00000000 	.word	0x00000000
 800291c:	c01c0000 	.word	0xc01c0000
 8002920:	20000578 	.word	0x20000578
 8002924:	20000008 	.word	0x20000008
 8002928:	20000560 	.word	0x20000560
 800292c:	40340000 	.word	0x40340000
 8002930:	20000018 	.word	0x20000018
 8002934:	40300000 	.word	0x40300000
 8002938:	40468000 	.word	0x40468000
 800293c:	20000574 	.word	0x20000574
 8002940:	20000580 	.word	0x20000580
 8002944:	20000588 	.word	0x20000588
 8002948:	20000590 	.word	0x20000590
 800294c:	bff00000 	.word	0xbff00000
 8002950:	3ff00000 	.word	0x3ff00000
 8002954:	20000530 	.word	0x20000530
 8002958:	200a      	movs	r0, #10
 800295a:	f007 fd33 	bl	800a3c4 <osDelay>
 800295e:	4ba4      	ldr	r3, [pc, #656]	; (8002bf0 <StartMotorServo+0x828>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f8      	beq.n	8002958 <StartMotorServo+0x590>
		  if (distToObstacle > 150) {
 8002966:	4ba3      	ldr	r3, [pc, #652]	; (8002bf4 <StartMotorServo+0x82c>)
 8002968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800296c:	a396      	add	r3, pc, #600	; (adr r3, 8002bc8 <StartMotorServo+0x800>)
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	f7fe f8d1 	bl	8000b18 <__aeabi_dcmpgt>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00e      	beq.n	800299a <StartMotorServo+0x5d2>
			  distToObstacle = (double)echo * 0.01715f;
 800297c:	4b9e      	ldr	r3, [pc, #632]	; (8002bf8 <StartMotorServo+0x830>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fdcf 	bl	8000524 <__aeabi_i2d>
 8002986:	a392      	add	r3, pc, #584	; (adr r3, 8002bd0 <StartMotorServo+0x808>)
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	f7fd fe34 	bl	80005f8 <__aeabi_dmul>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4997      	ldr	r1, [pc, #604]	; (8002bf4 <StartMotorServo+0x82c>)
 8002996:	e9c1 2300 	strd	r2, r3, [r1]
		  }
	  } while((distToObstacle < distToObstacle_min) || (distToObstacle > distToObstacle_min + 5));
 800299a:	4b96      	ldr	r3, [pc, #600]	; (8002bf4 <StartMotorServo+0x82c>)
 800299c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029a0:	4b96      	ldr	r3, [pc, #600]	; (8002bfc <StartMotorServo+0x834>)
 80029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a6:	f7fe f899 	bl	8000adc <__aeabi_dcmplt>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f47f af1c 	bne.w	80027ea <StartMotorServo+0x422>
 80029b2:	4b92      	ldr	r3, [pc, #584]	; (8002bfc <StartMotorServo+0x834>)
 80029b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	4b90      	ldr	r3, [pc, #576]	; (8002c00 <StartMotorServo+0x838>)
 80029be:	f7fd fc65 	bl	800028c <__adddf3>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4610      	mov	r0, r2
 80029c8:	4619      	mov	r1, r3
 80029ca:	4b8a      	ldr	r3, [pc, #552]	; (8002bf4 <StartMotorServo+0x82c>)
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	f7fe f884 	bl	8000adc <__aeabi_dcmplt>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f47f af07 	bne.w	80027ea <StartMotorServo+0x422>
 80029dc:	e000      	b.n	80029e0 <StartMotorServo+0x618>
			  break;
 80029de:	bf00      	nop

	  // Step 5: Request camera and wait for result
	  if (!carTurnOk) mtr_mov_cm(-7);
 80029e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d103      	bne.n	80029f0 <StartMotorServo+0x628>
 80029e8:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 8002bd8 <StartMotorServo+0x810>
 80029ec:	f000 feb0 	bl	8003750 <mtr_mov_cm>
	  turnDir = 0xFF;
 80029f0:	4b84      	ldr	r3, [pc, #528]	; (8002c04 <StartMotorServo+0x83c>)
 80029f2:	22ff      	movs	r2, #255	; 0xff
 80029f4:	701a      	strb	r2, [r3, #0]
	  uart_send_cam(2);
 80029f6:	2002      	movs	r0, #2
 80029f8:	f7fe fa9a 	bl	8000f30 <uart_send_cam>
	  //turnDir = RIGHT;		// Testing only
	  while (turnDir == 0xFF);
 80029fc:	bf00      	nop
 80029fe:	4b81      	ldr	r3, [pc, #516]	; (8002c04 <StartMotorServo+0x83c>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2bff      	cmp	r3, #255	; 0xff
 8002a04:	d0fb      	beq.n	80029fe <StartMotorServo+0x636>
	  if (!carTurnOk) mtr_mov_cm(7);
 8002a06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d103      	bne.n	8002a16 <StartMotorServo+0x64e>
 8002a0e:	ed9f 0b74 	vldr	d0, [pc, #464]	; 8002be0 <StartMotorServo+0x818>
 8002a12:	f000 fe9d 	bl	8003750 <mtr_mov_cm>

	  // Step 6: Go around 2nd obstacle
	  reqDist = -1;
 8002a16:	4b7c      	ldr	r3, [pc, #496]	; (8002c08 <StartMotorServo+0x840>)
 8002a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a1c:	601a      	str	r2, [r3, #0]
	  if (turnDir == LEFT) {
 8002a1e:	4b79      	ldr	r3, [pc, #484]	; (8002c04 <StartMotorServo+0x83c>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d117      	bne.n	8002a56 <StartMotorServo+0x68e>
		  cpltErr.finished = 0;
 8002a26:	4b79      	ldr	r3, [pc, #484]	; (8002c0c <StartMotorServo+0x844>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	719a      	strb	r2, [r3, #6]
		  if (carTurnOk) {
 8002a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <StartMotorServo+0x678>
			  carTurn(1, 90);
 8002a34:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8002c10 <StartMotorServo+0x848>
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f001 f937 	bl	8003cac <carTurn>
 8002a3e:	e003      	b.n	8002a48 <StartMotorServo+0x680>
		  }
		  else {
			  turn(90);
 8002a40:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8002c10 <StartMotorServo+0x848>
 8002a44:	f000 ffb8 	bl	80039b8 <turn>
		  }
		  cpltErr.finished = 1;
 8002a48:	4b70      	ldr	r3, [pc, #448]	; (8002c0c <StartMotorServo+0x844>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	719a      	strb	r2, [r3, #6]
		  selectedIr = RIGHT;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002a54:	e01e      	b.n	8002a94 <StartMotorServo+0x6cc>
	  }
	  else if (turnDir == RIGHT) {
 8002a56:	4b6b      	ldr	r3, [pc, #428]	; (8002c04 <StartMotorServo+0x83c>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d11a      	bne.n	8002a94 <StartMotorServo+0x6cc>
		  mtr_mov_cm(5);
 8002a5e:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8002be8 <StartMotorServo+0x820>
 8002a62:	f000 fe75 	bl	8003750 <mtr_mov_cm>
		  cpltErr.finished = 0;
 8002a66:	4b69      	ldr	r3, [pc, #420]	; (8002c0c <StartMotorServo+0x844>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	719a      	strb	r2, [r3, #6]
		  if (carTurnOk) {
 8002a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <StartMotorServo+0x6b8>
			  carTurn(1, 270);
 8002a74:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8002c14 <StartMotorServo+0x84c>
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f001 f917 	bl	8003cac <carTurn>
 8002a7e:	e003      	b.n	8002a88 <StartMotorServo+0x6c0>
		  }
		  else {
			  turn(270);
 8002a80:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8002c14 <StartMotorServo+0x84c>
 8002a84:	f000 ff98 	bl	80039b8 <turn>
		  }
		  cpltErr.finished = 1;
 8002a88:	4b60      	ldr	r3, [pc, #384]	; (8002c0c <StartMotorServo+0x844>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	719a      	strb	r2, [r3, #6]
		  selectedIr = LEFT;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  }

	  // Go to edge of 2nd obstacle
	  osDelay(100);
 8002a94:	2064      	movs	r0, #100	; 0x64
 8002a96:	f007 fc95 	bl	800a3c4 <osDelay>
	  ir = getIRReading(selectedIr);
 8002a9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fc3c 	bl	800231c <getIRReading>
 8002aa4:	62b8      	str	r0, [r7, #40]	; 0x28
	  mtrA_init(0xFFFF, 0, 0, 0, 1);
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8002c18 <StartMotorServo+0x850>
 8002aac:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8002c18 <StartMotorServo+0x850>
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ab6:	f000 fbc9 	bl	800324c <mtrA_init>
	  mtrB_init(0xFFFF, 0, 0, 0, 1);
 8002aba:	2201      	movs	r2, #1
 8002abc:	eddf 0a56 	vldr	s1, [pc, #344]	; 8002c18 <StartMotorServo+0x850>
 8002ac0:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8002c18 <StartMotorServo+0x850>
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aca:	f000 fc25 	bl	8003318 <mtrB_init>
	  mtrA.suspend = SUS_OFF;
 8002ace:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <StartMotorServo+0x854>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
	  mtrB.suspend = SUS_OFF;
 8002ad4:	4b52      	ldr	r3, [pc, #328]	; (8002c20 <StartMotorServo+0x858>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
	  if (ir > 500) {
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ae0:	dd1c      	ble.n	8002b1c <StartMotorServo+0x754>
		  mtr_SetParamAndMove(&mtrA, DIR_FWD, 3000);
 8002ae2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	484c      	ldr	r0, [pc, #304]	; (8002c1c <StartMotorServo+0x854>)
 8002aea:	f000 fd3d 	bl	8003568 <mtr_SetParamAndMove>
		  mtr_SetParamAndMove(&mtrB, DIR_FWD, 3000);
 8002aee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002af2:	2101      	movs	r1, #1
 8002af4:	484a      	ldr	r0, [pc, #296]	; (8002c20 <StartMotorServo+0x858>)
 8002af6:	f000 fd37 	bl	8003568 <mtr_SetParamAndMove>
		  while (ir > 500) {
 8002afa:	e008      	b.n	8002b0e <StartMotorServo+0x746>
			  osDelay(10);
 8002afc:	200a      	movs	r0, #10
 8002afe:	f007 fc61 	bl	800a3c4 <osDelay>
			  ir = getIRReading(selectedIr);
 8002b02:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fc08 	bl	800231c <getIRReading>
 8002b0c:	62b8      	str	r0, [r7, #40]	; 0x28
		  while (ir > 500) {
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b14:	dcf2      	bgt.n	8002afc <StartMotorServo+0x734>
		  }
		  mtr_stop();
 8002b16:	f000 fccf 	bl	80034b8 <mtr_stop>
 8002b1a:	e01b      	b.n	8002b54 <StartMotorServo+0x78c>
	  }
	  else {
		  mtr_SetParamAndMove(&mtrA, DIR_BCK, 3000);
 8002b1c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b20:	2100      	movs	r1, #0
 8002b22:	483e      	ldr	r0, [pc, #248]	; (8002c1c <StartMotorServo+0x854>)
 8002b24:	f000 fd20 	bl	8003568 <mtr_SetParamAndMove>
		  mtr_SetParamAndMove(&mtrB, DIR_BCK, 3000);
 8002b28:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	483c      	ldr	r0, [pc, #240]	; (8002c20 <StartMotorServo+0x858>)
 8002b30:	f000 fd1a 	bl	8003568 <mtr_SetParamAndMove>
		  while (ir <= 500) {
 8002b34:	e008      	b.n	8002b48 <StartMotorServo+0x780>
			  osDelay(10);
 8002b36:	200a      	movs	r0, #10
 8002b38:	f007 fc44 	bl	800a3c4 <osDelay>
			  ir = getIRReading(selectedIr);
 8002b3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fbeb 	bl	800231c <getIRReading>
 8002b46:	62b8      	str	r0, [r7, #40]	; 0x28
		  while (ir <= 500) {
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b4e:	ddf2      	ble.n	8002b36 <StartMotorServo+0x76e>
		  }
		  mtr_stop();
 8002b50:	f000 fcb2 	bl	80034b8 <mtr_stop>
	  }

	  mtr_SetParamAndMove(&mtrA, DIR_FWD, 3000);
 8002b54:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4830      	ldr	r0, [pc, #192]	; (8002c1c <StartMotorServo+0x854>)
 8002b5c:	f000 fd04 	bl	8003568 <mtr_SetParamAndMove>
	  mtr_SetParamAndMove(&mtrB, DIR_FWD, 3000);
 8002b60:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b64:	2101      	movs	r1, #1
 8002b66:	482e      	ldr	r0, [pc, #184]	; (8002c20 <StartMotorServo+0x858>)
 8002b68:	f000 fcfe 	bl	8003568 <mtr_SetParamAndMove>
	  osDelay(500);
 8002b6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b70:	f007 fc28 	bl	800a3c4 <osDelay>
	  mtr_stop();
 8002b74:	f000 fca0 	bl	80034b8 <mtr_stop>

	  if (turnDir == LEFT) {
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <StartMotorServo+0x83c>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d151      	bne.n	8002c24 <StartMotorServo+0x85c>
		  cpltErr.finished = 0;
 8002b80:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <StartMotorServo+0x844>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	719a      	strb	r2, [r3, #6]
		  carTurn(1, 270);
 8002b86:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8002c14 <StartMotorServo+0x84c>
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f001 f88e 	bl	8003cac <carTurn>
		  mtr_SetParamAndMove(&mtrA, DIR_FWD, 3000);
 8002b90:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b94:	2101      	movs	r1, #1
 8002b96:	4821      	ldr	r0, [pc, #132]	; (8002c1c <StartMotorServo+0x854>)
 8002b98:	f000 fce6 	bl	8003568 <mtr_SetParamAndMove>
		  mtr_SetParamAndMove(&mtrB, DIR_FWD, 3000);
 8002b9c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	481f      	ldr	r0, [pc, #124]	; (8002c20 <StartMotorServo+0x858>)
 8002ba4:	f000 fce0 	bl	8003568 <mtr_SetParamAndMove>
		  osDelay(500);
 8002ba8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bac:	f007 fc0a 	bl	800a3c4 <osDelay>
		  mtr_stop();
 8002bb0:	f000 fc82 	bl	80034b8 <mtr_stop>
		  carTurn(1, 270);
 8002bb4:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8002c14 <StartMotorServo+0x84c>
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f001 f877 	bl	8003cac <carTurn>
		  cpltErr.finished = 1;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <StartMotorServo+0x844>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	719a      	strb	r2, [r3, #6]
 8002bc4:	e054      	b.n	8002c70 <StartMotorServo+0x8a8>
 8002bc6:	bf00      	nop
 8002bc8:	00000000 	.word	0x00000000
 8002bcc:	4062c000 	.word	0x4062c000
 8002bd0:	00000000 	.word	0x00000000
 8002bd4:	3f918fc5 	.word	0x3f918fc5
 8002bd8:	00000000 	.word	0x00000000
 8002bdc:	c01c0000 	.word	0xc01c0000
 8002be0:	00000000 	.word	0x00000000
 8002be4:	401c0000 	.word	0x401c0000
 8002be8:	00000000 	.word	0x00000000
 8002bec:	40140000 	.word	0x40140000
 8002bf0:	20000578 	.word	0x20000578
 8002bf4:	20000008 	.word	0x20000008
 8002bf8:	20000560 	.word	0x20000560
 8002bfc:	20000018 	.word	0x20000018
 8002c00:	40140000 	.word	0x40140000
 8002c04:	20000010 	.word	0x20000010
 8002c08:	20000574 	.word	0x20000574
 8002c0c:	20000580 	.word	0x20000580
 8002c10:	42b40000 	.word	0x42b40000
 8002c14:	43870000 	.word	0x43870000
 8002c18:	00000000 	.word	0x00000000
 8002c1c:	20000588 	.word	0x20000588
 8002c20:	20000590 	.word	0x20000590
	  }
	  else if (turnDir == RIGHT) {
 8002c24:	4bbe      	ldr	r3, [pc, #760]	; (8002f20 <StartMotorServo+0xb58>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d121      	bne.n	8002c70 <StartMotorServo+0x8a8>
		  cpltErr.finished = 0;
 8002c2c:	4bbd      	ldr	r3, [pc, #756]	; (8002f24 <StartMotorServo+0xb5c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	719a      	strb	r2, [r3, #6]
		  carTurn(1, 90);
 8002c32:	ed9f 0abd 	vldr	s0, [pc, #756]	; 8002f28 <StartMotorServo+0xb60>
 8002c36:	2001      	movs	r0, #1
 8002c38:	f001 f838 	bl	8003cac <carTurn>
		  mtr_SetParamAndMove(&mtrA, DIR_FWD, 3000);
 8002c3c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c40:	2101      	movs	r1, #1
 8002c42:	48ba      	ldr	r0, [pc, #744]	; (8002f2c <StartMotorServo+0xb64>)
 8002c44:	f000 fc90 	bl	8003568 <mtr_SetParamAndMove>
		  mtr_SetParamAndMove(&mtrB, DIR_FWD, 3000);
 8002c48:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	48b8      	ldr	r0, [pc, #736]	; (8002f30 <StartMotorServo+0xb68>)
 8002c50:	f000 fc8a 	bl	8003568 <mtr_SetParamAndMove>
		  osDelay(500);
 8002c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c58:	f007 fbb4 	bl	800a3c4 <osDelay>
		  mtr_stop();
 8002c5c:	f000 fc2c 	bl	80034b8 <mtr_stop>
		  carTurn(1, 90);
 8002c60:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8002f28 <StartMotorServo+0xb60>
 8002c64:	2001      	movs	r0, #1
 8002c66:	f001 f821 	bl	8003cac <carTurn>
		  cpltErr.finished = 1;
 8002c6a:	4bae      	ldr	r3, [pc, #696]	; (8002f24 <StartMotorServo+0xb5c>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	719a      	strb	r2, [r3, #6]
	  }

	  // Back to start of 2nd obstacle
	  ir = getIRReading(selectedIr);
 8002c70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fb51 	bl	800231c <getIRReading>
 8002c7a:	62b8      	str	r0, [r7, #40]	; 0x28
	  do {
		  mtr_SetParamAndMove(&mtrA, DIR_BCK, 3000);
 8002c7c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c80:	2100      	movs	r1, #0
 8002c82:	48aa      	ldr	r0, [pc, #680]	; (8002f2c <StartMotorServo+0xb64>)
 8002c84:	f000 fc70 	bl	8003568 <mtr_SetParamAndMove>
		  mtr_SetParamAndMove(&mtrB, DIR_BCK, 3000);
 8002c88:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	48a8      	ldr	r0, [pc, #672]	; (8002f30 <StartMotorServo+0xb68>)
 8002c90:	f000 fc6a 	bl	8003568 <mtr_SetParamAndMove>
		  osDelay(10);
 8002c94:	200a      	movs	r0, #10
 8002c96:	f007 fb95 	bl	800a3c4 <osDelay>
		  ir = getIRReading(selectedIr);
 8002c9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fb3c 	bl	800231c <getIRReading>
 8002ca4:	62b8      	str	r0, [r7, #40]	; 0x28
	  } while(ir > 500);
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cac:	dce6      	bgt.n	8002c7c <StartMotorServo+0x8b4>
	  mtr_stop();
 8002cae:	f000 fc03 	bl	80034b8 <mtr_stop>

	  // Fwd to end of 2nd obstacle
	  mtrA_init(0xFFFF, 0, 0, 0, 1);
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8002f34 <StartMotorServo+0xb6c>
 8002cb8:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8002f34 <StartMotorServo+0xb6c>
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cc2:	f000 fac3 	bl	800324c <mtrA_init>
	  mtrB_init(0xFFFF, 0, 0, 0, 1);
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8002f34 <StartMotorServo+0xb6c>
 8002ccc:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8002f34 <StartMotorServo+0xb6c>
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cd6:	f000 fb1f 	bl	8003318 <mtrB_init>
	  mtr_SetParamAndMove(&mtrA, DIR_FWD, 3000);
 8002cda:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002cde:	2101      	movs	r1, #1
 8002ce0:	4892      	ldr	r0, [pc, #584]	; (8002f2c <StartMotorServo+0xb64>)
 8002ce2:	f000 fc41 	bl	8003568 <mtr_SetParamAndMove>
	  mtr_SetParamAndMove(&mtrB, DIR_FWD, 3000);
 8002ce6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002cea:	2101      	movs	r1, #1
 8002cec:	4890      	ldr	r0, [pc, #576]	; (8002f30 <StartMotorServo+0xb68>)
 8002cee:	f000 fc3b 	bl	8003568 <mtr_SetParamAndMove>
	  osDelay(1000);
 8002cf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cf6:	f007 fb65 	bl	800a3c4 <osDelay>
	  ir = getIRReading(selectedIr);
 8002cfa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fb0c 	bl	800231c <getIRReading>
 8002d04:	62b8      	str	r0, [r7, #40]	; 0x28
	  while(ir > 500) {
 8002d06:	e008      	b.n	8002d1a <StartMotorServo+0x952>
		  osDelay(10);
 8002d08:	200a      	movs	r0, #10
 8002d0a:	f007 fb5b 	bl	800a3c4 <osDelay>
		  ir = getIRReading(selectedIr);
 8002d0e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fb02 	bl	800231c <getIRReading>
 8002d18:	62b8      	str	r0, [r7, #40]	; 0x28
	  while(ir > 500) {
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d20:	dcf2      	bgt.n	8002d08 <StartMotorServo+0x940>
	  }
	  mtr_stop();
 8002d22:	f000 fbc9 	bl	80034b8 <mtr_stop>
	  obs2Width = ((double)((mtrAPID.count + mtrBPID.count) / 2) / CNT_PER_CM);
 8002d26:	4b84      	ldr	r3, [pc, #528]	; (8002f38 <StartMotorServo+0xb70>)
 8002d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b83      	ldr	r3, [pc, #524]	; (8002f3c <StartMotorServo+0xb74>)
 8002d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d34:	4413      	add	r3, r2
 8002d36:	0fda      	lsrs	r2, r3, #31
 8002d38:	4413      	add	r3, r2
 8002d3a:	105b      	asrs	r3, r3, #1
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fbf1 	bl	8000524 <__aeabi_i2d>
 8002d42:	a373      	add	r3, pc, #460	; (adr r3, 8002f10 <StartMotorServo+0xb48>)
 8002d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d48:	f7fd fd80 	bl	800084c <__aeabi_ddiv>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  //mtr_mov_cm(-10);

	  reqDist = -1;
 8002d54:	4b7a      	ldr	r3, [pc, #488]	; (8002f40 <StartMotorServo+0xb78>)
 8002d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d5a:	601a      	str	r2, [r3, #0]
	  if (turnDir == LEFT) {
 8002d5c:	4b70      	ldr	r3, [pc, #448]	; (8002f20 <StartMotorServo+0xb58>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10b      	bne.n	8002d7c <StartMotorServo+0x9b4>
		  cpltErr.finished = 0;
 8002d64:	4b6f      	ldr	r3, [pc, #444]	; (8002f24 <StartMotorServo+0xb5c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	719a      	strb	r2, [r3, #6]
		  carTurn(3, 270);
 8002d6a:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8002f44 <StartMotorServo+0xb7c>
 8002d6e:	2003      	movs	r0, #3
 8002d70:	f000 ff9c 	bl	8003cac <carTurn>
		  cpltErr.finished = 1;
 8002d74:	4b6b      	ldr	r3, [pc, #428]	; (8002f24 <StartMotorServo+0xb5c>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	719a      	strb	r2, [r3, #6]
 8002d7a:	e00e      	b.n	8002d9a <StartMotorServo+0x9d2>
	  }
	  else if (turnDir == RIGHT) {
 8002d7c:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <StartMotorServo+0xb58>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d10a      	bne.n	8002d9a <StartMotorServo+0x9d2>
		  cpltErr.finished = 0;
 8002d84:	4b67      	ldr	r3, [pc, #412]	; (8002f24 <StartMotorServo+0xb5c>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	719a      	strb	r2, [r3, #6]
		  carTurn(3, 90);
 8002d8a:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8002f28 <StartMotorServo+0xb60>
 8002d8e:	2003      	movs	r0, #3
 8002d90:	f000 ff8c 	bl	8003cac <carTurn>
		  cpltErr.finished = 1;
 8002d94:	4b63      	ldr	r3, [pc, #396]	; (8002f24 <StartMotorServo+0xb5c>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	719a      	strb	r2, [r3, #6]
	  }

	  // Step 7: Return home
	  mtr_SetParamAndMove(&mtrA, DIR_FWD, 3000);
 8002d9a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d9e:	2101      	movs	r1, #1
 8002da0:	4862      	ldr	r0, [pc, #392]	; (8002f2c <StartMotorServo+0xb64>)
 8002da2:	f000 fbe1 	bl	8003568 <mtr_SetParamAndMove>
	  mtr_SetParamAndMove(&mtrB, DIR_FWD, 3000);
 8002da6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002daa:	2101      	movs	r1, #1
 8002dac:	4860      	ldr	r0, [pc, #384]	; (8002f30 <StartMotorServo+0xb68>)
 8002dae:	f000 fbdb 	bl	8003568 <mtr_SetParamAndMove>
	  osDelay(700);
 8002db2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002db6:	f007 fb05 	bl	800a3c4 <osDelay>
	  if (obs2Width > 70) {
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	4b62      	ldr	r3, [pc, #392]	; (8002f48 <StartMotorServo+0xb80>)
 8002dc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dc4:	f7fd fea8 	bl	8000b18 <__aeabi_dcmpgt>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d027      	beq.n	8002e1e <StartMotorServo+0xa56>
		  mtr_stop();
 8002dce:	f000 fb73 	bl	80034b8 <mtr_stop>
		  reqDist = -1;
 8002dd2:	4b5b      	ldr	r3, [pc, #364]	; (8002f40 <StartMotorServo+0xb78>)
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dd8:	601a      	str	r2, [r3, #0]
		  if (turnDir == LEFT) {
 8002dda:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <StartMotorServo+0xb58>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <StartMotorServo+0xa30>
			  carTurn(1, 315);
 8002de2:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8002f4c <StartMotorServo+0xb84>
 8002de6:	2001      	movs	r0, #1
 8002de8:	f000 ff60 	bl	8003cac <carTurn>
			  carTurn(1, 45);
 8002dec:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8002f50 <StartMotorServo+0xb88>
 8002df0:	2001      	movs	r0, #1
 8002df2:	f000 ff5b 	bl	8003cac <carTurn>
 8002df6:	e00d      	b.n	8002e14 <StartMotorServo+0xa4c>
		  }
		  else if (turnDir == RIGHT) {
 8002df8:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <StartMotorServo+0xb58>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d109      	bne.n	8002e14 <StartMotorServo+0xa4c>
			  carTurn(1, 45);
 8002e00:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8002f50 <StartMotorServo+0xb88>
 8002e04:	2001      	movs	r0, #1
 8002e06:	f000 ff51 	bl	8003cac <carTurn>
			  carTurn(1, 315);
 8002e0a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8002f4c <StartMotorServo+0xb84>
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f000 ff4c 	bl	8003cac <carTurn>
		  }
		  mtr_mov_cm(-25);
 8002e14:	ed9f 0b40 	vldr	d0, [pc, #256]	; 8002f18 <StartMotorServo+0xb50>
 8002e18:	f000 fc9a 	bl	8003750 <mtr_mov_cm>
 8002e1c:	e00f      	b.n	8002e3e <StartMotorServo+0xa76>
	  }
	  else {
		  mtr_SetParamAndMove(&mtrA, DIR_FWD, 3000);
 8002e1e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e22:	2101      	movs	r1, #1
 8002e24:	4841      	ldr	r0, [pc, #260]	; (8002f2c <StartMotorServo+0xb64>)
 8002e26:	f000 fb9f 	bl	8003568 <mtr_SetParamAndMove>
		  mtr_SetParamAndMove(&mtrB, DIR_FWD, 3000);
 8002e2a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e2e:	2101      	movs	r1, #1
 8002e30:	483f      	ldr	r0, [pc, #252]	; (8002f30 <StartMotorServo+0xb68>)
 8002e32:	f000 fb99 	bl	8003568 <mtr_SetParamAndMove>
		  osDelay(1000);
 8002e36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e3a:	f007 fac3 	bl	800a3c4 <osDelay>
	  }
	  mtr_SetParamAndMove(&mtrA, DIR_FWD, 3000);
 8002e3e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e42:	2101      	movs	r1, #1
 8002e44:	4839      	ldr	r0, [pc, #228]	; (8002f2c <StartMotorServo+0xb64>)
 8002e46:	f000 fb8f 	bl	8003568 <mtr_SetParamAndMove>
	  mtr_SetParamAndMove(&mtrB, DIR_FWD, 3000);
 8002e4a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4837      	ldr	r0, [pc, #220]	; (8002f30 <StartMotorServo+0xb68>)
 8002e52:	f000 fb89 	bl	8003568 <mtr_SetParamAndMove>
	  osDelay(100);
 8002e56:	2064      	movs	r0, #100	; 0x64
 8002e58:	f007 fab4 	bl	800a3c4 <osDelay>
	  ir = getIRReading(selectedIr);
 8002e5c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fa5b 	bl	800231c <getIRReading>
 8002e66:	62b8      	str	r0, [r7, #40]	; 0x28
	  while (ir <= 600) {
 8002e68:	e008      	b.n	8002e7c <StartMotorServo+0xab4>
		  osDelay(10);
 8002e6a:	200a      	movs	r0, #10
 8002e6c:	f007 faaa 	bl	800a3c4 <osDelay>
		  ir = getIRReading(selectedIr);
 8002e70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fa51 	bl	800231c <getIRReading>
 8002e7a:	62b8      	str	r0, [r7, #40]	; 0x28
	  while (ir <= 600) {
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002e82:	ddf2      	ble.n	8002e6a <StartMotorServo+0xaa2>
	  }
	  while (ir > 600) {
 8002e84:	e008      	b.n	8002e98 <StartMotorServo+0xad0>
		  osDelay(10);
 8002e86:	200a      	movs	r0, #10
 8002e88:	f007 fa9c 	bl	800a3c4 <osDelay>
		  ir = getIRReading(selectedIr);
 8002e8c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fa43 	bl	800231c <getIRReading>
 8002e96:	62b8      	str	r0, [r7, #40]	; 0x28
	  while (ir > 600) {
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002e9e:	dcf2      	bgt.n	8002e86 <StartMotorServo+0xabe>
	  }
	  mtr_stop();
 8002ea0:	f000 fb0a 	bl	80034b8 <mtr_stop>

	  reqDist = -1;
 8002ea4:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <StartMotorServo+0xb78>)
 8002ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eaa:	601a      	str	r2, [r3, #0]
	  if (turnDir == LEFT) {
 8002eac:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <StartMotorServo+0xb58>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10b      	bne.n	8002ecc <StartMotorServo+0xb04>
		  cpltErr.finished = 0;
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <StartMotorServo+0xb5c>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	719a      	strb	r2, [r3, #6]
		  carTurn(1, 270);
 8002eba:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8002f44 <StartMotorServo+0xb7c>
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f000 fef4 	bl	8003cac <carTurn>
		  cpltErr.finished = 1;
 8002ec4:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <StartMotorServo+0xb5c>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	719a      	strb	r2, [r3, #6]
 8002eca:	e00e      	b.n	8002eea <StartMotorServo+0xb22>
	  }
	  else if (turnDir == RIGHT) {
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <StartMotorServo+0xb58>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d10a      	bne.n	8002eea <StartMotorServo+0xb22>
		  cpltErr.finished = 0;
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <StartMotorServo+0xb5c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	719a      	strb	r2, [r3, #6]
		  carTurn(1, 90);
 8002eda:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002f28 <StartMotorServo+0xb60>
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f000 fee4 	bl	8003cac <carTurn>
		  cpltErr.finished = 1;
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <StartMotorServo+0xb5c>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	719a      	strb	r2, [r3, #6]
	  }

	  // Move horizontally towards obs 1
	  mtr_SetParamAndMove(&mtrA, DIR_BCK, 3000);
 8002eea:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002eee:	2100      	movs	r1, #0
 8002ef0:	480e      	ldr	r0, [pc, #56]	; (8002f2c <StartMotorServo+0xb64>)
 8002ef2:	f000 fb39 	bl	8003568 <mtr_SetParamAndMove>
	  mtr_SetParamAndMove(&mtrB, DIR_BCK, 3000);
 8002ef6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002efa:	2100      	movs	r1, #0
 8002efc:	480c      	ldr	r0, [pc, #48]	; (8002f30 <StartMotorServo+0xb68>)
 8002efe:	f000 fb33 	bl	8003568 <mtr_SetParamAndMove>
	  int millisOld = HAL_GetTick();
 8002f02:	f001 ffd1 	bl	8004ea8 <HAL_GetTick>
 8002f06:	4603      	mov	r3, r0
 8002f08:	60fb      	str	r3, [r7, #12]
	  while (HAL_GetTick() - millisOld < 1500) {
 8002f0a:	e030      	b.n	8002f6e <StartMotorServo+0xba6>
 8002f0c:	f3af 8000 	nop.w
 8002f10:	20000000 	.word	0x20000000
 8002f14:	40525106 	.word	0x40525106
 8002f18:	00000000 	.word	0x00000000
 8002f1c:	c0390000 	.word	0xc0390000
 8002f20:	20000010 	.word	0x20000010
 8002f24:	20000580 	.word	0x20000580
 8002f28:	42b40000 	.word	0x42b40000
 8002f2c:	20000588 	.word	0x20000588
 8002f30:	20000590 	.word	0x20000590
 8002f34:	00000000 	.word	0x00000000
 8002f38:	20000598 	.word	0x20000598
 8002f3c:	200005b8 	.word	0x200005b8
 8002f40:	20000574 	.word	0x20000574
 8002f44:	43870000 	.word	0x43870000
 8002f48:	40518000 	.word	0x40518000
 8002f4c:	439d8000 	.word	0x439d8000
 8002f50:	42340000 	.word	0x42340000
		  ir = getIRReading(selectedIr);
 8002f54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff f9df 	bl	800231c <getIRReading>
 8002f5e:	62b8      	str	r0, [r7, #40]	; 0x28
		  if (ir < 700) {
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002f66:	da0c      	bge.n	8002f82 <StartMotorServo+0xbba>
			  osDelay(10);
 8002f68:	200a      	movs	r0, #10
 8002f6a:	f007 fa2b 	bl	800a3c4 <osDelay>
	  while (HAL_GetTick() - millisOld < 1500) {
 8002f6e:	f001 ff9b 	bl	8004ea8 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f240 52db 	movw	r2, #1499	; 0x5db
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d9e9      	bls.n	8002f54 <StartMotorServo+0xb8c>
 8002f80:	e000      	b.n	8002f84 <StartMotorServo+0xbbc>
		  }
		  else {
			  break;
 8002f82:	bf00      	nop
		  }
	  }
	  mtr_SetParamAndMove(&mtrA, DIR_FWD, 3000);
 8002f84:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002f88:	2101      	movs	r1, #1
 8002f8a:	483b      	ldr	r0, [pc, #236]	; (8003078 <StartMotorServo+0xcb0>)
 8002f8c:	f000 faec 	bl	8003568 <mtr_SetParamAndMove>
	  mtr_SetParamAndMove(&mtrB, DIR_FWD, 3000);
 8002f90:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002f94:	2101      	movs	r1, #1
 8002f96:	4839      	ldr	r0, [pc, #228]	; (800307c <StartMotorServo+0xcb4>)
 8002f98:	f000 fae6 	bl	8003568 <mtr_SetParamAndMove>
	  ir = getIRReading(selectedIr);
 8002f9c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff f9bb 	bl	800231c <getIRReading>
 8002fa6:	62b8      	str	r0, [r7, #40]	; 0x28
	  while (ir < 700) {
 8002fa8:	e008      	b.n	8002fbc <StartMotorServo+0xbf4>
		  ir = getIRReading(selectedIr);
 8002faa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff f9b4 	bl	800231c <getIRReading>
 8002fb4:	62b8      	str	r0, [r7, #40]	; 0x28
		  osDelay(10);
 8002fb6:	200a      	movs	r0, #10
 8002fb8:	f007 fa04 	bl	800a3c4 <osDelay>
	  while (ir < 700) {
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002fc2:	dbf2      	blt.n	8002faa <StartMotorServo+0xbe2>
	  }

	  // Turn towards carpark
	  mtr_mov_cm(-25);
 8002fc4:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8003070 <StartMotorServo+0xca8>
 8002fc8:	f000 fbc2 	bl	8003750 <mtr_mov_cm>
	  reqDist = -1;
 8002fcc:	4b2c      	ldr	r3, [pc, #176]	; (8003080 <StartMotorServo+0xcb8>)
 8002fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fd2:	601a      	str	r2, [r3, #0]
	  if (turnDir == RIGHT) {
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <StartMotorServo+0xcbc>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d105      	bne.n	8002fe8 <StartMotorServo+0xc20>
		  carTurn(3, 270);
 8002fdc:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8003088 <StartMotorServo+0xcc0>
 8002fe0:	2003      	movs	r0, #3
 8002fe2:	f000 fe63 	bl	8003cac <carTurn>
 8002fe6:	e008      	b.n	8002ffa <StartMotorServo+0xc32>
	  }
	  else if (turnDir == LEFT) {
 8002fe8:	4b26      	ldr	r3, [pc, #152]	; (8003084 <StartMotorServo+0xcbc>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d104      	bne.n	8002ffa <StartMotorServo+0xc32>
		  carTurn(3, 90);
 8002ff0:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800308c <StartMotorServo+0xcc4>
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	f000 fe59 	bl	8003cac <carTurn>
	  }

	  // Go into carpark
	  distToObstacle_min = 20;
 8002ffa:	4925      	ldr	r1, [pc, #148]	; (8003090 <StartMotorServo+0xcc8>)
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	4b24      	ldr	r3, [pc, #144]	; (8003094 <StartMotorServo+0xccc>)
 8003002:	e9c1 2300 	strd	r2, r3, [r1]
	  reqDist = 0;
 8003006:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <StartMotorServo+0xcb8>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
	  cpltErr.finished = 0;
 800300c:	4b22      	ldr	r3, [pc, #136]	; (8003098 <StartMotorServo+0xcd0>)
 800300e:	2200      	movs	r2, #0
 8003010:	719a      	strb	r2, [r3, #6]
	  mtr_SetParamAndMove(&mtrA, DIR_FWD, 3000);
 8003012:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003016:	2101      	movs	r1, #1
 8003018:	4817      	ldr	r0, [pc, #92]	; (8003078 <StartMotorServo+0xcb0>)
 800301a:	f000 faa5 	bl	8003568 <mtr_SetParamAndMove>
	  mtr_SetParamAndMove(&mtrB, DIR_FWD, 3000);
 800301e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003022:	2101      	movs	r1, #1
 8003024:	4815      	ldr	r0, [pc, #84]	; (800307c <StartMotorServo+0xcb4>)
 8003026:	f000 fa9f 	bl	8003568 <mtr_SetParamAndMove>
	  while ((getIRReading(RIGHT) <= 600) || (getIRReading(LEFT) <= 600)) {
 800302a:	e002      	b.n	8003032 <StartMotorServo+0xc6a>
		  osDelay(10);
 800302c:	200a      	movs	r0, #10
 800302e:	f007 f9c9 	bl	800a3c4 <osDelay>
	  while ((getIRReading(RIGHT) <= 600) || (getIRReading(LEFT) <= 600)) {
 8003032:	2002      	movs	r0, #2
 8003034:	f7ff f972 	bl	800231c <getIRReading>
 8003038:	4603      	mov	r3, r0
 800303a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800303e:	ddf5      	ble.n	800302c <StartMotorServo+0xc64>
 8003040:	2000      	movs	r0, #0
 8003042:	f7ff f96b 	bl	800231c <getIRReading>
 8003046:	4603      	mov	r3, r0
 8003048:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800304c:	ddee      	ble.n	800302c <StartMotorServo+0xc64>
	  };
	  osDelay(700);
 800304e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003052:	f007 f9b7 	bl	800a3c4 <osDelay>
	  mtr_stop();
 8003056:	f000 fa2f 	bl	80034b8 <mtr_stop>
	  sprintf(oledbuf, "y: %5.1f", pos_y);
	  OLED_ShowString(10, 30, &oledbuf[0]);
	  OLED_Refresh_Gram();
	  */

	  start = 0;
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <StartMotorServo+0xcd4>)
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	f7ff b9c8 	b.w	80023f4 <StartMotorServo+0x2c>
	  if (!start) continue;
 8003064:	bf00      	nop
  {
 8003066:	f7ff b9c5 	b.w	80023f4 <StartMotorServo+0x2c>
 800306a:	bf00      	nop
 800306c:	f3af 8000 	nop.w
 8003070:	00000000 	.word	0x00000000
 8003074:	c0390000 	.word	0xc0390000
 8003078:	20000588 	.word	0x20000588
 800307c:	20000590 	.word	0x20000590
 8003080:	20000574 	.word	0x20000574
 8003084:	20000010 	.word	0x20000010
 8003088:	43870000 	.word	0x43870000
 800308c:	42b40000 	.word	0x42b40000
 8003090:	20000018 	.word	0x20000018
 8003094:	40340000 	.word	0x40340000
 8003098:	20000580 	.word	0x20000580
 800309c:	20000524 	.word	0x20000524

080030a0 <StartIMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMU */
void StartIMU(void *argument)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMU */
	uint32_t ori_lastSampleTime = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  orientation = calcOri(&ori_lastSampleTime, orientation);
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <StartIMU+0x3c>)
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe f9be 	bl	800143c <calcOri>
 80030c0:	eef0 7a40 	vmov.f32	s15, s0
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <StartIMU+0x3c>)
 80030c6:	edc3 7a00 	vstr	s15, [r3]
	  /*OLED_Clear();
	  sprintf(oledbuf, "Ori = %5.1f", orientation);
	  OLED_ShowString(10, 45, &oledbuf[0]);
	  OLED_Refresh_Gram();*/
	  while (reqDist >= 0) {
 80030ca:	e002      	b.n	80030d2 <StartIMU+0x32>
		  osDelay(5);
 80030cc:	2005      	movs	r0, #5
 80030ce:	f007 f979 	bl	800a3c4 <osDelay>
	  while (reqDist >= 0) {
 80030d2:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <StartIMU+0x40>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	daf8      	bge.n	80030cc <StartIMU+0x2c>
	  orientation = calcOri(&ori_lastSampleTime, orientation);
 80030da:	e7e7      	b.n	80030ac <StartIMU+0xc>
 80030dc:	20000528 	.word	0x20000528
 80030e0:	20000574 	.word	0x20000574

080030e4 <StartUS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUS */
void StartUS(void *argument)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUS */
	HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 80030ec:	2200      	movs	r2, #0
 80030ee:	2110      	movs	r1, #16
 80030f0:	4809      	ldr	r0, [pc, #36]	; (8003118 <StartUS+0x34>)
 80030f2:	f002 fe49 	bl	8005d88 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_SET);
 80030f6:	2201      	movs	r2, #1
 80030f8:	2110      	movs	r1, #16
 80030fa:	4807      	ldr	r0, [pc, #28]	; (8003118 <StartUS+0x34>)
 80030fc:	f002 fe44 	bl	8005d88 <HAL_GPIO_WritePin>
	  Delay_us(10);
 8003100:	200a      	movs	r0, #10
 8003102:	f7ff f8cf 	bl	80022a4 <Delay_us>
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8003106:	2200      	movs	r2, #0
 8003108:	2110      	movs	r1, #16
 800310a:	4803      	ldr	r0, [pc, #12]	; (8003118 <StartUS+0x34>)
 800310c:	f002 fe3c 	bl	8005d88 <HAL_GPIO_WritePin>
	  osDelay(50);
 8003110:	2032      	movs	r0, #50	; 0x32
 8003112:	f007 f957 	bl	800a3c4 <osDelay>
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_SET);
 8003116:	e7ee      	b.n	80030f6 <StartUS+0x12>
 8003118:	40020400 	.word	0x40020400

0800311c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003120:	b672      	cpsid	i
}
 8003122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003124:	e7fe      	b.n	8003124 <Error_Handler+0x8>
	...

08003128 <mtr_init>:

/* All functions */

void mtr_init(TIM_HandleTypeDef* pwm_htimPtr, TIM_HandleTypeDef* encodeA_htimPtr, TIM_HandleTypeDef* encodeB_htimPtr,
		MotorData* mtrA, MotorData* mtrB, MotorPIDData* mtrAPID, MotorPIDData* mtrBPID, MotorServoStatus* backupObj,
		float* orientation, osSemaphoreId_t* oriSemHandlePtr) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]

	motorA = mtrA;
 8003136:	4a2b      	ldr	r2, [pc, #172]	; (80031e4 <mtr_init+0xbc>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6013      	str	r3, [r2, #0]
	motorB = mtrB;
 800313c:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <mtr_init+0xc0>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	6013      	str	r3, [r2, #0]
	motorA->suspend = 0;
 8003142:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <mtr_init+0xbc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
	motorA->suspend = 0;
 800314a:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <mtr_init+0xbc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]

	motorAPID = mtrAPID;
 8003152:	4a26      	ldr	r2, [pc, #152]	; (80031ec <mtr_init+0xc4>)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	6013      	str	r3, [r2, #0]
	motorBPID = mtrBPID;
 8003158:	4a25      	ldr	r2, [pc, #148]	; (80031f0 <mtr_init+0xc8>)
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	6013      	str	r3, [r2, #0]

	backup = backupObj;
 800315e:	4a25      	ldr	r2, [pc, #148]	; (80031f4 <mtr_init+0xcc>)
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	6013      	str	r3, [r2, #0]
	backup_reset();
 8003164:	f000 f854 	bl	8003210 <backup_reset>

	ori = orientation;
 8003168:	4a23      	ldr	r2, [pc, #140]	; (80031f8 <mtr_init+0xd0>)
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	6013      	str	r3, [r2, #0]
	ori_semaphoreHandlePtr = oriSemHandlePtr;
 800316e:	4a23      	ldr	r2, [pc, #140]	; (80031fc <mtr_init+0xd4>)
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	6013      	str	r3, [r2, #0]

	htim8Ptr = pwm_htimPtr;
 8003174:	4a22      	ldr	r2, [pc, #136]	; (8003200 <mtr_init+0xd8>)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6013      	str	r3, [r2, #0]
	htim2Ptr = encodeA_htimPtr;
 800317a:	4a22      	ldr	r2, [pc, #136]	; (8003204 <mtr_init+0xdc>)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	6013      	str	r3, [r2, #0]
	htim3Ptr = encodeB_htimPtr;
 8003180:	4a21      	ldr	r2, [pc, #132]	; (8003208 <mtr_init+0xe0>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim8Ptr, PWMA_TIM_CH);
 8003186:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <mtr_init+0xd8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f004 fb3d 	bl	800780c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim8Ptr, PWMB_TIM_CH);
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <mtr_init+0xd8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2104      	movs	r1, #4
 8003198:	4618      	mov	r0, r3
 800319a:	f004 fb37 	bl	800780c <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start_IT(htim2Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
 800319e:	4b19      	ldr	r3, [pc, #100]	; (8003204 <mtr_init+0xdc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	213c      	movs	r1, #60	; 0x3c
 80031a4:	4618      	mov	r0, r3
 80031a6:	f004 fe21 	bl	8007dec <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(htim3Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
 80031aa:	4b17      	ldr	r3, [pc, #92]	; (8003208 <mtr_init+0xe0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	213c      	movs	r1, #60	; 0x3c
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 fe1b 	bl	8007dec <HAL_TIM_Encoder_Start_IT>

	mtrA_init(0, 0, 0, 0, 1);
 80031b6:	2201      	movs	r2, #1
 80031b8:	eddf 0a14 	vldr	s1, [pc, #80]	; 800320c <mtr_init+0xe4>
 80031bc:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800320c <mtr_init+0xe4>
 80031c0:	2100      	movs	r1, #0
 80031c2:	2000      	movs	r0, #0
 80031c4:	f000 f842 	bl	800324c <mtrA_init>
	mtrB_init(0, 0, 0, 0, 1);
 80031c8:	2201      	movs	r2, #1
 80031ca:	eddf 0a10 	vldr	s1, [pc, #64]	; 800320c <mtr_init+0xe4>
 80031ce:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800320c <mtr_init+0xe4>
 80031d2:	2100      	movs	r1, #0
 80031d4:	2000      	movs	r0, #0
 80031d6:	f000 f89f 	bl	8003318 <mtrB_init>
}
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	200005e4 	.word	0x200005e4
 80031e8:	200005e8 	.word	0x200005e8
 80031ec:	200005ec 	.word	0x200005ec
 80031f0:	200005f0 	.word	0x200005f0
 80031f4:	200005f4 	.word	0x200005f4
 80031f8:	200005f8 	.word	0x200005f8
 80031fc:	20000608 	.word	0x20000608
 8003200:	200005fc 	.word	0x200005fc
 8003204:	20000600 	.word	0x20000600
 8003208:	20000604 	.word	0x20000604
 800320c:	00000000 	.word	0x00000000

08003210 <backup_reset>:

void backup_reset() {
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
	backup->servoDir = STRAIGHT;
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <backup_reset+0x38>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
	backup->mtrADir = DIR_FWD;
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <backup_reset+0x38>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2201      	movs	r2, #1
 8003222:	705a      	strb	r2, [r3, #1]
	backup->mtrAPWM = 0;
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <backup_reset+0x38>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	605a      	str	r2, [r3, #4]
	backup->mtrBDir = DIR_FWD;
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <backup_reset+0x38>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2201      	movs	r2, #1
 8003232:	709a      	strb	r2, [r3, #2]
	backup->mtrBPWM = 0;
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <backup_reset+0x38>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	200005f4 	.word	0x200005f4

0800324c <mtrA_init>:

void mtrA_init(int16_t target, int16_t Kp, float Kd, float Ki, uint8_t reset_timer) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	ed87 0a02 	vstr	s0, [r7, #8]
 8003258:	edc7 0a01 	vstr	s1, [r7, #4]
 800325c:	81fb      	strh	r3, [r7, #14]
 800325e:	460b      	mov	r3, r1
 8003260:	81bb      	strh	r3, [r7, #12]
 8003262:	4613      	mov	r3, r2
 8003264:	70fb      	strb	r3, [r7, #3]

	if (reset_timer)
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <mtrA_init+0x2a>
		__HAL_TIM_SET_COUNTER(htim2Ptr, 0);
 800326c:	4b27      	ldr	r3, [pc, #156]	; (800330c <mtrA_init+0xc0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	625a      	str	r2, [r3, #36]	; 0x24

	motorA->dir = DIR_FWD;
 8003276:	4b26      	ldr	r3, [pc, #152]	; (8003310 <mtrA_init+0xc4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2201      	movs	r2, #1
 800327c:	705a      	strb	r2, [r3, #1]
	motorA->pwmVal = 0;
 800327e:	4b24      	ldr	r3, [pc, #144]	; (8003310 <mtrA_init+0xc4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2200      	movs	r2, #0
 8003284:	605a      	str	r2, [r3, #4]

	motorAPID->count = -(int16_t)__HAL_TIM_GET_COUNTER(htim2Ptr);       		// Counter (signed value)
 8003286:	4b21      	ldr	r3, [pc, #132]	; (800330c <mtrA_init+0xc0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	b29b      	uxth	r3, r3
 8003290:	425b      	negs	r3, r3
 8003292:	b29a      	uxth	r2, r3
 8003294:	4b1f      	ldr	r3, [pc, #124]	; (8003314 <mtrA_init+0xc8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	b212      	sxth	r2, r2
 800329a:	801a      	strh	r2, [r3, #0]
	motorAPID->target = target;
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <mtrA_init+0xc8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	89fa      	ldrh	r2, [r7, #14]
 80032a2:	805a      	strh	r2, [r3, #2]
	motorAPID->error = motorAPID->target - motorAPID->count;
 80032a4:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <mtrA_init+0xc8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	4b19      	ldr	r3, [pc, #100]	; (8003314 <mtrA_init+0xc8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	4b15      	ldr	r3, [pc, #84]	; (8003314 <mtrA_init+0xc8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	b212      	sxth	r2, r2
 80032c2:	809a      	strh	r2, [r3, #4]
	motorAPID->error_area = 0;  		// area under error - to calculate I for PI implementation
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <mtrA_init+0xc8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
	motorAPID->error_old = 0; 			// to calculate D for PID control
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <mtrA_init+0xc8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2200      	movs	r2, #0
 80032d2:	60da      	str	r2, [r3, #12]
	motorAPID->millisOld = HAL_GetTick();			// to calculate I and D for PID control
 80032d4:	f001 fde8 	bl	8004ea8 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <mtrA_init+0xc8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	611a      	str	r2, [r3, #16]
	motorAPID->Kp = Kp;
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <mtrA_init+0xc8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80032e8:	ee07 2a90 	vmov	s15, r2
 80032ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f0:	edc3 7a05 	vstr	s15, [r3, #20]
	motorAPID->Kd = Kd;
 80032f4:	4b07      	ldr	r3, [pc, #28]	; (8003314 <mtrA_init+0xc8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	619a      	str	r2, [r3, #24]
	motorAPID->Ki = Ki;
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <mtrA_init+0xc8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	61da      	str	r2, [r3, #28]
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20000600 	.word	0x20000600
 8003310:	200005e4 	.word	0x200005e4
 8003314:	200005ec 	.word	0x200005ec

08003318 <mtrB_init>:

void mtrB_init(int16_t target, int16_t Kp, float Kd, float Ki, uint8_t reset_timer) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	ed87 0a02 	vstr	s0, [r7, #8]
 8003324:	edc7 0a01 	vstr	s1, [r7, #4]
 8003328:	81fb      	strh	r3, [r7, #14]
 800332a:	460b      	mov	r3, r1
 800332c:	81bb      	strh	r3, [r7, #12]
 800332e:	4613      	mov	r3, r2
 8003330:	70fb      	strb	r3, [r7, #3]

	if (reset_timer)
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d004      	beq.n	8003342 <mtrB_init+0x2a>
		__HAL_TIM_SET_COUNTER(htim3Ptr, 0);
 8003338:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <mtrB_init+0xbc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2200      	movs	r2, #0
 8003340:	625a      	str	r2, [r3, #36]	; 0x24

	motorB->dir = DIR_FWD;
 8003342:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <mtrB_init+0xc0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2201      	movs	r2, #1
 8003348:	705a      	strb	r2, [r3, #1]
	motorB->pwmVal = 0;
 800334a:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <mtrB_init+0xc0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2200      	movs	r2, #0
 8003350:	605a      	str	r2, [r3, #4]

	motorBPID->count = (int16_t)__HAL_TIM_GET_COUNTER(htim3Ptr);       		// Counter (signed value)
 8003352:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <mtrB_init+0xbc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <mtrB_init+0xc4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	b212      	sxth	r2, r2
 8003360:	801a      	strh	r2, [r3, #0]
	motorBPID->target = target;
 8003362:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <mtrB_init+0xc4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	89fa      	ldrh	r2, [r7, #14]
 8003368:	805a      	strh	r2, [r3, #2]
	motorBPID->error = motorBPID->target - motorBPID->count;
 800336a:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <mtrB_init+0xc4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003372:	b29a      	uxth	r2, r3
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <mtrB_init+0xc4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800337c:	b29b      	uxth	r3, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	b29a      	uxth	r2, r3
 8003382:	4b16      	ldr	r3, [pc, #88]	; (80033dc <mtrB_init+0xc4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	b212      	sxth	r2, r2
 8003388:	809a      	strh	r2, [r3, #4]
	motorBPID->error_area = 0;  		// area under error - to calculate I for PI implementation
 800338a:	4b14      	ldr	r3, [pc, #80]	; (80033dc <mtrB_init+0xc4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]
	motorBPID->error_old = 0; 			// to calculate D for PID control
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <mtrB_init+0xc4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2200      	movs	r2, #0
 8003398:	60da      	str	r2, [r3, #12]
	motorBPID->millisOld = HAL_GetTick();			// to calculate I and D for PID control
 800339a:	f001 fd85 	bl	8004ea8 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <mtrB_init+0xc4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	611a      	str	r2, [r3, #16]
	motorBPID->Kp = Kp;
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <mtrB_init+0xc4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80033ae:	ee07 2a90 	vmov	s15, r2
 80033b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033b6:	edc3 7a05 	vstr	s15, [r3, #20]
	motorBPID->Kd = Kd;
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <mtrB_init+0xc4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	619a      	str	r2, [r3, #24]
	motorBPID->Ki = Ki;
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <mtrB_init+0xc4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	61da      	str	r2, [r3, #28]
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000604 	.word	0x20000604
 80033d8:	200005e8 	.word	0x200005e8
 80033dc:	200005f0 	.word	0x200005f0

080033e0 <mtrA_mov>:

void mtrA_mov(uint8_t direction, uint16_t speed) {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	460a      	mov	r2, r1
 80033ea:	71fb      	strb	r3, [r7, #7]
 80033ec:	4613      	mov	r3, r2
 80033ee:	80bb      	strh	r3, [r7, #4]

	// Backward
	if (direction == DIR_BCK) {
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <mtrA_mov+0x2c>
		MOTOR_AIN1_Clr();
 80033f6:	2200      	movs	r2, #0
 80033f8:	2108      	movs	r1, #8
 80033fa:	4812      	ldr	r0, [pc, #72]	; (8003444 <mtrA_mov+0x64>)
 80033fc:	f002 fcc4 	bl	8005d88 <HAL_GPIO_WritePin>
		MOTOR_AIN2_Set();
 8003400:	2201      	movs	r2, #1
 8003402:	2104      	movs	r1, #4
 8003404:	480f      	ldr	r0, [pc, #60]	; (8003444 <mtrA_mov+0x64>)
 8003406:	f002 fcbf 	bl	8005d88 <HAL_GPIO_WritePin>
 800340a:	e009      	b.n	8003420 <mtrA_mov+0x40>
	}
	// Forward
	else {
		MOTOR_AIN1_Set();
 800340c:	2201      	movs	r2, #1
 800340e:	2108      	movs	r1, #8
 8003410:	480c      	ldr	r0, [pc, #48]	; (8003444 <mtrA_mov+0x64>)
 8003412:	f002 fcb9 	bl	8005d88 <HAL_GPIO_WritePin>
		MOTOR_AIN2_Clr();
 8003416:	2200      	movs	r2, #0
 8003418:	2104      	movs	r1, #4
 800341a:	480a      	ldr	r0, [pc, #40]	; (8003444 <mtrA_mov+0x64>)
 800341c:	f002 fcb4 	bl	8005d88 <HAL_GPIO_WritePin>
	}

	// Set speed
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 8003420:	88bb      	ldrh	r3, [r7, #4]
 8003422:	f241 7270 	movw	r2, #6000	; 0x1770
 8003426:	4293      	cmp	r3, r2
 8003428:	d902      	bls.n	8003430 <mtrA_mov+0x50>
 800342a:	f241 7370 	movw	r3, #6000	; 0x1770
 800342e:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim8Ptr, PWMA_TIM_CH, speed);
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <mtrA_mov+0x68>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	88ba      	ldrh	r2, [r7, #4]
 8003438:	635a      	str	r2, [r3, #52]	; 0x34
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40020000 	.word	0x40020000
 8003448:	200005fc 	.word	0x200005fc

0800344c <mtrB_mov>:

void mtrB_mov(uint8_t direction, uint16_t speed) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	460a      	mov	r2, r1
 8003456:	71fb      	strb	r3, [r7, #7]
 8003458:	4613      	mov	r3, r2
 800345a:	80bb      	strh	r3, [r7, #4]

	// Backward
	if (direction == DIR_BCK) {
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10a      	bne.n	8003478 <mtrB_mov+0x2c>
		MOTOR_BIN1_Clr();
 8003462:	2200      	movs	r2, #0
 8003464:	2110      	movs	r1, #16
 8003466:	4812      	ldr	r0, [pc, #72]	; (80034b0 <mtrB_mov+0x64>)
 8003468:	f002 fc8e 	bl	8005d88 <HAL_GPIO_WritePin>
		MOTOR_BIN2_Set();
 800346c:	2201      	movs	r2, #1
 800346e:	2120      	movs	r1, #32
 8003470:	480f      	ldr	r0, [pc, #60]	; (80034b0 <mtrB_mov+0x64>)
 8003472:	f002 fc89 	bl	8005d88 <HAL_GPIO_WritePin>
 8003476:	e009      	b.n	800348c <mtrB_mov+0x40>
	}
	// Forward
	else {
		MOTOR_BIN1_Set();
 8003478:	2201      	movs	r2, #1
 800347a:	2110      	movs	r1, #16
 800347c:	480c      	ldr	r0, [pc, #48]	; (80034b0 <mtrB_mov+0x64>)
 800347e:	f002 fc83 	bl	8005d88 <HAL_GPIO_WritePin>
		MOTOR_BIN2_Clr();
 8003482:	2200      	movs	r2, #0
 8003484:	2120      	movs	r1, #32
 8003486:	480a      	ldr	r0, [pc, #40]	; (80034b0 <mtrB_mov+0x64>)
 8003488:	f002 fc7e 	bl	8005d88 <HAL_GPIO_WritePin>
	}

	// Set speed
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 800348c:	88bb      	ldrh	r3, [r7, #4]
 800348e:	f241 7270 	movw	r2, #6000	; 0x1770
 8003492:	4293      	cmp	r3, r2
 8003494:	d902      	bls.n	800349c <mtrB_mov+0x50>
 8003496:	f241 7370 	movw	r3, #6000	; 0x1770
 800349a:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim8Ptr, PWMB_TIM_CH, speed);
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <mtrB_mov+0x68>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	88ba      	ldrh	r2, [r7, #4]
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40020000 	.word	0x40020000
 80034b4:	200005fc 	.word	0x200005fc

080034b8 <mtr_stop>:

/* Set params and stop both motors */
void mtr_stop() {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
	motorA->dir = DIR_FWD;
 80034bc:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <mtr_stop+0x44>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2201      	movs	r2, #1
 80034c2:	705a      	strb	r2, [r3, #1]
	motorA->pwmVal = 0;
 80034c4:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <mtr_stop+0x44>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2200      	movs	r2, #0
 80034ca:	605a      	str	r2, [r3, #4]
	motorB->dir = DIR_FWD;
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <mtr_stop+0x48>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2201      	movs	r2, #1
 80034d2:	705a      	strb	r2, [r3, #1]
	motorB->pwmVal = 0;
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <mtr_stop+0x48>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2200      	movs	r2, #0
 80034da:	605a      	str	r2, [r3, #4]
	mtrA_mov(DIR_FWD, 0);
 80034dc:	2100      	movs	r1, #0
 80034de:	2001      	movs	r0, #1
 80034e0:	f7ff ff7e 	bl	80033e0 <mtrA_mov>
	mtrB_mov(DIR_FWD, 0);
 80034e4:	2100      	movs	r1, #0
 80034e6:	2001      	movs	r0, #1
 80034e8:	f7ff ffb0 	bl	800344c <mtrB_mov>
	turnServo(STRAIGHT);
 80034ec:	2001      	movs	r0, #1
 80034ee:	f000 ffd9 	bl	80044a4 <turnServo>
	osDelay(100);
 80034f2:	2064      	movs	r0, #100	; 0x64
 80034f4:	f006 ff66 	bl	800a3c4 <osDelay>
}
 80034f8:	bf00      	nop
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	200005e4 	.word	0x200005e4
 8003500:	200005e8 	.word	0x200005e8

08003504 <mtr_mov>:

void mtr_mov(MotorData* motor) {
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	if (motor->suspend > 0) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <mtr_mov+0x1a>
		mtr_stop();
 8003514:	f7ff ffd0 	bl	80034b8 <mtr_stop>
		mtr_continue();
 8003518:	f000 f83a 	bl	8003590 <mtr_continue>
		return;
 800351c:	e01c      	b.n	8003558 <mtr_mov+0x54>
	}
	if (motor == motorA)  {
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <mtr_mov+0x5c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	429a      	cmp	r2, r3
 8003526:	d109      	bne.n	800353c <mtr_mov+0x38>
		mtrA_mov(motor->dir, motor->pwmVal);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	785a      	ldrb	r2, [r3, #1]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	b29b      	uxth	r3, r3
 8003532:	4619      	mov	r1, r3
 8003534:	4610      	mov	r0, r2
 8003536:	f7ff ff53 	bl	80033e0 <mtrA_mov>
 800353a:	e00d      	b.n	8003558 <mtr_mov+0x54>
	}
	else if (motor == motorB) {
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <mtr_mov+0x60>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	429a      	cmp	r2, r3
 8003544:	d108      	bne.n	8003558 <mtr_mov+0x54>
		mtrB_mov(motor->dir, motor->pwmVal);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	785a      	ldrb	r2, [r3, #1]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	b29b      	uxth	r3, r3
 8003550:	4619      	mov	r1, r3
 8003552:	4610      	mov	r0, r2
 8003554:	f7ff ff7a 	bl	800344c <mtrB_mov>
	}
}
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200005e4 	.word	0x200005e4
 8003564:	200005e8 	.word	0x200005e8

08003568 <mtr_SetParamAndMove>:

void mtr_SetParamAndMove(MotorData* motor, uint8_t param_dir, uint32_t param_pwmVal) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	460b      	mov	r3, r1
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	72fb      	strb	r3, [r7, #11]
	motor->dir = param_dir;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	7afa      	ldrb	r2, [r7, #11]
 800357a:	705a      	strb	r2, [r3, #1]
	motor->pwmVal = param_pwmVal;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	605a      	str	r2, [r3, #4]
	mtr_mov(motor);
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f7ff ffbe 	bl	8003504 <mtr_mov>
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <mtr_continue>:
}

/*
 * Restore movement, is called in mtr_mov() if the suspend status is on
 */
void mtr_continue() {
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
	if (!motorA->suspend) return;	// Not suspended or likely an error
 8003594:	4b2f      	ldr	r3, [pc, #188]	; (8003654 <mtr_continue+0xc4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d058      	beq.n	8003650 <mtr_continue+0xc0>

	if ((motorA->suspend == SUS_BACK) || (motorA->suspend == SUS_STOPPID)) {	// Needs SOSBack
 800359e:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <mtr_continue+0xc4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d004      	beq.n	80035b2 <mtr_continue+0x22>
 80035a8:	4b2a      	ldr	r3, [pc, #168]	; (8003654 <mtr_continue+0xc4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d101      	bne.n	80035b6 <mtr_continue+0x26>
		mtr_SOSBack();
 80035b2:	f000 f857 	bl	8003664 <mtr_SOSBack>
		//HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
	}
	if (motorA->suspend == SUS_STOPPID) {	// Stop PID, do not restore movement
 80035b6:	4b27      	ldr	r3, [pc, #156]	; (8003654 <mtr_continue+0xc4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d102      	bne.n	80035c6 <mtr_continue+0x36>
		stopPID();
 80035c0:	f000 f9c4 	bl	800394c <stopPID>
 80035c4:	e033      	b.n	800362e <mtr_continue+0x9e>
	}
	else {									// Restore movement, in case of SUS_BACK
		turnServo(backup->servoDir);
 80035c6:	4b24      	ldr	r3, [pc, #144]	; (8003658 <mtr_continue+0xc8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 ff69 	bl	80044a4 <turnServo>
		motorA->dir = backup->mtrADir;
 80035d2:	4b21      	ldr	r3, [pc, #132]	; (8003658 <mtr_continue+0xc8>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <mtr_continue+0xc4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	7852      	ldrb	r2, [r2, #1]
 80035dc:	705a      	strb	r2, [r3, #1]
		motorA->pwmVal = backup->mtrAPWM;
 80035de:	4b1e      	ldr	r3, [pc, #120]	; (8003658 <mtr_continue+0xc8>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <mtr_continue+0xc4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6852      	ldr	r2, [r2, #4]
 80035e8:	605a      	str	r2, [r3, #4]
		motorB->dir = backup->mtrBDir;
 80035ea:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <mtr_continue+0xc8>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b1b      	ldr	r3, [pc, #108]	; (800365c <mtr_continue+0xcc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	7892      	ldrb	r2, [r2, #2]
 80035f4:	705a      	strb	r2, [r3, #1]
		motorB->pwmVal = backup->mtrBPWM;
 80035f6:	4b18      	ldr	r3, [pc, #96]	; (8003658 <mtr_continue+0xc8>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4b18      	ldr	r3, [pc, #96]	; (800365c <mtr_continue+0xcc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6892      	ldr	r2, [r2, #8]
 8003600:	605a      	str	r2, [r3, #4]
		mtrA_mov(motorA->dir, motorA->pwmVal);
 8003602:	4b14      	ldr	r3, [pc, #80]	; (8003654 <mtr_continue+0xc4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	785a      	ldrb	r2, [r3, #1]
 8003608:	4b12      	ldr	r3, [pc, #72]	; (8003654 <mtr_continue+0xc4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	b29b      	uxth	r3, r3
 8003610:	4619      	mov	r1, r3
 8003612:	4610      	mov	r0, r2
 8003614:	f7ff fee4 	bl	80033e0 <mtrA_mov>
		mtrB_mov(motorB->dir, motorB->pwmVal);
 8003618:	4b10      	ldr	r3, [pc, #64]	; (800365c <mtr_continue+0xcc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	785a      	ldrb	r2, [r3, #1]
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <mtr_continue+0xcc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	b29b      	uxth	r3, r3
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f7ff ff0f 	bl	800344c <mtrB_mov>
	}
	backup_reset();
 800362e:	f7ff fdef 	bl	8003210 <backup_reset>
	motorA->suspend = 0;
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <mtr_continue+0xc4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
	motorB->suspend = 0;
 800363a:	4b08      	ldr	r3, [pc, #32]	; (800365c <mtr_continue+0xcc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_SET);
 8003642:	2201      	movs	r2, #1
 8003644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003648:	4805      	ldr	r0, [pc, #20]	; (8003660 <mtr_continue+0xd0>)
 800364a:	f002 fb9d 	bl	8005d88 <HAL_GPIO_WritePin>
 800364e:	e000      	b.n	8003652 <mtr_continue+0xc2>
	if (!motorA->suspend) return;	// Not suspended or likely an error
 8003650:	bf00      	nop
}
 8003652:	bd80      	pop	{r7, pc}
 8003654:	200005e4 	.word	0x200005e4
 8003658:	200005f4 	.word	0x200005f4
 800365c:	200005e8 	.word	0x200005e8
 8003660:	40021000 	.word	0x40021000

08003664 <mtr_SOSBack>:

/* Used in emergency cases when car is too close to obstacles only */
float mtr_SOSBack() {
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
	mtrA_mov(DIR_BCK, 1800);
 8003668:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 800366c:	2000      	movs	r0, #0
 800366e:	f7ff feb7 	bl	80033e0 <mtrA_mov>
	mtrB_mov(DIR_BCK, 1800);
 8003672:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8003676:	2000      	movs	r0, #0
 8003678:	f7ff fee8 	bl	800344c <mtrB_mov>
	osDelay(500);
 800367c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003680:	f006 fea0 	bl	800a3c4 <osDelay>
	mtr_stop();
 8003684:	f7ff ff18 	bl	80034b8 <mtr_stop>
	return SOSBACK_DIST_CNT / CNT_PER_CM;
 8003688:	4b02      	ldr	r3, [pc, #8]	; (8003694 <mtr_SOSBack+0x30>)
 800368a:	ee07 3a90 	vmov	s15, r3
}
 800368e:	eeb0 0a67 	vmov.f32	s0, s15
 8003692:	bd80      	pop	{r7, pc}
 8003694:	c12eb4b4 	.word	0xc12eb4b4

08003698 <mtr_mov_cnt>:

void mtr_mov_cnt(int target_A, int target_B) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	mtrA_init((int16_t)target_A, 2, 0.05, 0.0001, 1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	2201      	movs	r2, #1
 80036a8:	eddf 0a23 	vldr	s1, [pc, #140]	; 8003738 <mtr_mov_cnt+0xa0>
 80036ac:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800373c <mtr_mov_cnt+0xa4>
 80036b0:	2102      	movs	r1, #2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fdca 	bl	800324c <mtrA_init>
	mtrB_init((int16_t)target_B, 2, 0.05, 0.0001, 1);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	b21b      	sxth	r3, r3
 80036bc:	2201      	movs	r2, #1
 80036be:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8003738 <mtr_mov_cnt+0xa0>
 80036c2:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800373c <mtr_mov_cnt+0xa4>
 80036c6:	2102      	movs	r1, #2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fe25 	bl	8003318 <mtrB_init>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 80036ce:	e019      	b.n	8003704 <mtr_mov_cnt+0x6c>
		PID_Control(motorA, motorAPID);
 80036d0:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <mtr_mov_cnt+0xa8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <mtr_mov_cnt+0xac>)
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	4611      	mov	r1, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f88a 	bl	80037f4 <PID_Control>
		PID_Control(motorB, motorBPID);
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <mtr_mov_cnt+0xb0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a19      	ldr	r2, [pc, #100]	; (800374c <mtr_mov_cnt+0xb4>)
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	4611      	mov	r1, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f882 	bl	80037f4 <PID_Control>
		mtr_mov(motorA);
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <mtr_mov_cnt+0xa8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff05 	bl	8003504 <mtr_mov>
		mtr_mov(motorB);
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <mtr_mov_cnt+0xb0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff ff00 	bl	8003504 <mtr_mov>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <mtr_mov_cnt+0xac>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	bfb8      	it	lt
 8003710:	425b      	neglt	r3, r3
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b32      	cmp	r3, #50	; 0x32
 8003716:	d8db      	bhi.n	80036d0 <mtr_mov_cnt+0x38>
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <mtr_mov_cnt+0xb4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	bfb8      	it	lt
 8003724:	425b      	neglt	r3, r3
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b32      	cmp	r3, #50	; 0x32
 800372a:	d8d1      	bhi.n	80036d0 <mtr_mov_cnt+0x38>
	}
	mtr_stop();
 800372c:	f7ff fec4 	bl	80034b8 <mtr_stop>
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	38d1b717 	.word	0x38d1b717
 800373c:	3d4ccccd 	.word	0x3d4ccccd
 8003740:	200005e4 	.word	0x200005e4
 8003744:	200005ec 	.word	0x200005ec
 8003748:	200005e8 	.word	0x200005e8
 800374c:	200005f0 	.word	0x200005f0

08003750 <mtr_mov_cm>:
	}
	mtr_stop();
}


double mtr_mov_cm(double cm) {
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	ed87 0b00 	vstr	d0, [r7]
	double cnt = cm * CNT_PER_CM;
 800375a:	a324      	add	r3, pc, #144	; (adr r3, 80037ec <mtr_mov_cm+0x9c>)
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003764:	f7fc ff48 	bl	80005f8 <__aeabi_dmul>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	cnt = round(cnt);
 8003770:	ed97 0b02 	vldr	d0, [r7, #8]
 8003774:	f00c fa98 	bl	800fca8 <round>
 8003778:	ed87 0b02 	vstr	d0, [r7, #8]
	mtr_mov_cnt((int)cnt, (int)cnt);
 800377c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003780:	f7fd f9ea 	bl	8000b58 <__aeabi_d2iz>
 8003784:	4604      	mov	r4, r0
 8003786:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800378a:	f7fd f9e5 	bl	8000b58 <__aeabi_d2iz>
 800378e:	4603      	mov	r3, r0
 8003790:	4619      	mov	r1, r3
 8003792:	4620      	mov	r0, r4
 8003794:	f7ff ff80 	bl	8003698 <mtr_mov_cnt>
	return ((motorAPID->count + motorBPID->count) / 2) / CNT_PER_CM;
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <mtr_mov_cm+0x90>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <mtr_mov_cm+0x94>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037aa:	4413      	add	r3, r2
 80037ac:	0fda      	lsrs	r2, r3, #31
 80037ae:	4413      	add	r3, r2
 80037b0:	105b      	asrs	r3, r3, #1
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ba:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80037e8 <mtr_mov_cm+0x98>
 80037be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80037c2:	ee16 0a90 	vmov	r0, s13
 80037c6:	f7fc febf 	bl	8000548 <__aeabi_f2d>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80037d2:	eeb0 0a47 	vmov.f32	s0, s14
 80037d6:	eef0 0a67 	vmov.f32	s1, s15
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd90      	pop	{r4, r7, pc}
 80037e0:	200005ec 	.word	0x200005ec
 80037e4:	200005f0 	.word	0x200005f0
 80037e8:	42928831 	.word	0x42928831
 80037ec:	20000000 	.word	0x20000000
 80037f0:	40525106 	.word	0x40525106

080037f4 <PID_Control>:

void PID_Control(MotorData* motor, MotorPIDData* motorPID) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
	  //Control Loop
	if (abs(motorPID->error)>MAX_PID_ERR) { //more than 100  difference
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	bfb8      	it	lt
 8003808:	425b      	neglt	r3, r3
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b32      	cmp	r3, #50	; 0x32
 800380e:	f240 8093 	bls.w	8003938 <PID_Control+0x144>
  	    motorPID->error = motorPID->target - motorPID->count;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003818:	b29a      	uxth	r2, r3
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003820:	b29b      	uxth	r3, r3
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	b29b      	uxth	r3, r3
 8003826:	b21a      	sxth	r2, r3
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	809a      	strh	r2, [r3, #4]

  	    if (motorPID->error > 0)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	dd03      	ble.n	800383e <PID_Control+0x4a>
        	motor->dir = DIR_FWD;	// Forward
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	705a      	strb	r2, [r3, #1]
 800383c:	e002      	b.n	8003844 <PID_Control+0x50>
        else
        	motor->dir = DIR_BCK;	// Backward
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	705a      	strb	r2, [r3, #1]

        int32_t millisNow = HAL_GetTick();
 8003844:	f001 fb30 	bl	8004ea8 <HAL_GetTick>
 8003848:	4603      	mov	r3, r0
 800384a:	617b      	str	r3, [r7, #20]
        int32_t dt = (millisNow - motorPID->millisOld); // time elapsed in millisecond
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	613b      	str	r3, [r7, #16]
        motorPID->millisOld = millisNow; // store the current time for next round
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	611a      	str	r2, [r3, #16]

        motorPID->error_area = motorPID->error_area + motorPID->error * dt; // area under error for Ki
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003866:	4619      	mov	r1, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	441a      	add	r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	609a      	str	r2, [r3, #8]

        int32_t error_change = motorPID->error - motorPID->error_old; // change in error
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800387a:	461a      	mov	r2, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	60fb      	str	r3, [r7, #12]
        motorPID->error_old = motorPID->error; //store the error for next round
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800388a:	461a      	mov	r2, r3
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	60da      	str	r2, [r3, #12]
        float error_rate = (float)error_change / dt; // for Kd
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	ee07 3a90 	vmov	s15, r3
 80038a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038a8:	edc7 7a02 	vstr	s15, [r7, #8]

        motor->pwmVal = abs((int32_t)(motorPID->error * motorPID->Kp + motorPID->error_area * motorPID->Ki + error_rate * motorPID->Kd)) / 2;  // PID
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80038c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	ee07 3a90 	vmov	s15, r3
 80038cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	edd3 7a07 	vldr	s15, [r3, #28]
 80038d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	edd3 6a06 	vldr	s13, [r3, #24]
 80038e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80038e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038f4:	ee17 3a90 	vmov	r3, s15
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bfb8      	it	lt
 80038fc:	425b      	neglt	r3, r3
 80038fe:	0fda      	lsrs	r2, r3, #31
 8003900:	4413      	add	r3, r2
 8003902:	105b      	asrs	r3, r3, #1
 8003904:	461a      	mov	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	605a      	str	r2, [r3, #4]
        osDelay(10);
 800390a:	200a      	movs	r0, #10
 800390c:	f006 fd5a 	bl	800a3c4 <osDelay>
        if (motor->pwmVal > MAX_SPEED)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f241 7270 	movw	r2, #6000	; 0x1770
 8003918:	4293      	cmp	r3, r2
 800391a:	d903      	bls.n	8003924 <PID_Control+0x130>
        	motor->pwmVal = MAX_SPEED;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f241 7270 	movw	r2, #6000	; 0x1770
 8003922:	605a      	str	r2, [r3, #4]
        if (motor->pwmVal < MIN_SPEED)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800392c:	d20a      	bcs.n	8003944 <PID_Control+0x150>
        	motor-> pwmVal = MIN_SPEED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003934:	605a      	str	r2, [r3, #4]
	} // if loop
	else {
		motor->dir = DIR_FWD;
		motor->pwmVal = 0;
	}
}
 8003936:	e005      	b.n	8003944 <PID_Control+0x150>
		motor->dir = DIR_FWD;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	705a      	strb	r2, [r3, #1]
		motor->pwmVal = 0;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	605a      	str	r2, [r3, #4]
}
 8003944:	bf00      	nop
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <stopPID>:

void stopPID() {
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
	motorAPID->error = 0;
 8003950:	4b16      	ldr	r3, [pc, #88]	; (80039ac <stopPID+0x60>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2200      	movs	r2, #0
 8003956:	809a      	strh	r2, [r3, #4]
	motorBPID->error = 0;
 8003958:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <stopPID+0x64>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2200      	movs	r2, #0
 800395e:	809a      	strh	r2, [r3, #4]
	motorAPID->target = motorAPID->count;
 8003960:	4b12      	ldr	r3, [pc, #72]	; (80039ac <stopPID+0x60>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <stopPID+0x60>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f9b2 2000 	ldrsh.w	r2, [r2]
 800396c:	805a      	strh	r2, [r3, #2]
	motorBPID->target = motorBPID->count;
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <stopPID+0x64>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <stopPID+0x64>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f9b2 2000 	ldrsh.w	r2, [r2]
 800397a:	805a      	strh	r2, [r3, #2]
	mtr_stop();
 800397c:	f7ff fd9c 	bl	80034b8 <mtr_stop>
	// Also clear backup
	backup->mtrADir = DIR_FWD;
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <stopPID+0x68>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2201      	movs	r2, #1
 8003986:	705a      	strb	r2, [r3, #1]
	backup->mtrBDir = DIR_FWD;
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <stopPID+0x68>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2201      	movs	r2, #1
 800398e:	709a      	strb	r2, [r3, #2]
	backup->mtrAPWM = 0;
 8003990:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <stopPID+0x68>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2200      	movs	r2, #0
 8003996:	605a      	str	r2, [r3, #4]
	backup->mtrBPWM = 0;
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <stopPID+0x68>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	609a      	str	r2, [r3, #8]
	backup->servoDir = STRAIGHT;
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <stopPID+0x68>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2201      	movs	r2, #1
 80039a6:	701a      	strb	r2, [r3, #0]
}
 80039a8:	bf00      	nop
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	200005ec 	.word	0x200005ec
 80039b0:	200005f0 	.word	0x200005f0
 80039b4:	200005f4 	.word	0x200005f4

080039b8 <turn>:

void turn(float turning_angle) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	ed87 0a01 	vstr	s0, [r7, #4]
	if (abs(turning_angle) < MAX_ORI_ERR)		// Too small, turn may not be accurate
 80039c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80039c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039ca:	ee17 3a90 	vmov	r3, s15
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bfb8      	it	lt
 80039d2:	425b      	neglt	r3, r3
 80039d4:	ee07 3a90 	vmov	s15, r3
 80039d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039dc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80039e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e8:	f100 814b 	bmi.w	8003c82 <turn+0x2ca>
		return;
	if ((turning_angle < 0) || (turning_angle >= 360))	// Invalid turning angle
 80039ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80039f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f8:	f100 8145 	bmi.w	8003c86 <turn+0x2ce>
 80039fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a00:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8003c90 <turn+0x2d8>
 8003a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0c:	f280 813b 	bge.w	8003c86 <turn+0x2ce>
		return;

	float target_ori = (*ori) + turning_angle;
 8003a10:	4ba0      	ldr	r3, [pc, #640]	; (8003c94 <turn+0x2dc>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	edd3 7a00 	vldr	s15, [r3]
 8003a18:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a20:	edc7 7a07 	vstr	s15, [r7, #28]
	while (target_ori >= 360) target_ori -= 360;
 8003a24:	e007      	b.n	8003a36 <turn+0x7e>
 8003a26:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a2a:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8003c90 <turn+0x2d8>
 8003a2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a32:	edc7 7a07 	vstr	s15, [r7, #28]
 8003a36:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a3a:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8003c90 <turn+0x2d8>
 8003a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	daee      	bge.n	8003a26 <turn+0x6e>
	while (target_ori < 0) target_ori += 360;
 8003a48:	e007      	b.n	8003a5a <turn+0xa2>
 8003a4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a4e:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8003c90 <turn+0x2d8>
 8003a52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a56:	edc7 7a07 	vstr	s15, [r7, #28]
 8003a5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a66:	d4f0      	bmi.n	8003a4a <turn+0x92>

	uint8_t near_0 = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	76fb      	strb	r3, [r7, #27]
	if ((target_ori < MAX_ORI_ERR) || (target_ori > 360 - MAX_ORI_ERR)) {
 8003a6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a70:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7c:	d408      	bmi.n	8003a90 <turn+0xd8>
 8003a7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a82:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8003c98 <turn+0x2e0>
 8003a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8e:	dd01      	ble.n	8003a94 <turn+0xdc>
		near_0 = 1;
 8003a90:	2301      	movs	r3, #1
 8003a92:	76fb      	strb	r3, [r7, #27]
	}

	uint8_t mtr_dir = 1;	// 0: stop, 1: fwd, 2: bck
 8003a94:	2301      	movs	r3, #1
 8003a96:	76bb      	strb	r3, [r7, #26]

	while (mtr_dir) {
 8003a98:	e0ec      	b.n	8003c74 <turn+0x2bc>
		if (turning_angle <= 180) {	// Turn left
 8003a9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a9e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003c9c <turn+0x2e4>
 8003aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aaa:	d82e      	bhi.n	8003b0a <turn+0x152>
			if (mtr_dir == 1) {
 8003aac:	7ebb      	ldrb	r3, [r7, #26]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d115      	bne.n	8003ade <turn+0x126>
				turnServo(LEFT);
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f000 fcf6 	bl	80044a4 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_FWD, 1800);
 8003ab8:	4b79      	ldr	r3, [pc, #484]	; (8003ca0 <turn+0x2e8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff fd50 	bl	8003568 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_FWD, 1800);
 8003ac8:	4b76      	ldr	r3, [pc, #472]	; (8003ca4 <turn+0x2ec>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fd48 	bl	8003568 <mtr_SetParamAndMove>
				mtr_dir = 2;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	76bb      	strb	r3, [r7, #26]
 8003adc:	e043      	b.n	8003b66 <turn+0x1ae>
			}
			else {
				turnServo(RIGHT);
 8003ade:	2002      	movs	r0, #2
 8003ae0:	f000 fce0 	bl	80044a4 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_BCK, 1800);
 8003ae4:	4b6e      	ldr	r3, [pc, #440]	; (8003ca0 <turn+0x2e8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fd3a 	bl	8003568 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_BCK, 1800);
 8003af4:	4b6b      	ldr	r3, [pc, #428]	; (8003ca4 <turn+0x2ec>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fd32 	bl	8003568 <mtr_SetParamAndMove>
				mtr_dir = 1;
 8003b04:	2301      	movs	r3, #1
 8003b06:	76bb      	strb	r3, [r7, #26]
 8003b08:	e02d      	b.n	8003b66 <turn+0x1ae>
			}
		}
		else {						// Turn right
			if (mtr_dir == 1) {
 8003b0a:	7ebb      	ldrb	r3, [r7, #26]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d115      	bne.n	8003b3c <turn+0x184>
				turnServo(RIGHT);
 8003b10:	2002      	movs	r0, #2
 8003b12:	f000 fcc7 	bl	80044a4 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_FWD, 1800);
 8003b16:	4b62      	ldr	r3, [pc, #392]	; (8003ca0 <turn+0x2e8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003b1e:	2101      	movs	r1, #1
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fd21 	bl	8003568 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_FWD, 1800);
 8003b26:	4b5f      	ldr	r3, [pc, #380]	; (8003ca4 <turn+0x2ec>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003b2e:	2101      	movs	r1, #1
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fd19 	bl	8003568 <mtr_SetParamAndMove>
				mtr_dir = 2;
 8003b36:	2302      	movs	r3, #2
 8003b38:	76bb      	strb	r3, [r7, #26]
 8003b3a:	e014      	b.n	8003b66 <turn+0x1ae>
			}
			else {
				turnServo(LEFT);
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	f000 fcb1 	bl	80044a4 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_BCK, 1800);
 8003b42:	4b57      	ldr	r3, [pc, #348]	; (8003ca0 <turn+0x2e8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fd0b 	bl	8003568 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_BCK, 1800);
 8003b52:	4b54      	ldr	r3, [pc, #336]	; (8003ca4 <turn+0x2ec>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fd03 	bl	8003568 <mtr_SetParamAndMove>
				mtr_dir = 1;
 8003b62:	2301      	movs	r3, #1
 8003b64:	76bb      	strb	r3, [r7, #26]
			}
		}

		// Poll orientation value and break if needed
		if (!near_0) {
 8003b66:	7efb      	ldrb	r3, [r7, #27]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d12a      	bne.n	8003bc2 <turn+0x20a>
			for (int i = 0; i < 400; i++) {
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	e022      	b.n	8003bb8 <turn+0x200>
				if (abs((*ori) - target_ori) < MAX_ORI_ERR) {
 8003b72:	4b48      	ldr	r3, [pc, #288]	; (8003c94 <turn+0x2dc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	ed93 7a00 	vldr	s14, [r3]
 8003b7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b86:	ee17 3a90 	vmov	r3, s15
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bfb8      	it	lt
 8003b8e:	425b      	neglt	r3, r3
 8003b90:	ee07 3a90 	vmov	s15, r3
 8003b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b98:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba4:	d502      	bpl.n	8003bac <turn+0x1f4>
					mtr_dir = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	76bb      	strb	r3, [r7, #26]
					break;
 8003baa:	e061      	b.n	8003c70 <turn+0x2b8>
				}
				osDelay(1);
 8003bac:	2001      	movs	r0, #1
 8003bae:	f006 fc09 	bl	800a3c4 <osDelay>
			for (int i = 0; i < 400; i++) {
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003bbe:	dbd8      	blt.n	8003b72 <turn+0x1ba>
 8003bc0:	e056      	b.n	8003c70 <turn+0x2b8>
			}
		}
		else {
			float bound_lo, bound_hi;
			if (target_ori > 350) {
 8003bc2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bc6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003ca8 <turn+0x2f0>
 8003bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd2:	dd14      	ble.n	8003bfe <turn+0x246>
				bound_lo = target_ori - MAX_ORI_ERR;
 8003bd4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bd8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003bdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003be0:	edc7 7a04 	vstr	s15, [r7, #16]
				bound_hi = target_ori + MAX_ORI_ERR - 360;
 8003be4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003be8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003bec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bf0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003c90 <turn+0x2d8>
 8003bf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bf8:	edc7 7a03 	vstr	s15, [r7, #12]
 8003bfc:	e013      	b.n	8003c26 <turn+0x26e>
			}
			else {
				bound_lo = target_ori - MAX_ORI_ERR + 360;
 8003bfe:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c02:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003c06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c0a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003c90 <turn+0x2d8>
 8003c0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c12:	edc7 7a04 	vstr	s15, [r7, #16]
				bound_hi = target_ori + MAX_ORI_ERR;
 8003c16:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c1a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003c1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c22:	edc7 7a03 	vstr	s15, [r7, #12]
			}
			for (int i = 0; i < 250; i++) {
 8003c26:	2300      	movs	r3, #0
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	e01e      	b.n	8003c6a <turn+0x2b2>
				if (((*ori) > bound_lo) || ((*ori) < bound_hi)) {
 8003c2c:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <turn+0x2dc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	edd3 7a00 	vldr	s15, [r3]
 8003c34:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c40:	d40a      	bmi.n	8003c58 <turn+0x2a0>
 8003c42:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <turn+0x2dc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	edd3 7a00 	vldr	s15, [r3]
 8003c4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c56:	dd02      	ble.n	8003c5e <turn+0x2a6>
					mtr_dir = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	76bb      	strb	r3, [r7, #26]
					break;
 8003c5c:	e008      	b.n	8003c70 <turn+0x2b8>
				}
				osDelay(2);
 8003c5e:	2002      	movs	r0, #2
 8003c60:	f006 fbb0 	bl	800a3c4 <osDelay>
			for (int i = 0; i < 250; i++) {
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	3301      	adds	r3, #1
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2bf9      	cmp	r3, #249	; 0xf9
 8003c6e:	dddd      	ble.n	8003c2c <turn+0x274>
			}
		}
		mtr_stop();
 8003c70:	f7ff fc22 	bl	80034b8 <mtr_stop>
	while (mtr_dir) {
 8003c74:	7ebb      	ldrb	r3, [r7, #26]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f47f af0f 	bne.w	8003a9a <turn+0xe2>
	}
	mtr_stop();
 8003c7c:	f7ff fc1c 	bl	80034b8 <mtr_stop>
 8003c80:	e002      	b.n	8003c88 <turn+0x2d0>
		return;
 8003c82:	bf00      	nop
 8003c84:	e000      	b.n	8003c88 <turn+0x2d0>
		return;
 8003c86:	bf00      	nop
}
 8003c88:	3720      	adds	r7, #32
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	43b40000 	.word	0x43b40000
 8003c94:	200005f8 	.word	0x200005f8
 8003c98:	43b34000 	.word	0x43b34000
 8003c9c:	43340000 	.word	0x43340000
 8003ca0:	200005e4 	.word	0x200005e4
 8003ca4:	200005e8 	.word	0x200005e8
 8003ca8:	43af0000 	.word	0x43af0000

08003cac <carTurn>:
/*
 * mtr_dir = { 0: stop, 1: fwd, 2: bck }
 * turning_angle only accept 90 (left) or 270 (right)
 */
void carTurn(uint8_t mtr_dir, float turning_angle) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	ed87 0a00 	vstr	s0, [r7]
 8003cb8:	71fb      	strb	r3, [r7, #7]
	// Calculate target orientation
	float target_ori = (*ori) + turning_angle;
 8003cba:	4bad      	ldr	r3, [pc, #692]	; (8003f70 <carTurn+0x2c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	edd3 7a00 	vldr	s15, [r3]
 8003cc2:	ed97 7a00 	vldr	s14, [r7]
 8003cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	while (target_ori >= 360) target_ori -= 360;
 8003cce:	e007      	b.n	8003ce0 <carTurn+0x34>
 8003cd0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003cd4:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8003f74 <carTurn+0x2c8>
 8003cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cdc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8003ce0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ce4:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8003f74 <carTurn+0x2c8>
 8003ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf0:	daee      	bge.n	8003cd0 <carTurn+0x24>
	while (target_ori < 0) target_ori += 360;
 8003cf2:	e007      	b.n	8003d04 <carTurn+0x58>
 8003cf4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003cf8:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003f74 <carTurn+0x2c8>
 8003cfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d00:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8003d04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d10:	d4f0      	bmi.n	8003cf4 <carTurn+0x48>
	if (mtr_dir == 3) target_ori = 180;
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d101      	bne.n	8003d1c <carTurn+0x70>
 8003d18:	4b97      	ldr	r3, [pc, #604]	; (8003f78 <carTurn+0x2cc>)
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24

	// Adjustments for near 0 degree target orientation
	uint8_t near_0 = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	float bound_lo, bound_hi;
	if ((target_ori < MAX_ORI_ERR) || (target_ori > 360 - MAX_ORI_ERR)) {
 8003d22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d26:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d32:	d408      	bmi.n	8003d46 <carTurn+0x9a>
 8003d34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d38:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8003f7c <carTurn+0x2d0>
 8003d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d44:	dd34      	ble.n	8003db0 <carTurn+0x104>
		near_0 = 1;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (target_ori > 350) {
 8003d4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d50:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8003f80 <carTurn+0x2d4>
 8003d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5c:	dd14      	ble.n	8003d88 <carTurn+0xdc>
			bound_lo = target_ori - MAX_ORI_ERR;
 8003d5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d62:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003d66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d6a:	edc7 7a07 	vstr	s15, [r7, #28]
			bound_hi = target_ori + MAX_ORI_ERR - 360;
 8003d6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d72:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003d76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d7a:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003f74 <carTurn+0x2c8>
 8003d7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d82:	edc7 7a06 	vstr	s15, [r7, #24]
 8003d86:	e013      	b.n	8003db0 <carTurn+0x104>
		}
		else {
			bound_lo = target_ori - MAX_ORI_ERR + 360;
 8003d88:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d8c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003d90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d94:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003f74 <carTurn+0x2c8>
 8003d98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d9c:	edc7 7a07 	vstr	s15, [r7, #28]
			bound_hi = target_ori + MAX_ORI_ERR;
 8003da0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003da4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003da8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dac:	edc7 7a06 	vstr	s15, [r7, #24]
	osDelay(200);
	*/

	// Start servo and motor in turn direction
	double abs_turning_angle;
	if (mtr_dir == 3) {
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d115      	bne.n	8003de2 <carTurn+0x136>
		if (turning_angle <= 180) {
 8003db6:	edd7 7a00 	vldr	s15, [r7]
 8003dba:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003f84 <carTurn+0x2d8>
 8003dbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc6:	d803      	bhi.n	8003dd0 <carTurn+0x124>
			turnServo(LEFT);
 8003dc8:	2000      	movs	r0, #0
 8003dca:	f000 fb6b 	bl	80044a4 <turnServo>
 8003dce:	e002      	b.n	8003dd6 <carTurn+0x12a>
		}
		else {
			turnServo(RIGHT);
 8003dd0:	2002      	movs	r0, #2
 8003dd2:	f000 fb67 	bl	80044a4 <turnServo>
		}
		abs_turning_angle = 90;
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	4b6b      	ldr	r3, [pc, #428]	; (8003f88 <carTurn+0x2dc>)
 8003ddc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003de0:	e033      	b.n	8003e4a <carTurn+0x19e>
	}
	else if (((turning_angle <= 180) && (mtr_dir == 1)) || ((turning_angle > 180) && (mtr_dir == 2))) {
 8003de2:	edd7 7a00 	vldr	s15, [r7]
 8003de6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003f84 <carTurn+0x2d8>
 8003dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df2:	d802      	bhi.n	8003dfa <carTurn+0x14e>
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d00b      	beq.n	8003e12 <carTurn+0x166>
 8003dfa:	edd7 7a00 	vldr	s15, [r7]
 8003dfe:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003f84 <carTurn+0x2d8>
 8003e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0a:	dd0d      	ble.n	8003e28 <carTurn+0x17c>
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d10a      	bne.n	8003e28 <carTurn+0x17c>
		turnServo(LEFT);
 8003e12:	2000      	movs	r0, #0
 8003e14:	f000 fb46 	bl	80044a4 <turnServo>
		abs_turning_angle = turning_angle;
 8003e18:	6838      	ldr	r0, [r7, #0]
 8003e1a:	f7fc fb95 	bl	8000548 <__aeabi_f2d>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003e26:	e010      	b.n	8003e4a <carTurn+0x19e>
	}
	else {
		turnServo(RIGHT);
 8003e28:	2002      	movs	r0, #2
 8003e2a:	f000 fb3b 	bl	80044a4 <turnServo>
		abs_turning_angle = 360 - turning_angle;
 8003e2e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003f74 <carTurn+0x2c8>
 8003e32:	edd7 7a00 	vldr	s15, [r7]
 8003e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e3a:	ee17 0a90 	vmov	r0, s15
 8003e3e:	f7fc fb83 	bl	8000548 <__aeabi_f2d>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	//turnServo(RIGHT);
	osDelay(200);
 8003e4a:	20c8      	movs	r0, #200	; 0xc8
 8003e4c:	f006 faba 	bl	800a3c4 <osDelay>

	int mtrSpeed = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
	if ((mtr_dir == 1) || (mtr_dir == 3)) {
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d002      	beq.n	8003e60 <carTurn+0x1b4>
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d121      	bne.n	8003ea4 <carTurn+0x1f8>
		mtrSpeed = (int)abs_turning_angle * 35;
 8003e60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e64:	f7fc fe78 	bl	8000b58 <__aeabi_d2iz>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	00da      	lsls	r2, r3, #3
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	60fb      	str	r3, [r7, #12]
		if (mtrSpeed < 2500) mtrSpeed = 2500;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	dc02      	bgt.n	8003e86 <carTurn+0x1da>
 8003e80:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003e84:	60fb      	str	r3, [r7, #12]
		mtr_SetParamAndMove(motorA, DIR_FWD, mtrSpeed);
 8003e86:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <carTurn+0x2e0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff fb6a 	bl	8003568 <mtr_SetParamAndMove>
		mtr_SetParamAndMove(motorB, DIR_FWD, mtrSpeed);
 8003e94:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <carTurn+0x2e4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fb63 	bl	8003568 <mtr_SetParamAndMove>
 8003ea2:	e010      	b.n	8003ec6 <carTurn+0x21a>
	}
	else {
		mtrSpeed = 4000;
 8003ea4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003ea8:	60fb      	str	r3, [r7, #12]
		mtr_SetParamAndMove(motorA, DIR_BCK, mtrSpeed);
 8003eaa:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <carTurn+0x2e0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff fb58 	bl	8003568 <mtr_SetParamAndMove>
		mtr_SetParamAndMove(motorB, DIR_BCK, mtrSpeed);
 8003eb8:	4b35      	ldr	r3, [pc, #212]	; (8003f90 <carTurn+0x2e4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff fb51 	bl	8003568 <mtr_SetParamAndMove>
	}

	// Polling orientation and break when target reached
	while (1) {
		if (!near_0) {
 8003ec6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d11a      	bne.n	8003f04 <carTurn+0x258>
			if (abs((*ori) - target_ori) < MAX_ORI_ERR) {
 8003ece:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <carTurn+0x2c4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	ed93 7a00 	vldr	s14, [r3]
 8003ed6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003eda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ee2:	ee17 3a90 	vmov	r3, s15
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	bfb8      	it	lt
 8003eea:	425b      	neglt	r3, r3
 8003eec:	ee07 3a90 	vmov	s15, r3
 8003ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ef4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f00:	d42f      	bmi.n	8003f62 <carTurn+0x2b6>
 8003f02:	e015      	b.n	8003f30 <carTurn+0x284>
				break;
			}
		}
		else {
			if (((*ori) > bound_lo) || ((*ori) < bound_hi)) {
 8003f04:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <carTurn+0x2c4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	edd3 7a00 	vldr	s15, [r3]
 8003f0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f18:	d424      	bmi.n	8003f64 <carTurn+0x2b8>
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <carTurn+0x2c4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	edd3 7a00 	vldr	s15, [r3]
 8003f22:	ed97 7a06 	vldr	s14, [r7, #24]
 8003f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2e:	dc19      	bgt.n	8003f64 <carTurn+0x2b8>
				break;
			}
		}
		if (mtrSpeed > 1800) {
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003f36:	dd02      	ble.n	8003f3e <carTurn+0x292>
			mtrSpeed -= 2;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3b02      	subs	r3, #2
 8003f3c:	60fb      	str	r3, [r7, #12]
		}
		mtr_SetParamAndMove(motorA, DIR_FWD, mtrSpeed);
 8003f3e:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <carTurn+0x2e0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	2101      	movs	r1, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fb0e 	bl	8003568 <mtr_SetParamAndMove>
		mtr_SetParamAndMove(motorB, DIR_FWD, mtrSpeed);
 8003f4c:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <carTurn+0x2e4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	2101      	movs	r1, #1
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fb07 	bl	8003568 <mtr_SetParamAndMove>
		osDelay(1);
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	f006 fa32 	bl	800a3c4 <osDelay>
		if (!near_0) {
 8003f60:	e7b1      	b.n	8003ec6 <carTurn+0x21a>
				break;
 8003f62:	bf00      	nop
	}
	mtr_stop();
 8003f64:	f7ff faa8 	bl	80034b8 <mtr_stop>
	}
	else if ((turning_angle == 90) && (mtr_dir == 2)) {
		mtr_mov_cm(-8.2, -8.2);
	}
	*/
}
 8003f68:	bf00      	nop
 8003f6a:	3728      	adds	r7, #40	; 0x28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	200005f8 	.word	0x200005f8
 8003f74:	43b40000 	.word	0x43b40000
 8003f78:	43340000 	.word	0x43340000
 8003f7c:	43b34000 	.word	0x43b34000
 8003f80:	43af0000 	.word	0x43af0000
 8003f84:	43340000 	.word	0x43340000
 8003f88:	40568000 	.word	0x40568000
 8003f8c:	200005e4 	.word	0x200005e4
 8003f90:	200005e8 	.word	0x200005e8

08003f94 <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	71fb      	strb	r3, [r7, #7]
 8003f9e:	e026      	b.n	8003fee <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	3b50      	subs	r3, #80	; 0x50
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f82b 	bl	8004004 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8003fae:	2100      	movs	r1, #0
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f000 f827 	bl	8004004 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	2010      	movs	r0, #16
 8003fba:	f000 f823 	bl	8004004 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	71bb      	strb	r3, [r7, #6]
 8003fc2:	e00d      	b.n	8003fe0 <OLED_Refresh_Gram+0x4c>
 8003fc4:	79ba      	ldrb	r2, [r7, #6]
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	490d      	ldr	r1, [pc, #52]	; (8004000 <OLED_Refresh_Gram+0x6c>)
 8003fca:	00d2      	lsls	r2, r2, #3
 8003fcc:	440a      	add	r2, r1
 8003fce:	4413      	add	r3, r2
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 f815 	bl	8004004 <OLED_WR_Byte>
 8003fda:	79bb      	ldrb	r3, [r7, #6]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	71bb      	strb	r3, [r7, #6]
 8003fe0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	daed      	bge.n	8003fc4 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	3301      	adds	r3, #1
 8003fec:	71fb      	strb	r3, [r7, #7]
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	2b07      	cmp	r3, #7
 8003ff2:	d9d5      	bls.n	8003fa0 <OLED_Refresh_Gram+0xc>
	}   
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	2000060c 	.word	0x2000060c

08004004 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	460a      	mov	r2, r1
 800400e:	71fb      	strb	r3, [r7, #7]
 8004010:	4613      	mov	r3, r2
 8004012:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8004014:	79bb      	ldrb	r3, [r7, #6]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800401a:	2201      	movs	r2, #1
 800401c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004020:	481c      	ldr	r0, [pc, #112]	; (8004094 <OLED_WR_Byte+0x90>)
 8004022:	f001 feb1 	bl	8005d88 <HAL_GPIO_WritePin>
 8004026:	e005      	b.n	8004034 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8004028:	2200      	movs	r2, #0
 800402a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800402e:	4819      	ldr	r0, [pc, #100]	; (8004094 <OLED_WR_Byte+0x90>)
 8004030:	f001 feaa 	bl	8005d88 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8004034:	2300      	movs	r3, #0
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	e01e      	b.n	8004078 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800403a:	2200      	movs	r2, #0
 800403c:	2120      	movs	r1, #32
 800403e:	4815      	ldr	r0, [pc, #84]	; (8004094 <OLED_WR_Byte+0x90>)
 8004040:	f001 fea2 	bl	8005d88 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8004044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004048:	2b00      	cmp	r3, #0
 800404a:	da05      	bge.n	8004058 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800404c:	2201      	movs	r2, #1
 800404e:	2140      	movs	r1, #64	; 0x40
 8004050:	4810      	ldr	r0, [pc, #64]	; (8004094 <OLED_WR_Byte+0x90>)
 8004052:	f001 fe99 	bl	8005d88 <HAL_GPIO_WritePin>
 8004056:	e004      	b.n	8004062 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8004058:	2200      	movs	r2, #0
 800405a:	2140      	movs	r1, #64	; 0x40
 800405c:	480d      	ldr	r0, [pc, #52]	; (8004094 <OLED_WR_Byte+0x90>)
 800405e:	f001 fe93 	bl	8005d88 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8004062:	2201      	movs	r2, #1
 8004064:	2120      	movs	r1, #32
 8004066:	480b      	ldr	r0, [pc, #44]	; (8004094 <OLED_WR_Byte+0x90>)
 8004068:	f001 fe8e 	bl	8005d88 <HAL_GPIO_WritePin>
		dat<<=1;   
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	3301      	adds	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	2b07      	cmp	r3, #7
 800407c:	d9dd      	bls.n	800403a <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800407e:	2201      	movs	r2, #1
 8004080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004084:	4803      	ldr	r0, [pc, #12]	; (8004094 <OLED_WR_Byte+0x90>)
 8004086:	f001 fe7f 	bl	8005d88 <HAL_GPIO_WritePin>
} 
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000

08004098 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800409e:	2300      	movs	r3, #0
 80040a0:	71fb      	strb	r3, [r7, #7]
 80040a2:	e014      	b.n	80040ce <OLED_Clear+0x36>
 80040a4:	2300      	movs	r3, #0
 80040a6:	71bb      	strb	r3, [r7, #6]
 80040a8:	e00a      	b.n	80040c0 <OLED_Clear+0x28>
 80040aa:	79ba      	ldrb	r2, [r7, #6]
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	490c      	ldr	r1, [pc, #48]	; (80040e0 <OLED_Clear+0x48>)
 80040b0:	00d2      	lsls	r2, r2, #3
 80040b2:	440a      	add	r2, r1
 80040b4:	4413      	add	r3, r2
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	79bb      	ldrb	r3, [r7, #6]
 80040bc:	3301      	adds	r3, #1
 80040be:	71bb      	strb	r3, [r7, #6]
 80040c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	daf0      	bge.n	80040aa <OLED_Clear+0x12>
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	3301      	adds	r3, #1
 80040cc:	71fb      	strb	r3, [r7, #7]
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	2b07      	cmp	r3, #7
 80040d2:	d9e7      	bls.n	80040a4 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80040d4:	f7ff ff5e 	bl	8003f94 <OLED_Refresh_Gram>
}
 80040d8:	bf00      	nop
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	2000060c 	.word	0x2000060c

080040e4 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	71fb      	strb	r3, [r7, #7]
 80040ee:	460b      	mov	r3, r1
 80040f0:	71bb      	strb	r3, [r7, #6]
 80040f2:	4613      	mov	r3, r2
 80040f4:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80040fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	db41      	blt.n	8004186 <OLED_DrawPoint+0xa2>
 8004102:	79bb      	ldrb	r3, [r7, #6]
 8004104:	2b3f      	cmp	r3, #63	; 0x3f
 8004106:	d83e      	bhi.n	8004186 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8004108:	79bb      	ldrb	r3, [r7, #6]
 800410a:	08db      	lsrs	r3, r3, #3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f1c3 0307 	rsb	r3, r3, #7
 8004112:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8004114:	79bb      	ldrb	r3, [r7, #6]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800411c:	7b7b      	ldrb	r3, [r7, #13]
 800411e:	f1c3 0307 	rsb	r3, r3, #7
 8004122:	2201      	movs	r2, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800412a:	797b      	ldrb	r3, [r7, #5]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d012      	beq.n	8004156 <OLED_DrawPoint+0x72>
 8004130:	79fa      	ldrb	r2, [r7, #7]
 8004132:	7bbb      	ldrb	r3, [r7, #14]
 8004134:	4917      	ldr	r1, [pc, #92]	; (8004194 <OLED_DrawPoint+0xb0>)
 8004136:	00d2      	lsls	r2, r2, #3
 8004138:	440a      	add	r2, r1
 800413a:	4413      	add	r3, r2
 800413c:	7818      	ldrb	r0, [r3, #0]
 800413e:	79fa      	ldrb	r2, [r7, #7]
 8004140:	7bbb      	ldrb	r3, [r7, #14]
 8004142:	7bf9      	ldrb	r1, [r7, #15]
 8004144:	4301      	orrs	r1, r0
 8004146:	b2c8      	uxtb	r0, r1
 8004148:	4912      	ldr	r1, [pc, #72]	; (8004194 <OLED_DrawPoint+0xb0>)
 800414a:	00d2      	lsls	r2, r2, #3
 800414c:	440a      	add	r2, r1
 800414e:	4413      	add	r3, r2
 8004150:	4602      	mov	r2, r0
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e018      	b.n	8004188 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8004156:	79fa      	ldrb	r2, [r7, #7]
 8004158:	7bbb      	ldrb	r3, [r7, #14]
 800415a:	490e      	ldr	r1, [pc, #56]	; (8004194 <OLED_DrawPoint+0xb0>)
 800415c:	00d2      	lsls	r2, r2, #3
 800415e:	440a      	add	r2, r1
 8004160:	4413      	add	r3, r2
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	b25a      	sxtb	r2, r3
 8004166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800416a:	43db      	mvns	r3, r3
 800416c:	b25b      	sxtb	r3, r3
 800416e:	4013      	ands	r3, r2
 8004170:	b259      	sxtb	r1, r3
 8004172:	79fa      	ldrb	r2, [r7, #7]
 8004174:	7bbb      	ldrb	r3, [r7, #14]
 8004176:	b2c8      	uxtb	r0, r1
 8004178:	4906      	ldr	r1, [pc, #24]	; (8004194 <OLED_DrawPoint+0xb0>)
 800417a:	00d2      	lsls	r2, r2, #3
 800417c:	440a      	add	r2, r1
 800417e:	4413      	add	r3, r2
 8004180:	4602      	mov	r2, r0
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	e000      	b.n	8004188 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8004186:	bf00      	nop
}
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	2000060c 	.word	0x2000060c

08004198 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8004198:	b590      	push	{r4, r7, lr}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	4604      	mov	r4, r0
 80041a0:	4608      	mov	r0, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	461a      	mov	r2, r3
 80041a6:	4623      	mov	r3, r4
 80041a8:	71fb      	strb	r3, [r7, #7]
 80041aa:	4603      	mov	r3, r0
 80041ac:	71bb      	strb	r3, [r7, #6]
 80041ae:	460b      	mov	r3, r1
 80041b0:	717b      	strb	r3, [r7, #5]
 80041b2:	4613      	mov	r3, r2
 80041b4:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80041b6:	79bb      	ldrb	r3, [r7, #6]
 80041b8:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80041ba:	797b      	ldrb	r3, [r7, #5]
 80041bc:	3b20      	subs	r3, #32
 80041be:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80041c0:	2300      	movs	r3, #0
 80041c2:	73bb      	strb	r3, [r7, #14]
 80041c4:	e04d      	b.n	8004262 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80041c6:	793b      	ldrb	r3, [r7, #4]
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	d10b      	bne.n	80041e4 <OLED_ShowChar+0x4c>
 80041cc:	797a      	ldrb	r2, [r7, #5]
 80041ce:	7bb9      	ldrb	r1, [r7, #14]
 80041d0:	4828      	ldr	r0, [pc, #160]	; (8004274 <OLED_ShowChar+0xdc>)
 80041d2:	4613      	mov	r3, r2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4403      	add	r3, r0
 80041dc:	440b      	add	r3, r1
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	73fb      	strb	r3, [r7, #15]
 80041e2:	e007      	b.n	80041f4 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80041e4:	797a      	ldrb	r2, [r7, #5]
 80041e6:	7bbb      	ldrb	r3, [r7, #14]
 80041e8:	4923      	ldr	r1, [pc, #140]	; (8004278 <OLED_ShowChar+0xe0>)
 80041ea:	0112      	lsls	r2, r2, #4
 80041ec:	440a      	add	r2, r1
 80041ee:	4413      	add	r3, r2
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80041f4:	2300      	movs	r3, #0
 80041f6:	737b      	strb	r3, [r7, #13]
 80041f8:	e02d      	b.n	8004256 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80041fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	da07      	bge.n	8004212 <OLED_ShowChar+0x7a>
 8004202:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004206:	79b9      	ldrb	r1, [r7, #6]
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff ff6a 	bl	80040e4 <OLED_DrawPoint>
 8004210:	e00c      	b.n	800422c <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8004212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004216:	2b00      	cmp	r3, #0
 8004218:	bf0c      	ite	eq
 800421a:	2301      	moveq	r3, #1
 800421c:	2300      	movne	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	79b9      	ldrb	r1, [r7, #6]
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff ff5c 	bl	80040e4 <OLED_DrawPoint>
			temp<<=1;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
			y++;
 8004232:	79bb      	ldrb	r3, [r7, #6]
 8004234:	3301      	adds	r3, #1
 8004236:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8004238:	79ba      	ldrb	r2, [r7, #6]
 800423a:	7b3b      	ldrb	r3, [r7, #12]
 800423c:	1ad2      	subs	r2, r2, r3
 800423e:	793b      	ldrb	r3, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d105      	bne.n	8004250 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8004244:	7b3b      	ldrb	r3, [r7, #12]
 8004246:	71bb      	strb	r3, [r7, #6]
				x++;
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	3301      	adds	r3, #1
 800424c:	71fb      	strb	r3, [r7, #7]
				break;
 800424e:	e005      	b.n	800425c <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8004250:	7b7b      	ldrb	r3, [r7, #13]
 8004252:	3301      	adds	r3, #1
 8004254:	737b      	strb	r3, [r7, #13]
 8004256:	7b7b      	ldrb	r3, [r7, #13]
 8004258:	2b07      	cmp	r3, #7
 800425a:	d9ce      	bls.n	80041fa <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800425c:	7bbb      	ldrb	r3, [r7, #14]
 800425e:	3301      	adds	r3, #1
 8004260:	73bb      	strb	r3, [r7, #14]
 8004262:	7bba      	ldrb	r2, [r7, #14]
 8004264:	793b      	ldrb	r3, [r7, #4]
 8004266:	429a      	cmp	r2, r3
 8004268:	d3ad      	bcc.n	80041c6 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800426a:	bf00      	nop
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	bd90      	pop	{r4, r7, pc}
 8004274:	0800fe6c 	.word	0x0800fe6c
 8004278:	080102e0 	.word	0x080102e0

0800427c <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af02      	add	r7, sp, #8
 8004282:	4603      	mov	r3, r0
 8004284:	603a      	str	r2, [r7, #0]
 8004286:	71fb      	strb	r3, [r7, #7]
 8004288:	460b      	mov	r3, r1
 800428a:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800428c:	e01f      	b.n	80042ce <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	2b7a      	cmp	r3, #122	; 0x7a
 8004292:	d904      	bls.n	800429e <OLED_ShowString+0x22>
 8004294:	2300      	movs	r3, #0
 8004296:	71fb      	strb	r3, [r7, #7]
 8004298:	79bb      	ldrb	r3, [r7, #6]
 800429a:	3310      	adds	r3, #16
 800429c:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800429e:	79bb      	ldrb	r3, [r7, #6]
 80042a0:	2b3a      	cmp	r3, #58	; 0x3a
 80042a2:	d905      	bls.n	80042b0 <OLED_ShowString+0x34>
 80042a4:	2300      	movs	r3, #0
 80042a6:	71fb      	strb	r3, [r7, #7]
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	71bb      	strb	r3, [r7, #6]
 80042ac:	f7ff fef4 	bl	8004098 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	781a      	ldrb	r2, [r3, #0]
 80042b4:	79b9      	ldrb	r1, [r7, #6]
 80042b6:	79f8      	ldrb	r0, [r7, #7]
 80042b8:	2301      	movs	r3, #1
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	230c      	movs	r3, #12
 80042be:	f7ff ff6b 	bl	8004198 <OLED_ShowChar>
        x+=8;
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	3308      	adds	r3, #8
 80042c6:	71fb      	strb	r3, [r7, #7]
        p++;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	3301      	adds	r3, #1
 80042cc:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1db      	bne.n	800428e <OLED_ShowString+0x12>
    }  
}	 
 80042d6:	bf00      	nop
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <OLED_Init>:

void OLED_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80042e4:	f002 fd00 	bl	8006ce8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80042e8:	4b41      	ldr	r3, [pc, #260]	; (80043f0 <OLED_Init+0x110>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	4a40      	ldr	r2, [pc, #256]	; (80043f0 <OLED_Init+0x110>)
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	6713      	str	r3, [r2, #112]	; 0x70
 80042f4:	4b3e      	ldr	r3, [pc, #248]	; (80043f0 <OLED_Init+0x110>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	4a3d      	ldr	r2, [pc, #244]	; (80043f0 <OLED_Init+0x110>)
 80042fa:	f023 0304 	bic.w	r3, r3, #4
 80042fe:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8004300:	f002 fd06 	bl	8006d10 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8004304:	2200      	movs	r2, #0
 8004306:	2180      	movs	r1, #128	; 0x80
 8004308:	483a      	ldr	r0, [pc, #232]	; (80043f4 <OLED_Init+0x114>)
 800430a:	f001 fd3d 	bl	8005d88 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800430e:	2064      	movs	r0, #100	; 0x64
 8004310:	f000 fdd6 	bl	8004ec0 <HAL_Delay>
	OLED_RST_Set();
 8004314:	2201      	movs	r2, #1
 8004316:	2180      	movs	r1, #128	; 0x80
 8004318:	4836      	ldr	r0, [pc, #216]	; (80043f4 <OLED_Init+0x114>)
 800431a:	f001 fd35 	bl	8005d88 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800431e:	2100      	movs	r1, #0
 8004320:	20ae      	movs	r0, #174	; 0xae
 8004322:	f7ff fe6f 	bl	8004004 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8004326:	2100      	movs	r1, #0
 8004328:	20d5      	movs	r0, #213	; 0xd5
 800432a:	f7ff fe6b 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800432e:	2100      	movs	r1, #0
 8004330:	2050      	movs	r0, #80	; 0x50
 8004332:	f7ff fe67 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8004336:	2100      	movs	r1, #0
 8004338:	20a8      	movs	r0, #168	; 0xa8
 800433a:	f7ff fe63 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800433e:	2100      	movs	r1, #0
 8004340:	203f      	movs	r0, #63	; 0x3f
 8004342:	f7ff fe5f 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8004346:	2100      	movs	r1, #0
 8004348:	20d3      	movs	r0, #211	; 0xd3
 800434a:	f7ff fe5b 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800434e:	2100      	movs	r1, #0
 8004350:	2000      	movs	r0, #0
 8004352:	f7ff fe57 	bl	8004004 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8004356:	2100      	movs	r1, #0
 8004358:	2040      	movs	r0, #64	; 0x40
 800435a:	f7ff fe53 	bl	8004004 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800435e:	2100      	movs	r1, #0
 8004360:	208d      	movs	r0, #141	; 0x8d
 8004362:	f7ff fe4f 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8004366:	2100      	movs	r1, #0
 8004368:	2014      	movs	r0, #20
 800436a:	f7ff fe4b 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800436e:	2100      	movs	r1, #0
 8004370:	2020      	movs	r0, #32
 8004372:	f7ff fe47 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8004376:	2100      	movs	r1, #0
 8004378:	2002      	movs	r0, #2
 800437a:	f7ff fe43 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800437e:	2100      	movs	r1, #0
 8004380:	20a1      	movs	r0, #161	; 0xa1
 8004382:	f7ff fe3f 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8004386:	2100      	movs	r1, #0
 8004388:	20c0      	movs	r0, #192	; 0xc0
 800438a:	f7ff fe3b 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800438e:	2100      	movs	r1, #0
 8004390:	20da      	movs	r0, #218	; 0xda
 8004392:	f7ff fe37 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8004396:	2100      	movs	r1, #0
 8004398:	2012      	movs	r0, #18
 800439a:	f7ff fe33 	bl	8004004 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800439e:	2100      	movs	r1, #0
 80043a0:	2081      	movs	r0, #129	; 0x81
 80043a2:	f7ff fe2f 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80043a6:	2100      	movs	r1, #0
 80043a8:	20ef      	movs	r0, #239	; 0xef
 80043aa:	f7ff fe2b 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80043ae:	2100      	movs	r1, #0
 80043b0:	20d9      	movs	r0, #217	; 0xd9
 80043b2:	f7ff fe27 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80043b6:	2100      	movs	r1, #0
 80043b8:	20f1      	movs	r0, #241	; 0xf1
 80043ba:	f7ff fe23 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80043be:	2100      	movs	r1, #0
 80043c0:	20db      	movs	r0, #219	; 0xdb
 80043c2:	f7ff fe1f 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80043c6:	2100      	movs	r1, #0
 80043c8:	2030      	movs	r0, #48	; 0x30
 80043ca:	f7ff fe1b 	bl	8004004 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80043ce:	2100      	movs	r1, #0
 80043d0:	20a4      	movs	r0, #164	; 0xa4
 80043d2:	f7ff fe17 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80043d6:	2100      	movs	r1, #0
 80043d8:	20a6      	movs	r0, #166	; 0xa6
 80043da:	f7ff fe13 	bl	8004004 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80043de:	2100      	movs	r1, #0
 80043e0:	20af      	movs	r0, #175	; 0xaf
 80043e2:	f7ff fe0f 	bl	8004004 <OLED_WR_Byte>
	OLED_Clear(); 
 80043e6:	f7ff fe57 	bl	8004098 <OLED_Clear>
}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40021000 	.word	0x40021000

080043f8 <turnLeft>:
#include "cmsis_os.h"

uint8_t cur_direction; // 0 as left, 1 as straight, 2 as right
TIM_HandleTypeDef* htim1Ptr;

void turnLeft(){
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
	htim1Ptr->Instance->CCR4=962;
 80043fc:	4b07      	ldr	r3, [pc, #28]	; (800441c <turnLeft+0x24>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f240 32c2 	movw	r2, #962	; 0x3c2
 8004406:	641a      	str	r2, [r3, #64]	; 0x40
	cur_direction = LEFT;
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <turnLeft+0x28>)
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
	osDelay(700);
 800440e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8004412:	f005 ffd7 	bl	800a3c4 <osDelay>
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000a10 	.word	0x20000a10
 8004420:	20000a0c 	.word	0x20000a0c

08004424 <turnRight>:
void turnRight(){
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
	htim1Ptr->Instance->CCR4=2200;
 8004428:	4b07      	ldr	r3, [pc, #28]	; (8004448 <turnRight+0x24>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f640 0298 	movw	r2, #2200	; 0x898
 8004432:	641a      	str	r2, [r3, #64]	; 0x40
	cur_direction = RIGHT;
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <turnRight+0x28>)
 8004436:	2202      	movs	r2, #2
 8004438:	701a      	strb	r2, [r3, #0]
	osDelay(700);
 800443a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800443e:	f005 ffc1 	bl	800a3c4 <osDelay>
}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000a10 	.word	0x20000a10
 800444c:	20000a0c 	.word	0x20000a0c

08004450 <turnStraight>:
void turnStraight(){
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
	if(cur_direction == LEFT){
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <turnStraight+0x4c>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10a      	bne.n	8004472 <turnStraight+0x22>
		htim1Ptr->Instance->CCR4=1548;
 800445c:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <turnStraight+0x50>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f240 620c 	movw	r2, #1548	; 0x60c
 8004466:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(700);
 8004468:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800446c:	f005 ffaa 	bl	800a3c4 <osDelay>
 8004470:	e00d      	b.n	800448e <turnStraight+0x3e>
	}else if(cur_direction == RIGHT){
 8004472:	4b0a      	ldr	r3, [pc, #40]	; (800449c <turnStraight+0x4c>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d10d      	bne.n	8004496 <turnStraight+0x46>
		htim1Ptr->Instance->CCR4=1457;
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <turnStraight+0x50>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f240 52b1 	movw	r2, #1457	; 0x5b1
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(700);
 8004486:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800448a:	f005 ff9b 	bl	800a3c4 <osDelay>
	}else{
		return;
	}
	cur_direction = STRAIGHT;
 800448e:	4b03      	ldr	r3, [pc, #12]	; (800449c <turnStraight+0x4c>)
 8004490:	2201      	movs	r2, #1
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	e000      	b.n	8004498 <turnStraight+0x48>
		return;
 8004496:	bf00      	nop
}
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000a0c 	.word	0x20000a0c
 80044a0:	20000a10 	.word	0x20000a10

080044a4 <turnServo>:
void turnServo(uint8_t target){
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]
	if(target == LEFT){
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d102      	bne.n	80044ba <turnServo+0x16>
		turnLeft();
 80044b4:	f7ff ffa0 	bl	80043f8 <turnLeft>
	}else if(target == STRAIGHT){
		turnStraight();
	}else{
		turnRight();
	}
}
 80044b8:	e007      	b.n	80044ca <turnServo+0x26>
	}else if(target == STRAIGHT){
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d102      	bne.n	80044c6 <turnServo+0x22>
		turnStraight();
 80044c0:	f7ff ffc6 	bl	8004450 <turnStraight>
}
 80044c4:	e001      	b.n	80044ca <turnServo+0x26>
		turnRight();
 80044c6:	f7ff ffad 	bl	8004424 <turnRight>
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <servoInit>:
uint8_t getServoDir() {
	return cur_direction;
}
void servoInit(TIM_HandleTypeDef* htim){
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
	htim1Ptr = htim;
 80044dc:	4a15      	ldr	r2, [pc, #84]	; (8004534 <servoInit+0x60>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 80044e2:	210c      	movs	r1, #12
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f003 f991 	bl	800780c <HAL_TIM_PWM_Start>
	cur_direction = 1;
 80044ea:	4b13      	ldr	r3, [pc, #76]	; (8004538 <servoInit+0x64>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
	htim1Ptr->Instance->CCR4=2200;
 80044f0:	4b10      	ldr	r3, [pc, #64]	; (8004534 <servoInit+0x60>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f640 0298 	movw	r2, #2200	; 0x898
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(700);
 80044fc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8004500:	f000 fcde 	bl	8004ec0 <HAL_Delay>
	htim1Ptr->Instance->CCR4=1000;
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <servoInit+0x60>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800450e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(700);
 8004510:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8004514:	f000 fcd4 	bl	8004ec0 <HAL_Delay>
	htim1Ptr->Instance->CCR4=1548;
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <servoInit+0x60>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f240 620c 	movw	r2, #1548	; 0x60c
 8004522:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(700);
 8004524:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8004528:	f000 fcca 	bl	8004ec0 <HAL_Delay>

}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20000a10 	.word	0x20000a10
 8004538:	20000a0c 	.word	0x20000a0c

0800453c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	607b      	str	r3, [r7, #4]
 8004546:	4b12      	ldr	r3, [pc, #72]	; (8004590 <HAL_MspInit+0x54>)
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	4a11      	ldr	r2, [pc, #68]	; (8004590 <HAL_MspInit+0x54>)
 800454c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004550:	6453      	str	r3, [r2, #68]	; 0x44
 8004552:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <HAL_MspInit+0x54>)
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800455a:	607b      	str	r3, [r7, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	603b      	str	r3, [r7, #0]
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_MspInit+0x54>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <HAL_MspInit+0x54>)
 8004568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456c:	6413      	str	r3, [r2, #64]	; 0x40
 800456e:	4b08      	ldr	r3, [pc, #32]	; (8004590 <HAL_MspInit+0x54>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800457a:	2200      	movs	r2, #0
 800457c:	210f      	movs	r1, #15
 800457e:	f06f 0001 	mvn.w	r0, #1
 8004582:	f001 f99c 	bl	80058be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004586:	bf00      	nop
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40023800 	.word	0x40023800

08004594 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08c      	sub	sp, #48	; 0x30
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800459c:	f107 031c 	add.w	r3, r7, #28
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	609a      	str	r2, [r3, #8]
 80045a8:	60da      	str	r2, [r3, #12]
 80045aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a2e      	ldr	r2, [pc, #184]	; (800466c <HAL_ADC_MspInit+0xd8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d128      	bne.n	8004608 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <HAL_ADC_MspInit+0xdc>)
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	4a2c      	ldr	r2, [pc, #176]	; (8004670 <HAL_ADC_MspInit+0xdc>)
 80045c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c4:	6453      	str	r3, [r2, #68]	; 0x44
 80045c6:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <HAL_ADC_MspInit+0xdc>)
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	4b26      	ldr	r3, [pc, #152]	; (8004670 <HAL_ADC_MspInit+0xdc>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	4a25      	ldr	r2, [pc, #148]	; (8004670 <HAL_ADC_MspInit+0xdc>)
 80045dc:	f043 0304 	orr.w	r3, r3, #4
 80045e0:	6313      	str	r3, [r2, #48]	; 0x30
 80045e2:	4b23      	ldr	r3, [pc, #140]	; (8004670 <HAL_ADC_MspInit+0xdc>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80045ee:	2302      	movs	r3, #2
 80045f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045f2:	2303      	movs	r3, #3
 80045f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045fa:	f107 031c 	add.w	r3, r7, #28
 80045fe:	4619      	mov	r1, r3
 8004600:	481c      	ldr	r0, [pc, #112]	; (8004674 <HAL_ADC_MspInit+0xe0>)
 8004602:	f001 fa25 	bl	8005a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004606:	e02c      	b.n	8004662 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1a      	ldr	r2, [pc, #104]	; (8004678 <HAL_ADC_MspInit+0xe4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d127      	bne.n	8004662 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	4b16      	ldr	r3, [pc, #88]	; (8004670 <HAL_ADC_MspInit+0xdc>)
 8004618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461a:	4a15      	ldr	r2, [pc, #84]	; (8004670 <HAL_ADC_MspInit+0xdc>)
 800461c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004620:	6453      	str	r3, [r2, #68]	; 0x44
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <HAL_ADC_MspInit+0xdc>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <HAL_ADC_MspInit+0xdc>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	4a0e      	ldr	r2, [pc, #56]	; (8004670 <HAL_ADC_MspInit+0xdc>)
 8004638:	f043 0304 	orr.w	r3, r3, #4
 800463c:	6313      	str	r3, [r2, #48]	; 0x30
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <HAL_ADC_MspInit+0xdc>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800464a:	2304      	movs	r3, #4
 800464c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800464e:	2303      	movs	r3, #3
 8004650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004652:	2300      	movs	r3, #0
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004656:	f107 031c 	add.w	r3, r7, #28
 800465a:	4619      	mov	r1, r3
 800465c:	4805      	ldr	r0, [pc, #20]	; (8004674 <HAL_ADC_MspInit+0xe0>)
 800465e:	f001 f9f7 	bl	8005a50 <HAL_GPIO_Init>
}
 8004662:	bf00      	nop
 8004664:	3730      	adds	r7, #48	; 0x30
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40012000 	.word	0x40012000
 8004670:	40023800 	.word	0x40023800
 8004674:	40020800 	.word	0x40020800
 8004678:	40012100 	.word	0x40012100

0800467c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	; 0x28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004684:	f107 0314 	add.w	r3, r7, #20
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	605a      	str	r2, [r3, #4]
 800468e:	609a      	str	r2, [r3, #8]
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a19      	ldr	r2, [pc, #100]	; (8004700 <HAL_I2C_MspInit+0x84>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d12c      	bne.n	80046f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	4b18      	ldr	r3, [pc, #96]	; (8004704 <HAL_I2C_MspInit+0x88>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	4a17      	ldr	r2, [pc, #92]	; (8004704 <HAL_I2C_MspInit+0x88>)
 80046a8:	f043 0302 	orr.w	r3, r3, #2
 80046ac:	6313      	str	r3, [r2, #48]	; 0x30
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <HAL_I2C_MspInit+0x88>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 80046ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046c0:	2312      	movs	r3, #18
 80046c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c8:	2303      	movs	r3, #3
 80046ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046cc:	2304      	movs	r3, #4
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d0:	f107 0314 	add.w	r3, r7, #20
 80046d4:	4619      	mov	r1, r3
 80046d6:	480c      	ldr	r0, [pc, #48]	; (8004708 <HAL_I2C_MspInit+0x8c>)
 80046d8:	f001 f9ba 	bl	8005a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	4b08      	ldr	r3, [pc, #32]	; (8004704 <HAL_I2C_MspInit+0x88>)
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	4a07      	ldr	r2, [pc, #28]	; (8004704 <HAL_I2C_MspInit+0x88>)
 80046e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046ea:	6413      	str	r3, [r2, #64]	; 0x40
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <HAL_I2C_MspInit+0x88>)
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80046f8:	bf00      	nop
 80046fa:	3728      	adds	r7, #40	; 0x28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40005400 	.word	0x40005400
 8004704:	40023800 	.word	0x40023800
 8004708:	40020400 	.word	0x40020400

0800470c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08c      	sub	sp, #48	; 0x30
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004714:	f107 031c 	add.w	r3, r7, #28
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	605a      	str	r2, [r3, #4]
 800471e:	609a      	str	r2, [r3, #8]
 8004720:	60da      	str	r2, [r3, #12]
 8004722:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a40      	ldr	r2, [pc, #256]	; (800482c <HAL_TIM_Base_MspInit+0x120>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d135      	bne.n	800479a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	4b3f      	ldr	r3, [pc, #252]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	4a3e      	ldr	r2, [pc, #248]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	6453      	str	r3, [r2, #68]	; 0x44
 800473e:	4b3c      	ldr	r3, [pc, #240]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	4b38      	ldr	r3, [pc, #224]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	4a37      	ldr	r2, [pc, #220]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 8004754:	f043 0310 	orr.w	r3, r3, #16
 8004758:	6313      	str	r3, [r2, #48]	; 0x30
 800475a:	4b35      	ldr	r3, [pc, #212]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = US_ECHO_Pin;
 8004766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800476a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476c:	2302      	movs	r3, #2
 800476e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004770:	2300      	movs	r3, #0
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004774:	2300      	movs	r3, #0
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004778:	2301      	movs	r3, #1
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(US_ECHO_GPIO_Port, &GPIO_InitStruct);
 800477c:	f107 031c 	add.w	r3, r7, #28
 8004780:	4619      	mov	r1, r3
 8004782:	482c      	ldr	r0, [pc, #176]	; (8004834 <HAL_TIM_Base_MspInit+0x128>)
 8004784:	f001 f964 	bl	8005a50 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004788:	2200      	movs	r2, #0
 800478a:	2105      	movs	r1, #5
 800478c:	201b      	movs	r0, #27
 800478e:	f001 f896 	bl	80058be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004792:	201b      	movs	r0, #27
 8004794:	f001 f8af 	bl	80058f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004798:	e044      	b.n	8004824 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM6)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a26      	ldr	r2, [pc, #152]	; (8004838 <HAL_TIM_Base_MspInit+0x12c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d10e      	bne.n	80047c2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	4b21      	ldr	r3, [pc, #132]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	4a20      	ldr	r2, [pc, #128]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 80047ae:	f043 0310 	orr.w	r3, r3, #16
 80047b2:	6413      	str	r3, [r2, #64]	; 0x40
 80047b4:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	693b      	ldr	r3, [r7, #16]
}
 80047c0:	e030      	b.n	8004824 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1d      	ldr	r2, [pc, #116]	; (800483c <HAL_TIM_Base_MspInit+0x130>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d12b      	bne.n	8004824 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	4b17      	ldr	r3, [pc, #92]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 80047d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d4:	4a16      	ldr	r2, [pc, #88]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 80047d6:	f043 0302 	orr.w	r3, r3, #2
 80047da:	6453      	str	r3, [r2, #68]	; 0x44
 80047dc:	4b14      	ldr	r3, [pc, #80]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 80047de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047e8:	2300      	movs	r3, #0
 80047ea:	60bb      	str	r3, [r7, #8]
 80047ec:	4b10      	ldr	r3, [pc, #64]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	4a0f      	ldr	r2, [pc, #60]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 80047f2:	f043 0304 	orr.w	r3, r3, #4
 80047f6:	6313      	str	r3, [r2, #48]	; 0x30
 80047f8:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <HAL_TIM_Base_MspInit+0x124>)
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8004804:	23c0      	movs	r3, #192	; 0xc0
 8004806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004808:	2302      	movs	r3, #2
 800480a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480c:	2300      	movs	r3, #0
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004810:	2300      	movs	r3, #0
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004814:	2303      	movs	r3, #3
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004818:	f107 031c 	add.w	r3, r7, #28
 800481c:	4619      	mov	r1, r3
 800481e:	4808      	ldr	r0, [pc, #32]	; (8004840 <HAL_TIM_Base_MspInit+0x134>)
 8004820:	f001 f916 	bl	8005a50 <HAL_GPIO_Init>
}
 8004824:	bf00      	nop
 8004826:	3730      	adds	r7, #48	; 0x30
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40010000 	.word	0x40010000
 8004830:	40023800 	.word	0x40023800
 8004834:	40021000 	.word	0x40021000
 8004838:	40001000 	.word	0x40001000
 800483c:	40010400 	.word	0x40010400
 8004840:	40020800 	.word	0x40020800

08004844 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08c      	sub	sp, #48	; 0x30
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800484c:	f107 031c 	add.w	r3, r7, #28
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	609a      	str	r2, [r3, #8]
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004864:	d153      	bne.n	800490e <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004866:	2300      	movs	r3, #0
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	4b47      	ldr	r3, [pc, #284]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	4a46      	ldr	r2, [pc, #280]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	6413      	str	r3, [r2, #64]	; 0x40
 8004876:	4b44      	ldr	r3, [pc, #272]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	61bb      	str	r3, [r7, #24]
 8004880:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	4b40      	ldr	r3, [pc, #256]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	4a3f      	ldr	r2, [pc, #252]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	6313      	str	r3, [r2, #48]	; 0x30
 8004892:	4b3d      	ldr	r3, [pc, #244]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	4b39      	ldr	r3, [pc, #228]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	4a38      	ldr	r2, [pc, #224]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 80048a8:	f043 0302 	orr.w	r3, r3, #2
 80048ac:	6313      	str	r3, [r2, #48]	; 0x30
 80048ae:	4b36      	ldr	r3, [pc, #216]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80048ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c0:	2302      	movs	r3, #2
 80048c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048c8:	2300      	movs	r3, #0
 80048ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048cc:	2301      	movs	r3, #1
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d0:	f107 031c 	add.w	r3, r7, #28
 80048d4:	4619      	mov	r1, r3
 80048d6:	482d      	ldr	r0, [pc, #180]	; (800498c <HAL_TIM_Encoder_MspInit+0x148>)
 80048d8:	f001 f8ba 	bl	8005a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80048dc:	2308      	movs	r3, #8
 80048de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e0:	2302      	movs	r3, #2
 80048e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e8:	2300      	movs	r3, #0
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048ec:	2301      	movs	r3, #1
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048f0:	f107 031c 	add.w	r3, r7, #28
 80048f4:	4619      	mov	r1, r3
 80048f6:	4826      	ldr	r0, [pc, #152]	; (8004990 <HAL_TIM_Encoder_MspInit+0x14c>)
 80048f8:	f001 f8aa 	bl	8005a50 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80048fc:	2200      	movs	r2, #0
 80048fe:	2105      	movs	r1, #5
 8004900:	201c      	movs	r0, #28
 8004902:	f000 ffdc 	bl	80058be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004906:	201c      	movs	r0, #28
 8004908:	f000 fff5 	bl	80058f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800490c:	e038      	b.n	8004980 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM3)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a20      	ldr	r2, [pc, #128]	; (8004994 <HAL_TIM_Encoder_MspInit+0x150>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d133      	bne.n	8004980 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	4a19      	ldr	r2, [pc, #100]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 8004922:	f043 0302 	orr.w	r3, r3, #2
 8004926:	6413      	str	r3, [r2, #64]	; 0x40
 8004928:	4b17      	ldr	r3, [pc, #92]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004934:	2300      	movs	r3, #0
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	4b13      	ldr	r3, [pc, #76]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	4a12      	ldr	r2, [pc, #72]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6313      	str	r3, [r2, #48]	; 0x30
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <HAL_TIM_Encoder_MspInit+0x144>)
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004950:	23c0      	movs	r3, #192	; 0xc0
 8004952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004954:	2302      	movs	r3, #2
 8004956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004958:	2300      	movs	r3, #0
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800495c:	2300      	movs	r3, #0
 800495e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004960:	2302      	movs	r3, #2
 8004962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004964:	f107 031c 	add.w	r3, r7, #28
 8004968:	4619      	mov	r1, r3
 800496a:	4808      	ldr	r0, [pc, #32]	; (800498c <HAL_TIM_Encoder_MspInit+0x148>)
 800496c:	f001 f870 	bl	8005a50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004970:	2200      	movs	r2, #0
 8004972:	2105      	movs	r1, #5
 8004974:	201d      	movs	r0, #29
 8004976:	f000 ffa2 	bl	80058be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800497a:	201d      	movs	r0, #29
 800497c:	f000 ffbb 	bl	80058f6 <HAL_NVIC_EnableIRQ>
}
 8004980:	bf00      	nop
 8004982:	3730      	adds	r7, #48	; 0x30
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40023800 	.word	0x40023800
 800498c:	40020000 	.word	0x40020000
 8004990:	40020400 	.word	0x40020400
 8004994:	40000400 	.word	0x40000400

08004998 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a0:	f107 030c 	add.w	r3, r7, #12
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	609a      	str	r2, [r3, #8]
 80049ac:	60da      	str	r2, [r3, #12]
 80049ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a12      	ldr	r2, [pc, #72]	; (8004a00 <HAL_TIM_MspPostInit+0x68>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d11e      	bne.n	80049f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <HAL_TIM_MspPostInit+0x6c>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	4a10      	ldr	r2, [pc, #64]	; (8004a04 <HAL_TIM_MspPostInit+0x6c>)
 80049c4:	f043 0310 	orr.w	r3, r3, #16
 80049c8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <HAL_TIM_MspPostInit+0x6c>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	60bb      	str	r3, [r7, #8]
 80049d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80049d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049dc:	2302      	movs	r3, #2
 80049de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80049e8:	2301      	movs	r3, #1
 80049ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049ec:	f107 030c 	add.w	r3, r7, #12
 80049f0:	4619      	mov	r1, r3
 80049f2:	4805      	ldr	r0, [pc, #20]	; (8004a08 <HAL_TIM_MspPostInit+0x70>)
 80049f4:	f001 f82c 	bl	8005a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80049f8:	bf00      	nop
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40023800 	.word	0x40023800
 8004a08:	40021000 	.word	0x40021000

08004a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08c      	sub	sp, #48	; 0x30
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a14:	f107 031c 	add.w	r3, r7, #28
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	605a      	str	r2, [r3, #4]
 8004a1e:	609a      	str	r2, [r3, #8]
 8004a20:	60da      	str	r2, [r3, #12]
 8004a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a3b      	ldr	r2, [pc, #236]	; (8004b18 <HAL_UART_MspInit+0x10c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d135      	bne.n	8004a9a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	4b3a      	ldr	r3, [pc, #232]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	4a39      	ldr	r2, [pc, #228]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004a38:	f043 0310 	orr.w	r3, r3, #16
 8004a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a3e:	4b37      	ldr	r3, [pc, #220]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	4b33      	ldr	r3, [pc, #204]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	4a32      	ldr	r2, [pc, #200]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	6313      	str	r3, [r2, #48]	; 0x30
 8004a5a:	4b30      	ldr	r3, [pc, #192]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a70:	2300      	movs	r3, #0
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a74:	2303      	movs	r3, #3
 8004a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a78:	2307      	movs	r3, #7
 8004a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a7c:	f107 031c 	add.w	r3, r7, #28
 8004a80:	4619      	mov	r1, r3
 8004a82:	4827      	ldr	r0, [pc, #156]	; (8004b20 <HAL_UART_MspInit+0x114>)
 8004a84:	f000 ffe4 	bl	8005a50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2105      	movs	r1, #5
 8004a8c:	2025      	movs	r0, #37	; 0x25
 8004a8e:	f000 ff16 	bl	80058be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a92:	2025      	movs	r0, #37	; 0x25
 8004a94:	f000 ff2f 	bl	80058f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004a98:	e039      	b.n	8004b0e <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a21      	ldr	r2, [pc, #132]	; (8004b24 <HAL_UART_MspInit+0x118>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d134      	bne.n	8004b0e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	4b1c      	ldr	r3, [pc, #112]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	4a1b      	ldr	r2, [pc, #108]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004aae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab4:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	4b15      	ldr	r3, [pc, #84]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	4a14      	ldr	r2, [pc, #80]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004aca:	f043 0304 	orr.w	r3, r3, #4
 8004ace:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad0:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004adc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aea:	2303      	movs	r3, #3
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004aee:	2307      	movs	r3, #7
 8004af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004af2:	f107 031c 	add.w	r3, r7, #28
 8004af6:	4619      	mov	r1, r3
 8004af8:	480b      	ldr	r0, [pc, #44]	; (8004b28 <HAL_UART_MspInit+0x11c>)
 8004afa:	f000 ffa9 	bl	8005a50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004afe:	2200      	movs	r2, #0
 8004b00:	2105      	movs	r1, #5
 8004b02:	2027      	movs	r0, #39	; 0x27
 8004b04:	f000 fedb 	bl	80058be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004b08:	2027      	movs	r0, #39	; 0x27
 8004b0a:	f000 fef4 	bl	80058f6 <HAL_NVIC_EnableIRQ>
}
 8004b0e:	bf00      	nop
 8004b10:	3730      	adds	r7, #48	; 0x30
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40011000 	.word	0x40011000
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	40020000 	.word	0x40020000
 8004b24:	40004800 	.word	0x40004800
 8004b28:	40020800 	.word	0x40020800

08004b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b30:	e7fe      	b.n	8004b30 <NMI_Handler+0x4>

08004b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b32:	b480      	push	{r7}
 8004b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b36:	e7fe      	b.n	8004b36 <HardFault_Handler+0x4>

08004b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b3c:	e7fe      	b.n	8004b3c <MemManage_Handler+0x4>

08004b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b42:	e7fe      	b.n	8004b42 <BusFault_Handler+0x4>

08004b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b48:	e7fe      	b.n	8004b48 <UsageFault_Handler+0x4>

08004b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b4e:	bf00      	nop
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b5c:	f000 f990 	bl	8004e80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004b60:	f007 f9b8 	bl	800bed4 <xTaskGetSchedulerState>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d001      	beq.n	8004b6e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004b6a:	f007 ff9d 	bl	800caa8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b6e:	bf00      	nop
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b78:	4802      	ldr	r0, [pc, #8]	; (8004b84 <TIM1_CC_IRQHandler+0x10>)
 8004b7a:	f003 f9e5 	bl	8007f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000320 	.word	0x20000320

08004b88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b8c:	4802      	ldr	r0, [pc, #8]	; (8004b98 <TIM2_IRQHandler+0x10>)
 8004b8e:	f003 f9db 	bl	8007f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000368 	.word	0x20000368

08004b9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004ba0:	4802      	ldr	r0, [pc, #8]	; (8004bac <TIM3_IRQHandler+0x10>)
 8004ba2:	f003 f9d1 	bl	8007f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	200003b0 	.word	0x200003b0

08004bb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004bb4:	4802      	ldr	r0, [pc, #8]	; (8004bc0 <USART1_IRQHandler+0x10>)
 8004bb6:	f004 fb8d 	bl	80092d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004bba:	bf00      	nop
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000488 	.word	0x20000488

08004bc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004bc8:	4802      	ldr	r0, [pc, #8]	; (8004bd4 <USART3_IRQHandler+0x10>)
 8004bca:	f004 fb83 	bl	80092d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004bce:	bf00      	nop
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	200004cc 	.word	0x200004cc

08004bd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return 1;
 8004bdc:	2301      	movs	r3, #1
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <_kill>:

int _kill(int pid, int sig)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004bf2:	f008 ff27 	bl	800da44 <__errno>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2216      	movs	r2, #22
 8004bfa:	601a      	str	r2, [r3, #0]
  return -1;
 8004bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <_exit>:

void _exit (int status)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004c10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ffe7 	bl	8004be8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004c1a:	e7fe      	b.n	8004c1a <_exit+0x12>

08004c1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	e00a      	b.n	8004c44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004c2e:	f3af 8000 	nop.w
 8004c32:	4601      	mov	r1, r0
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	60ba      	str	r2, [r7, #8]
 8004c3a:	b2ca      	uxtb	r2, r1
 8004c3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	3301      	adds	r3, #1
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	dbf0      	blt.n	8004c2e <_read+0x12>
  }

  return len;
 8004c4c:	687b      	ldr	r3, [r7, #4]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b086      	sub	sp, #24
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	e009      	b.n	8004c7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	60ba      	str	r2, [r7, #8]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	dbf1      	blt.n	8004c68 <_write+0x12>
  }
  return len;
 8004c84:	687b      	ldr	r3, [r7, #4]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <_close>:

int _close(int file)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cb6:	605a      	str	r2, [r3, #4]
  return 0;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <_isatty>:

int _isatty(int file)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004cce:	2301      	movs	r3, #1
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d00:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <_sbrk+0x5c>)
 8004d02:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <_sbrk+0x60>)
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d0c:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <_sbrk+0x64>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d102      	bne.n	8004d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d14:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <_sbrk+0x64>)
 8004d16:	4a12      	ldr	r2, [pc, #72]	; (8004d60 <_sbrk+0x68>)
 8004d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d1a:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <_sbrk+0x64>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4413      	add	r3, r2
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d207      	bcs.n	8004d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d28:	f008 fe8c 	bl	800da44 <__errno>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	220c      	movs	r2, #12
 8004d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d36:	e009      	b.n	8004d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d38:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <_sbrk+0x64>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <_sbrk+0x64>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4413      	add	r3, r2
 8004d46:	4a05      	ldr	r2, [pc, #20]	; (8004d5c <_sbrk+0x64>)
 8004d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20020000 	.word	0x20020000
 8004d58:	00000400 	.word	0x00000400
 8004d5c:	20000a14 	.word	0x20000a14
 8004d60:	200054b8 	.word	0x200054b8

08004d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <SystemInit+0x20>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	4a05      	ldr	r2, [pc, #20]	; (8004d84 <SystemInit+0x20>)
 8004d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d78:	bf00      	nop
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	e000ed00 	.word	0xe000ed00

08004d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d8c:	480d      	ldr	r0, [pc, #52]	; (8004dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004d8e:	490e      	ldr	r1, [pc, #56]	; (8004dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004d90:	4a0e      	ldr	r2, [pc, #56]	; (8004dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d94:	e002      	b.n	8004d9c <LoopCopyDataInit>

08004d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d9a:	3304      	adds	r3, #4

08004d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004da0:	d3f9      	bcc.n	8004d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004da2:	4a0b      	ldr	r2, [pc, #44]	; (8004dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004da4:	4c0b      	ldr	r4, [pc, #44]	; (8004dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004da8:	e001      	b.n	8004dae <LoopFillZerobss>

08004daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dac:	3204      	adds	r2, #4

08004dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004db0:	d3fb      	bcc.n	8004daa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004db2:	f7ff ffd7 	bl	8004d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004db6:	f008 fe4b 	bl	800da50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dba:	f7fc fbb7 	bl	800152c <main>
  bx  lr    
 8004dbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004dc8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004dcc:	08010c6c 	.word	0x08010c6c
  ldr r2, =_sbss
 8004dd0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004dd4:	200054b8 	.word	0x200054b8

08004dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dd8:	e7fe      	b.n	8004dd8 <ADC_IRQHandler>
	...

08004ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004de0:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <HAL_Init+0x40>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a0d      	ldr	r2, [pc, #52]	; (8004e1c <HAL_Init+0x40>)
 8004de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <HAL_Init+0x40>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a0a      	ldr	r2, [pc, #40]	; (8004e1c <HAL_Init+0x40>)
 8004df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004df8:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <HAL_Init+0x40>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a07      	ldr	r2, [pc, #28]	; (8004e1c <HAL_Init+0x40>)
 8004dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e04:	2003      	movs	r0, #3
 8004e06:	f000 fd4f 	bl	80058a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e0a:	200f      	movs	r0, #15
 8004e0c:	f000 f808 	bl	8004e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e10:	f7ff fb94 	bl	800453c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40023c00 	.word	0x40023c00

08004e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e28:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <HAL_InitTick+0x54>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <HAL_InitTick+0x58>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	4619      	mov	r1, r3
 8004e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fd67 	bl	8005912 <HAL_SYSTICK_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e00e      	b.n	8004e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b0f      	cmp	r3, #15
 8004e52:	d80a      	bhi.n	8004e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e54:	2200      	movs	r2, #0
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e5c:	f000 fd2f 	bl	80058be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e60:	4a06      	ldr	r2, [pc, #24]	; (8004e7c <HAL_InitTick+0x5c>)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e000      	b.n	8004e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20000020 	.word	0x20000020
 8004e78:	20000028 	.word	0x20000028
 8004e7c:	20000024 	.word	0x20000024

08004e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <HAL_IncTick+0x20>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_IncTick+0x24>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4413      	add	r3, r2
 8004e90:	4a04      	ldr	r2, [pc, #16]	; (8004ea4 <HAL_IncTick+0x24>)
 8004e92:	6013      	str	r3, [r2, #0]
}
 8004e94:	bf00      	nop
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000028 	.word	0x20000028
 8004ea4:	20000a18 	.word	0x20000a18

08004ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8004eac:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <HAL_GetTick+0x14>)
 8004eae:	681b      	ldr	r3, [r3, #0]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000a18 	.word	0x20000a18

08004ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ec8:	f7ff ffee 	bl	8004ea8 <HAL_GetTick>
 8004ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ed8:	d005      	beq.n	8004ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004eda:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <HAL_Delay+0x44>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ee6:	bf00      	nop
 8004ee8:	f7ff ffde 	bl	8004ea8 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d8f7      	bhi.n	8004ee8 <HAL_Delay+0x28>
  {
  }
}
 8004ef8:	bf00      	nop
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000028 	.word	0x20000028

08004f08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e033      	b.n	8004f86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d109      	bne.n	8004f3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fb34 	bl	8004594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d118      	bne.n	8004f78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f4e:	f023 0302 	bic.w	r3, r3, #2
 8004f52:	f043 0202 	orr.w	r2, r3, #2
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fad8 	bl	8005510 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f023 0303 	bic.w	r3, r3, #3
 8004f6e:	f043 0201 	orr.w	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	641a      	str	r2, [r3, #64]	; 0x40
 8004f76:	e001      	b.n	8004f7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_ADC_Start+0x1a>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e0b2      	b.n	8005110 <HAL_ADC_Start+0x180>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d018      	beq.n	8004ff2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004fd0:	4b52      	ldr	r3, [pc, #328]	; (800511c <HAL_ADC_Start+0x18c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a52      	ldr	r2, [pc, #328]	; (8005120 <HAL_ADC_Start+0x190>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	0c9a      	lsrs	r2, r3, #18
 8004fdc:	4613      	mov	r3, r2
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	4413      	add	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004fe4:	e002      	b.n	8004fec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f9      	bne.n	8004fe6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d17a      	bne.n	80050f6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005008:	f023 0301 	bic.w	r3, r3, #1
 800500c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800501e:	2b00      	cmp	r3, #0
 8005020:	d007      	beq.n	8005032 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800502a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503e:	d106      	bne.n	800504e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005044:	f023 0206 	bic.w	r2, r3, #6
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	645a      	str	r2, [r3, #68]	; 0x44
 800504c:	e002      	b.n	8005054 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800505c:	4b31      	ldr	r3, [pc, #196]	; (8005124 <HAL_ADC_Start+0x194>)
 800505e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005068:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2b00      	cmp	r3, #0
 8005074:	d12a      	bne.n	80050cc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a2b      	ldr	r2, [pc, #172]	; (8005128 <HAL_ADC_Start+0x198>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d015      	beq.n	80050ac <HAL_ADC_Start+0x11c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a29      	ldr	r2, [pc, #164]	; (800512c <HAL_ADC_Start+0x19c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d105      	bne.n	8005096 <HAL_ADC_Start+0x106>
 800508a:	4b26      	ldr	r3, [pc, #152]	; (8005124 <HAL_ADC_Start+0x194>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a25      	ldr	r2, [pc, #148]	; (8005130 <HAL_ADC_Start+0x1a0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d136      	bne.n	800510e <HAL_ADC_Start+0x17e>
 80050a0:	4b20      	ldr	r3, [pc, #128]	; (8005124 <HAL_ADC_Start+0x194>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d130      	bne.n	800510e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d129      	bne.n	800510e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80050c8:	609a      	str	r2, [r3, #8]
 80050ca:	e020      	b.n	800510e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a15      	ldr	r2, [pc, #84]	; (8005128 <HAL_ADC_Start+0x198>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d11b      	bne.n	800510e <HAL_ADC_Start+0x17e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d114      	bne.n	800510e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80050f2:	609a      	str	r2, [r3, #8]
 80050f4:	e00b      	b.n	800510e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f043 0210 	orr.w	r2, r3, #16
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	f043 0201 	orr.w	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	20000020 	.word	0x20000020
 8005120:	431bde83 	.word	0x431bde83
 8005124:	40012300 	.word	0x40012300
 8005128:	40012000 	.word	0x40012000
 800512c:	40012100 	.word	0x40012100
 8005130:	40012200 	.word	0x40012200

08005134 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_ADC_Stop+0x16>
 8005146:	2302      	movs	r3, #2
 8005148:	e021      	b.n	800518e <HAL_ADC_Stop+0x5a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0201 	bic.w	r2, r2, #1
 8005160:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d109      	bne.n	8005184 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005178:	f023 0301 	bic.w	r3, r3, #1
 800517c:	f043 0201 	orr.w	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b6:	d113      	bne.n	80051e0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80051c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c6:	d10b      	bne.n	80051e0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	f043 0220 	orr.w	r2, r3, #32
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e063      	b.n	80052a8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80051e0:	f7ff fe62 	bl	8004ea8 <HAL_GetTick>
 80051e4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80051e6:	e021      	b.n	800522c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ee:	d01d      	beq.n	800522c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <HAL_ADC_PollForConversion+0x6c>
 80051f6:	f7ff fe57 	bl	8004ea8 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d212      	bcs.n	800522c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b02      	cmp	r3, #2
 8005212:	d00b      	beq.n	800522c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	f043 0204 	orr.w	r2, r3, #4
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e03d      	b.n	80052a8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b02      	cmp	r3, #2
 8005238:	d1d6      	bne.n	80051e8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f06f 0212 	mvn.w	r2, #18
 8005242:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d123      	bne.n	80052a6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005262:	2b00      	cmp	r3, #0
 8005264:	d11f      	bne.n	80052a6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800527e:	2b00      	cmp	r3, #0
 8005280:	d111      	bne.n	80052a6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d105      	bne.n	80052a6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f043 0201 	orr.w	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_ADC_ConfigChannel+0x1c>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e105      	b.n	80054f4 <HAL_ADC_ConfigChannel+0x228>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b09      	cmp	r3, #9
 80052f6:	d925      	bls.n	8005344 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68d9      	ldr	r1, [r3, #12]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	461a      	mov	r2, r3
 8005306:	4613      	mov	r3, r2
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	4413      	add	r3, r2
 800530c:	3b1e      	subs	r3, #30
 800530e:	2207      	movs	r2, #7
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	43da      	mvns	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	400a      	ands	r2, r1
 800531c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68d9      	ldr	r1, [r3, #12]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	4618      	mov	r0, r3
 8005330:	4603      	mov	r3, r0
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	4403      	add	r3, r0
 8005336:	3b1e      	subs	r3, #30
 8005338:	409a      	lsls	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	60da      	str	r2, [r3, #12]
 8005342:	e022      	b.n	800538a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6919      	ldr	r1, [r3, #16]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	4613      	mov	r3, r2
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	4413      	add	r3, r2
 8005358:	2207      	movs	r2, #7
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	43da      	mvns	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	400a      	ands	r2, r1
 8005366:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6919      	ldr	r1, [r3, #16]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	4618      	mov	r0, r3
 800537a:	4603      	mov	r3, r0
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4403      	add	r3, r0
 8005380:	409a      	lsls	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b06      	cmp	r3, #6
 8005390:	d824      	bhi.n	80053dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	3b05      	subs	r3, #5
 80053a4:	221f      	movs	r2, #31
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43da      	mvns	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	400a      	ands	r2, r1
 80053b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	4618      	mov	r0, r3
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	3b05      	subs	r3, #5
 80053ce:	fa00 f203 	lsl.w	r2, r0, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	635a      	str	r2, [r3, #52]	; 0x34
 80053da:	e04c      	b.n	8005476 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b0c      	cmp	r3, #12
 80053e2:	d824      	bhi.n	800542e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	3b23      	subs	r3, #35	; 0x23
 80053f6:	221f      	movs	r2, #31
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	43da      	mvns	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	400a      	ands	r2, r1
 8005404:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	b29b      	uxth	r3, r3
 8005412:	4618      	mov	r0, r3
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	3b23      	subs	r3, #35	; 0x23
 8005420:	fa00 f203 	lsl.w	r2, r0, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
 800542c:	e023      	b.n	8005476 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	3b41      	subs	r3, #65	; 0x41
 8005440:	221f      	movs	r2, #31
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43da      	mvns	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	400a      	ands	r2, r1
 800544e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	4618      	mov	r0, r3
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	3b41      	subs	r3, #65	; 0x41
 800546a:	fa00 f203 	lsl.w	r2, r0, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005476:	4b22      	ldr	r3, [pc, #136]	; (8005500 <HAL_ADC_ConfigChannel+0x234>)
 8005478:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a21      	ldr	r2, [pc, #132]	; (8005504 <HAL_ADC_ConfigChannel+0x238>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d109      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x1cc>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b12      	cmp	r3, #18
 800548a:	d105      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a19      	ldr	r2, [pc, #100]	; (8005504 <HAL_ADC_ConfigChannel+0x238>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d123      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x21e>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d003      	beq.n	80054b2 <HAL_ADC_ConfigChannel+0x1e6>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b11      	cmp	r3, #17
 80054b0:	d11b      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b10      	cmp	r3, #16
 80054c4:	d111      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80054c6:	4b10      	ldr	r3, [pc, #64]	; (8005508 <HAL_ADC_ConfigChannel+0x23c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a10      	ldr	r2, [pc, #64]	; (800550c <HAL_ADC_ConfigChannel+0x240>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	0c9a      	lsrs	r2, r3, #18
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80054dc:	e002      	b.n	80054e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f9      	bne.n	80054de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	40012300 	.word	0x40012300
 8005504:	40012000 	.word	0x40012000
 8005508:	20000020 	.word	0x20000020
 800550c:	431bde83 	.word	0x431bde83

08005510 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005518:	4b79      	ldr	r3, [pc, #484]	; (8005700 <ADC_Init+0x1f0>)
 800551a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	431a      	orrs	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6859      	ldr	r1, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	021a      	lsls	r2, r3, #8
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800558a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6899      	ldr	r1, [r3, #8]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	4a58      	ldr	r2, [pc, #352]	; (8005704 <ADC_Init+0x1f4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d022      	beq.n	80055ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6899      	ldr	r1, [r3, #8]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6899      	ldr	r1, [r3, #8]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	609a      	str	r2, [r3, #8]
 80055ec:	e00f      	b.n	800560e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800560c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0202 	bic.w	r2, r2, #2
 800561c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6899      	ldr	r1, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	7e1b      	ldrb	r3, [r3, #24]
 8005628:	005a      	lsls	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01b      	beq.n	8005674 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800564a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800565a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6859      	ldr	r1, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	3b01      	subs	r3, #1
 8005668:	035a      	lsls	r2, r3, #13
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]
 8005672:	e007      	b.n	8005684 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005682:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	3b01      	subs	r3, #1
 80056a0:	051a      	lsls	r2, r3, #20
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6899      	ldr	r1, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056c6:	025a      	lsls	r2, r3, #9
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6899      	ldr	r1, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	029a      	lsls	r2, r3, #10
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	609a      	str	r2, [r3, #8]
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	40012300 	.word	0x40012300
 8005704:	0f000001 	.word	0x0f000001

08005708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005718:	4b0c      	ldr	r3, [pc, #48]	; (800574c <__NVIC_SetPriorityGrouping+0x44>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005724:	4013      	ands	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800573a:	4a04      	ldr	r2, [pc, #16]	; (800574c <__NVIC_SetPriorityGrouping+0x44>)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	60d3      	str	r3, [r2, #12]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	e000ed00 	.word	0xe000ed00

08005750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005754:	4b04      	ldr	r3, [pc, #16]	; (8005768 <__NVIC_GetPriorityGrouping+0x18>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	0a1b      	lsrs	r3, r3, #8
 800575a:	f003 0307 	and.w	r3, r3, #7
}
 800575e:	4618      	mov	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	e000ed00 	.word	0xe000ed00

0800576c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577a:	2b00      	cmp	r3, #0
 800577c:	db0b      	blt.n	8005796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	f003 021f 	and.w	r2, r3, #31
 8005784:	4907      	ldr	r1, [pc, #28]	; (80057a4 <__NVIC_EnableIRQ+0x38>)
 8005786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	2001      	movs	r0, #1
 800578e:	fa00 f202 	lsl.w	r2, r0, r2
 8005792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	e000e100 	.word	0xe000e100

080057a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	6039      	str	r1, [r7, #0]
 80057b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	db0a      	blt.n	80057d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	490c      	ldr	r1, [pc, #48]	; (80057f4 <__NVIC_SetPriority+0x4c>)
 80057c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c6:	0112      	lsls	r2, r2, #4
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	440b      	add	r3, r1
 80057cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057d0:	e00a      	b.n	80057e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	4908      	ldr	r1, [pc, #32]	; (80057f8 <__NVIC_SetPriority+0x50>)
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	3b04      	subs	r3, #4
 80057e0:	0112      	lsls	r2, r2, #4
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	440b      	add	r3, r1
 80057e6:	761a      	strb	r2, [r3, #24]
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	e000e100 	.word	0xe000e100
 80057f8:	e000ed00 	.word	0xe000ed00

080057fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b089      	sub	sp, #36	; 0x24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f1c3 0307 	rsb	r3, r3, #7
 8005816:	2b04      	cmp	r3, #4
 8005818:	bf28      	it	cs
 800581a:	2304      	movcs	r3, #4
 800581c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	3304      	adds	r3, #4
 8005822:	2b06      	cmp	r3, #6
 8005824:	d902      	bls.n	800582c <NVIC_EncodePriority+0x30>
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	3b03      	subs	r3, #3
 800582a:	e000      	b.n	800582e <NVIC_EncodePriority+0x32>
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	43da      	mvns	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	401a      	ands	r2, r3
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005844:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	fa01 f303 	lsl.w	r3, r1, r3
 800584e:	43d9      	mvns	r1, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005854:	4313      	orrs	r3, r2
         );
}
 8005856:	4618      	mov	r0, r3
 8005858:	3724      	adds	r7, #36	; 0x24
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3b01      	subs	r3, #1
 8005870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005874:	d301      	bcc.n	800587a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005876:	2301      	movs	r3, #1
 8005878:	e00f      	b.n	800589a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800587a:	4a0a      	ldr	r2, [pc, #40]	; (80058a4 <SysTick_Config+0x40>)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3b01      	subs	r3, #1
 8005880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005882:	210f      	movs	r1, #15
 8005884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005888:	f7ff ff8e 	bl	80057a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <SysTick_Config+0x40>)
 800588e:	2200      	movs	r2, #0
 8005890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005892:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <SysTick_Config+0x40>)
 8005894:	2207      	movs	r2, #7
 8005896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	e000e010 	.word	0xe000e010

080058a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff ff29 	bl	8005708 <__NVIC_SetPriorityGrouping>
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058be:	b580      	push	{r7, lr}
 80058c0:	b086      	sub	sp, #24
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	4603      	mov	r3, r0
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058d0:	f7ff ff3e 	bl	8005750 <__NVIC_GetPriorityGrouping>
 80058d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	6978      	ldr	r0, [r7, #20]
 80058dc:	f7ff ff8e 	bl	80057fc <NVIC_EncodePriority>
 80058e0:	4602      	mov	r2, r0
 80058e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff ff5d 	bl	80057a8 <__NVIC_SetPriority>
}
 80058ee:	bf00      	nop
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	4603      	mov	r3, r0
 80058fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff ff31 	bl	800576c <__NVIC_EnableIRQ>
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b082      	sub	sp, #8
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff ffa2 	bl	8005864 <SysTick_Config>
 8005920:	4603      	mov	r3, r0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005936:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005938:	f7ff fab6 	bl	8004ea8 <HAL_GetTick>
 800593c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d008      	beq.n	800595c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2280      	movs	r2, #128	; 0x80
 800594e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e052      	b.n	8005a02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0216 	bic.w	r2, r2, #22
 800596a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695a      	ldr	r2, [r3, #20]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800597a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d103      	bne.n	800598c <HAL_DMA_Abort+0x62>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0208 	bic.w	r2, r2, #8
 800599a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059ac:	e013      	b.n	80059d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059ae:	f7ff fa7b 	bl	8004ea8 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b05      	cmp	r3, #5
 80059ba:	d90c      	bls.n	80059d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2203      	movs	r2, #3
 80059c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e015      	b.n	8005a02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e4      	bne.n	80059ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e8:	223f      	movs	r2, #63	; 0x3f
 80059ea:	409a      	lsls	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d004      	beq.n	8005a28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2280      	movs	r2, #128	; 0x80
 8005a22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e00c      	b.n	8005a42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2205      	movs	r2, #5
 8005a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0201 	bic.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b089      	sub	sp, #36	; 0x24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
 8005a6a:	e16b      	b.n	8005d44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	f040 815a 	bne.w	8005d3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d005      	beq.n	8005aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d130      	bne.n	8005b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	2203      	movs	r2, #3
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ad8:	2201      	movs	r2, #1
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	f003 0201 	and.w	r2, r3, #1
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f003 0303 	and.w	r3, r3, #3
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d017      	beq.n	8005b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	2203      	movs	r2, #3
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	43db      	mvns	r3, r3
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4013      	ands	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d123      	bne.n	8005b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	08da      	lsrs	r2, r3, #3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3208      	adds	r2, #8
 8005b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	220f      	movs	r2, #15
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	08da      	lsrs	r2, r3, #3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3208      	adds	r2, #8
 8005b8e:	69b9      	ldr	r1, [r7, #24]
 8005b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	2203      	movs	r2, #3
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f003 0203 	and.w	r2, r3, #3
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80b4 	beq.w	8005d3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	4b60      	ldr	r3, [pc, #384]	; (8005d5c <HAL_GPIO_Init+0x30c>)
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bde:	4a5f      	ldr	r2, [pc, #380]	; (8005d5c <HAL_GPIO_Init+0x30c>)
 8005be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005be4:	6453      	str	r3, [r2, #68]	; 0x44
 8005be6:	4b5d      	ldr	r3, [pc, #372]	; (8005d5c <HAL_GPIO_Init+0x30c>)
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bf2:	4a5b      	ldr	r2, [pc, #364]	; (8005d60 <HAL_GPIO_Init+0x310>)
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	089b      	lsrs	r3, r3, #2
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	220f      	movs	r2, #15
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	43db      	mvns	r3, r3
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	4013      	ands	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a52      	ldr	r2, [pc, #328]	; (8005d64 <HAL_GPIO_Init+0x314>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d02b      	beq.n	8005c76 <HAL_GPIO_Init+0x226>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a51      	ldr	r2, [pc, #324]	; (8005d68 <HAL_GPIO_Init+0x318>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d025      	beq.n	8005c72 <HAL_GPIO_Init+0x222>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a50      	ldr	r2, [pc, #320]	; (8005d6c <HAL_GPIO_Init+0x31c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d01f      	beq.n	8005c6e <HAL_GPIO_Init+0x21e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a4f      	ldr	r2, [pc, #316]	; (8005d70 <HAL_GPIO_Init+0x320>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d019      	beq.n	8005c6a <HAL_GPIO_Init+0x21a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a4e      	ldr	r2, [pc, #312]	; (8005d74 <HAL_GPIO_Init+0x324>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d013      	beq.n	8005c66 <HAL_GPIO_Init+0x216>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a4d      	ldr	r2, [pc, #308]	; (8005d78 <HAL_GPIO_Init+0x328>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00d      	beq.n	8005c62 <HAL_GPIO_Init+0x212>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a4c      	ldr	r2, [pc, #304]	; (8005d7c <HAL_GPIO_Init+0x32c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d007      	beq.n	8005c5e <HAL_GPIO_Init+0x20e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a4b      	ldr	r2, [pc, #300]	; (8005d80 <HAL_GPIO_Init+0x330>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d101      	bne.n	8005c5a <HAL_GPIO_Init+0x20a>
 8005c56:	2307      	movs	r3, #7
 8005c58:	e00e      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	e00c      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c5e:	2306      	movs	r3, #6
 8005c60:	e00a      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c62:	2305      	movs	r3, #5
 8005c64:	e008      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c66:	2304      	movs	r3, #4
 8005c68:	e006      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e004      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e002      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <HAL_GPIO_Init+0x228>
 8005c76:	2300      	movs	r3, #0
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	f002 0203 	and.w	r2, r2, #3
 8005c7e:	0092      	lsls	r2, r2, #2
 8005c80:	4093      	lsls	r3, r2
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c88:	4935      	ldr	r1, [pc, #212]	; (8005d60 <HAL_GPIO_Init+0x310>)
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	089b      	lsrs	r3, r3, #2
 8005c8e:	3302      	adds	r3, #2
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c96:	4b3b      	ldr	r3, [pc, #236]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cba:	4a32      	ldr	r2, [pc, #200]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cc0:	4b30      	ldr	r3, [pc, #192]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ce4:	4a27      	ldr	r2, [pc, #156]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cea:	4b26      	ldr	r3, [pc, #152]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d0e:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d14:	4b1b      	ldr	r3, [pc, #108]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4013      	ands	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d38:	4a12      	ldr	r2, [pc, #72]	; (8005d84 <HAL_GPIO_Init+0x334>)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	3301      	adds	r3, #1
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	2b0f      	cmp	r3, #15
 8005d48:	f67f ae90 	bls.w	8005a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	3724      	adds	r7, #36	; 0x24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	40013800 	.word	0x40013800
 8005d64:	40020000 	.word	0x40020000
 8005d68:	40020400 	.word	0x40020400
 8005d6c:	40020800 	.word	0x40020800
 8005d70:	40020c00 	.word	0x40020c00
 8005d74:	40021000 	.word	0x40021000
 8005d78:	40021400 	.word	0x40021400
 8005d7c:	40021800 	.word	0x40021800
 8005d80:	40021c00 	.word	0x40021c00
 8005d84:	40013c00 	.word	0x40013c00

08005d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	807b      	strh	r3, [r7, #2]
 8005d94:	4613      	mov	r3, r2
 8005d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d98:	787b      	ldrb	r3, [r7, #1]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d9e:	887a      	ldrh	r2, [r7, #2]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005da4:	e003      	b.n	8005dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005da6:	887b      	ldrh	r3, [r7, #2]
 8005da8:	041a      	lsls	r2, r3, #16
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	619a      	str	r2, [r3, #24]
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
	...

08005dbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e12b      	b.n	8006026 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fe fc4a 	bl	800467c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2224      	movs	r2, #36	; 0x24
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0201 	bic.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e20:	f001 fbba 	bl	8007598 <HAL_RCC_GetPCLK1Freq>
 8005e24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	4a81      	ldr	r2, [pc, #516]	; (8006030 <HAL_I2C_Init+0x274>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d807      	bhi.n	8005e40 <HAL_I2C_Init+0x84>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4a80      	ldr	r2, [pc, #512]	; (8006034 <HAL_I2C_Init+0x278>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	bf94      	ite	ls
 8005e38:	2301      	movls	r3, #1
 8005e3a:	2300      	movhi	r3, #0
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	e006      	b.n	8005e4e <HAL_I2C_Init+0x92>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4a7d      	ldr	r2, [pc, #500]	; (8006038 <HAL_I2C_Init+0x27c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	bf94      	ite	ls
 8005e48:	2301      	movls	r3, #1
 8005e4a:	2300      	movhi	r3, #0
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e0e7      	b.n	8006026 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4a78      	ldr	r2, [pc, #480]	; (800603c <HAL_I2C_Init+0x280>)
 8005e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5e:	0c9b      	lsrs	r3, r3, #18
 8005e60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	4a6a      	ldr	r2, [pc, #424]	; (8006030 <HAL_I2C_Init+0x274>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d802      	bhi.n	8005e90 <HAL_I2C_Init+0xd4>
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	e009      	b.n	8005ea4 <HAL_I2C_Init+0xe8>
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e96:	fb02 f303 	mul.w	r3, r2, r3
 8005e9a:	4a69      	ldr	r2, [pc, #420]	; (8006040 <HAL_I2C_Init+0x284>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	099b      	lsrs	r3, r3, #6
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6812      	ldr	r2, [r2, #0]
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005eb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	495c      	ldr	r1, [pc, #368]	; (8006030 <HAL_I2C_Init+0x274>)
 8005ec0:	428b      	cmp	r3, r1
 8005ec2:	d819      	bhi.n	8005ef8 <HAL_I2C_Init+0x13c>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	1e59      	subs	r1, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ed2:	1c59      	adds	r1, r3, #1
 8005ed4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ed8:	400b      	ands	r3, r1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <HAL_I2C_Init+0x138>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	1e59      	subs	r1, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005eec:	3301      	adds	r3, #1
 8005eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef2:	e051      	b.n	8005f98 <HAL_I2C_Init+0x1dc>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	e04f      	b.n	8005f98 <HAL_I2C_Init+0x1dc>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d111      	bne.n	8005f24 <HAL_I2C_Init+0x168>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	1e58      	subs	r0, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6859      	ldr	r1, [r3, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	440b      	add	r3, r1
 8005f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f12:	3301      	adds	r3, #1
 8005f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	bf0c      	ite	eq
 8005f1c:	2301      	moveq	r3, #1
 8005f1e:	2300      	movne	r3, #0
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	e012      	b.n	8005f4a <HAL_I2C_Init+0x18e>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	1e58      	subs	r0, r3, #1
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6859      	ldr	r1, [r3, #4]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	0099      	lsls	r1, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	bf0c      	ite	eq
 8005f44:	2301      	moveq	r3, #1
 8005f46:	2300      	movne	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <HAL_I2C_Init+0x196>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e022      	b.n	8005f98 <HAL_I2C_Init+0x1dc>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10e      	bne.n	8005f78 <HAL_I2C_Init+0x1bc>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1e58      	subs	r0, r3, #1
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6859      	ldr	r1, [r3, #4]
 8005f62:	460b      	mov	r3, r1
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	440b      	add	r3, r1
 8005f68:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f76:	e00f      	b.n	8005f98 <HAL_I2C_Init+0x1dc>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	1e58      	subs	r0, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6859      	ldr	r1, [r3, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	0099      	lsls	r1, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f8e:	3301      	adds	r3, #1
 8005f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	6809      	ldr	r1, [r1, #0]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69da      	ldr	r2, [r3, #28]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6911      	ldr	r1, [r2, #16]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	68d2      	ldr	r2, [r2, #12]
 8005fd2:	4311      	orrs	r1, r2
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695a      	ldr	r2, [r3, #20]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	000186a0 	.word	0x000186a0
 8006034:	001e847f 	.word	0x001e847f
 8006038:	003d08ff 	.word	0x003d08ff
 800603c:	431bde83 	.word	0x431bde83
 8006040:	10624dd3 	.word	0x10624dd3

08006044 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af02      	add	r7, sp, #8
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	607a      	str	r2, [r7, #4]
 800604e:	461a      	mov	r2, r3
 8006050:	460b      	mov	r3, r1
 8006052:	817b      	strh	r3, [r7, #10]
 8006054:	4613      	mov	r3, r2
 8006056:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006058:	f7fe ff26 	bl	8004ea8 <HAL_GetTick>
 800605c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b20      	cmp	r3, #32
 8006068:	f040 80e0 	bne.w	800622c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	2319      	movs	r3, #25
 8006072:	2201      	movs	r2, #1
 8006074:	4970      	ldr	r1, [pc, #448]	; (8006238 <HAL_I2C_Master_Transmit+0x1f4>)
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 fc58 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006082:	2302      	movs	r3, #2
 8006084:	e0d3      	b.n	800622e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_I2C_Master_Transmit+0x50>
 8006090:	2302      	movs	r3, #2
 8006092:	e0cc      	b.n	800622e <HAL_I2C_Master_Transmit+0x1ea>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d007      	beq.n	80060ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0201 	orr.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2221      	movs	r2, #33	; 0x21
 80060ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2210      	movs	r2, #16
 80060d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	893a      	ldrh	r2, [r7, #8]
 80060ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4a50      	ldr	r2, [pc, #320]	; (800623c <HAL_I2C_Master_Transmit+0x1f8>)
 80060fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80060fc:	8979      	ldrh	r1, [r7, #10]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	6a3a      	ldr	r2, [r7, #32]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fac2 	bl	800668c <I2C_MasterRequestWrite>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e08d      	b.n	800622e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006112:	2300      	movs	r3, #0
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006128:	e066      	b.n	80061f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	6a39      	ldr	r1, [r7, #32]
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fcd2 	bl	8006ad8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00d      	beq.n	8006156 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	2b04      	cmp	r3, #4
 8006140:	d107      	bne.n	8006152 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006150:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e06b      	b.n	800622e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	781a      	ldrb	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b04      	cmp	r3, #4
 8006192:	d11b      	bne.n	80061cc <HAL_I2C_Master_Transmit+0x188>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	d017      	beq.n	80061cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	781a      	ldrb	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	6a39      	ldr	r1, [r7, #32]
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fcc2 	bl	8006b5a <I2C_WaitOnBTFFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00d      	beq.n	80061f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d107      	bne.n	80061f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e01a      	b.n	800622e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d194      	bne.n	800612a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800620e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800622c:	2302      	movs	r3, #2
  }
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	00100002 	.word	0x00100002
 800623c:	ffff0000 	.word	0xffff0000

08006240 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08c      	sub	sp, #48	; 0x30
 8006244:	af02      	add	r7, sp, #8
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	607a      	str	r2, [r7, #4]
 800624a:	461a      	mov	r2, r3
 800624c:	460b      	mov	r3, r1
 800624e:	817b      	strh	r3, [r7, #10]
 8006250:	4613      	mov	r3, r2
 8006252:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006254:	f7fe fe28 	bl	8004ea8 <HAL_GetTick>
 8006258:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b20      	cmp	r3, #32
 8006264:	f040 820b 	bne.w	800667e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	2319      	movs	r3, #25
 800626e:	2201      	movs	r2, #1
 8006270:	497c      	ldr	r1, [pc, #496]	; (8006464 <HAL_I2C_Master_Receive+0x224>)
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 fb5a 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800627e:	2302      	movs	r3, #2
 8006280:	e1fe      	b.n	8006680 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_I2C_Master_Receive+0x50>
 800628c:	2302      	movs	r3, #2
 800628e:	e1f7      	b.n	8006680 <HAL_I2C_Master_Receive+0x440>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d007      	beq.n	80062b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0201 	orr.w	r2, r2, #1
 80062b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2222      	movs	r2, #34	; 0x22
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2210      	movs	r2, #16
 80062d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	893a      	ldrh	r2, [r7, #8]
 80062e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4a5c      	ldr	r2, [pc, #368]	; (8006468 <HAL_I2C_Master_Receive+0x228>)
 80062f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80062f8:	8979      	ldrh	r1, [r7, #10]
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 fa46 	bl	8006790 <I2C_MasterRequestRead>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e1b8      	b.n	8006680 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006312:	2b00      	cmp	r3, #0
 8006314:	d113      	bne.n	800633e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006316:	2300      	movs	r3, #0
 8006318:	623b      	str	r3, [r7, #32]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	623b      	str	r3, [r7, #32]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	623b      	str	r3, [r7, #32]
 800632a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	e18c      	b.n	8006658 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006342:	2b01      	cmp	r3, #1
 8006344:	d11b      	bne.n	800637e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006354:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	61fb      	str	r3, [r7, #28]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	61fb      	str	r3, [r7, #28]
 800636a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	e16c      	b.n	8006658 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006382:	2b02      	cmp	r3, #2
 8006384:	d11b      	bne.n	80063be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006394:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063a6:	2300      	movs	r3, #0
 80063a8:	61bb      	str	r3, [r7, #24]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	61bb      	str	r3, [r7, #24]
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	e14c      	b.n	8006658 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	617b      	str	r3, [r7, #20]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80063e4:	e138      	b.n	8006658 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	f200 80f1 	bhi.w	80065d2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d123      	bne.n	8006440 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fbed 	bl	8006bdc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e139      	b.n	8006680 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006428:	3b01      	subs	r3, #1
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006434:	b29b      	uxth	r3, r3
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800643e:	e10b      	b.n	8006658 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006444:	2b02      	cmp	r3, #2
 8006446:	d14e      	bne.n	80064e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	2200      	movs	r2, #0
 8006450:	4906      	ldr	r1, [pc, #24]	; (800646c <HAL_I2C_Master_Receive+0x22c>)
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 fa6a 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d008      	beq.n	8006470 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e10e      	b.n	8006680 <HAL_I2C_Master_Receive+0x440>
 8006462:	bf00      	nop
 8006464:	00100002 	.word	0x00100002
 8006468:	ffff0000 	.word	0xffff0000
 800646c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800647e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691a      	ldr	r2, [r3, #16]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ce:	3b01      	subs	r3, #1
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064e4:	e0b8      	b.n	8006658 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	2200      	movs	r2, #0
 80064ee:	4966      	ldr	r1, [pc, #408]	; (8006688 <HAL_I2C_Master_Receive+0x448>)
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 fa1b 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e0bf      	b.n	8006680 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800650e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	2200      	movs	r2, #0
 800654a:	494f      	ldr	r1, [pc, #316]	; (8006688 <HAL_I2C_Master_Receive+0x448>)
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f9ed 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e091      	b.n	8006680 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800656a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	3b01      	subs	r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065d0:	e042      	b.n	8006658 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 fb00 	bl	8006bdc <I2C_WaitOnRXNEFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e04c      	b.n	8006680 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	b2d2      	uxtb	r2, r2
 80065f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006602:	3b01      	subs	r3, #1
 8006604:	b29a      	uxth	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	2b04      	cmp	r3, #4
 8006624:	d118      	bne.n	8006658 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	b2d2      	uxtb	r2, r2
 8006632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665c:	2b00      	cmp	r3, #0
 800665e:	f47f aec2 	bne.w	80063e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2220      	movs	r2, #32
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	e000      	b.n	8006680 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800667e:	2302      	movs	r3, #2
  }
}
 8006680:	4618      	mov	r0, r3
 8006682:	3728      	adds	r7, #40	; 0x28
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	00010004 	.word	0x00010004

0800668c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	607a      	str	r2, [r7, #4]
 8006696:	603b      	str	r3, [r7, #0]
 8006698:	460b      	mov	r3, r1
 800669a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d006      	beq.n	80066b6 <I2C_MasterRequestWrite+0x2a>
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d003      	beq.n	80066b6 <I2C_MasterRequestWrite+0x2a>
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066b4:	d108      	bne.n	80066c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	e00b      	b.n	80066e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	2b12      	cmp	r3, #18
 80066ce:	d107      	bne.n	80066e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 f91d 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00d      	beq.n	8006714 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006706:	d103      	bne.n	8006710 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800670e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e035      	b.n	8006780 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800671c:	d108      	bne.n	8006730 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800671e:	897b      	ldrh	r3, [r7, #10]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800672c:	611a      	str	r2, [r3, #16]
 800672e:	e01b      	b.n	8006768 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006730:	897b      	ldrh	r3, [r7, #10]
 8006732:	11db      	asrs	r3, r3, #7
 8006734:	b2db      	uxtb	r3, r3
 8006736:	f003 0306 	and.w	r3, r3, #6
 800673a:	b2db      	uxtb	r3, r3
 800673c:	f063 030f 	orn	r3, r3, #15
 8006740:	b2da      	uxtb	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	490e      	ldr	r1, [pc, #56]	; (8006788 <I2C_MasterRequestWrite+0xfc>)
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 f943 	bl	80069da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e010      	b.n	8006780 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800675e:	897b      	ldrh	r3, [r7, #10]
 8006760:	b2da      	uxtb	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	4907      	ldr	r1, [pc, #28]	; (800678c <I2C_MasterRequestWrite+0x100>)
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 f933 	bl	80069da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	00010008 	.word	0x00010008
 800678c:	00010002 	.word	0x00010002

08006790 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	460b      	mov	r3, r1
 800679e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d006      	beq.n	80067ca <I2C_MasterRequestRead+0x3a>
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d003      	beq.n	80067ca <I2C_MasterRequestRead+0x3a>
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067c8:	d108      	bne.n	80067dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	e00b      	b.n	80067f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	2b11      	cmp	r3, #17
 80067e2:	d107      	bne.n	80067f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 f893 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00d      	beq.n	8006828 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681a:	d103      	bne.n	8006824 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006822:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e079      	b.n	800691c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006830:	d108      	bne.n	8006844 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006832:	897b      	ldrh	r3, [r7, #10]
 8006834:	b2db      	uxtb	r3, r3
 8006836:	f043 0301 	orr.w	r3, r3, #1
 800683a:	b2da      	uxtb	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	611a      	str	r2, [r3, #16]
 8006842:	e05f      	b.n	8006904 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006844:	897b      	ldrh	r3, [r7, #10]
 8006846:	11db      	asrs	r3, r3, #7
 8006848:	b2db      	uxtb	r3, r3
 800684a:	f003 0306 	and.w	r3, r3, #6
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f063 030f 	orn	r3, r3, #15
 8006854:	b2da      	uxtb	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	4930      	ldr	r1, [pc, #192]	; (8006924 <I2C_MasterRequestRead+0x194>)
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 f8b9 	bl	80069da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e054      	b.n	800691c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006872:	897b      	ldrh	r3, [r7, #10]
 8006874:	b2da      	uxtb	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	4929      	ldr	r1, [pc, #164]	; (8006928 <I2C_MasterRequestRead+0x198>)
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 f8a9 	bl	80069da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e044      	b.n	800691c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006892:	2300      	movs	r3, #0
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	613b      	str	r3, [r7, #16]
 80068a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f831 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00d      	beq.n	80068ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068de:	d103      	bne.n	80068e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e017      	b.n	800691c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80068ec:	897b      	ldrh	r3, [r7, #10]
 80068ee:	11db      	asrs	r3, r3, #7
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	f003 0306 	and.w	r3, r3, #6
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	f063 030e 	orn	r3, r3, #14
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	4907      	ldr	r1, [pc, #28]	; (8006928 <I2C_MasterRequestRead+0x198>)
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 f865 	bl	80069da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e000      	b.n	800691c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	00010008 	.word	0x00010008
 8006928:	00010002 	.word	0x00010002

0800692c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	4613      	mov	r3, r2
 800693a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800693c:	e025      	b.n	800698a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006944:	d021      	beq.n	800698a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006946:	f7fe faaf 	bl	8004ea8 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d302      	bcc.n	800695c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d116      	bne.n	800698a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2220      	movs	r2, #32
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	f043 0220 	orr.w	r2, r3, #32
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e023      	b.n	80069d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	0c1b      	lsrs	r3, r3, #16
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b01      	cmp	r3, #1
 8006992:	d10d      	bne.n	80069b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	43da      	mvns	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	4013      	ands	r3, r2
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bf0c      	ite	eq
 80069a6:	2301      	moveq	r3, #1
 80069a8:	2300      	movne	r3, #0
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	461a      	mov	r2, r3
 80069ae:	e00c      	b.n	80069ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	43da      	mvns	r2, r3
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4013      	ands	r3, r2
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	bf0c      	ite	eq
 80069c2:	2301      	moveq	r3, #1
 80069c4:	2300      	movne	r3, #0
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	461a      	mov	r2, r3
 80069ca:	79fb      	ldrb	r3, [r7, #7]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d0b6      	beq.n	800693e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	607a      	str	r2, [r7, #4]
 80069e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069e8:	e051      	b.n	8006a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f8:	d123      	bne.n	8006a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	f043 0204 	orr.w	r2, r3, #4
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e046      	b.n	8006ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a48:	d021      	beq.n	8006a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4a:	f7fe fa2d 	bl	8004ea8 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d302      	bcc.n	8006a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d116      	bne.n	8006a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	f043 0220 	orr.w	r2, r3, #32
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e020      	b.n	8006ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	0c1b      	lsrs	r3, r3, #16
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d10c      	bne.n	8006ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	43da      	mvns	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	bf14      	ite	ne
 8006aaa:	2301      	movne	r3, #1
 8006aac:	2300      	moveq	r3, #0
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	e00b      	b.n	8006aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	43da      	mvns	r2, r3
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	4013      	ands	r3, r2
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	bf14      	ite	ne
 8006ac4:	2301      	movne	r3, #1
 8006ac6:	2300      	moveq	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d18d      	bne.n	80069ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ae4:	e02d      	b.n	8006b42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 f8ce 	bl	8006c88 <I2C_IsAcknowledgeFailed>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e02d      	b.n	8006b52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006afc:	d021      	beq.n	8006b42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006afe:	f7fe f9d3 	bl	8004ea8 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d302      	bcc.n	8006b14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d116      	bne.n	8006b42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	f043 0220 	orr.w	r2, r3, #32
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e007      	b.n	8006b52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4c:	2b80      	cmp	r3, #128	; 0x80
 8006b4e:	d1ca      	bne.n	8006ae6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b66:	e02d      	b.n	8006bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 f88d 	bl	8006c88 <I2C_IsAcknowledgeFailed>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e02d      	b.n	8006bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b7e:	d021      	beq.n	8006bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b80:	f7fe f992 	bl	8004ea8 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d302      	bcc.n	8006b96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d116      	bne.n	8006bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	f043 0220 	orr.w	r2, r3, #32
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e007      	b.n	8006bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d1ca      	bne.n	8006b68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006be8:	e042      	b.n	8006c70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b10      	cmp	r3, #16
 8006bf6:	d119      	bne.n	8006c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f06f 0210 	mvn.w	r2, #16
 8006c00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e029      	b.n	8006c80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c2c:	f7fe f93c 	bl	8004ea8 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d302      	bcc.n	8006c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d116      	bne.n	8006c70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	f043 0220 	orr.w	r2, r3, #32
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e007      	b.n	8006c80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d1b5      	bne.n	8006bea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9e:	d11b      	bne.n	8006cd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ca8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc4:	f043 0204 	orr.w	r2, r3, #4
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e000      	b.n	8006cda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
	...

08006ce8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006cee:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <HAL_PWR_EnableBkUpAccess+0x20>)
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006cf4:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <HAL_PWR_EnableBkUpAccess+0x24>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006cfa:	687b      	ldr	r3, [r7, #4]
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	420e0020 	.word	0x420e0020
 8006d0c:	40007000 	.word	0x40007000

08006d10 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006d16:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <HAL_PWR_DisableBkUpAccess+0x20>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <HAL_PWR_DisableBkUpAccess+0x24>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006d22:	687b      	ldr	r3, [r7, #4]
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	420e0020 	.word	0x420e0020
 8006d34:	40007000 	.word	0x40007000

08006d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e267      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d075      	beq.n	8006e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d56:	4b88      	ldr	r3, [pc, #544]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 030c 	and.w	r3, r3, #12
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d00c      	beq.n	8006d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d62:	4b85      	ldr	r3, [pc, #532]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d6a:	2b08      	cmp	r3, #8
 8006d6c:	d112      	bne.n	8006d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d6e:	4b82      	ldr	r3, [pc, #520]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d7a:	d10b      	bne.n	8006d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d7c:	4b7e      	ldr	r3, [pc, #504]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d05b      	beq.n	8006e40 <HAL_RCC_OscConfig+0x108>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d157      	bne.n	8006e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e242      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9c:	d106      	bne.n	8006dac <HAL_RCC_OscConfig+0x74>
 8006d9e:	4b76      	ldr	r3, [pc, #472]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a75      	ldr	r2, [pc, #468]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	e01d      	b.n	8006de8 <HAL_RCC_OscConfig+0xb0>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006db4:	d10c      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x98>
 8006db6:	4b70      	ldr	r3, [pc, #448]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a6f      	ldr	r2, [pc, #444]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	4b6d      	ldr	r3, [pc, #436]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a6c      	ldr	r2, [pc, #432]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	e00b      	b.n	8006de8 <HAL_RCC_OscConfig+0xb0>
 8006dd0:	4b69      	ldr	r3, [pc, #420]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a68      	ldr	r2, [pc, #416]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	4b66      	ldr	r3, [pc, #408]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a65      	ldr	r2, [pc, #404]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d013      	beq.n	8006e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006df0:	f7fe f85a 	bl	8004ea8 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006df8:	f7fe f856 	bl	8004ea8 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b64      	cmp	r3, #100	; 0x64
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e207      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e0a:	4b5b      	ldr	r3, [pc, #364]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0f0      	beq.n	8006df8 <HAL_RCC_OscConfig+0xc0>
 8006e16:	e014      	b.n	8006e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e18:	f7fe f846 	bl	8004ea8 <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e20:	f7fe f842 	bl	8004ea8 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b64      	cmp	r3, #100	; 0x64
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e1f3      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e32:	4b51      	ldr	r3, [pc, #324]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1f0      	bne.n	8006e20 <HAL_RCC_OscConfig+0xe8>
 8006e3e:	e000      	b.n	8006e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d063      	beq.n	8006f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e4e:	4b4a      	ldr	r3, [pc, #296]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f003 030c 	and.w	r3, r3, #12
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00b      	beq.n	8006e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e5a:	4b47      	ldr	r3, [pc, #284]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d11c      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e66:	4b44      	ldr	r3, [pc, #272]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d116      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e72:	4b41      	ldr	r3, [pc, #260]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d005      	beq.n	8006e8a <HAL_RCC_OscConfig+0x152>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d001      	beq.n	8006e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e1c7      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e8a:	4b3b      	ldr	r3, [pc, #236]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	4937      	ldr	r1, [pc, #220]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e9e:	e03a      	b.n	8006f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d020      	beq.n	8006eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ea8:	4b34      	ldr	r3, [pc, #208]	; (8006f7c <HAL_RCC_OscConfig+0x244>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eae:	f7fd fffb 	bl	8004ea8 <HAL_GetTick>
 8006eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eb4:	e008      	b.n	8006ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006eb6:	f7fd fff7 	bl	8004ea8 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e1a8      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ec8:	4b2b      	ldr	r3, [pc, #172]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0f0      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ed4:	4b28      	ldr	r3, [pc, #160]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	00db      	lsls	r3, r3, #3
 8006ee2:	4925      	ldr	r1, [pc, #148]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	600b      	str	r3, [r1, #0]
 8006ee8:	e015      	b.n	8006f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eea:	4b24      	ldr	r3, [pc, #144]	; (8006f7c <HAL_RCC_OscConfig+0x244>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef0:	f7fd ffda 	bl	8004ea8 <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ef8:	f7fd ffd6 	bl	8004ea8 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e187      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f0a:	4b1b      	ldr	r3, [pc, #108]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1f0      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d036      	beq.n	8006f90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d016      	beq.n	8006f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f2a:	4b15      	ldr	r3, [pc, #84]	; (8006f80 <HAL_RCC_OscConfig+0x248>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f30:	f7fd ffba 	bl	8004ea8 <HAL_GetTick>
 8006f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f38:	f7fd ffb6 	bl	8004ea8 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e167      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f4a:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0f0      	beq.n	8006f38 <HAL_RCC_OscConfig+0x200>
 8006f56:	e01b      	b.n	8006f90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f58:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <HAL_RCC_OscConfig+0x248>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f5e:	f7fd ffa3 	bl	8004ea8 <HAL_GetTick>
 8006f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f64:	e00e      	b.n	8006f84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f66:	f7fd ff9f 	bl	8004ea8 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d907      	bls.n	8006f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e150      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	42470000 	.word	0x42470000
 8006f80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f84:	4b88      	ldr	r3, [pc, #544]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 8006f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1ea      	bne.n	8006f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 8097 	beq.w	80070cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fa2:	4b81      	ldr	r3, [pc, #516]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10f      	bne.n	8006fce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60bb      	str	r3, [r7, #8]
 8006fb2:	4b7d      	ldr	r3, [pc, #500]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	4a7c      	ldr	r2, [pc, #496]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 8006fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006fbe:	4b7a      	ldr	r3, [pc, #488]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc6:	60bb      	str	r3, [r7, #8]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fce:	4b77      	ldr	r3, [pc, #476]	; (80071ac <HAL_RCC_OscConfig+0x474>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d118      	bne.n	800700c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fda:	4b74      	ldr	r3, [pc, #464]	; (80071ac <HAL_RCC_OscConfig+0x474>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a73      	ldr	r2, [pc, #460]	; (80071ac <HAL_RCC_OscConfig+0x474>)
 8006fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fe6:	f7fd ff5f 	bl	8004ea8 <HAL_GetTick>
 8006fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fec:	e008      	b.n	8007000 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fee:	f7fd ff5b 	bl	8004ea8 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d901      	bls.n	8007000 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e10c      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007000:	4b6a      	ldr	r3, [pc, #424]	; (80071ac <HAL_RCC_OscConfig+0x474>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0f0      	beq.n	8006fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d106      	bne.n	8007022 <HAL_RCC_OscConfig+0x2ea>
 8007014:	4b64      	ldr	r3, [pc, #400]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007018:	4a63      	ldr	r2, [pc, #396]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 800701a:	f043 0301 	orr.w	r3, r3, #1
 800701e:	6713      	str	r3, [r2, #112]	; 0x70
 8007020:	e01c      	b.n	800705c <HAL_RCC_OscConfig+0x324>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	2b05      	cmp	r3, #5
 8007028:	d10c      	bne.n	8007044 <HAL_RCC_OscConfig+0x30c>
 800702a:	4b5f      	ldr	r3, [pc, #380]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 800702c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702e:	4a5e      	ldr	r2, [pc, #376]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007030:	f043 0304 	orr.w	r3, r3, #4
 8007034:	6713      	str	r3, [r2, #112]	; 0x70
 8007036:	4b5c      	ldr	r3, [pc, #368]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703a:	4a5b      	ldr	r2, [pc, #364]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 800703c:	f043 0301 	orr.w	r3, r3, #1
 8007040:	6713      	str	r3, [r2, #112]	; 0x70
 8007042:	e00b      	b.n	800705c <HAL_RCC_OscConfig+0x324>
 8007044:	4b58      	ldr	r3, [pc, #352]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007048:	4a57      	ldr	r2, [pc, #348]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 800704a:	f023 0301 	bic.w	r3, r3, #1
 800704e:	6713      	str	r3, [r2, #112]	; 0x70
 8007050:	4b55      	ldr	r3, [pc, #340]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007054:	4a54      	ldr	r2, [pc, #336]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007056:	f023 0304 	bic.w	r3, r3, #4
 800705a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d015      	beq.n	8007090 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007064:	f7fd ff20 	bl	8004ea8 <HAL_GetTick>
 8007068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800706a:	e00a      	b.n	8007082 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800706c:	f7fd ff1c 	bl	8004ea8 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	f241 3288 	movw	r2, #5000	; 0x1388
 800707a:	4293      	cmp	r3, r2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e0cb      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007082:	4b49      	ldr	r3, [pc, #292]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0ee      	beq.n	800706c <HAL_RCC_OscConfig+0x334>
 800708e:	e014      	b.n	80070ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007090:	f7fd ff0a 	bl	8004ea8 <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007096:	e00a      	b.n	80070ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007098:	f7fd ff06 	bl	8004ea8 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e0b5      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070ae:	4b3e      	ldr	r3, [pc, #248]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 80070b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1ee      	bne.n	8007098 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d105      	bne.n	80070cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070c0:	4b39      	ldr	r3, [pc, #228]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 80070c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c4:	4a38      	ldr	r2, [pc, #224]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 80070c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 80a1 	beq.w	8007218 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070d6:	4b34      	ldr	r3, [pc, #208]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 030c 	and.w	r3, r3, #12
 80070de:	2b08      	cmp	r3, #8
 80070e0:	d05c      	beq.n	800719c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d141      	bne.n	800716e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ea:	4b31      	ldr	r3, [pc, #196]	; (80071b0 <HAL_RCC_OscConfig+0x478>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070f0:	f7fd feda 	bl	8004ea8 <HAL_GetTick>
 80070f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070f6:	e008      	b.n	800710a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070f8:	f7fd fed6 	bl	8004ea8 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e087      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800710a:	4b27      	ldr	r3, [pc, #156]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1f0      	bne.n	80070f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	69da      	ldr	r2, [r3, #28]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	431a      	orrs	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	019b      	lsls	r3, r3, #6
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	3b01      	subs	r3, #1
 8007130:	041b      	lsls	r3, r3, #16
 8007132:	431a      	orrs	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	061b      	lsls	r3, r3, #24
 800713a:	491b      	ldr	r1, [pc, #108]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 800713c:	4313      	orrs	r3, r2
 800713e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007140:	4b1b      	ldr	r3, [pc, #108]	; (80071b0 <HAL_RCC_OscConfig+0x478>)
 8007142:	2201      	movs	r2, #1
 8007144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007146:	f7fd feaf 	bl	8004ea8 <HAL_GetTick>
 800714a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800714c:	e008      	b.n	8007160 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800714e:	f7fd feab 	bl	8004ea8 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d901      	bls.n	8007160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e05c      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007160:	4b11      	ldr	r3, [pc, #68]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d0f0      	beq.n	800714e <HAL_RCC_OscConfig+0x416>
 800716c:	e054      	b.n	8007218 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800716e:	4b10      	ldr	r3, [pc, #64]	; (80071b0 <HAL_RCC_OscConfig+0x478>)
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007174:	f7fd fe98 	bl	8004ea8 <HAL_GetTick>
 8007178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800717c:	f7fd fe94 	bl	8004ea8 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e045      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800718e:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1f0      	bne.n	800717c <HAL_RCC_OscConfig+0x444>
 800719a:	e03d      	b.n	8007218 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d107      	bne.n	80071b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e038      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
 80071a8:	40023800 	.word	0x40023800
 80071ac:	40007000 	.word	0x40007000
 80071b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071b4:	4b1b      	ldr	r3, [pc, #108]	; (8007224 <HAL_RCC_OscConfig+0x4ec>)
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d028      	beq.n	8007214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d121      	bne.n	8007214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071da:	429a      	cmp	r2, r3
 80071dc:	d11a      	bne.n	8007214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071e4:	4013      	ands	r3, r2
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d111      	bne.n	8007214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	085b      	lsrs	r3, r3, #1
 80071fc:	3b01      	subs	r3, #1
 80071fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007200:	429a      	cmp	r2, r3
 8007202:	d107      	bne.n	8007214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007210:	429a      	cmp	r2, r3
 8007212:	d001      	beq.n	8007218 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e000      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	40023800 	.word	0x40023800

08007228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e0cc      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800723c:	4b68      	ldr	r3, [pc, #416]	; (80073e0 <HAL_RCC_ClockConfig+0x1b8>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0307 	and.w	r3, r3, #7
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d90c      	bls.n	8007264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800724a:	4b65      	ldr	r3, [pc, #404]	; (80073e0 <HAL_RCC_ClockConfig+0x1b8>)
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	b2d2      	uxtb	r2, r2
 8007250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007252:	4b63      	ldr	r3, [pc, #396]	; (80073e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d001      	beq.n	8007264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e0b8      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d020      	beq.n	80072b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800727c:	4b59      	ldr	r3, [pc, #356]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	4a58      	ldr	r2, [pc, #352]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007294:	4b53      	ldr	r3, [pc, #332]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	4a52      	ldr	r2, [pc, #328]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 800729a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800729e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072a0:	4b50      	ldr	r3, [pc, #320]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	494d      	ldr	r1, [pc, #308]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d044      	beq.n	8007348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d107      	bne.n	80072d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072c6:	4b47      	ldr	r3, [pc, #284]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d119      	bne.n	8007306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e07f      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d003      	beq.n	80072e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d107      	bne.n	80072f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072e6:	4b3f      	ldr	r3, [pc, #252]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d109      	bne.n	8007306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e06f      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072f6:	4b3b      	ldr	r3, [pc, #236]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e067      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007306:	4b37      	ldr	r3, [pc, #220]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f023 0203 	bic.w	r2, r3, #3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	4934      	ldr	r1, [pc, #208]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007314:	4313      	orrs	r3, r2
 8007316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007318:	f7fd fdc6 	bl	8004ea8 <HAL_GetTick>
 800731c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800731e:	e00a      	b.n	8007336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007320:	f7fd fdc2 	bl	8004ea8 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	f241 3288 	movw	r2, #5000	; 0x1388
 800732e:	4293      	cmp	r3, r2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e04f      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007336:	4b2b      	ldr	r3, [pc, #172]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f003 020c 	and.w	r2, r3, #12
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	429a      	cmp	r2, r3
 8007346:	d1eb      	bne.n	8007320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007348:	4b25      	ldr	r3, [pc, #148]	; (80073e0 <HAL_RCC_ClockConfig+0x1b8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0307 	and.w	r3, r3, #7
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	d20c      	bcs.n	8007370 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007356:	4b22      	ldr	r3, [pc, #136]	; (80073e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800735e:	4b20      	ldr	r3, [pc, #128]	; (80073e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	429a      	cmp	r2, r3
 800736a:	d001      	beq.n	8007370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e032      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d008      	beq.n	800738e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800737c:	4b19      	ldr	r3, [pc, #100]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	4916      	ldr	r1, [pc, #88]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 800738a:	4313      	orrs	r3, r2
 800738c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d009      	beq.n	80073ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800739a:	4b12      	ldr	r3, [pc, #72]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	490e      	ldr	r1, [pc, #56]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073ae:	f000 f821 	bl	80073f4 <HAL_RCC_GetSysClockFreq>
 80073b2:	4602      	mov	r2, r0
 80073b4:	4b0b      	ldr	r3, [pc, #44]	; (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	091b      	lsrs	r3, r3, #4
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	490a      	ldr	r1, [pc, #40]	; (80073e8 <HAL_RCC_ClockConfig+0x1c0>)
 80073c0:	5ccb      	ldrb	r3, [r1, r3]
 80073c2:	fa22 f303 	lsr.w	r3, r2, r3
 80073c6:	4a09      	ldr	r2, [pc, #36]	; (80073ec <HAL_RCC_ClockConfig+0x1c4>)
 80073c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073ca:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <HAL_RCC_ClockConfig+0x1c8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fd fd26 	bl	8004e20 <HAL_InitTick>

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	40023c00 	.word	0x40023c00
 80073e4:	40023800 	.word	0x40023800
 80073e8:	080108d0 	.word	0x080108d0
 80073ec:	20000020 	.word	0x20000020
 80073f0:	20000024 	.word	0x20000024

080073f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073f8:	b090      	sub	sp, #64	; 0x40
 80073fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007400:	2300      	movs	r3, #0
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007404:	2300      	movs	r3, #0
 8007406:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800740c:	4b59      	ldr	r3, [pc, #356]	; (8007574 <HAL_RCC_GetSysClockFreq+0x180>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 030c 	and.w	r3, r3, #12
 8007414:	2b08      	cmp	r3, #8
 8007416:	d00d      	beq.n	8007434 <HAL_RCC_GetSysClockFreq+0x40>
 8007418:	2b08      	cmp	r3, #8
 800741a:	f200 80a1 	bhi.w	8007560 <HAL_RCC_GetSysClockFreq+0x16c>
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_RCC_GetSysClockFreq+0x34>
 8007422:	2b04      	cmp	r3, #4
 8007424:	d003      	beq.n	800742e <HAL_RCC_GetSysClockFreq+0x3a>
 8007426:	e09b      	b.n	8007560 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007428:	4b53      	ldr	r3, [pc, #332]	; (8007578 <HAL_RCC_GetSysClockFreq+0x184>)
 800742a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800742c:	e09b      	b.n	8007566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800742e:	4b53      	ldr	r3, [pc, #332]	; (800757c <HAL_RCC_GetSysClockFreq+0x188>)
 8007430:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007432:	e098      	b.n	8007566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007434:	4b4f      	ldr	r3, [pc, #316]	; (8007574 <HAL_RCC_GetSysClockFreq+0x180>)
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800743c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800743e:	4b4d      	ldr	r3, [pc, #308]	; (8007574 <HAL_RCC_GetSysClockFreq+0x180>)
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d028      	beq.n	800749c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800744a:	4b4a      	ldr	r3, [pc, #296]	; (8007574 <HAL_RCC_GetSysClockFreq+0x180>)
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	099b      	lsrs	r3, r3, #6
 8007450:	2200      	movs	r2, #0
 8007452:	623b      	str	r3, [r7, #32]
 8007454:	627a      	str	r2, [r7, #36]	; 0x24
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800745c:	2100      	movs	r1, #0
 800745e:	4b47      	ldr	r3, [pc, #284]	; (800757c <HAL_RCC_GetSysClockFreq+0x188>)
 8007460:	fb03 f201 	mul.w	r2, r3, r1
 8007464:	2300      	movs	r3, #0
 8007466:	fb00 f303 	mul.w	r3, r0, r3
 800746a:	4413      	add	r3, r2
 800746c:	4a43      	ldr	r2, [pc, #268]	; (800757c <HAL_RCC_GetSysClockFreq+0x188>)
 800746e:	fba0 1202 	umull	r1, r2, r0, r2
 8007472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007474:	460a      	mov	r2, r1
 8007476:	62ba      	str	r2, [r7, #40]	; 0x28
 8007478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800747a:	4413      	add	r3, r2
 800747c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800747e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007480:	2200      	movs	r2, #0
 8007482:	61bb      	str	r3, [r7, #24]
 8007484:	61fa      	str	r2, [r7, #28]
 8007486:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800748a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800748e:	f7f9 fb8b 	bl	8000ba8 <__aeabi_uldivmod>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	4613      	mov	r3, r2
 8007498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800749a:	e053      	b.n	8007544 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800749c:	4b35      	ldr	r3, [pc, #212]	; (8007574 <HAL_RCC_GetSysClockFreq+0x180>)
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	099b      	lsrs	r3, r3, #6
 80074a2:	2200      	movs	r2, #0
 80074a4:	613b      	str	r3, [r7, #16]
 80074a6:	617a      	str	r2, [r7, #20]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80074ae:	f04f 0b00 	mov.w	fp, #0
 80074b2:	4652      	mov	r2, sl
 80074b4:	465b      	mov	r3, fp
 80074b6:	f04f 0000 	mov.w	r0, #0
 80074ba:	f04f 0100 	mov.w	r1, #0
 80074be:	0159      	lsls	r1, r3, #5
 80074c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074c4:	0150      	lsls	r0, r2, #5
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	ebb2 080a 	subs.w	r8, r2, sl
 80074ce:	eb63 090b 	sbc.w	r9, r3, fp
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80074de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80074e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80074e6:	ebb2 0408 	subs.w	r4, r2, r8
 80074ea:	eb63 0509 	sbc.w	r5, r3, r9
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	f04f 0300 	mov.w	r3, #0
 80074f6:	00eb      	lsls	r3, r5, #3
 80074f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074fc:	00e2      	lsls	r2, r4, #3
 80074fe:	4614      	mov	r4, r2
 8007500:	461d      	mov	r5, r3
 8007502:	eb14 030a 	adds.w	r3, r4, sl
 8007506:	603b      	str	r3, [r7, #0]
 8007508:	eb45 030b 	adc.w	r3, r5, fp
 800750c:	607b      	str	r3, [r7, #4]
 800750e:	f04f 0200 	mov.w	r2, #0
 8007512:	f04f 0300 	mov.w	r3, #0
 8007516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800751a:	4629      	mov	r1, r5
 800751c:	028b      	lsls	r3, r1, #10
 800751e:	4621      	mov	r1, r4
 8007520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007524:	4621      	mov	r1, r4
 8007526:	028a      	lsls	r2, r1, #10
 8007528:	4610      	mov	r0, r2
 800752a:	4619      	mov	r1, r3
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752e:	2200      	movs	r2, #0
 8007530:	60bb      	str	r3, [r7, #8]
 8007532:	60fa      	str	r2, [r7, #12]
 8007534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007538:	f7f9 fb36 	bl	8000ba8 <__aeabi_uldivmod>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4613      	mov	r3, r2
 8007542:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007544:	4b0b      	ldr	r3, [pc, #44]	; (8007574 <HAL_RCC_GetSysClockFreq+0x180>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	0c1b      	lsrs	r3, r3, #16
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	3301      	adds	r3, #1
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007554:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	fbb2 f3f3 	udiv	r3, r2, r3
 800755c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800755e:	e002      	b.n	8007566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007560:	4b05      	ldr	r3, [pc, #20]	; (8007578 <HAL_RCC_GetSysClockFreq+0x184>)
 8007562:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007568:	4618      	mov	r0, r3
 800756a:	3740      	adds	r7, #64	; 0x40
 800756c:	46bd      	mov	sp, r7
 800756e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007572:	bf00      	nop
 8007574:	40023800 	.word	0x40023800
 8007578:	00f42400 	.word	0x00f42400
 800757c:	017d7840 	.word	0x017d7840

08007580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007584:	4b03      	ldr	r3, [pc, #12]	; (8007594 <HAL_RCC_GetHCLKFreq+0x14>)
 8007586:	681b      	ldr	r3, [r3, #0]
}
 8007588:	4618      	mov	r0, r3
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	20000020 	.word	0x20000020

08007598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800759c:	f7ff fff0 	bl	8007580 <HAL_RCC_GetHCLKFreq>
 80075a0:	4602      	mov	r2, r0
 80075a2:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	0a9b      	lsrs	r3, r3, #10
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	4903      	ldr	r1, [pc, #12]	; (80075bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80075ae:	5ccb      	ldrb	r3, [r1, r3]
 80075b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	40023800 	.word	0x40023800
 80075bc:	080108e0 	.word	0x080108e0

080075c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80075c4:	f7ff ffdc 	bl	8007580 <HAL_RCC_GetHCLKFreq>
 80075c8:	4602      	mov	r2, r0
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	0b5b      	lsrs	r3, r3, #13
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	4903      	ldr	r1, [pc, #12]	; (80075e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075d6:	5ccb      	ldrb	r3, [r1, r3]
 80075d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075dc:	4618      	mov	r0, r3
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	40023800 	.word	0x40023800
 80075e4:	080108e0 	.word	0x080108e0

080075e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e041      	b.n	800767e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d106      	bne.n	8007614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7fd f87c 	bl	800470c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3304      	adds	r3, #4
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	f001 f828 	bl	800867c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b01      	cmp	r3, #1
 800769a:	d001      	beq.n	80076a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e046      	b.n	800772e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a23      	ldr	r2, [pc, #140]	; (800773c <HAL_TIM_Base_Start+0xb4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d022      	beq.n	80076f8 <HAL_TIM_Base_Start+0x70>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ba:	d01d      	beq.n	80076f8 <HAL_TIM_Base_Start+0x70>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a1f      	ldr	r2, [pc, #124]	; (8007740 <HAL_TIM_Base_Start+0xb8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d018      	beq.n	80076f8 <HAL_TIM_Base_Start+0x70>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <HAL_TIM_Base_Start+0xbc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d013      	beq.n	80076f8 <HAL_TIM_Base_Start+0x70>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1c      	ldr	r2, [pc, #112]	; (8007748 <HAL_TIM_Base_Start+0xc0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00e      	beq.n	80076f8 <HAL_TIM_Base_Start+0x70>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1b      	ldr	r2, [pc, #108]	; (800774c <HAL_TIM_Base_Start+0xc4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d009      	beq.n	80076f8 <HAL_TIM_Base_Start+0x70>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a19      	ldr	r2, [pc, #100]	; (8007750 <HAL_TIM_Base_Start+0xc8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d004      	beq.n	80076f8 <HAL_TIM_Base_Start+0x70>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a18      	ldr	r2, [pc, #96]	; (8007754 <HAL_TIM_Base_Start+0xcc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d111      	bne.n	800771c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b06      	cmp	r3, #6
 8007708:	d010      	beq.n	800772c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f042 0201 	orr.w	r2, r2, #1
 8007718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800771a:	e007      	b.n	800772c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0201 	orr.w	r2, r2, #1
 800772a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	40010000 	.word	0x40010000
 8007740:	40000400 	.word	0x40000400
 8007744:	40000800 	.word	0x40000800
 8007748:	40000c00 	.word	0x40000c00
 800774c:	40010400 	.word	0x40010400
 8007750:	40014000 	.word	0x40014000
 8007754:	40001800 	.word	0x40001800

08007758 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e041      	b.n	80077ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d106      	bne.n	8007784 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f839 	bl	80077f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3304      	adds	r3, #4
 8007794:	4619      	mov	r1, r3
 8007796:	4610      	mov	r0, r2
 8007798:	f000 ff70 	bl	800867c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
	...

0800780c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d109      	bne.n	8007830 <HAL_TIM_PWM_Start+0x24>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b01      	cmp	r3, #1
 8007826:	bf14      	ite	ne
 8007828:	2301      	movne	r3, #1
 800782a:	2300      	moveq	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	e022      	b.n	8007876 <HAL_TIM_PWM_Start+0x6a>
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	2b04      	cmp	r3, #4
 8007834:	d109      	bne.n	800784a <HAL_TIM_PWM_Start+0x3e>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b01      	cmp	r3, #1
 8007840:	bf14      	ite	ne
 8007842:	2301      	movne	r3, #1
 8007844:	2300      	moveq	r3, #0
 8007846:	b2db      	uxtb	r3, r3
 8007848:	e015      	b.n	8007876 <HAL_TIM_PWM_Start+0x6a>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b08      	cmp	r3, #8
 800784e:	d109      	bne.n	8007864 <HAL_TIM_PWM_Start+0x58>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b01      	cmp	r3, #1
 800785a:	bf14      	ite	ne
 800785c:	2301      	movne	r3, #1
 800785e:	2300      	moveq	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	e008      	b.n	8007876 <HAL_TIM_PWM_Start+0x6a>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b01      	cmp	r3, #1
 800786e:	bf14      	ite	ne
 8007870:	2301      	movne	r3, #1
 8007872:	2300      	moveq	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e07c      	b.n	8007978 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d104      	bne.n	800788e <HAL_TIM_PWM_Start+0x82>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800788c:	e013      	b.n	80078b6 <HAL_TIM_PWM_Start+0xaa>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b04      	cmp	r3, #4
 8007892:	d104      	bne.n	800789e <HAL_TIM_PWM_Start+0x92>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800789c:	e00b      	b.n	80078b6 <HAL_TIM_PWM_Start+0xaa>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d104      	bne.n	80078ae <HAL_TIM_PWM_Start+0xa2>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078ac:	e003      	b.n	80078b6 <HAL_TIM_PWM_Start+0xaa>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2202      	movs	r2, #2
 80078b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2201      	movs	r2, #1
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	4618      	mov	r0, r3
 80078c0:	f001 faf0 	bl	8008ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a2d      	ldr	r2, [pc, #180]	; (8007980 <HAL_TIM_PWM_Start+0x174>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d004      	beq.n	80078d8 <HAL_TIM_PWM_Start+0xcc>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a2c      	ldr	r2, [pc, #176]	; (8007984 <HAL_TIM_PWM_Start+0x178>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d101      	bne.n	80078dc <HAL_TIM_PWM_Start+0xd0>
 80078d8:	2301      	movs	r3, #1
 80078da:	e000      	b.n	80078de <HAL_TIM_PWM_Start+0xd2>
 80078dc:	2300      	movs	r3, #0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d007      	beq.n	80078f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a22      	ldr	r2, [pc, #136]	; (8007980 <HAL_TIM_PWM_Start+0x174>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d022      	beq.n	8007942 <HAL_TIM_PWM_Start+0x136>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007904:	d01d      	beq.n	8007942 <HAL_TIM_PWM_Start+0x136>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a1f      	ldr	r2, [pc, #124]	; (8007988 <HAL_TIM_PWM_Start+0x17c>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d018      	beq.n	8007942 <HAL_TIM_PWM_Start+0x136>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a1d      	ldr	r2, [pc, #116]	; (800798c <HAL_TIM_PWM_Start+0x180>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d013      	beq.n	8007942 <HAL_TIM_PWM_Start+0x136>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a1c      	ldr	r2, [pc, #112]	; (8007990 <HAL_TIM_PWM_Start+0x184>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00e      	beq.n	8007942 <HAL_TIM_PWM_Start+0x136>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a16      	ldr	r2, [pc, #88]	; (8007984 <HAL_TIM_PWM_Start+0x178>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d009      	beq.n	8007942 <HAL_TIM_PWM_Start+0x136>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a18      	ldr	r2, [pc, #96]	; (8007994 <HAL_TIM_PWM_Start+0x188>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d004      	beq.n	8007942 <HAL_TIM_PWM_Start+0x136>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a16      	ldr	r2, [pc, #88]	; (8007998 <HAL_TIM_PWM_Start+0x18c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d111      	bne.n	8007966 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b06      	cmp	r3, #6
 8007952:	d010      	beq.n	8007976 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f042 0201 	orr.w	r2, r2, #1
 8007962:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007964:	e007      	b.n	8007976 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f042 0201 	orr.w	r2, r2, #1
 8007974:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40010000 	.word	0x40010000
 8007984:	40010400 	.word	0x40010400
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40000c00 	.word	0x40000c00
 8007994:	40014000 	.word	0x40014000
 8007998:	40001800 	.word	0x40001800

0800799c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e041      	b.n	8007a32 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d106      	bne.n	80079c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f839 	bl	8007a3a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3304      	adds	r3, #4
 80079d8:	4619      	mov	r1, r3
 80079da:	4610      	mov	r0, r2
 80079dc:	f000 fe4e 	bl	800867c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007a42:	bf00      	nop
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
	...

08007a50 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <HAL_TIM_IC_Start_IT+0x1e>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	e013      	b.n	8007a96 <HAL_TIM_IC_Start_IT+0x46>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d104      	bne.n	8007a7e <HAL_TIM_IC_Start_IT+0x2e>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	e00b      	b.n	8007a96 <HAL_TIM_IC_Start_IT+0x46>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d104      	bne.n	8007a8e <HAL_TIM_IC_Start_IT+0x3e>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	e003      	b.n	8007a96 <HAL_TIM_IC_Start_IT+0x46>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d104      	bne.n	8007aa8 <HAL_TIM_IC_Start_IT+0x58>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	e013      	b.n	8007ad0 <HAL_TIM_IC_Start_IT+0x80>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d104      	bne.n	8007ab8 <HAL_TIM_IC_Start_IT+0x68>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	e00b      	b.n	8007ad0 <HAL_TIM_IC_Start_IT+0x80>
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b08      	cmp	r3, #8
 8007abc:	d104      	bne.n	8007ac8 <HAL_TIM_IC_Start_IT+0x78>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	e003      	b.n	8007ad0 <HAL_TIM_IC_Start_IT+0x80>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d102      	bne.n	8007ade <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ad8:	7b7b      	ldrb	r3, [r7, #13]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d001      	beq.n	8007ae2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e0cc      	b.n	8007c7c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <HAL_TIM_IC_Start_IT+0xa2>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007af0:	e013      	b.n	8007b1a <HAL_TIM_IC_Start_IT+0xca>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d104      	bne.n	8007b02 <HAL_TIM_IC_Start_IT+0xb2>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b00:	e00b      	b.n	8007b1a <HAL_TIM_IC_Start_IT+0xca>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d104      	bne.n	8007b12 <HAL_TIM_IC_Start_IT+0xc2>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b10:	e003      	b.n	8007b1a <HAL_TIM_IC_Start_IT+0xca>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2202      	movs	r2, #2
 8007b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d104      	bne.n	8007b2a <HAL_TIM_IC_Start_IT+0xda>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b28:	e013      	b.n	8007b52 <HAL_TIM_IC_Start_IT+0x102>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d104      	bne.n	8007b3a <HAL_TIM_IC_Start_IT+0xea>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b38:	e00b      	b.n	8007b52 <HAL_TIM_IC_Start_IT+0x102>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d104      	bne.n	8007b4a <HAL_TIM_IC_Start_IT+0xfa>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b48:	e003      	b.n	8007b52 <HAL_TIM_IC_Start_IT+0x102>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b0c      	cmp	r3, #12
 8007b56:	d841      	bhi.n	8007bdc <HAL_TIM_IC_Start_IT+0x18c>
 8007b58:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <HAL_TIM_IC_Start_IT+0x110>)
 8007b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5e:	bf00      	nop
 8007b60:	08007b95 	.word	0x08007b95
 8007b64:	08007bdd 	.word	0x08007bdd
 8007b68:	08007bdd 	.word	0x08007bdd
 8007b6c:	08007bdd 	.word	0x08007bdd
 8007b70:	08007ba7 	.word	0x08007ba7
 8007b74:	08007bdd 	.word	0x08007bdd
 8007b78:	08007bdd 	.word	0x08007bdd
 8007b7c:	08007bdd 	.word	0x08007bdd
 8007b80:	08007bb9 	.word	0x08007bb9
 8007b84:	08007bdd 	.word	0x08007bdd
 8007b88:	08007bdd 	.word	0x08007bdd
 8007b8c:	08007bdd 	.word	0x08007bdd
 8007b90:	08007bcb 	.word	0x08007bcb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f042 0202 	orr.w	r2, r2, #2
 8007ba2:	60da      	str	r2, [r3, #12]
      break;
 8007ba4:	e01d      	b.n	8007be2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f042 0204 	orr.w	r2, r2, #4
 8007bb4:	60da      	str	r2, [r3, #12]
      break;
 8007bb6:	e014      	b.n	8007be2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0208 	orr.w	r2, r2, #8
 8007bc6:	60da      	str	r2, [r3, #12]
      break;
 8007bc8:	e00b      	b.n	8007be2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68da      	ldr	r2, [r3, #12]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f042 0210 	orr.w	r2, r2, #16
 8007bd8:	60da      	str	r2, [r3, #12]
      break;
 8007bda:	e002      	b.n	8007be2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	73fb      	strb	r3, [r7, #15]
      break;
 8007be0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d148      	bne.n	8007c7a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2201      	movs	r2, #1
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f001 f957 	bl	8008ea4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a22      	ldr	r2, [pc, #136]	; (8007c84 <HAL_TIM_IC_Start_IT+0x234>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d022      	beq.n	8007c46 <HAL_TIM_IC_Start_IT+0x1f6>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c08:	d01d      	beq.n	8007c46 <HAL_TIM_IC_Start_IT+0x1f6>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a1e      	ldr	r2, [pc, #120]	; (8007c88 <HAL_TIM_IC_Start_IT+0x238>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d018      	beq.n	8007c46 <HAL_TIM_IC_Start_IT+0x1f6>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a1c      	ldr	r2, [pc, #112]	; (8007c8c <HAL_TIM_IC_Start_IT+0x23c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d013      	beq.n	8007c46 <HAL_TIM_IC_Start_IT+0x1f6>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a1b      	ldr	r2, [pc, #108]	; (8007c90 <HAL_TIM_IC_Start_IT+0x240>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d00e      	beq.n	8007c46 <HAL_TIM_IC_Start_IT+0x1f6>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a19      	ldr	r2, [pc, #100]	; (8007c94 <HAL_TIM_IC_Start_IT+0x244>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d009      	beq.n	8007c46 <HAL_TIM_IC_Start_IT+0x1f6>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a18      	ldr	r2, [pc, #96]	; (8007c98 <HAL_TIM_IC_Start_IT+0x248>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d004      	beq.n	8007c46 <HAL_TIM_IC_Start_IT+0x1f6>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a16      	ldr	r2, [pc, #88]	; (8007c9c <HAL_TIM_IC_Start_IT+0x24c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d111      	bne.n	8007c6a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f003 0307 	and.w	r3, r3, #7
 8007c50:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2b06      	cmp	r3, #6
 8007c56:	d010      	beq.n	8007c7a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0201 	orr.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c68:	e007      	b.n	8007c7a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f042 0201 	orr.w	r2, r2, #1
 8007c78:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	40010000 	.word	0x40010000
 8007c88:	40000400 	.word	0x40000400
 8007c8c:	40000800 	.word	0x40000800
 8007c90:	40000c00 	.word	0x40000c00
 8007c94:	40010400 	.word	0x40010400
 8007c98:	40014000 	.word	0x40014000
 8007c9c:	40001800 	.word	0x40001800

08007ca0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e097      	b.n	8007de4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d106      	bne.n	8007cce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7fc fdbb 	bl	8004844 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	6812      	ldr	r2, [r2, #0]
 8007ce0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ce4:	f023 0307 	bic.w	r3, r3, #7
 8007ce8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	f000 fcc1 	bl	800867c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d22:	f023 0303 	bic.w	r3, r3, #3
 8007d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	4313      	orrs	r3, r2
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007d40:	f023 030c 	bic.w	r3, r3, #12
 8007d44:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	011a      	lsls	r2, r3, #4
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	031b      	lsls	r3, r3, #12
 8007d70:	4313      	orrs	r3, r2
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007d7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007d86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	011b      	lsls	r3, r3, #4
 8007d92:	4313      	orrs	r3, r2
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dfc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d110      	bne.n	8007e3e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d102      	bne.n	8007e28 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e22:	7b7b      	ldrb	r3, [r7, #13]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d001      	beq.n	8007e2c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e089      	b.n	8007f40 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e3c:	e031      	b.n	8007ea2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d110      	bne.n	8007e66 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d102      	bne.n	8007e50 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e4a:	7b3b      	ldrb	r3, [r7, #12]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d001      	beq.n	8007e54 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e075      	b.n	8007f40 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e64:	e01d      	b.n	8007ea2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d108      	bne.n	8007e7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d105      	bne.n	8007e7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e72:	7b7b      	ldrb	r3, [r7, #13]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d102      	bne.n	8007e7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e78:	7b3b      	ldrb	r3, [r7, #12]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d001      	beq.n	8007e82 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e05e      	b.n	8007f40 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2202      	movs	r2, #2
 8007e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d010      	beq.n	8007ed0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007eae:	e01f      	b.n	8007ef0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 fff3 	bl	8008ea4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0202 	orr.w	r2, r2, #2
 8007ecc:	60da      	str	r2, [r3, #12]
      break;
 8007ece:	e02e      	b.n	8007f2e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	2104      	movs	r1, #4
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 ffe3 	bl	8008ea4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f042 0204 	orr.w	r2, r2, #4
 8007eec:	60da      	str	r2, [r3, #12]
      break;
 8007eee:	e01e      	b.n	8007f2e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 ffd3 	bl	8008ea4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2201      	movs	r2, #1
 8007f04:	2104      	movs	r1, #4
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 ffcc 	bl	8008ea4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f042 0202 	orr.w	r2, r2, #2
 8007f1a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 0204 	orr.w	r2, r2, #4
 8007f2a:	60da      	str	r2, [r3, #12]
      break;
 8007f2c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f042 0201 	orr.w	r2, r2, #1
 8007f3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d122      	bne.n	8007fa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f003 0302 	and.w	r3, r3, #2
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d11b      	bne.n	8007fa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f06f 0202 	mvn.w	r2, #2
 8007f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	f003 0303 	and.w	r3, r3, #3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7fa f810 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8007f90:	e005      	b.n	8007f9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fb54 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fb5b 	bl	8008654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	f003 0304 	and.w	r3, r3, #4
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d122      	bne.n	8007ff8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	d11b      	bne.n	8007ff8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f06f 0204 	mvn.w	r2, #4
 8007fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2202      	movs	r2, #2
 8007fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7f9 ffe6 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8007fe4:	e005      	b.n	8007ff2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fb2a 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fb31 	bl	8008654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	f003 0308 	and.w	r3, r3, #8
 8008002:	2b08      	cmp	r3, #8
 8008004:	d122      	bne.n	800804c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f003 0308 	and.w	r3, r3, #8
 8008010:	2b08      	cmp	r3, #8
 8008012:	d11b      	bne.n	800804c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f06f 0208 	mvn.w	r2, #8
 800801c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2204      	movs	r2, #4
 8008022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7f9 ffbc 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8008038:	e005      	b.n	8008046 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fb00 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fb07 	bl	8008654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	f003 0310 	and.w	r3, r3, #16
 8008056:	2b10      	cmp	r3, #16
 8008058:	d122      	bne.n	80080a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f003 0310 	and.w	r3, r3, #16
 8008064:	2b10      	cmp	r3, #16
 8008066:	d11b      	bne.n	80080a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f06f 0210 	mvn.w	r2, #16
 8008070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2208      	movs	r2, #8
 8008076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7f9 ff92 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 800808c:	e005      	b.n	800809a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fad6 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fadd 	bl	8008654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d10e      	bne.n	80080cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d107      	bne.n	80080cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f06f 0201 	mvn.w	r2, #1
 80080c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fab0 	bl	800862c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d6:	2b80      	cmp	r3, #128	; 0x80
 80080d8:	d10e      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e4:	2b80      	cmp	r3, #128	; 0x80
 80080e6:	d107      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 ffd4 	bl	80090a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008102:	2b40      	cmp	r3, #64	; 0x40
 8008104:	d10e      	bne.n	8008124 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008110:	2b40      	cmp	r3, #64	; 0x40
 8008112:	d107      	bne.n	8008124 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800811c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 faa2 	bl	8008668 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0320 	and.w	r3, r3, #32
 800812e:	2b20      	cmp	r3, #32
 8008130:	d10e      	bne.n	8008150 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f003 0320 	and.w	r3, r3, #32
 800813c:	2b20      	cmp	r3, #32
 800813e:	d107      	bne.n	8008150 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f06f 0220 	mvn.w	r2, #32
 8008148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 ff9e 	bl	800908c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800816e:	2b01      	cmp	r3, #1
 8008170:	d101      	bne.n	8008176 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008172:	2302      	movs	r3, #2
 8008174:	e088      	b.n	8008288 <HAL_TIM_IC_ConfigChannel+0x130>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d11b      	bne.n	80081bc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	6819      	ldr	r1, [r3, #0]
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f000 fcc2 	bl	8008b1c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	699a      	ldr	r2, [r3, #24]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f022 020c 	bic.w	r2, r2, #12
 80081a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6999      	ldr	r1, [r3, #24]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	619a      	str	r2, [r3, #24]
 80081ba:	e060      	b.n	800827e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d11c      	bne.n	80081fc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6818      	ldr	r0, [r3, #0]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	6819      	ldr	r1, [r3, #0]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	f000 fd46 	bl	8008c62 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	699a      	ldr	r2, [r3, #24]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80081e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	6999      	ldr	r1, [r3, #24]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	021a      	lsls	r2, r3, #8
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	619a      	str	r2, [r3, #24]
 80081fa:	e040      	b.n	800827e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b08      	cmp	r3, #8
 8008200:	d11b      	bne.n	800823a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6818      	ldr	r0, [r3, #0]
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	6819      	ldr	r1, [r3, #0]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f000 fd93 	bl	8008d3c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	69da      	ldr	r2, [r3, #28]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f022 020c 	bic.w	r2, r2, #12
 8008224:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69d9      	ldr	r1, [r3, #28]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	61da      	str	r2, [r3, #28]
 8008238:	e021      	b.n	800827e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b0c      	cmp	r3, #12
 800823e:	d11c      	bne.n	800827a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6818      	ldr	r0, [r3, #0]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	6819      	ldr	r1, [r3, #0]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f000 fdb0 	bl	8008db4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	69da      	ldr	r2, [r3, #28]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008262:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	69d9      	ldr	r1, [r3, #28]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	021a      	lsls	r2, r3, #8
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	430a      	orrs	r2, r1
 8008276:	61da      	str	r2, [r3, #28]
 8008278:	e001      	b.n	800827e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008286:	7dfb      	ldrb	r3, [r7, #23]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082aa:	2302      	movs	r3, #2
 80082ac:	e0ae      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b0c      	cmp	r3, #12
 80082ba:	f200 809f 	bhi.w	80083fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082f9 	.word	0x080082f9
 80082c8:	080083fd 	.word	0x080083fd
 80082cc:	080083fd 	.word	0x080083fd
 80082d0:	080083fd 	.word	0x080083fd
 80082d4:	08008339 	.word	0x08008339
 80082d8:	080083fd 	.word	0x080083fd
 80082dc:	080083fd 	.word	0x080083fd
 80082e0:	080083fd 	.word	0x080083fd
 80082e4:	0800837b 	.word	0x0800837b
 80082e8:	080083fd 	.word	0x080083fd
 80082ec:	080083fd 	.word	0x080083fd
 80082f0:	080083fd 	.word	0x080083fd
 80082f4:	080083bb 	.word	0x080083bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 fa5c 	bl	80087bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0208 	orr.w	r2, r2, #8
 8008312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0204 	bic.w	r2, r2, #4
 8008322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6999      	ldr	r1, [r3, #24]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	619a      	str	r2, [r3, #24]
      break;
 8008336:	e064      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 faac 	bl	800889c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6999      	ldr	r1, [r3, #24]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	021a      	lsls	r2, r3, #8
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	619a      	str	r2, [r3, #24]
      break;
 8008378:	e043      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68b9      	ldr	r1, [r7, #8]
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fb01 	bl	8008988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69da      	ldr	r2, [r3, #28]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0208 	orr.w	r2, r2, #8
 8008394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69da      	ldr	r2, [r3, #28]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0204 	bic.w	r2, r2, #4
 80083a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69d9      	ldr	r1, [r3, #28]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	61da      	str	r2, [r3, #28]
      break;
 80083b8:	e023      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fb55 	bl	8008a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69da      	ldr	r2, [r3, #28]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	69d9      	ldr	r1, [r3, #28]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	021a      	lsls	r2, r3, #8
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	61da      	str	r2, [r3, #28]
      break;
 80083fa:	e002      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800840a:	7dfb      	ldrb	r3, [r7, #23]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_TIM_ConfigClockSource+0x1c>
 800842c:	2302      	movs	r3, #2
 800842e:	e0b4      	b.n	800859a <HAL_TIM_ConfigClockSource+0x186>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800844e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008468:	d03e      	beq.n	80084e8 <HAL_TIM_ConfigClockSource+0xd4>
 800846a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800846e:	f200 8087 	bhi.w	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008476:	f000 8086 	beq.w	8008586 <HAL_TIM_ConfigClockSource+0x172>
 800847a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800847e:	d87f      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008480:	2b70      	cmp	r3, #112	; 0x70
 8008482:	d01a      	beq.n	80084ba <HAL_TIM_ConfigClockSource+0xa6>
 8008484:	2b70      	cmp	r3, #112	; 0x70
 8008486:	d87b      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008488:	2b60      	cmp	r3, #96	; 0x60
 800848a:	d050      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x11a>
 800848c:	2b60      	cmp	r3, #96	; 0x60
 800848e:	d877      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008490:	2b50      	cmp	r3, #80	; 0x50
 8008492:	d03c      	beq.n	800850e <HAL_TIM_ConfigClockSource+0xfa>
 8008494:	2b50      	cmp	r3, #80	; 0x50
 8008496:	d873      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	d058      	beq.n	800854e <HAL_TIM_ConfigClockSource+0x13a>
 800849c:	2b40      	cmp	r3, #64	; 0x40
 800849e:	d86f      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 80084a0:	2b30      	cmp	r3, #48	; 0x30
 80084a2:	d064      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084a4:	2b30      	cmp	r3, #48	; 0x30
 80084a6:	d86b      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 80084a8:	2b20      	cmp	r3, #32
 80084aa:	d060      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084ac:	2b20      	cmp	r3, #32
 80084ae:	d867      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d05c      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	d05a      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084b8:	e062      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6818      	ldr	r0, [r3, #0]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	6899      	ldr	r1, [r3, #8]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	f000 fccb 	bl	8008e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	609a      	str	r2, [r3, #8]
      break;
 80084e6:	e04f      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	6899      	ldr	r1, [r3, #8]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f000 fcb4 	bl	8008e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800850a:	609a      	str	r2, [r3, #8]
      break;
 800850c:	e03c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	6859      	ldr	r1, [r3, #4]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	461a      	mov	r2, r3
 800851c:	f000 fb72 	bl	8008c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2150      	movs	r1, #80	; 0x50
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fc81 	bl	8008e2e <TIM_ITRx_SetConfig>
      break;
 800852c:	e02c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	6859      	ldr	r1, [r3, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	461a      	mov	r2, r3
 800853c:	f000 fbce 	bl	8008cdc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2160      	movs	r1, #96	; 0x60
 8008546:	4618      	mov	r0, r3
 8008548:	f000 fc71 	bl	8008e2e <TIM_ITRx_SetConfig>
      break;
 800854c:	e01c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	6859      	ldr	r1, [r3, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	461a      	mov	r2, r3
 800855c:	f000 fb52 	bl	8008c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2140      	movs	r1, #64	; 0x40
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fc61 	bl	8008e2e <TIM_ITRx_SetConfig>
      break;
 800856c:	e00c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4619      	mov	r1, r3
 8008578:	4610      	mov	r0, r2
 800857a:	f000 fc58 	bl	8008e2e <TIM_ITRx_SetConfig>
      break;
 800857e:	e003      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	73fb      	strb	r3, [r7, #15]
      break;
 8008584:	e000      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b0c      	cmp	r3, #12
 80085b6:	d831      	bhi.n	800861c <HAL_TIM_ReadCapturedValue+0x78>
 80085b8:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80085ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085be:	bf00      	nop
 80085c0:	080085f5 	.word	0x080085f5
 80085c4:	0800861d 	.word	0x0800861d
 80085c8:	0800861d 	.word	0x0800861d
 80085cc:	0800861d 	.word	0x0800861d
 80085d0:	080085ff 	.word	0x080085ff
 80085d4:	0800861d 	.word	0x0800861d
 80085d8:	0800861d 	.word	0x0800861d
 80085dc:	0800861d 	.word	0x0800861d
 80085e0:	08008609 	.word	0x08008609
 80085e4:	0800861d 	.word	0x0800861d
 80085e8:	0800861d 	.word	0x0800861d
 80085ec:	0800861d 	.word	0x0800861d
 80085f0:	08008613 	.word	0x08008613
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fa:	60fb      	str	r3, [r7, #12]

      break;
 80085fc:	e00f      	b.n	800861e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008604:	60fb      	str	r3, [r7, #12]

      break;
 8008606:	e00a      	b.n	800861e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860e:	60fb      	str	r3, [r7, #12]

      break;
 8008610:	e005      	b.n	800861e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008618:	60fb      	str	r3, [r7, #12]

      break;
 800861a:	e000      	b.n	800861e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800861c:	bf00      	nop
  }

  return tmpreg;
 800861e:	68fb      	ldr	r3, [r7, #12]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a40      	ldr	r2, [pc, #256]	; (8008790 <TIM_Base_SetConfig+0x114>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d013      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869a:	d00f      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a3d      	ldr	r2, [pc, #244]	; (8008794 <TIM_Base_SetConfig+0x118>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00b      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a3c      	ldr	r2, [pc, #240]	; (8008798 <TIM_Base_SetConfig+0x11c>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d007      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a3b      	ldr	r2, [pc, #236]	; (800879c <TIM_Base_SetConfig+0x120>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d003      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a3a      	ldr	r2, [pc, #232]	; (80087a0 <TIM_Base_SetConfig+0x124>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d108      	bne.n	80086ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a2f      	ldr	r2, [pc, #188]	; (8008790 <TIM_Base_SetConfig+0x114>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d02b      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086dc:	d027      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a2c      	ldr	r2, [pc, #176]	; (8008794 <TIM_Base_SetConfig+0x118>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d023      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a2b      	ldr	r2, [pc, #172]	; (8008798 <TIM_Base_SetConfig+0x11c>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d01f      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a2a      	ldr	r2, [pc, #168]	; (800879c <TIM_Base_SetConfig+0x120>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d01b      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a29      	ldr	r2, [pc, #164]	; (80087a0 <TIM_Base_SetConfig+0x124>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d017      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a28      	ldr	r2, [pc, #160]	; (80087a4 <TIM_Base_SetConfig+0x128>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d013      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a27      	ldr	r2, [pc, #156]	; (80087a8 <TIM_Base_SetConfig+0x12c>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d00f      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a26      	ldr	r2, [pc, #152]	; (80087ac <TIM_Base_SetConfig+0x130>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00b      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a25      	ldr	r2, [pc, #148]	; (80087b0 <TIM_Base_SetConfig+0x134>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d007      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a24      	ldr	r2, [pc, #144]	; (80087b4 <TIM_Base_SetConfig+0x138>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d003      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a23      	ldr	r2, [pc, #140]	; (80087b8 <TIM_Base_SetConfig+0x13c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d108      	bne.n	8008740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4313      	orrs	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	4313      	orrs	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a0a      	ldr	r2, [pc, #40]	; (8008790 <TIM_Base_SetConfig+0x114>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d003      	beq.n	8008774 <TIM_Base_SetConfig+0xf8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a0c      	ldr	r2, [pc, #48]	; (80087a0 <TIM_Base_SetConfig+0x124>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d103      	bne.n	800877c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	615a      	str	r2, [r3, #20]
}
 8008782:	bf00      	nop
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	40010000 	.word	0x40010000
 8008794:	40000400 	.word	0x40000400
 8008798:	40000800 	.word	0x40000800
 800879c:	40000c00 	.word	0x40000c00
 80087a0:	40010400 	.word	0x40010400
 80087a4:	40014000 	.word	0x40014000
 80087a8:	40014400 	.word	0x40014400
 80087ac:	40014800 	.word	0x40014800
 80087b0:	40001800 	.word	0x40001800
 80087b4:	40001c00 	.word	0x40001c00
 80087b8:	40002000 	.word	0x40002000

080087bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	f023 0201 	bic.w	r2, r3, #1
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0303 	bic.w	r3, r3, #3
 80087f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f023 0302 	bic.w	r3, r3, #2
 8008804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	4313      	orrs	r3, r2
 800880e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a20      	ldr	r2, [pc, #128]	; (8008894 <TIM_OC1_SetConfig+0xd8>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d003      	beq.n	8008820 <TIM_OC1_SetConfig+0x64>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a1f      	ldr	r2, [pc, #124]	; (8008898 <TIM_OC1_SetConfig+0xdc>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d10c      	bne.n	800883a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f023 0308 	bic.w	r3, r3, #8
 8008826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	4313      	orrs	r3, r2
 8008830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f023 0304 	bic.w	r3, r3, #4
 8008838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a15      	ldr	r2, [pc, #84]	; (8008894 <TIM_OC1_SetConfig+0xd8>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d003      	beq.n	800884a <TIM_OC1_SetConfig+0x8e>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a14      	ldr	r2, [pc, #80]	; (8008898 <TIM_OC1_SetConfig+0xdc>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d111      	bne.n	800886e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	4313      	orrs	r3, r2
 8008862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	4313      	orrs	r3, r2
 800886c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	621a      	str	r2, [r3, #32]
}
 8008888:	bf00      	nop
 800888a:	371c      	adds	r7, #28
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	40010000 	.word	0x40010000
 8008898:	40010400 	.word	0x40010400

0800889c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	f023 0210 	bic.w	r2, r3, #16
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	4313      	orrs	r3, r2
 80088de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f023 0320 	bic.w	r3, r3, #32
 80088e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	011b      	lsls	r3, r3, #4
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a22      	ldr	r2, [pc, #136]	; (8008980 <TIM_OC2_SetConfig+0xe4>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d003      	beq.n	8008904 <TIM_OC2_SetConfig+0x68>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a21      	ldr	r2, [pc, #132]	; (8008984 <TIM_OC2_SetConfig+0xe8>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d10d      	bne.n	8008920 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800890a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	011b      	lsls	r3, r3, #4
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	4313      	orrs	r3, r2
 8008916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800891e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a17      	ldr	r2, [pc, #92]	; (8008980 <TIM_OC2_SetConfig+0xe4>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d003      	beq.n	8008930 <TIM_OC2_SetConfig+0x94>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a16      	ldr	r2, [pc, #88]	; (8008984 <TIM_OC2_SetConfig+0xe8>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d113      	bne.n	8008958 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800893e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	695b      	ldr	r3, [r3, #20]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	4313      	orrs	r3, r2
 800894a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	4313      	orrs	r3, r2
 8008956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	621a      	str	r2, [r3, #32]
}
 8008972:	bf00      	nop
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	40010000 	.word	0x40010000
 8008984:	40010400 	.word	0x40010400

08008988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008988:	b480      	push	{r7}
 800898a:	b087      	sub	sp, #28
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 0303 	bic.w	r3, r3, #3
 80089be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	021b      	lsls	r3, r3, #8
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	4313      	orrs	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a21      	ldr	r2, [pc, #132]	; (8008a68 <TIM_OC3_SetConfig+0xe0>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d003      	beq.n	80089ee <TIM_OC3_SetConfig+0x66>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a20      	ldr	r2, [pc, #128]	; (8008a6c <TIM_OC3_SetConfig+0xe4>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d10d      	bne.n	8008a0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	021b      	lsls	r3, r3, #8
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a16      	ldr	r2, [pc, #88]	; (8008a68 <TIM_OC3_SetConfig+0xe0>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d003      	beq.n	8008a1a <TIM_OC3_SetConfig+0x92>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a15      	ldr	r2, [pc, #84]	; (8008a6c <TIM_OC3_SetConfig+0xe4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d113      	bne.n	8008a42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	011b      	lsls	r3, r3, #4
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	011b      	lsls	r3, r3, #4
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	621a      	str	r2, [r3, #32]
}
 8008a5c:	bf00      	nop
 8008a5e:	371c      	adds	r7, #28
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr
 8008a68:	40010000 	.word	0x40010000
 8008a6c:	40010400 	.word	0x40010400

08008a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b087      	sub	sp, #28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	021b      	lsls	r3, r3, #8
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	031b      	lsls	r3, r3, #12
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a12      	ldr	r2, [pc, #72]	; (8008b14 <TIM_OC4_SetConfig+0xa4>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d003      	beq.n	8008ad8 <TIM_OC4_SetConfig+0x68>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a11      	ldr	r2, [pc, #68]	; (8008b18 <TIM_OC4_SetConfig+0xa8>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d109      	bne.n	8008aec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	019b      	lsls	r3, r3, #6
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	621a      	str	r2, [r3, #32]
}
 8008b06:	bf00      	nop
 8008b08:	371c      	adds	r7, #28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	40010000 	.word	0x40010000
 8008b18:	40010400 	.word	0x40010400

08008b1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	f023 0201 	bic.w	r2, r3, #1
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a1b      	ldr	r3, [r3, #32]
 8008b40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	4a28      	ldr	r2, [pc, #160]	; (8008be8 <TIM_TI1_SetConfig+0xcc>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d01b      	beq.n	8008b82 <TIM_TI1_SetConfig+0x66>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b50:	d017      	beq.n	8008b82 <TIM_TI1_SetConfig+0x66>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	4a25      	ldr	r2, [pc, #148]	; (8008bec <TIM_TI1_SetConfig+0xd0>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d013      	beq.n	8008b82 <TIM_TI1_SetConfig+0x66>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	4a24      	ldr	r2, [pc, #144]	; (8008bf0 <TIM_TI1_SetConfig+0xd4>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d00f      	beq.n	8008b82 <TIM_TI1_SetConfig+0x66>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	4a23      	ldr	r2, [pc, #140]	; (8008bf4 <TIM_TI1_SetConfig+0xd8>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d00b      	beq.n	8008b82 <TIM_TI1_SetConfig+0x66>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	4a22      	ldr	r2, [pc, #136]	; (8008bf8 <TIM_TI1_SetConfig+0xdc>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d007      	beq.n	8008b82 <TIM_TI1_SetConfig+0x66>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4a21      	ldr	r2, [pc, #132]	; (8008bfc <TIM_TI1_SetConfig+0xe0>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d003      	beq.n	8008b82 <TIM_TI1_SetConfig+0x66>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	4a20      	ldr	r2, [pc, #128]	; (8008c00 <TIM_TI1_SetConfig+0xe4>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d101      	bne.n	8008b86 <TIM_TI1_SetConfig+0x6a>
 8008b82:	2301      	movs	r3, #1
 8008b84:	e000      	b.n	8008b88 <TIM_TI1_SetConfig+0x6c>
 8008b86:	2300      	movs	r3, #0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d008      	beq.n	8008b9e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f023 0303 	bic.w	r3, r3, #3
 8008b92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	e003      	b.n	8008ba6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f043 0301 	orr.w	r3, r3, #1
 8008ba4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	011b      	lsls	r3, r3, #4
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	697a      	ldr	r2, [r7, #20]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	f023 030a 	bic.w	r3, r3, #10
 8008bc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f003 030a 	and.w	r3, r3, #10
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	621a      	str	r2, [r3, #32]
}
 8008bda:	bf00      	nop
 8008bdc:	371c      	adds	r7, #28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	40010000 	.word	0x40010000
 8008bec:	40000400 	.word	0x40000400
 8008bf0:	40000800 	.word	0x40000800
 8008bf4:	40000c00 	.word	0x40000c00
 8008bf8:	40010400 	.word	0x40010400
 8008bfc:	40014000 	.word	0x40014000
 8008c00:	40001800 	.word	0x40001800

08008c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	f023 0201 	bic.w	r2, r3, #1
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	011b      	lsls	r3, r3, #4
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f023 030a 	bic.w	r3, r3, #10
 8008c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	621a      	str	r2, [r3, #32]
}
 8008c56:	bf00      	nop
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b087      	sub	sp, #28
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
 8008c6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	f023 0210 	bic.w	r2, r3, #16
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	021b      	lsls	r3, r3, #8
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	031b      	lsls	r3, r3, #12
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cb4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	011b      	lsls	r3, r3, #4
 8008cba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	621a      	str	r2, [r3, #32]
}
 8008cd0:	bf00      	nop
 8008cd2:	371c      	adds	r7, #28
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	f023 0210 	bic.w	r2, r3, #16
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	031b      	lsls	r3, r3, #12
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	621a      	str	r2, [r3, #32]
}
 8008d30:	bf00      	nop
 8008d32:	371c      	adds	r7, #28
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
 8008d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6a1b      	ldr	r3, [r3, #32]
 8008d60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f023 0303 	bic.w	r3, r3, #3
 8008d68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	011b      	lsls	r3, r3, #4
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008d8c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	021b      	lsls	r3, r3, #8
 8008d92:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	621a      	str	r2, [r3, #32]
}
 8008da8:	bf00      	nop
 8008daa:	371c      	adds	r7, #28
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008de0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	021b      	lsls	r3, r3, #8
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008df2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	031b      	lsls	r3, r3, #12
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008e06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	031b      	lsls	r3, r3, #12
 8008e0c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	621a      	str	r2, [r3, #32]
}
 8008e22:	bf00      	nop
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b085      	sub	sp, #20
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	f043 0307 	orr.w	r3, r3, #7
 8008e50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	609a      	str	r2, [r3, #8]
}
 8008e58:	bf00      	nop
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	021a      	lsls	r2, r3, #8
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	431a      	orrs	r2, r3
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	609a      	str	r2, [r3, #8]
}
 8008e98:	bf00      	nop
 8008e9a:	371c      	adds	r7, #28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f003 031f 	and.w	r3, r3, #31
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6a1a      	ldr	r2, [r3, #32]
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	43db      	mvns	r3, r3
 8008ec6:	401a      	ands	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6a1a      	ldr	r2, [r3, #32]
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f003 031f 	and.w	r3, r3, #31
 8008ed6:	6879      	ldr	r1, [r7, #4]
 8008ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8008edc:	431a      	orrs	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	621a      	str	r2, [r3, #32]
}
 8008ee2:	bf00      	nop
 8008ee4:	371c      	adds	r7, #28
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
	...

08008ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d101      	bne.n	8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f04:	2302      	movs	r3, #2
 8008f06:	e05a      	b.n	8008fbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2202      	movs	r2, #2
 8008f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a21      	ldr	r2, [pc, #132]	; (8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d022      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f54:	d01d      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a1d      	ldr	r2, [pc, #116]	; (8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d018      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a1b      	ldr	r2, [pc, #108]	; (8008fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d013      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a1a      	ldr	r2, [pc, #104]	; (8008fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d00e      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a18      	ldr	r2, [pc, #96]	; (8008fdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d009      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a17      	ldr	r2, [pc, #92]	; (8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d004      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a15      	ldr	r2, [pc, #84]	; (8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d10c      	bne.n	8008fac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	40010000 	.word	0x40010000
 8008fd0:	40000400 	.word	0x40000400
 8008fd4:	40000800 	.word	0x40000800
 8008fd8:	40000c00 	.word	0x40000c00
 8008fdc:	40010400 	.word	0x40010400
 8008fe0:	40014000 	.word	0x40014000
 8008fe4:	40001800 	.word	0x40001800

08008fe8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d101      	bne.n	8009004 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009000:	2302      	movs	r3, #2
 8009002:	e03d      	b.n	8009080 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	4313      	orrs	r3, r2
 8009018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	4313      	orrs	r3, r2
 8009026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4313      	orrs	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	4313      	orrs	r3, r2
 8009050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	695b      	ldr	r3, [r3, #20]
 800905c:	4313      	orrs	r3, r2
 800905e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d101      	bne.n	80090c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e03f      	b.n	8009146 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d106      	bne.n	80090e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f7fb fc96 	bl	8004a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2224      	movs	r2, #36	; 0x24
 80090e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68da      	ldr	r2, [r3, #12]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fddf 	bl	8009cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	691a      	ldr	r2, [r3, #16]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800910c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	695a      	ldr	r2, [r3, #20]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800911c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800912c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2220      	movs	r2, #32
 8009138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2220      	movs	r2, #32
 8009140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b08a      	sub	sp, #40	; 0x28
 8009152:	af02      	add	r7, sp, #8
 8009154:	60f8      	str	r0, [r7, #12]
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	603b      	str	r3, [r7, #0]
 800915a:	4613      	mov	r3, r2
 800915c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b20      	cmp	r3, #32
 800916c:	d17c      	bne.n	8009268 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <HAL_UART_Transmit+0x2c>
 8009174:	88fb      	ldrh	r3, [r7, #6]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e075      	b.n	800926a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009184:	2b01      	cmp	r3, #1
 8009186:	d101      	bne.n	800918c <HAL_UART_Transmit+0x3e>
 8009188:	2302      	movs	r3, #2
 800918a:	e06e      	b.n	800926a <HAL_UART_Transmit+0x11c>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2221      	movs	r2, #33	; 0x21
 800919e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091a2:	f7fb fe81 	bl	8004ea8 <HAL_GetTick>
 80091a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	88fa      	ldrh	r2, [r7, #6]
 80091ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	88fa      	ldrh	r2, [r7, #6]
 80091b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091bc:	d108      	bne.n	80091d0 <HAL_UART_Transmit+0x82>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d104      	bne.n	80091d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	61bb      	str	r3, [r7, #24]
 80091ce:	e003      	b.n	80091d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091d4:	2300      	movs	r3, #0
 80091d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80091e0:	e02a      	b.n	8009238 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2200      	movs	r2, #0
 80091ea:	2180      	movs	r1, #128	; 0x80
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 fb1f 	bl	8009830 <UART_WaitOnFlagUntilTimeout>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e036      	b.n	800926a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10b      	bne.n	800921a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009210:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	3302      	adds	r3, #2
 8009216:	61bb      	str	r3, [r7, #24]
 8009218:	e007      	b.n	800922a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	781a      	ldrb	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	3301      	adds	r3, #1
 8009228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800922e:	b29b      	uxth	r3, r3
 8009230:	3b01      	subs	r3, #1
 8009232:	b29a      	uxth	r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800923c:	b29b      	uxth	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1cf      	bne.n	80091e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	2200      	movs	r2, #0
 800924a:	2140      	movs	r1, #64	; 0x40
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 faef 	bl	8009830 <UART_WaitOnFlagUntilTimeout>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e006      	b.n	800926a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2220      	movs	r2, #32
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	e000      	b.n	800926a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009268:	2302      	movs	r3, #2
  }
}
 800926a:	4618      	mov	r0, r3
 800926c:	3720      	adds	r7, #32
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b084      	sub	sp, #16
 8009276:	af00      	add	r7, sp, #0
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	60b9      	str	r1, [r7, #8]
 800927c:	4613      	mov	r3, r2
 800927e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b20      	cmp	r3, #32
 800928a:	d11d      	bne.n	80092c8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <HAL_UART_Receive_IT+0x26>
 8009292:	88fb      	ldrh	r3, [r7, #6]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e016      	b.n	80092ca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d101      	bne.n	80092aa <HAL_UART_Receive_IT+0x38>
 80092a6:	2302      	movs	r3, #2
 80092a8:	e00f      	b.n	80092ca <HAL_UART_Receive_IT+0x58>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80092b8:	88fb      	ldrh	r3, [r7, #6]
 80092ba:	461a      	mov	r2, r3
 80092bc:	68b9      	ldr	r1, [r7, #8]
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 fb24 	bl	800990c <UART_Start_Receive_IT>
 80092c4:	4603      	mov	r3, r0
 80092c6:	e000      	b.n	80092ca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80092c8:	2302      	movs	r3, #2
  }
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b0ba      	sub	sp, #232	; 0xe8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80092fa:	2300      	movs	r3, #0
 80092fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009300:	2300      	movs	r3, #0
 8009302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800930a:	f003 030f 	and.w	r3, r3, #15
 800930e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10f      	bne.n	800933a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800931a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800931e:	f003 0320 	and.w	r3, r3, #32
 8009322:	2b00      	cmp	r3, #0
 8009324:	d009      	beq.n	800933a <HAL_UART_IRQHandler+0x66>
 8009326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800932a:	f003 0320 	and.w	r3, r3, #32
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fc07 	bl	8009b46 <UART_Receive_IT>
      return;
 8009338:	e256      	b.n	80097e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800933a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 80de 	beq.w	8009500 <HAL_UART_IRQHandler+0x22c>
 8009344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b00      	cmp	r3, #0
 800934e:	d106      	bne.n	800935e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009354:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 80d1 	beq.w	8009500 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800935e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00b      	beq.n	8009382 <HAL_UART_IRQHandler+0xae>
 800936a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800936e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009372:	2b00      	cmp	r3, #0
 8009374:	d005      	beq.n	8009382 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937a:	f043 0201 	orr.w	r2, r3, #1
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009386:	f003 0304 	and.w	r3, r3, #4
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00b      	beq.n	80093a6 <HAL_UART_IRQHandler+0xd2>
 800938e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	2b00      	cmp	r3, #0
 8009398:	d005      	beq.n	80093a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939e:	f043 0202 	orr.w	r2, r3, #2
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00b      	beq.n	80093ca <HAL_UART_IRQHandler+0xf6>
 80093b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d005      	beq.n	80093ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c2:	f043 0204 	orr.w	r2, r3, #4
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80093ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ce:	f003 0308 	and.w	r3, r3, #8
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d011      	beq.n	80093fa <HAL_UART_IRQHandler+0x126>
 80093d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093da:	f003 0320 	and.w	r3, r3, #32
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d105      	bne.n	80093ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80093e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d005      	beq.n	80093fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f2:	f043 0208 	orr.w	r2, r3, #8
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f000 81ed 	beq.w	80097de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009408:	f003 0320 	and.w	r3, r3, #32
 800940c:	2b00      	cmp	r3, #0
 800940e:	d008      	beq.n	8009422 <HAL_UART_IRQHandler+0x14e>
 8009410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009414:	f003 0320 	and.w	r3, r3, #32
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fb92 	bl	8009b46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942c:	2b40      	cmp	r3, #64	; 0x40
 800942e:	bf0c      	ite	eq
 8009430:	2301      	moveq	r3, #1
 8009432:	2300      	movne	r3, #0
 8009434:	b2db      	uxtb	r3, r3
 8009436:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943e:	f003 0308 	and.w	r3, r3, #8
 8009442:	2b00      	cmp	r3, #0
 8009444:	d103      	bne.n	800944e <HAL_UART_IRQHandler+0x17a>
 8009446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800944a:	2b00      	cmp	r3, #0
 800944c:	d04f      	beq.n	80094ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fa9a 	bl	8009988 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	695b      	ldr	r3, [r3, #20]
 800945a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800945e:	2b40      	cmp	r3, #64	; 0x40
 8009460:	d141      	bne.n	80094e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3314      	adds	r3, #20
 8009468:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009478:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800947c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3314      	adds	r3, #20
 800948a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800948e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009492:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009496:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800949a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800949e:	e841 2300 	strex	r3, r2, [r1]
 80094a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80094a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1d9      	bne.n	8009462 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d013      	beq.n	80094de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ba:	4a7d      	ldr	r2, [pc, #500]	; (80096b0 <HAL_UART_IRQHandler+0x3dc>)
 80094bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7fc faa1 	bl	8005a0a <HAL_DMA_Abort_IT>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d016      	beq.n	80094fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80094d8:	4610      	mov	r0, r2
 80094da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094dc:	e00e      	b.n	80094fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f990 	bl	8009804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e4:	e00a      	b.n	80094fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f98c 	bl	8009804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ec:	e006      	b.n	80094fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f988 	bl	8009804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80094fa:	e170      	b.n	80097de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094fc:	bf00      	nop
    return;
 80094fe:	e16e      	b.n	80097de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009504:	2b01      	cmp	r3, #1
 8009506:	f040 814a 	bne.w	800979e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800950a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950e:	f003 0310 	and.w	r3, r3, #16
 8009512:	2b00      	cmp	r3, #0
 8009514:	f000 8143 	beq.w	800979e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800951c:	f003 0310 	and.w	r3, r3, #16
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 813c 	beq.w	800979e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009526:	2300      	movs	r3, #0
 8009528:	60bb      	str	r3, [r7, #8]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60bb      	str	r3, [r7, #8]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	60bb      	str	r3, [r7, #8]
 800953a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009546:	2b40      	cmp	r3, #64	; 0x40
 8009548:	f040 80b4 	bne.w	80096b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009558:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 8140 	beq.w	80097e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800956a:	429a      	cmp	r2, r3
 800956c:	f080 8139 	bcs.w	80097e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009576:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957c:	69db      	ldr	r3, [r3, #28]
 800957e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009582:	f000 8088 	beq.w	8009696 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	330c      	adds	r3, #12
 800958c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009590:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009594:	e853 3f00 	ldrex	r3, [r3]
 8009598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800959c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	330c      	adds	r3, #12
 80095ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80095b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80095b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80095be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80095ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1d9      	bne.n	8009586 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3314      	adds	r3, #20
 80095d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80095e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095e4:	f023 0301 	bic.w	r3, r3, #1
 80095e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3314      	adds	r3, #20
 80095f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80095f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80095fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80095fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e1      	bne.n	80095d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3314      	adds	r3, #20
 8009614:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009618:	e853 3f00 	ldrex	r3, [r3]
 800961c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800961e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3314      	adds	r3, #20
 800962e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009632:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009634:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009636:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009638:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800963a:	e841 2300 	strex	r3, r2, [r1]
 800963e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1e3      	bne.n	800960e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2220      	movs	r2, #32
 800964a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	330c      	adds	r3, #12
 800965a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009666:	f023 0310 	bic.w	r3, r3, #16
 800966a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	330c      	adds	r3, #12
 8009674:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009678:	65ba      	str	r2, [r7, #88]	; 0x58
 800967a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800967e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009680:	e841 2300 	strex	r3, r2, [r1]
 8009684:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e3      	bne.n	8009654 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009690:	4618      	mov	r0, r3
 8009692:	f7fc f94a 	bl	800592a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800969e:	b29b      	uxth	r3, r3
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	4619      	mov	r1, r3
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f8b6 	bl	8009818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80096ac:	e099      	b.n	80097e2 <HAL_UART_IRQHandler+0x50e>
 80096ae:	bf00      	nop
 80096b0:	08009a4f 	.word	0x08009a4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096bc:	b29b      	uxth	r3, r3
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f000 808b 	beq.w	80097e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80096d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 8086 	beq.w	80097e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	330c      	adds	r3, #12
 80096e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e4:	e853 3f00 	ldrex	r3, [r3]
 80096e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	330c      	adds	r3, #12
 80096fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80096fe:	647a      	str	r2, [r7, #68]	; 0x44
 8009700:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009702:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009706:	e841 2300 	strex	r3, r2, [r1]
 800970a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800970c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1e3      	bne.n	80096da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3314      	adds	r3, #20
 8009718:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	e853 3f00 	ldrex	r3, [r3]
 8009720:	623b      	str	r3, [r7, #32]
   return(result);
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	f023 0301 	bic.w	r3, r3, #1
 8009728:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3314      	adds	r3, #20
 8009732:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009736:	633a      	str	r2, [r7, #48]	; 0x30
 8009738:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800973c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800973e:	e841 2300 	strex	r3, r2, [r1]
 8009742:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1e3      	bne.n	8009712 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2220      	movs	r2, #32
 800974e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	330c      	adds	r3, #12
 800975e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	e853 3f00 	ldrex	r3, [r3]
 8009766:	60fb      	str	r3, [r7, #12]
   return(result);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f023 0310 	bic.w	r3, r3, #16
 800976e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	330c      	adds	r3, #12
 8009778:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800977c:	61fa      	str	r2, [r7, #28]
 800977e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	69b9      	ldr	r1, [r7, #24]
 8009782:	69fa      	ldr	r2, [r7, #28]
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	617b      	str	r3, [r7, #20]
   return(result);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e3      	bne.n	8009758 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f83e 	bl	8009818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800979c:	e023      	b.n	80097e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800979e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d009      	beq.n	80097be <HAL_UART_IRQHandler+0x4ea>
 80097aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d003      	beq.n	80097be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f95d 	bl	8009a76 <UART_Transmit_IT>
    return;
 80097bc:	e014      	b.n	80097e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80097be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00e      	beq.n	80097e8 <HAL_UART_IRQHandler+0x514>
 80097ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d008      	beq.n	80097e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f99d 	bl	8009b16 <UART_EndTransmit_IT>
    return;
 80097dc:	e004      	b.n	80097e8 <HAL_UART_IRQHandler+0x514>
    return;
 80097de:	bf00      	nop
 80097e0:	e002      	b.n	80097e8 <HAL_UART_IRQHandler+0x514>
      return;
 80097e2:	bf00      	nop
 80097e4:	e000      	b.n	80097e8 <HAL_UART_IRQHandler+0x514>
      return;
 80097e6:	bf00      	nop
  }
}
 80097e8:	37e8      	adds	r7, #232	; 0xe8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop

080097f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b090      	sub	sp, #64	; 0x40
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	603b      	str	r3, [r7, #0]
 800983c:	4613      	mov	r3, r2
 800983e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009840:	e050      	b.n	80098e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009848:	d04c      	beq.n	80098e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800984a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800984c:	2b00      	cmp	r3, #0
 800984e:	d007      	beq.n	8009860 <UART_WaitOnFlagUntilTimeout+0x30>
 8009850:	f7fb fb2a 	bl	8004ea8 <HAL_GetTick>
 8009854:	4602      	mov	r2, r0
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800985c:	429a      	cmp	r2, r3
 800985e:	d241      	bcs.n	80098e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	330c      	adds	r3, #12
 8009866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	e853 3f00 	ldrex	r3, [r3]
 800986e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	330c      	adds	r3, #12
 800987e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009880:	637a      	str	r2, [r7, #52]	; 0x34
 8009882:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009884:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009888:	e841 2300 	strex	r3, r2, [r1]
 800988c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800988e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e5      	bne.n	8009860 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3314      	adds	r3, #20
 800989a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	e853 3f00 	ldrex	r3, [r3]
 80098a2:	613b      	str	r3, [r7, #16]
   return(result);
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f023 0301 	bic.w	r3, r3, #1
 80098aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3314      	adds	r3, #20
 80098b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098b4:	623a      	str	r2, [r7, #32]
 80098b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b8:	69f9      	ldr	r1, [r7, #28]
 80098ba:	6a3a      	ldr	r2, [r7, #32]
 80098bc:	e841 2300 	strex	r3, r2, [r1]
 80098c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e5      	bne.n	8009894 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2220      	movs	r2, #32
 80098cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e00f      	b.n	8009904 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	4013      	ands	r3, r2
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	bf0c      	ite	eq
 80098f4:	2301      	moveq	r3, #1
 80098f6:	2300      	movne	r3, #0
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	461a      	mov	r2, r3
 80098fc:	79fb      	ldrb	r3, [r7, #7]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d09f      	beq.n	8009842 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3740      	adds	r7, #64	; 0x40
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	4613      	mov	r3, r2
 8009918:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	88fa      	ldrh	r2, [r7, #6]
 8009924:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	88fa      	ldrh	r2, [r7, #6]
 800992a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2222      	movs	r2, #34	; 0x22
 8009936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d007      	beq.n	800995a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68da      	ldr	r2, [r3, #12]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009958:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	695a      	ldr	r2, [r3, #20]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f042 0201 	orr.w	r2, r2, #1
 8009968:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68da      	ldr	r2, [r3, #12]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f042 0220 	orr.w	r2, r2, #32
 8009978:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009988:	b480      	push	{r7}
 800998a:	b095      	sub	sp, #84	; 0x54
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	330c      	adds	r3, #12
 8009996:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999a:	e853 3f00 	ldrex	r3, [r3]
 800999e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	330c      	adds	r3, #12
 80099ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099b0:	643a      	str	r2, [r7, #64]	; 0x40
 80099b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099b8:	e841 2300 	strex	r3, r2, [r1]
 80099bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1e5      	bne.n	8009990 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3314      	adds	r3, #20
 80099ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	e853 3f00 	ldrex	r3, [r3]
 80099d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	f023 0301 	bic.w	r3, r3, #1
 80099da:	64bb      	str	r3, [r7, #72]	; 0x48
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3314      	adds	r3, #20
 80099e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ec:	e841 2300 	strex	r3, r2, [r1]
 80099f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e5      	bne.n	80099c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d119      	bne.n	8009a34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	330c      	adds	r3, #12
 8009a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	e853 3f00 	ldrex	r3, [r3]
 8009a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	f023 0310 	bic.w	r3, r3, #16
 8009a16:	647b      	str	r3, [r7, #68]	; 0x44
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	330c      	adds	r3, #12
 8009a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a20:	61ba      	str	r2, [r7, #24]
 8009a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a24:	6979      	ldr	r1, [r7, #20]
 8009a26:	69ba      	ldr	r2, [r7, #24]
 8009a28:	e841 2300 	strex	r3, r2, [r1]
 8009a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e5      	bne.n	8009a00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2220      	movs	r2, #32
 8009a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a42:	bf00      	nop
 8009a44:	3754      	adds	r7, #84	; 0x54
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f7ff fecb 	bl	8009804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a6e:	bf00      	nop
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a76:	b480      	push	{r7}
 8009a78:	b085      	sub	sp, #20
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b21      	cmp	r3, #33	; 0x21
 8009a88:	d13e      	bne.n	8009b08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a92:	d114      	bne.n	8009abe <UART_Transmit_IT+0x48>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d110      	bne.n	8009abe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a1b      	ldr	r3, [r3, #32]
 8009aa0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ab0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	1c9a      	adds	r2, r3, #2
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	621a      	str	r2, [r3, #32]
 8009abc:	e008      	b.n	8009ad0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	1c59      	adds	r1, r3, #1
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	6211      	str	r1, [r2, #32]
 8009ac8:	781a      	ldrb	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	4619      	mov	r1, r3
 8009ade:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10f      	bne.n	8009b04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68da      	ldr	r2, [r3, #12]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009af2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68da      	ldr	r2, [r3, #12]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	e000      	b.n	8009b0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009b08:	2302      	movs	r3, #2
  }
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b082      	sub	sp, #8
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68da      	ldr	r2, [r3, #12]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2220      	movs	r2, #32
 8009b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff fe5a 	bl	80097f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b08c      	sub	sp, #48	; 0x30
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b22      	cmp	r3, #34	; 0x22
 8009b58:	f040 80ab 	bne.w	8009cb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b64:	d117      	bne.n	8009b96 <UART_Receive_IT+0x50>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d113      	bne.n	8009b96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8e:	1c9a      	adds	r2, r3, #2
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	629a      	str	r2, [r3, #40]	; 0x28
 8009b94:	e026      	b.n	8009be4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba8:	d007      	beq.n	8009bba <UART_Receive_IT+0x74>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10a      	bne.n	8009bc8 <UART_Receive_IT+0x82>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d106      	bne.n	8009bc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc4:	701a      	strb	r2, [r3, #0]
 8009bc6:	e008      	b.n	8009bda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	3b01      	subs	r3, #1
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d15a      	bne.n	8009cae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68da      	ldr	r2, [r3, #12]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f022 0220 	bic.w	r2, r2, #32
 8009c06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68da      	ldr	r2, [r3, #12]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	695a      	ldr	r2, [r3, #20]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f022 0201 	bic.w	r2, r2, #1
 8009c26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d135      	bne.n	8009ca4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	330c      	adds	r3, #12
 8009c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	e853 3f00 	ldrex	r3, [r3]
 8009c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f023 0310 	bic.w	r3, r3, #16
 8009c54:	627b      	str	r3, [r7, #36]	; 0x24
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	330c      	adds	r3, #12
 8009c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c5e:	623a      	str	r2, [r7, #32]
 8009c60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c62:	69f9      	ldr	r1, [r7, #28]
 8009c64:	6a3a      	ldr	r2, [r7, #32]
 8009c66:	e841 2300 	strex	r3, r2, [r1]
 8009c6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1e5      	bne.n	8009c3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0310 	and.w	r3, r3, #16
 8009c7c:	2b10      	cmp	r3, #16
 8009c7e:	d10a      	bne.n	8009c96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c80:	2300      	movs	r3, #0
 8009c82:	60fb      	str	r3, [r7, #12]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	60fb      	str	r3, [r7, #12]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff fdbb 	bl	8009818 <HAL_UARTEx_RxEventCallback>
 8009ca2:	e002      	b.n	8009caa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7f8 faad 	bl	8002204 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009caa:	2300      	movs	r3, #0
 8009cac:	e002      	b.n	8009cb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	e000      	b.n	8009cb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009cb2:	2302      	movs	r3, #2
  }
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3730      	adds	r7, #48	; 0x30
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cc0:	b0c0      	sub	sp, #256	; 0x100
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cd8:	68d9      	ldr	r1, [r3, #12]
 8009cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	ea40 0301 	orr.w	r3, r0, r1
 8009ce4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cea:	689a      	ldr	r2, [r3, #8]
 8009cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	431a      	orrs	r2, r3
 8009cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d00:	69db      	ldr	r3, [r3, #28]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009d14:	f021 010c 	bic.w	r1, r1, #12
 8009d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009d22:	430b      	orrs	r3, r1
 8009d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d36:	6999      	ldr	r1, [r3, #24]
 8009d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	ea40 0301 	orr.w	r3, r0, r1
 8009d42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	4b8f      	ldr	r3, [pc, #572]	; (8009f88 <UART_SetConfig+0x2cc>)
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d005      	beq.n	8009d5c <UART_SetConfig+0xa0>
 8009d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	4b8d      	ldr	r3, [pc, #564]	; (8009f8c <UART_SetConfig+0x2d0>)
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d104      	bne.n	8009d66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d5c:	f7fd fc30 	bl	80075c0 <HAL_RCC_GetPCLK2Freq>
 8009d60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009d64:	e003      	b.n	8009d6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d66:	f7fd fc17 	bl	8007598 <HAL_RCC_GetPCLK1Freq>
 8009d6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d78:	f040 810c 	bne.w	8009f94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d80:	2200      	movs	r2, #0
 8009d82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009d8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009d8e:	4622      	mov	r2, r4
 8009d90:	462b      	mov	r3, r5
 8009d92:	1891      	adds	r1, r2, r2
 8009d94:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d96:	415b      	adcs	r3, r3
 8009d98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009d9e:	4621      	mov	r1, r4
 8009da0:	eb12 0801 	adds.w	r8, r2, r1
 8009da4:	4629      	mov	r1, r5
 8009da6:	eb43 0901 	adc.w	r9, r3, r1
 8009daa:	f04f 0200 	mov.w	r2, #0
 8009dae:	f04f 0300 	mov.w	r3, #0
 8009db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009dbe:	4690      	mov	r8, r2
 8009dc0:	4699      	mov	r9, r3
 8009dc2:	4623      	mov	r3, r4
 8009dc4:	eb18 0303 	adds.w	r3, r8, r3
 8009dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009dcc:	462b      	mov	r3, r5
 8009dce:	eb49 0303 	adc.w	r3, r9, r3
 8009dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009de2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009de6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009dea:	460b      	mov	r3, r1
 8009dec:	18db      	adds	r3, r3, r3
 8009dee:	653b      	str	r3, [r7, #80]	; 0x50
 8009df0:	4613      	mov	r3, r2
 8009df2:	eb42 0303 	adc.w	r3, r2, r3
 8009df6:	657b      	str	r3, [r7, #84]	; 0x54
 8009df8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009dfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009e00:	f7f6 fed2 	bl	8000ba8 <__aeabi_uldivmod>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4b61      	ldr	r3, [pc, #388]	; (8009f90 <UART_SetConfig+0x2d4>)
 8009e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e0e:	095b      	lsrs	r3, r3, #5
 8009e10:	011c      	lsls	r4, r3, #4
 8009e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e16:	2200      	movs	r2, #0
 8009e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009e20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009e24:	4642      	mov	r2, r8
 8009e26:	464b      	mov	r3, r9
 8009e28:	1891      	adds	r1, r2, r2
 8009e2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8009e2c:	415b      	adcs	r3, r3
 8009e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009e34:	4641      	mov	r1, r8
 8009e36:	eb12 0a01 	adds.w	sl, r2, r1
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	eb43 0b01 	adc.w	fp, r3, r1
 8009e40:	f04f 0200 	mov.w	r2, #0
 8009e44:	f04f 0300 	mov.w	r3, #0
 8009e48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e54:	4692      	mov	sl, r2
 8009e56:	469b      	mov	fp, r3
 8009e58:	4643      	mov	r3, r8
 8009e5a:	eb1a 0303 	adds.w	r3, sl, r3
 8009e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e62:	464b      	mov	r3, r9
 8009e64:	eb4b 0303 	adc.w	r3, fp, r3
 8009e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009e7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009e80:	460b      	mov	r3, r1
 8009e82:	18db      	adds	r3, r3, r3
 8009e84:	643b      	str	r3, [r7, #64]	; 0x40
 8009e86:	4613      	mov	r3, r2
 8009e88:	eb42 0303 	adc.w	r3, r2, r3
 8009e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8009e8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009e92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009e96:	f7f6 fe87 	bl	8000ba8 <__aeabi_uldivmod>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	4b3b      	ldr	r3, [pc, #236]	; (8009f90 <UART_SetConfig+0x2d4>)
 8009ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8009ea6:	095b      	lsrs	r3, r3, #5
 8009ea8:	2264      	movs	r2, #100	; 0x64
 8009eaa:	fb02 f303 	mul.w	r3, r2, r3
 8009eae:	1acb      	subs	r3, r1, r3
 8009eb0:	00db      	lsls	r3, r3, #3
 8009eb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009eb6:	4b36      	ldr	r3, [pc, #216]	; (8009f90 <UART_SetConfig+0x2d4>)
 8009eb8:	fba3 2302 	umull	r2, r3, r3, r2
 8009ebc:	095b      	lsrs	r3, r3, #5
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ec4:	441c      	add	r4, r3
 8009ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ed0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009ed4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009ed8:	4642      	mov	r2, r8
 8009eda:	464b      	mov	r3, r9
 8009edc:	1891      	adds	r1, r2, r2
 8009ede:	63b9      	str	r1, [r7, #56]	; 0x38
 8009ee0:	415b      	adcs	r3, r3
 8009ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ee8:	4641      	mov	r1, r8
 8009eea:	1851      	adds	r1, r2, r1
 8009eec:	6339      	str	r1, [r7, #48]	; 0x30
 8009eee:	4649      	mov	r1, r9
 8009ef0:	414b      	adcs	r3, r1
 8009ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ef4:	f04f 0200 	mov.w	r2, #0
 8009ef8:	f04f 0300 	mov.w	r3, #0
 8009efc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009f00:	4659      	mov	r1, fp
 8009f02:	00cb      	lsls	r3, r1, #3
 8009f04:	4651      	mov	r1, sl
 8009f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f0a:	4651      	mov	r1, sl
 8009f0c:	00ca      	lsls	r2, r1, #3
 8009f0e:	4610      	mov	r0, r2
 8009f10:	4619      	mov	r1, r3
 8009f12:	4603      	mov	r3, r0
 8009f14:	4642      	mov	r2, r8
 8009f16:	189b      	adds	r3, r3, r2
 8009f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f1c:	464b      	mov	r3, r9
 8009f1e:	460a      	mov	r2, r1
 8009f20:	eb42 0303 	adc.w	r3, r2, r3
 8009f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009f34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	18db      	adds	r3, r3, r3
 8009f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f42:	4613      	mov	r3, r2
 8009f44:	eb42 0303 	adc.w	r3, r2, r3
 8009f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009f52:	f7f6 fe29 	bl	8000ba8 <__aeabi_uldivmod>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4b0d      	ldr	r3, [pc, #52]	; (8009f90 <UART_SetConfig+0x2d4>)
 8009f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f60:	095b      	lsrs	r3, r3, #5
 8009f62:	2164      	movs	r1, #100	; 0x64
 8009f64:	fb01 f303 	mul.w	r3, r1, r3
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	00db      	lsls	r3, r3, #3
 8009f6c:	3332      	adds	r3, #50	; 0x32
 8009f6e:	4a08      	ldr	r2, [pc, #32]	; (8009f90 <UART_SetConfig+0x2d4>)
 8009f70:	fba2 2303 	umull	r2, r3, r2, r3
 8009f74:	095b      	lsrs	r3, r3, #5
 8009f76:	f003 0207 	and.w	r2, r3, #7
 8009f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4422      	add	r2, r4
 8009f82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f84:	e106      	b.n	800a194 <UART_SetConfig+0x4d8>
 8009f86:	bf00      	nop
 8009f88:	40011000 	.word	0x40011000
 8009f8c:	40011400 	.word	0x40011400
 8009f90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009fa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009fa6:	4642      	mov	r2, r8
 8009fa8:	464b      	mov	r3, r9
 8009faa:	1891      	adds	r1, r2, r2
 8009fac:	6239      	str	r1, [r7, #32]
 8009fae:	415b      	adcs	r3, r3
 8009fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8009fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009fb6:	4641      	mov	r1, r8
 8009fb8:	1854      	adds	r4, r2, r1
 8009fba:	4649      	mov	r1, r9
 8009fbc:	eb43 0501 	adc.w	r5, r3, r1
 8009fc0:	f04f 0200 	mov.w	r2, #0
 8009fc4:	f04f 0300 	mov.w	r3, #0
 8009fc8:	00eb      	lsls	r3, r5, #3
 8009fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009fce:	00e2      	lsls	r2, r4, #3
 8009fd0:	4614      	mov	r4, r2
 8009fd2:	461d      	mov	r5, r3
 8009fd4:	4643      	mov	r3, r8
 8009fd6:	18e3      	adds	r3, r4, r3
 8009fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009fdc:	464b      	mov	r3, r9
 8009fde:	eb45 0303 	adc.w	r3, r5, r3
 8009fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009ff6:	f04f 0200 	mov.w	r2, #0
 8009ffa:	f04f 0300 	mov.w	r3, #0
 8009ffe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a002:	4629      	mov	r1, r5
 800a004:	008b      	lsls	r3, r1, #2
 800a006:	4621      	mov	r1, r4
 800a008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a00c:	4621      	mov	r1, r4
 800a00e:	008a      	lsls	r2, r1, #2
 800a010:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a014:	f7f6 fdc8 	bl	8000ba8 <__aeabi_uldivmod>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4b60      	ldr	r3, [pc, #384]	; (800a1a0 <UART_SetConfig+0x4e4>)
 800a01e:	fba3 2302 	umull	r2, r3, r3, r2
 800a022:	095b      	lsrs	r3, r3, #5
 800a024:	011c      	lsls	r4, r3, #4
 800a026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a02a:	2200      	movs	r2, #0
 800a02c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a030:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a034:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a038:	4642      	mov	r2, r8
 800a03a:	464b      	mov	r3, r9
 800a03c:	1891      	adds	r1, r2, r2
 800a03e:	61b9      	str	r1, [r7, #24]
 800a040:	415b      	adcs	r3, r3
 800a042:	61fb      	str	r3, [r7, #28]
 800a044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a048:	4641      	mov	r1, r8
 800a04a:	1851      	adds	r1, r2, r1
 800a04c:	6139      	str	r1, [r7, #16]
 800a04e:	4649      	mov	r1, r9
 800a050:	414b      	adcs	r3, r1
 800a052:	617b      	str	r3, [r7, #20]
 800a054:	f04f 0200 	mov.w	r2, #0
 800a058:	f04f 0300 	mov.w	r3, #0
 800a05c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a060:	4659      	mov	r1, fp
 800a062:	00cb      	lsls	r3, r1, #3
 800a064:	4651      	mov	r1, sl
 800a066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a06a:	4651      	mov	r1, sl
 800a06c:	00ca      	lsls	r2, r1, #3
 800a06e:	4610      	mov	r0, r2
 800a070:	4619      	mov	r1, r3
 800a072:	4603      	mov	r3, r0
 800a074:	4642      	mov	r2, r8
 800a076:	189b      	adds	r3, r3, r2
 800a078:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a07c:	464b      	mov	r3, r9
 800a07e:	460a      	mov	r2, r1
 800a080:	eb42 0303 	adc.w	r3, r2, r3
 800a084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	67bb      	str	r3, [r7, #120]	; 0x78
 800a092:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a094:	f04f 0200 	mov.w	r2, #0
 800a098:	f04f 0300 	mov.w	r3, #0
 800a09c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a0a0:	4649      	mov	r1, r9
 800a0a2:	008b      	lsls	r3, r1, #2
 800a0a4:	4641      	mov	r1, r8
 800a0a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0aa:	4641      	mov	r1, r8
 800a0ac:	008a      	lsls	r2, r1, #2
 800a0ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a0b2:	f7f6 fd79 	bl	8000ba8 <__aeabi_uldivmod>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	4b38      	ldr	r3, [pc, #224]	; (800a1a0 <UART_SetConfig+0x4e4>)
 800a0be:	fba3 2301 	umull	r2, r3, r3, r1
 800a0c2:	095b      	lsrs	r3, r3, #5
 800a0c4:	2264      	movs	r2, #100	; 0x64
 800a0c6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ca:	1acb      	subs	r3, r1, r3
 800a0cc:	011b      	lsls	r3, r3, #4
 800a0ce:	3332      	adds	r3, #50	; 0x32
 800a0d0:	4a33      	ldr	r2, [pc, #204]	; (800a1a0 <UART_SetConfig+0x4e4>)
 800a0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d6:	095b      	lsrs	r3, r3, #5
 800a0d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0dc:	441c      	add	r4, r3
 800a0de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	673b      	str	r3, [r7, #112]	; 0x70
 800a0e6:	677a      	str	r2, [r7, #116]	; 0x74
 800a0e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a0ec:	4642      	mov	r2, r8
 800a0ee:	464b      	mov	r3, r9
 800a0f0:	1891      	adds	r1, r2, r2
 800a0f2:	60b9      	str	r1, [r7, #8]
 800a0f4:	415b      	adcs	r3, r3
 800a0f6:	60fb      	str	r3, [r7, #12]
 800a0f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0fc:	4641      	mov	r1, r8
 800a0fe:	1851      	adds	r1, r2, r1
 800a100:	6039      	str	r1, [r7, #0]
 800a102:	4649      	mov	r1, r9
 800a104:	414b      	adcs	r3, r1
 800a106:	607b      	str	r3, [r7, #4]
 800a108:	f04f 0200 	mov.w	r2, #0
 800a10c:	f04f 0300 	mov.w	r3, #0
 800a110:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a114:	4659      	mov	r1, fp
 800a116:	00cb      	lsls	r3, r1, #3
 800a118:	4651      	mov	r1, sl
 800a11a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a11e:	4651      	mov	r1, sl
 800a120:	00ca      	lsls	r2, r1, #3
 800a122:	4610      	mov	r0, r2
 800a124:	4619      	mov	r1, r3
 800a126:	4603      	mov	r3, r0
 800a128:	4642      	mov	r2, r8
 800a12a:	189b      	adds	r3, r3, r2
 800a12c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a12e:	464b      	mov	r3, r9
 800a130:	460a      	mov	r2, r1
 800a132:	eb42 0303 	adc.w	r3, r2, r3
 800a136:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	663b      	str	r3, [r7, #96]	; 0x60
 800a142:	667a      	str	r2, [r7, #100]	; 0x64
 800a144:	f04f 0200 	mov.w	r2, #0
 800a148:	f04f 0300 	mov.w	r3, #0
 800a14c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a150:	4649      	mov	r1, r9
 800a152:	008b      	lsls	r3, r1, #2
 800a154:	4641      	mov	r1, r8
 800a156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a15a:	4641      	mov	r1, r8
 800a15c:	008a      	lsls	r2, r1, #2
 800a15e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a162:	f7f6 fd21 	bl	8000ba8 <__aeabi_uldivmod>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4b0d      	ldr	r3, [pc, #52]	; (800a1a0 <UART_SetConfig+0x4e4>)
 800a16c:	fba3 1302 	umull	r1, r3, r3, r2
 800a170:	095b      	lsrs	r3, r3, #5
 800a172:	2164      	movs	r1, #100	; 0x64
 800a174:	fb01 f303 	mul.w	r3, r1, r3
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	011b      	lsls	r3, r3, #4
 800a17c:	3332      	adds	r3, #50	; 0x32
 800a17e:	4a08      	ldr	r2, [pc, #32]	; (800a1a0 <UART_SetConfig+0x4e4>)
 800a180:	fba2 2303 	umull	r2, r3, r2, r3
 800a184:	095b      	lsrs	r3, r3, #5
 800a186:	f003 020f 	and.w	r2, r3, #15
 800a18a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4422      	add	r2, r4
 800a192:	609a      	str	r2, [r3, #8]
}
 800a194:	bf00      	nop
 800a196:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a19a:	46bd      	mov	sp, r7
 800a19c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1a0:	51eb851f 	.word	0x51eb851f

0800a1a4 <__NVIC_SetPriority>:
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	6039      	str	r1, [r7, #0]
 800a1ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	db0a      	blt.n	800a1ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	490c      	ldr	r1, [pc, #48]	; (800a1f0 <__NVIC_SetPriority+0x4c>)
 800a1be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1c2:	0112      	lsls	r2, r2, #4
 800a1c4:	b2d2      	uxtb	r2, r2
 800a1c6:	440b      	add	r3, r1
 800a1c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a1cc:	e00a      	b.n	800a1e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	4908      	ldr	r1, [pc, #32]	; (800a1f4 <__NVIC_SetPriority+0x50>)
 800a1d4:	79fb      	ldrb	r3, [r7, #7]
 800a1d6:	f003 030f 	and.w	r3, r3, #15
 800a1da:	3b04      	subs	r3, #4
 800a1dc:	0112      	lsls	r2, r2, #4
 800a1de:	b2d2      	uxtb	r2, r2
 800a1e0:	440b      	add	r3, r1
 800a1e2:	761a      	strb	r2, [r3, #24]
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr
 800a1f0:	e000e100 	.word	0xe000e100
 800a1f4:	e000ed00 	.word	0xe000ed00

0800a1f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	f06f 0004 	mvn.w	r0, #4
 800a202:	f7ff ffcf 	bl	800a1a4 <__NVIC_SetPriority>
#endif
}
 800a206:	bf00      	nop
 800a208:	bd80      	pop	{r7, pc}
	...

0800a20c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a212:	f3ef 8305 	mrs	r3, IPSR
 800a216:	603b      	str	r3, [r7, #0]
  return(result);
 800a218:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d003      	beq.n	800a226 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a21e:	f06f 0305 	mvn.w	r3, #5
 800a222:	607b      	str	r3, [r7, #4]
 800a224:	e00c      	b.n	800a240 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a226:	4b0a      	ldr	r3, [pc, #40]	; (800a250 <osKernelInitialize+0x44>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d105      	bne.n	800a23a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a22e:	4b08      	ldr	r3, [pc, #32]	; (800a250 <osKernelInitialize+0x44>)
 800a230:	2201      	movs	r2, #1
 800a232:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a234:	2300      	movs	r3, #0
 800a236:	607b      	str	r3, [r7, #4]
 800a238:	e002      	b.n	800a240 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a23a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a23e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a240:	687b      	ldr	r3, [r7, #4]
}
 800a242:	4618      	mov	r0, r3
 800a244:	370c      	adds	r7, #12
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	20000a1c 	.word	0x20000a1c

0800a254 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a25a:	f3ef 8305 	mrs	r3, IPSR
 800a25e:	603b      	str	r3, [r7, #0]
  return(result);
 800a260:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a266:	f06f 0305 	mvn.w	r3, #5
 800a26a:	607b      	str	r3, [r7, #4]
 800a26c:	e010      	b.n	800a290 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a26e:	4b0b      	ldr	r3, [pc, #44]	; (800a29c <osKernelStart+0x48>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d109      	bne.n	800a28a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a276:	f7ff ffbf 	bl	800a1f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a27a:	4b08      	ldr	r3, [pc, #32]	; (800a29c <osKernelStart+0x48>)
 800a27c:	2202      	movs	r2, #2
 800a27e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a280:	f001 f9e0 	bl	800b644 <vTaskStartScheduler>
      stat = osOK;
 800a284:	2300      	movs	r3, #0
 800a286:	607b      	str	r3, [r7, #4]
 800a288:	e002      	b.n	800a290 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a28a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a28e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a290:	687b      	ldr	r3, [r7, #4]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20000a1c 	.word	0x20000a1c

0800a2a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b08e      	sub	sp, #56	; 0x38
 800a2a4:	af04      	add	r7, sp, #16
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2b0:	f3ef 8305 	mrs	r3, IPSR
 800a2b4:	617b      	str	r3, [r7, #20]
  return(result);
 800a2b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d17e      	bne.n	800a3ba <osThreadNew+0x11a>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d07b      	beq.n	800a3ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a2c2:	2380      	movs	r3, #128	; 0x80
 800a2c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a2c6:	2318      	movs	r3, #24
 800a2c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a2ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d045      	beq.n	800a366 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d002      	beq.n	800a2e8 <osThreadNew+0x48>
        name = attr->name;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d008      	beq.n	800a30e <osThreadNew+0x6e>
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	2b38      	cmp	r3, #56	; 0x38
 800a300:	d805      	bhi.n	800a30e <osThreadNew+0x6e>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <osThreadNew+0x72>
        return (NULL);
 800a30e:	2300      	movs	r3, #0
 800a310:	e054      	b.n	800a3bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	089b      	lsrs	r3, r3, #2
 800a320:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00e      	beq.n	800a348 <osThreadNew+0xa8>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	2b5b      	cmp	r3, #91	; 0x5b
 800a330:	d90a      	bls.n	800a348 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a336:	2b00      	cmp	r3, #0
 800a338:	d006      	beq.n	800a348 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d002      	beq.n	800a348 <osThreadNew+0xa8>
        mem = 1;
 800a342:	2301      	movs	r3, #1
 800a344:	61bb      	str	r3, [r7, #24]
 800a346:	e010      	b.n	800a36a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10c      	bne.n	800a36a <osThreadNew+0xca>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d108      	bne.n	800a36a <osThreadNew+0xca>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d104      	bne.n	800a36a <osThreadNew+0xca>
          mem = 0;
 800a360:	2300      	movs	r3, #0
 800a362:	61bb      	str	r3, [r7, #24]
 800a364:	e001      	b.n	800a36a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d110      	bne.n	800a392 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a378:	9202      	str	r2, [sp, #8]
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	6a3a      	ldr	r2, [r7, #32]
 800a384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f000 ff86 	bl	800b298 <xTaskCreateStatic>
 800a38c:	4603      	mov	r3, r0
 800a38e:	613b      	str	r3, [r7, #16]
 800a390:	e013      	b.n	800a3ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d110      	bne.n	800a3ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	f107 0310 	add.w	r3, r7, #16
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 ffd1 	bl	800b352 <xTaskCreate>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d001      	beq.n	800a3ba <osThreadNew+0x11a>
            hTask = NULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a3ba:	693b      	ldr	r3, [r7, #16]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3728      	adds	r7, #40	; 0x28
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3cc:	f3ef 8305 	mrs	r3, IPSR
 800a3d0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d003      	beq.n	800a3e0 <osDelay+0x1c>
    stat = osErrorISR;
 800a3d8:	f06f 0305 	mvn.w	r3, #5
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	e007      	b.n	800a3f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d002      	beq.n	800a3f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f001 f8f6 	bl	800b5dc <vTaskDelay>
    }
  }

  return (stat);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b08a      	sub	sp, #40	; 0x28
 800a3fe:	af02      	add	r7, sp, #8
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	60b9      	str	r1, [r7, #8]
 800a404:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a406:	2300      	movs	r3, #0
 800a408:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a40a:	f3ef 8305 	mrs	r3, IPSR
 800a40e:	613b      	str	r3, [r7, #16]
  return(result);
 800a410:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a412:	2b00      	cmp	r3, #0
 800a414:	d175      	bne.n	800a502 <osSemaphoreNew+0x108>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d072      	beq.n	800a502 <osSemaphoreNew+0x108>
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	429a      	cmp	r2, r3
 800a422:	d86e      	bhi.n	800a502 <osSemaphoreNew+0x108>
    mem = -1;
 800a424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a428:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d015      	beq.n	800a45c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d006      	beq.n	800a446 <osSemaphoreNew+0x4c>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	2b4f      	cmp	r3, #79	; 0x4f
 800a43e:	d902      	bls.n	800a446 <osSemaphoreNew+0x4c>
        mem = 1;
 800a440:	2301      	movs	r3, #1
 800a442:	61bb      	str	r3, [r7, #24]
 800a444:	e00c      	b.n	800a460 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d108      	bne.n	800a460 <osSemaphoreNew+0x66>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d104      	bne.n	800a460 <osSemaphoreNew+0x66>
          mem = 0;
 800a456:	2300      	movs	r3, #0
 800a458:	61bb      	str	r3, [r7, #24]
 800a45a:	e001      	b.n	800a460 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a45c:	2300      	movs	r3, #0
 800a45e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a466:	d04c      	beq.n	800a502 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d128      	bne.n	800a4c0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d10a      	bne.n	800a48a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	2203      	movs	r2, #3
 800a47a:	9200      	str	r2, [sp, #0]
 800a47c:	2200      	movs	r2, #0
 800a47e:	2100      	movs	r1, #0
 800a480:	2001      	movs	r0, #1
 800a482:	f000 f993 	bl	800a7ac <xQueueGenericCreateStatic>
 800a486:	61f8      	str	r0, [r7, #28]
 800a488:	e005      	b.n	800a496 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a48a:	2203      	movs	r2, #3
 800a48c:	2100      	movs	r1, #0
 800a48e:	2001      	movs	r0, #1
 800a490:	f000 fa04 	bl	800a89c <xQueueGenericCreate>
 800a494:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d022      	beq.n	800a4e2 <osSemaphoreNew+0xe8>
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d01f      	beq.n	800a4e2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	69f8      	ldr	r0, [r7, #28]
 800a4aa:	f000 fabf 	bl	800aa2c <xQueueGenericSend>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d016      	beq.n	800a4e2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a4b4:	69f8      	ldr	r0, [r7, #28]
 800a4b6:	f000 fd33 	bl	800af20 <vQueueDelete>
            hSemaphore = NULL;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	61fb      	str	r3, [r7, #28]
 800a4be:	e010      	b.n	800a4e2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d108      	bne.n	800a4d8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	68b9      	ldr	r1, [r7, #8]
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f000 fa41 	bl	800a956 <xQueueCreateCountingSemaphoreStatic>
 800a4d4:	61f8      	str	r0, [r7, #28]
 800a4d6:	e004      	b.n	800a4e2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a4d8:	68b9      	ldr	r1, [r7, #8]
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 fa72 	bl	800a9c4 <xQueueCreateCountingSemaphore>
 800a4e0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00c      	beq.n	800a502 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	617b      	str	r3, [r7, #20]
 800a4f4:	e001      	b.n	800a4fa <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a4fa:	6979      	ldr	r1, [r7, #20]
 800a4fc:	69f8      	ldr	r0, [r7, #28]
 800a4fe:	f000 fe43 	bl	800b188 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a502:	69fb      	ldr	r3, [r7, #28]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3720      	adds	r7, #32
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4a07      	ldr	r2, [pc, #28]	; (800a538 <vApplicationGetIdleTaskMemory+0x2c>)
 800a51c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	4a06      	ldr	r2, [pc, #24]	; (800a53c <vApplicationGetIdleTaskMemory+0x30>)
 800a522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2280      	movs	r2, #128	; 0x80
 800a528:	601a      	str	r2, [r3, #0]
}
 800a52a:	bf00      	nop
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	20000a20 	.word	0x20000a20
 800a53c:	20000a7c 	.word	0x20000a7c

0800a540 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	4a07      	ldr	r2, [pc, #28]	; (800a56c <vApplicationGetTimerTaskMemory+0x2c>)
 800a550:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	4a06      	ldr	r2, [pc, #24]	; (800a570 <vApplicationGetTimerTaskMemory+0x30>)
 800a556:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a55e:	601a      	str	r2, [r3, #0]
}
 800a560:	bf00      	nop
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	20000c7c 	.word	0x20000c7c
 800a570:	20000cd8 	.word	0x20000cd8

0800a574 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f103 0208 	add.w	r2, r3, #8
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a58c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f103 0208 	add.w	r2, r3, #8
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f103 0208 	add.w	r2, r3, #8
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5a8:	bf00      	nop
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a5c2:	bf00      	nop
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b085      	sub	sp, #20
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	689a      	ldr	r2, [r3, #8]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	683a      	ldr	r2, [r7, #0]
 800a5f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	601a      	str	r2, [r3, #0]
}
 800a60a:	bf00      	nop
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a616:	b480      	push	{r7}
 800a618:	b085      	sub	sp, #20
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a62c:	d103      	bne.n	800a636 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	e00c      	b.n	800a650 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	3308      	adds	r3, #8
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	e002      	b.n	800a644 <vListInsert+0x2e>
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d2f6      	bcs.n	800a63e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	685a      	ldr	r2, [r3, #4]
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	601a      	str	r2, [r3, #0]
}
 800a67c:	bf00      	nop
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	6892      	ldr	r2, [r2, #8]
 800a69e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	6852      	ldr	r2, [r2, #4]
 800a6a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d103      	bne.n	800a6bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	689a      	ldr	r2, [r3, #8]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	1e5a      	subs	r2, r3, #1
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a702:	bf00      	nop
 800a704:	e7fe      	b.n	800a704 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a706:	f002 f93d 	bl	800c984 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a712:	68f9      	ldr	r1, [r7, #12]
 800a714:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a716:	fb01 f303 	mul.w	r3, r1, r3
 800a71a:	441a      	add	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a736:	3b01      	subs	r3, #1
 800a738:	68f9      	ldr	r1, [r7, #12]
 800a73a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a73c:	fb01 f303 	mul.w	r3, r1, r3
 800a740:	441a      	add	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	22ff      	movs	r2, #255	; 0xff
 800a74a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	22ff      	movs	r2, #255	; 0xff
 800a752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d114      	bne.n	800a786 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d01a      	beq.n	800a79a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	3310      	adds	r3, #16
 800a768:	4618      	mov	r0, r3
 800a76a:	f001 f9f5 	bl	800bb58 <xTaskRemoveFromEventList>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d012      	beq.n	800a79a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a774:	4b0c      	ldr	r3, [pc, #48]	; (800a7a8 <xQueueGenericReset+0xcc>)
 800a776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a77a:	601a      	str	r2, [r3, #0]
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	e009      	b.n	800a79a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3310      	adds	r3, #16
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7ff fef2 	bl	800a574 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	3324      	adds	r3, #36	; 0x24
 800a794:	4618      	mov	r0, r3
 800a796:	f7ff feed 	bl	800a574 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a79a:	f002 f923 	bl	800c9e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a79e:	2301      	movs	r3, #1
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	e000ed04 	.word	0xe000ed04

0800a7ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b08e      	sub	sp, #56	; 0x38
 800a7b0:	af02      	add	r7, sp, #8
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10a      	bne.n	800a7d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a7d2:	bf00      	nop
 800a7d4:	e7fe      	b.n	800a7d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10a      	bne.n	800a7f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	f383 8811 	msr	BASEPRI, r3
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a7ee:	bf00      	nop
 800a7f0:	e7fe      	b.n	800a7f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d002      	beq.n	800a7fe <xQueueGenericCreateStatic+0x52>
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <xQueueGenericCreateStatic+0x56>
 800a7fe:	2301      	movs	r3, #1
 800a800:	e000      	b.n	800a804 <xQueueGenericCreateStatic+0x58>
 800a802:	2300      	movs	r3, #0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10a      	bne.n	800a81e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80c:	f383 8811 	msr	BASEPRI, r3
 800a810:	f3bf 8f6f 	isb	sy
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	623b      	str	r3, [r7, #32]
}
 800a81a:	bf00      	nop
 800a81c:	e7fe      	b.n	800a81c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d102      	bne.n	800a82a <xQueueGenericCreateStatic+0x7e>
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d101      	bne.n	800a82e <xQueueGenericCreateStatic+0x82>
 800a82a:	2301      	movs	r3, #1
 800a82c:	e000      	b.n	800a830 <xQueueGenericCreateStatic+0x84>
 800a82e:	2300      	movs	r3, #0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10a      	bne.n	800a84a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	61fb      	str	r3, [r7, #28]
}
 800a846:	bf00      	nop
 800a848:	e7fe      	b.n	800a848 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a84a:	2350      	movs	r3, #80	; 0x50
 800a84c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b50      	cmp	r3, #80	; 0x50
 800a852:	d00a      	beq.n	800a86a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	61bb      	str	r3, [r7, #24]
}
 800a866:	bf00      	nop
 800a868:	e7fe      	b.n	800a868 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a86a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00d      	beq.n	800a892 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a87e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	4613      	mov	r3, r2
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	68b9      	ldr	r1, [r7, #8]
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 f83f 	bl	800a910 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a894:	4618      	mov	r0, r3
 800a896:	3730      	adds	r7, #48	; 0x30
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08a      	sub	sp, #40	; 0x28
 800a8a0:	af02      	add	r7, sp, #8
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10a      	bne.n	800a8c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	613b      	str	r3, [r7, #16]
}
 800a8c2:	bf00      	nop
 800a8c4:	e7fe      	b.n	800a8c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	68ba      	ldr	r2, [r7, #8]
 800a8ca:	fb02 f303 	mul.w	r3, r2, r3
 800a8ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	3350      	adds	r3, #80	; 0x50
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f002 f977 	bl	800cbc8 <pvPortMalloc>
 800a8da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d011      	beq.n	800a906 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	3350      	adds	r3, #80	; 0x50
 800a8ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a8f4:	79fa      	ldrb	r2, [r7, #7]
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	68b9      	ldr	r1, [r7, #8]
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f000 f805 	bl	800a910 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a906:	69bb      	ldr	r3, [r7, #24]
	}
 800a908:	4618      	mov	r0, r3
 800a90a:	3720      	adds	r7, #32
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
 800a91c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d103      	bne.n	800a92c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	69ba      	ldr	r2, [r7, #24]
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	e002      	b.n	800a932 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a93e:	2101      	movs	r1, #1
 800a940:	69b8      	ldr	r0, [r7, #24]
 800a942:	f7ff fecb 	bl	800a6dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	78fa      	ldrb	r2, [r7, #3]
 800a94a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a94e:	bf00      	nop
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a956:	b580      	push	{r7, lr}
 800a958:	b08a      	sub	sp, #40	; 0x28
 800a95a:	af02      	add	r7, sp, #8
 800a95c:	60f8      	str	r0, [r7, #12]
 800a95e:	60b9      	str	r1, [r7, #8]
 800a960:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10a      	bne.n	800a97e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96c:	f383 8811 	msr	BASEPRI, r3
 800a970:	f3bf 8f6f 	isb	sy
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	61bb      	str	r3, [r7, #24]
}
 800a97a:	bf00      	nop
 800a97c:	e7fe      	b.n	800a97c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	429a      	cmp	r2, r3
 800a984:	d90a      	bls.n	800a99c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	617b      	str	r3, [r7, #20]
}
 800a998:	bf00      	nop
 800a99a:	e7fe      	b.n	800a99a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a99c:	2302      	movs	r3, #2
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f7ff ff00 	bl	800a7ac <xQueueGenericCreateStatic>
 800a9ac:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d002      	beq.n	800a9ba <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a9ba:	69fb      	ldr	r3, [r7, #28]
	}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3720      	adds	r7, #32
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b086      	sub	sp, #24
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10a      	bne.n	800a9ea <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d8:	f383 8811 	msr	BASEPRI, r3
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	613b      	str	r3, [r7, #16]
}
 800a9e6:	bf00      	nop
 800a9e8:	e7fe      	b.n	800a9e8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d90a      	bls.n	800aa08 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f6:	f383 8811 	msr	BASEPRI, r3
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	f3bf 8f4f 	dsb	sy
 800aa02:	60fb      	str	r3, [r7, #12]
}
 800aa04:	bf00      	nop
 800aa06:	e7fe      	b.n	800aa06 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aa08:	2202      	movs	r2, #2
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7ff ff45 	bl	800a89c <xQueueGenericCreate>
 800aa12:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d002      	beq.n	800aa20 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	683a      	ldr	r2, [r7, #0]
 800aa1e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aa20:	697b      	ldr	r3, [r7, #20]
	}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3718      	adds	r7, #24
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b08e      	sub	sp, #56	; 0x38
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10a      	bne.n	800aa5e <xQueueGenericSend+0x32>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa5a:	bf00      	nop
 800aa5c:	e7fe      	b.n	800aa5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d103      	bne.n	800aa6c <xQueueGenericSend+0x40>
 800aa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <xQueueGenericSend+0x44>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e000      	b.n	800aa72 <xQueueGenericSend+0x46>
 800aa70:	2300      	movs	r3, #0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10a      	bne.n	800aa8c <xQueueGenericSend+0x60>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa88:	bf00      	nop
 800aa8a:	e7fe      	b.n	800aa8a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d103      	bne.n	800aa9a <xQueueGenericSend+0x6e>
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d101      	bne.n	800aa9e <xQueueGenericSend+0x72>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e000      	b.n	800aaa0 <xQueueGenericSend+0x74>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10a      	bne.n	800aaba <xQueueGenericSend+0x8e>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	623b      	str	r3, [r7, #32]
}
 800aab6:	bf00      	nop
 800aab8:	e7fe      	b.n	800aab8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aaba:	f001 fa0b 	bl	800bed4 <xTaskGetSchedulerState>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d102      	bne.n	800aaca <xQueueGenericSend+0x9e>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <xQueueGenericSend+0xa2>
 800aaca:	2301      	movs	r3, #1
 800aacc:	e000      	b.n	800aad0 <xQueueGenericSend+0xa4>
 800aace:	2300      	movs	r3, #0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10a      	bne.n	800aaea <xQueueGenericSend+0xbe>
	__asm volatile
 800aad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	61fb      	str	r3, [r7, #28]
}
 800aae6:	bf00      	nop
 800aae8:	e7fe      	b.n	800aae8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aaea:	f001 ff4b 	bl	800c984 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d302      	bcc.n	800ab00 <xQueueGenericSend+0xd4>
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	d129      	bne.n	800ab54 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab00:	683a      	ldr	r2, [r7, #0]
 800ab02:	68b9      	ldr	r1, [r7, #8]
 800ab04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab06:	f000 fa2e 	bl	800af66 <prvCopyDataToQueue>
 800ab0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d010      	beq.n	800ab36 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab16:	3324      	adds	r3, #36	; 0x24
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f001 f81d 	bl	800bb58 <xTaskRemoveFromEventList>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d013      	beq.n	800ab4c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab24:	4b3f      	ldr	r3, [pc, #252]	; (800ac24 <xQueueGenericSend+0x1f8>)
 800ab26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab2a:	601a      	str	r2, [r3, #0]
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	f3bf 8f6f 	isb	sy
 800ab34:	e00a      	b.n	800ab4c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d007      	beq.n	800ab4c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab3c:	4b39      	ldr	r3, [pc, #228]	; (800ac24 <xQueueGenericSend+0x1f8>)
 800ab3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab4c:	f001 ff4a 	bl	800c9e4 <vPortExitCritical>
				return pdPASS;
 800ab50:	2301      	movs	r3, #1
 800ab52:	e063      	b.n	800ac1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d103      	bne.n	800ab62 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab5a:	f001 ff43 	bl	800c9e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e05c      	b.n	800ac1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d106      	bne.n	800ab76 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab68:	f107 0314 	add.w	r3, r7, #20
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f001 f857 	bl	800bc20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab72:	2301      	movs	r3, #1
 800ab74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab76:	f001 ff35 	bl	800c9e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab7a:	f000 fdc9 	bl	800b710 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab7e:	f001 ff01 	bl	800c984 <vPortEnterCritical>
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab88:	b25b      	sxtb	r3, r3
 800ab8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab8e:	d103      	bne.n	800ab98 <xQueueGenericSend+0x16c>
 800ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab92:	2200      	movs	r2, #0
 800ab94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab9e:	b25b      	sxtb	r3, r3
 800aba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aba4:	d103      	bne.n	800abae <xQueueGenericSend+0x182>
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abae:	f001 ff19 	bl	800c9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abb2:	1d3a      	adds	r2, r7, #4
 800abb4:	f107 0314 	add.w	r3, r7, #20
 800abb8:	4611      	mov	r1, r2
 800abba:	4618      	mov	r0, r3
 800abbc:	f001 f846 	bl	800bc4c <xTaskCheckForTimeOut>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d124      	bne.n	800ac10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800abc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abc8:	f000 fac5 	bl	800b156 <prvIsQueueFull>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d018      	beq.n	800ac04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	3310      	adds	r3, #16
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	4611      	mov	r1, r2
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 ff6c 	bl	800bab8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800abe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abe2:	f000 fa50 	bl	800b086 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800abe6:	f000 fda1 	bl	800b72c <xTaskResumeAll>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	f47f af7c 	bne.w	800aaea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800abf2:	4b0c      	ldr	r3, [pc, #48]	; (800ac24 <xQueueGenericSend+0x1f8>)
 800abf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abf8:	601a      	str	r2, [r3, #0]
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	f3bf 8f6f 	isb	sy
 800ac02:	e772      	b.n	800aaea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac06:	f000 fa3e 	bl	800b086 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac0a:	f000 fd8f 	bl	800b72c <xTaskResumeAll>
 800ac0e:	e76c      	b.n	800aaea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac12:	f000 fa38 	bl	800b086 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac16:	f000 fd89 	bl	800b72c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3738      	adds	r7, #56	; 0x38
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	e000ed04 	.word	0xe000ed04

0800ac28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b090      	sub	sp, #64	; 0x40
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
 800ac34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10a      	bne.n	800ac56 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac52:	bf00      	nop
 800ac54:	e7fe      	b.n	800ac54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d103      	bne.n	800ac64 <xQueueGenericSendFromISR+0x3c>
 800ac5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d101      	bne.n	800ac68 <xQueueGenericSendFromISR+0x40>
 800ac64:	2301      	movs	r3, #1
 800ac66:	e000      	b.n	800ac6a <xQueueGenericSendFromISR+0x42>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10a      	bne.n	800ac84 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac80:	bf00      	nop
 800ac82:	e7fe      	b.n	800ac82 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d103      	bne.n	800ac92 <xQueueGenericSendFromISR+0x6a>
 800ac8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d101      	bne.n	800ac96 <xQueueGenericSendFromISR+0x6e>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e000      	b.n	800ac98 <xQueueGenericSendFromISR+0x70>
 800ac96:	2300      	movs	r3, #0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10a      	bne.n	800acb2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ac9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca0:	f383 8811 	msr	BASEPRI, r3
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	623b      	str	r3, [r7, #32]
}
 800acae:	bf00      	nop
 800acb0:	e7fe      	b.n	800acb0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acb2:	f001 ff49 	bl	800cb48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800acb6:	f3ef 8211 	mrs	r2, BASEPRI
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	61fa      	str	r2, [r7, #28]
 800accc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800acce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acd0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acda:	429a      	cmp	r2, r3
 800acdc:	d302      	bcc.n	800ace4 <xQueueGenericSendFromISR+0xbc>
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	d12f      	bne.n	800ad44 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ace4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	68b9      	ldr	r1, [r7, #8]
 800acf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800acfa:	f000 f934 	bl	800af66 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800acfe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ad02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad06:	d112      	bne.n	800ad2e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d016      	beq.n	800ad3e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad12:	3324      	adds	r3, #36	; 0x24
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 ff1f 	bl	800bb58 <xTaskRemoveFromEventList>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00e      	beq.n	800ad3e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00b      	beq.n	800ad3e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2201      	movs	r2, #1
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	e007      	b.n	800ad3e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad32:	3301      	adds	r3, #1
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	b25a      	sxtb	r2, r3
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ad42:	e001      	b.n	800ad48 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad44:	2300      	movs	r3, #0
 800ad46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad4a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3740      	adds	r7, #64	; 0x40
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
	...

0800ad60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08c      	sub	sp, #48	; 0x30
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10a      	bne.n	800ad90 <xQueueReceive+0x30>
	__asm volatile
 800ad7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	623b      	str	r3, [r7, #32]
}
 800ad8c:	bf00      	nop
 800ad8e:	e7fe      	b.n	800ad8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d103      	bne.n	800ad9e <xQueueReceive+0x3e>
 800ad96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d101      	bne.n	800ada2 <xQueueReceive+0x42>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e000      	b.n	800ada4 <xQueueReceive+0x44>
 800ada2:	2300      	movs	r3, #0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10a      	bne.n	800adbe <xQueueReceive+0x5e>
	__asm volatile
 800ada8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adac:	f383 8811 	msr	BASEPRI, r3
 800adb0:	f3bf 8f6f 	isb	sy
 800adb4:	f3bf 8f4f 	dsb	sy
 800adb8:	61fb      	str	r3, [r7, #28]
}
 800adba:	bf00      	nop
 800adbc:	e7fe      	b.n	800adbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adbe:	f001 f889 	bl	800bed4 <xTaskGetSchedulerState>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d102      	bne.n	800adce <xQueueReceive+0x6e>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d101      	bne.n	800add2 <xQueueReceive+0x72>
 800adce:	2301      	movs	r3, #1
 800add0:	e000      	b.n	800add4 <xQueueReceive+0x74>
 800add2:	2300      	movs	r3, #0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10a      	bne.n	800adee <xQueueReceive+0x8e>
	__asm volatile
 800add8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800addc:	f383 8811 	msr	BASEPRI, r3
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	61bb      	str	r3, [r7, #24]
}
 800adea:	bf00      	nop
 800adec:	e7fe      	b.n	800adec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adee:	f001 fdc9 	bl	800c984 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d01f      	beq.n	800ae3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800adfe:	68b9      	ldr	r1, [r7, #8]
 800ae00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae02:	f000 f91a 	bl	800b03a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae08:	1e5a      	subs	r2, r3, #1
 800ae0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00f      	beq.n	800ae36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae18:	3310      	adds	r3, #16
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 fe9c 	bl	800bb58 <xTaskRemoveFromEventList>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d007      	beq.n	800ae36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae26:	4b3d      	ldr	r3, [pc, #244]	; (800af1c <xQueueReceive+0x1bc>)
 800ae28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae36:	f001 fdd5 	bl	800c9e4 <vPortExitCritical>
				return pdPASS;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e069      	b.n	800af12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d103      	bne.n	800ae4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae44:	f001 fdce 	bl	800c9e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	e062      	b.n	800af12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d106      	bne.n	800ae60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae52:	f107 0310 	add.w	r3, r7, #16
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 fee2 	bl	800bc20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae60:	f001 fdc0 	bl	800c9e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae64:	f000 fc54 	bl	800b710 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae68:	f001 fd8c 	bl	800c984 <vPortEnterCritical>
 800ae6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae72:	b25b      	sxtb	r3, r3
 800ae74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae78:	d103      	bne.n	800ae82 <xQueueReceive+0x122>
 800ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae88:	b25b      	sxtb	r3, r3
 800ae8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae8e:	d103      	bne.n	800ae98 <xQueueReceive+0x138>
 800ae90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae98:	f001 fda4 	bl	800c9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae9c:	1d3a      	adds	r2, r7, #4
 800ae9e:	f107 0310 	add.w	r3, r7, #16
 800aea2:	4611      	mov	r1, r2
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 fed1 	bl	800bc4c <xTaskCheckForTimeOut>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d123      	bne.n	800aef8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aeb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeb2:	f000 f93a 	bl	800b12a <prvIsQueueEmpty>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d017      	beq.n	800aeec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	3324      	adds	r3, #36	; 0x24
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	4611      	mov	r1, r2
 800aec4:	4618      	mov	r0, r3
 800aec6:	f000 fdf7 	bl	800bab8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aeca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aecc:	f000 f8db 	bl	800b086 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aed0:	f000 fc2c 	bl	800b72c <xTaskResumeAll>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d189      	bne.n	800adee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aeda:	4b10      	ldr	r3, [pc, #64]	; (800af1c <xQueueReceive+0x1bc>)
 800aedc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee0:	601a      	str	r2, [r3, #0]
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	e780      	b.n	800adee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aeec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeee:	f000 f8ca 	bl	800b086 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aef2:	f000 fc1b 	bl	800b72c <xTaskResumeAll>
 800aef6:	e77a      	b.n	800adee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aefa:	f000 f8c4 	bl	800b086 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aefe:	f000 fc15 	bl	800b72c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af04:	f000 f911 	bl	800b12a <prvIsQueueEmpty>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f43f af6f 	beq.w	800adee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af12:	4618      	mov	r0, r3
 800af14:	3730      	adds	r7, #48	; 0x30
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	e000ed04 	.word	0xe000ed04

0800af20 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10a      	bne.n	800af48 <vQueueDelete+0x28>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	60bb      	str	r3, [r7, #8]
}
 800af44:	bf00      	nop
 800af46:	e7fe      	b.n	800af46 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f000 f947 	bl	800b1dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800af54:	2b00      	cmp	r3, #0
 800af56:	d102      	bne.n	800af5e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f001 ff01 	bl	800cd60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800af5e:	bf00      	nop
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b086      	sub	sp, #24
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	60f8      	str	r0, [r7, #12]
 800af6e:	60b9      	str	r1, [r7, #8]
 800af70:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af72:	2300      	movs	r3, #0
 800af74:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10d      	bne.n	800afa0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d14d      	bne.n	800b028 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	4618      	mov	r0, r3
 800af92:	f000 ffbd 	bl	800bf10 <xTaskPriorityDisinherit>
 800af96:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	609a      	str	r2, [r3, #8]
 800af9e:	e043      	b.n	800b028 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d119      	bne.n	800afda <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6858      	ldr	r0, [r3, #4]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afae:	461a      	mov	r2, r3
 800afb0:	68b9      	ldr	r1, [r7, #8]
 800afb2:	f002 fd74 	bl	800da9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	685a      	ldr	r2, [r3, #4]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afbe:	441a      	add	r2, r3
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d32b      	bcc.n	800b028 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	605a      	str	r2, [r3, #4]
 800afd8:	e026      	b.n	800b028 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	68d8      	ldr	r0, [r3, #12]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe2:	461a      	mov	r2, r3
 800afe4:	68b9      	ldr	r1, [r7, #8]
 800afe6:	f002 fd5a 	bl	800da9e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	68da      	ldr	r2, [r3, #12]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff2:	425b      	negs	r3, r3
 800aff4:	441a      	add	r2, r3
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	68da      	ldr	r2, [r3, #12]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	429a      	cmp	r2, r3
 800b004:	d207      	bcs.n	800b016 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	689a      	ldr	r2, [r3, #8]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00e:	425b      	negs	r3, r3
 800b010:	441a      	add	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d105      	bne.n	800b028 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d002      	beq.n	800b028 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	3b01      	subs	r3, #1
 800b026:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	1c5a      	adds	r2, r3, #1
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b030:	697b      	ldr	r3, [r7, #20]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3718      	adds	r7, #24
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b082      	sub	sp, #8
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d018      	beq.n	800b07e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	68da      	ldr	r2, [r3, #12]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b054:	441a      	add	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	68da      	ldr	r2, [r3, #12]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	429a      	cmp	r2, r3
 800b064:	d303      	bcc.n	800b06e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	68d9      	ldr	r1, [r3, #12]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b076:	461a      	mov	r2, r3
 800b078:	6838      	ldr	r0, [r7, #0]
 800b07a:	f002 fd10 	bl	800da9e <memcpy>
	}
}
 800b07e:	bf00      	nop
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b084      	sub	sp, #16
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b08e:	f001 fc79 	bl	800c984 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b098:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b09a:	e011      	b.n	800b0c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d012      	beq.n	800b0ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	3324      	adds	r3, #36	; 0x24
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f000 fd55 	bl	800bb58 <xTaskRemoveFromEventList>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d001      	beq.n	800b0b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b0b4:	f000 fe2c 	bl	800bd10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	dce9      	bgt.n	800b09c <prvUnlockQueue+0x16>
 800b0c8:	e000      	b.n	800b0cc <prvUnlockQueue+0x46>
					break;
 800b0ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	22ff      	movs	r2, #255	; 0xff
 800b0d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b0d4:	f001 fc86 	bl	800c9e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b0d8:	f001 fc54 	bl	800c984 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0e4:	e011      	b.n	800b10a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d012      	beq.n	800b114 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	3310      	adds	r3, #16
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 fd30 	bl	800bb58 <xTaskRemoveFromEventList>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b0fe:	f000 fe07 	bl	800bd10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b102:	7bbb      	ldrb	r3, [r7, #14]
 800b104:	3b01      	subs	r3, #1
 800b106:	b2db      	uxtb	r3, r3
 800b108:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b10a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	dce9      	bgt.n	800b0e6 <prvUnlockQueue+0x60>
 800b112:	e000      	b.n	800b116 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b114:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	22ff      	movs	r2, #255	; 0xff
 800b11a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b11e:	f001 fc61 	bl	800c9e4 <vPortExitCritical>
}
 800b122:	bf00      	nop
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b084      	sub	sp, #16
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b132:	f001 fc27 	bl	800c984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d102      	bne.n	800b144 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b13e:	2301      	movs	r3, #1
 800b140:	60fb      	str	r3, [r7, #12]
 800b142:	e001      	b.n	800b148 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b144:	2300      	movs	r3, #0
 800b146:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b148:	f001 fc4c 	bl	800c9e4 <vPortExitCritical>

	return xReturn;
 800b14c:	68fb      	ldr	r3, [r7, #12]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b15e:	f001 fc11 	bl	800c984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d102      	bne.n	800b174 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b16e:	2301      	movs	r3, #1
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	e001      	b.n	800b178 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b178:	f001 fc34 	bl	800c9e4 <vPortExitCritical>

	return xReturn;
 800b17c:	68fb      	ldr	r3, [r7, #12]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
	...

0800b188 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b192:	2300      	movs	r3, #0
 800b194:	60fb      	str	r3, [r7, #12]
 800b196:	e014      	b.n	800b1c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b198:	4a0f      	ldr	r2, [pc, #60]	; (800b1d8 <vQueueAddToRegistry+0x50>)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10b      	bne.n	800b1bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b1a4:	490c      	ldr	r1, [pc, #48]	; (800b1d8 <vQueueAddToRegistry+0x50>)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b1ae:	4a0a      	ldr	r2, [pc, #40]	; (800b1d8 <vQueueAddToRegistry+0x50>)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	00db      	lsls	r3, r3, #3
 800b1b4:	4413      	add	r3, r2
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b1ba:	e006      	b.n	800b1ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	60fb      	str	r3, [r7, #12]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2b07      	cmp	r3, #7
 800b1c6:	d9e7      	bls.n	800b198 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b1c8:	bf00      	nop
 800b1ca:	bf00      	nop
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	200010d8 	.word	0x200010d8

0800b1dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	60fb      	str	r3, [r7, #12]
 800b1e8:	e016      	b.n	800b218 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b1ea:	4a10      	ldr	r2, [pc, #64]	; (800b22c <vQueueUnregisterQueue+0x50>)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	00db      	lsls	r3, r3, #3
 800b1f0:	4413      	add	r3, r2
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d10b      	bne.n	800b212 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b1fa:	4a0c      	ldr	r2, [pc, #48]	; (800b22c <vQueueUnregisterQueue+0x50>)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2100      	movs	r1, #0
 800b200:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b204:	4a09      	ldr	r2, [pc, #36]	; (800b22c <vQueueUnregisterQueue+0x50>)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	00db      	lsls	r3, r3, #3
 800b20a:	4413      	add	r3, r2
 800b20c:	2200      	movs	r2, #0
 800b20e:	605a      	str	r2, [r3, #4]
				break;
 800b210:	e006      	b.n	800b220 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	3301      	adds	r3, #1
 800b216:	60fb      	str	r3, [r7, #12]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b07      	cmp	r3, #7
 800b21c:	d9e5      	bls.n	800b1ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b21e:	bf00      	nop
 800b220:	bf00      	nop
 800b222:	3714      	adds	r7, #20
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	200010d8 	.word	0x200010d8

0800b230 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b240:	f001 fba0 	bl	800c984 <vPortEnterCritical>
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b24a:	b25b      	sxtb	r3, r3
 800b24c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b250:	d103      	bne.n	800b25a <vQueueWaitForMessageRestricted+0x2a>
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2200      	movs	r2, #0
 800b256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b260:	b25b      	sxtb	r3, r3
 800b262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b266:	d103      	bne.n	800b270 <vQueueWaitForMessageRestricted+0x40>
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b270:	f001 fbb8 	bl	800c9e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d106      	bne.n	800b28a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	3324      	adds	r3, #36	; 0x24
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	68b9      	ldr	r1, [r7, #8]
 800b284:	4618      	mov	r0, r3
 800b286:	f000 fc3b 	bl	800bb00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b28a:	6978      	ldr	r0, [r7, #20]
 800b28c:	f7ff fefb 	bl	800b086 <prvUnlockQueue>
	}
 800b290:	bf00      	nop
 800b292:	3718      	adds	r7, #24
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08e      	sub	sp, #56	; 0x38
 800b29c:	af04      	add	r7, sp, #16
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
 800b2a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10a      	bne.n	800b2c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b0:	f383 8811 	msr	BASEPRI, r3
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	623b      	str	r3, [r7, #32]
}
 800b2be:	bf00      	nop
 800b2c0:	e7fe      	b.n	800b2c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d10a      	bne.n	800b2de <xTaskCreateStatic+0x46>
	__asm volatile
 800b2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2cc:	f383 8811 	msr	BASEPRI, r3
 800b2d0:	f3bf 8f6f 	isb	sy
 800b2d4:	f3bf 8f4f 	dsb	sy
 800b2d8:	61fb      	str	r3, [r7, #28]
}
 800b2da:	bf00      	nop
 800b2dc:	e7fe      	b.n	800b2dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2de:	235c      	movs	r3, #92	; 0x5c
 800b2e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	2b5c      	cmp	r3, #92	; 0x5c
 800b2e6:	d00a      	beq.n	800b2fe <xTaskCreateStatic+0x66>
	__asm volatile
 800b2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ec:	f383 8811 	msr	BASEPRI, r3
 800b2f0:	f3bf 8f6f 	isb	sy
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	61bb      	str	r3, [r7, #24]
}
 800b2fa:	bf00      	nop
 800b2fc:	e7fe      	b.n	800b2fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b2fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b302:	2b00      	cmp	r3, #0
 800b304:	d01e      	beq.n	800b344 <xTaskCreateStatic+0xac>
 800b306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d01b      	beq.n	800b344 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b314:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b318:	2202      	movs	r2, #2
 800b31a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b31e:	2300      	movs	r3, #0
 800b320:	9303      	str	r3, [sp, #12]
 800b322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b324:	9302      	str	r3, [sp, #8]
 800b326:	f107 0314 	add.w	r3, r7, #20
 800b32a:	9301      	str	r3, [sp, #4]
 800b32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	68b9      	ldr	r1, [r7, #8]
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f000 f850 	bl	800b3dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b33c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b33e:	f000 f8dd 	bl	800b4fc <prvAddNewTaskToReadyList>
 800b342:	e001      	b.n	800b348 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b344:	2300      	movs	r3, #0
 800b346:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b348:	697b      	ldr	r3, [r7, #20]
	}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3728      	adds	r7, #40	; 0x28
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b352:	b580      	push	{r7, lr}
 800b354:	b08c      	sub	sp, #48	; 0x30
 800b356:	af04      	add	r7, sp, #16
 800b358:	60f8      	str	r0, [r7, #12]
 800b35a:	60b9      	str	r1, [r7, #8]
 800b35c:	603b      	str	r3, [r7, #0]
 800b35e:	4613      	mov	r3, r2
 800b360:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b362:	88fb      	ldrh	r3, [r7, #6]
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4618      	mov	r0, r3
 800b368:	f001 fc2e 	bl	800cbc8 <pvPortMalloc>
 800b36c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00e      	beq.n	800b392 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b374:	205c      	movs	r0, #92	; 0x5c
 800b376:	f001 fc27 	bl	800cbc8 <pvPortMalloc>
 800b37a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d003      	beq.n	800b38a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	697a      	ldr	r2, [r7, #20]
 800b386:	631a      	str	r2, [r3, #48]	; 0x30
 800b388:	e005      	b.n	800b396 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b38a:	6978      	ldr	r0, [r7, #20]
 800b38c:	f001 fce8 	bl	800cd60 <vPortFree>
 800b390:	e001      	b.n	800b396 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b392:	2300      	movs	r3, #0
 800b394:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d017      	beq.n	800b3cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3a4:	88fa      	ldrh	r2, [r7, #6]
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	9303      	str	r3, [sp, #12]
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	9302      	str	r3, [sp, #8]
 800b3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b0:	9301      	str	r3, [sp, #4]
 800b3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b4:	9300      	str	r3, [sp, #0]
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	68b9      	ldr	r1, [r7, #8]
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f000 f80e 	bl	800b3dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3c0:	69f8      	ldr	r0, [r7, #28]
 800b3c2:	f000 f89b 	bl	800b4fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	61bb      	str	r3, [r7, #24]
 800b3ca:	e002      	b.n	800b3d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3d2:	69bb      	ldr	r3, [r7, #24]
	}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3720      	adds	r7, #32
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b088      	sub	sp, #32
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
 800b3e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	21a5      	movs	r1, #165	; 0xa5
 800b3f6:	f002 fb19 	bl	800da2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b404:	3b01      	subs	r3, #1
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	f023 0307 	bic.w	r3, r3, #7
 800b412:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	f003 0307 	and.w	r3, r3, #7
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00a      	beq.n	800b434 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	617b      	str	r3, [r7, #20]
}
 800b430:	bf00      	nop
 800b432:	e7fe      	b.n	800b432 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d01f      	beq.n	800b47a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b43a:	2300      	movs	r3, #0
 800b43c:	61fb      	str	r3, [r7, #28]
 800b43e:	e012      	b.n	800b466 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	4413      	add	r3, r2
 800b446:	7819      	ldrb	r1, [r3, #0]
 800b448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	4413      	add	r3, r2
 800b44e:	3334      	adds	r3, #52	; 0x34
 800b450:	460a      	mov	r2, r1
 800b452:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b454:	68ba      	ldr	r2, [r7, #8]
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	4413      	add	r3, r2
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d006      	beq.n	800b46e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	3301      	adds	r3, #1
 800b464:	61fb      	str	r3, [r7, #28]
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	2b0f      	cmp	r3, #15
 800b46a:	d9e9      	bls.n	800b440 <prvInitialiseNewTask+0x64>
 800b46c:	e000      	b.n	800b470 <prvInitialiseNewTask+0x94>
			{
				break;
 800b46e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b478:	e003      	b.n	800b482 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b484:	2b37      	cmp	r3, #55	; 0x37
 800b486:	d901      	bls.n	800b48c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b488:	2337      	movs	r3, #55	; 0x37
 800b48a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b490:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b496:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49a:	2200      	movs	r2, #0
 800b49c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7ff f886 	bl	800a5b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	3318      	adds	r3, #24
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7ff f881 	bl	800a5b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	68f9      	ldr	r1, [r7, #12]
 800b4da:	69b8      	ldr	r0, [r7, #24]
 800b4dc:	f001 f928 	bl	800c730 <pxPortInitialiseStack>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4f2:	bf00      	nop
 800b4f4:	3720      	adds	r7, #32
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
	...

0800b4fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b504:	f001 fa3e 	bl	800c984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b508:	4b2d      	ldr	r3, [pc, #180]	; (800b5c0 <prvAddNewTaskToReadyList+0xc4>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3301      	adds	r3, #1
 800b50e:	4a2c      	ldr	r2, [pc, #176]	; (800b5c0 <prvAddNewTaskToReadyList+0xc4>)
 800b510:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b512:	4b2c      	ldr	r3, [pc, #176]	; (800b5c4 <prvAddNewTaskToReadyList+0xc8>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d109      	bne.n	800b52e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b51a:	4a2a      	ldr	r2, [pc, #168]	; (800b5c4 <prvAddNewTaskToReadyList+0xc8>)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b520:	4b27      	ldr	r3, [pc, #156]	; (800b5c0 <prvAddNewTaskToReadyList+0xc4>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d110      	bne.n	800b54a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b528:	f000 fc16 	bl	800bd58 <prvInitialiseTaskLists>
 800b52c:	e00d      	b.n	800b54a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b52e:	4b26      	ldr	r3, [pc, #152]	; (800b5c8 <prvAddNewTaskToReadyList+0xcc>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d109      	bne.n	800b54a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b536:	4b23      	ldr	r3, [pc, #140]	; (800b5c4 <prvAddNewTaskToReadyList+0xc8>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b540:	429a      	cmp	r2, r3
 800b542:	d802      	bhi.n	800b54a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b544:	4a1f      	ldr	r2, [pc, #124]	; (800b5c4 <prvAddNewTaskToReadyList+0xc8>)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b54a:	4b20      	ldr	r3, [pc, #128]	; (800b5cc <prvAddNewTaskToReadyList+0xd0>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3301      	adds	r3, #1
 800b550:	4a1e      	ldr	r2, [pc, #120]	; (800b5cc <prvAddNewTaskToReadyList+0xd0>)
 800b552:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b554:	4b1d      	ldr	r3, [pc, #116]	; (800b5cc <prvAddNewTaskToReadyList+0xd0>)
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b560:	4b1b      	ldr	r3, [pc, #108]	; (800b5d0 <prvAddNewTaskToReadyList+0xd4>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	429a      	cmp	r2, r3
 800b566:	d903      	bls.n	800b570 <prvAddNewTaskToReadyList+0x74>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56c:	4a18      	ldr	r2, [pc, #96]	; (800b5d0 <prvAddNewTaskToReadyList+0xd4>)
 800b56e:	6013      	str	r3, [r2, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b574:	4613      	mov	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	4413      	add	r3, r2
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	4a15      	ldr	r2, [pc, #84]	; (800b5d4 <prvAddNewTaskToReadyList+0xd8>)
 800b57e:	441a      	add	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	3304      	adds	r3, #4
 800b584:	4619      	mov	r1, r3
 800b586:	4610      	mov	r0, r2
 800b588:	f7ff f821 	bl	800a5ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b58c:	f001 fa2a 	bl	800c9e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b590:	4b0d      	ldr	r3, [pc, #52]	; (800b5c8 <prvAddNewTaskToReadyList+0xcc>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d00e      	beq.n	800b5b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b598:	4b0a      	ldr	r3, [pc, #40]	; (800b5c4 <prvAddNewTaskToReadyList+0xc8>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d207      	bcs.n	800b5b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5a6:	4b0c      	ldr	r3, [pc, #48]	; (800b5d8 <prvAddNewTaskToReadyList+0xdc>)
 800b5a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ac:	601a      	str	r2, [r3, #0]
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5b6:	bf00      	nop
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	200015ec 	.word	0x200015ec
 800b5c4:	20001118 	.word	0x20001118
 800b5c8:	200015f8 	.word	0x200015f8
 800b5cc:	20001608 	.word	0x20001608
 800b5d0:	200015f4 	.word	0x200015f4
 800b5d4:	2000111c 	.word	0x2000111c
 800b5d8:	e000ed04 	.word	0xe000ed04

0800b5dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d017      	beq.n	800b61e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5ee:	4b13      	ldr	r3, [pc, #76]	; (800b63c <vTaskDelay+0x60>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00a      	beq.n	800b60c <vTaskDelay+0x30>
	__asm volatile
 800b5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fa:	f383 8811 	msr	BASEPRI, r3
 800b5fe:	f3bf 8f6f 	isb	sy
 800b602:	f3bf 8f4f 	dsb	sy
 800b606:	60bb      	str	r3, [r7, #8]
}
 800b608:	bf00      	nop
 800b60a:	e7fe      	b.n	800b60a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b60c:	f000 f880 	bl	800b710 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b610:	2100      	movs	r1, #0
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 fcea 	bl	800bfec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b618:	f000 f888 	bl	800b72c <xTaskResumeAll>
 800b61c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d107      	bne.n	800b634 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b624:	4b06      	ldr	r3, [pc, #24]	; (800b640 <vTaskDelay+0x64>)
 800b626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b62a:	601a      	str	r2, [r3, #0]
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b634:	bf00      	nop
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	20001614 	.word	0x20001614
 800b640:	e000ed04 	.word	0xe000ed04

0800b644 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b08a      	sub	sp, #40	; 0x28
 800b648:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b64a:	2300      	movs	r3, #0
 800b64c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b64e:	2300      	movs	r3, #0
 800b650:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b652:	463a      	mov	r2, r7
 800b654:	1d39      	adds	r1, r7, #4
 800b656:	f107 0308 	add.w	r3, r7, #8
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fe ff56 	bl	800a50c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68ba      	ldr	r2, [r7, #8]
 800b666:	9202      	str	r2, [sp, #8]
 800b668:	9301      	str	r3, [sp, #4]
 800b66a:	2300      	movs	r3, #0
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	2300      	movs	r3, #0
 800b670:	460a      	mov	r2, r1
 800b672:	4921      	ldr	r1, [pc, #132]	; (800b6f8 <vTaskStartScheduler+0xb4>)
 800b674:	4821      	ldr	r0, [pc, #132]	; (800b6fc <vTaskStartScheduler+0xb8>)
 800b676:	f7ff fe0f 	bl	800b298 <xTaskCreateStatic>
 800b67a:	4603      	mov	r3, r0
 800b67c:	4a20      	ldr	r2, [pc, #128]	; (800b700 <vTaskStartScheduler+0xbc>)
 800b67e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b680:	4b1f      	ldr	r3, [pc, #124]	; (800b700 <vTaskStartScheduler+0xbc>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b688:	2301      	movs	r3, #1
 800b68a:	617b      	str	r3, [r7, #20]
 800b68c:	e001      	b.n	800b692 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b68e:	2300      	movs	r3, #0
 800b690:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d102      	bne.n	800b69e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b698:	f000 fcfc 	bl	800c094 <xTimerCreateTimerTask>
 800b69c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d116      	bne.n	800b6d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	613b      	str	r3, [r7, #16]
}
 800b6b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b6b8:	4b12      	ldr	r3, [pc, #72]	; (800b704 <vTaskStartScheduler+0xc0>)
 800b6ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b6c0:	4b11      	ldr	r3, [pc, #68]	; (800b708 <vTaskStartScheduler+0xc4>)
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b6c6:	4b11      	ldr	r3, [pc, #68]	; (800b70c <vTaskStartScheduler+0xc8>)
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6cc:	f001 f8b8 	bl	800c840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6d0:	e00e      	b.n	800b6f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6d8:	d10a      	bne.n	800b6f0 <vTaskStartScheduler+0xac>
	__asm volatile
 800b6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6de:	f383 8811 	msr	BASEPRI, r3
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	60fb      	str	r3, [r7, #12]
}
 800b6ec:	bf00      	nop
 800b6ee:	e7fe      	b.n	800b6ee <vTaskStartScheduler+0xaa>
}
 800b6f0:	bf00      	nop
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	0800fdb4 	.word	0x0800fdb4
 800b6fc:	0800bd29 	.word	0x0800bd29
 800b700:	20001610 	.word	0x20001610
 800b704:	2000160c 	.word	0x2000160c
 800b708:	200015f8 	.word	0x200015f8
 800b70c:	200015f0 	.word	0x200015f0

0800b710 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b710:	b480      	push	{r7}
 800b712:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b714:	4b04      	ldr	r3, [pc, #16]	; (800b728 <vTaskSuspendAll+0x18>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	3301      	adds	r3, #1
 800b71a:	4a03      	ldr	r2, [pc, #12]	; (800b728 <vTaskSuspendAll+0x18>)
 800b71c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b71e:	bf00      	nop
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr
 800b728:	20001614 	.word	0x20001614

0800b72c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b732:	2300      	movs	r3, #0
 800b734:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b736:	2300      	movs	r3, #0
 800b738:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b73a:	4b42      	ldr	r3, [pc, #264]	; (800b844 <xTaskResumeAll+0x118>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10a      	bne.n	800b758 <xTaskResumeAll+0x2c>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b746:	f383 8811 	msr	BASEPRI, r3
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	603b      	str	r3, [r7, #0]
}
 800b754:	bf00      	nop
 800b756:	e7fe      	b.n	800b756 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b758:	f001 f914 	bl	800c984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b75c:	4b39      	ldr	r3, [pc, #228]	; (800b844 <xTaskResumeAll+0x118>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	3b01      	subs	r3, #1
 800b762:	4a38      	ldr	r2, [pc, #224]	; (800b844 <xTaskResumeAll+0x118>)
 800b764:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b766:	4b37      	ldr	r3, [pc, #220]	; (800b844 <xTaskResumeAll+0x118>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d162      	bne.n	800b834 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b76e:	4b36      	ldr	r3, [pc, #216]	; (800b848 <xTaskResumeAll+0x11c>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d05e      	beq.n	800b834 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b776:	e02f      	b.n	800b7d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b778:	4b34      	ldr	r3, [pc, #208]	; (800b84c <xTaskResumeAll+0x120>)
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	3318      	adds	r3, #24
 800b784:	4618      	mov	r0, r3
 800b786:	f7fe ff7f 	bl	800a688 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	3304      	adds	r3, #4
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fe ff7a 	bl	800a688 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b798:	4b2d      	ldr	r3, [pc, #180]	; (800b850 <xTaskResumeAll+0x124>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d903      	bls.n	800b7a8 <xTaskResumeAll+0x7c>
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a4:	4a2a      	ldr	r2, [pc, #168]	; (800b850 <xTaskResumeAll+0x124>)
 800b7a6:	6013      	str	r3, [r2, #0]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	4413      	add	r3, r2
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	4a27      	ldr	r2, [pc, #156]	; (800b854 <xTaskResumeAll+0x128>)
 800b7b6:	441a      	add	r2, r3
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	4619      	mov	r1, r3
 800b7be:	4610      	mov	r0, r2
 800b7c0:	f7fe ff05 	bl	800a5ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c8:	4b23      	ldr	r3, [pc, #140]	; (800b858 <xTaskResumeAll+0x12c>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d302      	bcc.n	800b7d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b7d2:	4b22      	ldr	r3, [pc, #136]	; (800b85c <xTaskResumeAll+0x130>)
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7d8:	4b1c      	ldr	r3, [pc, #112]	; (800b84c <xTaskResumeAll+0x120>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d1cb      	bne.n	800b778 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7e6:	f000 fb55 	bl	800be94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b7ea:	4b1d      	ldr	r3, [pc, #116]	; (800b860 <xTaskResumeAll+0x134>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d010      	beq.n	800b818 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7f6:	f000 f847 	bl	800b888 <xTaskIncrementTick>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b800:	4b16      	ldr	r3, [pc, #88]	; (800b85c <xTaskResumeAll+0x130>)
 800b802:	2201      	movs	r2, #1
 800b804:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	3b01      	subs	r3, #1
 800b80a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1f1      	bne.n	800b7f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b812:	4b13      	ldr	r3, [pc, #76]	; (800b860 <xTaskResumeAll+0x134>)
 800b814:	2200      	movs	r2, #0
 800b816:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b818:	4b10      	ldr	r3, [pc, #64]	; (800b85c <xTaskResumeAll+0x130>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d009      	beq.n	800b834 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b820:	2301      	movs	r3, #1
 800b822:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b824:	4b0f      	ldr	r3, [pc, #60]	; (800b864 <xTaskResumeAll+0x138>)
 800b826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82a:	601a      	str	r2, [r3, #0]
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b834:	f001 f8d6 	bl	800c9e4 <vPortExitCritical>

	return xAlreadyYielded;
 800b838:	68bb      	ldr	r3, [r7, #8]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	20001614 	.word	0x20001614
 800b848:	200015ec 	.word	0x200015ec
 800b84c:	200015ac 	.word	0x200015ac
 800b850:	200015f4 	.word	0x200015f4
 800b854:	2000111c 	.word	0x2000111c
 800b858:	20001118 	.word	0x20001118
 800b85c:	20001600 	.word	0x20001600
 800b860:	200015fc 	.word	0x200015fc
 800b864:	e000ed04 	.word	0xe000ed04

0800b868 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b86e:	4b05      	ldr	r3, [pc, #20]	; (800b884 <xTaskGetTickCount+0x1c>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b874:	687b      	ldr	r3, [r7, #4]
}
 800b876:	4618      	mov	r0, r3
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	200015f0 	.word	0x200015f0

0800b888 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b88e:	2300      	movs	r3, #0
 800b890:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b892:	4b4f      	ldr	r3, [pc, #316]	; (800b9d0 <xTaskIncrementTick+0x148>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	f040 808f 	bne.w	800b9ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b89c:	4b4d      	ldr	r3, [pc, #308]	; (800b9d4 <xTaskIncrementTick+0x14c>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b8a4:	4a4b      	ldr	r2, [pc, #300]	; (800b9d4 <xTaskIncrementTick+0x14c>)
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d120      	bne.n	800b8f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8b0:	4b49      	ldr	r3, [pc, #292]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00a      	beq.n	800b8d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	603b      	str	r3, [r7, #0]
}
 800b8cc:	bf00      	nop
 800b8ce:	e7fe      	b.n	800b8ce <xTaskIncrementTick+0x46>
 800b8d0:	4b41      	ldr	r3, [pc, #260]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	60fb      	str	r3, [r7, #12]
 800b8d6:	4b41      	ldr	r3, [pc, #260]	; (800b9dc <xTaskIncrementTick+0x154>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a3f      	ldr	r2, [pc, #252]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b8dc:	6013      	str	r3, [r2, #0]
 800b8de:	4a3f      	ldr	r2, [pc, #252]	; (800b9dc <xTaskIncrementTick+0x154>)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	4b3e      	ldr	r3, [pc, #248]	; (800b9e0 <xTaskIncrementTick+0x158>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	4a3d      	ldr	r2, [pc, #244]	; (800b9e0 <xTaskIncrementTick+0x158>)
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	f000 fad1 	bl	800be94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8f2:	4b3c      	ldr	r3, [pc, #240]	; (800b9e4 <xTaskIncrementTick+0x15c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	693a      	ldr	r2, [r7, #16]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d349      	bcc.n	800b990 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8fc:	4b36      	ldr	r3, [pc, #216]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d104      	bne.n	800b910 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b906:	4b37      	ldr	r3, [pc, #220]	; (800b9e4 <xTaskIncrementTick+0x15c>)
 800b908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b90c:	601a      	str	r2, [r3, #0]
					break;
 800b90e:	e03f      	b.n	800b990 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b910:	4b31      	ldr	r3, [pc, #196]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	429a      	cmp	r2, r3
 800b926:	d203      	bcs.n	800b930 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b928:	4a2e      	ldr	r2, [pc, #184]	; (800b9e4 <xTaskIncrementTick+0x15c>)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b92e:	e02f      	b.n	800b990 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	3304      	adds	r3, #4
 800b934:	4618      	mov	r0, r3
 800b936:	f7fe fea7 	bl	800a688 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d004      	beq.n	800b94c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	3318      	adds	r3, #24
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe fe9e 	bl	800a688 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b950:	4b25      	ldr	r3, [pc, #148]	; (800b9e8 <xTaskIncrementTick+0x160>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	429a      	cmp	r2, r3
 800b956:	d903      	bls.n	800b960 <xTaskIncrementTick+0xd8>
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95c:	4a22      	ldr	r2, [pc, #136]	; (800b9e8 <xTaskIncrementTick+0x160>)
 800b95e:	6013      	str	r3, [r2, #0]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b964:	4613      	mov	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	4413      	add	r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	4a1f      	ldr	r2, [pc, #124]	; (800b9ec <xTaskIncrementTick+0x164>)
 800b96e:	441a      	add	r2, r3
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	3304      	adds	r3, #4
 800b974:	4619      	mov	r1, r3
 800b976:	4610      	mov	r0, r2
 800b978:	f7fe fe29 	bl	800a5ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b980:	4b1b      	ldr	r3, [pc, #108]	; (800b9f0 <xTaskIncrementTick+0x168>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b986:	429a      	cmp	r2, r3
 800b988:	d3b8      	bcc.n	800b8fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b98a:	2301      	movs	r3, #1
 800b98c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b98e:	e7b5      	b.n	800b8fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b990:	4b17      	ldr	r3, [pc, #92]	; (800b9f0 <xTaskIncrementTick+0x168>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b996:	4915      	ldr	r1, [pc, #84]	; (800b9ec <xTaskIncrementTick+0x164>)
 800b998:	4613      	mov	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	4413      	add	r3, r2
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	440b      	add	r3, r1
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d901      	bls.n	800b9ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b9ac:	4b11      	ldr	r3, [pc, #68]	; (800b9f4 <xTaskIncrementTick+0x16c>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d007      	beq.n	800b9c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	617b      	str	r3, [r7, #20]
 800b9b8:	e004      	b.n	800b9c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b9ba:	4b0f      	ldr	r3, [pc, #60]	; (800b9f8 <xTaskIncrementTick+0x170>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	4a0d      	ldr	r2, [pc, #52]	; (800b9f8 <xTaskIncrementTick+0x170>)
 800b9c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b9c4:	697b      	ldr	r3, [r7, #20]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3718      	adds	r7, #24
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	20001614 	.word	0x20001614
 800b9d4:	200015f0 	.word	0x200015f0
 800b9d8:	200015a4 	.word	0x200015a4
 800b9dc:	200015a8 	.word	0x200015a8
 800b9e0:	20001604 	.word	0x20001604
 800b9e4:	2000160c 	.word	0x2000160c
 800b9e8:	200015f4 	.word	0x200015f4
 800b9ec:	2000111c 	.word	0x2000111c
 800b9f0:	20001118 	.word	0x20001118
 800b9f4:	20001600 	.word	0x20001600
 800b9f8:	200015fc 	.word	0x200015fc

0800b9fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba02:	4b28      	ldr	r3, [pc, #160]	; (800baa4 <vTaskSwitchContext+0xa8>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d003      	beq.n	800ba12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba0a:	4b27      	ldr	r3, [pc, #156]	; (800baa8 <vTaskSwitchContext+0xac>)
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba10:	e041      	b.n	800ba96 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ba12:	4b25      	ldr	r3, [pc, #148]	; (800baa8 <vTaskSwitchContext+0xac>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba18:	4b24      	ldr	r3, [pc, #144]	; (800baac <vTaskSwitchContext+0xb0>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	60fb      	str	r3, [r7, #12]
 800ba1e:	e010      	b.n	800ba42 <vTaskSwitchContext+0x46>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10a      	bne.n	800ba3c <vTaskSwitchContext+0x40>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	607b      	str	r3, [r7, #4]
}
 800ba38:	bf00      	nop
 800ba3a:	e7fe      	b.n	800ba3a <vTaskSwitchContext+0x3e>
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	60fb      	str	r3, [r7, #12]
 800ba42:	491b      	ldr	r1, [pc, #108]	; (800bab0 <vTaskSwitchContext+0xb4>)
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	4613      	mov	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4413      	add	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	440b      	add	r3, r1
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d0e4      	beq.n	800ba20 <vTaskSwitchContext+0x24>
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	4613      	mov	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	4413      	add	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4a13      	ldr	r2, [pc, #76]	; (800bab0 <vTaskSwitchContext+0xb4>)
 800ba62:	4413      	add	r3, r2
 800ba64:	60bb      	str	r3, [r7, #8]
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	605a      	str	r2, [r3, #4]
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	685a      	ldr	r2, [r3, #4]
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	3308      	adds	r3, #8
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d104      	bne.n	800ba86 <vTaskSwitchContext+0x8a>
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	685a      	ldr	r2, [r3, #4]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	605a      	str	r2, [r3, #4]
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	4a09      	ldr	r2, [pc, #36]	; (800bab4 <vTaskSwitchContext+0xb8>)
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	4a06      	ldr	r2, [pc, #24]	; (800baac <vTaskSwitchContext+0xb0>)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6013      	str	r3, [r2, #0]
}
 800ba96:	bf00      	nop
 800ba98:	3714      	adds	r7, #20
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	20001614 	.word	0x20001614
 800baa8:	20001600 	.word	0x20001600
 800baac:	200015f4 	.word	0x200015f4
 800bab0:	2000111c 	.word	0x2000111c
 800bab4:	20001118 	.word	0x20001118

0800bab8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	60fb      	str	r3, [r7, #12]
}
 800bada:	bf00      	nop
 800badc:	e7fe      	b.n	800badc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bade:	4b07      	ldr	r3, [pc, #28]	; (800bafc <vTaskPlaceOnEventList+0x44>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	3318      	adds	r3, #24
 800bae4:	4619      	mov	r1, r3
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7fe fd95 	bl	800a616 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800baec:	2101      	movs	r1, #1
 800baee:	6838      	ldr	r0, [r7, #0]
 800baf0:	f000 fa7c 	bl	800bfec <prvAddCurrentTaskToDelayedList>
}
 800baf4:	bf00      	nop
 800baf6:	3710      	adds	r7, #16
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	20001118 	.word	0x20001118

0800bb00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10a      	bne.n	800bb28 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb16:	f383 8811 	msr	BASEPRI, r3
 800bb1a:	f3bf 8f6f 	isb	sy
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	617b      	str	r3, [r7, #20]
}
 800bb24:	bf00      	nop
 800bb26:	e7fe      	b.n	800bb26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb28:	4b0a      	ldr	r3, [pc, #40]	; (800bb54 <vTaskPlaceOnEventListRestricted+0x54>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	3318      	adds	r3, #24
 800bb2e:	4619      	mov	r1, r3
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f7fe fd4c 	bl	800a5ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bb3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb40:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb42:	6879      	ldr	r1, [r7, #4]
 800bb44:	68b8      	ldr	r0, [r7, #8]
 800bb46:	f000 fa51 	bl	800bfec <prvAddCurrentTaskToDelayedList>
	}
 800bb4a:	bf00      	nop
 800bb4c:	3718      	adds	r7, #24
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	20001118 	.word	0x20001118

0800bb58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10a      	bne.n	800bb84 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	60fb      	str	r3, [r7, #12]
}
 800bb80:	bf00      	nop
 800bb82:	e7fe      	b.n	800bb82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	3318      	adds	r3, #24
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fe fd7d 	bl	800a688 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb8e:	4b1e      	ldr	r3, [pc, #120]	; (800bc08 <xTaskRemoveFromEventList+0xb0>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d11d      	bne.n	800bbd2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	3304      	adds	r3, #4
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fe fd74 	bl	800a688 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba4:	4b19      	ldr	r3, [pc, #100]	; (800bc0c <xTaskRemoveFromEventList+0xb4>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d903      	bls.n	800bbb4 <xTaskRemoveFromEventList+0x5c>
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb0:	4a16      	ldr	r2, [pc, #88]	; (800bc0c <xTaskRemoveFromEventList+0xb4>)
 800bbb2:	6013      	str	r3, [r2, #0]
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb8:	4613      	mov	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	4413      	add	r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	4a13      	ldr	r2, [pc, #76]	; (800bc10 <xTaskRemoveFromEventList+0xb8>)
 800bbc2:	441a      	add	r2, r3
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4610      	mov	r0, r2
 800bbcc:	f7fe fcff 	bl	800a5ce <vListInsertEnd>
 800bbd0:	e005      	b.n	800bbde <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	3318      	adds	r3, #24
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	480e      	ldr	r0, [pc, #56]	; (800bc14 <xTaskRemoveFromEventList+0xbc>)
 800bbda:	f7fe fcf8 	bl	800a5ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe2:	4b0d      	ldr	r3, [pc, #52]	; (800bc18 <xTaskRemoveFromEventList+0xc0>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d905      	bls.n	800bbf8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbec:	2301      	movs	r3, #1
 800bbee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbf0:	4b0a      	ldr	r3, [pc, #40]	; (800bc1c <xTaskRemoveFromEventList+0xc4>)
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	601a      	str	r2, [r3, #0]
 800bbf6:	e001      	b.n	800bbfc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bbfc:	697b      	ldr	r3, [r7, #20]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3718      	adds	r7, #24
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	20001614 	.word	0x20001614
 800bc0c:	200015f4 	.word	0x200015f4
 800bc10:	2000111c 	.word	0x2000111c
 800bc14:	200015ac 	.word	0x200015ac
 800bc18:	20001118 	.word	0x20001118
 800bc1c:	20001600 	.word	0x20001600

0800bc20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc28:	4b06      	ldr	r3, [pc, #24]	; (800bc44 <vTaskInternalSetTimeOutState+0x24>)
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc30:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <vTaskInternalSetTimeOutState+0x28>)
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	605a      	str	r2, [r3, #4]
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	20001604 	.word	0x20001604
 800bc48:	200015f0 	.word	0x200015f0

0800bc4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b088      	sub	sp, #32
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10a      	bne.n	800bc72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	613b      	str	r3, [r7, #16]
}
 800bc6e:	bf00      	nop
 800bc70:	e7fe      	b.n	800bc70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10a      	bne.n	800bc8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	60fb      	str	r3, [r7, #12]
}
 800bc8a:	bf00      	nop
 800bc8c:	e7fe      	b.n	800bc8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc8e:	f000 fe79 	bl	800c984 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc92:	4b1d      	ldr	r3, [pc, #116]	; (800bd08 <xTaskCheckForTimeOut+0xbc>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	69ba      	ldr	r2, [r7, #24]
 800bc9e:	1ad3      	subs	r3, r2, r3
 800bca0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcaa:	d102      	bne.n	800bcb2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bcac:	2300      	movs	r3, #0
 800bcae:	61fb      	str	r3, [r7, #28]
 800bcb0:	e023      	b.n	800bcfa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	4b15      	ldr	r3, [pc, #84]	; (800bd0c <xTaskCheckForTimeOut+0xc0>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d007      	beq.n	800bcce <xTaskCheckForTimeOut+0x82>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	69ba      	ldr	r2, [r7, #24]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d302      	bcc.n	800bcce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	61fb      	str	r3, [r7, #28]
 800bccc:	e015      	b.n	800bcfa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d20b      	bcs.n	800bcf0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	1ad2      	subs	r2, r2, r3
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f7ff ff9b 	bl	800bc20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bcea:	2300      	movs	r3, #0
 800bcec:	61fb      	str	r3, [r7, #28]
 800bcee:	e004      	b.n	800bcfa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcfa:	f000 fe73 	bl	800c9e4 <vPortExitCritical>

	return xReturn;
 800bcfe:	69fb      	ldr	r3, [r7, #28]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3720      	adds	r7, #32
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	200015f0 	.word	0x200015f0
 800bd0c:	20001604 	.word	0x20001604

0800bd10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd10:	b480      	push	{r7}
 800bd12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd14:	4b03      	ldr	r3, [pc, #12]	; (800bd24 <vTaskMissedYield+0x14>)
 800bd16:	2201      	movs	r2, #1
 800bd18:	601a      	str	r2, [r3, #0]
}
 800bd1a:	bf00      	nop
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr
 800bd24:	20001600 	.word	0x20001600

0800bd28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd30:	f000 f852 	bl	800bdd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd34:	4b06      	ldr	r3, [pc, #24]	; (800bd50 <prvIdleTask+0x28>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d9f9      	bls.n	800bd30 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd3c:	4b05      	ldr	r3, [pc, #20]	; (800bd54 <prvIdleTask+0x2c>)
 800bd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd4c:	e7f0      	b.n	800bd30 <prvIdleTask+0x8>
 800bd4e:	bf00      	nop
 800bd50:	2000111c 	.word	0x2000111c
 800bd54:	e000ed04 	.word	0xe000ed04

0800bd58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd5e:	2300      	movs	r3, #0
 800bd60:	607b      	str	r3, [r7, #4]
 800bd62:	e00c      	b.n	800bd7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	4613      	mov	r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	4413      	add	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4a12      	ldr	r2, [pc, #72]	; (800bdb8 <prvInitialiseTaskLists+0x60>)
 800bd70:	4413      	add	r3, r2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fe fbfe 	bl	800a574 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	607b      	str	r3, [r7, #4]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2b37      	cmp	r3, #55	; 0x37
 800bd82:	d9ef      	bls.n	800bd64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd84:	480d      	ldr	r0, [pc, #52]	; (800bdbc <prvInitialiseTaskLists+0x64>)
 800bd86:	f7fe fbf5 	bl	800a574 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd8a:	480d      	ldr	r0, [pc, #52]	; (800bdc0 <prvInitialiseTaskLists+0x68>)
 800bd8c:	f7fe fbf2 	bl	800a574 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd90:	480c      	ldr	r0, [pc, #48]	; (800bdc4 <prvInitialiseTaskLists+0x6c>)
 800bd92:	f7fe fbef 	bl	800a574 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd96:	480c      	ldr	r0, [pc, #48]	; (800bdc8 <prvInitialiseTaskLists+0x70>)
 800bd98:	f7fe fbec 	bl	800a574 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd9c:	480b      	ldr	r0, [pc, #44]	; (800bdcc <prvInitialiseTaskLists+0x74>)
 800bd9e:	f7fe fbe9 	bl	800a574 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bda2:	4b0b      	ldr	r3, [pc, #44]	; (800bdd0 <prvInitialiseTaskLists+0x78>)
 800bda4:	4a05      	ldr	r2, [pc, #20]	; (800bdbc <prvInitialiseTaskLists+0x64>)
 800bda6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bda8:	4b0a      	ldr	r3, [pc, #40]	; (800bdd4 <prvInitialiseTaskLists+0x7c>)
 800bdaa:	4a05      	ldr	r2, [pc, #20]	; (800bdc0 <prvInitialiseTaskLists+0x68>)
 800bdac:	601a      	str	r2, [r3, #0]
}
 800bdae:	bf00      	nop
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	2000111c 	.word	0x2000111c
 800bdbc:	2000157c 	.word	0x2000157c
 800bdc0:	20001590 	.word	0x20001590
 800bdc4:	200015ac 	.word	0x200015ac
 800bdc8:	200015c0 	.word	0x200015c0
 800bdcc:	200015d8 	.word	0x200015d8
 800bdd0:	200015a4 	.word	0x200015a4
 800bdd4:	200015a8 	.word	0x200015a8

0800bdd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdde:	e019      	b.n	800be14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bde0:	f000 fdd0 	bl	800c984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bde4:	4b10      	ldr	r3, [pc, #64]	; (800be28 <prvCheckTasksWaitingTermination+0x50>)
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7fe fc49 	bl	800a688 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdf6:	4b0d      	ldr	r3, [pc, #52]	; (800be2c <prvCheckTasksWaitingTermination+0x54>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	4a0b      	ldr	r2, [pc, #44]	; (800be2c <prvCheckTasksWaitingTermination+0x54>)
 800bdfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be00:	4b0b      	ldr	r3, [pc, #44]	; (800be30 <prvCheckTasksWaitingTermination+0x58>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	3b01      	subs	r3, #1
 800be06:	4a0a      	ldr	r2, [pc, #40]	; (800be30 <prvCheckTasksWaitingTermination+0x58>)
 800be08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be0a:	f000 fdeb 	bl	800c9e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 f810 	bl	800be34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be14:	4b06      	ldr	r3, [pc, #24]	; (800be30 <prvCheckTasksWaitingTermination+0x58>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1e1      	bne.n	800bde0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be1c:	bf00      	nop
 800be1e:	bf00      	nop
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	200015c0 	.word	0x200015c0
 800be2c:	200015ec 	.word	0x200015ec
 800be30:	200015d4 	.word	0x200015d4

0800be34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be42:	2b00      	cmp	r3, #0
 800be44:	d108      	bne.n	800be58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be4a:	4618      	mov	r0, r3
 800be4c:	f000 ff88 	bl	800cd60 <vPortFree>
				vPortFree( pxTCB );
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 ff85 	bl	800cd60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be56:	e018      	b.n	800be8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d103      	bne.n	800be6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 ff7c 	bl	800cd60 <vPortFree>
	}
 800be68:	e00f      	b.n	800be8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be70:	2b02      	cmp	r3, #2
 800be72:	d00a      	beq.n	800be8a <prvDeleteTCB+0x56>
	__asm volatile
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	60fb      	str	r3, [r7, #12]
}
 800be86:	bf00      	nop
 800be88:	e7fe      	b.n	800be88 <prvDeleteTCB+0x54>
	}
 800be8a:	bf00      	nop
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
	...

0800be94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be9a:	4b0c      	ldr	r3, [pc, #48]	; (800becc <prvResetNextTaskUnblockTime+0x38>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d104      	bne.n	800beae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bea4:	4b0a      	ldr	r3, [pc, #40]	; (800bed0 <prvResetNextTaskUnblockTime+0x3c>)
 800bea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800beaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800beac:	e008      	b.n	800bec0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beae:	4b07      	ldr	r3, [pc, #28]	; (800becc <prvResetNextTaskUnblockTime+0x38>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	4a04      	ldr	r2, [pc, #16]	; (800bed0 <prvResetNextTaskUnblockTime+0x3c>)
 800bebe:	6013      	str	r3, [r2, #0]
}
 800bec0:	bf00      	nop
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr
 800becc:	200015a4 	.word	0x200015a4
 800bed0:	2000160c 	.word	0x2000160c

0800bed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800beda:	4b0b      	ldr	r3, [pc, #44]	; (800bf08 <xTaskGetSchedulerState+0x34>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d102      	bne.n	800bee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bee2:	2301      	movs	r3, #1
 800bee4:	607b      	str	r3, [r7, #4]
 800bee6:	e008      	b.n	800befa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bee8:	4b08      	ldr	r3, [pc, #32]	; (800bf0c <xTaskGetSchedulerState+0x38>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d102      	bne.n	800bef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bef0:	2302      	movs	r3, #2
 800bef2:	607b      	str	r3, [r7, #4]
 800bef4:	e001      	b.n	800befa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bef6:	2300      	movs	r3, #0
 800bef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800befa:	687b      	ldr	r3, [r7, #4]
	}
 800befc:	4618      	mov	r0, r3
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr
 800bf08:	200015f8 	.word	0x200015f8
 800bf0c:	20001614 	.word	0x20001614

0800bf10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d056      	beq.n	800bfd4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bf26:	4b2e      	ldr	r3, [pc, #184]	; (800bfe0 <xTaskPriorityDisinherit+0xd0>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	693a      	ldr	r2, [r7, #16]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d00a      	beq.n	800bf46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf34:	f383 8811 	msr	BASEPRI, r3
 800bf38:	f3bf 8f6f 	isb	sy
 800bf3c:	f3bf 8f4f 	dsb	sy
 800bf40:	60fb      	str	r3, [r7, #12]
}
 800bf42:	bf00      	nop
 800bf44:	e7fe      	b.n	800bf44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10a      	bne.n	800bf64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf52:	f383 8811 	msr	BASEPRI, r3
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	60bb      	str	r3, [r7, #8]
}
 800bf60:	bf00      	nop
 800bf62:	e7fe      	b.n	800bf62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf68:	1e5a      	subs	r2, r3, #1
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d02c      	beq.n	800bfd4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d128      	bne.n	800bfd4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	3304      	adds	r3, #4
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7fe fb7e 	bl	800a688 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa4:	4b0f      	ldr	r3, [pc, #60]	; (800bfe4 <xTaskPriorityDisinherit+0xd4>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d903      	bls.n	800bfb4 <xTaskPriorityDisinherit+0xa4>
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb0:	4a0c      	ldr	r2, [pc, #48]	; (800bfe4 <xTaskPriorityDisinherit+0xd4>)
 800bfb2:	6013      	str	r3, [r2, #0]
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb8:	4613      	mov	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4a09      	ldr	r2, [pc, #36]	; (800bfe8 <xTaskPriorityDisinherit+0xd8>)
 800bfc2:	441a      	add	r2, r3
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	4619      	mov	r1, r3
 800bfca:	4610      	mov	r0, r2
 800bfcc:	f7fe faff 	bl	800a5ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfd4:	697b      	ldr	r3, [r7, #20]
	}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	20001118 	.word	0x20001118
 800bfe4:	200015f4 	.word	0x200015f4
 800bfe8:	2000111c 	.word	0x2000111c

0800bfec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bff6:	4b21      	ldr	r3, [pc, #132]	; (800c07c <prvAddCurrentTaskToDelayedList+0x90>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bffc:	4b20      	ldr	r3, [pc, #128]	; (800c080 <prvAddCurrentTaskToDelayedList+0x94>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	3304      	adds	r3, #4
 800c002:	4618      	mov	r0, r3
 800c004:	f7fe fb40 	bl	800a688 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c00e:	d10a      	bne.n	800c026 <prvAddCurrentTaskToDelayedList+0x3a>
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d007      	beq.n	800c026 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c016:	4b1a      	ldr	r3, [pc, #104]	; (800c080 <prvAddCurrentTaskToDelayedList+0x94>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	3304      	adds	r3, #4
 800c01c:	4619      	mov	r1, r3
 800c01e:	4819      	ldr	r0, [pc, #100]	; (800c084 <prvAddCurrentTaskToDelayedList+0x98>)
 800c020:	f7fe fad5 	bl	800a5ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c024:	e026      	b.n	800c074 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	4413      	add	r3, r2
 800c02c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c02e:	4b14      	ldr	r3, [pc, #80]	; (800c080 <prvAddCurrentTaskToDelayedList+0x94>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d209      	bcs.n	800c052 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c03e:	4b12      	ldr	r3, [pc, #72]	; (800c088 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	4b0f      	ldr	r3, [pc, #60]	; (800c080 <prvAddCurrentTaskToDelayedList+0x94>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	3304      	adds	r3, #4
 800c048:	4619      	mov	r1, r3
 800c04a:	4610      	mov	r0, r2
 800c04c:	f7fe fae3 	bl	800a616 <vListInsert>
}
 800c050:	e010      	b.n	800c074 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c052:	4b0e      	ldr	r3, [pc, #56]	; (800c08c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	4b0a      	ldr	r3, [pc, #40]	; (800c080 <prvAddCurrentTaskToDelayedList+0x94>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	3304      	adds	r3, #4
 800c05c:	4619      	mov	r1, r3
 800c05e:	4610      	mov	r0, r2
 800c060:	f7fe fad9 	bl	800a616 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c064:	4b0a      	ldr	r3, [pc, #40]	; (800c090 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d202      	bcs.n	800c074 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c06e:	4a08      	ldr	r2, [pc, #32]	; (800c090 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	6013      	str	r3, [r2, #0]
}
 800c074:	bf00      	nop
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	200015f0 	.word	0x200015f0
 800c080:	20001118 	.word	0x20001118
 800c084:	200015d8 	.word	0x200015d8
 800c088:	200015a8 	.word	0x200015a8
 800c08c:	200015a4 	.word	0x200015a4
 800c090:	2000160c 	.word	0x2000160c

0800c094 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b08a      	sub	sp, #40	; 0x28
 800c098:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c09e:	f000 fb07 	bl	800c6b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c0a2:	4b1c      	ldr	r3, [pc, #112]	; (800c114 <xTimerCreateTimerTask+0x80>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d021      	beq.n	800c0ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c0b2:	1d3a      	adds	r2, r7, #4
 800c0b4:	f107 0108 	add.w	r1, r7, #8
 800c0b8:	f107 030c 	add.w	r3, r7, #12
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fe fa3f 	bl	800a540 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c0c2:	6879      	ldr	r1, [r7, #4]
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	9202      	str	r2, [sp, #8]
 800c0ca:	9301      	str	r3, [sp, #4]
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	460a      	mov	r2, r1
 800c0d4:	4910      	ldr	r1, [pc, #64]	; (800c118 <xTimerCreateTimerTask+0x84>)
 800c0d6:	4811      	ldr	r0, [pc, #68]	; (800c11c <xTimerCreateTimerTask+0x88>)
 800c0d8:	f7ff f8de 	bl	800b298 <xTaskCreateStatic>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	4a10      	ldr	r2, [pc, #64]	; (800c120 <xTimerCreateTimerTask+0x8c>)
 800c0e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c0e2:	4b0f      	ldr	r3, [pc, #60]	; (800c120 <xTimerCreateTimerTask+0x8c>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d001      	beq.n	800c0ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10a      	bne.n	800c10a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	613b      	str	r3, [r7, #16]
}
 800c106:	bf00      	nop
 800c108:	e7fe      	b.n	800c108 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c10a:	697b      	ldr	r3, [r7, #20]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	20001648 	.word	0x20001648
 800c118:	0800fdbc 	.word	0x0800fdbc
 800c11c:	0800c259 	.word	0x0800c259
 800c120:	2000164c 	.word	0x2000164c

0800c124 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b08a      	sub	sp, #40	; 0x28
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
 800c130:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c132:	2300      	movs	r3, #0
 800c134:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d10a      	bne.n	800c152 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c140:	f383 8811 	msr	BASEPRI, r3
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	623b      	str	r3, [r7, #32]
}
 800c14e:	bf00      	nop
 800c150:	e7fe      	b.n	800c150 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c152:	4b1a      	ldr	r3, [pc, #104]	; (800c1bc <xTimerGenericCommand+0x98>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d02a      	beq.n	800c1b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	2b05      	cmp	r3, #5
 800c16a:	dc18      	bgt.n	800c19e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c16c:	f7ff feb2 	bl	800bed4 <xTaskGetSchedulerState>
 800c170:	4603      	mov	r3, r0
 800c172:	2b02      	cmp	r3, #2
 800c174:	d109      	bne.n	800c18a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c176:	4b11      	ldr	r3, [pc, #68]	; (800c1bc <xTimerGenericCommand+0x98>)
 800c178:	6818      	ldr	r0, [r3, #0]
 800c17a:	f107 0110 	add.w	r1, r7, #16
 800c17e:	2300      	movs	r3, #0
 800c180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c182:	f7fe fc53 	bl	800aa2c <xQueueGenericSend>
 800c186:	6278      	str	r0, [r7, #36]	; 0x24
 800c188:	e012      	b.n	800c1b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c18a:	4b0c      	ldr	r3, [pc, #48]	; (800c1bc <xTimerGenericCommand+0x98>)
 800c18c:	6818      	ldr	r0, [r3, #0]
 800c18e:	f107 0110 	add.w	r1, r7, #16
 800c192:	2300      	movs	r3, #0
 800c194:	2200      	movs	r2, #0
 800c196:	f7fe fc49 	bl	800aa2c <xQueueGenericSend>
 800c19a:	6278      	str	r0, [r7, #36]	; 0x24
 800c19c:	e008      	b.n	800c1b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c19e:	4b07      	ldr	r3, [pc, #28]	; (800c1bc <xTimerGenericCommand+0x98>)
 800c1a0:	6818      	ldr	r0, [r3, #0]
 800c1a2:	f107 0110 	add.w	r1, r7, #16
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	683a      	ldr	r2, [r7, #0]
 800c1aa:	f7fe fd3d 	bl	800ac28 <xQueueGenericSendFromISR>
 800c1ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3728      	adds	r7, #40	; 0x28
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20001648 	.word	0x20001648

0800c1c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b088      	sub	sp, #32
 800c1c4:	af02      	add	r7, sp, #8
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ca:	4b22      	ldr	r3, [pc, #136]	; (800c254 <prvProcessExpiredTimer+0x94>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fe fa55 	bl	800a688 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1e4:	f003 0304 	and.w	r3, r3, #4
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d022      	beq.n	800c232 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	699a      	ldr	r2, [r3, #24]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	18d1      	adds	r1, r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	6978      	ldr	r0, [r7, #20]
 800c1fa:	f000 f8d1 	bl	800c3a0 <prvInsertTimerInActiveList>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d01f      	beq.n	800c244 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c204:	2300      	movs	r3, #0
 800c206:	9300      	str	r3, [sp, #0]
 800c208:	2300      	movs	r3, #0
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	2100      	movs	r1, #0
 800c20e:	6978      	ldr	r0, [r7, #20]
 800c210:	f7ff ff88 	bl	800c124 <xTimerGenericCommand>
 800c214:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d113      	bne.n	800c244 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c220:	f383 8811 	msr	BASEPRI, r3
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	f3bf 8f4f 	dsb	sy
 800c22c:	60fb      	str	r3, [r7, #12]
}
 800c22e:	bf00      	nop
 800c230:	e7fe      	b.n	800c230 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c238:	f023 0301 	bic.w	r3, r3, #1
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	6a1b      	ldr	r3, [r3, #32]
 800c248:	6978      	ldr	r0, [r7, #20]
 800c24a:	4798      	blx	r3
}
 800c24c:	bf00      	nop
 800c24e:	3718      	adds	r7, #24
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	20001640 	.word	0x20001640

0800c258 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c260:	f107 0308 	add.w	r3, r7, #8
 800c264:	4618      	mov	r0, r3
 800c266:	f000 f857 	bl	800c318 <prvGetNextExpireTime>
 800c26a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	4619      	mov	r1, r3
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f000 f803 	bl	800c27c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c276:	f000 f8d5 	bl	800c424 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c27a:	e7f1      	b.n	800c260 <prvTimerTask+0x8>

0800c27c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c286:	f7ff fa43 	bl	800b710 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c28a:	f107 0308 	add.w	r3, r7, #8
 800c28e:	4618      	mov	r0, r3
 800c290:	f000 f866 	bl	800c360 <prvSampleTimeNow>
 800c294:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d130      	bne.n	800c2fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10a      	bne.n	800c2b8 <prvProcessTimerOrBlockTask+0x3c>
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d806      	bhi.n	800c2b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c2aa:	f7ff fa3f 	bl	800b72c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c2ae:	68f9      	ldr	r1, [r7, #12]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7ff ff85 	bl	800c1c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2b6:	e024      	b.n	800c302 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d008      	beq.n	800c2d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2be:	4b13      	ldr	r3, [pc, #76]	; (800c30c <prvProcessTimerOrBlockTask+0x90>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <prvProcessTimerOrBlockTask+0x50>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e000      	b.n	800c2ce <prvProcessTimerOrBlockTask+0x52>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2d0:	4b0f      	ldr	r3, [pc, #60]	; (800c310 <prvProcessTimerOrBlockTask+0x94>)
 800c2d2:	6818      	ldr	r0, [r3, #0]
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	1ad3      	subs	r3, r2, r3
 800c2da:	683a      	ldr	r2, [r7, #0]
 800c2dc:	4619      	mov	r1, r3
 800c2de:	f7fe ffa7 	bl	800b230 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c2e2:	f7ff fa23 	bl	800b72c <xTaskResumeAll>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d10a      	bne.n	800c302 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c2ec:	4b09      	ldr	r3, [pc, #36]	; (800c314 <prvProcessTimerOrBlockTask+0x98>)
 800c2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2f2:	601a      	str	r2, [r3, #0]
 800c2f4:	f3bf 8f4f 	dsb	sy
 800c2f8:	f3bf 8f6f 	isb	sy
}
 800c2fc:	e001      	b.n	800c302 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c2fe:	f7ff fa15 	bl	800b72c <xTaskResumeAll>
}
 800c302:	bf00      	nop
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	20001644 	.word	0x20001644
 800c310:	20001648 	.word	0x20001648
 800c314:	e000ed04 	.word	0xe000ed04

0800c318 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c320:	4b0e      	ldr	r3, [pc, #56]	; (800c35c <prvGetNextExpireTime+0x44>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d101      	bne.n	800c32e <prvGetNextExpireTime+0x16>
 800c32a:	2201      	movs	r2, #1
 800c32c:	e000      	b.n	800c330 <prvGetNextExpireTime+0x18>
 800c32e:	2200      	movs	r2, #0
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d105      	bne.n	800c348 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c33c:	4b07      	ldr	r3, [pc, #28]	; (800c35c <prvGetNextExpireTime+0x44>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	60fb      	str	r3, [r7, #12]
 800c346:	e001      	b.n	800c34c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c348:	2300      	movs	r3, #0
 800c34a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c34c:	68fb      	ldr	r3, [r7, #12]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3714      	adds	r7, #20
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop
 800c35c:	20001640 	.word	0x20001640

0800c360 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c368:	f7ff fa7e 	bl	800b868 <xTaskGetTickCount>
 800c36c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c36e:	4b0b      	ldr	r3, [pc, #44]	; (800c39c <prvSampleTimeNow+0x3c>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	429a      	cmp	r2, r3
 800c376:	d205      	bcs.n	800c384 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c378:	f000 f936 	bl	800c5e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2201      	movs	r2, #1
 800c380:	601a      	str	r2, [r3, #0]
 800c382:	e002      	b.n	800c38a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c38a:	4a04      	ldr	r2, [pc, #16]	; (800c39c <prvSampleTimeNow+0x3c>)
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c390:	68fb      	ldr	r3, [r7, #12]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	20001650 	.word	0x20001650

0800c3a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b086      	sub	sp, #24
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
 800c3ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d812      	bhi.n	800c3ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	1ad2      	subs	r2, r2, r3
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d302      	bcc.n	800c3da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	617b      	str	r3, [r7, #20]
 800c3d8:	e01b      	b.n	800c412 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c3da:	4b10      	ldr	r3, [pc, #64]	; (800c41c <prvInsertTimerInActiveList+0x7c>)
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	3304      	adds	r3, #4
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	4610      	mov	r0, r2
 800c3e6:	f7fe f916 	bl	800a616 <vListInsert>
 800c3ea:	e012      	b.n	800c412 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d206      	bcs.n	800c402 <prvInsertTimerInActiveList+0x62>
 800c3f4:	68ba      	ldr	r2, [r7, #8]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d302      	bcc.n	800c402 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	617b      	str	r3, [r7, #20]
 800c400:	e007      	b.n	800c412 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c402:	4b07      	ldr	r3, [pc, #28]	; (800c420 <prvInsertTimerInActiveList+0x80>)
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	3304      	adds	r3, #4
 800c40a:	4619      	mov	r1, r3
 800c40c:	4610      	mov	r0, r2
 800c40e:	f7fe f902 	bl	800a616 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c412:	697b      	ldr	r3, [r7, #20]
}
 800c414:	4618      	mov	r0, r3
 800c416:	3718      	adds	r7, #24
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	20001644 	.word	0x20001644
 800c420:	20001640 	.word	0x20001640

0800c424 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b08e      	sub	sp, #56	; 0x38
 800c428:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c42a:	e0ca      	b.n	800c5c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	da18      	bge.n	800c464 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c432:	1d3b      	adds	r3, r7, #4
 800c434:	3304      	adds	r3, #4
 800c436:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10a      	bne.n	800c454 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	61fb      	str	r3, [r7, #28]
}
 800c450:	bf00      	nop
 800c452:	e7fe      	b.n	800c452 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c45a:	6850      	ldr	r0, [r2, #4]
 800c45c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c45e:	6892      	ldr	r2, [r2, #8]
 800c460:	4611      	mov	r1, r2
 800c462:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	f2c0 80ab 	blt.w	800c5c2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c472:	695b      	ldr	r3, [r3, #20]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d004      	beq.n	800c482 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47a:	3304      	adds	r3, #4
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7fe f903 	bl	800a688 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c482:	463b      	mov	r3, r7
 800c484:	4618      	mov	r0, r3
 800c486:	f7ff ff6b 	bl	800c360 <prvSampleTimeNow>
 800c48a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b09      	cmp	r3, #9
 800c490:	f200 8096 	bhi.w	800c5c0 <prvProcessReceivedCommands+0x19c>
 800c494:	a201      	add	r2, pc, #4	; (adr r2, 800c49c <prvProcessReceivedCommands+0x78>)
 800c496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c49a:	bf00      	nop
 800c49c:	0800c4c5 	.word	0x0800c4c5
 800c4a0:	0800c4c5 	.word	0x0800c4c5
 800c4a4:	0800c4c5 	.word	0x0800c4c5
 800c4a8:	0800c539 	.word	0x0800c539
 800c4ac:	0800c54d 	.word	0x0800c54d
 800c4b0:	0800c597 	.word	0x0800c597
 800c4b4:	0800c4c5 	.word	0x0800c4c5
 800c4b8:	0800c4c5 	.word	0x0800c4c5
 800c4bc:	0800c539 	.word	0x0800c539
 800c4c0:	0800c54d 	.word	0x0800c54d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4ca:	f043 0301 	orr.w	r3, r3, #1
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4d6:	68ba      	ldr	r2, [r7, #8]
 800c4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4da:	699b      	ldr	r3, [r3, #24]
 800c4dc:	18d1      	adds	r1, r2, r3
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4e4:	f7ff ff5c 	bl	800c3a0 <prvInsertTimerInActiveList>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d069      	beq.n	800c5c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f0:	6a1b      	ldr	r3, [r3, #32]
 800c4f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4fc:	f003 0304 	and.w	r3, r3, #4
 800c500:	2b00      	cmp	r3, #0
 800c502:	d05e      	beq.n	800c5c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c508:	699b      	ldr	r3, [r3, #24]
 800c50a:	441a      	add	r2, r3
 800c50c:	2300      	movs	r3, #0
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	2300      	movs	r3, #0
 800c512:	2100      	movs	r1, #0
 800c514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c516:	f7ff fe05 	bl	800c124 <xTimerGenericCommand>
 800c51a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c51c:	6a3b      	ldr	r3, [r7, #32]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d14f      	bne.n	800c5c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	61bb      	str	r3, [r7, #24]
}
 800c534:	bf00      	nop
 800c536:	e7fe      	b.n	800c536 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c53e:	f023 0301 	bic.w	r3, r3, #1
 800c542:	b2da      	uxtb	r2, r3
 800c544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c54a:	e03a      	b.n	800c5c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c552:	f043 0301 	orr.w	r3, r3, #1
 800c556:	b2da      	uxtb	r2, r3
 800c558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c562:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c566:	699b      	ldr	r3, [r3, #24]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10a      	bne.n	800c582 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	617b      	str	r3, [r7, #20]
}
 800c57e:	bf00      	nop
 800c580:	e7fe      	b.n	800c580 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c584:	699a      	ldr	r2, [r3, #24]
 800c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c588:	18d1      	adds	r1, r2, r3
 800c58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c58e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c590:	f7ff ff06 	bl	800c3a0 <prvInsertTimerInActiveList>
					break;
 800c594:	e015      	b.n	800c5c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c59c:	f003 0302 	and.w	r3, r3, #2
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d103      	bne.n	800c5ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c5a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5a6:	f000 fbdb 	bl	800cd60 <vPortFree>
 800c5aa:	e00a      	b.n	800c5c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5b2:	f023 0301 	bic.w	r3, r3, #1
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5be:	e000      	b.n	800c5c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c5c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5c2:	4b08      	ldr	r3, [pc, #32]	; (800c5e4 <prvProcessReceivedCommands+0x1c0>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	1d39      	adds	r1, r7, #4
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fe fbc8 	bl	800ad60 <xQueueReceive>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f47f af2a 	bne.w	800c42c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c5d8:	bf00      	nop
 800c5da:	bf00      	nop
 800c5dc:	3730      	adds	r7, #48	; 0x30
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	20001648 	.word	0x20001648

0800c5e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b088      	sub	sp, #32
 800c5ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5ee:	e048      	b.n	800c682 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5f0:	4b2d      	ldr	r3, [pc, #180]	; (800c6a8 <prvSwitchTimerLists+0xc0>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5fa:	4b2b      	ldr	r3, [pc, #172]	; (800c6a8 <prvSwitchTimerLists+0xc0>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	3304      	adds	r3, #4
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fe f83d 	bl	800a688 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c61c:	f003 0304 	and.w	r3, r3, #4
 800c620:	2b00      	cmp	r3, #0
 800c622:	d02e      	beq.n	800c682 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	699b      	ldr	r3, [r3, #24]
 800c628:	693a      	ldr	r2, [r7, #16]
 800c62a:	4413      	add	r3, r2
 800c62c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	429a      	cmp	r2, r3
 800c634:	d90e      	bls.n	800c654 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c642:	4b19      	ldr	r3, [pc, #100]	; (800c6a8 <prvSwitchTimerLists+0xc0>)
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	3304      	adds	r3, #4
 800c64a:	4619      	mov	r1, r3
 800c64c:	4610      	mov	r0, r2
 800c64e:	f7fd ffe2 	bl	800a616 <vListInsert>
 800c652:	e016      	b.n	800c682 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c654:	2300      	movs	r3, #0
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	2300      	movs	r3, #0
 800c65a:	693a      	ldr	r2, [r7, #16]
 800c65c:	2100      	movs	r1, #0
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f7ff fd60 	bl	800c124 <xTimerGenericCommand>
 800c664:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10a      	bne.n	800c682 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c670:	f383 8811 	msr	BASEPRI, r3
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	603b      	str	r3, [r7, #0]
}
 800c67e:	bf00      	nop
 800c680:	e7fe      	b.n	800c680 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c682:	4b09      	ldr	r3, [pc, #36]	; (800c6a8 <prvSwitchTimerLists+0xc0>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1b1      	bne.n	800c5f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c68c:	4b06      	ldr	r3, [pc, #24]	; (800c6a8 <prvSwitchTimerLists+0xc0>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c692:	4b06      	ldr	r3, [pc, #24]	; (800c6ac <prvSwitchTimerLists+0xc4>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a04      	ldr	r2, [pc, #16]	; (800c6a8 <prvSwitchTimerLists+0xc0>)
 800c698:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c69a:	4a04      	ldr	r2, [pc, #16]	; (800c6ac <prvSwitchTimerLists+0xc4>)
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	6013      	str	r3, [r2, #0]
}
 800c6a0:	bf00      	nop
 800c6a2:	3718      	adds	r7, #24
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	20001640 	.word	0x20001640
 800c6ac:	20001644 	.word	0x20001644

0800c6b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c6b6:	f000 f965 	bl	800c984 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c6ba:	4b15      	ldr	r3, [pc, #84]	; (800c710 <prvCheckForValidListAndQueue+0x60>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d120      	bne.n	800c704 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6c2:	4814      	ldr	r0, [pc, #80]	; (800c714 <prvCheckForValidListAndQueue+0x64>)
 800c6c4:	f7fd ff56 	bl	800a574 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6c8:	4813      	ldr	r0, [pc, #76]	; (800c718 <prvCheckForValidListAndQueue+0x68>)
 800c6ca:	f7fd ff53 	bl	800a574 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6ce:	4b13      	ldr	r3, [pc, #76]	; (800c71c <prvCheckForValidListAndQueue+0x6c>)
 800c6d0:	4a10      	ldr	r2, [pc, #64]	; (800c714 <prvCheckForValidListAndQueue+0x64>)
 800c6d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6d4:	4b12      	ldr	r3, [pc, #72]	; (800c720 <prvCheckForValidListAndQueue+0x70>)
 800c6d6:	4a10      	ldr	r2, [pc, #64]	; (800c718 <prvCheckForValidListAndQueue+0x68>)
 800c6d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6da:	2300      	movs	r3, #0
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	4b11      	ldr	r3, [pc, #68]	; (800c724 <prvCheckForValidListAndQueue+0x74>)
 800c6e0:	4a11      	ldr	r2, [pc, #68]	; (800c728 <prvCheckForValidListAndQueue+0x78>)
 800c6e2:	2110      	movs	r1, #16
 800c6e4:	200a      	movs	r0, #10
 800c6e6:	f7fe f861 	bl	800a7ac <xQueueGenericCreateStatic>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	4a08      	ldr	r2, [pc, #32]	; (800c710 <prvCheckForValidListAndQueue+0x60>)
 800c6ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c6f0:	4b07      	ldr	r3, [pc, #28]	; (800c710 <prvCheckForValidListAndQueue+0x60>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d005      	beq.n	800c704 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c6f8:	4b05      	ldr	r3, [pc, #20]	; (800c710 <prvCheckForValidListAndQueue+0x60>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	490b      	ldr	r1, [pc, #44]	; (800c72c <prvCheckForValidListAndQueue+0x7c>)
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fe fd42 	bl	800b188 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c704:	f000 f96e 	bl	800c9e4 <vPortExitCritical>
}
 800c708:	bf00      	nop
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	20001648 	.word	0x20001648
 800c714:	20001618 	.word	0x20001618
 800c718:	2000162c 	.word	0x2000162c
 800c71c:	20001640 	.word	0x20001640
 800c720:	20001644 	.word	0x20001644
 800c724:	200016f4 	.word	0x200016f4
 800c728:	20001654 	.word	0x20001654
 800c72c:	0800fdc4 	.word	0x0800fdc4

0800c730 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	3b04      	subs	r3, #4
 800c740:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3b04      	subs	r3, #4
 800c74e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	f023 0201 	bic.w	r2, r3, #1
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	3b04      	subs	r3, #4
 800c75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c760:	4a0c      	ldr	r2, [pc, #48]	; (800c794 <pxPortInitialiseStack+0x64>)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	3b14      	subs	r3, #20
 800c76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	3b04      	subs	r3, #4
 800c776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f06f 0202 	mvn.w	r2, #2
 800c77e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	3b20      	subs	r3, #32
 800c784:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c786:	68fb      	ldr	r3, [r7, #12]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr
 800c794:	0800c799 	.word	0x0800c799

0800c798 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7a2:	4b12      	ldr	r3, [pc, #72]	; (800c7ec <prvTaskExitError+0x54>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7aa:	d00a      	beq.n	800c7c2 <prvTaskExitError+0x2a>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	60fb      	str	r3, [r7, #12]
}
 800c7be:	bf00      	nop
 800c7c0:	e7fe      	b.n	800c7c0 <prvTaskExitError+0x28>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	60bb      	str	r3, [r7, #8]
}
 800c7d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7d6:	bf00      	nop
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d0fc      	beq.n	800c7d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7de:	bf00      	nop
 800c7e0:	bf00      	nop
 800c7e2:	3714      	adds	r7, #20
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	2000002c 	.word	0x2000002c

0800c7f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c7f0:	4b07      	ldr	r3, [pc, #28]	; (800c810 <pxCurrentTCBConst2>)
 800c7f2:	6819      	ldr	r1, [r3, #0]
 800c7f4:	6808      	ldr	r0, [r1, #0]
 800c7f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fa:	f380 8809 	msr	PSP, r0
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f04f 0000 	mov.w	r0, #0
 800c806:	f380 8811 	msr	BASEPRI, r0
 800c80a:	4770      	bx	lr
 800c80c:	f3af 8000 	nop.w

0800c810 <pxCurrentTCBConst2>:
 800c810:	20001118 	.word	0x20001118
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c814:	bf00      	nop
 800c816:	bf00      	nop

0800c818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c818:	4808      	ldr	r0, [pc, #32]	; (800c83c <prvPortStartFirstTask+0x24>)
 800c81a:	6800      	ldr	r0, [r0, #0]
 800c81c:	6800      	ldr	r0, [r0, #0]
 800c81e:	f380 8808 	msr	MSP, r0
 800c822:	f04f 0000 	mov.w	r0, #0
 800c826:	f380 8814 	msr	CONTROL, r0
 800c82a:	b662      	cpsie	i
 800c82c:	b661      	cpsie	f
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	df00      	svc	0
 800c838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c83a:	bf00      	nop
 800c83c:	e000ed08 	.word	0xe000ed08

0800c840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b086      	sub	sp, #24
 800c844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c846:	4b46      	ldr	r3, [pc, #280]	; (800c960 <xPortStartScheduler+0x120>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a46      	ldr	r2, [pc, #280]	; (800c964 <xPortStartScheduler+0x124>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d10a      	bne.n	800c866 <xPortStartScheduler+0x26>
	__asm volatile
 800c850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c854:	f383 8811 	msr	BASEPRI, r3
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	613b      	str	r3, [r7, #16]
}
 800c862:	bf00      	nop
 800c864:	e7fe      	b.n	800c864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c866:	4b3e      	ldr	r3, [pc, #248]	; (800c960 <xPortStartScheduler+0x120>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a3f      	ldr	r2, [pc, #252]	; (800c968 <xPortStartScheduler+0x128>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d10a      	bne.n	800c886 <xPortStartScheduler+0x46>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	60fb      	str	r3, [r7, #12]
}
 800c882:	bf00      	nop
 800c884:	e7fe      	b.n	800c884 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c886:	4b39      	ldr	r3, [pc, #228]	; (800c96c <xPortStartScheduler+0x12c>)
 800c888:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	22ff      	movs	r2, #255	; 0xff
 800c896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8a0:	78fb      	ldrb	r3, [r7, #3]
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c8a8:	b2da      	uxtb	r2, r3
 800c8aa:	4b31      	ldr	r3, [pc, #196]	; (800c970 <xPortStartScheduler+0x130>)
 800c8ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8ae:	4b31      	ldr	r3, [pc, #196]	; (800c974 <xPortStartScheduler+0x134>)
 800c8b0:	2207      	movs	r2, #7
 800c8b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8b4:	e009      	b.n	800c8ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c8b6:	4b2f      	ldr	r3, [pc, #188]	; (800c974 <xPortStartScheduler+0x134>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	4a2d      	ldr	r2, [pc, #180]	; (800c974 <xPortStartScheduler+0x134>)
 800c8be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8c0:	78fb      	ldrb	r3, [r7, #3]
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	005b      	lsls	r3, r3, #1
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8ca:	78fb      	ldrb	r3, [r7, #3]
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8d2:	2b80      	cmp	r3, #128	; 0x80
 800c8d4:	d0ef      	beq.n	800c8b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8d6:	4b27      	ldr	r3, [pc, #156]	; (800c974 <xPortStartScheduler+0x134>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f1c3 0307 	rsb	r3, r3, #7
 800c8de:	2b04      	cmp	r3, #4
 800c8e0:	d00a      	beq.n	800c8f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	60bb      	str	r3, [r7, #8]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c8f8:	4b1e      	ldr	r3, [pc, #120]	; (800c974 <xPortStartScheduler+0x134>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	021b      	lsls	r3, r3, #8
 800c8fe:	4a1d      	ldr	r2, [pc, #116]	; (800c974 <xPortStartScheduler+0x134>)
 800c900:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c902:	4b1c      	ldr	r3, [pc, #112]	; (800c974 <xPortStartScheduler+0x134>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c90a:	4a1a      	ldr	r2, [pc, #104]	; (800c974 <xPortStartScheduler+0x134>)
 800c90c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	b2da      	uxtb	r2, r3
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c916:	4b18      	ldr	r3, [pc, #96]	; (800c978 <xPortStartScheduler+0x138>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a17      	ldr	r2, [pc, #92]	; (800c978 <xPortStartScheduler+0x138>)
 800c91c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c922:	4b15      	ldr	r3, [pc, #84]	; (800c978 <xPortStartScheduler+0x138>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a14      	ldr	r2, [pc, #80]	; (800c978 <xPortStartScheduler+0x138>)
 800c928:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c92c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c92e:	f000 f8dd 	bl	800caec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c932:	4b12      	ldr	r3, [pc, #72]	; (800c97c <xPortStartScheduler+0x13c>)
 800c934:	2200      	movs	r2, #0
 800c936:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c938:	f000 f8fc 	bl	800cb34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c93c:	4b10      	ldr	r3, [pc, #64]	; (800c980 <xPortStartScheduler+0x140>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a0f      	ldr	r2, [pc, #60]	; (800c980 <xPortStartScheduler+0x140>)
 800c942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c948:	f7ff ff66 	bl	800c818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c94c:	f7ff f856 	bl	800b9fc <vTaskSwitchContext>
	prvTaskExitError();
 800c950:	f7ff ff22 	bl	800c798 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3718      	adds	r7, #24
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	e000ed00 	.word	0xe000ed00
 800c964:	410fc271 	.word	0x410fc271
 800c968:	410fc270 	.word	0x410fc270
 800c96c:	e000e400 	.word	0xe000e400
 800c970:	20001744 	.word	0x20001744
 800c974:	20001748 	.word	0x20001748
 800c978:	e000ed20 	.word	0xe000ed20
 800c97c:	2000002c 	.word	0x2000002c
 800c980:	e000ef34 	.word	0xe000ef34

0800c984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
	__asm volatile
 800c98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98e:	f383 8811 	msr	BASEPRI, r3
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	f3bf 8f4f 	dsb	sy
 800c99a:	607b      	str	r3, [r7, #4]
}
 800c99c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c99e:	4b0f      	ldr	r3, [pc, #60]	; (800c9dc <vPortEnterCritical+0x58>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	4a0d      	ldr	r2, [pc, #52]	; (800c9dc <vPortEnterCritical+0x58>)
 800c9a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9a8:	4b0c      	ldr	r3, [pc, #48]	; (800c9dc <vPortEnterCritical+0x58>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d10f      	bne.n	800c9d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9b0:	4b0b      	ldr	r3, [pc, #44]	; (800c9e0 <vPortEnterCritical+0x5c>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00a      	beq.n	800c9d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9be:	f383 8811 	msr	BASEPRI, r3
 800c9c2:	f3bf 8f6f 	isb	sy
 800c9c6:	f3bf 8f4f 	dsb	sy
 800c9ca:	603b      	str	r3, [r7, #0]
}
 800c9cc:	bf00      	nop
 800c9ce:	e7fe      	b.n	800c9ce <vPortEnterCritical+0x4a>
	}
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr
 800c9dc:	2000002c 	.word	0x2000002c
 800c9e0:	e000ed04 	.word	0xe000ed04

0800c9e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9ea:	4b12      	ldr	r3, [pc, #72]	; (800ca34 <vPortExitCritical+0x50>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d10a      	bne.n	800ca08 <vPortExitCritical+0x24>
	__asm volatile
 800c9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f6:	f383 8811 	msr	BASEPRI, r3
 800c9fa:	f3bf 8f6f 	isb	sy
 800c9fe:	f3bf 8f4f 	dsb	sy
 800ca02:	607b      	str	r3, [r7, #4]
}
 800ca04:	bf00      	nop
 800ca06:	e7fe      	b.n	800ca06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca08:	4b0a      	ldr	r3, [pc, #40]	; (800ca34 <vPortExitCritical+0x50>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	4a09      	ldr	r2, [pc, #36]	; (800ca34 <vPortExitCritical+0x50>)
 800ca10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca12:	4b08      	ldr	r3, [pc, #32]	; (800ca34 <vPortExitCritical+0x50>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d105      	bne.n	800ca26 <vPortExitCritical+0x42>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	f383 8811 	msr	BASEPRI, r3
}
 800ca24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca26:	bf00      	nop
 800ca28:	370c      	adds	r7, #12
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	2000002c 	.word	0x2000002c
	...

0800ca40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca40:	f3ef 8009 	mrs	r0, PSP
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	4b15      	ldr	r3, [pc, #84]	; (800caa0 <pxCurrentTCBConst>)
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	f01e 0f10 	tst.w	lr, #16
 800ca50:	bf08      	it	eq
 800ca52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca5a:	6010      	str	r0, [r2, #0]
 800ca5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca64:	f380 8811 	msr	BASEPRI, r0
 800ca68:	f3bf 8f4f 	dsb	sy
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f7fe ffc4 	bl	800b9fc <vTaskSwitchContext>
 800ca74:	f04f 0000 	mov.w	r0, #0
 800ca78:	f380 8811 	msr	BASEPRI, r0
 800ca7c:	bc09      	pop	{r0, r3}
 800ca7e:	6819      	ldr	r1, [r3, #0]
 800ca80:	6808      	ldr	r0, [r1, #0]
 800ca82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca86:	f01e 0f10 	tst.w	lr, #16
 800ca8a:	bf08      	it	eq
 800ca8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca90:	f380 8809 	msr	PSP, r0
 800ca94:	f3bf 8f6f 	isb	sy
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop
 800ca9c:	f3af 8000 	nop.w

0800caa0 <pxCurrentTCBConst>:
 800caa0:	20001118 	.word	0x20001118
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800caa4:	bf00      	nop
 800caa6:	bf00      	nop

0800caa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
	__asm volatile
 800caae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab2:	f383 8811 	msr	BASEPRI, r3
 800cab6:	f3bf 8f6f 	isb	sy
 800caba:	f3bf 8f4f 	dsb	sy
 800cabe:	607b      	str	r3, [r7, #4]
}
 800cac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cac2:	f7fe fee1 	bl	800b888 <xTaskIncrementTick>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d003      	beq.n	800cad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cacc:	4b06      	ldr	r3, [pc, #24]	; (800cae8 <xPortSysTickHandler+0x40>)
 800cace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cad2:	601a      	str	r2, [r3, #0]
 800cad4:	2300      	movs	r3, #0
 800cad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	f383 8811 	msr	BASEPRI, r3
}
 800cade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	e000ed04 	.word	0xe000ed04

0800caec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800caec:	b480      	push	{r7}
 800caee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800caf0:	4b0b      	ldr	r3, [pc, #44]	; (800cb20 <vPortSetupTimerInterrupt+0x34>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800caf6:	4b0b      	ldr	r3, [pc, #44]	; (800cb24 <vPortSetupTimerInterrupt+0x38>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cafc:	4b0a      	ldr	r3, [pc, #40]	; (800cb28 <vPortSetupTimerInterrupt+0x3c>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a0a      	ldr	r2, [pc, #40]	; (800cb2c <vPortSetupTimerInterrupt+0x40>)
 800cb02:	fba2 2303 	umull	r2, r3, r2, r3
 800cb06:	099b      	lsrs	r3, r3, #6
 800cb08:	4a09      	ldr	r2, [pc, #36]	; (800cb30 <vPortSetupTimerInterrupt+0x44>)
 800cb0a:	3b01      	subs	r3, #1
 800cb0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb0e:	4b04      	ldr	r3, [pc, #16]	; (800cb20 <vPortSetupTimerInterrupt+0x34>)
 800cb10:	2207      	movs	r2, #7
 800cb12:	601a      	str	r2, [r3, #0]
}
 800cb14:	bf00      	nop
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	e000e010 	.word	0xe000e010
 800cb24:	e000e018 	.word	0xe000e018
 800cb28:	20000020 	.word	0x20000020
 800cb2c:	10624dd3 	.word	0x10624dd3
 800cb30:	e000e014 	.word	0xe000e014

0800cb34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb44 <vPortEnableVFP+0x10>
 800cb38:	6801      	ldr	r1, [r0, #0]
 800cb3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb3e:	6001      	str	r1, [r0, #0]
 800cb40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb42:	bf00      	nop
 800cb44:	e000ed88 	.word	0xe000ed88

0800cb48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb4e:	f3ef 8305 	mrs	r3, IPSR
 800cb52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b0f      	cmp	r3, #15
 800cb58:	d914      	bls.n	800cb84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb5a:	4a17      	ldr	r2, [pc, #92]	; (800cbb8 <vPortValidateInterruptPriority+0x70>)
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	4413      	add	r3, r2
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb64:	4b15      	ldr	r3, [pc, #84]	; (800cbbc <vPortValidateInterruptPriority+0x74>)
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	7afa      	ldrb	r2, [r7, #11]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d20a      	bcs.n	800cb84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	607b      	str	r3, [r7, #4]
}
 800cb80:	bf00      	nop
 800cb82:	e7fe      	b.n	800cb82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb84:	4b0e      	ldr	r3, [pc, #56]	; (800cbc0 <vPortValidateInterruptPriority+0x78>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb8c:	4b0d      	ldr	r3, [pc, #52]	; (800cbc4 <vPortValidateInterruptPriority+0x7c>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d90a      	bls.n	800cbaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	603b      	str	r3, [r7, #0]
}
 800cba6:	bf00      	nop
 800cba8:	e7fe      	b.n	800cba8 <vPortValidateInterruptPriority+0x60>
	}
 800cbaa:	bf00      	nop
 800cbac:	3714      	adds	r7, #20
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	e000e3f0 	.word	0xe000e3f0
 800cbbc:	20001744 	.word	0x20001744
 800cbc0:	e000ed0c 	.word	0xe000ed0c
 800cbc4:	20001748 	.word	0x20001748

0800cbc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b08a      	sub	sp, #40	; 0x28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cbd4:	f7fe fd9c 	bl	800b710 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cbd8:	4b5b      	ldr	r3, [pc, #364]	; (800cd48 <pvPortMalloc+0x180>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d101      	bne.n	800cbe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cbe0:	f000 f920 	bl	800ce24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cbe4:	4b59      	ldr	r3, [pc, #356]	; (800cd4c <pvPortMalloc+0x184>)
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4013      	ands	r3, r2
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f040 8093 	bne.w	800cd18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d01d      	beq.n	800cc34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cbf8:	2208      	movs	r2, #8
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f003 0307 	and.w	r3, r3, #7
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d014      	beq.n	800cc34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f023 0307 	bic.w	r3, r3, #7
 800cc10:	3308      	adds	r3, #8
 800cc12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f003 0307 	and.w	r3, r3, #7
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00a      	beq.n	800cc34 <pvPortMalloc+0x6c>
	__asm volatile
 800cc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc22:	f383 8811 	msr	BASEPRI, r3
 800cc26:	f3bf 8f6f 	isb	sy
 800cc2a:	f3bf 8f4f 	dsb	sy
 800cc2e:	617b      	str	r3, [r7, #20]
}
 800cc30:	bf00      	nop
 800cc32:	e7fe      	b.n	800cc32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d06e      	beq.n	800cd18 <pvPortMalloc+0x150>
 800cc3a:	4b45      	ldr	r3, [pc, #276]	; (800cd50 <pvPortMalloc+0x188>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d869      	bhi.n	800cd18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc44:	4b43      	ldr	r3, [pc, #268]	; (800cd54 <pvPortMalloc+0x18c>)
 800cc46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc48:	4b42      	ldr	r3, [pc, #264]	; (800cd54 <pvPortMalloc+0x18c>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc4e:	e004      	b.n	800cc5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d903      	bls.n	800cc6c <pvPortMalloc+0xa4>
 800cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1f1      	bne.n	800cc50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc6c:	4b36      	ldr	r3, [pc, #216]	; (800cd48 <pvPortMalloc+0x180>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d050      	beq.n	800cd18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc76:	6a3b      	ldr	r3, [r7, #32]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2208      	movs	r2, #8
 800cc7c:	4413      	add	r3, r2
 800cc7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	6a3b      	ldr	r3, [r7, #32]
 800cc86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	1ad2      	subs	r2, r2, r3
 800cc90:	2308      	movs	r3, #8
 800cc92:	005b      	lsls	r3, r3, #1
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d91f      	bls.n	800ccd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	f003 0307 	and.w	r3, r3, #7
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00a      	beq.n	800ccc0 <pvPortMalloc+0xf8>
	__asm volatile
 800ccaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccae:	f383 8811 	msr	BASEPRI, r3
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	613b      	str	r3, [r7, #16]
}
 800ccbc:	bf00      	nop
 800ccbe:	e7fe      	b.n	800ccbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc2:	685a      	ldr	r2, [r3, #4]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	1ad2      	subs	r2, r2, r3
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ccd2:	69b8      	ldr	r0, [r7, #24]
 800ccd4:	f000 f908 	bl	800cee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ccd8:	4b1d      	ldr	r3, [pc, #116]	; (800cd50 <pvPortMalloc+0x188>)
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	4a1b      	ldr	r2, [pc, #108]	; (800cd50 <pvPortMalloc+0x188>)
 800cce4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cce6:	4b1a      	ldr	r3, [pc, #104]	; (800cd50 <pvPortMalloc+0x188>)
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	4b1b      	ldr	r3, [pc, #108]	; (800cd58 <pvPortMalloc+0x190>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d203      	bcs.n	800ccfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ccf2:	4b17      	ldr	r3, [pc, #92]	; (800cd50 <pvPortMalloc+0x188>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a18      	ldr	r2, [pc, #96]	; (800cd58 <pvPortMalloc+0x190>)
 800ccf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ccfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfc:	685a      	ldr	r2, [r3, #4]
 800ccfe:	4b13      	ldr	r3, [pc, #76]	; (800cd4c <pvPortMalloc+0x184>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	431a      	orrs	r2, r3
 800cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd0e:	4b13      	ldr	r3, [pc, #76]	; (800cd5c <pvPortMalloc+0x194>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	3301      	adds	r3, #1
 800cd14:	4a11      	ldr	r2, [pc, #68]	; (800cd5c <pvPortMalloc+0x194>)
 800cd16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd18:	f7fe fd08 	bl	800b72c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	f003 0307 	and.w	r3, r3, #7
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00a      	beq.n	800cd3c <pvPortMalloc+0x174>
	__asm volatile
 800cd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	60fb      	str	r3, [r7, #12]
}
 800cd38:	bf00      	nop
 800cd3a:	e7fe      	b.n	800cd3a <pvPortMalloc+0x172>
	return pvReturn;
 800cd3c:	69fb      	ldr	r3, [r7, #28]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3728      	adds	r7, #40	; 0x28
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	20005354 	.word	0x20005354
 800cd4c:	20005368 	.word	0x20005368
 800cd50:	20005358 	.word	0x20005358
 800cd54:	2000534c 	.word	0x2000534c
 800cd58:	2000535c 	.word	0x2000535c
 800cd5c:	20005360 	.word	0x20005360

0800cd60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d04d      	beq.n	800ce0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd72:	2308      	movs	r3, #8
 800cd74:	425b      	negs	r3, r3
 800cd76:	697a      	ldr	r2, [r7, #20]
 800cd78:	4413      	add	r3, r2
 800cd7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	685a      	ldr	r2, [r3, #4]
 800cd84:	4b24      	ldr	r3, [pc, #144]	; (800ce18 <vPortFree+0xb8>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4013      	ands	r3, r2
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10a      	bne.n	800cda4 <vPortFree+0x44>
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	60fb      	str	r3, [r7, #12]
}
 800cda0:	bf00      	nop
 800cda2:	e7fe      	b.n	800cda2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00a      	beq.n	800cdc2 <vPortFree+0x62>
	__asm volatile
 800cdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb0:	f383 8811 	msr	BASEPRI, r3
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	60bb      	str	r3, [r7, #8]
}
 800cdbe:	bf00      	nop
 800cdc0:	e7fe      	b.n	800cdc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	4b14      	ldr	r3, [pc, #80]	; (800ce18 <vPortFree+0xb8>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4013      	ands	r3, r2
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d01e      	beq.n	800ce0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d11a      	bne.n	800ce0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	685a      	ldr	r2, [r3, #4]
 800cddc:	4b0e      	ldr	r3, [pc, #56]	; (800ce18 <vPortFree+0xb8>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	43db      	mvns	r3, r3
 800cde2:	401a      	ands	r2, r3
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cde8:	f7fe fc92 	bl	800b710 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	685a      	ldr	r2, [r3, #4]
 800cdf0:	4b0a      	ldr	r3, [pc, #40]	; (800ce1c <vPortFree+0xbc>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	4a09      	ldr	r2, [pc, #36]	; (800ce1c <vPortFree+0xbc>)
 800cdf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cdfa:	6938      	ldr	r0, [r7, #16]
 800cdfc:	f000 f874 	bl	800cee8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce00:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <vPortFree+0xc0>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	3301      	adds	r3, #1
 800ce06:	4a06      	ldr	r2, [pc, #24]	; (800ce20 <vPortFree+0xc0>)
 800ce08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce0a:	f7fe fc8f 	bl	800b72c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce0e:	bf00      	nop
 800ce10:	3718      	adds	r7, #24
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	20005368 	.word	0x20005368
 800ce1c:	20005358 	.word	0x20005358
 800ce20:	20005364 	.word	0x20005364

0800ce24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ce2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce30:	4b27      	ldr	r3, [pc, #156]	; (800ced0 <prvHeapInit+0xac>)
 800ce32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f003 0307 	and.w	r3, r3, #7
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00c      	beq.n	800ce58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	3307      	adds	r3, #7
 800ce42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f023 0307 	bic.w	r3, r3, #7
 800ce4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce4c:	68ba      	ldr	r2, [r7, #8]
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	4a1f      	ldr	r2, [pc, #124]	; (800ced0 <prvHeapInit+0xac>)
 800ce54:	4413      	add	r3, r2
 800ce56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce5c:	4a1d      	ldr	r2, [pc, #116]	; (800ced4 <prvHeapInit+0xb0>)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce62:	4b1c      	ldr	r3, [pc, #112]	; (800ced4 <prvHeapInit+0xb0>)
 800ce64:	2200      	movs	r2, #0
 800ce66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	68ba      	ldr	r2, [r7, #8]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce70:	2208      	movs	r2, #8
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	1a9b      	subs	r3, r3, r2
 800ce76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f023 0307 	bic.w	r3, r3, #7
 800ce7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	4a15      	ldr	r2, [pc, #84]	; (800ced8 <prvHeapInit+0xb4>)
 800ce84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce86:	4b14      	ldr	r3, [pc, #80]	; (800ced8 <prvHeapInit+0xb4>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce8e:	4b12      	ldr	r3, [pc, #72]	; (800ced8 <prvHeapInit+0xb4>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2200      	movs	r2, #0
 800ce94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	68fa      	ldr	r2, [r7, #12]
 800ce9e:	1ad2      	subs	r2, r2, r3
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cea4:	4b0c      	ldr	r3, [pc, #48]	; (800ced8 <prvHeapInit+0xb4>)
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	4a0a      	ldr	r2, [pc, #40]	; (800cedc <prvHeapInit+0xb8>)
 800ceb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	4a09      	ldr	r2, [pc, #36]	; (800cee0 <prvHeapInit+0xbc>)
 800ceba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cebc:	4b09      	ldr	r3, [pc, #36]	; (800cee4 <prvHeapInit+0xc0>)
 800cebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cec2:	601a      	str	r2, [r3, #0]
}
 800cec4:	bf00      	nop
 800cec6:	3714      	adds	r7, #20
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr
 800ced0:	2000174c 	.word	0x2000174c
 800ced4:	2000534c 	.word	0x2000534c
 800ced8:	20005354 	.word	0x20005354
 800cedc:	2000535c 	.word	0x2000535c
 800cee0:	20005358 	.word	0x20005358
 800cee4:	20005368 	.word	0x20005368

0800cee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cef0:	4b28      	ldr	r3, [pc, #160]	; (800cf94 <prvInsertBlockIntoFreeList+0xac>)
 800cef2:	60fb      	str	r3, [r7, #12]
 800cef4:	e002      	b.n	800cefc <prvInsertBlockIntoFreeList+0x14>
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	60fb      	str	r3, [r7, #12]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d8f7      	bhi.n	800cef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	4413      	add	r3, r2
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d108      	bne.n	800cf2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	685a      	ldr	r2, [r3, #4]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	441a      	add	r2, r3
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	68ba      	ldr	r2, [r7, #8]
 800cf34:	441a      	add	r2, r3
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d118      	bne.n	800cf70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	4b15      	ldr	r3, [pc, #84]	; (800cf98 <prvInsertBlockIntoFreeList+0xb0>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d00d      	beq.n	800cf66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	685a      	ldr	r2, [r3, #4]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	441a      	add	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	601a      	str	r2, [r3, #0]
 800cf64:	e008      	b.n	800cf78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf66:	4b0c      	ldr	r3, [pc, #48]	; (800cf98 <prvInsertBlockIntoFreeList+0xb0>)
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	e003      	b.n	800cf78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d002      	beq.n	800cf86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf86:	bf00      	nop
 800cf88:	3714      	adds	r7, #20
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	2000534c 	.word	0x2000534c
 800cf98:	20005354 	.word	0x20005354

0800cf9c <__cvt>:
 800cf9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfa0:	ec55 4b10 	vmov	r4, r5, d0
 800cfa4:	2d00      	cmp	r5, #0
 800cfa6:	460e      	mov	r6, r1
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	462b      	mov	r3, r5
 800cfac:	bfbb      	ittet	lt
 800cfae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cfb2:	461d      	movlt	r5, r3
 800cfb4:	2300      	movge	r3, #0
 800cfb6:	232d      	movlt	r3, #45	; 0x2d
 800cfb8:	700b      	strb	r3, [r1, #0]
 800cfba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cfc0:	4691      	mov	r9, r2
 800cfc2:	f023 0820 	bic.w	r8, r3, #32
 800cfc6:	bfbc      	itt	lt
 800cfc8:	4622      	movlt	r2, r4
 800cfca:	4614      	movlt	r4, r2
 800cfcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cfd0:	d005      	beq.n	800cfde <__cvt+0x42>
 800cfd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cfd6:	d100      	bne.n	800cfda <__cvt+0x3e>
 800cfd8:	3601      	adds	r6, #1
 800cfda:	2102      	movs	r1, #2
 800cfdc:	e000      	b.n	800cfe0 <__cvt+0x44>
 800cfde:	2103      	movs	r1, #3
 800cfe0:	ab03      	add	r3, sp, #12
 800cfe2:	9301      	str	r3, [sp, #4]
 800cfe4:	ab02      	add	r3, sp, #8
 800cfe6:	9300      	str	r3, [sp, #0]
 800cfe8:	ec45 4b10 	vmov	d0, r4, r5
 800cfec:	4653      	mov	r3, sl
 800cfee:	4632      	mov	r2, r6
 800cff0:	f000 fdee 	bl	800dbd0 <_dtoa_r>
 800cff4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cff8:	4607      	mov	r7, r0
 800cffa:	d102      	bne.n	800d002 <__cvt+0x66>
 800cffc:	f019 0f01 	tst.w	r9, #1
 800d000:	d022      	beq.n	800d048 <__cvt+0xac>
 800d002:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d006:	eb07 0906 	add.w	r9, r7, r6
 800d00a:	d110      	bne.n	800d02e <__cvt+0x92>
 800d00c:	783b      	ldrb	r3, [r7, #0]
 800d00e:	2b30      	cmp	r3, #48	; 0x30
 800d010:	d10a      	bne.n	800d028 <__cvt+0x8c>
 800d012:	2200      	movs	r2, #0
 800d014:	2300      	movs	r3, #0
 800d016:	4620      	mov	r0, r4
 800d018:	4629      	mov	r1, r5
 800d01a:	f7f3 fd55 	bl	8000ac8 <__aeabi_dcmpeq>
 800d01e:	b918      	cbnz	r0, 800d028 <__cvt+0x8c>
 800d020:	f1c6 0601 	rsb	r6, r6, #1
 800d024:	f8ca 6000 	str.w	r6, [sl]
 800d028:	f8da 3000 	ldr.w	r3, [sl]
 800d02c:	4499      	add	r9, r3
 800d02e:	2200      	movs	r2, #0
 800d030:	2300      	movs	r3, #0
 800d032:	4620      	mov	r0, r4
 800d034:	4629      	mov	r1, r5
 800d036:	f7f3 fd47 	bl	8000ac8 <__aeabi_dcmpeq>
 800d03a:	b108      	cbz	r0, 800d040 <__cvt+0xa4>
 800d03c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d040:	2230      	movs	r2, #48	; 0x30
 800d042:	9b03      	ldr	r3, [sp, #12]
 800d044:	454b      	cmp	r3, r9
 800d046:	d307      	bcc.n	800d058 <__cvt+0xbc>
 800d048:	9b03      	ldr	r3, [sp, #12]
 800d04a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d04c:	1bdb      	subs	r3, r3, r7
 800d04e:	4638      	mov	r0, r7
 800d050:	6013      	str	r3, [r2, #0]
 800d052:	b004      	add	sp, #16
 800d054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d058:	1c59      	adds	r1, r3, #1
 800d05a:	9103      	str	r1, [sp, #12]
 800d05c:	701a      	strb	r2, [r3, #0]
 800d05e:	e7f0      	b.n	800d042 <__cvt+0xa6>

0800d060 <__exponent>:
 800d060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d062:	4603      	mov	r3, r0
 800d064:	2900      	cmp	r1, #0
 800d066:	bfb8      	it	lt
 800d068:	4249      	neglt	r1, r1
 800d06a:	f803 2b02 	strb.w	r2, [r3], #2
 800d06e:	bfb4      	ite	lt
 800d070:	222d      	movlt	r2, #45	; 0x2d
 800d072:	222b      	movge	r2, #43	; 0x2b
 800d074:	2909      	cmp	r1, #9
 800d076:	7042      	strb	r2, [r0, #1]
 800d078:	dd2a      	ble.n	800d0d0 <__exponent+0x70>
 800d07a:	f10d 0207 	add.w	r2, sp, #7
 800d07e:	4617      	mov	r7, r2
 800d080:	260a      	movs	r6, #10
 800d082:	4694      	mov	ip, r2
 800d084:	fb91 f5f6 	sdiv	r5, r1, r6
 800d088:	fb06 1415 	mls	r4, r6, r5, r1
 800d08c:	3430      	adds	r4, #48	; 0x30
 800d08e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d092:	460c      	mov	r4, r1
 800d094:	2c63      	cmp	r4, #99	; 0x63
 800d096:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800d09a:	4629      	mov	r1, r5
 800d09c:	dcf1      	bgt.n	800d082 <__exponent+0x22>
 800d09e:	3130      	adds	r1, #48	; 0x30
 800d0a0:	f1ac 0402 	sub.w	r4, ip, #2
 800d0a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d0a8:	1c41      	adds	r1, r0, #1
 800d0aa:	4622      	mov	r2, r4
 800d0ac:	42ba      	cmp	r2, r7
 800d0ae:	d30a      	bcc.n	800d0c6 <__exponent+0x66>
 800d0b0:	f10d 0209 	add.w	r2, sp, #9
 800d0b4:	eba2 020c 	sub.w	r2, r2, ip
 800d0b8:	42bc      	cmp	r4, r7
 800d0ba:	bf88      	it	hi
 800d0bc:	2200      	movhi	r2, #0
 800d0be:	4413      	add	r3, r2
 800d0c0:	1a18      	subs	r0, r3, r0
 800d0c2:	b003      	add	sp, #12
 800d0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d0ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d0ce:	e7ed      	b.n	800d0ac <__exponent+0x4c>
 800d0d0:	2330      	movs	r3, #48	; 0x30
 800d0d2:	3130      	adds	r1, #48	; 0x30
 800d0d4:	7083      	strb	r3, [r0, #2]
 800d0d6:	70c1      	strb	r1, [r0, #3]
 800d0d8:	1d03      	adds	r3, r0, #4
 800d0da:	e7f1      	b.n	800d0c0 <__exponent+0x60>

0800d0dc <_printf_float>:
 800d0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e0:	ed2d 8b02 	vpush	{d8}
 800d0e4:	b08d      	sub	sp, #52	; 0x34
 800d0e6:	460c      	mov	r4, r1
 800d0e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d0ec:	4616      	mov	r6, r2
 800d0ee:	461f      	mov	r7, r3
 800d0f0:	4605      	mov	r5, r0
 800d0f2:	f000 fca3 	bl	800da3c <_localeconv_r>
 800d0f6:	f8d0 a000 	ldr.w	sl, [r0]
 800d0fa:	4650      	mov	r0, sl
 800d0fc:	f7f3 f8b8 	bl	8000270 <strlen>
 800d100:	2300      	movs	r3, #0
 800d102:	930a      	str	r3, [sp, #40]	; 0x28
 800d104:	6823      	ldr	r3, [r4, #0]
 800d106:	9305      	str	r3, [sp, #20]
 800d108:	f8d8 3000 	ldr.w	r3, [r8]
 800d10c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d110:	3307      	adds	r3, #7
 800d112:	f023 0307 	bic.w	r3, r3, #7
 800d116:	f103 0208 	add.w	r2, r3, #8
 800d11a:	f8c8 2000 	str.w	r2, [r8]
 800d11e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d122:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d126:	9307      	str	r3, [sp, #28]
 800d128:	f8cd 8018 	str.w	r8, [sp, #24]
 800d12c:	ee08 0a10 	vmov	s16, r0
 800d130:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d134:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d138:	4b9e      	ldr	r3, [pc, #632]	; (800d3b4 <_printf_float+0x2d8>)
 800d13a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d13e:	f7f3 fcf5 	bl	8000b2c <__aeabi_dcmpun>
 800d142:	bb88      	cbnz	r0, 800d1a8 <_printf_float+0xcc>
 800d144:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d148:	4b9a      	ldr	r3, [pc, #616]	; (800d3b4 <_printf_float+0x2d8>)
 800d14a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d14e:	f7f3 fccf 	bl	8000af0 <__aeabi_dcmple>
 800d152:	bb48      	cbnz	r0, 800d1a8 <_printf_float+0xcc>
 800d154:	2200      	movs	r2, #0
 800d156:	2300      	movs	r3, #0
 800d158:	4640      	mov	r0, r8
 800d15a:	4649      	mov	r1, r9
 800d15c:	f7f3 fcbe 	bl	8000adc <__aeabi_dcmplt>
 800d160:	b110      	cbz	r0, 800d168 <_printf_float+0x8c>
 800d162:	232d      	movs	r3, #45	; 0x2d
 800d164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d168:	4a93      	ldr	r2, [pc, #588]	; (800d3b8 <_printf_float+0x2dc>)
 800d16a:	4b94      	ldr	r3, [pc, #592]	; (800d3bc <_printf_float+0x2e0>)
 800d16c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d170:	bf94      	ite	ls
 800d172:	4690      	movls	r8, r2
 800d174:	4698      	movhi	r8, r3
 800d176:	2303      	movs	r3, #3
 800d178:	6123      	str	r3, [r4, #16]
 800d17a:	9b05      	ldr	r3, [sp, #20]
 800d17c:	f023 0304 	bic.w	r3, r3, #4
 800d180:	6023      	str	r3, [r4, #0]
 800d182:	f04f 0900 	mov.w	r9, #0
 800d186:	9700      	str	r7, [sp, #0]
 800d188:	4633      	mov	r3, r6
 800d18a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d18c:	4621      	mov	r1, r4
 800d18e:	4628      	mov	r0, r5
 800d190:	f000 f9da 	bl	800d548 <_printf_common>
 800d194:	3001      	adds	r0, #1
 800d196:	f040 8090 	bne.w	800d2ba <_printf_float+0x1de>
 800d19a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d19e:	b00d      	add	sp, #52	; 0x34
 800d1a0:	ecbd 8b02 	vpop	{d8}
 800d1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1a8:	4642      	mov	r2, r8
 800d1aa:	464b      	mov	r3, r9
 800d1ac:	4640      	mov	r0, r8
 800d1ae:	4649      	mov	r1, r9
 800d1b0:	f7f3 fcbc 	bl	8000b2c <__aeabi_dcmpun>
 800d1b4:	b140      	cbz	r0, 800d1c8 <_printf_float+0xec>
 800d1b6:	464b      	mov	r3, r9
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	bfbc      	itt	lt
 800d1bc:	232d      	movlt	r3, #45	; 0x2d
 800d1be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d1c2:	4a7f      	ldr	r2, [pc, #508]	; (800d3c0 <_printf_float+0x2e4>)
 800d1c4:	4b7f      	ldr	r3, [pc, #508]	; (800d3c4 <_printf_float+0x2e8>)
 800d1c6:	e7d1      	b.n	800d16c <_printf_float+0x90>
 800d1c8:	6863      	ldr	r3, [r4, #4]
 800d1ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d1ce:	9206      	str	r2, [sp, #24]
 800d1d0:	1c5a      	adds	r2, r3, #1
 800d1d2:	d13f      	bne.n	800d254 <_printf_float+0x178>
 800d1d4:	2306      	movs	r3, #6
 800d1d6:	6063      	str	r3, [r4, #4]
 800d1d8:	9b05      	ldr	r3, [sp, #20]
 800d1da:	6861      	ldr	r1, [r4, #4]
 800d1dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	9303      	str	r3, [sp, #12]
 800d1e4:	ab0a      	add	r3, sp, #40	; 0x28
 800d1e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d1ea:	ab09      	add	r3, sp, #36	; 0x24
 800d1ec:	ec49 8b10 	vmov	d0, r8, r9
 800d1f0:	9300      	str	r3, [sp, #0]
 800d1f2:	6022      	str	r2, [r4, #0]
 800d1f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	f7ff fecf 	bl	800cf9c <__cvt>
 800d1fe:	9b06      	ldr	r3, [sp, #24]
 800d200:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d202:	2b47      	cmp	r3, #71	; 0x47
 800d204:	4680      	mov	r8, r0
 800d206:	d108      	bne.n	800d21a <_printf_float+0x13e>
 800d208:	1cc8      	adds	r0, r1, #3
 800d20a:	db02      	blt.n	800d212 <_printf_float+0x136>
 800d20c:	6863      	ldr	r3, [r4, #4]
 800d20e:	4299      	cmp	r1, r3
 800d210:	dd41      	ble.n	800d296 <_printf_float+0x1ba>
 800d212:	f1ab 0302 	sub.w	r3, fp, #2
 800d216:	fa5f fb83 	uxtb.w	fp, r3
 800d21a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d21e:	d820      	bhi.n	800d262 <_printf_float+0x186>
 800d220:	3901      	subs	r1, #1
 800d222:	465a      	mov	r2, fp
 800d224:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d228:	9109      	str	r1, [sp, #36]	; 0x24
 800d22a:	f7ff ff19 	bl	800d060 <__exponent>
 800d22e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d230:	1813      	adds	r3, r2, r0
 800d232:	2a01      	cmp	r2, #1
 800d234:	4681      	mov	r9, r0
 800d236:	6123      	str	r3, [r4, #16]
 800d238:	dc02      	bgt.n	800d240 <_printf_float+0x164>
 800d23a:	6822      	ldr	r2, [r4, #0]
 800d23c:	07d2      	lsls	r2, r2, #31
 800d23e:	d501      	bpl.n	800d244 <_printf_float+0x168>
 800d240:	3301      	adds	r3, #1
 800d242:	6123      	str	r3, [r4, #16]
 800d244:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d09c      	beq.n	800d186 <_printf_float+0xaa>
 800d24c:	232d      	movs	r3, #45	; 0x2d
 800d24e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d252:	e798      	b.n	800d186 <_printf_float+0xaa>
 800d254:	9a06      	ldr	r2, [sp, #24]
 800d256:	2a47      	cmp	r2, #71	; 0x47
 800d258:	d1be      	bne.n	800d1d8 <_printf_float+0xfc>
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1bc      	bne.n	800d1d8 <_printf_float+0xfc>
 800d25e:	2301      	movs	r3, #1
 800d260:	e7b9      	b.n	800d1d6 <_printf_float+0xfa>
 800d262:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d266:	d118      	bne.n	800d29a <_printf_float+0x1be>
 800d268:	2900      	cmp	r1, #0
 800d26a:	6863      	ldr	r3, [r4, #4]
 800d26c:	dd0b      	ble.n	800d286 <_printf_float+0x1aa>
 800d26e:	6121      	str	r1, [r4, #16]
 800d270:	b913      	cbnz	r3, 800d278 <_printf_float+0x19c>
 800d272:	6822      	ldr	r2, [r4, #0]
 800d274:	07d0      	lsls	r0, r2, #31
 800d276:	d502      	bpl.n	800d27e <_printf_float+0x1a2>
 800d278:	3301      	adds	r3, #1
 800d27a:	440b      	add	r3, r1
 800d27c:	6123      	str	r3, [r4, #16]
 800d27e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d280:	f04f 0900 	mov.w	r9, #0
 800d284:	e7de      	b.n	800d244 <_printf_float+0x168>
 800d286:	b913      	cbnz	r3, 800d28e <_printf_float+0x1b2>
 800d288:	6822      	ldr	r2, [r4, #0]
 800d28a:	07d2      	lsls	r2, r2, #31
 800d28c:	d501      	bpl.n	800d292 <_printf_float+0x1b6>
 800d28e:	3302      	adds	r3, #2
 800d290:	e7f4      	b.n	800d27c <_printf_float+0x1a0>
 800d292:	2301      	movs	r3, #1
 800d294:	e7f2      	b.n	800d27c <_printf_float+0x1a0>
 800d296:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d29c:	4299      	cmp	r1, r3
 800d29e:	db05      	blt.n	800d2ac <_printf_float+0x1d0>
 800d2a0:	6823      	ldr	r3, [r4, #0]
 800d2a2:	6121      	str	r1, [r4, #16]
 800d2a4:	07d8      	lsls	r0, r3, #31
 800d2a6:	d5ea      	bpl.n	800d27e <_printf_float+0x1a2>
 800d2a8:	1c4b      	adds	r3, r1, #1
 800d2aa:	e7e7      	b.n	800d27c <_printf_float+0x1a0>
 800d2ac:	2900      	cmp	r1, #0
 800d2ae:	bfd4      	ite	le
 800d2b0:	f1c1 0202 	rsble	r2, r1, #2
 800d2b4:	2201      	movgt	r2, #1
 800d2b6:	4413      	add	r3, r2
 800d2b8:	e7e0      	b.n	800d27c <_printf_float+0x1a0>
 800d2ba:	6823      	ldr	r3, [r4, #0]
 800d2bc:	055a      	lsls	r2, r3, #21
 800d2be:	d407      	bmi.n	800d2d0 <_printf_float+0x1f4>
 800d2c0:	6923      	ldr	r3, [r4, #16]
 800d2c2:	4642      	mov	r2, r8
 800d2c4:	4631      	mov	r1, r6
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	47b8      	blx	r7
 800d2ca:	3001      	adds	r0, #1
 800d2cc:	d12c      	bne.n	800d328 <_printf_float+0x24c>
 800d2ce:	e764      	b.n	800d19a <_printf_float+0xbe>
 800d2d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d2d4:	f240 80e0 	bls.w	800d498 <_printf_float+0x3bc>
 800d2d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d2dc:	2200      	movs	r2, #0
 800d2de:	2300      	movs	r3, #0
 800d2e0:	f7f3 fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d034      	beq.n	800d352 <_printf_float+0x276>
 800d2e8:	4a37      	ldr	r2, [pc, #220]	; (800d3c8 <_printf_float+0x2ec>)
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	4631      	mov	r1, r6
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	47b8      	blx	r7
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	f43f af51 	beq.w	800d19a <_printf_float+0xbe>
 800d2f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	db02      	blt.n	800d306 <_printf_float+0x22a>
 800d300:	6823      	ldr	r3, [r4, #0]
 800d302:	07d8      	lsls	r0, r3, #31
 800d304:	d510      	bpl.n	800d328 <_printf_float+0x24c>
 800d306:	ee18 3a10 	vmov	r3, s16
 800d30a:	4652      	mov	r2, sl
 800d30c:	4631      	mov	r1, r6
 800d30e:	4628      	mov	r0, r5
 800d310:	47b8      	blx	r7
 800d312:	3001      	adds	r0, #1
 800d314:	f43f af41 	beq.w	800d19a <_printf_float+0xbe>
 800d318:	f04f 0800 	mov.w	r8, #0
 800d31c:	f104 091a 	add.w	r9, r4, #26
 800d320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d322:	3b01      	subs	r3, #1
 800d324:	4543      	cmp	r3, r8
 800d326:	dc09      	bgt.n	800d33c <_printf_float+0x260>
 800d328:	6823      	ldr	r3, [r4, #0]
 800d32a:	079b      	lsls	r3, r3, #30
 800d32c:	f100 8107 	bmi.w	800d53e <_printf_float+0x462>
 800d330:	68e0      	ldr	r0, [r4, #12]
 800d332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d334:	4298      	cmp	r0, r3
 800d336:	bfb8      	it	lt
 800d338:	4618      	movlt	r0, r3
 800d33a:	e730      	b.n	800d19e <_printf_float+0xc2>
 800d33c:	2301      	movs	r3, #1
 800d33e:	464a      	mov	r2, r9
 800d340:	4631      	mov	r1, r6
 800d342:	4628      	mov	r0, r5
 800d344:	47b8      	blx	r7
 800d346:	3001      	adds	r0, #1
 800d348:	f43f af27 	beq.w	800d19a <_printf_float+0xbe>
 800d34c:	f108 0801 	add.w	r8, r8, #1
 800d350:	e7e6      	b.n	800d320 <_printf_float+0x244>
 800d352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d354:	2b00      	cmp	r3, #0
 800d356:	dc39      	bgt.n	800d3cc <_printf_float+0x2f0>
 800d358:	4a1b      	ldr	r2, [pc, #108]	; (800d3c8 <_printf_float+0x2ec>)
 800d35a:	2301      	movs	r3, #1
 800d35c:	4631      	mov	r1, r6
 800d35e:	4628      	mov	r0, r5
 800d360:	47b8      	blx	r7
 800d362:	3001      	adds	r0, #1
 800d364:	f43f af19 	beq.w	800d19a <_printf_float+0xbe>
 800d368:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d36c:	4313      	orrs	r3, r2
 800d36e:	d102      	bne.n	800d376 <_printf_float+0x29a>
 800d370:	6823      	ldr	r3, [r4, #0]
 800d372:	07d9      	lsls	r1, r3, #31
 800d374:	d5d8      	bpl.n	800d328 <_printf_float+0x24c>
 800d376:	ee18 3a10 	vmov	r3, s16
 800d37a:	4652      	mov	r2, sl
 800d37c:	4631      	mov	r1, r6
 800d37e:	4628      	mov	r0, r5
 800d380:	47b8      	blx	r7
 800d382:	3001      	adds	r0, #1
 800d384:	f43f af09 	beq.w	800d19a <_printf_float+0xbe>
 800d388:	f04f 0900 	mov.w	r9, #0
 800d38c:	f104 0a1a 	add.w	sl, r4, #26
 800d390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d392:	425b      	negs	r3, r3
 800d394:	454b      	cmp	r3, r9
 800d396:	dc01      	bgt.n	800d39c <_printf_float+0x2c0>
 800d398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d39a:	e792      	b.n	800d2c2 <_printf_float+0x1e6>
 800d39c:	2301      	movs	r3, #1
 800d39e:	4652      	mov	r2, sl
 800d3a0:	4631      	mov	r1, r6
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	47b8      	blx	r7
 800d3a6:	3001      	adds	r0, #1
 800d3a8:	f43f aef7 	beq.w	800d19a <_printf_float+0xbe>
 800d3ac:	f109 0901 	add.w	r9, r9, #1
 800d3b0:	e7ee      	b.n	800d390 <_printf_float+0x2b4>
 800d3b2:	bf00      	nop
 800d3b4:	7fefffff 	.word	0x7fefffff
 800d3b8:	080108e8 	.word	0x080108e8
 800d3bc:	080108ec 	.word	0x080108ec
 800d3c0:	080108f0 	.word	0x080108f0
 800d3c4:	080108f4 	.word	0x080108f4
 800d3c8:	080108f8 	.word	0x080108f8
 800d3cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	bfa8      	it	ge
 800d3d4:	461a      	movge	r2, r3
 800d3d6:	2a00      	cmp	r2, #0
 800d3d8:	4691      	mov	r9, r2
 800d3da:	dc37      	bgt.n	800d44c <_printf_float+0x370>
 800d3dc:	f04f 0b00 	mov.w	fp, #0
 800d3e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3e4:	f104 021a 	add.w	r2, r4, #26
 800d3e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d3ea:	9305      	str	r3, [sp, #20]
 800d3ec:	eba3 0309 	sub.w	r3, r3, r9
 800d3f0:	455b      	cmp	r3, fp
 800d3f2:	dc33      	bgt.n	800d45c <_printf_float+0x380>
 800d3f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	db3b      	blt.n	800d474 <_printf_float+0x398>
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	07da      	lsls	r2, r3, #31
 800d400:	d438      	bmi.n	800d474 <_printf_float+0x398>
 800d402:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d406:	eba2 0903 	sub.w	r9, r2, r3
 800d40a:	9b05      	ldr	r3, [sp, #20]
 800d40c:	1ad2      	subs	r2, r2, r3
 800d40e:	4591      	cmp	r9, r2
 800d410:	bfa8      	it	ge
 800d412:	4691      	movge	r9, r2
 800d414:	f1b9 0f00 	cmp.w	r9, #0
 800d418:	dc35      	bgt.n	800d486 <_printf_float+0x3aa>
 800d41a:	f04f 0800 	mov.w	r8, #0
 800d41e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d422:	f104 0a1a 	add.w	sl, r4, #26
 800d426:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d42a:	1a9b      	subs	r3, r3, r2
 800d42c:	eba3 0309 	sub.w	r3, r3, r9
 800d430:	4543      	cmp	r3, r8
 800d432:	f77f af79 	ble.w	800d328 <_printf_float+0x24c>
 800d436:	2301      	movs	r3, #1
 800d438:	4652      	mov	r2, sl
 800d43a:	4631      	mov	r1, r6
 800d43c:	4628      	mov	r0, r5
 800d43e:	47b8      	blx	r7
 800d440:	3001      	adds	r0, #1
 800d442:	f43f aeaa 	beq.w	800d19a <_printf_float+0xbe>
 800d446:	f108 0801 	add.w	r8, r8, #1
 800d44a:	e7ec      	b.n	800d426 <_printf_float+0x34a>
 800d44c:	4613      	mov	r3, r2
 800d44e:	4631      	mov	r1, r6
 800d450:	4642      	mov	r2, r8
 800d452:	4628      	mov	r0, r5
 800d454:	47b8      	blx	r7
 800d456:	3001      	adds	r0, #1
 800d458:	d1c0      	bne.n	800d3dc <_printf_float+0x300>
 800d45a:	e69e      	b.n	800d19a <_printf_float+0xbe>
 800d45c:	2301      	movs	r3, #1
 800d45e:	4631      	mov	r1, r6
 800d460:	4628      	mov	r0, r5
 800d462:	9205      	str	r2, [sp, #20]
 800d464:	47b8      	blx	r7
 800d466:	3001      	adds	r0, #1
 800d468:	f43f ae97 	beq.w	800d19a <_printf_float+0xbe>
 800d46c:	9a05      	ldr	r2, [sp, #20]
 800d46e:	f10b 0b01 	add.w	fp, fp, #1
 800d472:	e7b9      	b.n	800d3e8 <_printf_float+0x30c>
 800d474:	ee18 3a10 	vmov	r3, s16
 800d478:	4652      	mov	r2, sl
 800d47a:	4631      	mov	r1, r6
 800d47c:	4628      	mov	r0, r5
 800d47e:	47b8      	blx	r7
 800d480:	3001      	adds	r0, #1
 800d482:	d1be      	bne.n	800d402 <_printf_float+0x326>
 800d484:	e689      	b.n	800d19a <_printf_float+0xbe>
 800d486:	9a05      	ldr	r2, [sp, #20]
 800d488:	464b      	mov	r3, r9
 800d48a:	4442      	add	r2, r8
 800d48c:	4631      	mov	r1, r6
 800d48e:	4628      	mov	r0, r5
 800d490:	47b8      	blx	r7
 800d492:	3001      	adds	r0, #1
 800d494:	d1c1      	bne.n	800d41a <_printf_float+0x33e>
 800d496:	e680      	b.n	800d19a <_printf_float+0xbe>
 800d498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d49a:	2a01      	cmp	r2, #1
 800d49c:	dc01      	bgt.n	800d4a2 <_printf_float+0x3c6>
 800d49e:	07db      	lsls	r3, r3, #31
 800d4a0:	d53a      	bpl.n	800d518 <_printf_float+0x43c>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	4642      	mov	r2, r8
 800d4a6:	4631      	mov	r1, r6
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	47b8      	blx	r7
 800d4ac:	3001      	adds	r0, #1
 800d4ae:	f43f ae74 	beq.w	800d19a <_printf_float+0xbe>
 800d4b2:	ee18 3a10 	vmov	r3, s16
 800d4b6:	4652      	mov	r2, sl
 800d4b8:	4631      	mov	r1, r6
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	47b8      	blx	r7
 800d4be:	3001      	adds	r0, #1
 800d4c0:	f43f ae6b 	beq.w	800d19a <_printf_float+0xbe>
 800d4c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d4d0:	f7f3 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4d4:	b9d8      	cbnz	r0, 800d50e <_printf_float+0x432>
 800d4d6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d4da:	f108 0201 	add.w	r2, r8, #1
 800d4de:	4631      	mov	r1, r6
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	47b8      	blx	r7
 800d4e4:	3001      	adds	r0, #1
 800d4e6:	d10e      	bne.n	800d506 <_printf_float+0x42a>
 800d4e8:	e657      	b.n	800d19a <_printf_float+0xbe>
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	4652      	mov	r2, sl
 800d4ee:	4631      	mov	r1, r6
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	47b8      	blx	r7
 800d4f4:	3001      	adds	r0, #1
 800d4f6:	f43f ae50 	beq.w	800d19a <_printf_float+0xbe>
 800d4fa:	f108 0801 	add.w	r8, r8, #1
 800d4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d500:	3b01      	subs	r3, #1
 800d502:	4543      	cmp	r3, r8
 800d504:	dcf1      	bgt.n	800d4ea <_printf_float+0x40e>
 800d506:	464b      	mov	r3, r9
 800d508:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d50c:	e6da      	b.n	800d2c4 <_printf_float+0x1e8>
 800d50e:	f04f 0800 	mov.w	r8, #0
 800d512:	f104 0a1a 	add.w	sl, r4, #26
 800d516:	e7f2      	b.n	800d4fe <_printf_float+0x422>
 800d518:	2301      	movs	r3, #1
 800d51a:	4642      	mov	r2, r8
 800d51c:	e7df      	b.n	800d4de <_printf_float+0x402>
 800d51e:	2301      	movs	r3, #1
 800d520:	464a      	mov	r2, r9
 800d522:	4631      	mov	r1, r6
 800d524:	4628      	mov	r0, r5
 800d526:	47b8      	blx	r7
 800d528:	3001      	adds	r0, #1
 800d52a:	f43f ae36 	beq.w	800d19a <_printf_float+0xbe>
 800d52e:	f108 0801 	add.w	r8, r8, #1
 800d532:	68e3      	ldr	r3, [r4, #12]
 800d534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d536:	1a5b      	subs	r3, r3, r1
 800d538:	4543      	cmp	r3, r8
 800d53a:	dcf0      	bgt.n	800d51e <_printf_float+0x442>
 800d53c:	e6f8      	b.n	800d330 <_printf_float+0x254>
 800d53e:	f04f 0800 	mov.w	r8, #0
 800d542:	f104 0919 	add.w	r9, r4, #25
 800d546:	e7f4      	b.n	800d532 <_printf_float+0x456>

0800d548 <_printf_common>:
 800d548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d54c:	4616      	mov	r6, r2
 800d54e:	4699      	mov	r9, r3
 800d550:	688a      	ldr	r2, [r1, #8]
 800d552:	690b      	ldr	r3, [r1, #16]
 800d554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d558:	4293      	cmp	r3, r2
 800d55a:	bfb8      	it	lt
 800d55c:	4613      	movlt	r3, r2
 800d55e:	6033      	str	r3, [r6, #0]
 800d560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d564:	4607      	mov	r7, r0
 800d566:	460c      	mov	r4, r1
 800d568:	b10a      	cbz	r2, 800d56e <_printf_common+0x26>
 800d56a:	3301      	adds	r3, #1
 800d56c:	6033      	str	r3, [r6, #0]
 800d56e:	6823      	ldr	r3, [r4, #0]
 800d570:	0699      	lsls	r1, r3, #26
 800d572:	bf42      	ittt	mi
 800d574:	6833      	ldrmi	r3, [r6, #0]
 800d576:	3302      	addmi	r3, #2
 800d578:	6033      	strmi	r3, [r6, #0]
 800d57a:	6825      	ldr	r5, [r4, #0]
 800d57c:	f015 0506 	ands.w	r5, r5, #6
 800d580:	d106      	bne.n	800d590 <_printf_common+0x48>
 800d582:	f104 0a19 	add.w	sl, r4, #25
 800d586:	68e3      	ldr	r3, [r4, #12]
 800d588:	6832      	ldr	r2, [r6, #0]
 800d58a:	1a9b      	subs	r3, r3, r2
 800d58c:	42ab      	cmp	r3, r5
 800d58e:	dc26      	bgt.n	800d5de <_printf_common+0x96>
 800d590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d594:	1e13      	subs	r3, r2, #0
 800d596:	6822      	ldr	r2, [r4, #0]
 800d598:	bf18      	it	ne
 800d59a:	2301      	movne	r3, #1
 800d59c:	0692      	lsls	r2, r2, #26
 800d59e:	d42b      	bmi.n	800d5f8 <_printf_common+0xb0>
 800d5a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5a4:	4649      	mov	r1, r9
 800d5a6:	4638      	mov	r0, r7
 800d5a8:	47c0      	blx	r8
 800d5aa:	3001      	adds	r0, #1
 800d5ac:	d01e      	beq.n	800d5ec <_printf_common+0xa4>
 800d5ae:	6823      	ldr	r3, [r4, #0]
 800d5b0:	6922      	ldr	r2, [r4, #16]
 800d5b2:	f003 0306 	and.w	r3, r3, #6
 800d5b6:	2b04      	cmp	r3, #4
 800d5b8:	bf02      	ittt	eq
 800d5ba:	68e5      	ldreq	r5, [r4, #12]
 800d5bc:	6833      	ldreq	r3, [r6, #0]
 800d5be:	1aed      	subeq	r5, r5, r3
 800d5c0:	68a3      	ldr	r3, [r4, #8]
 800d5c2:	bf0c      	ite	eq
 800d5c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5c8:	2500      	movne	r5, #0
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	bfc4      	itt	gt
 800d5ce:	1a9b      	subgt	r3, r3, r2
 800d5d0:	18ed      	addgt	r5, r5, r3
 800d5d2:	2600      	movs	r6, #0
 800d5d4:	341a      	adds	r4, #26
 800d5d6:	42b5      	cmp	r5, r6
 800d5d8:	d11a      	bne.n	800d610 <_printf_common+0xc8>
 800d5da:	2000      	movs	r0, #0
 800d5dc:	e008      	b.n	800d5f0 <_printf_common+0xa8>
 800d5de:	2301      	movs	r3, #1
 800d5e0:	4652      	mov	r2, sl
 800d5e2:	4649      	mov	r1, r9
 800d5e4:	4638      	mov	r0, r7
 800d5e6:	47c0      	blx	r8
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	d103      	bne.n	800d5f4 <_printf_common+0xac>
 800d5ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5f4:	3501      	adds	r5, #1
 800d5f6:	e7c6      	b.n	800d586 <_printf_common+0x3e>
 800d5f8:	18e1      	adds	r1, r4, r3
 800d5fa:	1c5a      	adds	r2, r3, #1
 800d5fc:	2030      	movs	r0, #48	; 0x30
 800d5fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d602:	4422      	add	r2, r4
 800d604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d60c:	3302      	adds	r3, #2
 800d60e:	e7c7      	b.n	800d5a0 <_printf_common+0x58>
 800d610:	2301      	movs	r3, #1
 800d612:	4622      	mov	r2, r4
 800d614:	4649      	mov	r1, r9
 800d616:	4638      	mov	r0, r7
 800d618:	47c0      	blx	r8
 800d61a:	3001      	adds	r0, #1
 800d61c:	d0e6      	beq.n	800d5ec <_printf_common+0xa4>
 800d61e:	3601      	adds	r6, #1
 800d620:	e7d9      	b.n	800d5d6 <_printf_common+0x8e>
	...

0800d624 <_printf_i>:
 800d624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d628:	7e0f      	ldrb	r7, [r1, #24]
 800d62a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d62c:	2f78      	cmp	r7, #120	; 0x78
 800d62e:	4691      	mov	r9, r2
 800d630:	4680      	mov	r8, r0
 800d632:	460c      	mov	r4, r1
 800d634:	469a      	mov	sl, r3
 800d636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d63a:	d807      	bhi.n	800d64c <_printf_i+0x28>
 800d63c:	2f62      	cmp	r7, #98	; 0x62
 800d63e:	d80a      	bhi.n	800d656 <_printf_i+0x32>
 800d640:	2f00      	cmp	r7, #0
 800d642:	f000 80d4 	beq.w	800d7ee <_printf_i+0x1ca>
 800d646:	2f58      	cmp	r7, #88	; 0x58
 800d648:	f000 80c0 	beq.w	800d7cc <_printf_i+0x1a8>
 800d64c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d654:	e03a      	b.n	800d6cc <_printf_i+0xa8>
 800d656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d65a:	2b15      	cmp	r3, #21
 800d65c:	d8f6      	bhi.n	800d64c <_printf_i+0x28>
 800d65e:	a101      	add	r1, pc, #4	; (adr r1, 800d664 <_printf_i+0x40>)
 800d660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d664:	0800d6bd 	.word	0x0800d6bd
 800d668:	0800d6d1 	.word	0x0800d6d1
 800d66c:	0800d64d 	.word	0x0800d64d
 800d670:	0800d64d 	.word	0x0800d64d
 800d674:	0800d64d 	.word	0x0800d64d
 800d678:	0800d64d 	.word	0x0800d64d
 800d67c:	0800d6d1 	.word	0x0800d6d1
 800d680:	0800d64d 	.word	0x0800d64d
 800d684:	0800d64d 	.word	0x0800d64d
 800d688:	0800d64d 	.word	0x0800d64d
 800d68c:	0800d64d 	.word	0x0800d64d
 800d690:	0800d7d5 	.word	0x0800d7d5
 800d694:	0800d6fd 	.word	0x0800d6fd
 800d698:	0800d78f 	.word	0x0800d78f
 800d69c:	0800d64d 	.word	0x0800d64d
 800d6a0:	0800d64d 	.word	0x0800d64d
 800d6a4:	0800d7f7 	.word	0x0800d7f7
 800d6a8:	0800d64d 	.word	0x0800d64d
 800d6ac:	0800d6fd 	.word	0x0800d6fd
 800d6b0:	0800d64d 	.word	0x0800d64d
 800d6b4:	0800d64d 	.word	0x0800d64d
 800d6b8:	0800d797 	.word	0x0800d797
 800d6bc:	682b      	ldr	r3, [r5, #0]
 800d6be:	1d1a      	adds	r2, r3, #4
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	602a      	str	r2, [r5, #0]
 800d6c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e09f      	b.n	800d810 <_printf_i+0x1ec>
 800d6d0:	6820      	ldr	r0, [r4, #0]
 800d6d2:	682b      	ldr	r3, [r5, #0]
 800d6d4:	0607      	lsls	r7, r0, #24
 800d6d6:	f103 0104 	add.w	r1, r3, #4
 800d6da:	6029      	str	r1, [r5, #0]
 800d6dc:	d501      	bpl.n	800d6e2 <_printf_i+0xbe>
 800d6de:	681e      	ldr	r6, [r3, #0]
 800d6e0:	e003      	b.n	800d6ea <_printf_i+0xc6>
 800d6e2:	0646      	lsls	r6, r0, #25
 800d6e4:	d5fb      	bpl.n	800d6de <_printf_i+0xba>
 800d6e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d6ea:	2e00      	cmp	r6, #0
 800d6ec:	da03      	bge.n	800d6f6 <_printf_i+0xd2>
 800d6ee:	232d      	movs	r3, #45	; 0x2d
 800d6f0:	4276      	negs	r6, r6
 800d6f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6f6:	485a      	ldr	r0, [pc, #360]	; (800d860 <_printf_i+0x23c>)
 800d6f8:	230a      	movs	r3, #10
 800d6fa:	e012      	b.n	800d722 <_printf_i+0xfe>
 800d6fc:	682b      	ldr	r3, [r5, #0]
 800d6fe:	6820      	ldr	r0, [r4, #0]
 800d700:	1d19      	adds	r1, r3, #4
 800d702:	6029      	str	r1, [r5, #0]
 800d704:	0605      	lsls	r5, r0, #24
 800d706:	d501      	bpl.n	800d70c <_printf_i+0xe8>
 800d708:	681e      	ldr	r6, [r3, #0]
 800d70a:	e002      	b.n	800d712 <_printf_i+0xee>
 800d70c:	0641      	lsls	r1, r0, #25
 800d70e:	d5fb      	bpl.n	800d708 <_printf_i+0xe4>
 800d710:	881e      	ldrh	r6, [r3, #0]
 800d712:	4853      	ldr	r0, [pc, #332]	; (800d860 <_printf_i+0x23c>)
 800d714:	2f6f      	cmp	r7, #111	; 0x6f
 800d716:	bf0c      	ite	eq
 800d718:	2308      	moveq	r3, #8
 800d71a:	230a      	movne	r3, #10
 800d71c:	2100      	movs	r1, #0
 800d71e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d722:	6865      	ldr	r5, [r4, #4]
 800d724:	60a5      	str	r5, [r4, #8]
 800d726:	2d00      	cmp	r5, #0
 800d728:	bfa2      	ittt	ge
 800d72a:	6821      	ldrge	r1, [r4, #0]
 800d72c:	f021 0104 	bicge.w	r1, r1, #4
 800d730:	6021      	strge	r1, [r4, #0]
 800d732:	b90e      	cbnz	r6, 800d738 <_printf_i+0x114>
 800d734:	2d00      	cmp	r5, #0
 800d736:	d04b      	beq.n	800d7d0 <_printf_i+0x1ac>
 800d738:	4615      	mov	r5, r2
 800d73a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d73e:	fb03 6711 	mls	r7, r3, r1, r6
 800d742:	5dc7      	ldrb	r7, [r0, r7]
 800d744:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d748:	4637      	mov	r7, r6
 800d74a:	42bb      	cmp	r3, r7
 800d74c:	460e      	mov	r6, r1
 800d74e:	d9f4      	bls.n	800d73a <_printf_i+0x116>
 800d750:	2b08      	cmp	r3, #8
 800d752:	d10b      	bne.n	800d76c <_printf_i+0x148>
 800d754:	6823      	ldr	r3, [r4, #0]
 800d756:	07de      	lsls	r6, r3, #31
 800d758:	d508      	bpl.n	800d76c <_printf_i+0x148>
 800d75a:	6923      	ldr	r3, [r4, #16]
 800d75c:	6861      	ldr	r1, [r4, #4]
 800d75e:	4299      	cmp	r1, r3
 800d760:	bfde      	ittt	le
 800d762:	2330      	movle	r3, #48	; 0x30
 800d764:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d768:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d76c:	1b52      	subs	r2, r2, r5
 800d76e:	6122      	str	r2, [r4, #16]
 800d770:	f8cd a000 	str.w	sl, [sp]
 800d774:	464b      	mov	r3, r9
 800d776:	aa03      	add	r2, sp, #12
 800d778:	4621      	mov	r1, r4
 800d77a:	4640      	mov	r0, r8
 800d77c:	f7ff fee4 	bl	800d548 <_printf_common>
 800d780:	3001      	adds	r0, #1
 800d782:	d14a      	bne.n	800d81a <_printf_i+0x1f6>
 800d784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d788:	b004      	add	sp, #16
 800d78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d78e:	6823      	ldr	r3, [r4, #0]
 800d790:	f043 0320 	orr.w	r3, r3, #32
 800d794:	6023      	str	r3, [r4, #0]
 800d796:	4833      	ldr	r0, [pc, #204]	; (800d864 <_printf_i+0x240>)
 800d798:	2778      	movs	r7, #120	; 0x78
 800d79a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d79e:	6823      	ldr	r3, [r4, #0]
 800d7a0:	6829      	ldr	r1, [r5, #0]
 800d7a2:	061f      	lsls	r7, r3, #24
 800d7a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d7a8:	d402      	bmi.n	800d7b0 <_printf_i+0x18c>
 800d7aa:	065f      	lsls	r7, r3, #25
 800d7ac:	bf48      	it	mi
 800d7ae:	b2b6      	uxthmi	r6, r6
 800d7b0:	07df      	lsls	r7, r3, #31
 800d7b2:	bf48      	it	mi
 800d7b4:	f043 0320 	orrmi.w	r3, r3, #32
 800d7b8:	6029      	str	r1, [r5, #0]
 800d7ba:	bf48      	it	mi
 800d7bc:	6023      	strmi	r3, [r4, #0]
 800d7be:	b91e      	cbnz	r6, 800d7c8 <_printf_i+0x1a4>
 800d7c0:	6823      	ldr	r3, [r4, #0]
 800d7c2:	f023 0320 	bic.w	r3, r3, #32
 800d7c6:	6023      	str	r3, [r4, #0]
 800d7c8:	2310      	movs	r3, #16
 800d7ca:	e7a7      	b.n	800d71c <_printf_i+0xf8>
 800d7cc:	4824      	ldr	r0, [pc, #144]	; (800d860 <_printf_i+0x23c>)
 800d7ce:	e7e4      	b.n	800d79a <_printf_i+0x176>
 800d7d0:	4615      	mov	r5, r2
 800d7d2:	e7bd      	b.n	800d750 <_printf_i+0x12c>
 800d7d4:	682b      	ldr	r3, [r5, #0]
 800d7d6:	6826      	ldr	r6, [r4, #0]
 800d7d8:	6961      	ldr	r1, [r4, #20]
 800d7da:	1d18      	adds	r0, r3, #4
 800d7dc:	6028      	str	r0, [r5, #0]
 800d7de:	0635      	lsls	r5, r6, #24
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	d501      	bpl.n	800d7e8 <_printf_i+0x1c4>
 800d7e4:	6019      	str	r1, [r3, #0]
 800d7e6:	e002      	b.n	800d7ee <_printf_i+0x1ca>
 800d7e8:	0670      	lsls	r0, r6, #25
 800d7ea:	d5fb      	bpl.n	800d7e4 <_printf_i+0x1c0>
 800d7ec:	8019      	strh	r1, [r3, #0]
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	6123      	str	r3, [r4, #16]
 800d7f2:	4615      	mov	r5, r2
 800d7f4:	e7bc      	b.n	800d770 <_printf_i+0x14c>
 800d7f6:	682b      	ldr	r3, [r5, #0]
 800d7f8:	1d1a      	adds	r2, r3, #4
 800d7fa:	602a      	str	r2, [r5, #0]
 800d7fc:	681d      	ldr	r5, [r3, #0]
 800d7fe:	6862      	ldr	r2, [r4, #4]
 800d800:	2100      	movs	r1, #0
 800d802:	4628      	mov	r0, r5
 800d804:	f7f2 fce4 	bl	80001d0 <memchr>
 800d808:	b108      	cbz	r0, 800d80e <_printf_i+0x1ea>
 800d80a:	1b40      	subs	r0, r0, r5
 800d80c:	6060      	str	r0, [r4, #4]
 800d80e:	6863      	ldr	r3, [r4, #4]
 800d810:	6123      	str	r3, [r4, #16]
 800d812:	2300      	movs	r3, #0
 800d814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d818:	e7aa      	b.n	800d770 <_printf_i+0x14c>
 800d81a:	6923      	ldr	r3, [r4, #16]
 800d81c:	462a      	mov	r2, r5
 800d81e:	4649      	mov	r1, r9
 800d820:	4640      	mov	r0, r8
 800d822:	47d0      	blx	sl
 800d824:	3001      	adds	r0, #1
 800d826:	d0ad      	beq.n	800d784 <_printf_i+0x160>
 800d828:	6823      	ldr	r3, [r4, #0]
 800d82a:	079b      	lsls	r3, r3, #30
 800d82c:	d413      	bmi.n	800d856 <_printf_i+0x232>
 800d82e:	68e0      	ldr	r0, [r4, #12]
 800d830:	9b03      	ldr	r3, [sp, #12]
 800d832:	4298      	cmp	r0, r3
 800d834:	bfb8      	it	lt
 800d836:	4618      	movlt	r0, r3
 800d838:	e7a6      	b.n	800d788 <_printf_i+0x164>
 800d83a:	2301      	movs	r3, #1
 800d83c:	4632      	mov	r2, r6
 800d83e:	4649      	mov	r1, r9
 800d840:	4640      	mov	r0, r8
 800d842:	47d0      	blx	sl
 800d844:	3001      	adds	r0, #1
 800d846:	d09d      	beq.n	800d784 <_printf_i+0x160>
 800d848:	3501      	adds	r5, #1
 800d84a:	68e3      	ldr	r3, [r4, #12]
 800d84c:	9903      	ldr	r1, [sp, #12]
 800d84e:	1a5b      	subs	r3, r3, r1
 800d850:	42ab      	cmp	r3, r5
 800d852:	dcf2      	bgt.n	800d83a <_printf_i+0x216>
 800d854:	e7eb      	b.n	800d82e <_printf_i+0x20a>
 800d856:	2500      	movs	r5, #0
 800d858:	f104 0619 	add.w	r6, r4, #25
 800d85c:	e7f5      	b.n	800d84a <_printf_i+0x226>
 800d85e:	bf00      	nop
 800d860:	080108fa 	.word	0x080108fa
 800d864:	0801090b 	.word	0x0801090b

0800d868 <siprintf>:
 800d868:	b40e      	push	{r1, r2, r3}
 800d86a:	b500      	push	{lr}
 800d86c:	b09c      	sub	sp, #112	; 0x70
 800d86e:	ab1d      	add	r3, sp, #116	; 0x74
 800d870:	9002      	str	r0, [sp, #8]
 800d872:	9006      	str	r0, [sp, #24]
 800d874:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d878:	4809      	ldr	r0, [pc, #36]	; (800d8a0 <siprintf+0x38>)
 800d87a:	9107      	str	r1, [sp, #28]
 800d87c:	9104      	str	r1, [sp, #16]
 800d87e:	4909      	ldr	r1, [pc, #36]	; (800d8a4 <siprintf+0x3c>)
 800d880:	f853 2b04 	ldr.w	r2, [r3], #4
 800d884:	9105      	str	r1, [sp, #20]
 800d886:	6800      	ldr	r0, [r0, #0]
 800d888:	9301      	str	r3, [sp, #4]
 800d88a:	a902      	add	r1, sp, #8
 800d88c:	f000 ffec 	bl	800e868 <_svfiprintf_r>
 800d890:	9b02      	ldr	r3, [sp, #8]
 800d892:	2200      	movs	r2, #0
 800d894:	701a      	strb	r2, [r3, #0]
 800d896:	b01c      	add	sp, #112	; 0x70
 800d898:	f85d eb04 	ldr.w	lr, [sp], #4
 800d89c:	b003      	add	sp, #12
 800d89e:	4770      	bx	lr
 800d8a0:	20000088 	.word	0x20000088
 800d8a4:	ffff0208 	.word	0xffff0208

0800d8a8 <std>:
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	b510      	push	{r4, lr}
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	e9c0 3300 	strd	r3, r3, [r0]
 800d8b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8b6:	6083      	str	r3, [r0, #8]
 800d8b8:	8181      	strh	r1, [r0, #12]
 800d8ba:	6643      	str	r3, [r0, #100]	; 0x64
 800d8bc:	81c2      	strh	r2, [r0, #14]
 800d8be:	6183      	str	r3, [r0, #24]
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	2208      	movs	r2, #8
 800d8c4:	305c      	adds	r0, #92	; 0x5c
 800d8c6:	f000 f8b1 	bl	800da2c <memset>
 800d8ca:	4b0d      	ldr	r3, [pc, #52]	; (800d900 <std+0x58>)
 800d8cc:	6263      	str	r3, [r4, #36]	; 0x24
 800d8ce:	4b0d      	ldr	r3, [pc, #52]	; (800d904 <std+0x5c>)
 800d8d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8d2:	4b0d      	ldr	r3, [pc, #52]	; (800d908 <std+0x60>)
 800d8d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8d6:	4b0d      	ldr	r3, [pc, #52]	; (800d90c <std+0x64>)
 800d8d8:	6323      	str	r3, [r4, #48]	; 0x30
 800d8da:	4b0d      	ldr	r3, [pc, #52]	; (800d910 <std+0x68>)
 800d8dc:	6224      	str	r4, [r4, #32]
 800d8de:	429c      	cmp	r4, r3
 800d8e0:	d006      	beq.n	800d8f0 <std+0x48>
 800d8e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d8e6:	4294      	cmp	r4, r2
 800d8e8:	d002      	beq.n	800d8f0 <std+0x48>
 800d8ea:	33d0      	adds	r3, #208	; 0xd0
 800d8ec:	429c      	cmp	r4, r3
 800d8ee:	d105      	bne.n	800d8fc <std+0x54>
 800d8f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8f8:	f000 b8ce 	b.w	800da98 <__retarget_lock_init_recursive>
 800d8fc:	bd10      	pop	{r4, pc}
 800d8fe:	bf00      	nop
 800d900:	0800f421 	.word	0x0800f421
 800d904:	0800f443 	.word	0x0800f443
 800d908:	0800f47b 	.word	0x0800f47b
 800d90c:	0800f49f 	.word	0x0800f49f
 800d910:	2000536c 	.word	0x2000536c

0800d914 <stdio_exit_handler>:
 800d914:	4a02      	ldr	r2, [pc, #8]	; (800d920 <stdio_exit_handler+0xc>)
 800d916:	4903      	ldr	r1, [pc, #12]	; (800d924 <stdio_exit_handler+0x10>)
 800d918:	4803      	ldr	r0, [pc, #12]	; (800d928 <stdio_exit_handler+0x14>)
 800d91a:	f000 b869 	b.w	800d9f0 <_fwalk_sglue>
 800d91e:	bf00      	nop
 800d920:	20000030 	.word	0x20000030
 800d924:	0800ecc1 	.word	0x0800ecc1
 800d928:	2000003c 	.word	0x2000003c

0800d92c <cleanup_stdio>:
 800d92c:	6841      	ldr	r1, [r0, #4]
 800d92e:	4b0c      	ldr	r3, [pc, #48]	; (800d960 <cleanup_stdio+0x34>)
 800d930:	4299      	cmp	r1, r3
 800d932:	b510      	push	{r4, lr}
 800d934:	4604      	mov	r4, r0
 800d936:	d001      	beq.n	800d93c <cleanup_stdio+0x10>
 800d938:	f001 f9c2 	bl	800ecc0 <_fflush_r>
 800d93c:	68a1      	ldr	r1, [r4, #8]
 800d93e:	4b09      	ldr	r3, [pc, #36]	; (800d964 <cleanup_stdio+0x38>)
 800d940:	4299      	cmp	r1, r3
 800d942:	d002      	beq.n	800d94a <cleanup_stdio+0x1e>
 800d944:	4620      	mov	r0, r4
 800d946:	f001 f9bb 	bl	800ecc0 <_fflush_r>
 800d94a:	68e1      	ldr	r1, [r4, #12]
 800d94c:	4b06      	ldr	r3, [pc, #24]	; (800d968 <cleanup_stdio+0x3c>)
 800d94e:	4299      	cmp	r1, r3
 800d950:	d004      	beq.n	800d95c <cleanup_stdio+0x30>
 800d952:	4620      	mov	r0, r4
 800d954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d958:	f001 b9b2 	b.w	800ecc0 <_fflush_r>
 800d95c:	bd10      	pop	{r4, pc}
 800d95e:	bf00      	nop
 800d960:	2000536c 	.word	0x2000536c
 800d964:	200053d4 	.word	0x200053d4
 800d968:	2000543c 	.word	0x2000543c

0800d96c <global_stdio_init.part.0>:
 800d96c:	b510      	push	{r4, lr}
 800d96e:	4b0b      	ldr	r3, [pc, #44]	; (800d99c <global_stdio_init.part.0+0x30>)
 800d970:	4c0b      	ldr	r4, [pc, #44]	; (800d9a0 <global_stdio_init.part.0+0x34>)
 800d972:	4a0c      	ldr	r2, [pc, #48]	; (800d9a4 <global_stdio_init.part.0+0x38>)
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	4620      	mov	r0, r4
 800d978:	2200      	movs	r2, #0
 800d97a:	2104      	movs	r1, #4
 800d97c:	f7ff ff94 	bl	800d8a8 <std>
 800d980:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d984:	2201      	movs	r2, #1
 800d986:	2109      	movs	r1, #9
 800d988:	f7ff ff8e 	bl	800d8a8 <std>
 800d98c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d990:	2202      	movs	r2, #2
 800d992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d996:	2112      	movs	r1, #18
 800d998:	f7ff bf86 	b.w	800d8a8 <std>
 800d99c:	200054a4 	.word	0x200054a4
 800d9a0:	2000536c 	.word	0x2000536c
 800d9a4:	0800d915 	.word	0x0800d915

0800d9a8 <__sfp_lock_acquire>:
 800d9a8:	4801      	ldr	r0, [pc, #4]	; (800d9b0 <__sfp_lock_acquire+0x8>)
 800d9aa:	f000 b876 	b.w	800da9a <__retarget_lock_acquire_recursive>
 800d9ae:	bf00      	nop
 800d9b0:	200054a9 	.word	0x200054a9

0800d9b4 <__sfp_lock_release>:
 800d9b4:	4801      	ldr	r0, [pc, #4]	; (800d9bc <__sfp_lock_release+0x8>)
 800d9b6:	f000 b871 	b.w	800da9c <__retarget_lock_release_recursive>
 800d9ba:	bf00      	nop
 800d9bc:	200054a9 	.word	0x200054a9

0800d9c0 <__sinit>:
 800d9c0:	b510      	push	{r4, lr}
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	f7ff fff0 	bl	800d9a8 <__sfp_lock_acquire>
 800d9c8:	6a23      	ldr	r3, [r4, #32]
 800d9ca:	b11b      	cbz	r3, 800d9d4 <__sinit+0x14>
 800d9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9d0:	f7ff bff0 	b.w	800d9b4 <__sfp_lock_release>
 800d9d4:	4b04      	ldr	r3, [pc, #16]	; (800d9e8 <__sinit+0x28>)
 800d9d6:	6223      	str	r3, [r4, #32]
 800d9d8:	4b04      	ldr	r3, [pc, #16]	; (800d9ec <__sinit+0x2c>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d1f5      	bne.n	800d9cc <__sinit+0xc>
 800d9e0:	f7ff ffc4 	bl	800d96c <global_stdio_init.part.0>
 800d9e4:	e7f2      	b.n	800d9cc <__sinit+0xc>
 800d9e6:	bf00      	nop
 800d9e8:	0800d92d 	.word	0x0800d92d
 800d9ec:	200054a4 	.word	0x200054a4

0800d9f0 <_fwalk_sglue>:
 800d9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9f4:	4607      	mov	r7, r0
 800d9f6:	4688      	mov	r8, r1
 800d9f8:	4614      	mov	r4, r2
 800d9fa:	2600      	movs	r6, #0
 800d9fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da00:	f1b9 0901 	subs.w	r9, r9, #1
 800da04:	d505      	bpl.n	800da12 <_fwalk_sglue+0x22>
 800da06:	6824      	ldr	r4, [r4, #0]
 800da08:	2c00      	cmp	r4, #0
 800da0a:	d1f7      	bne.n	800d9fc <_fwalk_sglue+0xc>
 800da0c:	4630      	mov	r0, r6
 800da0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da12:	89ab      	ldrh	r3, [r5, #12]
 800da14:	2b01      	cmp	r3, #1
 800da16:	d907      	bls.n	800da28 <_fwalk_sglue+0x38>
 800da18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da1c:	3301      	adds	r3, #1
 800da1e:	d003      	beq.n	800da28 <_fwalk_sglue+0x38>
 800da20:	4629      	mov	r1, r5
 800da22:	4638      	mov	r0, r7
 800da24:	47c0      	blx	r8
 800da26:	4306      	orrs	r6, r0
 800da28:	3568      	adds	r5, #104	; 0x68
 800da2a:	e7e9      	b.n	800da00 <_fwalk_sglue+0x10>

0800da2c <memset>:
 800da2c:	4402      	add	r2, r0
 800da2e:	4603      	mov	r3, r0
 800da30:	4293      	cmp	r3, r2
 800da32:	d100      	bne.n	800da36 <memset+0xa>
 800da34:	4770      	bx	lr
 800da36:	f803 1b01 	strb.w	r1, [r3], #1
 800da3a:	e7f9      	b.n	800da30 <memset+0x4>

0800da3c <_localeconv_r>:
 800da3c:	4800      	ldr	r0, [pc, #0]	; (800da40 <_localeconv_r+0x4>)
 800da3e:	4770      	bx	lr
 800da40:	2000017c 	.word	0x2000017c

0800da44 <__errno>:
 800da44:	4b01      	ldr	r3, [pc, #4]	; (800da4c <__errno+0x8>)
 800da46:	6818      	ldr	r0, [r3, #0]
 800da48:	4770      	bx	lr
 800da4a:	bf00      	nop
 800da4c:	20000088 	.word	0x20000088

0800da50 <__libc_init_array>:
 800da50:	b570      	push	{r4, r5, r6, lr}
 800da52:	4d0d      	ldr	r5, [pc, #52]	; (800da88 <__libc_init_array+0x38>)
 800da54:	4c0d      	ldr	r4, [pc, #52]	; (800da8c <__libc_init_array+0x3c>)
 800da56:	1b64      	subs	r4, r4, r5
 800da58:	10a4      	asrs	r4, r4, #2
 800da5a:	2600      	movs	r6, #0
 800da5c:	42a6      	cmp	r6, r4
 800da5e:	d109      	bne.n	800da74 <__libc_init_array+0x24>
 800da60:	4d0b      	ldr	r5, [pc, #44]	; (800da90 <__libc_init_array+0x40>)
 800da62:	4c0c      	ldr	r4, [pc, #48]	; (800da94 <__libc_init_array+0x44>)
 800da64:	f002 f968 	bl	800fd38 <_init>
 800da68:	1b64      	subs	r4, r4, r5
 800da6a:	10a4      	asrs	r4, r4, #2
 800da6c:	2600      	movs	r6, #0
 800da6e:	42a6      	cmp	r6, r4
 800da70:	d105      	bne.n	800da7e <__libc_init_array+0x2e>
 800da72:	bd70      	pop	{r4, r5, r6, pc}
 800da74:	f855 3b04 	ldr.w	r3, [r5], #4
 800da78:	4798      	blx	r3
 800da7a:	3601      	adds	r6, #1
 800da7c:	e7ee      	b.n	800da5c <__libc_init_array+0xc>
 800da7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800da82:	4798      	blx	r3
 800da84:	3601      	adds	r6, #1
 800da86:	e7f2      	b.n	800da6e <__libc_init_array+0x1e>
 800da88:	08010c64 	.word	0x08010c64
 800da8c:	08010c64 	.word	0x08010c64
 800da90:	08010c64 	.word	0x08010c64
 800da94:	08010c68 	.word	0x08010c68

0800da98 <__retarget_lock_init_recursive>:
 800da98:	4770      	bx	lr

0800da9a <__retarget_lock_acquire_recursive>:
 800da9a:	4770      	bx	lr

0800da9c <__retarget_lock_release_recursive>:
 800da9c:	4770      	bx	lr

0800da9e <memcpy>:
 800da9e:	440a      	add	r2, r1
 800daa0:	4291      	cmp	r1, r2
 800daa2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800daa6:	d100      	bne.n	800daaa <memcpy+0xc>
 800daa8:	4770      	bx	lr
 800daaa:	b510      	push	{r4, lr}
 800daac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dab0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dab4:	4291      	cmp	r1, r2
 800dab6:	d1f9      	bne.n	800daac <memcpy+0xe>
 800dab8:	bd10      	pop	{r4, pc}

0800daba <quorem>:
 800daba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dabe:	6903      	ldr	r3, [r0, #16]
 800dac0:	690c      	ldr	r4, [r1, #16]
 800dac2:	42a3      	cmp	r3, r4
 800dac4:	4607      	mov	r7, r0
 800dac6:	db7e      	blt.n	800dbc6 <quorem+0x10c>
 800dac8:	3c01      	subs	r4, #1
 800daca:	f101 0814 	add.w	r8, r1, #20
 800dace:	f100 0514 	add.w	r5, r0, #20
 800dad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dad6:	9301      	str	r3, [sp, #4]
 800dad8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dadc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dae0:	3301      	adds	r3, #1
 800dae2:	429a      	cmp	r2, r3
 800dae4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dae8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800daec:	fbb2 f6f3 	udiv	r6, r2, r3
 800daf0:	d331      	bcc.n	800db56 <quorem+0x9c>
 800daf2:	f04f 0e00 	mov.w	lr, #0
 800daf6:	4640      	mov	r0, r8
 800daf8:	46ac      	mov	ip, r5
 800dafa:	46f2      	mov	sl, lr
 800dafc:	f850 2b04 	ldr.w	r2, [r0], #4
 800db00:	b293      	uxth	r3, r2
 800db02:	fb06 e303 	mla	r3, r6, r3, lr
 800db06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800db0a:	0c1a      	lsrs	r2, r3, #16
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	ebaa 0303 	sub.w	r3, sl, r3
 800db12:	f8dc a000 	ldr.w	sl, [ip]
 800db16:	fa13 f38a 	uxtah	r3, r3, sl
 800db1a:	fb06 220e 	mla	r2, r6, lr, r2
 800db1e:	9300      	str	r3, [sp, #0]
 800db20:	9b00      	ldr	r3, [sp, #0]
 800db22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800db26:	b292      	uxth	r2, r2
 800db28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800db2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db30:	f8bd 3000 	ldrh.w	r3, [sp]
 800db34:	4581      	cmp	r9, r0
 800db36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db3a:	f84c 3b04 	str.w	r3, [ip], #4
 800db3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800db42:	d2db      	bcs.n	800dafc <quorem+0x42>
 800db44:	f855 300b 	ldr.w	r3, [r5, fp]
 800db48:	b92b      	cbnz	r3, 800db56 <quorem+0x9c>
 800db4a:	9b01      	ldr	r3, [sp, #4]
 800db4c:	3b04      	subs	r3, #4
 800db4e:	429d      	cmp	r5, r3
 800db50:	461a      	mov	r2, r3
 800db52:	d32c      	bcc.n	800dbae <quorem+0xf4>
 800db54:	613c      	str	r4, [r7, #16]
 800db56:	4638      	mov	r0, r7
 800db58:	f001 fb62 	bl	800f220 <__mcmp>
 800db5c:	2800      	cmp	r0, #0
 800db5e:	db22      	blt.n	800dba6 <quorem+0xec>
 800db60:	3601      	adds	r6, #1
 800db62:	4629      	mov	r1, r5
 800db64:	2000      	movs	r0, #0
 800db66:	f858 2b04 	ldr.w	r2, [r8], #4
 800db6a:	f8d1 c000 	ldr.w	ip, [r1]
 800db6e:	b293      	uxth	r3, r2
 800db70:	1ac3      	subs	r3, r0, r3
 800db72:	0c12      	lsrs	r2, r2, #16
 800db74:	fa13 f38c 	uxtah	r3, r3, ip
 800db78:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800db7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db80:	b29b      	uxth	r3, r3
 800db82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db86:	45c1      	cmp	r9, r8
 800db88:	f841 3b04 	str.w	r3, [r1], #4
 800db8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800db90:	d2e9      	bcs.n	800db66 <quorem+0xac>
 800db92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db9a:	b922      	cbnz	r2, 800dba6 <quorem+0xec>
 800db9c:	3b04      	subs	r3, #4
 800db9e:	429d      	cmp	r5, r3
 800dba0:	461a      	mov	r2, r3
 800dba2:	d30a      	bcc.n	800dbba <quorem+0x100>
 800dba4:	613c      	str	r4, [r7, #16]
 800dba6:	4630      	mov	r0, r6
 800dba8:	b003      	add	sp, #12
 800dbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbae:	6812      	ldr	r2, [r2, #0]
 800dbb0:	3b04      	subs	r3, #4
 800dbb2:	2a00      	cmp	r2, #0
 800dbb4:	d1ce      	bne.n	800db54 <quorem+0x9a>
 800dbb6:	3c01      	subs	r4, #1
 800dbb8:	e7c9      	b.n	800db4e <quorem+0x94>
 800dbba:	6812      	ldr	r2, [r2, #0]
 800dbbc:	3b04      	subs	r3, #4
 800dbbe:	2a00      	cmp	r2, #0
 800dbc0:	d1f0      	bne.n	800dba4 <quorem+0xea>
 800dbc2:	3c01      	subs	r4, #1
 800dbc4:	e7eb      	b.n	800db9e <quorem+0xe4>
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	e7ee      	b.n	800dba8 <quorem+0xee>
 800dbca:	0000      	movs	r0, r0
 800dbcc:	0000      	movs	r0, r0
	...

0800dbd0 <_dtoa_r>:
 800dbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd4:	ed2d 8b04 	vpush	{d8-d9}
 800dbd8:	69c5      	ldr	r5, [r0, #28]
 800dbda:	b093      	sub	sp, #76	; 0x4c
 800dbdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dbe0:	ec57 6b10 	vmov	r6, r7, d0
 800dbe4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dbe8:	9107      	str	r1, [sp, #28]
 800dbea:	4604      	mov	r4, r0
 800dbec:	920a      	str	r2, [sp, #40]	; 0x28
 800dbee:	930d      	str	r3, [sp, #52]	; 0x34
 800dbf0:	b975      	cbnz	r5, 800dc10 <_dtoa_r+0x40>
 800dbf2:	2010      	movs	r0, #16
 800dbf4:	f000 ff36 	bl	800ea64 <malloc>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	61e0      	str	r0, [r4, #28]
 800dbfc:	b920      	cbnz	r0, 800dc08 <_dtoa_r+0x38>
 800dbfe:	4bae      	ldr	r3, [pc, #696]	; (800deb8 <_dtoa_r+0x2e8>)
 800dc00:	21ef      	movs	r1, #239	; 0xef
 800dc02:	48ae      	ldr	r0, [pc, #696]	; (800debc <_dtoa_r+0x2ec>)
 800dc04:	f001 fcee 	bl	800f5e4 <__assert_func>
 800dc08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dc0c:	6005      	str	r5, [r0, #0]
 800dc0e:	60c5      	str	r5, [r0, #12]
 800dc10:	69e3      	ldr	r3, [r4, #28]
 800dc12:	6819      	ldr	r1, [r3, #0]
 800dc14:	b151      	cbz	r1, 800dc2c <_dtoa_r+0x5c>
 800dc16:	685a      	ldr	r2, [r3, #4]
 800dc18:	604a      	str	r2, [r1, #4]
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	4093      	lsls	r3, r2
 800dc1e:	608b      	str	r3, [r1, #8]
 800dc20:	4620      	mov	r0, r4
 800dc22:	f001 f8c1 	bl	800eda8 <_Bfree>
 800dc26:	69e3      	ldr	r3, [r4, #28]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	601a      	str	r2, [r3, #0]
 800dc2c:	1e3b      	subs	r3, r7, #0
 800dc2e:	bfbb      	ittet	lt
 800dc30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dc34:	9303      	strlt	r3, [sp, #12]
 800dc36:	2300      	movge	r3, #0
 800dc38:	2201      	movlt	r2, #1
 800dc3a:	bfac      	ite	ge
 800dc3c:	f8c8 3000 	strge.w	r3, [r8]
 800dc40:	f8c8 2000 	strlt.w	r2, [r8]
 800dc44:	4b9e      	ldr	r3, [pc, #632]	; (800dec0 <_dtoa_r+0x2f0>)
 800dc46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dc4a:	ea33 0308 	bics.w	r3, r3, r8
 800dc4e:	d11b      	bne.n	800dc88 <_dtoa_r+0xb8>
 800dc50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc52:	f242 730f 	movw	r3, #9999	; 0x270f
 800dc56:	6013      	str	r3, [r2, #0]
 800dc58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dc5c:	4333      	orrs	r3, r6
 800dc5e:	f000 8593 	beq.w	800e788 <_dtoa_r+0xbb8>
 800dc62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc64:	b963      	cbnz	r3, 800dc80 <_dtoa_r+0xb0>
 800dc66:	4b97      	ldr	r3, [pc, #604]	; (800dec4 <_dtoa_r+0x2f4>)
 800dc68:	e027      	b.n	800dcba <_dtoa_r+0xea>
 800dc6a:	4b97      	ldr	r3, [pc, #604]	; (800dec8 <_dtoa_r+0x2f8>)
 800dc6c:	9300      	str	r3, [sp, #0]
 800dc6e:	3308      	adds	r3, #8
 800dc70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dc72:	6013      	str	r3, [r2, #0]
 800dc74:	9800      	ldr	r0, [sp, #0]
 800dc76:	b013      	add	sp, #76	; 0x4c
 800dc78:	ecbd 8b04 	vpop	{d8-d9}
 800dc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc80:	4b90      	ldr	r3, [pc, #576]	; (800dec4 <_dtoa_r+0x2f4>)
 800dc82:	9300      	str	r3, [sp, #0]
 800dc84:	3303      	adds	r3, #3
 800dc86:	e7f3      	b.n	800dc70 <_dtoa_r+0xa0>
 800dc88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	ec51 0b17 	vmov	r0, r1, d7
 800dc92:	eeb0 8a47 	vmov.f32	s16, s14
 800dc96:	eef0 8a67 	vmov.f32	s17, s15
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	f7f2 ff14 	bl	8000ac8 <__aeabi_dcmpeq>
 800dca0:	4681      	mov	r9, r0
 800dca2:	b160      	cbz	r0, 800dcbe <_dtoa_r+0xee>
 800dca4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dca6:	2301      	movs	r3, #1
 800dca8:	6013      	str	r3, [r2, #0]
 800dcaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 8568 	beq.w	800e782 <_dtoa_r+0xbb2>
 800dcb2:	4b86      	ldr	r3, [pc, #536]	; (800decc <_dtoa_r+0x2fc>)
 800dcb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dcb6:	6013      	str	r3, [r2, #0]
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	e7da      	b.n	800dc74 <_dtoa_r+0xa4>
 800dcbe:	aa10      	add	r2, sp, #64	; 0x40
 800dcc0:	a911      	add	r1, sp, #68	; 0x44
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	eeb0 0a48 	vmov.f32	s0, s16
 800dcc8:	eef0 0a68 	vmov.f32	s1, s17
 800dccc:	f001 fb4e 	bl	800f36c <__d2b>
 800dcd0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dcd4:	4682      	mov	sl, r0
 800dcd6:	2d00      	cmp	r5, #0
 800dcd8:	d07f      	beq.n	800ddda <_dtoa_r+0x20a>
 800dcda:	ee18 3a90 	vmov	r3, s17
 800dcde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dce2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dce6:	ec51 0b18 	vmov	r0, r1, d8
 800dcea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dcee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dcf2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	4b75      	ldr	r3, [pc, #468]	; (800ded0 <_dtoa_r+0x300>)
 800dcfc:	f7f2 fac4 	bl	8000288 <__aeabi_dsub>
 800dd00:	a367      	add	r3, pc, #412	; (adr r3, 800dea0 <_dtoa_r+0x2d0>)
 800dd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd06:	f7f2 fc77 	bl	80005f8 <__aeabi_dmul>
 800dd0a:	a367      	add	r3, pc, #412	; (adr r3, 800dea8 <_dtoa_r+0x2d8>)
 800dd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd10:	f7f2 fabc 	bl	800028c <__adddf3>
 800dd14:	4606      	mov	r6, r0
 800dd16:	4628      	mov	r0, r5
 800dd18:	460f      	mov	r7, r1
 800dd1a:	f7f2 fc03 	bl	8000524 <__aeabi_i2d>
 800dd1e:	a364      	add	r3, pc, #400	; (adr r3, 800deb0 <_dtoa_r+0x2e0>)
 800dd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd24:	f7f2 fc68 	bl	80005f8 <__aeabi_dmul>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	4630      	mov	r0, r6
 800dd2e:	4639      	mov	r1, r7
 800dd30:	f7f2 faac 	bl	800028c <__adddf3>
 800dd34:	4606      	mov	r6, r0
 800dd36:	460f      	mov	r7, r1
 800dd38:	f7f2 ff0e 	bl	8000b58 <__aeabi_d2iz>
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	4683      	mov	fp, r0
 800dd40:	2300      	movs	r3, #0
 800dd42:	4630      	mov	r0, r6
 800dd44:	4639      	mov	r1, r7
 800dd46:	f7f2 fec9 	bl	8000adc <__aeabi_dcmplt>
 800dd4a:	b148      	cbz	r0, 800dd60 <_dtoa_r+0x190>
 800dd4c:	4658      	mov	r0, fp
 800dd4e:	f7f2 fbe9 	bl	8000524 <__aeabi_i2d>
 800dd52:	4632      	mov	r2, r6
 800dd54:	463b      	mov	r3, r7
 800dd56:	f7f2 feb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd5a:	b908      	cbnz	r0, 800dd60 <_dtoa_r+0x190>
 800dd5c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dd60:	f1bb 0f16 	cmp.w	fp, #22
 800dd64:	d857      	bhi.n	800de16 <_dtoa_r+0x246>
 800dd66:	4b5b      	ldr	r3, [pc, #364]	; (800ded4 <_dtoa_r+0x304>)
 800dd68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd70:	ec51 0b18 	vmov	r0, r1, d8
 800dd74:	f7f2 feb2 	bl	8000adc <__aeabi_dcmplt>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d04e      	beq.n	800de1a <_dtoa_r+0x24a>
 800dd7c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dd80:	2300      	movs	r3, #0
 800dd82:	930c      	str	r3, [sp, #48]	; 0x30
 800dd84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd86:	1b5b      	subs	r3, r3, r5
 800dd88:	1e5a      	subs	r2, r3, #1
 800dd8a:	bf45      	ittet	mi
 800dd8c:	f1c3 0301 	rsbmi	r3, r3, #1
 800dd90:	9305      	strmi	r3, [sp, #20]
 800dd92:	2300      	movpl	r3, #0
 800dd94:	2300      	movmi	r3, #0
 800dd96:	9206      	str	r2, [sp, #24]
 800dd98:	bf54      	ite	pl
 800dd9a:	9305      	strpl	r3, [sp, #20]
 800dd9c:	9306      	strmi	r3, [sp, #24]
 800dd9e:	f1bb 0f00 	cmp.w	fp, #0
 800dda2:	db3c      	blt.n	800de1e <_dtoa_r+0x24e>
 800dda4:	9b06      	ldr	r3, [sp, #24]
 800dda6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ddaa:	445b      	add	r3, fp
 800ddac:	9306      	str	r3, [sp, #24]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	9308      	str	r3, [sp, #32]
 800ddb2:	9b07      	ldr	r3, [sp, #28]
 800ddb4:	2b09      	cmp	r3, #9
 800ddb6:	d868      	bhi.n	800de8a <_dtoa_r+0x2ba>
 800ddb8:	2b05      	cmp	r3, #5
 800ddba:	bfc4      	itt	gt
 800ddbc:	3b04      	subgt	r3, #4
 800ddbe:	9307      	strgt	r3, [sp, #28]
 800ddc0:	9b07      	ldr	r3, [sp, #28]
 800ddc2:	f1a3 0302 	sub.w	r3, r3, #2
 800ddc6:	bfcc      	ite	gt
 800ddc8:	2500      	movgt	r5, #0
 800ddca:	2501      	movle	r5, #1
 800ddcc:	2b03      	cmp	r3, #3
 800ddce:	f200 8085 	bhi.w	800dedc <_dtoa_r+0x30c>
 800ddd2:	e8df f003 	tbb	[pc, r3]
 800ddd6:	3b2e      	.short	0x3b2e
 800ddd8:	5839      	.short	0x5839
 800ddda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ddde:	441d      	add	r5, r3
 800dde0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dde4:	2b20      	cmp	r3, #32
 800dde6:	bfc1      	itttt	gt
 800dde8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ddec:	fa08 f803 	lslgt.w	r8, r8, r3
 800ddf0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ddf4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ddf8:	bfd6      	itet	le
 800ddfa:	f1c3 0320 	rsble	r3, r3, #32
 800ddfe:	ea48 0003 	orrgt.w	r0, r8, r3
 800de02:	fa06 f003 	lslle.w	r0, r6, r3
 800de06:	f7f2 fb7d 	bl	8000504 <__aeabi_ui2d>
 800de0a:	2201      	movs	r2, #1
 800de0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800de10:	3d01      	subs	r5, #1
 800de12:	920e      	str	r2, [sp, #56]	; 0x38
 800de14:	e76f      	b.n	800dcf6 <_dtoa_r+0x126>
 800de16:	2301      	movs	r3, #1
 800de18:	e7b3      	b.n	800dd82 <_dtoa_r+0x1b2>
 800de1a:	900c      	str	r0, [sp, #48]	; 0x30
 800de1c:	e7b2      	b.n	800dd84 <_dtoa_r+0x1b4>
 800de1e:	9b05      	ldr	r3, [sp, #20]
 800de20:	eba3 030b 	sub.w	r3, r3, fp
 800de24:	9305      	str	r3, [sp, #20]
 800de26:	f1cb 0300 	rsb	r3, fp, #0
 800de2a:	9308      	str	r3, [sp, #32]
 800de2c:	2300      	movs	r3, #0
 800de2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800de30:	e7bf      	b.n	800ddb2 <_dtoa_r+0x1e2>
 800de32:	2300      	movs	r3, #0
 800de34:	9309      	str	r3, [sp, #36]	; 0x24
 800de36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de38:	2b00      	cmp	r3, #0
 800de3a:	dc52      	bgt.n	800dee2 <_dtoa_r+0x312>
 800de3c:	2301      	movs	r3, #1
 800de3e:	9301      	str	r3, [sp, #4]
 800de40:	9304      	str	r3, [sp, #16]
 800de42:	461a      	mov	r2, r3
 800de44:	920a      	str	r2, [sp, #40]	; 0x28
 800de46:	e00b      	b.n	800de60 <_dtoa_r+0x290>
 800de48:	2301      	movs	r3, #1
 800de4a:	e7f3      	b.n	800de34 <_dtoa_r+0x264>
 800de4c:	2300      	movs	r3, #0
 800de4e:	9309      	str	r3, [sp, #36]	; 0x24
 800de50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de52:	445b      	add	r3, fp
 800de54:	9301      	str	r3, [sp, #4]
 800de56:	3301      	adds	r3, #1
 800de58:	2b01      	cmp	r3, #1
 800de5a:	9304      	str	r3, [sp, #16]
 800de5c:	bfb8      	it	lt
 800de5e:	2301      	movlt	r3, #1
 800de60:	69e0      	ldr	r0, [r4, #28]
 800de62:	2100      	movs	r1, #0
 800de64:	2204      	movs	r2, #4
 800de66:	f102 0614 	add.w	r6, r2, #20
 800de6a:	429e      	cmp	r6, r3
 800de6c:	d93d      	bls.n	800deea <_dtoa_r+0x31a>
 800de6e:	6041      	str	r1, [r0, #4]
 800de70:	4620      	mov	r0, r4
 800de72:	f000 ff59 	bl	800ed28 <_Balloc>
 800de76:	9000      	str	r0, [sp, #0]
 800de78:	2800      	cmp	r0, #0
 800de7a:	d139      	bne.n	800def0 <_dtoa_r+0x320>
 800de7c:	4b16      	ldr	r3, [pc, #88]	; (800ded8 <_dtoa_r+0x308>)
 800de7e:	4602      	mov	r2, r0
 800de80:	f240 11af 	movw	r1, #431	; 0x1af
 800de84:	e6bd      	b.n	800dc02 <_dtoa_r+0x32>
 800de86:	2301      	movs	r3, #1
 800de88:	e7e1      	b.n	800de4e <_dtoa_r+0x27e>
 800de8a:	2501      	movs	r5, #1
 800de8c:	2300      	movs	r3, #0
 800de8e:	9307      	str	r3, [sp, #28]
 800de90:	9509      	str	r5, [sp, #36]	; 0x24
 800de92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de96:	9301      	str	r3, [sp, #4]
 800de98:	9304      	str	r3, [sp, #16]
 800de9a:	2200      	movs	r2, #0
 800de9c:	2312      	movs	r3, #18
 800de9e:	e7d1      	b.n	800de44 <_dtoa_r+0x274>
 800dea0:	636f4361 	.word	0x636f4361
 800dea4:	3fd287a7 	.word	0x3fd287a7
 800dea8:	8b60c8b3 	.word	0x8b60c8b3
 800deac:	3fc68a28 	.word	0x3fc68a28
 800deb0:	509f79fb 	.word	0x509f79fb
 800deb4:	3fd34413 	.word	0x3fd34413
 800deb8:	08010929 	.word	0x08010929
 800debc:	08010940 	.word	0x08010940
 800dec0:	7ff00000 	.word	0x7ff00000
 800dec4:	08010925 	.word	0x08010925
 800dec8:	0801091c 	.word	0x0801091c
 800decc:	080108f9 	.word	0x080108f9
 800ded0:	3ff80000 	.word	0x3ff80000
 800ded4:	08010a40 	.word	0x08010a40
 800ded8:	08010998 	.word	0x08010998
 800dedc:	2301      	movs	r3, #1
 800dede:	9309      	str	r3, [sp, #36]	; 0x24
 800dee0:	e7d7      	b.n	800de92 <_dtoa_r+0x2c2>
 800dee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dee4:	9301      	str	r3, [sp, #4]
 800dee6:	9304      	str	r3, [sp, #16]
 800dee8:	e7ba      	b.n	800de60 <_dtoa_r+0x290>
 800deea:	3101      	adds	r1, #1
 800deec:	0052      	lsls	r2, r2, #1
 800deee:	e7ba      	b.n	800de66 <_dtoa_r+0x296>
 800def0:	69e3      	ldr	r3, [r4, #28]
 800def2:	9a00      	ldr	r2, [sp, #0]
 800def4:	601a      	str	r2, [r3, #0]
 800def6:	9b04      	ldr	r3, [sp, #16]
 800def8:	2b0e      	cmp	r3, #14
 800defa:	f200 80a8 	bhi.w	800e04e <_dtoa_r+0x47e>
 800defe:	2d00      	cmp	r5, #0
 800df00:	f000 80a5 	beq.w	800e04e <_dtoa_r+0x47e>
 800df04:	f1bb 0f00 	cmp.w	fp, #0
 800df08:	dd38      	ble.n	800df7c <_dtoa_r+0x3ac>
 800df0a:	4bc0      	ldr	r3, [pc, #768]	; (800e20c <_dtoa_r+0x63c>)
 800df0c:	f00b 020f 	and.w	r2, fp, #15
 800df10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800df18:	e9d3 6700 	ldrd	r6, r7, [r3]
 800df1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800df20:	d019      	beq.n	800df56 <_dtoa_r+0x386>
 800df22:	4bbb      	ldr	r3, [pc, #748]	; (800e210 <_dtoa_r+0x640>)
 800df24:	ec51 0b18 	vmov	r0, r1, d8
 800df28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df2c:	f7f2 fc8e 	bl	800084c <__aeabi_ddiv>
 800df30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df34:	f008 080f 	and.w	r8, r8, #15
 800df38:	2503      	movs	r5, #3
 800df3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e210 <_dtoa_r+0x640>
 800df3e:	f1b8 0f00 	cmp.w	r8, #0
 800df42:	d10a      	bne.n	800df5a <_dtoa_r+0x38a>
 800df44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df48:	4632      	mov	r2, r6
 800df4a:	463b      	mov	r3, r7
 800df4c:	f7f2 fc7e 	bl	800084c <__aeabi_ddiv>
 800df50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df54:	e02b      	b.n	800dfae <_dtoa_r+0x3de>
 800df56:	2502      	movs	r5, #2
 800df58:	e7ef      	b.n	800df3a <_dtoa_r+0x36a>
 800df5a:	f018 0f01 	tst.w	r8, #1
 800df5e:	d008      	beq.n	800df72 <_dtoa_r+0x3a2>
 800df60:	4630      	mov	r0, r6
 800df62:	4639      	mov	r1, r7
 800df64:	e9d9 2300 	ldrd	r2, r3, [r9]
 800df68:	f7f2 fb46 	bl	80005f8 <__aeabi_dmul>
 800df6c:	3501      	adds	r5, #1
 800df6e:	4606      	mov	r6, r0
 800df70:	460f      	mov	r7, r1
 800df72:	ea4f 0868 	mov.w	r8, r8, asr #1
 800df76:	f109 0908 	add.w	r9, r9, #8
 800df7a:	e7e0      	b.n	800df3e <_dtoa_r+0x36e>
 800df7c:	f000 809f 	beq.w	800e0be <_dtoa_r+0x4ee>
 800df80:	f1cb 0600 	rsb	r6, fp, #0
 800df84:	4ba1      	ldr	r3, [pc, #644]	; (800e20c <_dtoa_r+0x63c>)
 800df86:	4fa2      	ldr	r7, [pc, #648]	; (800e210 <_dtoa_r+0x640>)
 800df88:	f006 020f 	and.w	r2, r6, #15
 800df8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df94:	ec51 0b18 	vmov	r0, r1, d8
 800df98:	f7f2 fb2e 	bl	80005f8 <__aeabi_dmul>
 800df9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfa0:	1136      	asrs	r6, r6, #4
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	2502      	movs	r5, #2
 800dfa6:	2e00      	cmp	r6, #0
 800dfa8:	d17e      	bne.n	800e0a8 <_dtoa_r+0x4d8>
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d1d0      	bne.n	800df50 <_dtoa_r+0x380>
 800dfae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfb0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f000 8084 	beq.w	800e0c2 <_dtoa_r+0x4f2>
 800dfba:	4b96      	ldr	r3, [pc, #600]	; (800e214 <_dtoa_r+0x644>)
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	4640      	mov	r0, r8
 800dfc0:	4649      	mov	r1, r9
 800dfc2:	f7f2 fd8b 	bl	8000adc <__aeabi_dcmplt>
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	d07b      	beq.n	800e0c2 <_dtoa_r+0x4f2>
 800dfca:	9b04      	ldr	r3, [sp, #16]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d078      	beq.n	800e0c2 <_dtoa_r+0x4f2>
 800dfd0:	9b01      	ldr	r3, [sp, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	dd39      	ble.n	800e04a <_dtoa_r+0x47a>
 800dfd6:	4b90      	ldr	r3, [pc, #576]	; (800e218 <_dtoa_r+0x648>)
 800dfd8:	2200      	movs	r2, #0
 800dfda:	4640      	mov	r0, r8
 800dfdc:	4649      	mov	r1, r9
 800dfde:	f7f2 fb0b 	bl	80005f8 <__aeabi_dmul>
 800dfe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfe6:	9e01      	ldr	r6, [sp, #4]
 800dfe8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800dfec:	3501      	adds	r5, #1
 800dfee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dff2:	4628      	mov	r0, r5
 800dff4:	f7f2 fa96 	bl	8000524 <__aeabi_i2d>
 800dff8:	4642      	mov	r2, r8
 800dffa:	464b      	mov	r3, r9
 800dffc:	f7f2 fafc 	bl	80005f8 <__aeabi_dmul>
 800e000:	4b86      	ldr	r3, [pc, #536]	; (800e21c <_dtoa_r+0x64c>)
 800e002:	2200      	movs	r2, #0
 800e004:	f7f2 f942 	bl	800028c <__adddf3>
 800e008:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e00c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e010:	9303      	str	r3, [sp, #12]
 800e012:	2e00      	cmp	r6, #0
 800e014:	d158      	bne.n	800e0c8 <_dtoa_r+0x4f8>
 800e016:	4b82      	ldr	r3, [pc, #520]	; (800e220 <_dtoa_r+0x650>)
 800e018:	2200      	movs	r2, #0
 800e01a:	4640      	mov	r0, r8
 800e01c:	4649      	mov	r1, r9
 800e01e:	f7f2 f933 	bl	8000288 <__aeabi_dsub>
 800e022:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e026:	4680      	mov	r8, r0
 800e028:	4689      	mov	r9, r1
 800e02a:	f7f2 fd75 	bl	8000b18 <__aeabi_dcmpgt>
 800e02e:	2800      	cmp	r0, #0
 800e030:	f040 8296 	bne.w	800e560 <_dtoa_r+0x990>
 800e034:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e038:	4640      	mov	r0, r8
 800e03a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e03e:	4649      	mov	r1, r9
 800e040:	f7f2 fd4c 	bl	8000adc <__aeabi_dcmplt>
 800e044:	2800      	cmp	r0, #0
 800e046:	f040 8289 	bne.w	800e55c <_dtoa_r+0x98c>
 800e04a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e04e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e050:	2b00      	cmp	r3, #0
 800e052:	f2c0 814e 	blt.w	800e2f2 <_dtoa_r+0x722>
 800e056:	f1bb 0f0e 	cmp.w	fp, #14
 800e05a:	f300 814a 	bgt.w	800e2f2 <_dtoa_r+0x722>
 800e05e:	4b6b      	ldr	r3, [pc, #428]	; (800e20c <_dtoa_r+0x63c>)
 800e060:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e064:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	f280 80dc 	bge.w	800e228 <_dtoa_r+0x658>
 800e070:	9b04      	ldr	r3, [sp, #16]
 800e072:	2b00      	cmp	r3, #0
 800e074:	f300 80d8 	bgt.w	800e228 <_dtoa_r+0x658>
 800e078:	f040 826f 	bne.w	800e55a <_dtoa_r+0x98a>
 800e07c:	4b68      	ldr	r3, [pc, #416]	; (800e220 <_dtoa_r+0x650>)
 800e07e:	2200      	movs	r2, #0
 800e080:	4640      	mov	r0, r8
 800e082:	4649      	mov	r1, r9
 800e084:	f7f2 fab8 	bl	80005f8 <__aeabi_dmul>
 800e088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e08c:	f7f2 fd3a 	bl	8000b04 <__aeabi_dcmpge>
 800e090:	9e04      	ldr	r6, [sp, #16]
 800e092:	4637      	mov	r7, r6
 800e094:	2800      	cmp	r0, #0
 800e096:	f040 8245 	bne.w	800e524 <_dtoa_r+0x954>
 800e09a:	9d00      	ldr	r5, [sp, #0]
 800e09c:	2331      	movs	r3, #49	; 0x31
 800e09e:	f805 3b01 	strb.w	r3, [r5], #1
 800e0a2:	f10b 0b01 	add.w	fp, fp, #1
 800e0a6:	e241      	b.n	800e52c <_dtoa_r+0x95c>
 800e0a8:	07f2      	lsls	r2, r6, #31
 800e0aa:	d505      	bpl.n	800e0b8 <_dtoa_r+0x4e8>
 800e0ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0b0:	f7f2 faa2 	bl	80005f8 <__aeabi_dmul>
 800e0b4:	3501      	adds	r5, #1
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	1076      	asrs	r6, r6, #1
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	e773      	b.n	800dfa6 <_dtoa_r+0x3d6>
 800e0be:	2502      	movs	r5, #2
 800e0c0:	e775      	b.n	800dfae <_dtoa_r+0x3de>
 800e0c2:	9e04      	ldr	r6, [sp, #16]
 800e0c4:	465f      	mov	r7, fp
 800e0c6:	e792      	b.n	800dfee <_dtoa_r+0x41e>
 800e0c8:	9900      	ldr	r1, [sp, #0]
 800e0ca:	4b50      	ldr	r3, [pc, #320]	; (800e20c <_dtoa_r+0x63c>)
 800e0cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0d0:	4431      	add	r1, r6
 800e0d2:	9102      	str	r1, [sp, #8]
 800e0d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0d6:	eeb0 9a47 	vmov.f32	s18, s14
 800e0da:	eef0 9a67 	vmov.f32	s19, s15
 800e0de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e0e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e0e6:	2900      	cmp	r1, #0
 800e0e8:	d044      	beq.n	800e174 <_dtoa_r+0x5a4>
 800e0ea:	494e      	ldr	r1, [pc, #312]	; (800e224 <_dtoa_r+0x654>)
 800e0ec:	2000      	movs	r0, #0
 800e0ee:	f7f2 fbad 	bl	800084c <__aeabi_ddiv>
 800e0f2:	ec53 2b19 	vmov	r2, r3, d9
 800e0f6:	f7f2 f8c7 	bl	8000288 <__aeabi_dsub>
 800e0fa:	9d00      	ldr	r5, [sp, #0]
 800e0fc:	ec41 0b19 	vmov	d9, r0, r1
 800e100:	4649      	mov	r1, r9
 800e102:	4640      	mov	r0, r8
 800e104:	f7f2 fd28 	bl	8000b58 <__aeabi_d2iz>
 800e108:	4606      	mov	r6, r0
 800e10a:	f7f2 fa0b 	bl	8000524 <__aeabi_i2d>
 800e10e:	4602      	mov	r2, r0
 800e110:	460b      	mov	r3, r1
 800e112:	4640      	mov	r0, r8
 800e114:	4649      	mov	r1, r9
 800e116:	f7f2 f8b7 	bl	8000288 <__aeabi_dsub>
 800e11a:	3630      	adds	r6, #48	; 0x30
 800e11c:	f805 6b01 	strb.w	r6, [r5], #1
 800e120:	ec53 2b19 	vmov	r2, r3, d9
 800e124:	4680      	mov	r8, r0
 800e126:	4689      	mov	r9, r1
 800e128:	f7f2 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800e12c:	2800      	cmp	r0, #0
 800e12e:	d164      	bne.n	800e1fa <_dtoa_r+0x62a>
 800e130:	4642      	mov	r2, r8
 800e132:	464b      	mov	r3, r9
 800e134:	4937      	ldr	r1, [pc, #220]	; (800e214 <_dtoa_r+0x644>)
 800e136:	2000      	movs	r0, #0
 800e138:	f7f2 f8a6 	bl	8000288 <__aeabi_dsub>
 800e13c:	ec53 2b19 	vmov	r2, r3, d9
 800e140:	f7f2 fccc 	bl	8000adc <__aeabi_dcmplt>
 800e144:	2800      	cmp	r0, #0
 800e146:	f040 80b6 	bne.w	800e2b6 <_dtoa_r+0x6e6>
 800e14a:	9b02      	ldr	r3, [sp, #8]
 800e14c:	429d      	cmp	r5, r3
 800e14e:	f43f af7c 	beq.w	800e04a <_dtoa_r+0x47a>
 800e152:	4b31      	ldr	r3, [pc, #196]	; (800e218 <_dtoa_r+0x648>)
 800e154:	ec51 0b19 	vmov	r0, r1, d9
 800e158:	2200      	movs	r2, #0
 800e15a:	f7f2 fa4d 	bl	80005f8 <__aeabi_dmul>
 800e15e:	4b2e      	ldr	r3, [pc, #184]	; (800e218 <_dtoa_r+0x648>)
 800e160:	ec41 0b19 	vmov	d9, r0, r1
 800e164:	2200      	movs	r2, #0
 800e166:	4640      	mov	r0, r8
 800e168:	4649      	mov	r1, r9
 800e16a:	f7f2 fa45 	bl	80005f8 <__aeabi_dmul>
 800e16e:	4680      	mov	r8, r0
 800e170:	4689      	mov	r9, r1
 800e172:	e7c5      	b.n	800e100 <_dtoa_r+0x530>
 800e174:	ec51 0b17 	vmov	r0, r1, d7
 800e178:	f7f2 fa3e 	bl	80005f8 <__aeabi_dmul>
 800e17c:	9b02      	ldr	r3, [sp, #8]
 800e17e:	9d00      	ldr	r5, [sp, #0]
 800e180:	930f      	str	r3, [sp, #60]	; 0x3c
 800e182:	ec41 0b19 	vmov	d9, r0, r1
 800e186:	4649      	mov	r1, r9
 800e188:	4640      	mov	r0, r8
 800e18a:	f7f2 fce5 	bl	8000b58 <__aeabi_d2iz>
 800e18e:	4606      	mov	r6, r0
 800e190:	f7f2 f9c8 	bl	8000524 <__aeabi_i2d>
 800e194:	3630      	adds	r6, #48	; 0x30
 800e196:	4602      	mov	r2, r0
 800e198:	460b      	mov	r3, r1
 800e19a:	4640      	mov	r0, r8
 800e19c:	4649      	mov	r1, r9
 800e19e:	f7f2 f873 	bl	8000288 <__aeabi_dsub>
 800e1a2:	f805 6b01 	strb.w	r6, [r5], #1
 800e1a6:	9b02      	ldr	r3, [sp, #8]
 800e1a8:	429d      	cmp	r5, r3
 800e1aa:	4680      	mov	r8, r0
 800e1ac:	4689      	mov	r9, r1
 800e1ae:	f04f 0200 	mov.w	r2, #0
 800e1b2:	d124      	bne.n	800e1fe <_dtoa_r+0x62e>
 800e1b4:	4b1b      	ldr	r3, [pc, #108]	; (800e224 <_dtoa_r+0x654>)
 800e1b6:	ec51 0b19 	vmov	r0, r1, d9
 800e1ba:	f7f2 f867 	bl	800028c <__adddf3>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	4640      	mov	r0, r8
 800e1c4:	4649      	mov	r1, r9
 800e1c6:	f7f2 fca7 	bl	8000b18 <__aeabi_dcmpgt>
 800e1ca:	2800      	cmp	r0, #0
 800e1cc:	d173      	bne.n	800e2b6 <_dtoa_r+0x6e6>
 800e1ce:	ec53 2b19 	vmov	r2, r3, d9
 800e1d2:	4914      	ldr	r1, [pc, #80]	; (800e224 <_dtoa_r+0x654>)
 800e1d4:	2000      	movs	r0, #0
 800e1d6:	f7f2 f857 	bl	8000288 <__aeabi_dsub>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	460b      	mov	r3, r1
 800e1de:	4640      	mov	r0, r8
 800e1e0:	4649      	mov	r1, r9
 800e1e2:	f7f2 fc7b 	bl	8000adc <__aeabi_dcmplt>
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	f43f af2f 	beq.w	800e04a <_dtoa_r+0x47a>
 800e1ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e1ee:	1e6b      	subs	r3, r5, #1
 800e1f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e1f6:	2b30      	cmp	r3, #48	; 0x30
 800e1f8:	d0f8      	beq.n	800e1ec <_dtoa_r+0x61c>
 800e1fa:	46bb      	mov	fp, r7
 800e1fc:	e04a      	b.n	800e294 <_dtoa_r+0x6c4>
 800e1fe:	4b06      	ldr	r3, [pc, #24]	; (800e218 <_dtoa_r+0x648>)
 800e200:	f7f2 f9fa 	bl	80005f8 <__aeabi_dmul>
 800e204:	4680      	mov	r8, r0
 800e206:	4689      	mov	r9, r1
 800e208:	e7bd      	b.n	800e186 <_dtoa_r+0x5b6>
 800e20a:	bf00      	nop
 800e20c:	08010a40 	.word	0x08010a40
 800e210:	08010a18 	.word	0x08010a18
 800e214:	3ff00000 	.word	0x3ff00000
 800e218:	40240000 	.word	0x40240000
 800e21c:	401c0000 	.word	0x401c0000
 800e220:	40140000 	.word	0x40140000
 800e224:	3fe00000 	.word	0x3fe00000
 800e228:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e22c:	9d00      	ldr	r5, [sp, #0]
 800e22e:	4642      	mov	r2, r8
 800e230:	464b      	mov	r3, r9
 800e232:	4630      	mov	r0, r6
 800e234:	4639      	mov	r1, r7
 800e236:	f7f2 fb09 	bl	800084c <__aeabi_ddiv>
 800e23a:	f7f2 fc8d 	bl	8000b58 <__aeabi_d2iz>
 800e23e:	9001      	str	r0, [sp, #4]
 800e240:	f7f2 f970 	bl	8000524 <__aeabi_i2d>
 800e244:	4642      	mov	r2, r8
 800e246:	464b      	mov	r3, r9
 800e248:	f7f2 f9d6 	bl	80005f8 <__aeabi_dmul>
 800e24c:	4602      	mov	r2, r0
 800e24e:	460b      	mov	r3, r1
 800e250:	4630      	mov	r0, r6
 800e252:	4639      	mov	r1, r7
 800e254:	f7f2 f818 	bl	8000288 <__aeabi_dsub>
 800e258:	9e01      	ldr	r6, [sp, #4]
 800e25a:	9f04      	ldr	r7, [sp, #16]
 800e25c:	3630      	adds	r6, #48	; 0x30
 800e25e:	f805 6b01 	strb.w	r6, [r5], #1
 800e262:	9e00      	ldr	r6, [sp, #0]
 800e264:	1bae      	subs	r6, r5, r6
 800e266:	42b7      	cmp	r7, r6
 800e268:	4602      	mov	r2, r0
 800e26a:	460b      	mov	r3, r1
 800e26c:	d134      	bne.n	800e2d8 <_dtoa_r+0x708>
 800e26e:	f7f2 f80d 	bl	800028c <__adddf3>
 800e272:	4642      	mov	r2, r8
 800e274:	464b      	mov	r3, r9
 800e276:	4606      	mov	r6, r0
 800e278:	460f      	mov	r7, r1
 800e27a:	f7f2 fc4d 	bl	8000b18 <__aeabi_dcmpgt>
 800e27e:	b9c8      	cbnz	r0, 800e2b4 <_dtoa_r+0x6e4>
 800e280:	4642      	mov	r2, r8
 800e282:	464b      	mov	r3, r9
 800e284:	4630      	mov	r0, r6
 800e286:	4639      	mov	r1, r7
 800e288:	f7f2 fc1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e28c:	b110      	cbz	r0, 800e294 <_dtoa_r+0x6c4>
 800e28e:	9b01      	ldr	r3, [sp, #4]
 800e290:	07db      	lsls	r3, r3, #31
 800e292:	d40f      	bmi.n	800e2b4 <_dtoa_r+0x6e4>
 800e294:	4651      	mov	r1, sl
 800e296:	4620      	mov	r0, r4
 800e298:	f000 fd86 	bl	800eda8 <_Bfree>
 800e29c:	2300      	movs	r3, #0
 800e29e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e2a0:	702b      	strb	r3, [r5, #0]
 800e2a2:	f10b 0301 	add.w	r3, fp, #1
 800e2a6:	6013      	str	r3, [r2, #0]
 800e2a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	f43f ace2 	beq.w	800dc74 <_dtoa_r+0xa4>
 800e2b0:	601d      	str	r5, [r3, #0]
 800e2b2:	e4df      	b.n	800dc74 <_dtoa_r+0xa4>
 800e2b4:	465f      	mov	r7, fp
 800e2b6:	462b      	mov	r3, r5
 800e2b8:	461d      	mov	r5, r3
 800e2ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2be:	2a39      	cmp	r2, #57	; 0x39
 800e2c0:	d106      	bne.n	800e2d0 <_dtoa_r+0x700>
 800e2c2:	9a00      	ldr	r2, [sp, #0]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d1f7      	bne.n	800e2b8 <_dtoa_r+0x6e8>
 800e2c8:	9900      	ldr	r1, [sp, #0]
 800e2ca:	2230      	movs	r2, #48	; 0x30
 800e2cc:	3701      	adds	r7, #1
 800e2ce:	700a      	strb	r2, [r1, #0]
 800e2d0:	781a      	ldrb	r2, [r3, #0]
 800e2d2:	3201      	adds	r2, #1
 800e2d4:	701a      	strb	r2, [r3, #0]
 800e2d6:	e790      	b.n	800e1fa <_dtoa_r+0x62a>
 800e2d8:	4ba3      	ldr	r3, [pc, #652]	; (800e568 <_dtoa_r+0x998>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f7f2 f98c 	bl	80005f8 <__aeabi_dmul>
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	4606      	mov	r6, r0
 800e2e6:	460f      	mov	r7, r1
 800e2e8:	f7f2 fbee 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	d09e      	beq.n	800e22e <_dtoa_r+0x65e>
 800e2f0:	e7d0      	b.n	800e294 <_dtoa_r+0x6c4>
 800e2f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2f4:	2a00      	cmp	r2, #0
 800e2f6:	f000 80ca 	beq.w	800e48e <_dtoa_r+0x8be>
 800e2fa:	9a07      	ldr	r2, [sp, #28]
 800e2fc:	2a01      	cmp	r2, #1
 800e2fe:	f300 80ad 	bgt.w	800e45c <_dtoa_r+0x88c>
 800e302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e304:	2a00      	cmp	r2, #0
 800e306:	f000 80a5 	beq.w	800e454 <_dtoa_r+0x884>
 800e30a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e30e:	9e08      	ldr	r6, [sp, #32]
 800e310:	9d05      	ldr	r5, [sp, #20]
 800e312:	9a05      	ldr	r2, [sp, #20]
 800e314:	441a      	add	r2, r3
 800e316:	9205      	str	r2, [sp, #20]
 800e318:	9a06      	ldr	r2, [sp, #24]
 800e31a:	2101      	movs	r1, #1
 800e31c:	441a      	add	r2, r3
 800e31e:	4620      	mov	r0, r4
 800e320:	9206      	str	r2, [sp, #24]
 800e322:	f000 fdf7 	bl	800ef14 <__i2b>
 800e326:	4607      	mov	r7, r0
 800e328:	b165      	cbz	r5, 800e344 <_dtoa_r+0x774>
 800e32a:	9b06      	ldr	r3, [sp, #24]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	dd09      	ble.n	800e344 <_dtoa_r+0x774>
 800e330:	42ab      	cmp	r3, r5
 800e332:	9a05      	ldr	r2, [sp, #20]
 800e334:	bfa8      	it	ge
 800e336:	462b      	movge	r3, r5
 800e338:	1ad2      	subs	r2, r2, r3
 800e33a:	9205      	str	r2, [sp, #20]
 800e33c:	9a06      	ldr	r2, [sp, #24]
 800e33e:	1aed      	subs	r5, r5, r3
 800e340:	1ad3      	subs	r3, r2, r3
 800e342:	9306      	str	r3, [sp, #24]
 800e344:	9b08      	ldr	r3, [sp, #32]
 800e346:	b1f3      	cbz	r3, 800e386 <_dtoa_r+0x7b6>
 800e348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	f000 80a3 	beq.w	800e496 <_dtoa_r+0x8c6>
 800e350:	2e00      	cmp	r6, #0
 800e352:	dd10      	ble.n	800e376 <_dtoa_r+0x7a6>
 800e354:	4639      	mov	r1, r7
 800e356:	4632      	mov	r2, r6
 800e358:	4620      	mov	r0, r4
 800e35a:	f000 fe9b 	bl	800f094 <__pow5mult>
 800e35e:	4652      	mov	r2, sl
 800e360:	4601      	mov	r1, r0
 800e362:	4607      	mov	r7, r0
 800e364:	4620      	mov	r0, r4
 800e366:	f000 fdeb 	bl	800ef40 <__multiply>
 800e36a:	4651      	mov	r1, sl
 800e36c:	4680      	mov	r8, r0
 800e36e:	4620      	mov	r0, r4
 800e370:	f000 fd1a 	bl	800eda8 <_Bfree>
 800e374:	46c2      	mov	sl, r8
 800e376:	9b08      	ldr	r3, [sp, #32]
 800e378:	1b9a      	subs	r2, r3, r6
 800e37a:	d004      	beq.n	800e386 <_dtoa_r+0x7b6>
 800e37c:	4651      	mov	r1, sl
 800e37e:	4620      	mov	r0, r4
 800e380:	f000 fe88 	bl	800f094 <__pow5mult>
 800e384:	4682      	mov	sl, r0
 800e386:	2101      	movs	r1, #1
 800e388:	4620      	mov	r0, r4
 800e38a:	f000 fdc3 	bl	800ef14 <__i2b>
 800e38e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e390:	2b00      	cmp	r3, #0
 800e392:	4606      	mov	r6, r0
 800e394:	f340 8081 	ble.w	800e49a <_dtoa_r+0x8ca>
 800e398:	461a      	mov	r2, r3
 800e39a:	4601      	mov	r1, r0
 800e39c:	4620      	mov	r0, r4
 800e39e:	f000 fe79 	bl	800f094 <__pow5mult>
 800e3a2:	9b07      	ldr	r3, [sp, #28]
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	4606      	mov	r6, r0
 800e3a8:	dd7a      	ble.n	800e4a0 <_dtoa_r+0x8d0>
 800e3aa:	f04f 0800 	mov.w	r8, #0
 800e3ae:	6933      	ldr	r3, [r6, #16]
 800e3b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e3b4:	6918      	ldr	r0, [r3, #16]
 800e3b6:	f000 fd5f 	bl	800ee78 <__hi0bits>
 800e3ba:	f1c0 0020 	rsb	r0, r0, #32
 800e3be:	9b06      	ldr	r3, [sp, #24]
 800e3c0:	4418      	add	r0, r3
 800e3c2:	f010 001f 	ands.w	r0, r0, #31
 800e3c6:	f000 8094 	beq.w	800e4f2 <_dtoa_r+0x922>
 800e3ca:	f1c0 0320 	rsb	r3, r0, #32
 800e3ce:	2b04      	cmp	r3, #4
 800e3d0:	f340 8085 	ble.w	800e4de <_dtoa_r+0x90e>
 800e3d4:	9b05      	ldr	r3, [sp, #20]
 800e3d6:	f1c0 001c 	rsb	r0, r0, #28
 800e3da:	4403      	add	r3, r0
 800e3dc:	9305      	str	r3, [sp, #20]
 800e3de:	9b06      	ldr	r3, [sp, #24]
 800e3e0:	4403      	add	r3, r0
 800e3e2:	4405      	add	r5, r0
 800e3e4:	9306      	str	r3, [sp, #24]
 800e3e6:	9b05      	ldr	r3, [sp, #20]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	dd05      	ble.n	800e3f8 <_dtoa_r+0x828>
 800e3ec:	4651      	mov	r1, sl
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	f000 fea9 	bl	800f148 <__lshift>
 800e3f6:	4682      	mov	sl, r0
 800e3f8:	9b06      	ldr	r3, [sp, #24]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	dd05      	ble.n	800e40a <_dtoa_r+0x83a>
 800e3fe:	4631      	mov	r1, r6
 800e400:	461a      	mov	r2, r3
 800e402:	4620      	mov	r0, r4
 800e404:	f000 fea0 	bl	800f148 <__lshift>
 800e408:	4606      	mov	r6, r0
 800e40a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d072      	beq.n	800e4f6 <_dtoa_r+0x926>
 800e410:	4631      	mov	r1, r6
 800e412:	4650      	mov	r0, sl
 800e414:	f000 ff04 	bl	800f220 <__mcmp>
 800e418:	2800      	cmp	r0, #0
 800e41a:	da6c      	bge.n	800e4f6 <_dtoa_r+0x926>
 800e41c:	2300      	movs	r3, #0
 800e41e:	4651      	mov	r1, sl
 800e420:	220a      	movs	r2, #10
 800e422:	4620      	mov	r0, r4
 800e424:	f000 fce2 	bl	800edec <__multadd>
 800e428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e42a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e42e:	4682      	mov	sl, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	f000 81b0 	beq.w	800e796 <_dtoa_r+0xbc6>
 800e436:	2300      	movs	r3, #0
 800e438:	4639      	mov	r1, r7
 800e43a:	220a      	movs	r2, #10
 800e43c:	4620      	mov	r0, r4
 800e43e:	f000 fcd5 	bl	800edec <__multadd>
 800e442:	9b01      	ldr	r3, [sp, #4]
 800e444:	2b00      	cmp	r3, #0
 800e446:	4607      	mov	r7, r0
 800e448:	f300 8096 	bgt.w	800e578 <_dtoa_r+0x9a8>
 800e44c:	9b07      	ldr	r3, [sp, #28]
 800e44e:	2b02      	cmp	r3, #2
 800e450:	dc59      	bgt.n	800e506 <_dtoa_r+0x936>
 800e452:	e091      	b.n	800e578 <_dtoa_r+0x9a8>
 800e454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e456:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e45a:	e758      	b.n	800e30e <_dtoa_r+0x73e>
 800e45c:	9b04      	ldr	r3, [sp, #16]
 800e45e:	1e5e      	subs	r6, r3, #1
 800e460:	9b08      	ldr	r3, [sp, #32]
 800e462:	42b3      	cmp	r3, r6
 800e464:	bfbf      	itttt	lt
 800e466:	9b08      	ldrlt	r3, [sp, #32]
 800e468:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e46a:	9608      	strlt	r6, [sp, #32]
 800e46c:	1af3      	sublt	r3, r6, r3
 800e46e:	bfb4      	ite	lt
 800e470:	18d2      	addlt	r2, r2, r3
 800e472:	1b9e      	subge	r6, r3, r6
 800e474:	9b04      	ldr	r3, [sp, #16]
 800e476:	bfbc      	itt	lt
 800e478:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e47a:	2600      	movlt	r6, #0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	bfb7      	itett	lt
 800e480:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e484:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e488:	1a9d      	sublt	r5, r3, r2
 800e48a:	2300      	movlt	r3, #0
 800e48c:	e741      	b.n	800e312 <_dtoa_r+0x742>
 800e48e:	9e08      	ldr	r6, [sp, #32]
 800e490:	9d05      	ldr	r5, [sp, #20]
 800e492:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e494:	e748      	b.n	800e328 <_dtoa_r+0x758>
 800e496:	9a08      	ldr	r2, [sp, #32]
 800e498:	e770      	b.n	800e37c <_dtoa_r+0x7ac>
 800e49a:	9b07      	ldr	r3, [sp, #28]
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	dc19      	bgt.n	800e4d4 <_dtoa_r+0x904>
 800e4a0:	9b02      	ldr	r3, [sp, #8]
 800e4a2:	b9bb      	cbnz	r3, 800e4d4 <_dtoa_r+0x904>
 800e4a4:	9b03      	ldr	r3, [sp, #12]
 800e4a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4aa:	b99b      	cbnz	r3, 800e4d4 <_dtoa_r+0x904>
 800e4ac:	9b03      	ldr	r3, [sp, #12]
 800e4ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4b2:	0d1b      	lsrs	r3, r3, #20
 800e4b4:	051b      	lsls	r3, r3, #20
 800e4b6:	b183      	cbz	r3, 800e4da <_dtoa_r+0x90a>
 800e4b8:	9b05      	ldr	r3, [sp, #20]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	9305      	str	r3, [sp, #20]
 800e4be:	9b06      	ldr	r3, [sp, #24]
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	9306      	str	r3, [sp, #24]
 800e4c4:	f04f 0801 	mov.w	r8, #1
 800e4c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f47f af6f 	bne.w	800e3ae <_dtoa_r+0x7de>
 800e4d0:	2001      	movs	r0, #1
 800e4d2:	e774      	b.n	800e3be <_dtoa_r+0x7ee>
 800e4d4:	f04f 0800 	mov.w	r8, #0
 800e4d8:	e7f6      	b.n	800e4c8 <_dtoa_r+0x8f8>
 800e4da:	4698      	mov	r8, r3
 800e4dc:	e7f4      	b.n	800e4c8 <_dtoa_r+0x8f8>
 800e4de:	d082      	beq.n	800e3e6 <_dtoa_r+0x816>
 800e4e0:	9a05      	ldr	r2, [sp, #20]
 800e4e2:	331c      	adds	r3, #28
 800e4e4:	441a      	add	r2, r3
 800e4e6:	9205      	str	r2, [sp, #20]
 800e4e8:	9a06      	ldr	r2, [sp, #24]
 800e4ea:	441a      	add	r2, r3
 800e4ec:	441d      	add	r5, r3
 800e4ee:	9206      	str	r2, [sp, #24]
 800e4f0:	e779      	b.n	800e3e6 <_dtoa_r+0x816>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	e7f4      	b.n	800e4e0 <_dtoa_r+0x910>
 800e4f6:	9b04      	ldr	r3, [sp, #16]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	dc37      	bgt.n	800e56c <_dtoa_r+0x99c>
 800e4fc:	9b07      	ldr	r3, [sp, #28]
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	dd34      	ble.n	800e56c <_dtoa_r+0x99c>
 800e502:	9b04      	ldr	r3, [sp, #16]
 800e504:	9301      	str	r3, [sp, #4]
 800e506:	9b01      	ldr	r3, [sp, #4]
 800e508:	b963      	cbnz	r3, 800e524 <_dtoa_r+0x954>
 800e50a:	4631      	mov	r1, r6
 800e50c:	2205      	movs	r2, #5
 800e50e:	4620      	mov	r0, r4
 800e510:	f000 fc6c 	bl	800edec <__multadd>
 800e514:	4601      	mov	r1, r0
 800e516:	4606      	mov	r6, r0
 800e518:	4650      	mov	r0, sl
 800e51a:	f000 fe81 	bl	800f220 <__mcmp>
 800e51e:	2800      	cmp	r0, #0
 800e520:	f73f adbb 	bgt.w	800e09a <_dtoa_r+0x4ca>
 800e524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e526:	9d00      	ldr	r5, [sp, #0]
 800e528:	ea6f 0b03 	mvn.w	fp, r3
 800e52c:	f04f 0800 	mov.w	r8, #0
 800e530:	4631      	mov	r1, r6
 800e532:	4620      	mov	r0, r4
 800e534:	f000 fc38 	bl	800eda8 <_Bfree>
 800e538:	2f00      	cmp	r7, #0
 800e53a:	f43f aeab 	beq.w	800e294 <_dtoa_r+0x6c4>
 800e53e:	f1b8 0f00 	cmp.w	r8, #0
 800e542:	d005      	beq.n	800e550 <_dtoa_r+0x980>
 800e544:	45b8      	cmp	r8, r7
 800e546:	d003      	beq.n	800e550 <_dtoa_r+0x980>
 800e548:	4641      	mov	r1, r8
 800e54a:	4620      	mov	r0, r4
 800e54c:	f000 fc2c 	bl	800eda8 <_Bfree>
 800e550:	4639      	mov	r1, r7
 800e552:	4620      	mov	r0, r4
 800e554:	f000 fc28 	bl	800eda8 <_Bfree>
 800e558:	e69c      	b.n	800e294 <_dtoa_r+0x6c4>
 800e55a:	2600      	movs	r6, #0
 800e55c:	4637      	mov	r7, r6
 800e55e:	e7e1      	b.n	800e524 <_dtoa_r+0x954>
 800e560:	46bb      	mov	fp, r7
 800e562:	4637      	mov	r7, r6
 800e564:	e599      	b.n	800e09a <_dtoa_r+0x4ca>
 800e566:	bf00      	nop
 800e568:	40240000 	.word	0x40240000
 800e56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f000 80c8 	beq.w	800e704 <_dtoa_r+0xb34>
 800e574:	9b04      	ldr	r3, [sp, #16]
 800e576:	9301      	str	r3, [sp, #4]
 800e578:	2d00      	cmp	r5, #0
 800e57a:	dd05      	ble.n	800e588 <_dtoa_r+0x9b8>
 800e57c:	4639      	mov	r1, r7
 800e57e:	462a      	mov	r2, r5
 800e580:	4620      	mov	r0, r4
 800e582:	f000 fde1 	bl	800f148 <__lshift>
 800e586:	4607      	mov	r7, r0
 800e588:	f1b8 0f00 	cmp.w	r8, #0
 800e58c:	d05b      	beq.n	800e646 <_dtoa_r+0xa76>
 800e58e:	6879      	ldr	r1, [r7, #4]
 800e590:	4620      	mov	r0, r4
 800e592:	f000 fbc9 	bl	800ed28 <_Balloc>
 800e596:	4605      	mov	r5, r0
 800e598:	b928      	cbnz	r0, 800e5a6 <_dtoa_r+0x9d6>
 800e59a:	4b83      	ldr	r3, [pc, #524]	; (800e7a8 <_dtoa_r+0xbd8>)
 800e59c:	4602      	mov	r2, r0
 800e59e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e5a2:	f7ff bb2e 	b.w	800dc02 <_dtoa_r+0x32>
 800e5a6:	693a      	ldr	r2, [r7, #16]
 800e5a8:	3202      	adds	r2, #2
 800e5aa:	0092      	lsls	r2, r2, #2
 800e5ac:	f107 010c 	add.w	r1, r7, #12
 800e5b0:	300c      	adds	r0, #12
 800e5b2:	f7ff fa74 	bl	800da9e <memcpy>
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	4629      	mov	r1, r5
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	f000 fdc4 	bl	800f148 <__lshift>
 800e5c0:	9b00      	ldr	r3, [sp, #0]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	9304      	str	r3, [sp, #16]
 800e5c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	9308      	str	r3, [sp, #32]
 800e5ce:	9b02      	ldr	r3, [sp, #8]
 800e5d0:	f003 0301 	and.w	r3, r3, #1
 800e5d4:	46b8      	mov	r8, r7
 800e5d6:	9306      	str	r3, [sp, #24]
 800e5d8:	4607      	mov	r7, r0
 800e5da:	9b04      	ldr	r3, [sp, #16]
 800e5dc:	4631      	mov	r1, r6
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	4650      	mov	r0, sl
 800e5e2:	9301      	str	r3, [sp, #4]
 800e5e4:	f7ff fa69 	bl	800daba <quorem>
 800e5e8:	4641      	mov	r1, r8
 800e5ea:	9002      	str	r0, [sp, #8]
 800e5ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e5f0:	4650      	mov	r0, sl
 800e5f2:	f000 fe15 	bl	800f220 <__mcmp>
 800e5f6:	463a      	mov	r2, r7
 800e5f8:	9005      	str	r0, [sp, #20]
 800e5fa:	4631      	mov	r1, r6
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f000 fe2b 	bl	800f258 <__mdiff>
 800e602:	68c2      	ldr	r2, [r0, #12]
 800e604:	4605      	mov	r5, r0
 800e606:	bb02      	cbnz	r2, 800e64a <_dtoa_r+0xa7a>
 800e608:	4601      	mov	r1, r0
 800e60a:	4650      	mov	r0, sl
 800e60c:	f000 fe08 	bl	800f220 <__mcmp>
 800e610:	4602      	mov	r2, r0
 800e612:	4629      	mov	r1, r5
 800e614:	4620      	mov	r0, r4
 800e616:	9209      	str	r2, [sp, #36]	; 0x24
 800e618:	f000 fbc6 	bl	800eda8 <_Bfree>
 800e61c:	9b07      	ldr	r3, [sp, #28]
 800e61e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e620:	9d04      	ldr	r5, [sp, #16]
 800e622:	ea43 0102 	orr.w	r1, r3, r2
 800e626:	9b06      	ldr	r3, [sp, #24]
 800e628:	4319      	orrs	r1, r3
 800e62a:	d110      	bne.n	800e64e <_dtoa_r+0xa7e>
 800e62c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e630:	d029      	beq.n	800e686 <_dtoa_r+0xab6>
 800e632:	9b05      	ldr	r3, [sp, #20]
 800e634:	2b00      	cmp	r3, #0
 800e636:	dd02      	ble.n	800e63e <_dtoa_r+0xa6e>
 800e638:	9b02      	ldr	r3, [sp, #8]
 800e63a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e63e:	9b01      	ldr	r3, [sp, #4]
 800e640:	f883 9000 	strb.w	r9, [r3]
 800e644:	e774      	b.n	800e530 <_dtoa_r+0x960>
 800e646:	4638      	mov	r0, r7
 800e648:	e7ba      	b.n	800e5c0 <_dtoa_r+0x9f0>
 800e64a:	2201      	movs	r2, #1
 800e64c:	e7e1      	b.n	800e612 <_dtoa_r+0xa42>
 800e64e:	9b05      	ldr	r3, [sp, #20]
 800e650:	2b00      	cmp	r3, #0
 800e652:	db04      	blt.n	800e65e <_dtoa_r+0xa8e>
 800e654:	9907      	ldr	r1, [sp, #28]
 800e656:	430b      	orrs	r3, r1
 800e658:	9906      	ldr	r1, [sp, #24]
 800e65a:	430b      	orrs	r3, r1
 800e65c:	d120      	bne.n	800e6a0 <_dtoa_r+0xad0>
 800e65e:	2a00      	cmp	r2, #0
 800e660:	dded      	ble.n	800e63e <_dtoa_r+0xa6e>
 800e662:	4651      	mov	r1, sl
 800e664:	2201      	movs	r2, #1
 800e666:	4620      	mov	r0, r4
 800e668:	f000 fd6e 	bl	800f148 <__lshift>
 800e66c:	4631      	mov	r1, r6
 800e66e:	4682      	mov	sl, r0
 800e670:	f000 fdd6 	bl	800f220 <__mcmp>
 800e674:	2800      	cmp	r0, #0
 800e676:	dc03      	bgt.n	800e680 <_dtoa_r+0xab0>
 800e678:	d1e1      	bne.n	800e63e <_dtoa_r+0xa6e>
 800e67a:	f019 0f01 	tst.w	r9, #1
 800e67e:	d0de      	beq.n	800e63e <_dtoa_r+0xa6e>
 800e680:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e684:	d1d8      	bne.n	800e638 <_dtoa_r+0xa68>
 800e686:	9a01      	ldr	r2, [sp, #4]
 800e688:	2339      	movs	r3, #57	; 0x39
 800e68a:	7013      	strb	r3, [r2, #0]
 800e68c:	462b      	mov	r3, r5
 800e68e:	461d      	mov	r5, r3
 800e690:	3b01      	subs	r3, #1
 800e692:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e696:	2a39      	cmp	r2, #57	; 0x39
 800e698:	d06c      	beq.n	800e774 <_dtoa_r+0xba4>
 800e69a:	3201      	adds	r2, #1
 800e69c:	701a      	strb	r2, [r3, #0]
 800e69e:	e747      	b.n	800e530 <_dtoa_r+0x960>
 800e6a0:	2a00      	cmp	r2, #0
 800e6a2:	dd07      	ble.n	800e6b4 <_dtoa_r+0xae4>
 800e6a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e6a8:	d0ed      	beq.n	800e686 <_dtoa_r+0xab6>
 800e6aa:	9a01      	ldr	r2, [sp, #4]
 800e6ac:	f109 0301 	add.w	r3, r9, #1
 800e6b0:	7013      	strb	r3, [r2, #0]
 800e6b2:	e73d      	b.n	800e530 <_dtoa_r+0x960>
 800e6b4:	9b04      	ldr	r3, [sp, #16]
 800e6b6:	9a08      	ldr	r2, [sp, #32]
 800e6b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d043      	beq.n	800e748 <_dtoa_r+0xb78>
 800e6c0:	4651      	mov	r1, sl
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	220a      	movs	r2, #10
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	f000 fb90 	bl	800edec <__multadd>
 800e6cc:	45b8      	cmp	r8, r7
 800e6ce:	4682      	mov	sl, r0
 800e6d0:	f04f 0300 	mov.w	r3, #0
 800e6d4:	f04f 020a 	mov.w	r2, #10
 800e6d8:	4641      	mov	r1, r8
 800e6da:	4620      	mov	r0, r4
 800e6dc:	d107      	bne.n	800e6ee <_dtoa_r+0xb1e>
 800e6de:	f000 fb85 	bl	800edec <__multadd>
 800e6e2:	4680      	mov	r8, r0
 800e6e4:	4607      	mov	r7, r0
 800e6e6:	9b04      	ldr	r3, [sp, #16]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	9304      	str	r3, [sp, #16]
 800e6ec:	e775      	b.n	800e5da <_dtoa_r+0xa0a>
 800e6ee:	f000 fb7d 	bl	800edec <__multadd>
 800e6f2:	4639      	mov	r1, r7
 800e6f4:	4680      	mov	r8, r0
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	220a      	movs	r2, #10
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f000 fb76 	bl	800edec <__multadd>
 800e700:	4607      	mov	r7, r0
 800e702:	e7f0      	b.n	800e6e6 <_dtoa_r+0xb16>
 800e704:	9b04      	ldr	r3, [sp, #16]
 800e706:	9301      	str	r3, [sp, #4]
 800e708:	9d00      	ldr	r5, [sp, #0]
 800e70a:	4631      	mov	r1, r6
 800e70c:	4650      	mov	r0, sl
 800e70e:	f7ff f9d4 	bl	800daba <quorem>
 800e712:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e716:	9b00      	ldr	r3, [sp, #0]
 800e718:	f805 9b01 	strb.w	r9, [r5], #1
 800e71c:	1aea      	subs	r2, r5, r3
 800e71e:	9b01      	ldr	r3, [sp, #4]
 800e720:	4293      	cmp	r3, r2
 800e722:	dd07      	ble.n	800e734 <_dtoa_r+0xb64>
 800e724:	4651      	mov	r1, sl
 800e726:	2300      	movs	r3, #0
 800e728:	220a      	movs	r2, #10
 800e72a:	4620      	mov	r0, r4
 800e72c:	f000 fb5e 	bl	800edec <__multadd>
 800e730:	4682      	mov	sl, r0
 800e732:	e7ea      	b.n	800e70a <_dtoa_r+0xb3a>
 800e734:	9b01      	ldr	r3, [sp, #4]
 800e736:	2b00      	cmp	r3, #0
 800e738:	bfc8      	it	gt
 800e73a:	461d      	movgt	r5, r3
 800e73c:	9b00      	ldr	r3, [sp, #0]
 800e73e:	bfd8      	it	le
 800e740:	2501      	movle	r5, #1
 800e742:	441d      	add	r5, r3
 800e744:	f04f 0800 	mov.w	r8, #0
 800e748:	4651      	mov	r1, sl
 800e74a:	2201      	movs	r2, #1
 800e74c:	4620      	mov	r0, r4
 800e74e:	f000 fcfb 	bl	800f148 <__lshift>
 800e752:	4631      	mov	r1, r6
 800e754:	4682      	mov	sl, r0
 800e756:	f000 fd63 	bl	800f220 <__mcmp>
 800e75a:	2800      	cmp	r0, #0
 800e75c:	dc96      	bgt.n	800e68c <_dtoa_r+0xabc>
 800e75e:	d102      	bne.n	800e766 <_dtoa_r+0xb96>
 800e760:	f019 0f01 	tst.w	r9, #1
 800e764:	d192      	bne.n	800e68c <_dtoa_r+0xabc>
 800e766:	462b      	mov	r3, r5
 800e768:	461d      	mov	r5, r3
 800e76a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e76e:	2a30      	cmp	r2, #48	; 0x30
 800e770:	d0fa      	beq.n	800e768 <_dtoa_r+0xb98>
 800e772:	e6dd      	b.n	800e530 <_dtoa_r+0x960>
 800e774:	9a00      	ldr	r2, [sp, #0]
 800e776:	429a      	cmp	r2, r3
 800e778:	d189      	bne.n	800e68e <_dtoa_r+0xabe>
 800e77a:	f10b 0b01 	add.w	fp, fp, #1
 800e77e:	2331      	movs	r3, #49	; 0x31
 800e780:	e796      	b.n	800e6b0 <_dtoa_r+0xae0>
 800e782:	4b0a      	ldr	r3, [pc, #40]	; (800e7ac <_dtoa_r+0xbdc>)
 800e784:	f7ff ba99 	b.w	800dcba <_dtoa_r+0xea>
 800e788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	f47f aa6d 	bne.w	800dc6a <_dtoa_r+0x9a>
 800e790:	4b07      	ldr	r3, [pc, #28]	; (800e7b0 <_dtoa_r+0xbe0>)
 800e792:	f7ff ba92 	b.w	800dcba <_dtoa_r+0xea>
 800e796:	9b01      	ldr	r3, [sp, #4]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	dcb5      	bgt.n	800e708 <_dtoa_r+0xb38>
 800e79c:	9b07      	ldr	r3, [sp, #28]
 800e79e:	2b02      	cmp	r3, #2
 800e7a0:	f73f aeb1 	bgt.w	800e506 <_dtoa_r+0x936>
 800e7a4:	e7b0      	b.n	800e708 <_dtoa_r+0xb38>
 800e7a6:	bf00      	nop
 800e7a8:	08010998 	.word	0x08010998
 800e7ac:	080108f8 	.word	0x080108f8
 800e7b0:	0801091c 	.word	0x0801091c

0800e7b4 <__ssputs_r>:
 800e7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7b8:	688e      	ldr	r6, [r1, #8]
 800e7ba:	461f      	mov	r7, r3
 800e7bc:	42be      	cmp	r6, r7
 800e7be:	680b      	ldr	r3, [r1, #0]
 800e7c0:	4682      	mov	sl, r0
 800e7c2:	460c      	mov	r4, r1
 800e7c4:	4690      	mov	r8, r2
 800e7c6:	d82c      	bhi.n	800e822 <__ssputs_r+0x6e>
 800e7c8:	898a      	ldrh	r2, [r1, #12]
 800e7ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e7ce:	d026      	beq.n	800e81e <__ssputs_r+0x6a>
 800e7d0:	6965      	ldr	r5, [r4, #20]
 800e7d2:	6909      	ldr	r1, [r1, #16]
 800e7d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e7d8:	eba3 0901 	sub.w	r9, r3, r1
 800e7dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e7e0:	1c7b      	adds	r3, r7, #1
 800e7e2:	444b      	add	r3, r9
 800e7e4:	106d      	asrs	r5, r5, #1
 800e7e6:	429d      	cmp	r5, r3
 800e7e8:	bf38      	it	cc
 800e7ea:	461d      	movcc	r5, r3
 800e7ec:	0553      	lsls	r3, r2, #21
 800e7ee:	d527      	bpl.n	800e840 <__ssputs_r+0x8c>
 800e7f0:	4629      	mov	r1, r5
 800e7f2:	f000 f95f 	bl	800eab4 <_malloc_r>
 800e7f6:	4606      	mov	r6, r0
 800e7f8:	b360      	cbz	r0, 800e854 <__ssputs_r+0xa0>
 800e7fa:	6921      	ldr	r1, [r4, #16]
 800e7fc:	464a      	mov	r2, r9
 800e7fe:	f7ff f94e 	bl	800da9e <memcpy>
 800e802:	89a3      	ldrh	r3, [r4, #12]
 800e804:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e80c:	81a3      	strh	r3, [r4, #12]
 800e80e:	6126      	str	r6, [r4, #16]
 800e810:	6165      	str	r5, [r4, #20]
 800e812:	444e      	add	r6, r9
 800e814:	eba5 0509 	sub.w	r5, r5, r9
 800e818:	6026      	str	r6, [r4, #0]
 800e81a:	60a5      	str	r5, [r4, #8]
 800e81c:	463e      	mov	r6, r7
 800e81e:	42be      	cmp	r6, r7
 800e820:	d900      	bls.n	800e824 <__ssputs_r+0x70>
 800e822:	463e      	mov	r6, r7
 800e824:	6820      	ldr	r0, [r4, #0]
 800e826:	4632      	mov	r2, r6
 800e828:	4641      	mov	r1, r8
 800e82a:	f000 fe6b 	bl	800f504 <memmove>
 800e82e:	68a3      	ldr	r3, [r4, #8]
 800e830:	1b9b      	subs	r3, r3, r6
 800e832:	60a3      	str	r3, [r4, #8]
 800e834:	6823      	ldr	r3, [r4, #0]
 800e836:	4433      	add	r3, r6
 800e838:	6023      	str	r3, [r4, #0]
 800e83a:	2000      	movs	r0, #0
 800e83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e840:	462a      	mov	r2, r5
 800e842:	f000 fe30 	bl	800f4a6 <_realloc_r>
 800e846:	4606      	mov	r6, r0
 800e848:	2800      	cmp	r0, #0
 800e84a:	d1e0      	bne.n	800e80e <__ssputs_r+0x5a>
 800e84c:	6921      	ldr	r1, [r4, #16]
 800e84e:	4650      	mov	r0, sl
 800e850:	f000 fefc 	bl	800f64c <_free_r>
 800e854:	230c      	movs	r3, #12
 800e856:	f8ca 3000 	str.w	r3, [sl]
 800e85a:	89a3      	ldrh	r3, [r4, #12]
 800e85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e860:	81a3      	strh	r3, [r4, #12]
 800e862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e866:	e7e9      	b.n	800e83c <__ssputs_r+0x88>

0800e868 <_svfiprintf_r>:
 800e868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e86c:	4698      	mov	r8, r3
 800e86e:	898b      	ldrh	r3, [r1, #12]
 800e870:	061b      	lsls	r3, r3, #24
 800e872:	b09d      	sub	sp, #116	; 0x74
 800e874:	4607      	mov	r7, r0
 800e876:	460d      	mov	r5, r1
 800e878:	4614      	mov	r4, r2
 800e87a:	d50e      	bpl.n	800e89a <_svfiprintf_r+0x32>
 800e87c:	690b      	ldr	r3, [r1, #16]
 800e87e:	b963      	cbnz	r3, 800e89a <_svfiprintf_r+0x32>
 800e880:	2140      	movs	r1, #64	; 0x40
 800e882:	f000 f917 	bl	800eab4 <_malloc_r>
 800e886:	6028      	str	r0, [r5, #0]
 800e888:	6128      	str	r0, [r5, #16]
 800e88a:	b920      	cbnz	r0, 800e896 <_svfiprintf_r+0x2e>
 800e88c:	230c      	movs	r3, #12
 800e88e:	603b      	str	r3, [r7, #0]
 800e890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e894:	e0d0      	b.n	800ea38 <_svfiprintf_r+0x1d0>
 800e896:	2340      	movs	r3, #64	; 0x40
 800e898:	616b      	str	r3, [r5, #20]
 800e89a:	2300      	movs	r3, #0
 800e89c:	9309      	str	r3, [sp, #36]	; 0x24
 800e89e:	2320      	movs	r3, #32
 800e8a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8a8:	2330      	movs	r3, #48	; 0x30
 800e8aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ea50 <_svfiprintf_r+0x1e8>
 800e8ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8b2:	f04f 0901 	mov.w	r9, #1
 800e8b6:	4623      	mov	r3, r4
 800e8b8:	469a      	mov	sl, r3
 800e8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8be:	b10a      	cbz	r2, 800e8c4 <_svfiprintf_r+0x5c>
 800e8c0:	2a25      	cmp	r2, #37	; 0x25
 800e8c2:	d1f9      	bne.n	800e8b8 <_svfiprintf_r+0x50>
 800e8c4:	ebba 0b04 	subs.w	fp, sl, r4
 800e8c8:	d00b      	beq.n	800e8e2 <_svfiprintf_r+0x7a>
 800e8ca:	465b      	mov	r3, fp
 800e8cc:	4622      	mov	r2, r4
 800e8ce:	4629      	mov	r1, r5
 800e8d0:	4638      	mov	r0, r7
 800e8d2:	f7ff ff6f 	bl	800e7b4 <__ssputs_r>
 800e8d6:	3001      	adds	r0, #1
 800e8d8:	f000 80a9 	beq.w	800ea2e <_svfiprintf_r+0x1c6>
 800e8dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8de:	445a      	add	r2, fp
 800e8e0:	9209      	str	r2, [sp, #36]	; 0x24
 800e8e2:	f89a 3000 	ldrb.w	r3, [sl]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	f000 80a1 	beq.w	800ea2e <_svfiprintf_r+0x1c6>
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8f6:	f10a 0a01 	add.w	sl, sl, #1
 800e8fa:	9304      	str	r3, [sp, #16]
 800e8fc:	9307      	str	r3, [sp, #28]
 800e8fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e902:	931a      	str	r3, [sp, #104]	; 0x68
 800e904:	4654      	mov	r4, sl
 800e906:	2205      	movs	r2, #5
 800e908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e90c:	4850      	ldr	r0, [pc, #320]	; (800ea50 <_svfiprintf_r+0x1e8>)
 800e90e:	f7f1 fc5f 	bl	80001d0 <memchr>
 800e912:	9a04      	ldr	r2, [sp, #16]
 800e914:	b9d8      	cbnz	r0, 800e94e <_svfiprintf_r+0xe6>
 800e916:	06d0      	lsls	r0, r2, #27
 800e918:	bf44      	itt	mi
 800e91a:	2320      	movmi	r3, #32
 800e91c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e920:	0711      	lsls	r1, r2, #28
 800e922:	bf44      	itt	mi
 800e924:	232b      	movmi	r3, #43	; 0x2b
 800e926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e92a:	f89a 3000 	ldrb.w	r3, [sl]
 800e92e:	2b2a      	cmp	r3, #42	; 0x2a
 800e930:	d015      	beq.n	800e95e <_svfiprintf_r+0xf6>
 800e932:	9a07      	ldr	r2, [sp, #28]
 800e934:	4654      	mov	r4, sl
 800e936:	2000      	movs	r0, #0
 800e938:	f04f 0c0a 	mov.w	ip, #10
 800e93c:	4621      	mov	r1, r4
 800e93e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e942:	3b30      	subs	r3, #48	; 0x30
 800e944:	2b09      	cmp	r3, #9
 800e946:	d94d      	bls.n	800e9e4 <_svfiprintf_r+0x17c>
 800e948:	b1b0      	cbz	r0, 800e978 <_svfiprintf_r+0x110>
 800e94a:	9207      	str	r2, [sp, #28]
 800e94c:	e014      	b.n	800e978 <_svfiprintf_r+0x110>
 800e94e:	eba0 0308 	sub.w	r3, r0, r8
 800e952:	fa09 f303 	lsl.w	r3, r9, r3
 800e956:	4313      	orrs	r3, r2
 800e958:	9304      	str	r3, [sp, #16]
 800e95a:	46a2      	mov	sl, r4
 800e95c:	e7d2      	b.n	800e904 <_svfiprintf_r+0x9c>
 800e95e:	9b03      	ldr	r3, [sp, #12]
 800e960:	1d19      	adds	r1, r3, #4
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	9103      	str	r1, [sp, #12]
 800e966:	2b00      	cmp	r3, #0
 800e968:	bfbb      	ittet	lt
 800e96a:	425b      	neglt	r3, r3
 800e96c:	f042 0202 	orrlt.w	r2, r2, #2
 800e970:	9307      	strge	r3, [sp, #28]
 800e972:	9307      	strlt	r3, [sp, #28]
 800e974:	bfb8      	it	lt
 800e976:	9204      	strlt	r2, [sp, #16]
 800e978:	7823      	ldrb	r3, [r4, #0]
 800e97a:	2b2e      	cmp	r3, #46	; 0x2e
 800e97c:	d10c      	bne.n	800e998 <_svfiprintf_r+0x130>
 800e97e:	7863      	ldrb	r3, [r4, #1]
 800e980:	2b2a      	cmp	r3, #42	; 0x2a
 800e982:	d134      	bne.n	800e9ee <_svfiprintf_r+0x186>
 800e984:	9b03      	ldr	r3, [sp, #12]
 800e986:	1d1a      	adds	r2, r3, #4
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	9203      	str	r2, [sp, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	bfb8      	it	lt
 800e990:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e994:	3402      	adds	r4, #2
 800e996:	9305      	str	r3, [sp, #20]
 800e998:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ea60 <_svfiprintf_r+0x1f8>
 800e99c:	7821      	ldrb	r1, [r4, #0]
 800e99e:	2203      	movs	r2, #3
 800e9a0:	4650      	mov	r0, sl
 800e9a2:	f7f1 fc15 	bl	80001d0 <memchr>
 800e9a6:	b138      	cbz	r0, 800e9b8 <_svfiprintf_r+0x150>
 800e9a8:	9b04      	ldr	r3, [sp, #16]
 800e9aa:	eba0 000a 	sub.w	r0, r0, sl
 800e9ae:	2240      	movs	r2, #64	; 0x40
 800e9b0:	4082      	lsls	r2, r0
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	3401      	adds	r4, #1
 800e9b6:	9304      	str	r3, [sp, #16]
 800e9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9bc:	4825      	ldr	r0, [pc, #148]	; (800ea54 <_svfiprintf_r+0x1ec>)
 800e9be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9c2:	2206      	movs	r2, #6
 800e9c4:	f7f1 fc04 	bl	80001d0 <memchr>
 800e9c8:	2800      	cmp	r0, #0
 800e9ca:	d038      	beq.n	800ea3e <_svfiprintf_r+0x1d6>
 800e9cc:	4b22      	ldr	r3, [pc, #136]	; (800ea58 <_svfiprintf_r+0x1f0>)
 800e9ce:	bb1b      	cbnz	r3, 800ea18 <_svfiprintf_r+0x1b0>
 800e9d0:	9b03      	ldr	r3, [sp, #12]
 800e9d2:	3307      	adds	r3, #7
 800e9d4:	f023 0307 	bic.w	r3, r3, #7
 800e9d8:	3308      	adds	r3, #8
 800e9da:	9303      	str	r3, [sp, #12]
 800e9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9de:	4433      	add	r3, r6
 800e9e0:	9309      	str	r3, [sp, #36]	; 0x24
 800e9e2:	e768      	b.n	800e8b6 <_svfiprintf_r+0x4e>
 800e9e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9e8:	460c      	mov	r4, r1
 800e9ea:	2001      	movs	r0, #1
 800e9ec:	e7a6      	b.n	800e93c <_svfiprintf_r+0xd4>
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	3401      	adds	r4, #1
 800e9f2:	9305      	str	r3, [sp, #20]
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	f04f 0c0a 	mov.w	ip, #10
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea00:	3a30      	subs	r2, #48	; 0x30
 800ea02:	2a09      	cmp	r2, #9
 800ea04:	d903      	bls.n	800ea0e <_svfiprintf_r+0x1a6>
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d0c6      	beq.n	800e998 <_svfiprintf_r+0x130>
 800ea0a:	9105      	str	r1, [sp, #20]
 800ea0c:	e7c4      	b.n	800e998 <_svfiprintf_r+0x130>
 800ea0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea12:	4604      	mov	r4, r0
 800ea14:	2301      	movs	r3, #1
 800ea16:	e7f0      	b.n	800e9fa <_svfiprintf_r+0x192>
 800ea18:	ab03      	add	r3, sp, #12
 800ea1a:	9300      	str	r3, [sp, #0]
 800ea1c:	462a      	mov	r2, r5
 800ea1e:	4b0f      	ldr	r3, [pc, #60]	; (800ea5c <_svfiprintf_r+0x1f4>)
 800ea20:	a904      	add	r1, sp, #16
 800ea22:	4638      	mov	r0, r7
 800ea24:	f7fe fb5a 	bl	800d0dc <_printf_float>
 800ea28:	1c42      	adds	r2, r0, #1
 800ea2a:	4606      	mov	r6, r0
 800ea2c:	d1d6      	bne.n	800e9dc <_svfiprintf_r+0x174>
 800ea2e:	89ab      	ldrh	r3, [r5, #12]
 800ea30:	065b      	lsls	r3, r3, #25
 800ea32:	f53f af2d 	bmi.w	800e890 <_svfiprintf_r+0x28>
 800ea36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea38:	b01d      	add	sp, #116	; 0x74
 800ea3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3e:	ab03      	add	r3, sp, #12
 800ea40:	9300      	str	r3, [sp, #0]
 800ea42:	462a      	mov	r2, r5
 800ea44:	4b05      	ldr	r3, [pc, #20]	; (800ea5c <_svfiprintf_r+0x1f4>)
 800ea46:	a904      	add	r1, sp, #16
 800ea48:	4638      	mov	r0, r7
 800ea4a:	f7fe fdeb 	bl	800d624 <_printf_i>
 800ea4e:	e7eb      	b.n	800ea28 <_svfiprintf_r+0x1c0>
 800ea50:	080109a9 	.word	0x080109a9
 800ea54:	080109b3 	.word	0x080109b3
 800ea58:	0800d0dd 	.word	0x0800d0dd
 800ea5c:	0800e7b5 	.word	0x0800e7b5
 800ea60:	080109af 	.word	0x080109af

0800ea64 <malloc>:
 800ea64:	4b02      	ldr	r3, [pc, #8]	; (800ea70 <malloc+0xc>)
 800ea66:	4601      	mov	r1, r0
 800ea68:	6818      	ldr	r0, [r3, #0]
 800ea6a:	f000 b823 	b.w	800eab4 <_malloc_r>
 800ea6e:	bf00      	nop
 800ea70:	20000088 	.word	0x20000088

0800ea74 <sbrk_aligned>:
 800ea74:	b570      	push	{r4, r5, r6, lr}
 800ea76:	4e0e      	ldr	r6, [pc, #56]	; (800eab0 <sbrk_aligned+0x3c>)
 800ea78:	460c      	mov	r4, r1
 800ea7a:	6831      	ldr	r1, [r6, #0]
 800ea7c:	4605      	mov	r5, r0
 800ea7e:	b911      	cbnz	r1, 800ea86 <sbrk_aligned+0x12>
 800ea80:	f000 fd8e 	bl	800f5a0 <_sbrk_r>
 800ea84:	6030      	str	r0, [r6, #0]
 800ea86:	4621      	mov	r1, r4
 800ea88:	4628      	mov	r0, r5
 800ea8a:	f000 fd89 	bl	800f5a0 <_sbrk_r>
 800ea8e:	1c43      	adds	r3, r0, #1
 800ea90:	d00a      	beq.n	800eaa8 <sbrk_aligned+0x34>
 800ea92:	1cc4      	adds	r4, r0, #3
 800ea94:	f024 0403 	bic.w	r4, r4, #3
 800ea98:	42a0      	cmp	r0, r4
 800ea9a:	d007      	beq.n	800eaac <sbrk_aligned+0x38>
 800ea9c:	1a21      	subs	r1, r4, r0
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	f000 fd7e 	bl	800f5a0 <_sbrk_r>
 800eaa4:	3001      	adds	r0, #1
 800eaa6:	d101      	bne.n	800eaac <sbrk_aligned+0x38>
 800eaa8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800eaac:	4620      	mov	r0, r4
 800eaae:	bd70      	pop	{r4, r5, r6, pc}
 800eab0:	200054b0 	.word	0x200054b0

0800eab4 <_malloc_r>:
 800eab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eab8:	1ccd      	adds	r5, r1, #3
 800eaba:	f025 0503 	bic.w	r5, r5, #3
 800eabe:	3508      	adds	r5, #8
 800eac0:	2d0c      	cmp	r5, #12
 800eac2:	bf38      	it	cc
 800eac4:	250c      	movcc	r5, #12
 800eac6:	2d00      	cmp	r5, #0
 800eac8:	4607      	mov	r7, r0
 800eaca:	db01      	blt.n	800ead0 <_malloc_r+0x1c>
 800eacc:	42a9      	cmp	r1, r5
 800eace:	d905      	bls.n	800eadc <_malloc_r+0x28>
 800ead0:	230c      	movs	r3, #12
 800ead2:	603b      	str	r3, [r7, #0]
 800ead4:	2600      	movs	r6, #0
 800ead6:	4630      	mov	r0, r6
 800ead8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eadc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ebb0 <_malloc_r+0xfc>
 800eae0:	f000 f916 	bl	800ed10 <__malloc_lock>
 800eae4:	f8d8 3000 	ldr.w	r3, [r8]
 800eae8:	461c      	mov	r4, r3
 800eaea:	bb5c      	cbnz	r4, 800eb44 <_malloc_r+0x90>
 800eaec:	4629      	mov	r1, r5
 800eaee:	4638      	mov	r0, r7
 800eaf0:	f7ff ffc0 	bl	800ea74 <sbrk_aligned>
 800eaf4:	1c43      	adds	r3, r0, #1
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	d155      	bne.n	800eba6 <_malloc_r+0xf2>
 800eafa:	f8d8 4000 	ldr.w	r4, [r8]
 800eafe:	4626      	mov	r6, r4
 800eb00:	2e00      	cmp	r6, #0
 800eb02:	d145      	bne.n	800eb90 <_malloc_r+0xdc>
 800eb04:	2c00      	cmp	r4, #0
 800eb06:	d048      	beq.n	800eb9a <_malloc_r+0xe6>
 800eb08:	6823      	ldr	r3, [r4, #0]
 800eb0a:	4631      	mov	r1, r6
 800eb0c:	4638      	mov	r0, r7
 800eb0e:	eb04 0903 	add.w	r9, r4, r3
 800eb12:	f000 fd45 	bl	800f5a0 <_sbrk_r>
 800eb16:	4581      	cmp	r9, r0
 800eb18:	d13f      	bne.n	800eb9a <_malloc_r+0xe6>
 800eb1a:	6821      	ldr	r1, [r4, #0]
 800eb1c:	1a6d      	subs	r5, r5, r1
 800eb1e:	4629      	mov	r1, r5
 800eb20:	4638      	mov	r0, r7
 800eb22:	f7ff ffa7 	bl	800ea74 <sbrk_aligned>
 800eb26:	3001      	adds	r0, #1
 800eb28:	d037      	beq.n	800eb9a <_malloc_r+0xe6>
 800eb2a:	6823      	ldr	r3, [r4, #0]
 800eb2c:	442b      	add	r3, r5
 800eb2e:	6023      	str	r3, [r4, #0]
 800eb30:	f8d8 3000 	ldr.w	r3, [r8]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d038      	beq.n	800ebaa <_malloc_r+0xf6>
 800eb38:	685a      	ldr	r2, [r3, #4]
 800eb3a:	42a2      	cmp	r2, r4
 800eb3c:	d12b      	bne.n	800eb96 <_malloc_r+0xe2>
 800eb3e:	2200      	movs	r2, #0
 800eb40:	605a      	str	r2, [r3, #4]
 800eb42:	e00f      	b.n	800eb64 <_malloc_r+0xb0>
 800eb44:	6822      	ldr	r2, [r4, #0]
 800eb46:	1b52      	subs	r2, r2, r5
 800eb48:	d41f      	bmi.n	800eb8a <_malloc_r+0xd6>
 800eb4a:	2a0b      	cmp	r2, #11
 800eb4c:	d917      	bls.n	800eb7e <_malloc_r+0xca>
 800eb4e:	1961      	adds	r1, r4, r5
 800eb50:	42a3      	cmp	r3, r4
 800eb52:	6025      	str	r5, [r4, #0]
 800eb54:	bf18      	it	ne
 800eb56:	6059      	strne	r1, [r3, #4]
 800eb58:	6863      	ldr	r3, [r4, #4]
 800eb5a:	bf08      	it	eq
 800eb5c:	f8c8 1000 	streq.w	r1, [r8]
 800eb60:	5162      	str	r2, [r4, r5]
 800eb62:	604b      	str	r3, [r1, #4]
 800eb64:	4638      	mov	r0, r7
 800eb66:	f104 060b 	add.w	r6, r4, #11
 800eb6a:	f000 f8d7 	bl	800ed1c <__malloc_unlock>
 800eb6e:	f026 0607 	bic.w	r6, r6, #7
 800eb72:	1d23      	adds	r3, r4, #4
 800eb74:	1af2      	subs	r2, r6, r3
 800eb76:	d0ae      	beq.n	800ead6 <_malloc_r+0x22>
 800eb78:	1b9b      	subs	r3, r3, r6
 800eb7a:	50a3      	str	r3, [r4, r2]
 800eb7c:	e7ab      	b.n	800ead6 <_malloc_r+0x22>
 800eb7e:	42a3      	cmp	r3, r4
 800eb80:	6862      	ldr	r2, [r4, #4]
 800eb82:	d1dd      	bne.n	800eb40 <_malloc_r+0x8c>
 800eb84:	f8c8 2000 	str.w	r2, [r8]
 800eb88:	e7ec      	b.n	800eb64 <_malloc_r+0xb0>
 800eb8a:	4623      	mov	r3, r4
 800eb8c:	6864      	ldr	r4, [r4, #4]
 800eb8e:	e7ac      	b.n	800eaea <_malloc_r+0x36>
 800eb90:	4634      	mov	r4, r6
 800eb92:	6876      	ldr	r6, [r6, #4]
 800eb94:	e7b4      	b.n	800eb00 <_malloc_r+0x4c>
 800eb96:	4613      	mov	r3, r2
 800eb98:	e7cc      	b.n	800eb34 <_malloc_r+0x80>
 800eb9a:	230c      	movs	r3, #12
 800eb9c:	603b      	str	r3, [r7, #0]
 800eb9e:	4638      	mov	r0, r7
 800eba0:	f000 f8bc 	bl	800ed1c <__malloc_unlock>
 800eba4:	e797      	b.n	800ead6 <_malloc_r+0x22>
 800eba6:	6025      	str	r5, [r4, #0]
 800eba8:	e7dc      	b.n	800eb64 <_malloc_r+0xb0>
 800ebaa:	605b      	str	r3, [r3, #4]
 800ebac:	deff      	udf	#255	; 0xff
 800ebae:	bf00      	nop
 800ebb0:	200054ac 	.word	0x200054ac

0800ebb4 <__sflush_r>:
 800ebb4:	898a      	ldrh	r2, [r1, #12]
 800ebb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebba:	4605      	mov	r5, r0
 800ebbc:	0710      	lsls	r0, r2, #28
 800ebbe:	460c      	mov	r4, r1
 800ebc0:	d458      	bmi.n	800ec74 <__sflush_r+0xc0>
 800ebc2:	684b      	ldr	r3, [r1, #4]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	dc05      	bgt.n	800ebd4 <__sflush_r+0x20>
 800ebc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	dc02      	bgt.n	800ebd4 <__sflush_r+0x20>
 800ebce:	2000      	movs	r0, #0
 800ebd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebd6:	2e00      	cmp	r6, #0
 800ebd8:	d0f9      	beq.n	800ebce <__sflush_r+0x1a>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebe0:	682f      	ldr	r7, [r5, #0]
 800ebe2:	6a21      	ldr	r1, [r4, #32]
 800ebe4:	602b      	str	r3, [r5, #0]
 800ebe6:	d032      	beq.n	800ec4e <__sflush_r+0x9a>
 800ebe8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebea:	89a3      	ldrh	r3, [r4, #12]
 800ebec:	075a      	lsls	r2, r3, #29
 800ebee:	d505      	bpl.n	800ebfc <__sflush_r+0x48>
 800ebf0:	6863      	ldr	r3, [r4, #4]
 800ebf2:	1ac0      	subs	r0, r0, r3
 800ebf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebf6:	b10b      	cbz	r3, 800ebfc <__sflush_r+0x48>
 800ebf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebfa:	1ac0      	subs	r0, r0, r3
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	4602      	mov	r2, r0
 800ec00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec02:	6a21      	ldr	r1, [r4, #32]
 800ec04:	4628      	mov	r0, r5
 800ec06:	47b0      	blx	r6
 800ec08:	1c43      	adds	r3, r0, #1
 800ec0a:	89a3      	ldrh	r3, [r4, #12]
 800ec0c:	d106      	bne.n	800ec1c <__sflush_r+0x68>
 800ec0e:	6829      	ldr	r1, [r5, #0]
 800ec10:	291d      	cmp	r1, #29
 800ec12:	d82b      	bhi.n	800ec6c <__sflush_r+0xb8>
 800ec14:	4a29      	ldr	r2, [pc, #164]	; (800ecbc <__sflush_r+0x108>)
 800ec16:	410a      	asrs	r2, r1
 800ec18:	07d6      	lsls	r6, r2, #31
 800ec1a:	d427      	bmi.n	800ec6c <__sflush_r+0xb8>
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	6062      	str	r2, [r4, #4]
 800ec20:	04d9      	lsls	r1, r3, #19
 800ec22:	6922      	ldr	r2, [r4, #16]
 800ec24:	6022      	str	r2, [r4, #0]
 800ec26:	d504      	bpl.n	800ec32 <__sflush_r+0x7e>
 800ec28:	1c42      	adds	r2, r0, #1
 800ec2a:	d101      	bne.n	800ec30 <__sflush_r+0x7c>
 800ec2c:	682b      	ldr	r3, [r5, #0]
 800ec2e:	b903      	cbnz	r3, 800ec32 <__sflush_r+0x7e>
 800ec30:	6560      	str	r0, [r4, #84]	; 0x54
 800ec32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec34:	602f      	str	r7, [r5, #0]
 800ec36:	2900      	cmp	r1, #0
 800ec38:	d0c9      	beq.n	800ebce <__sflush_r+0x1a>
 800ec3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec3e:	4299      	cmp	r1, r3
 800ec40:	d002      	beq.n	800ec48 <__sflush_r+0x94>
 800ec42:	4628      	mov	r0, r5
 800ec44:	f000 fd02 	bl	800f64c <_free_r>
 800ec48:	2000      	movs	r0, #0
 800ec4a:	6360      	str	r0, [r4, #52]	; 0x34
 800ec4c:	e7c0      	b.n	800ebd0 <__sflush_r+0x1c>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	4628      	mov	r0, r5
 800ec52:	47b0      	blx	r6
 800ec54:	1c41      	adds	r1, r0, #1
 800ec56:	d1c8      	bne.n	800ebea <__sflush_r+0x36>
 800ec58:	682b      	ldr	r3, [r5, #0]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d0c5      	beq.n	800ebea <__sflush_r+0x36>
 800ec5e:	2b1d      	cmp	r3, #29
 800ec60:	d001      	beq.n	800ec66 <__sflush_r+0xb2>
 800ec62:	2b16      	cmp	r3, #22
 800ec64:	d101      	bne.n	800ec6a <__sflush_r+0xb6>
 800ec66:	602f      	str	r7, [r5, #0]
 800ec68:	e7b1      	b.n	800ebce <__sflush_r+0x1a>
 800ec6a:	89a3      	ldrh	r3, [r4, #12]
 800ec6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec70:	81a3      	strh	r3, [r4, #12]
 800ec72:	e7ad      	b.n	800ebd0 <__sflush_r+0x1c>
 800ec74:	690f      	ldr	r7, [r1, #16]
 800ec76:	2f00      	cmp	r7, #0
 800ec78:	d0a9      	beq.n	800ebce <__sflush_r+0x1a>
 800ec7a:	0793      	lsls	r3, r2, #30
 800ec7c:	680e      	ldr	r6, [r1, #0]
 800ec7e:	bf08      	it	eq
 800ec80:	694b      	ldreq	r3, [r1, #20]
 800ec82:	600f      	str	r7, [r1, #0]
 800ec84:	bf18      	it	ne
 800ec86:	2300      	movne	r3, #0
 800ec88:	eba6 0807 	sub.w	r8, r6, r7
 800ec8c:	608b      	str	r3, [r1, #8]
 800ec8e:	f1b8 0f00 	cmp.w	r8, #0
 800ec92:	dd9c      	ble.n	800ebce <__sflush_r+0x1a>
 800ec94:	6a21      	ldr	r1, [r4, #32]
 800ec96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec98:	4643      	mov	r3, r8
 800ec9a:	463a      	mov	r2, r7
 800ec9c:	4628      	mov	r0, r5
 800ec9e:	47b0      	blx	r6
 800eca0:	2800      	cmp	r0, #0
 800eca2:	dc06      	bgt.n	800ecb2 <__sflush_r+0xfe>
 800eca4:	89a3      	ldrh	r3, [r4, #12]
 800eca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecaa:	81a3      	strh	r3, [r4, #12]
 800ecac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ecb0:	e78e      	b.n	800ebd0 <__sflush_r+0x1c>
 800ecb2:	4407      	add	r7, r0
 800ecb4:	eba8 0800 	sub.w	r8, r8, r0
 800ecb8:	e7e9      	b.n	800ec8e <__sflush_r+0xda>
 800ecba:	bf00      	nop
 800ecbc:	dfbffffe 	.word	0xdfbffffe

0800ecc0 <_fflush_r>:
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	690b      	ldr	r3, [r1, #16]
 800ecc4:	4605      	mov	r5, r0
 800ecc6:	460c      	mov	r4, r1
 800ecc8:	b913      	cbnz	r3, 800ecd0 <_fflush_r+0x10>
 800ecca:	2500      	movs	r5, #0
 800eccc:	4628      	mov	r0, r5
 800ecce:	bd38      	pop	{r3, r4, r5, pc}
 800ecd0:	b118      	cbz	r0, 800ecda <_fflush_r+0x1a>
 800ecd2:	6a03      	ldr	r3, [r0, #32]
 800ecd4:	b90b      	cbnz	r3, 800ecda <_fflush_r+0x1a>
 800ecd6:	f7fe fe73 	bl	800d9c0 <__sinit>
 800ecda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d0f3      	beq.n	800ecca <_fflush_r+0xa>
 800ece2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ece4:	07d0      	lsls	r0, r2, #31
 800ece6:	d404      	bmi.n	800ecf2 <_fflush_r+0x32>
 800ece8:	0599      	lsls	r1, r3, #22
 800ecea:	d402      	bmi.n	800ecf2 <_fflush_r+0x32>
 800ecec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecee:	f7fe fed4 	bl	800da9a <__retarget_lock_acquire_recursive>
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	f7ff ff5d 	bl	800ebb4 <__sflush_r>
 800ecfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecfc:	07da      	lsls	r2, r3, #31
 800ecfe:	4605      	mov	r5, r0
 800ed00:	d4e4      	bmi.n	800eccc <_fflush_r+0xc>
 800ed02:	89a3      	ldrh	r3, [r4, #12]
 800ed04:	059b      	lsls	r3, r3, #22
 800ed06:	d4e1      	bmi.n	800eccc <_fflush_r+0xc>
 800ed08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed0a:	f7fe fec7 	bl	800da9c <__retarget_lock_release_recursive>
 800ed0e:	e7dd      	b.n	800eccc <_fflush_r+0xc>

0800ed10 <__malloc_lock>:
 800ed10:	4801      	ldr	r0, [pc, #4]	; (800ed18 <__malloc_lock+0x8>)
 800ed12:	f7fe bec2 	b.w	800da9a <__retarget_lock_acquire_recursive>
 800ed16:	bf00      	nop
 800ed18:	200054a8 	.word	0x200054a8

0800ed1c <__malloc_unlock>:
 800ed1c:	4801      	ldr	r0, [pc, #4]	; (800ed24 <__malloc_unlock+0x8>)
 800ed1e:	f7fe bebd 	b.w	800da9c <__retarget_lock_release_recursive>
 800ed22:	bf00      	nop
 800ed24:	200054a8 	.word	0x200054a8

0800ed28 <_Balloc>:
 800ed28:	b570      	push	{r4, r5, r6, lr}
 800ed2a:	69c6      	ldr	r6, [r0, #28]
 800ed2c:	4604      	mov	r4, r0
 800ed2e:	460d      	mov	r5, r1
 800ed30:	b976      	cbnz	r6, 800ed50 <_Balloc+0x28>
 800ed32:	2010      	movs	r0, #16
 800ed34:	f7ff fe96 	bl	800ea64 <malloc>
 800ed38:	4602      	mov	r2, r0
 800ed3a:	61e0      	str	r0, [r4, #28]
 800ed3c:	b920      	cbnz	r0, 800ed48 <_Balloc+0x20>
 800ed3e:	4b18      	ldr	r3, [pc, #96]	; (800eda0 <_Balloc+0x78>)
 800ed40:	4818      	ldr	r0, [pc, #96]	; (800eda4 <_Balloc+0x7c>)
 800ed42:	216b      	movs	r1, #107	; 0x6b
 800ed44:	f000 fc4e 	bl	800f5e4 <__assert_func>
 800ed48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed4c:	6006      	str	r6, [r0, #0]
 800ed4e:	60c6      	str	r6, [r0, #12]
 800ed50:	69e6      	ldr	r6, [r4, #28]
 800ed52:	68f3      	ldr	r3, [r6, #12]
 800ed54:	b183      	cbz	r3, 800ed78 <_Balloc+0x50>
 800ed56:	69e3      	ldr	r3, [r4, #28]
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ed5e:	b9b8      	cbnz	r0, 800ed90 <_Balloc+0x68>
 800ed60:	2101      	movs	r1, #1
 800ed62:	fa01 f605 	lsl.w	r6, r1, r5
 800ed66:	1d72      	adds	r2, r6, #5
 800ed68:	0092      	lsls	r2, r2, #2
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	f000 fc58 	bl	800f620 <_calloc_r>
 800ed70:	b160      	cbz	r0, 800ed8c <_Balloc+0x64>
 800ed72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ed76:	e00e      	b.n	800ed96 <_Balloc+0x6e>
 800ed78:	2221      	movs	r2, #33	; 0x21
 800ed7a:	2104      	movs	r1, #4
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	f000 fc4f 	bl	800f620 <_calloc_r>
 800ed82:	69e3      	ldr	r3, [r4, #28]
 800ed84:	60f0      	str	r0, [r6, #12]
 800ed86:	68db      	ldr	r3, [r3, #12]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1e4      	bne.n	800ed56 <_Balloc+0x2e>
 800ed8c:	2000      	movs	r0, #0
 800ed8e:	bd70      	pop	{r4, r5, r6, pc}
 800ed90:	6802      	ldr	r2, [r0, #0]
 800ed92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ed96:	2300      	movs	r3, #0
 800ed98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed9c:	e7f7      	b.n	800ed8e <_Balloc+0x66>
 800ed9e:	bf00      	nop
 800eda0:	08010929 	.word	0x08010929
 800eda4:	080109ba 	.word	0x080109ba

0800eda8 <_Bfree>:
 800eda8:	b570      	push	{r4, r5, r6, lr}
 800edaa:	69c6      	ldr	r6, [r0, #28]
 800edac:	4605      	mov	r5, r0
 800edae:	460c      	mov	r4, r1
 800edb0:	b976      	cbnz	r6, 800edd0 <_Bfree+0x28>
 800edb2:	2010      	movs	r0, #16
 800edb4:	f7ff fe56 	bl	800ea64 <malloc>
 800edb8:	4602      	mov	r2, r0
 800edba:	61e8      	str	r0, [r5, #28]
 800edbc:	b920      	cbnz	r0, 800edc8 <_Bfree+0x20>
 800edbe:	4b09      	ldr	r3, [pc, #36]	; (800ede4 <_Bfree+0x3c>)
 800edc0:	4809      	ldr	r0, [pc, #36]	; (800ede8 <_Bfree+0x40>)
 800edc2:	218f      	movs	r1, #143	; 0x8f
 800edc4:	f000 fc0e 	bl	800f5e4 <__assert_func>
 800edc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800edcc:	6006      	str	r6, [r0, #0]
 800edce:	60c6      	str	r6, [r0, #12]
 800edd0:	b13c      	cbz	r4, 800ede2 <_Bfree+0x3a>
 800edd2:	69eb      	ldr	r3, [r5, #28]
 800edd4:	6862      	ldr	r2, [r4, #4]
 800edd6:	68db      	ldr	r3, [r3, #12]
 800edd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eddc:	6021      	str	r1, [r4, #0]
 800edde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ede2:	bd70      	pop	{r4, r5, r6, pc}
 800ede4:	08010929 	.word	0x08010929
 800ede8:	080109ba 	.word	0x080109ba

0800edec <__multadd>:
 800edec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf0:	690d      	ldr	r5, [r1, #16]
 800edf2:	4607      	mov	r7, r0
 800edf4:	460c      	mov	r4, r1
 800edf6:	461e      	mov	r6, r3
 800edf8:	f101 0c14 	add.w	ip, r1, #20
 800edfc:	2000      	movs	r0, #0
 800edfe:	f8dc 3000 	ldr.w	r3, [ip]
 800ee02:	b299      	uxth	r1, r3
 800ee04:	fb02 6101 	mla	r1, r2, r1, r6
 800ee08:	0c1e      	lsrs	r6, r3, #16
 800ee0a:	0c0b      	lsrs	r3, r1, #16
 800ee0c:	fb02 3306 	mla	r3, r2, r6, r3
 800ee10:	b289      	uxth	r1, r1
 800ee12:	3001      	adds	r0, #1
 800ee14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ee18:	4285      	cmp	r5, r0
 800ee1a:	f84c 1b04 	str.w	r1, [ip], #4
 800ee1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ee22:	dcec      	bgt.n	800edfe <__multadd+0x12>
 800ee24:	b30e      	cbz	r6, 800ee6a <__multadd+0x7e>
 800ee26:	68a3      	ldr	r3, [r4, #8]
 800ee28:	42ab      	cmp	r3, r5
 800ee2a:	dc19      	bgt.n	800ee60 <__multadd+0x74>
 800ee2c:	6861      	ldr	r1, [r4, #4]
 800ee2e:	4638      	mov	r0, r7
 800ee30:	3101      	adds	r1, #1
 800ee32:	f7ff ff79 	bl	800ed28 <_Balloc>
 800ee36:	4680      	mov	r8, r0
 800ee38:	b928      	cbnz	r0, 800ee46 <__multadd+0x5a>
 800ee3a:	4602      	mov	r2, r0
 800ee3c:	4b0c      	ldr	r3, [pc, #48]	; (800ee70 <__multadd+0x84>)
 800ee3e:	480d      	ldr	r0, [pc, #52]	; (800ee74 <__multadd+0x88>)
 800ee40:	21ba      	movs	r1, #186	; 0xba
 800ee42:	f000 fbcf 	bl	800f5e4 <__assert_func>
 800ee46:	6922      	ldr	r2, [r4, #16]
 800ee48:	3202      	adds	r2, #2
 800ee4a:	f104 010c 	add.w	r1, r4, #12
 800ee4e:	0092      	lsls	r2, r2, #2
 800ee50:	300c      	adds	r0, #12
 800ee52:	f7fe fe24 	bl	800da9e <memcpy>
 800ee56:	4621      	mov	r1, r4
 800ee58:	4638      	mov	r0, r7
 800ee5a:	f7ff ffa5 	bl	800eda8 <_Bfree>
 800ee5e:	4644      	mov	r4, r8
 800ee60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ee64:	3501      	adds	r5, #1
 800ee66:	615e      	str	r6, [r3, #20]
 800ee68:	6125      	str	r5, [r4, #16]
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee70:	08010998 	.word	0x08010998
 800ee74:	080109ba 	.word	0x080109ba

0800ee78 <__hi0bits>:
 800ee78:	0c03      	lsrs	r3, r0, #16
 800ee7a:	041b      	lsls	r3, r3, #16
 800ee7c:	b9d3      	cbnz	r3, 800eeb4 <__hi0bits+0x3c>
 800ee7e:	0400      	lsls	r0, r0, #16
 800ee80:	2310      	movs	r3, #16
 800ee82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ee86:	bf04      	itt	eq
 800ee88:	0200      	lsleq	r0, r0, #8
 800ee8a:	3308      	addeq	r3, #8
 800ee8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ee90:	bf04      	itt	eq
 800ee92:	0100      	lsleq	r0, r0, #4
 800ee94:	3304      	addeq	r3, #4
 800ee96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ee9a:	bf04      	itt	eq
 800ee9c:	0080      	lsleq	r0, r0, #2
 800ee9e:	3302      	addeq	r3, #2
 800eea0:	2800      	cmp	r0, #0
 800eea2:	db05      	blt.n	800eeb0 <__hi0bits+0x38>
 800eea4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eea8:	f103 0301 	add.w	r3, r3, #1
 800eeac:	bf08      	it	eq
 800eeae:	2320      	moveq	r3, #32
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	4770      	bx	lr
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	e7e4      	b.n	800ee82 <__hi0bits+0xa>

0800eeb8 <__lo0bits>:
 800eeb8:	6803      	ldr	r3, [r0, #0]
 800eeba:	f013 0207 	ands.w	r2, r3, #7
 800eebe:	d00c      	beq.n	800eeda <__lo0bits+0x22>
 800eec0:	07d9      	lsls	r1, r3, #31
 800eec2:	d422      	bmi.n	800ef0a <__lo0bits+0x52>
 800eec4:	079a      	lsls	r2, r3, #30
 800eec6:	bf49      	itett	mi
 800eec8:	085b      	lsrmi	r3, r3, #1
 800eeca:	089b      	lsrpl	r3, r3, #2
 800eecc:	6003      	strmi	r3, [r0, #0]
 800eece:	2201      	movmi	r2, #1
 800eed0:	bf5c      	itt	pl
 800eed2:	6003      	strpl	r3, [r0, #0]
 800eed4:	2202      	movpl	r2, #2
 800eed6:	4610      	mov	r0, r2
 800eed8:	4770      	bx	lr
 800eeda:	b299      	uxth	r1, r3
 800eedc:	b909      	cbnz	r1, 800eee2 <__lo0bits+0x2a>
 800eede:	0c1b      	lsrs	r3, r3, #16
 800eee0:	2210      	movs	r2, #16
 800eee2:	b2d9      	uxtb	r1, r3
 800eee4:	b909      	cbnz	r1, 800eeea <__lo0bits+0x32>
 800eee6:	3208      	adds	r2, #8
 800eee8:	0a1b      	lsrs	r3, r3, #8
 800eeea:	0719      	lsls	r1, r3, #28
 800eeec:	bf04      	itt	eq
 800eeee:	091b      	lsreq	r3, r3, #4
 800eef0:	3204      	addeq	r2, #4
 800eef2:	0799      	lsls	r1, r3, #30
 800eef4:	bf04      	itt	eq
 800eef6:	089b      	lsreq	r3, r3, #2
 800eef8:	3202      	addeq	r2, #2
 800eefa:	07d9      	lsls	r1, r3, #31
 800eefc:	d403      	bmi.n	800ef06 <__lo0bits+0x4e>
 800eefe:	085b      	lsrs	r3, r3, #1
 800ef00:	f102 0201 	add.w	r2, r2, #1
 800ef04:	d003      	beq.n	800ef0e <__lo0bits+0x56>
 800ef06:	6003      	str	r3, [r0, #0]
 800ef08:	e7e5      	b.n	800eed6 <__lo0bits+0x1e>
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	e7e3      	b.n	800eed6 <__lo0bits+0x1e>
 800ef0e:	2220      	movs	r2, #32
 800ef10:	e7e1      	b.n	800eed6 <__lo0bits+0x1e>
	...

0800ef14 <__i2b>:
 800ef14:	b510      	push	{r4, lr}
 800ef16:	460c      	mov	r4, r1
 800ef18:	2101      	movs	r1, #1
 800ef1a:	f7ff ff05 	bl	800ed28 <_Balloc>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	b928      	cbnz	r0, 800ef2e <__i2b+0x1a>
 800ef22:	4b05      	ldr	r3, [pc, #20]	; (800ef38 <__i2b+0x24>)
 800ef24:	4805      	ldr	r0, [pc, #20]	; (800ef3c <__i2b+0x28>)
 800ef26:	f240 1145 	movw	r1, #325	; 0x145
 800ef2a:	f000 fb5b 	bl	800f5e4 <__assert_func>
 800ef2e:	2301      	movs	r3, #1
 800ef30:	6144      	str	r4, [r0, #20]
 800ef32:	6103      	str	r3, [r0, #16]
 800ef34:	bd10      	pop	{r4, pc}
 800ef36:	bf00      	nop
 800ef38:	08010998 	.word	0x08010998
 800ef3c:	080109ba 	.word	0x080109ba

0800ef40 <__multiply>:
 800ef40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef44:	4691      	mov	r9, r2
 800ef46:	690a      	ldr	r2, [r1, #16]
 800ef48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	bfb8      	it	lt
 800ef50:	460b      	movlt	r3, r1
 800ef52:	460c      	mov	r4, r1
 800ef54:	bfbc      	itt	lt
 800ef56:	464c      	movlt	r4, r9
 800ef58:	4699      	movlt	r9, r3
 800ef5a:	6927      	ldr	r7, [r4, #16]
 800ef5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ef60:	68a3      	ldr	r3, [r4, #8]
 800ef62:	6861      	ldr	r1, [r4, #4]
 800ef64:	eb07 060a 	add.w	r6, r7, sl
 800ef68:	42b3      	cmp	r3, r6
 800ef6a:	b085      	sub	sp, #20
 800ef6c:	bfb8      	it	lt
 800ef6e:	3101      	addlt	r1, #1
 800ef70:	f7ff feda 	bl	800ed28 <_Balloc>
 800ef74:	b930      	cbnz	r0, 800ef84 <__multiply+0x44>
 800ef76:	4602      	mov	r2, r0
 800ef78:	4b44      	ldr	r3, [pc, #272]	; (800f08c <__multiply+0x14c>)
 800ef7a:	4845      	ldr	r0, [pc, #276]	; (800f090 <__multiply+0x150>)
 800ef7c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ef80:	f000 fb30 	bl	800f5e4 <__assert_func>
 800ef84:	f100 0514 	add.w	r5, r0, #20
 800ef88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ef8c:	462b      	mov	r3, r5
 800ef8e:	2200      	movs	r2, #0
 800ef90:	4543      	cmp	r3, r8
 800ef92:	d321      	bcc.n	800efd8 <__multiply+0x98>
 800ef94:	f104 0314 	add.w	r3, r4, #20
 800ef98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ef9c:	f109 0314 	add.w	r3, r9, #20
 800efa0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800efa4:	9202      	str	r2, [sp, #8]
 800efa6:	1b3a      	subs	r2, r7, r4
 800efa8:	3a15      	subs	r2, #21
 800efaa:	f022 0203 	bic.w	r2, r2, #3
 800efae:	3204      	adds	r2, #4
 800efb0:	f104 0115 	add.w	r1, r4, #21
 800efb4:	428f      	cmp	r7, r1
 800efb6:	bf38      	it	cc
 800efb8:	2204      	movcc	r2, #4
 800efba:	9201      	str	r2, [sp, #4]
 800efbc:	9a02      	ldr	r2, [sp, #8]
 800efbe:	9303      	str	r3, [sp, #12]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d80c      	bhi.n	800efde <__multiply+0x9e>
 800efc4:	2e00      	cmp	r6, #0
 800efc6:	dd03      	ble.n	800efd0 <__multiply+0x90>
 800efc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d05b      	beq.n	800f088 <__multiply+0x148>
 800efd0:	6106      	str	r6, [r0, #16]
 800efd2:	b005      	add	sp, #20
 800efd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efd8:	f843 2b04 	str.w	r2, [r3], #4
 800efdc:	e7d8      	b.n	800ef90 <__multiply+0x50>
 800efde:	f8b3 a000 	ldrh.w	sl, [r3]
 800efe2:	f1ba 0f00 	cmp.w	sl, #0
 800efe6:	d024      	beq.n	800f032 <__multiply+0xf2>
 800efe8:	f104 0e14 	add.w	lr, r4, #20
 800efec:	46a9      	mov	r9, r5
 800efee:	f04f 0c00 	mov.w	ip, #0
 800eff2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eff6:	f8d9 1000 	ldr.w	r1, [r9]
 800effa:	fa1f fb82 	uxth.w	fp, r2
 800effe:	b289      	uxth	r1, r1
 800f000:	fb0a 110b 	mla	r1, sl, fp, r1
 800f004:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f008:	f8d9 2000 	ldr.w	r2, [r9]
 800f00c:	4461      	add	r1, ip
 800f00e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f012:	fb0a c20b 	mla	r2, sl, fp, ip
 800f016:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f01a:	b289      	uxth	r1, r1
 800f01c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f020:	4577      	cmp	r7, lr
 800f022:	f849 1b04 	str.w	r1, [r9], #4
 800f026:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f02a:	d8e2      	bhi.n	800eff2 <__multiply+0xb2>
 800f02c:	9a01      	ldr	r2, [sp, #4]
 800f02e:	f845 c002 	str.w	ip, [r5, r2]
 800f032:	9a03      	ldr	r2, [sp, #12]
 800f034:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f038:	3304      	adds	r3, #4
 800f03a:	f1b9 0f00 	cmp.w	r9, #0
 800f03e:	d021      	beq.n	800f084 <__multiply+0x144>
 800f040:	6829      	ldr	r1, [r5, #0]
 800f042:	f104 0c14 	add.w	ip, r4, #20
 800f046:	46ae      	mov	lr, r5
 800f048:	f04f 0a00 	mov.w	sl, #0
 800f04c:	f8bc b000 	ldrh.w	fp, [ip]
 800f050:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f054:	fb09 220b 	mla	r2, r9, fp, r2
 800f058:	4452      	add	r2, sl
 800f05a:	b289      	uxth	r1, r1
 800f05c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f060:	f84e 1b04 	str.w	r1, [lr], #4
 800f064:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f068:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f06c:	f8be 1000 	ldrh.w	r1, [lr]
 800f070:	fb09 110a 	mla	r1, r9, sl, r1
 800f074:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f078:	4567      	cmp	r7, ip
 800f07a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f07e:	d8e5      	bhi.n	800f04c <__multiply+0x10c>
 800f080:	9a01      	ldr	r2, [sp, #4]
 800f082:	50a9      	str	r1, [r5, r2]
 800f084:	3504      	adds	r5, #4
 800f086:	e799      	b.n	800efbc <__multiply+0x7c>
 800f088:	3e01      	subs	r6, #1
 800f08a:	e79b      	b.n	800efc4 <__multiply+0x84>
 800f08c:	08010998 	.word	0x08010998
 800f090:	080109ba 	.word	0x080109ba

0800f094 <__pow5mult>:
 800f094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f098:	4615      	mov	r5, r2
 800f09a:	f012 0203 	ands.w	r2, r2, #3
 800f09e:	4606      	mov	r6, r0
 800f0a0:	460f      	mov	r7, r1
 800f0a2:	d007      	beq.n	800f0b4 <__pow5mult+0x20>
 800f0a4:	4c25      	ldr	r4, [pc, #148]	; (800f13c <__pow5mult+0xa8>)
 800f0a6:	3a01      	subs	r2, #1
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f0ae:	f7ff fe9d 	bl	800edec <__multadd>
 800f0b2:	4607      	mov	r7, r0
 800f0b4:	10ad      	asrs	r5, r5, #2
 800f0b6:	d03d      	beq.n	800f134 <__pow5mult+0xa0>
 800f0b8:	69f4      	ldr	r4, [r6, #28]
 800f0ba:	b97c      	cbnz	r4, 800f0dc <__pow5mult+0x48>
 800f0bc:	2010      	movs	r0, #16
 800f0be:	f7ff fcd1 	bl	800ea64 <malloc>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	61f0      	str	r0, [r6, #28]
 800f0c6:	b928      	cbnz	r0, 800f0d4 <__pow5mult+0x40>
 800f0c8:	4b1d      	ldr	r3, [pc, #116]	; (800f140 <__pow5mult+0xac>)
 800f0ca:	481e      	ldr	r0, [pc, #120]	; (800f144 <__pow5mult+0xb0>)
 800f0cc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f0d0:	f000 fa88 	bl	800f5e4 <__assert_func>
 800f0d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f0d8:	6004      	str	r4, [r0, #0]
 800f0da:	60c4      	str	r4, [r0, #12]
 800f0dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f0e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f0e4:	b94c      	cbnz	r4, 800f0fa <__pow5mult+0x66>
 800f0e6:	f240 2171 	movw	r1, #625	; 0x271
 800f0ea:	4630      	mov	r0, r6
 800f0ec:	f7ff ff12 	bl	800ef14 <__i2b>
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f0f6:	4604      	mov	r4, r0
 800f0f8:	6003      	str	r3, [r0, #0]
 800f0fa:	f04f 0900 	mov.w	r9, #0
 800f0fe:	07eb      	lsls	r3, r5, #31
 800f100:	d50a      	bpl.n	800f118 <__pow5mult+0x84>
 800f102:	4639      	mov	r1, r7
 800f104:	4622      	mov	r2, r4
 800f106:	4630      	mov	r0, r6
 800f108:	f7ff ff1a 	bl	800ef40 <__multiply>
 800f10c:	4639      	mov	r1, r7
 800f10e:	4680      	mov	r8, r0
 800f110:	4630      	mov	r0, r6
 800f112:	f7ff fe49 	bl	800eda8 <_Bfree>
 800f116:	4647      	mov	r7, r8
 800f118:	106d      	asrs	r5, r5, #1
 800f11a:	d00b      	beq.n	800f134 <__pow5mult+0xa0>
 800f11c:	6820      	ldr	r0, [r4, #0]
 800f11e:	b938      	cbnz	r0, 800f130 <__pow5mult+0x9c>
 800f120:	4622      	mov	r2, r4
 800f122:	4621      	mov	r1, r4
 800f124:	4630      	mov	r0, r6
 800f126:	f7ff ff0b 	bl	800ef40 <__multiply>
 800f12a:	6020      	str	r0, [r4, #0]
 800f12c:	f8c0 9000 	str.w	r9, [r0]
 800f130:	4604      	mov	r4, r0
 800f132:	e7e4      	b.n	800f0fe <__pow5mult+0x6a>
 800f134:	4638      	mov	r0, r7
 800f136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f13a:	bf00      	nop
 800f13c:	08010b08 	.word	0x08010b08
 800f140:	08010929 	.word	0x08010929
 800f144:	080109ba 	.word	0x080109ba

0800f148 <__lshift>:
 800f148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f14c:	460c      	mov	r4, r1
 800f14e:	6849      	ldr	r1, [r1, #4]
 800f150:	6923      	ldr	r3, [r4, #16]
 800f152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f156:	68a3      	ldr	r3, [r4, #8]
 800f158:	4607      	mov	r7, r0
 800f15a:	4691      	mov	r9, r2
 800f15c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f160:	f108 0601 	add.w	r6, r8, #1
 800f164:	42b3      	cmp	r3, r6
 800f166:	db0b      	blt.n	800f180 <__lshift+0x38>
 800f168:	4638      	mov	r0, r7
 800f16a:	f7ff fddd 	bl	800ed28 <_Balloc>
 800f16e:	4605      	mov	r5, r0
 800f170:	b948      	cbnz	r0, 800f186 <__lshift+0x3e>
 800f172:	4602      	mov	r2, r0
 800f174:	4b28      	ldr	r3, [pc, #160]	; (800f218 <__lshift+0xd0>)
 800f176:	4829      	ldr	r0, [pc, #164]	; (800f21c <__lshift+0xd4>)
 800f178:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f17c:	f000 fa32 	bl	800f5e4 <__assert_func>
 800f180:	3101      	adds	r1, #1
 800f182:	005b      	lsls	r3, r3, #1
 800f184:	e7ee      	b.n	800f164 <__lshift+0x1c>
 800f186:	2300      	movs	r3, #0
 800f188:	f100 0114 	add.w	r1, r0, #20
 800f18c:	f100 0210 	add.w	r2, r0, #16
 800f190:	4618      	mov	r0, r3
 800f192:	4553      	cmp	r3, sl
 800f194:	db33      	blt.n	800f1fe <__lshift+0xb6>
 800f196:	6920      	ldr	r0, [r4, #16]
 800f198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f19c:	f104 0314 	add.w	r3, r4, #20
 800f1a0:	f019 091f 	ands.w	r9, r9, #31
 800f1a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f1a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f1ac:	d02b      	beq.n	800f206 <__lshift+0xbe>
 800f1ae:	f1c9 0e20 	rsb	lr, r9, #32
 800f1b2:	468a      	mov	sl, r1
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	6818      	ldr	r0, [r3, #0]
 800f1b8:	fa00 f009 	lsl.w	r0, r0, r9
 800f1bc:	4310      	orrs	r0, r2
 800f1be:	f84a 0b04 	str.w	r0, [sl], #4
 800f1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1c6:	459c      	cmp	ip, r3
 800f1c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800f1cc:	d8f3      	bhi.n	800f1b6 <__lshift+0x6e>
 800f1ce:	ebac 0304 	sub.w	r3, ip, r4
 800f1d2:	3b15      	subs	r3, #21
 800f1d4:	f023 0303 	bic.w	r3, r3, #3
 800f1d8:	3304      	adds	r3, #4
 800f1da:	f104 0015 	add.w	r0, r4, #21
 800f1de:	4584      	cmp	ip, r0
 800f1e0:	bf38      	it	cc
 800f1e2:	2304      	movcc	r3, #4
 800f1e4:	50ca      	str	r2, [r1, r3]
 800f1e6:	b10a      	cbz	r2, 800f1ec <__lshift+0xa4>
 800f1e8:	f108 0602 	add.w	r6, r8, #2
 800f1ec:	3e01      	subs	r6, #1
 800f1ee:	4638      	mov	r0, r7
 800f1f0:	612e      	str	r6, [r5, #16]
 800f1f2:	4621      	mov	r1, r4
 800f1f4:	f7ff fdd8 	bl	800eda8 <_Bfree>
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800f202:	3301      	adds	r3, #1
 800f204:	e7c5      	b.n	800f192 <__lshift+0x4a>
 800f206:	3904      	subs	r1, #4
 800f208:	f853 2b04 	ldr.w	r2, [r3], #4
 800f20c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f210:	459c      	cmp	ip, r3
 800f212:	d8f9      	bhi.n	800f208 <__lshift+0xc0>
 800f214:	e7ea      	b.n	800f1ec <__lshift+0xa4>
 800f216:	bf00      	nop
 800f218:	08010998 	.word	0x08010998
 800f21c:	080109ba 	.word	0x080109ba

0800f220 <__mcmp>:
 800f220:	b530      	push	{r4, r5, lr}
 800f222:	6902      	ldr	r2, [r0, #16]
 800f224:	690c      	ldr	r4, [r1, #16]
 800f226:	1b12      	subs	r2, r2, r4
 800f228:	d10e      	bne.n	800f248 <__mcmp+0x28>
 800f22a:	f100 0314 	add.w	r3, r0, #20
 800f22e:	3114      	adds	r1, #20
 800f230:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f234:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f238:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f23c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f240:	42a5      	cmp	r5, r4
 800f242:	d003      	beq.n	800f24c <__mcmp+0x2c>
 800f244:	d305      	bcc.n	800f252 <__mcmp+0x32>
 800f246:	2201      	movs	r2, #1
 800f248:	4610      	mov	r0, r2
 800f24a:	bd30      	pop	{r4, r5, pc}
 800f24c:	4283      	cmp	r3, r0
 800f24e:	d3f3      	bcc.n	800f238 <__mcmp+0x18>
 800f250:	e7fa      	b.n	800f248 <__mcmp+0x28>
 800f252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f256:	e7f7      	b.n	800f248 <__mcmp+0x28>

0800f258 <__mdiff>:
 800f258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f25c:	460c      	mov	r4, r1
 800f25e:	4606      	mov	r6, r0
 800f260:	4611      	mov	r1, r2
 800f262:	4620      	mov	r0, r4
 800f264:	4690      	mov	r8, r2
 800f266:	f7ff ffdb 	bl	800f220 <__mcmp>
 800f26a:	1e05      	subs	r5, r0, #0
 800f26c:	d110      	bne.n	800f290 <__mdiff+0x38>
 800f26e:	4629      	mov	r1, r5
 800f270:	4630      	mov	r0, r6
 800f272:	f7ff fd59 	bl	800ed28 <_Balloc>
 800f276:	b930      	cbnz	r0, 800f286 <__mdiff+0x2e>
 800f278:	4b3a      	ldr	r3, [pc, #232]	; (800f364 <__mdiff+0x10c>)
 800f27a:	4602      	mov	r2, r0
 800f27c:	f240 2137 	movw	r1, #567	; 0x237
 800f280:	4839      	ldr	r0, [pc, #228]	; (800f368 <__mdiff+0x110>)
 800f282:	f000 f9af 	bl	800f5e4 <__assert_func>
 800f286:	2301      	movs	r3, #1
 800f288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f28c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f290:	bfa4      	itt	ge
 800f292:	4643      	movge	r3, r8
 800f294:	46a0      	movge	r8, r4
 800f296:	4630      	mov	r0, r6
 800f298:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f29c:	bfa6      	itte	ge
 800f29e:	461c      	movge	r4, r3
 800f2a0:	2500      	movge	r5, #0
 800f2a2:	2501      	movlt	r5, #1
 800f2a4:	f7ff fd40 	bl	800ed28 <_Balloc>
 800f2a8:	b920      	cbnz	r0, 800f2b4 <__mdiff+0x5c>
 800f2aa:	4b2e      	ldr	r3, [pc, #184]	; (800f364 <__mdiff+0x10c>)
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	f240 2145 	movw	r1, #581	; 0x245
 800f2b2:	e7e5      	b.n	800f280 <__mdiff+0x28>
 800f2b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f2b8:	6926      	ldr	r6, [r4, #16]
 800f2ba:	60c5      	str	r5, [r0, #12]
 800f2bc:	f104 0914 	add.w	r9, r4, #20
 800f2c0:	f108 0514 	add.w	r5, r8, #20
 800f2c4:	f100 0e14 	add.w	lr, r0, #20
 800f2c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f2cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f2d0:	f108 0210 	add.w	r2, r8, #16
 800f2d4:	46f2      	mov	sl, lr
 800f2d6:	2100      	movs	r1, #0
 800f2d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f2dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f2e0:	fa11 f88b 	uxtah	r8, r1, fp
 800f2e4:	b299      	uxth	r1, r3
 800f2e6:	0c1b      	lsrs	r3, r3, #16
 800f2e8:	eba8 0801 	sub.w	r8, r8, r1
 800f2ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f2f0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f2f4:	fa1f f888 	uxth.w	r8, r8
 800f2f8:	1419      	asrs	r1, r3, #16
 800f2fa:	454e      	cmp	r6, r9
 800f2fc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f300:	f84a 3b04 	str.w	r3, [sl], #4
 800f304:	d8e8      	bhi.n	800f2d8 <__mdiff+0x80>
 800f306:	1b33      	subs	r3, r6, r4
 800f308:	3b15      	subs	r3, #21
 800f30a:	f023 0303 	bic.w	r3, r3, #3
 800f30e:	3304      	adds	r3, #4
 800f310:	3415      	adds	r4, #21
 800f312:	42a6      	cmp	r6, r4
 800f314:	bf38      	it	cc
 800f316:	2304      	movcc	r3, #4
 800f318:	441d      	add	r5, r3
 800f31a:	4473      	add	r3, lr
 800f31c:	469e      	mov	lr, r3
 800f31e:	462e      	mov	r6, r5
 800f320:	4566      	cmp	r6, ip
 800f322:	d30e      	bcc.n	800f342 <__mdiff+0xea>
 800f324:	f10c 0203 	add.w	r2, ip, #3
 800f328:	1b52      	subs	r2, r2, r5
 800f32a:	f022 0203 	bic.w	r2, r2, #3
 800f32e:	3d03      	subs	r5, #3
 800f330:	45ac      	cmp	ip, r5
 800f332:	bf38      	it	cc
 800f334:	2200      	movcc	r2, #0
 800f336:	4413      	add	r3, r2
 800f338:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f33c:	b17a      	cbz	r2, 800f35e <__mdiff+0x106>
 800f33e:	6107      	str	r7, [r0, #16]
 800f340:	e7a4      	b.n	800f28c <__mdiff+0x34>
 800f342:	f856 8b04 	ldr.w	r8, [r6], #4
 800f346:	fa11 f288 	uxtah	r2, r1, r8
 800f34a:	1414      	asrs	r4, r2, #16
 800f34c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f350:	b292      	uxth	r2, r2
 800f352:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f356:	f84e 2b04 	str.w	r2, [lr], #4
 800f35a:	1421      	asrs	r1, r4, #16
 800f35c:	e7e0      	b.n	800f320 <__mdiff+0xc8>
 800f35e:	3f01      	subs	r7, #1
 800f360:	e7ea      	b.n	800f338 <__mdiff+0xe0>
 800f362:	bf00      	nop
 800f364:	08010998 	.word	0x08010998
 800f368:	080109ba 	.word	0x080109ba

0800f36c <__d2b>:
 800f36c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f370:	460f      	mov	r7, r1
 800f372:	2101      	movs	r1, #1
 800f374:	ec59 8b10 	vmov	r8, r9, d0
 800f378:	4616      	mov	r6, r2
 800f37a:	f7ff fcd5 	bl	800ed28 <_Balloc>
 800f37e:	4604      	mov	r4, r0
 800f380:	b930      	cbnz	r0, 800f390 <__d2b+0x24>
 800f382:	4602      	mov	r2, r0
 800f384:	4b24      	ldr	r3, [pc, #144]	; (800f418 <__d2b+0xac>)
 800f386:	4825      	ldr	r0, [pc, #148]	; (800f41c <__d2b+0xb0>)
 800f388:	f240 310f 	movw	r1, #783	; 0x30f
 800f38c:	f000 f92a 	bl	800f5e4 <__assert_func>
 800f390:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f394:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f398:	bb2d      	cbnz	r5, 800f3e6 <__d2b+0x7a>
 800f39a:	9301      	str	r3, [sp, #4]
 800f39c:	f1b8 0300 	subs.w	r3, r8, #0
 800f3a0:	d026      	beq.n	800f3f0 <__d2b+0x84>
 800f3a2:	4668      	mov	r0, sp
 800f3a4:	9300      	str	r3, [sp, #0]
 800f3a6:	f7ff fd87 	bl	800eeb8 <__lo0bits>
 800f3aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f3ae:	b1e8      	cbz	r0, 800f3ec <__d2b+0x80>
 800f3b0:	f1c0 0320 	rsb	r3, r0, #32
 800f3b4:	fa02 f303 	lsl.w	r3, r2, r3
 800f3b8:	430b      	orrs	r3, r1
 800f3ba:	40c2      	lsrs	r2, r0
 800f3bc:	6163      	str	r3, [r4, #20]
 800f3be:	9201      	str	r2, [sp, #4]
 800f3c0:	9b01      	ldr	r3, [sp, #4]
 800f3c2:	61a3      	str	r3, [r4, #24]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	bf14      	ite	ne
 800f3c8:	2202      	movne	r2, #2
 800f3ca:	2201      	moveq	r2, #1
 800f3cc:	6122      	str	r2, [r4, #16]
 800f3ce:	b1bd      	cbz	r5, 800f400 <__d2b+0x94>
 800f3d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f3d4:	4405      	add	r5, r0
 800f3d6:	603d      	str	r5, [r7, #0]
 800f3d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f3dc:	6030      	str	r0, [r6, #0]
 800f3de:	4620      	mov	r0, r4
 800f3e0:	b003      	add	sp, #12
 800f3e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f3ea:	e7d6      	b.n	800f39a <__d2b+0x2e>
 800f3ec:	6161      	str	r1, [r4, #20]
 800f3ee:	e7e7      	b.n	800f3c0 <__d2b+0x54>
 800f3f0:	a801      	add	r0, sp, #4
 800f3f2:	f7ff fd61 	bl	800eeb8 <__lo0bits>
 800f3f6:	9b01      	ldr	r3, [sp, #4]
 800f3f8:	6163      	str	r3, [r4, #20]
 800f3fa:	3020      	adds	r0, #32
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	e7e5      	b.n	800f3cc <__d2b+0x60>
 800f400:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f404:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f408:	6038      	str	r0, [r7, #0]
 800f40a:	6918      	ldr	r0, [r3, #16]
 800f40c:	f7ff fd34 	bl	800ee78 <__hi0bits>
 800f410:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f414:	e7e2      	b.n	800f3dc <__d2b+0x70>
 800f416:	bf00      	nop
 800f418:	08010998 	.word	0x08010998
 800f41c:	080109ba 	.word	0x080109ba

0800f420 <__sread>:
 800f420:	b510      	push	{r4, lr}
 800f422:	460c      	mov	r4, r1
 800f424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f428:	f000 f8a8 	bl	800f57c <_read_r>
 800f42c:	2800      	cmp	r0, #0
 800f42e:	bfab      	itete	ge
 800f430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f432:	89a3      	ldrhlt	r3, [r4, #12]
 800f434:	181b      	addge	r3, r3, r0
 800f436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f43a:	bfac      	ite	ge
 800f43c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f43e:	81a3      	strhlt	r3, [r4, #12]
 800f440:	bd10      	pop	{r4, pc}

0800f442 <__swrite>:
 800f442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f446:	461f      	mov	r7, r3
 800f448:	898b      	ldrh	r3, [r1, #12]
 800f44a:	05db      	lsls	r3, r3, #23
 800f44c:	4605      	mov	r5, r0
 800f44e:	460c      	mov	r4, r1
 800f450:	4616      	mov	r6, r2
 800f452:	d505      	bpl.n	800f460 <__swrite+0x1e>
 800f454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f458:	2302      	movs	r3, #2
 800f45a:	2200      	movs	r2, #0
 800f45c:	f000 f87c 	bl	800f558 <_lseek_r>
 800f460:	89a3      	ldrh	r3, [r4, #12]
 800f462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f46a:	81a3      	strh	r3, [r4, #12]
 800f46c:	4632      	mov	r2, r6
 800f46e:	463b      	mov	r3, r7
 800f470:	4628      	mov	r0, r5
 800f472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f476:	f000 b8a3 	b.w	800f5c0 <_write_r>

0800f47a <__sseek>:
 800f47a:	b510      	push	{r4, lr}
 800f47c:	460c      	mov	r4, r1
 800f47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f482:	f000 f869 	bl	800f558 <_lseek_r>
 800f486:	1c43      	adds	r3, r0, #1
 800f488:	89a3      	ldrh	r3, [r4, #12]
 800f48a:	bf15      	itete	ne
 800f48c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f48e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f496:	81a3      	strheq	r3, [r4, #12]
 800f498:	bf18      	it	ne
 800f49a:	81a3      	strhne	r3, [r4, #12]
 800f49c:	bd10      	pop	{r4, pc}

0800f49e <__sclose>:
 800f49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4a2:	f000 b849 	b.w	800f538 <_close_r>

0800f4a6 <_realloc_r>:
 800f4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4aa:	4680      	mov	r8, r0
 800f4ac:	4614      	mov	r4, r2
 800f4ae:	460e      	mov	r6, r1
 800f4b0:	b921      	cbnz	r1, 800f4bc <_realloc_r+0x16>
 800f4b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4b6:	4611      	mov	r1, r2
 800f4b8:	f7ff bafc 	b.w	800eab4 <_malloc_r>
 800f4bc:	b92a      	cbnz	r2, 800f4ca <_realloc_r+0x24>
 800f4be:	f000 f8c5 	bl	800f64c <_free_r>
 800f4c2:	4625      	mov	r5, r4
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ca:	f000 f91d 	bl	800f708 <_malloc_usable_size_r>
 800f4ce:	4284      	cmp	r4, r0
 800f4d0:	4607      	mov	r7, r0
 800f4d2:	d802      	bhi.n	800f4da <_realloc_r+0x34>
 800f4d4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f4d8:	d812      	bhi.n	800f500 <_realloc_r+0x5a>
 800f4da:	4621      	mov	r1, r4
 800f4dc:	4640      	mov	r0, r8
 800f4de:	f7ff fae9 	bl	800eab4 <_malloc_r>
 800f4e2:	4605      	mov	r5, r0
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	d0ed      	beq.n	800f4c4 <_realloc_r+0x1e>
 800f4e8:	42bc      	cmp	r4, r7
 800f4ea:	4622      	mov	r2, r4
 800f4ec:	4631      	mov	r1, r6
 800f4ee:	bf28      	it	cs
 800f4f0:	463a      	movcs	r2, r7
 800f4f2:	f7fe fad4 	bl	800da9e <memcpy>
 800f4f6:	4631      	mov	r1, r6
 800f4f8:	4640      	mov	r0, r8
 800f4fa:	f000 f8a7 	bl	800f64c <_free_r>
 800f4fe:	e7e1      	b.n	800f4c4 <_realloc_r+0x1e>
 800f500:	4635      	mov	r5, r6
 800f502:	e7df      	b.n	800f4c4 <_realloc_r+0x1e>

0800f504 <memmove>:
 800f504:	4288      	cmp	r0, r1
 800f506:	b510      	push	{r4, lr}
 800f508:	eb01 0402 	add.w	r4, r1, r2
 800f50c:	d902      	bls.n	800f514 <memmove+0x10>
 800f50e:	4284      	cmp	r4, r0
 800f510:	4623      	mov	r3, r4
 800f512:	d807      	bhi.n	800f524 <memmove+0x20>
 800f514:	1e43      	subs	r3, r0, #1
 800f516:	42a1      	cmp	r1, r4
 800f518:	d008      	beq.n	800f52c <memmove+0x28>
 800f51a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f51e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f522:	e7f8      	b.n	800f516 <memmove+0x12>
 800f524:	4402      	add	r2, r0
 800f526:	4601      	mov	r1, r0
 800f528:	428a      	cmp	r2, r1
 800f52a:	d100      	bne.n	800f52e <memmove+0x2a>
 800f52c:	bd10      	pop	{r4, pc}
 800f52e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f536:	e7f7      	b.n	800f528 <memmove+0x24>

0800f538 <_close_r>:
 800f538:	b538      	push	{r3, r4, r5, lr}
 800f53a:	4d06      	ldr	r5, [pc, #24]	; (800f554 <_close_r+0x1c>)
 800f53c:	2300      	movs	r3, #0
 800f53e:	4604      	mov	r4, r0
 800f540:	4608      	mov	r0, r1
 800f542:	602b      	str	r3, [r5, #0]
 800f544:	f7f5 fba3 	bl	8004c8e <_close>
 800f548:	1c43      	adds	r3, r0, #1
 800f54a:	d102      	bne.n	800f552 <_close_r+0x1a>
 800f54c:	682b      	ldr	r3, [r5, #0]
 800f54e:	b103      	cbz	r3, 800f552 <_close_r+0x1a>
 800f550:	6023      	str	r3, [r4, #0]
 800f552:	bd38      	pop	{r3, r4, r5, pc}
 800f554:	200054b4 	.word	0x200054b4

0800f558 <_lseek_r>:
 800f558:	b538      	push	{r3, r4, r5, lr}
 800f55a:	4d07      	ldr	r5, [pc, #28]	; (800f578 <_lseek_r+0x20>)
 800f55c:	4604      	mov	r4, r0
 800f55e:	4608      	mov	r0, r1
 800f560:	4611      	mov	r1, r2
 800f562:	2200      	movs	r2, #0
 800f564:	602a      	str	r2, [r5, #0]
 800f566:	461a      	mov	r2, r3
 800f568:	f7f5 fbb8 	bl	8004cdc <_lseek>
 800f56c:	1c43      	adds	r3, r0, #1
 800f56e:	d102      	bne.n	800f576 <_lseek_r+0x1e>
 800f570:	682b      	ldr	r3, [r5, #0]
 800f572:	b103      	cbz	r3, 800f576 <_lseek_r+0x1e>
 800f574:	6023      	str	r3, [r4, #0]
 800f576:	bd38      	pop	{r3, r4, r5, pc}
 800f578:	200054b4 	.word	0x200054b4

0800f57c <_read_r>:
 800f57c:	b538      	push	{r3, r4, r5, lr}
 800f57e:	4d07      	ldr	r5, [pc, #28]	; (800f59c <_read_r+0x20>)
 800f580:	4604      	mov	r4, r0
 800f582:	4608      	mov	r0, r1
 800f584:	4611      	mov	r1, r2
 800f586:	2200      	movs	r2, #0
 800f588:	602a      	str	r2, [r5, #0]
 800f58a:	461a      	mov	r2, r3
 800f58c:	f7f5 fb46 	bl	8004c1c <_read>
 800f590:	1c43      	adds	r3, r0, #1
 800f592:	d102      	bne.n	800f59a <_read_r+0x1e>
 800f594:	682b      	ldr	r3, [r5, #0]
 800f596:	b103      	cbz	r3, 800f59a <_read_r+0x1e>
 800f598:	6023      	str	r3, [r4, #0]
 800f59a:	bd38      	pop	{r3, r4, r5, pc}
 800f59c:	200054b4 	.word	0x200054b4

0800f5a0 <_sbrk_r>:
 800f5a0:	b538      	push	{r3, r4, r5, lr}
 800f5a2:	4d06      	ldr	r5, [pc, #24]	; (800f5bc <_sbrk_r+0x1c>)
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	4608      	mov	r0, r1
 800f5aa:	602b      	str	r3, [r5, #0]
 800f5ac:	f7f5 fba4 	bl	8004cf8 <_sbrk>
 800f5b0:	1c43      	adds	r3, r0, #1
 800f5b2:	d102      	bne.n	800f5ba <_sbrk_r+0x1a>
 800f5b4:	682b      	ldr	r3, [r5, #0]
 800f5b6:	b103      	cbz	r3, 800f5ba <_sbrk_r+0x1a>
 800f5b8:	6023      	str	r3, [r4, #0]
 800f5ba:	bd38      	pop	{r3, r4, r5, pc}
 800f5bc:	200054b4 	.word	0x200054b4

0800f5c0 <_write_r>:
 800f5c0:	b538      	push	{r3, r4, r5, lr}
 800f5c2:	4d07      	ldr	r5, [pc, #28]	; (800f5e0 <_write_r+0x20>)
 800f5c4:	4604      	mov	r4, r0
 800f5c6:	4608      	mov	r0, r1
 800f5c8:	4611      	mov	r1, r2
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	602a      	str	r2, [r5, #0]
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	f7f5 fb41 	bl	8004c56 <_write>
 800f5d4:	1c43      	adds	r3, r0, #1
 800f5d6:	d102      	bne.n	800f5de <_write_r+0x1e>
 800f5d8:	682b      	ldr	r3, [r5, #0]
 800f5da:	b103      	cbz	r3, 800f5de <_write_r+0x1e>
 800f5dc:	6023      	str	r3, [r4, #0]
 800f5de:	bd38      	pop	{r3, r4, r5, pc}
 800f5e0:	200054b4 	.word	0x200054b4

0800f5e4 <__assert_func>:
 800f5e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5e6:	4614      	mov	r4, r2
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	4b09      	ldr	r3, [pc, #36]	; (800f610 <__assert_func+0x2c>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	4605      	mov	r5, r0
 800f5f0:	68d8      	ldr	r0, [r3, #12]
 800f5f2:	b14c      	cbz	r4, 800f608 <__assert_func+0x24>
 800f5f4:	4b07      	ldr	r3, [pc, #28]	; (800f614 <__assert_func+0x30>)
 800f5f6:	9100      	str	r1, [sp, #0]
 800f5f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f5fc:	4906      	ldr	r1, [pc, #24]	; (800f618 <__assert_func+0x34>)
 800f5fe:	462b      	mov	r3, r5
 800f600:	f000 f88a 	bl	800f718 <fiprintf>
 800f604:	f000 f8a7 	bl	800f756 <abort>
 800f608:	4b04      	ldr	r3, [pc, #16]	; (800f61c <__assert_func+0x38>)
 800f60a:	461c      	mov	r4, r3
 800f60c:	e7f3      	b.n	800f5f6 <__assert_func+0x12>
 800f60e:	bf00      	nop
 800f610:	20000088 	.word	0x20000088
 800f614:	08010c1f 	.word	0x08010c1f
 800f618:	08010c2c 	.word	0x08010c2c
 800f61c:	08010c5a 	.word	0x08010c5a

0800f620 <_calloc_r>:
 800f620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f622:	fba1 2402 	umull	r2, r4, r1, r2
 800f626:	b94c      	cbnz	r4, 800f63c <_calloc_r+0x1c>
 800f628:	4611      	mov	r1, r2
 800f62a:	9201      	str	r2, [sp, #4]
 800f62c:	f7ff fa42 	bl	800eab4 <_malloc_r>
 800f630:	9a01      	ldr	r2, [sp, #4]
 800f632:	4605      	mov	r5, r0
 800f634:	b930      	cbnz	r0, 800f644 <_calloc_r+0x24>
 800f636:	4628      	mov	r0, r5
 800f638:	b003      	add	sp, #12
 800f63a:	bd30      	pop	{r4, r5, pc}
 800f63c:	220c      	movs	r2, #12
 800f63e:	6002      	str	r2, [r0, #0]
 800f640:	2500      	movs	r5, #0
 800f642:	e7f8      	b.n	800f636 <_calloc_r+0x16>
 800f644:	4621      	mov	r1, r4
 800f646:	f7fe f9f1 	bl	800da2c <memset>
 800f64a:	e7f4      	b.n	800f636 <_calloc_r+0x16>

0800f64c <_free_r>:
 800f64c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f64e:	2900      	cmp	r1, #0
 800f650:	d044      	beq.n	800f6dc <_free_r+0x90>
 800f652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f656:	9001      	str	r0, [sp, #4]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	f1a1 0404 	sub.w	r4, r1, #4
 800f65e:	bfb8      	it	lt
 800f660:	18e4      	addlt	r4, r4, r3
 800f662:	f7ff fb55 	bl	800ed10 <__malloc_lock>
 800f666:	4a1e      	ldr	r2, [pc, #120]	; (800f6e0 <_free_r+0x94>)
 800f668:	9801      	ldr	r0, [sp, #4]
 800f66a:	6813      	ldr	r3, [r2, #0]
 800f66c:	b933      	cbnz	r3, 800f67c <_free_r+0x30>
 800f66e:	6063      	str	r3, [r4, #4]
 800f670:	6014      	str	r4, [r2, #0]
 800f672:	b003      	add	sp, #12
 800f674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f678:	f7ff bb50 	b.w	800ed1c <__malloc_unlock>
 800f67c:	42a3      	cmp	r3, r4
 800f67e:	d908      	bls.n	800f692 <_free_r+0x46>
 800f680:	6825      	ldr	r5, [r4, #0]
 800f682:	1961      	adds	r1, r4, r5
 800f684:	428b      	cmp	r3, r1
 800f686:	bf01      	itttt	eq
 800f688:	6819      	ldreq	r1, [r3, #0]
 800f68a:	685b      	ldreq	r3, [r3, #4]
 800f68c:	1949      	addeq	r1, r1, r5
 800f68e:	6021      	streq	r1, [r4, #0]
 800f690:	e7ed      	b.n	800f66e <_free_r+0x22>
 800f692:	461a      	mov	r2, r3
 800f694:	685b      	ldr	r3, [r3, #4]
 800f696:	b10b      	cbz	r3, 800f69c <_free_r+0x50>
 800f698:	42a3      	cmp	r3, r4
 800f69a:	d9fa      	bls.n	800f692 <_free_r+0x46>
 800f69c:	6811      	ldr	r1, [r2, #0]
 800f69e:	1855      	adds	r5, r2, r1
 800f6a0:	42a5      	cmp	r5, r4
 800f6a2:	d10b      	bne.n	800f6bc <_free_r+0x70>
 800f6a4:	6824      	ldr	r4, [r4, #0]
 800f6a6:	4421      	add	r1, r4
 800f6a8:	1854      	adds	r4, r2, r1
 800f6aa:	42a3      	cmp	r3, r4
 800f6ac:	6011      	str	r1, [r2, #0]
 800f6ae:	d1e0      	bne.n	800f672 <_free_r+0x26>
 800f6b0:	681c      	ldr	r4, [r3, #0]
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	6053      	str	r3, [r2, #4]
 800f6b6:	440c      	add	r4, r1
 800f6b8:	6014      	str	r4, [r2, #0]
 800f6ba:	e7da      	b.n	800f672 <_free_r+0x26>
 800f6bc:	d902      	bls.n	800f6c4 <_free_r+0x78>
 800f6be:	230c      	movs	r3, #12
 800f6c0:	6003      	str	r3, [r0, #0]
 800f6c2:	e7d6      	b.n	800f672 <_free_r+0x26>
 800f6c4:	6825      	ldr	r5, [r4, #0]
 800f6c6:	1961      	adds	r1, r4, r5
 800f6c8:	428b      	cmp	r3, r1
 800f6ca:	bf04      	itt	eq
 800f6cc:	6819      	ldreq	r1, [r3, #0]
 800f6ce:	685b      	ldreq	r3, [r3, #4]
 800f6d0:	6063      	str	r3, [r4, #4]
 800f6d2:	bf04      	itt	eq
 800f6d4:	1949      	addeq	r1, r1, r5
 800f6d6:	6021      	streq	r1, [r4, #0]
 800f6d8:	6054      	str	r4, [r2, #4]
 800f6da:	e7ca      	b.n	800f672 <_free_r+0x26>
 800f6dc:	b003      	add	sp, #12
 800f6de:	bd30      	pop	{r4, r5, pc}
 800f6e0:	200054ac 	.word	0x200054ac

0800f6e4 <__ascii_mbtowc>:
 800f6e4:	b082      	sub	sp, #8
 800f6e6:	b901      	cbnz	r1, 800f6ea <__ascii_mbtowc+0x6>
 800f6e8:	a901      	add	r1, sp, #4
 800f6ea:	b142      	cbz	r2, 800f6fe <__ascii_mbtowc+0x1a>
 800f6ec:	b14b      	cbz	r3, 800f702 <__ascii_mbtowc+0x1e>
 800f6ee:	7813      	ldrb	r3, [r2, #0]
 800f6f0:	600b      	str	r3, [r1, #0]
 800f6f2:	7812      	ldrb	r2, [r2, #0]
 800f6f4:	1e10      	subs	r0, r2, #0
 800f6f6:	bf18      	it	ne
 800f6f8:	2001      	movne	r0, #1
 800f6fa:	b002      	add	sp, #8
 800f6fc:	4770      	bx	lr
 800f6fe:	4610      	mov	r0, r2
 800f700:	e7fb      	b.n	800f6fa <__ascii_mbtowc+0x16>
 800f702:	f06f 0001 	mvn.w	r0, #1
 800f706:	e7f8      	b.n	800f6fa <__ascii_mbtowc+0x16>

0800f708 <_malloc_usable_size_r>:
 800f708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f70c:	1f18      	subs	r0, r3, #4
 800f70e:	2b00      	cmp	r3, #0
 800f710:	bfbc      	itt	lt
 800f712:	580b      	ldrlt	r3, [r1, r0]
 800f714:	18c0      	addlt	r0, r0, r3
 800f716:	4770      	bx	lr

0800f718 <fiprintf>:
 800f718:	b40e      	push	{r1, r2, r3}
 800f71a:	b503      	push	{r0, r1, lr}
 800f71c:	4601      	mov	r1, r0
 800f71e:	ab03      	add	r3, sp, #12
 800f720:	4805      	ldr	r0, [pc, #20]	; (800f738 <fiprintf+0x20>)
 800f722:	f853 2b04 	ldr.w	r2, [r3], #4
 800f726:	6800      	ldr	r0, [r0, #0]
 800f728:	9301      	str	r3, [sp, #4]
 800f72a:	f000 f845 	bl	800f7b8 <_vfiprintf_r>
 800f72e:	b002      	add	sp, #8
 800f730:	f85d eb04 	ldr.w	lr, [sp], #4
 800f734:	b003      	add	sp, #12
 800f736:	4770      	bx	lr
 800f738:	20000088 	.word	0x20000088

0800f73c <__ascii_wctomb>:
 800f73c:	b149      	cbz	r1, 800f752 <__ascii_wctomb+0x16>
 800f73e:	2aff      	cmp	r2, #255	; 0xff
 800f740:	bf85      	ittet	hi
 800f742:	238a      	movhi	r3, #138	; 0x8a
 800f744:	6003      	strhi	r3, [r0, #0]
 800f746:	700a      	strbls	r2, [r1, #0]
 800f748:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f74c:	bf98      	it	ls
 800f74e:	2001      	movls	r0, #1
 800f750:	4770      	bx	lr
 800f752:	4608      	mov	r0, r1
 800f754:	4770      	bx	lr

0800f756 <abort>:
 800f756:	b508      	push	{r3, lr}
 800f758:	2006      	movs	r0, #6
 800f75a:	f000 fa89 	bl	800fc70 <raise>
 800f75e:	2001      	movs	r0, #1
 800f760:	f7f5 fa52 	bl	8004c08 <_exit>

0800f764 <__sfputc_r>:
 800f764:	6893      	ldr	r3, [r2, #8]
 800f766:	3b01      	subs	r3, #1
 800f768:	2b00      	cmp	r3, #0
 800f76a:	b410      	push	{r4}
 800f76c:	6093      	str	r3, [r2, #8]
 800f76e:	da08      	bge.n	800f782 <__sfputc_r+0x1e>
 800f770:	6994      	ldr	r4, [r2, #24]
 800f772:	42a3      	cmp	r3, r4
 800f774:	db01      	blt.n	800f77a <__sfputc_r+0x16>
 800f776:	290a      	cmp	r1, #10
 800f778:	d103      	bne.n	800f782 <__sfputc_r+0x1e>
 800f77a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f77e:	f000 b935 	b.w	800f9ec <__swbuf_r>
 800f782:	6813      	ldr	r3, [r2, #0]
 800f784:	1c58      	adds	r0, r3, #1
 800f786:	6010      	str	r0, [r2, #0]
 800f788:	7019      	strb	r1, [r3, #0]
 800f78a:	4608      	mov	r0, r1
 800f78c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f790:	4770      	bx	lr

0800f792 <__sfputs_r>:
 800f792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f794:	4606      	mov	r6, r0
 800f796:	460f      	mov	r7, r1
 800f798:	4614      	mov	r4, r2
 800f79a:	18d5      	adds	r5, r2, r3
 800f79c:	42ac      	cmp	r4, r5
 800f79e:	d101      	bne.n	800f7a4 <__sfputs_r+0x12>
 800f7a0:	2000      	movs	r0, #0
 800f7a2:	e007      	b.n	800f7b4 <__sfputs_r+0x22>
 800f7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7a8:	463a      	mov	r2, r7
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	f7ff ffda 	bl	800f764 <__sfputc_r>
 800f7b0:	1c43      	adds	r3, r0, #1
 800f7b2:	d1f3      	bne.n	800f79c <__sfputs_r+0xa>
 800f7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f7b8 <_vfiprintf_r>:
 800f7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7bc:	460d      	mov	r5, r1
 800f7be:	b09d      	sub	sp, #116	; 0x74
 800f7c0:	4614      	mov	r4, r2
 800f7c2:	4698      	mov	r8, r3
 800f7c4:	4606      	mov	r6, r0
 800f7c6:	b118      	cbz	r0, 800f7d0 <_vfiprintf_r+0x18>
 800f7c8:	6a03      	ldr	r3, [r0, #32]
 800f7ca:	b90b      	cbnz	r3, 800f7d0 <_vfiprintf_r+0x18>
 800f7cc:	f7fe f8f8 	bl	800d9c0 <__sinit>
 800f7d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7d2:	07d9      	lsls	r1, r3, #31
 800f7d4:	d405      	bmi.n	800f7e2 <_vfiprintf_r+0x2a>
 800f7d6:	89ab      	ldrh	r3, [r5, #12]
 800f7d8:	059a      	lsls	r2, r3, #22
 800f7da:	d402      	bmi.n	800f7e2 <_vfiprintf_r+0x2a>
 800f7dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7de:	f7fe f95c 	bl	800da9a <__retarget_lock_acquire_recursive>
 800f7e2:	89ab      	ldrh	r3, [r5, #12]
 800f7e4:	071b      	lsls	r3, r3, #28
 800f7e6:	d501      	bpl.n	800f7ec <_vfiprintf_r+0x34>
 800f7e8:	692b      	ldr	r3, [r5, #16]
 800f7ea:	b99b      	cbnz	r3, 800f814 <_vfiprintf_r+0x5c>
 800f7ec:	4629      	mov	r1, r5
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	f000 f93a 	bl	800fa68 <__swsetup_r>
 800f7f4:	b170      	cbz	r0, 800f814 <_vfiprintf_r+0x5c>
 800f7f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7f8:	07dc      	lsls	r4, r3, #31
 800f7fa:	d504      	bpl.n	800f806 <_vfiprintf_r+0x4e>
 800f7fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f800:	b01d      	add	sp, #116	; 0x74
 800f802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f806:	89ab      	ldrh	r3, [r5, #12]
 800f808:	0598      	lsls	r0, r3, #22
 800f80a:	d4f7      	bmi.n	800f7fc <_vfiprintf_r+0x44>
 800f80c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f80e:	f7fe f945 	bl	800da9c <__retarget_lock_release_recursive>
 800f812:	e7f3      	b.n	800f7fc <_vfiprintf_r+0x44>
 800f814:	2300      	movs	r3, #0
 800f816:	9309      	str	r3, [sp, #36]	; 0x24
 800f818:	2320      	movs	r3, #32
 800f81a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f81e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f822:	2330      	movs	r3, #48	; 0x30
 800f824:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f9d8 <_vfiprintf_r+0x220>
 800f828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f82c:	f04f 0901 	mov.w	r9, #1
 800f830:	4623      	mov	r3, r4
 800f832:	469a      	mov	sl, r3
 800f834:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f838:	b10a      	cbz	r2, 800f83e <_vfiprintf_r+0x86>
 800f83a:	2a25      	cmp	r2, #37	; 0x25
 800f83c:	d1f9      	bne.n	800f832 <_vfiprintf_r+0x7a>
 800f83e:	ebba 0b04 	subs.w	fp, sl, r4
 800f842:	d00b      	beq.n	800f85c <_vfiprintf_r+0xa4>
 800f844:	465b      	mov	r3, fp
 800f846:	4622      	mov	r2, r4
 800f848:	4629      	mov	r1, r5
 800f84a:	4630      	mov	r0, r6
 800f84c:	f7ff ffa1 	bl	800f792 <__sfputs_r>
 800f850:	3001      	adds	r0, #1
 800f852:	f000 80a9 	beq.w	800f9a8 <_vfiprintf_r+0x1f0>
 800f856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f858:	445a      	add	r2, fp
 800f85a:	9209      	str	r2, [sp, #36]	; 0x24
 800f85c:	f89a 3000 	ldrb.w	r3, [sl]
 800f860:	2b00      	cmp	r3, #0
 800f862:	f000 80a1 	beq.w	800f9a8 <_vfiprintf_r+0x1f0>
 800f866:	2300      	movs	r3, #0
 800f868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f86c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f870:	f10a 0a01 	add.w	sl, sl, #1
 800f874:	9304      	str	r3, [sp, #16]
 800f876:	9307      	str	r3, [sp, #28]
 800f878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f87c:	931a      	str	r3, [sp, #104]	; 0x68
 800f87e:	4654      	mov	r4, sl
 800f880:	2205      	movs	r2, #5
 800f882:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f886:	4854      	ldr	r0, [pc, #336]	; (800f9d8 <_vfiprintf_r+0x220>)
 800f888:	f7f0 fca2 	bl	80001d0 <memchr>
 800f88c:	9a04      	ldr	r2, [sp, #16]
 800f88e:	b9d8      	cbnz	r0, 800f8c8 <_vfiprintf_r+0x110>
 800f890:	06d1      	lsls	r1, r2, #27
 800f892:	bf44      	itt	mi
 800f894:	2320      	movmi	r3, #32
 800f896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f89a:	0713      	lsls	r3, r2, #28
 800f89c:	bf44      	itt	mi
 800f89e:	232b      	movmi	r3, #43	; 0x2b
 800f8a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8a4:	f89a 3000 	ldrb.w	r3, [sl]
 800f8a8:	2b2a      	cmp	r3, #42	; 0x2a
 800f8aa:	d015      	beq.n	800f8d8 <_vfiprintf_r+0x120>
 800f8ac:	9a07      	ldr	r2, [sp, #28]
 800f8ae:	4654      	mov	r4, sl
 800f8b0:	2000      	movs	r0, #0
 800f8b2:	f04f 0c0a 	mov.w	ip, #10
 800f8b6:	4621      	mov	r1, r4
 800f8b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8bc:	3b30      	subs	r3, #48	; 0x30
 800f8be:	2b09      	cmp	r3, #9
 800f8c0:	d94d      	bls.n	800f95e <_vfiprintf_r+0x1a6>
 800f8c2:	b1b0      	cbz	r0, 800f8f2 <_vfiprintf_r+0x13a>
 800f8c4:	9207      	str	r2, [sp, #28]
 800f8c6:	e014      	b.n	800f8f2 <_vfiprintf_r+0x13a>
 800f8c8:	eba0 0308 	sub.w	r3, r0, r8
 800f8cc:	fa09 f303 	lsl.w	r3, r9, r3
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	9304      	str	r3, [sp, #16]
 800f8d4:	46a2      	mov	sl, r4
 800f8d6:	e7d2      	b.n	800f87e <_vfiprintf_r+0xc6>
 800f8d8:	9b03      	ldr	r3, [sp, #12]
 800f8da:	1d19      	adds	r1, r3, #4
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	9103      	str	r1, [sp, #12]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	bfbb      	ittet	lt
 800f8e4:	425b      	neglt	r3, r3
 800f8e6:	f042 0202 	orrlt.w	r2, r2, #2
 800f8ea:	9307      	strge	r3, [sp, #28]
 800f8ec:	9307      	strlt	r3, [sp, #28]
 800f8ee:	bfb8      	it	lt
 800f8f0:	9204      	strlt	r2, [sp, #16]
 800f8f2:	7823      	ldrb	r3, [r4, #0]
 800f8f4:	2b2e      	cmp	r3, #46	; 0x2e
 800f8f6:	d10c      	bne.n	800f912 <_vfiprintf_r+0x15a>
 800f8f8:	7863      	ldrb	r3, [r4, #1]
 800f8fa:	2b2a      	cmp	r3, #42	; 0x2a
 800f8fc:	d134      	bne.n	800f968 <_vfiprintf_r+0x1b0>
 800f8fe:	9b03      	ldr	r3, [sp, #12]
 800f900:	1d1a      	adds	r2, r3, #4
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	9203      	str	r2, [sp, #12]
 800f906:	2b00      	cmp	r3, #0
 800f908:	bfb8      	it	lt
 800f90a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f90e:	3402      	adds	r4, #2
 800f910:	9305      	str	r3, [sp, #20]
 800f912:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f9e8 <_vfiprintf_r+0x230>
 800f916:	7821      	ldrb	r1, [r4, #0]
 800f918:	2203      	movs	r2, #3
 800f91a:	4650      	mov	r0, sl
 800f91c:	f7f0 fc58 	bl	80001d0 <memchr>
 800f920:	b138      	cbz	r0, 800f932 <_vfiprintf_r+0x17a>
 800f922:	9b04      	ldr	r3, [sp, #16]
 800f924:	eba0 000a 	sub.w	r0, r0, sl
 800f928:	2240      	movs	r2, #64	; 0x40
 800f92a:	4082      	lsls	r2, r0
 800f92c:	4313      	orrs	r3, r2
 800f92e:	3401      	adds	r4, #1
 800f930:	9304      	str	r3, [sp, #16]
 800f932:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f936:	4829      	ldr	r0, [pc, #164]	; (800f9dc <_vfiprintf_r+0x224>)
 800f938:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f93c:	2206      	movs	r2, #6
 800f93e:	f7f0 fc47 	bl	80001d0 <memchr>
 800f942:	2800      	cmp	r0, #0
 800f944:	d03f      	beq.n	800f9c6 <_vfiprintf_r+0x20e>
 800f946:	4b26      	ldr	r3, [pc, #152]	; (800f9e0 <_vfiprintf_r+0x228>)
 800f948:	bb1b      	cbnz	r3, 800f992 <_vfiprintf_r+0x1da>
 800f94a:	9b03      	ldr	r3, [sp, #12]
 800f94c:	3307      	adds	r3, #7
 800f94e:	f023 0307 	bic.w	r3, r3, #7
 800f952:	3308      	adds	r3, #8
 800f954:	9303      	str	r3, [sp, #12]
 800f956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f958:	443b      	add	r3, r7
 800f95a:	9309      	str	r3, [sp, #36]	; 0x24
 800f95c:	e768      	b.n	800f830 <_vfiprintf_r+0x78>
 800f95e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f962:	460c      	mov	r4, r1
 800f964:	2001      	movs	r0, #1
 800f966:	e7a6      	b.n	800f8b6 <_vfiprintf_r+0xfe>
 800f968:	2300      	movs	r3, #0
 800f96a:	3401      	adds	r4, #1
 800f96c:	9305      	str	r3, [sp, #20]
 800f96e:	4619      	mov	r1, r3
 800f970:	f04f 0c0a 	mov.w	ip, #10
 800f974:	4620      	mov	r0, r4
 800f976:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f97a:	3a30      	subs	r2, #48	; 0x30
 800f97c:	2a09      	cmp	r2, #9
 800f97e:	d903      	bls.n	800f988 <_vfiprintf_r+0x1d0>
 800f980:	2b00      	cmp	r3, #0
 800f982:	d0c6      	beq.n	800f912 <_vfiprintf_r+0x15a>
 800f984:	9105      	str	r1, [sp, #20]
 800f986:	e7c4      	b.n	800f912 <_vfiprintf_r+0x15a>
 800f988:	fb0c 2101 	mla	r1, ip, r1, r2
 800f98c:	4604      	mov	r4, r0
 800f98e:	2301      	movs	r3, #1
 800f990:	e7f0      	b.n	800f974 <_vfiprintf_r+0x1bc>
 800f992:	ab03      	add	r3, sp, #12
 800f994:	9300      	str	r3, [sp, #0]
 800f996:	462a      	mov	r2, r5
 800f998:	4b12      	ldr	r3, [pc, #72]	; (800f9e4 <_vfiprintf_r+0x22c>)
 800f99a:	a904      	add	r1, sp, #16
 800f99c:	4630      	mov	r0, r6
 800f99e:	f7fd fb9d 	bl	800d0dc <_printf_float>
 800f9a2:	4607      	mov	r7, r0
 800f9a4:	1c78      	adds	r0, r7, #1
 800f9a6:	d1d6      	bne.n	800f956 <_vfiprintf_r+0x19e>
 800f9a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9aa:	07d9      	lsls	r1, r3, #31
 800f9ac:	d405      	bmi.n	800f9ba <_vfiprintf_r+0x202>
 800f9ae:	89ab      	ldrh	r3, [r5, #12]
 800f9b0:	059a      	lsls	r2, r3, #22
 800f9b2:	d402      	bmi.n	800f9ba <_vfiprintf_r+0x202>
 800f9b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9b6:	f7fe f871 	bl	800da9c <__retarget_lock_release_recursive>
 800f9ba:	89ab      	ldrh	r3, [r5, #12]
 800f9bc:	065b      	lsls	r3, r3, #25
 800f9be:	f53f af1d 	bmi.w	800f7fc <_vfiprintf_r+0x44>
 800f9c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9c4:	e71c      	b.n	800f800 <_vfiprintf_r+0x48>
 800f9c6:	ab03      	add	r3, sp, #12
 800f9c8:	9300      	str	r3, [sp, #0]
 800f9ca:	462a      	mov	r2, r5
 800f9cc:	4b05      	ldr	r3, [pc, #20]	; (800f9e4 <_vfiprintf_r+0x22c>)
 800f9ce:	a904      	add	r1, sp, #16
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	f7fd fe27 	bl	800d624 <_printf_i>
 800f9d6:	e7e4      	b.n	800f9a2 <_vfiprintf_r+0x1ea>
 800f9d8:	080109a9 	.word	0x080109a9
 800f9dc:	080109b3 	.word	0x080109b3
 800f9e0:	0800d0dd 	.word	0x0800d0dd
 800f9e4:	0800f793 	.word	0x0800f793
 800f9e8:	080109af 	.word	0x080109af

0800f9ec <__swbuf_r>:
 800f9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ee:	460e      	mov	r6, r1
 800f9f0:	4614      	mov	r4, r2
 800f9f2:	4605      	mov	r5, r0
 800f9f4:	b118      	cbz	r0, 800f9fe <__swbuf_r+0x12>
 800f9f6:	6a03      	ldr	r3, [r0, #32]
 800f9f8:	b90b      	cbnz	r3, 800f9fe <__swbuf_r+0x12>
 800f9fa:	f7fd ffe1 	bl	800d9c0 <__sinit>
 800f9fe:	69a3      	ldr	r3, [r4, #24]
 800fa00:	60a3      	str	r3, [r4, #8]
 800fa02:	89a3      	ldrh	r3, [r4, #12]
 800fa04:	071a      	lsls	r2, r3, #28
 800fa06:	d525      	bpl.n	800fa54 <__swbuf_r+0x68>
 800fa08:	6923      	ldr	r3, [r4, #16]
 800fa0a:	b31b      	cbz	r3, 800fa54 <__swbuf_r+0x68>
 800fa0c:	6823      	ldr	r3, [r4, #0]
 800fa0e:	6922      	ldr	r2, [r4, #16]
 800fa10:	1a98      	subs	r0, r3, r2
 800fa12:	6963      	ldr	r3, [r4, #20]
 800fa14:	b2f6      	uxtb	r6, r6
 800fa16:	4283      	cmp	r3, r0
 800fa18:	4637      	mov	r7, r6
 800fa1a:	dc04      	bgt.n	800fa26 <__swbuf_r+0x3a>
 800fa1c:	4621      	mov	r1, r4
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f7ff f94e 	bl	800ecc0 <_fflush_r>
 800fa24:	b9e0      	cbnz	r0, 800fa60 <__swbuf_r+0x74>
 800fa26:	68a3      	ldr	r3, [r4, #8]
 800fa28:	3b01      	subs	r3, #1
 800fa2a:	60a3      	str	r3, [r4, #8]
 800fa2c:	6823      	ldr	r3, [r4, #0]
 800fa2e:	1c5a      	adds	r2, r3, #1
 800fa30:	6022      	str	r2, [r4, #0]
 800fa32:	701e      	strb	r6, [r3, #0]
 800fa34:	6962      	ldr	r2, [r4, #20]
 800fa36:	1c43      	adds	r3, r0, #1
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d004      	beq.n	800fa46 <__swbuf_r+0x5a>
 800fa3c:	89a3      	ldrh	r3, [r4, #12]
 800fa3e:	07db      	lsls	r3, r3, #31
 800fa40:	d506      	bpl.n	800fa50 <__swbuf_r+0x64>
 800fa42:	2e0a      	cmp	r6, #10
 800fa44:	d104      	bne.n	800fa50 <__swbuf_r+0x64>
 800fa46:	4621      	mov	r1, r4
 800fa48:	4628      	mov	r0, r5
 800fa4a:	f7ff f939 	bl	800ecc0 <_fflush_r>
 800fa4e:	b938      	cbnz	r0, 800fa60 <__swbuf_r+0x74>
 800fa50:	4638      	mov	r0, r7
 800fa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa54:	4621      	mov	r1, r4
 800fa56:	4628      	mov	r0, r5
 800fa58:	f000 f806 	bl	800fa68 <__swsetup_r>
 800fa5c:	2800      	cmp	r0, #0
 800fa5e:	d0d5      	beq.n	800fa0c <__swbuf_r+0x20>
 800fa60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fa64:	e7f4      	b.n	800fa50 <__swbuf_r+0x64>
	...

0800fa68 <__swsetup_r>:
 800fa68:	b538      	push	{r3, r4, r5, lr}
 800fa6a:	4b2a      	ldr	r3, [pc, #168]	; (800fb14 <__swsetup_r+0xac>)
 800fa6c:	4605      	mov	r5, r0
 800fa6e:	6818      	ldr	r0, [r3, #0]
 800fa70:	460c      	mov	r4, r1
 800fa72:	b118      	cbz	r0, 800fa7c <__swsetup_r+0x14>
 800fa74:	6a03      	ldr	r3, [r0, #32]
 800fa76:	b90b      	cbnz	r3, 800fa7c <__swsetup_r+0x14>
 800fa78:	f7fd ffa2 	bl	800d9c0 <__sinit>
 800fa7c:	89a3      	ldrh	r3, [r4, #12]
 800fa7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa82:	0718      	lsls	r0, r3, #28
 800fa84:	d422      	bmi.n	800facc <__swsetup_r+0x64>
 800fa86:	06d9      	lsls	r1, r3, #27
 800fa88:	d407      	bmi.n	800fa9a <__swsetup_r+0x32>
 800fa8a:	2309      	movs	r3, #9
 800fa8c:	602b      	str	r3, [r5, #0]
 800fa8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa92:	81a3      	strh	r3, [r4, #12]
 800fa94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa98:	e034      	b.n	800fb04 <__swsetup_r+0x9c>
 800fa9a:	0758      	lsls	r0, r3, #29
 800fa9c:	d512      	bpl.n	800fac4 <__swsetup_r+0x5c>
 800fa9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800faa0:	b141      	cbz	r1, 800fab4 <__swsetup_r+0x4c>
 800faa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800faa6:	4299      	cmp	r1, r3
 800faa8:	d002      	beq.n	800fab0 <__swsetup_r+0x48>
 800faaa:	4628      	mov	r0, r5
 800faac:	f7ff fdce 	bl	800f64c <_free_r>
 800fab0:	2300      	movs	r3, #0
 800fab2:	6363      	str	r3, [r4, #52]	; 0x34
 800fab4:	89a3      	ldrh	r3, [r4, #12]
 800fab6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800faba:	81a3      	strh	r3, [r4, #12]
 800fabc:	2300      	movs	r3, #0
 800fabe:	6063      	str	r3, [r4, #4]
 800fac0:	6923      	ldr	r3, [r4, #16]
 800fac2:	6023      	str	r3, [r4, #0]
 800fac4:	89a3      	ldrh	r3, [r4, #12]
 800fac6:	f043 0308 	orr.w	r3, r3, #8
 800faca:	81a3      	strh	r3, [r4, #12]
 800facc:	6923      	ldr	r3, [r4, #16]
 800face:	b94b      	cbnz	r3, 800fae4 <__swsetup_r+0x7c>
 800fad0:	89a3      	ldrh	r3, [r4, #12]
 800fad2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fada:	d003      	beq.n	800fae4 <__swsetup_r+0x7c>
 800fadc:	4621      	mov	r1, r4
 800fade:	4628      	mov	r0, r5
 800fae0:	f000 f840 	bl	800fb64 <__smakebuf_r>
 800fae4:	89a0      	ldrh	r0, [r4, #12]
 800fae6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800faea:	f010 0301 	ands.w	r3, r0, #1
 800faee:	d00a      	beq.n	800fb06 <__swsetup_r+0x9e>
 800faf0:	2300      	movs	r3, #0
 800faf2:	60a3      	str	r3, [r4, #8]
 800faf4:	6963      	ldr	r3, [r4, #20]
 800faf6:	425b      	negs	r3, r3
 800faf8:	61a3      	str	r3, [r4, #24]
 800fafa:	6923      	ldr	r3, [r4, #16]
 800fafc:	b943      	cbnz	r3, 800fb10 <__swsetup_r+0xa8>
 800fafe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fb02:	d1c4      	bne.n	800fa8e <__swsetup_r+0x26>
 800fb04:	bd38      	pop	{r3, r4, r5, pc}
 800fb06:	0781      	lsls	r1, r0, #30
 800fb08:	bf58      	it	pl
 800fb0a:	6963      	ldrpl	r3, [r4, #20]
 800fb0c:	60a3      	str	r3, [r4, #8]
 800fb0e:	e7f4      	b.n	800fafa <__swsetup_r+0x92>
 800fb10:	2000      	movs	r0, #0
 800fb12:	e7f7      	b.n	800fb04 <__swsetup_r+0x9c>
 800fb14:	20000088 	.word	0x20000088

0800fb18 <__swhatbuf_r>:
 800fb18:	b570      	push	{r4, r5, r6, lr}
 800fb1a:	460c      	mov	r4, r1
 800fb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb20:	2900      	cmp	r1, #0
 800fb22:	b096      	sub	sp, #88	; 0x58
 800fb24:	4615      	mov	r5, r2
 800fb26:	461e      	mov	r6, r3
 800fb28:	da0d      	bge.n	800fb46 <__swhatbuf_r+0x2e>
 800fb2a:	89a3      	ldrh	r3, [r4, #12]
 800fb2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fb30:	f04f 0100 	mov.w	r1, #0
 800fb34:	bf0c      	ite	eq
 800fb36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fb3a:	2340      	movne	r3, #64	; 0x40
 800fb3c:	2000      	movs	r0, #0
 800fb3e:	6031      	str	r1, [r6, #0]
 800fb40:	602b      	str	r3, [r5, #0]
 800fb42:	b016      	add	sp, #88	; 0x58
 800fb44:	bd70      	pop	{r4, r5, r6, pc}
 800fb46:	466a      	mov	r2, sp
 800fb48:	f000 f848 	bl	800fbdc <_fstat_r>
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	dbec      	blt.n	800fb2a <__swhatbuf_r+0x12>
 800fb50:	9901      	ldr	r1, [sp, #4]
 800fb52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fb56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fb5a:	4259      	negs	r1, r3
 800fb5c:	4159      	adcs	r1, r3
 800fb5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb62:	e7eb      	b.n	800fb3c <__swhatbuf_r+0x24>

0800fb64 <__smakebuf_r>:
 800fb64:	898b      	ldrh	r3, [r1, #12]
 800fb66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb68:	079d      	lsls	r5, r3, #30
 800fb6a:	4606      	mov	r6, r0
 800fb6c:	460c      	mov	r4, r1
 800fb6e:	d507      	bpl.n	800fb80 <__smakebuf_r+0x1c>
 800fb70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb74:	6023      	str	r3, [r4, #0]
 800fb76:	6123      	str	r3, [r4, #16]
 800fb78:	2301      	movs	r3, #1
 800fb7a:	6163      	str	r3, [r4, #20]
 800fb7c:	b002      	add	sp, #8
 800fb7e:	bd70      	pop	{r4, r5, r6, pc}
 800fb80:	ab01      	add	r3, sp, #4
 800fb82:	466a      	mov	r2, sp
 800fb84:	f7ff ffc8 	bl	800fb18 <__swhatbuf_r>
 800fb88:	9900      	ldr	r1, [sp, #0]
 800fb8a:	4605      	mov	r5, r0
 800fb8c:	4630      	mov	r0, r6
 800fb8e:	f7fe ff91 	bl	800eab4 <_malloc_r>
 800fb92:	b948      	cbnz	r0, 800fba8 <__smakebuf_r+0x44>
 800fb94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb98:	059a      	lsls	r2, r3, #22
 800fb9a:	d4ef      	bmi.n	800fb7c <__smakebuf_r+0x18>
 800fb9c:	f023 0303 	bic.w	r3, r3, #3
 800fba0:	f043 0302 	orr.w	r3, r3, #2
 800fba4:	81a3      	strh	r3, [r4, #12]
 800fba6:	e7e3      	b.n	800fb70 <__smakebuf_r+0xc>
 800fba8:	89a3      	ldrh	r3, [r4, #12]
 800fbaa:	6020      	str	r0, [r4, #0]
 800fbac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbb0:	81a3      	strh	r3, [r4, #12]
 800fbb2:	9b00      	ldr	r3, [sp, #0]
 800fbb4:	6163      	str	r3, [r4, #20]
 800fbb6:	9b01      	ldr	r3, [sp, #4]
 800fbb8:	6120      	str	r0, [r4, #16]
 800fbba:	b15b      	cbz	r3, 800fbd4 <__smakebuf_r+0x70>
 800fbbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbc0:	4630      	mov	r0, r6
 800fbc2:	f000 f81d 	bl	800fc00 <_isatty_r>
 800fbc6:	b128      	cbz	r0, 800fbd4 <__smakebuf_r+0x70>
 800fbc8:	89a3      	ldrh	r3, [r4, #12]
 800fbca:	f023 0303 	bic.w	r3, r3, #3
 800fbce:	f043 0301 	orr.w	r3, r3, #1
 800fbd2:	81a3      	strh	r3, [r4, #12]
 800fbd4:	89a3      	ldrh	r3, [r4, #12]
 800fbd6:	431d      	orrs	r5, r3
 800fbd8:	81a5      	strh	r5, [r4, #12]
 800fbda:	e7cf      	b.n	800fb7c <__smakebuf_r+0x18>

0800fbdc <_fstat_r>:
 800fbdc:	b538      	push	{r3, r4, r5, lr}
 800fbde:	4d07      	ldr	r5, [pc, #28]	; (800fbfc <_fstat_r+0x20>)
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	4604      	mov	r4, r0
 800fbe4:	4608      	mov	r0, r1
 800fbe6:	4611      	mov	r1, r2
 800fbe8:	602b      	str	r3, [r5, #0]
 800fbea:	f7f5 f85c 	bl	8004ca6 <_fstat>
 800fbee:	1c43      	adds	r3, r0, #1
 800fbf0:	d102      	bne.n	800fbf8 <_fstat_r+0x1c>
 800fbf2:	682b      	ldr	r3, [r5, #0]
 800fbf4:	b103      	cbz	r3, 800fbf8 <_fstat_r+0x1c>
 800fbf6:	6023      	str	r3, [r4, #0]
 800fbf8:	bd38      	pop	{r3, r4, r5, pc}
 800fbfa:	bf00      	nop
 800fbfc:	200054b4 	.word	0x200054b4

0800fc00 <_isatty_r>:
 800fc00:	b538      	push	{r3, r4, r5, lr}
 800fc02:	4d06      	ldr	r5, [pc, #24]	; (800fc1c <_isatty_r+0x1c>)
 800fc04:	2300      	movs	r3, #0
 800fc06:	4604      	mov	r4, r0
 800fc08:	4608      	mov	r0, r1
 800fc0a:	602b      	str	r3, [r5, #0]
 800fc0c:	f7f5 f85b 	bl	8004cc6 <_isatty>
 800fc10:	1c43      	adds	r3, r0, #1
 800fc12:	d102      	bne.n	800fc1a <_isatty_r+0x1a>
 800fc14:	682b      	ldr	r3, [r5, #0]
 800fc16:	b103      	cbz	r3, 800fc1a <_isatty_r+0x1a>
 800fc18:	6023      	str	r3, [r4, #0]
 800fc1a:	bd38      	pop	{r3, r4, r5, pc}
 800fc1c:	200054b4 	.word	0x200054b4

0800fc20 <_raise_r>:
 800fc20:	291f      	cmp	r1, #31
 800fc22:	b538      	push	{r3, r4, r5, lr}
 800fc24:	4604      	mov	r4, r0
 800fc26:	460d      	mov	r5, r1
 800fc28:	d904      	bls.n	800fc34 <_raise_r+0x14>
 800fc2a:	2316      	movs	r3, #22
 800fc2c:	6003      	str	r3, [r0, #0]
 800fc2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc32:	bd38      	pop	{r3, r4, r5, pc}
 800fc34:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fc36:	b112      	cbz	r2, 800fc3e <_raise_r+0x1e>
 800fc38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc3c:	b94b      	cbnz	r3, 800fc52 <_raise_r+0x32>
 800fc3e:	4620      	mov	r0, r4
 800fc40:	f000 f830 	bl	800fca4 <_getpid_r>
 800fc44:	462a      	mov	r2, r5
 800fc46:	4601      	mov	r1, r0
 800fc48:	4620      	mov	r0, r4
 800fc4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc4e:	f000 b817 	b.w	800fc80 <_kill_r>
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	d00a      	beq.n	800fc6c <_raise_r+0x4c>
 800fc56:	1c59      	adds	r1, r3, #1
 800fc58:	d103      	bne.n	800fc62 <_raise_r+0x42>
 800fc5a:	2316      	movs	r3, #22
 800fc5c:	6003      	str	r3, [r0, #0]
 800fc5e:	2001      	movs	r0, #1
 800fc60:	e7e7      	b.n	800fc32 <_raise_r+0x12>
 800fc62:	2400      	movs	r4, #0
 800fc64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fc68:	4628      	mov	r0, r5
 800fc6a:	4798      	blx	r3
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	e7e0      	b.n	800fc32 <_raise_r+0x12>

0800fc70 <raise>:
 800fc70:	4b02      	ldr	r3, [pc, #8]	; (800fc7c <raise+0xc>)
 800fc72:	4601      	mov	r1, r0
 800fc74:	6818      	ldr	r0, [r3, #0]
 800fc76:	f7ff bfd3 	b.w	800fc20 <_raise_r>
 800fc7a:	bf00      	nop
 800fc7c:	20000088 	.word	0x20000088

0800fc80 <_kill_r>:
 800fc80:	b538      	push	{r3, r4, r5, lr}
 800fc82:	4d07      	ldr	r5, [pc, #28]	; (800fca0 <_kill_r+0x20>)
 800fc84:	2300      	movs	r3, #0
 800fc86:	4604      	mov	r4, r0
 800fc88:	4608      	mov	r0, r1
 800fc8a:	4611      	mov	r1, r2
 800fc8c:	602b      	str	r3, [r5, #0]
 800fc8e:	f7f4 ffab 	bl	8004be8 <_kill>
 800fc92:	1c43      	adds	r3, r0, #1
 800fc94:	d102      	bne.n	800fc9c <_kill_r+0x1c>
 800fc96:	682b      	ldr	r3, [r5, #0]
 800fc98:	b103      	cbz	r3, 800fc9c <_kill_r+0x1c>
 800fc9a:	6023      	str	r3, [r4, #0]
 800fc9c:	bd38      	pop	{r3, r4, r5, pc}
 800fc9e:	bf00      	nop
 800fca0:	200054b4 	.word	0x200054b4

0800fca4 <_getpid_r>:
 800fca4:	f7f4 bf98 	b.w	8004bd8 <_getpid>

0800fca8 <round>:
 800fca8:	ec53 2b10 	vmov	r2, r3, d0
 800fcac:	b570      	push	{r4, r5, r6, lr}
 800fcae:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800fcb2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800fcb6:	2813      	cmp	r0, #19
 800fcb8:	ee10 5a10 	vmov	r5, s0
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	dc18      	bgt.n	800fcf2 <round+0x4a>
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	da09      	bge.n	800fcd8 <round+0x30>
 800fcc4:	3001      	adds	r0, #1
 800fcc6:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800fcca:	d103      	bne.n	800fcd4 <round+0x2c>
 800fccc:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800fcd0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	e02a      	b.n	800fd2e <round+0x86>
 800fcd8:	4c16      	ldr	r4, [pc, #88]	; (800fd34 <round+0x8c>)
 800fcda:	4104      	asrs	r4, r0
 800fcdc:	ea03 0604 	and.w	r6, r3, r4
 800fce0:	4316      	orrs	r6, r2
 800fce2:	d011      	beq.n	800fd08 <round+0x60>
 800fce4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fce8:	4103      	asrs	r3, r0
 800fcea:	440b      	add	r3, r1
 800fcec:	ea23 0104 	bic.w	r1, r3, r4
 800fcf0:	e7f0      	b.n	800fcd4 <round+0x2c>
 800fcf2:	2833      	cmp	r0, #51	; 0x33
 800fcf4:	dd0b      	ble.n	800fd0e <round+0x66>
 800fcf6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800fcfa:	d105      	bne.n	800fd08 <round+0x60>
 800fcfc:	ee10 0a10 	vmov	r0, s0
 800fd00:	f7f0 fac4 	bl	800028c <__adddf3>
 800fd04:	4602      	mov	r2, r0
 800fd06:	460b      	mov	r3, r1
 800fd08:	ec43 2b10 	vmov	d0, r2, r3
 800fd0c:	bd70      	pop	{r4, r5, r6, pc}
 800fd0e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800fd12:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fd16:	40f4      	lsrs	r4, r6
 800fd18:	4214      	tst	r4, r2
 800fd1a:	d0f5      	beq.n	800fd08 <round+0x60>
 800fd1c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800fd20:	2301      	movs	r3, #1
 800fd22:	4083      	lsls	r3, r0
 800fd24:	195b      	adds	r3, r3, r5
 800fd26:	bf28      	it	cs
 800fd28:	3101      	addcs	r1, #1
 800fd2a:	ea23 0304 	bic.w	r3, r3, r4
 800fd2e:	461a      	mov	r2, r3
 800fd30:	460b      	mov	r3, r1
 800fd32:	e7e9      	b.n	800fd08 <round+0x60>
 800fd34:	000fffff 	.word	0x000fffff

0800fd38 <_init>:
 800fd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd3a:	bf00      	nop
 800fd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd3e:	bc08      	pop	{r3}
 800fd40:	469e      	mov	lr, r3
 800fd42:	4770      	bx	lr

0800fd44 <_fini>:
 800fd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd46:	bf00      	nop
 800fd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd4a:	bc08      	pop	{r3}
 800fd4c:	469e      	mov	lr, r3
 800fd4e:	4770      	bx	lr
