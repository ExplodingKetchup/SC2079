
STM32_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b958  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800bae8  0800bae8  0001bae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf8c  0800bf8c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf8c  0800bf8c  0001bf8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf94  0800bf94  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf94  0800bf94  0001bf94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf98  0800bf98  0001bf98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bf9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000050d4  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200052b0  200052b0  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019080  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b3d  00000000  00000000  000392cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017b8  00000000  00000000  0003ce10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000125a  00000000  00000000  0003e5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000059e2  00000000  00000000  0003f822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a314  00000000  00000000  00045204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8b4c  00000000  00000000  0005f518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007384  00000000  00000000  00138064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0013f3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bad0 	.word	0x0800bad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800bad0 	.word	0x0800bad0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <imu_init>:

/*+++++++++++++++++++++++++++++++++++*/

/*----------------------------------------------------------------*/

uint8_t imu_init(I2C_HandleTypeDef* hi2c_ptr) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	hi2c1_ptr = hi2c_ptr;
 8000eac:	4a4d      	ldr	r2, [pc, #308]	; (8000fe4 <imu_init+0x140>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]

	// Reset chip
	if (!write_one_byte(0, B0_PWR_MGMT_1, 0x80 | 0x41)) return 1;
 8000eb2:	22c1      	movs	r2, #193	; 0xc1
 8000eb4:	2106      	movs	r1, #6
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f8de 	bl	8001078 <write_one_byte>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <imu_init+0x22>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e089      	b.n	8000fda <imu_init+0x136>

	cur_bank = get_cur_bank();
 8000ec6:	f000 f939 	bl	800113c <get_cur_bank>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b46      	ldr	r3, [pc, #280]	; (8000fe8 <imu_init+0x144>)
 8000ed0:	701a      	strb	r2, [r3, #0]

	osDelay(100);
 8000ed2:	2064      	movs	r0, #100	; 0x64
 8000ed4:	f005 fb66 	bl	80065a4 <osDelay>
	uint8_t who_am_i = read_one_byte(0, 0);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f894 	bl	8001008 <read_one_byte>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]
	if (who_am_i != 0xEA) { 	// read WHO_AM_I register, should receive 0xEA
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	2bea      	cmp	r3, #234	; 0xea
 8000ee8:	d001      	beq.n	8000eee <imu_init+0x4a>
		return 2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	e075      	b.n	8000fda <imu_init+0x136>
	}

	// Wake up chip
	if (!write_one_byte(0, B0_PWR_MGMT_1, ~0x40 & 0x41)) return 3;
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2106      	movs	r1, #6
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f8c0 	bl	8001078 <write_one_byte>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <imu_init+0x5e>
 8000efe:	2303      	movs	r3, #3
 8000f00:	e06b      	b.n	8000fda <imu_init+0x136>

	// Enables ODR start-time alignment when any of the following registers is written: GYRO_SMPLRT_DIV,
	// ACCEL_SMPLRT_DIV_1, ACCEL_SMPLRT_DIV_2, I2C_MST_ODR_CONFIG.
	if (!write_one_byte(2, B2_ODR_ALIGN_EN, 0x01)) return 4;
 8000f02:	2201      	movs	r2, #1
 8000f04:	2109      	movs	r1, #9
 8000f06:	2002      	movs	r0, #2
 8000f08:	f000 f8b6 	bl	8001078 <write_one_byte>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <imu_init+0x72>
 8000f12:	2304      	movs	r3, #4
 8000f14:	e061      	b.n	8000fda <imu_init+0x136>

	// Set accel low pass filter
	if (!write_one_byte(2, B2_ACCEL_CONFIG, (ACCEL_DLPFCFG_val << 3) | ACCEL_FCHOICE_val)) return 5;
 8000f16:	4b35      	ldr	r3, [pc, #212]	; (8000fec <imu_init+0x148>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	b25a      	sxtb	r2, r3
 8000f1e:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <imu_init+0x14c>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2114      	movs	r1, #20
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f000 f8a2 	bl	8001078 <write_one_byte>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <imu_init+0x9a>
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	e04d      	b.n	8000fda <imu_init+0x136>

	// Set gyro low pass filter and scale
	if (!write_one_byte(2, B2_GYRO_CONFIG_1, (((GYRO_DLPFCFG_val << 2) | GYRO_FS_SEL_val) << 1) | GYRO_FCHOICE_val)) return 6;
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <imu_init+0x150>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4a2c      	ldr	r2, [pc, #176]	; (8000ff8 <imu_init+0x154>)
 8000f46:	7812      	ldrb	r2, [r2, #0]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	b25a      	sxtb	r2, r3
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <imu_init+0x158>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f000 f88a 	bl	8001078 <write_one_byte>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <imu_init+0xca>
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	e035      	b.n	8000fda <imu_init+0x136>

	// Set accel sample rate divider
	if (ACCEL_SMPLRT_DIV_val > 0x0FFF) ACCEL_SMPLRT_DIV_val = 0x0FFF;
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <imu_init+0x15c>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f76:	d303      	bcc.n	8000f80 <imu_init+0xdc>
 8000f78:	4b21      	ldr	r3, [pc, #132]	; (8001000 <imu_init+0x15c>)
 8000f7a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f7e:	801a      	strh	r2, [r3, #0]
	if (!write_one_byte(2, B2_ACCEL_SMPLRT_DIV_1, (uint8_t)(ACCEL_SMPLRT_DIV_val >> 8))) return 7;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <imu_init+0x15c>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2110      	movs	r1, #16
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f000 f872 	bl	8001078 <write_one_byte>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <imu_init+0xfa>
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	e01d      	b.n	8000fda <imu_init+0x136>
	if (!write_one_byte(2, B2_ACCEL_SMPLRT_DIV_2, (uint8_t)(ACCEL_SMPLRT_DIV_val & 0x00FF))) return 8;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <imu_init+0x15c>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2111      	movs	r1, #17
 8000fa8:	2002      	movs	r0, #2
 8000faa:	f000 f865 	bl	8001078 <write_one_byte>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <imu_init+0x114>
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	e010      	b.n	8000fda <imu_init+0x136>

	// Set gyro sample rate divider
	if (!write_one_byte(2, B2_GYRO_SMPLRT_DIV, GYRO_SMPLRT_DIV_val)) return 9;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <imu_init+0x160>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f000 f859 	bl	8001078 <write_one_byte>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <imu_init+0x12c>
 8000fcc:	2309      	movs	r3, #9
 8000fce:	e004      	b.n	8000fda <imu_init+0x136>

	// Caliberate accelerometer (eliminate bias)
	accel_caliberate();
 8000fd0:	f000 f92a 	bl	8001228 <accel_caliberate>

	// Caliberate gyroscope (eliminate bias)
	gyro_caliberate();
 8000fd4:	f000 fa68 	bl	80014a8 <gyro_caliberate>

	return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200001f8 	.word	0x200001f8
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	200001fc 	.word	0x200001fc
 8000ff0:	20000001 	.word	0x20000001
 8000ff4:	20000003 	.word	0x20000003
 8000ff8:	20000200 	.word	0x20000200
 8000ffc:	20000002 	.word	0x20000002
 8001000:	200001fe 	.word	0x200001fe
 8001004:	20000201 	.word	0x20000201

08001008 <read_one_byte>:

uint8_t read_one_byte(uint8_t bank, uint8_t regAddr) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af02      	add	r7, sp, #8
 800100e:	4603      	mov	r3, r0
 8001010:	460a      	mov	r2, r1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	4613      	mov	r3, r2
 8001016:	71bb      	strb	r3, [r7, #6]

	if (!select_bank(bank)) return 0;
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f85a 	bl	80010d4 <select_bank>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <read_one_byte+0x22>
 8001026:	2300      	movs	r3, #0
 8001028:	e020      	b.n	800106c <read_one_byte+0x64>
	uint8_t buf[1];

	uint8_t reg = regAddr;
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	72fb      	strb	r3, [r7, #11]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <read_one_byte+0x6c>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	f107 020b 	add.w	r2, r7, #11
 8001036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	21d0      	movs	r1, #208	; 0xd0
 8001040:	f002 fd72 	bl	8003b28 <HAL_I2C_Master_Transmit>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10f      	bne.n	800106a <read_one_byte+0x62>
		if (HAL_I2C_Master_Receive(hi2c1_ptr, IMU_I2C_ADDR, buf, 1, HAL_MAX_DELAY) == HAL_OK) {
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <read_one_byte+0x6c>)
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	f107 020c 	add.w	r2, r7, #12
 8001052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	21d0      	movs	r1, #208	; 0xd0
 800105c:	f002 fe62 	bl	8003d24 <HAL_I2C_Master_Receive>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <read_one_byte+0x62>
			return buf[0];
 8001066:	7b3b      	ldrb	r3, [r7, #12]
 8001068:	e000      	b.n	800106c <read_one_byte+0x64>
		}
	}
	return 0;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200001f8 	.word	0x200001f8

08001078 <write_one_byte>:

uint8_t write_one_byte(uint8_t bank, uint8_t regAddr, uint8_t data) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	460b      	mov	r3, r1
 8001084:	71bb      	strb	r3, [r7, #6]
 8001086:	4613      	mov	r3, r2
 8001088:	717b      	strb	r3, [r7, #5]

	if (!select_bank(bank)) return 0;
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f821 	bl	80010d4 <select_bank>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <write_one_byte+0x24>
 8001098:	2300      	movs	r3, #0
 800109a:	e014      	b.n	80010c6 <write_one_byte+0x4e>
	uint8_t buf[2];
	buf[0] = regAddr;
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 80010a0:	797b      	ldrb	r3, [r7, #5]
 80010a2:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, buf, 2, HAL_MAX_DELAY) == HAL_OK) {
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <write_one_byte+0x58>)
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	f107 020c 	add.w	r2, r7, #12
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2302      	movs	r3, #2
 80010b4:	21d0      	movs	r1, #208	; 0xd0
 80010b6:	f002 fd37 	bl	8003b28 <HAL_I2C_Master_Transmit>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <write_one_byte+0x4c>
		return 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <write_one_byte+0x4e>
	}
	return 0;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200001f8 	.word	0x200001f8

080010d4 <select_bank>:

uint8_t select_bank(uint8_t bank) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af02      	add	r7, sp, #8
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]

	if (bank > 3) return 0;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d901      	bls.n	80010e8 <select_bank+0x14>
 80010e4:	2300      	movs	r3, #0
 80010e6:	e020      	b.n	800112a <select_bank+0x56>
	if (cur_bank == bank) return 1;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <select_bank+0x60>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	79fa      	ldrb	r2, [r7, #7]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d101      	bne.n	80010f6 <select_bank+0x22>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e019      	b.n	800112a <select_bank+0x56>
	uint8_t buf[2];
	buf[0] = REG_BANK_SEL;
 80010f6:	237f      	movs	r3, #127	; 0x7f
 80010f8:	733b      	strb	r3, [r7, #12]
	buf[1] = bank << 4;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, buf, 2, HAL_MAX_DELAY) == HAL_OK) {
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <select_bank+0x64>)
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	f107 020c 	add.w	r2, r7, #12
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2302      	movs	r3, #2
 8001112:	21d0      	movs	r1, #208	; 0xd0
 8001114:	f002 fd08 	bl	8003b28 <HAL_I2C_Master_Transmit>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d104      	bne.n	8001128 <select_bank+0x54>
		cur_bank = bank;
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <select_bank+0x60>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	7013      	strb	r3, [r2, #0]
		return 1;
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <select_bank+0x56>
	}
	return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000000 	.word	0x20000000
 8001138:	200001f8 	.word	0x200001f8

0800113c <get_cur_bank>:

uint8_t get_cur_bank() {
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af02      	add	r7, sp, #8
	uint8_t buf[1];

	uint8_t reg = REG_BANK_SEL;
 8001142:	237f      	movs	r3, #127	; 0x7f
 8001144:	70fb      	strb	r3, [r7, #3]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <get_cur_bank+0x58>)
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	1cfa      	adds	r2, r7, #3
 800114c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	21d0      	movs	r1, #208	; 0xd0
 8001156:	f002 fce7 	bl	8003b28 <HAL_I2C_Master_Transmit>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d113      	bne.n	8001188 <get_cur_bank+0x4c>
		if (HAL_I2C_Master_Receive(hi2c1_ptr, IMU_I2C_ADDR, buf, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <get_cur_bank+0x58>)
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	1d3a      	adds	r2, r7, #4
 8001166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	21d0      	movs	r1, #208	; 0xd0
 8001170:	f002 fdd8 	bl	8003d24 <HAL_I2C_Master_Receive>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d106      	bne.n	8001188 <get_cur_bank+0x4c>
			return (buf[0] >> 4) & 0x3;
 800117a:	793b      	ldrb	r3, [r7, #4]
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	e000      	b.n	800118a <get_cur_bank+0x4e>
		}
	}
	return 4;
 8001188:	2304      	movs	r3, #4
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200001f8 	.word	0x200001f8

08001198 <read_raw_accel_x>:

int16_t read_raw_accel_x() {
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_ACCEL_XOUT_H) << 8) | read_one_byte(0, B0_ACCEL_XOUT_L));
 800119e:	212d      	movs	r1, #45	; 0x2d
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff ff31 	bl	8001008 <read_one_byte>
 80011a6:	4603      	mov	r3, r0
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21c      	sxth	r4, r3
 80011ac:	212e      	movs	r1, #46	; 0x2e
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff ff2a 	bl	8001008 <read_one_byte>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4323      	orrs	r3, r4
 80011ba:	80fb      	strh	r3, [r7, #6]
	return raw;
 80011bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd90      	pop	{r4, r7, pc}

080011c8 <read_raw_accel_y>:
	int16_t raw = read_raw_accel_x();
	float result = ((float)raw / ACCEL_SENSITIVITY_SCALE) * G;
	return result;
}

int16_t read_raw_accel_y() {
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_ACCEL_YOUT_H) << 8) | read_one_byte(0, B0_ACCEL_YOUT_L));
 80011ce:	212f      	movs	r1, #47	; 0x2f
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff ff19 	bl	8001008 <read_one_byte>
 80011d6:	4603      	mov	r3, r0
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21c      	sxth	r4, r3
 80011dc:	2130      	movs	r1, #48	; 0x30
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff ff12 	bl	8001008 <read_one_byte>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4323      	orrs	r3, r4
 80011ea:	80fb      	strh	r3, [r7, #6]
	return raw;
 80011ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd90      	pop	{r4, r7, pc}

080011f8 <read_raw_accel_z>:
	int16_t raw = read_raw_accel_y();
	float result = ((float)raw / ACCEL_SENSITIVITY_SCALE) * G;
	return result;
}

int16_t read_raw_accel_z() {
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_ACCEL_ZOUT_H) << 8) | read_one_byte(0, B0_ACCEL_ZOUT_L));
 80011fe:	2131      	movs	r1, #49	; 0x31
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ff01 	bl	8001008 <read_one_byte>
 8001206:	4603      	mov	r3, r0
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21c      	sxth	r4, r3
 800120c:	2132      	movs	r1, #50	; 0x32
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff fefa 	bl	8001008 <read_one_byte>
 8001214:	4603      	mov	r3, r0
 8001216:	b21b      	sxth	r3, r3
 8001218:	4323      	orrs	r3, r4
 800121a:	80fb      	strh	r3, [r7, #6]
	return raw;
 800121c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bd90      	pop	{r4, r7, pc}

08001228 <accel_caliberate>:
}

/*
 * Assumption: Device is initialize on flat surface (ax = ay = 0, az = g)
 */
void accel_caliberate() {
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
	int32_t accel_bias_x = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
	int32_t accel_bias_y = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
	int32_t accel_bias_z = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 100; i++) {
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	e017      	b.n	8001270 <accel_caliberate+0x48>
		accel_bias_x += read_raw_accel_x();
 8001240:	f7ff ffaa 	bl	8001198 <read_raw_accel_x>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	4413      	add	r3, r2
 800124c:	61fb      	str	r3, [r7, #28]
		accel_bias_y += read_raw_accel_y();
 800124e:	f7ff ffbb 	bl	80011c8 <read_raw_accel_y>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	4413      	add	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
		accel_bias_z += read_raw_accel_z();
 800125c:	f7ff ffcc 	bl	80011f8 <read_raw_accel_z>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	4413      	add	r3, r2
 8001268:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 100; i++) {
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	3301      	adds	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	2b63      	cmp	r3, #99	; 0x63
 8001274:	dde4      	ble.n	8001240 <accel_caliberate+0x18>
	}
	accel_bias_x /= 100;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	4a57      	ldr	r2, [pc, #348]	; (80013d8 <accel_caliberate+0x1b0>)
 800127a:	fb82 1203 	smull	r1, r2, r2, r3
 800127e:	1152      	asrs	r2, r2, #5
 8001280:	17db      	asrs	r3, r3, #31
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	61fb      	str	r3, [r7, #28]
	accel_bias_y /= 100;
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	4a53      	ldr	r2, [pc, #332]	; (80013d8 <accel_caliberate+0x1b0>)
 800128a:	fb82 1203 	smull	r1, r2, r2, r3
 800128e:	1152      	asrs	r2, r2, #5
 8001290:	17db      	asrs	r3, r3, #31
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	61bb      	str	r3, [r7, #24]
	accel_bias_z /= 100;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <accel_caliberate+0x1b0>)
 800129a:	fb82 1203 	smull	r1, r2, r2, r3
 800129e:	1152      	asrs	r2, r2, #5
 80012a0:	17db      	asrs	r3, r3, #31
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	617b      	str	r3, [r7, #20]
	accel_bias_z -= ACCEL_SENSITIVITY_SCALE;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80012ac:	617b      	str	r3, [r7, #20]
	// Measured scale: 16384 lsb/g. Offset scale: 0.98 mg/lsb. Convert by offset = - measurement / 16
	accel_bias_x = -accel_bias_x / 16;
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	425b      	negs	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	da00      	bge.n	80012b8 <accel_caliberate+0x90>
 80012b6:	330f      	adds	r3, #15
 80012b8:	111b      	asrs	r3, r3, #4
 80012ba:	61fb      	str	r3, [r7, #28]
	accel_bias_y = -accel_bias_y / 16;
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	425b      	negs	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	da00      	bge.n	80012c6 <accel_caliberate+0x9e>
 80012c4:	330f      	adds	r3, #15
 80012c6:	111b      	asrs	r3, r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
	accel_bias_z = -accel_bias_z / 16;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	425b      	negs	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	da00      	bge.n	80012d4 <accel_caliberate+0xac>
 80012d2:	330f      	adds	r3, #15
 80012d4:	111b      	asrs	r3, r3, #4
 80012d6:	617b      	str	r3, [r7, #20]
	// Get the preloaded offset and add with our custom bias
	int16_t accel_offset_x = (int16_t)(read_one_byte(1, B1_XA_OFFS_H) << 8 | read_one_byte(1, B1_XA_OFFS_L)) >> 1;
 80012d8:	2114      	movs	r1, #20
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff fe94 	bl	8001008 <read_one_byte>
 80012e0:	4603      	mov	r3, r0
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b21c      	sxth	r4, r3
 80012e6:	2115      	movs	r1, #21
 80012e8:	2001      	movs	r0, #1
 80012ea:	f7ff fe8d 	bl	8001008 <read_one_byte>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4323      	orrs	r3, r4
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	105b      	asrs	r3, r3, #1
 80012f8:	81fb      	strh	r3, [r7, #14]
	int16_t accel_offset_y = (int16_t)(read_one_byte(1, B1_YA_OFFS_H) << 8 | read_one_byte(1, B1_YA_OFFS_L)) >> 1;
 80012fa:	2117      	movs	r1, #23
 80012fc:	2001      	movs	r0, #1
 80012fe:	f7ff fe83 	bl	8001008 <read_one_byte>
 8001302:	4603      	mov	r3, r0
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21c      	sxth	r4, r3
 8001308:	2118      	movs	r1, #24
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff fe7c 	bl	8001008 <read_one_byte>
 8001310:	4603      	mov	r3, r0
 8001312:	b21b      	sxth	r3, r3
 8001314:	4323      	orrs	r3, r4
 8001316:	b21b      	sxth	r3, r3
 8001318:	105b      	asrs	r3, r3, #1
 800131a:	81bb      	strh	r3, [r7, #12]
	int16_t accel_offset_z = (int16_t)(read_one_byte(1, B1_ZA_OFFS_H) << 8 | read_one_byte(1, B1_ZA_OFFS_L)) >> 1;
 800131c:	211a      	movs	r1, #26
 800131e:	2001      	movs	r0, #1
 8001320:	f7ff fe72 	bl	8001008 <read_one_byte>
 8001324:	4603      	mov	r3, r0
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b21c      	sxth	r4, r3
 800132a:	211b      	movs	r1, #27
 800132c:	2001      	movs	r0, #1
 800132e:	f7ff fe6b 	bl	8001008 <read_one_byte>
 8001332:	4603      	mov	r3, r0
 8001334:	b21b      	sxth	r3, r3
 8001336:	4323      	orrs	r3, r4
 8001338:	b21b      	sxth	r3, r3
 800133a:	105b      	asrs	r3, r3, #1
 800133c:	817b      	strh	r3, [r7, #10]

	accel_bias_x += accel_offset_x;
 800133e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	4413      	add	r3, r2
 8001346:	61fb      	str	r3, [r7, #28]
	accel_bias_y += accel_offset_y;
 8001348:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4413      	add	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
	accel_bias_z += accel_offset_z;
 8001352:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4413      	add	r3, r2
 800135a:	617b      	str	r3, [r7, #20]

	// Separate accel_bias into 2 part: [14:7] and [6:0]
	uint8_t accel_bias_x_h = (uint8_t)(accel_bias_x >> 7);
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	11db      	asrs	r3, r3, #7
 8001360:	727b      	strb	r3, [r7, #9]
	uint8_t accel_bias_x_l = (uint8_t)(accel_bias_x << 1);
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	723b      	strb	r3, [r7, #8]
	uint8_t accel_bias_y_h = (uint8_t)(accel_bias_y >> 7);
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	11db      	asrs	r3, r3, #7
 800136e:	71fb      	strb	r3, [r7, #7]
	uint8_t accel_bias_y_l = (uint8_t)(accel_bias_y << 1);
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	71bb      	strb	r3, [r7, #6]
	uint8_t accel_bias_z_h = (uint8_t)(accel_bias_z >> 7);
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	11db      	asrs	r3, r3, #7
 800137c:	717b      	strb	r3, [r7, #5]
	uint8_t accel_bias_z_l = (uint8_t)(accel_bias_z << 1);
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	713b      	strb	r3, [r7, #4]
	// Write to registers
	write_one_byte(1, B1_XA_OFFS_H, accel_bias_x_h);
 8001386:	7a7b      	ldrb	r3, [r7, #9]
 8001388:	461a      	mov	r2, r3
 800138a:	2114      	movs	r1, #20
 800138c:	2001      	movs	r0, #1
 800138e:	f7ff fe73 	bl	8001078 <write_one_byte>
	write_one_byte(1, B1_XA_OFFS_L, accel_bias_x_l);
 8001392:	7a3b      	ldrb	r3, [r7, #8]
 8001394:	461a      	mov	r2, r3
 8001396:	2115      	movs	r1, #21
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff fe6d 	bl	8001078 <write_one_byte>
	write_one_byte(1, B1_YA_OFFS_H, accel_bias_y_h);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	461a      	mov	r2, r3
 80013a2:	2117      	movs	r1, #23
 80013a4:	2001      	movs	r0, #1
 80013a6:	f7ff fe67 	bl	8001078 <write_one_byte>
	write_one_byte(1, B1_YA_OFFS_L, accel_bias_y_l);
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	461a      	mov	r2, r3
 80013ae:	2118      	movs	r1, #24
 80013b0:	2001      	movs	r0, #1
 80013b2:	f7ff fe61 	bl	8001078 <write_one_byte>
	write_one_byte(1, B1_ZA_OFFS_H, accel_bias_z_h);
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	461a      	mov	r2, r3
 80013ba:	211a      	movs	r1, #26
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff fe5b 	bl	8001078 <write_one_byte>
	write_one_byte(1, B1_ZA_OFFS_L, accel_bias_z_l);
 80013c2:	793b      	ldrb	r3, [r7, #4]
 80013c4:	461a      	mov	r2, r3
 80013c6:	211b      	movs	r1, #27
 80013c8:	2001      	movs	r0, #1
 80013ca:	f7ff fe55 	bl	8001078 <write_one_byte>
}
 80013ce:	bf00      	nop
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}
 80013d6:	bf00      	nop
 80013d8:	51eb851f 	.word	0x51eb851f

080013dc <read_raw_gyro_x>:

int16_t read_raw_gyro_x() {
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_XOUT_H) << 8) | read_one_byte(0, B0_GYRO_XOUT_L));
 80013e2:	2133      	movs	r1, #51	; 0x33
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fe0f 	bl	8001008 <read_one_byte>
 80013ea:	4603      	mov	r3, r0
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	b21c      	sxth	r4, r3
 80013f0:	2134      	movs	r1, #52	; 0x34
 80013f2:	2000      	movs	r0, #0
 80013f4:	f7ff fe08 	bl	8001008 <read_one_byte>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4323      	orrs	r3, r4
 80013fe:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bd90      	pop	{r4, r7, pc}

0800140c <read_raw_gyro_y>:
	int16_t raw = read_raw_gyro_x();
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
	return result;
}

int16_t read_raw_gyro_y() {
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_YOUT_H) << 8) | read_one_byte(0, B0_GYRO_YOUT_L));
 8001412:	2135      	movs	r1, #53	; 0x35
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fdf7 	bl	8001008 <read_one_byte>
 800141a:	4603      	mov	r3, r0
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b21c      	sxth	r4, r3
 8001420:	2136      	movs	r1, #54	; 0x36
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff fdf0 	bl	8001008 <read_one_byte>
 8001428:	4603      	mov	r3, r0
 800142a:	b21b      	sxth	r3, r3
 800142c:	4323      	orrs	r3, r4
 800142e:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bd90      	pop	{r4, r7, pc}

0800143c <read_raw_gyro_z>:
	int16_t raw = read_raw_gyro_y();
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
	return result;
}

int16_t read_raw_gyro_z() {
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_ZOUT_H) << 8) | read_one_byte(0, B0_GYRO_ZOUT_L));
 8001442:	2137      	movs	r1, #55	; 0x37
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff fddf 	bl	8001008 <read_one_byte>
 800144a:	4603      	mov	r3, r0
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21c      	sxth	r4, r3
 8001450:	2138      	movs	r1, #56	; 0x38
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff fdd8 	bl	8001008 <read_one_byte>
 8001458:	4603      	mov	r3, r0
 800145a:	b21b      	sxth	r3, r3
 800145c:	4323      	orrs	r3, r4
 800145e:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001460:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}

0800146c <read_gyro_z>:

float read_gyro_z() {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	int16_t raw = read_raw_gyro_z();
 8001472:	f7ff ffe3 	bl	800143c <read_raw_gyro_z>
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
 800147a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001486:	eddf 6a07 	vldr	s13, [pc, #28]	; 80014a4 <read_gyro_z+0x38>
 800148a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148e:	edc7 7a00 	vstr	s15, [r7]
	return result;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	ee07 3a90 	vmov	s15, r3
}
 8001498:	eeb0 0a67 	vmov.f32	s0, s15
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	43030000 	.word	0x43030000

080014a8 <gyro_caliberate>:
	gyro->x = read_gyro_x();
	gyro->y = read_gyro_y();
	gyro->z = read_gyro_z();
}

void gyro_caliberate() {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
	int32_t gyro_bias_x = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
	int32_t gyro_bias_y = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
	int32_t gyro_bias_z = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	e017      	b.n	80014f0 <gyro_caliberate+0x48>
		gyro_bias_x += read_raw_gyro_x();
 80014c0:	f7ff ff8c 	bl	80013dc <read_raw_gyro_x>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	4413      	add	r3, r2
 80014cc:	617b      	str	r3, [r7, #20]
		gyro_bias_y += read_raw_gyro_y();
 80014ce:	f7ff ff9d 	bl	800140c <read_raw_gyro_y>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4413      	add	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
		gyro_bias_z += read_raw_gyro_z();
 80014dc:	f7ff ffae 	bl	800143c <read_raw_gyro_z>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	3301      	adds	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b63      	cmp	r3, #99	; 0x63
 80014f4:	dde4      	ble.n	80014c0 <gyro_caliberate+0x18>
	}
	gyro_bias_x /= 100;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	4a31      	ldr	r2, [pc, #196]	; (80015c0 <gyro_caliberate+0x118>)
 80014fa:	fb82 1203 	smull	r1, r2, r2, r3
 80014fe:	1152      	asrs	r2, r2, #5
 8001500:	17db      	asrs	r3, r3, #31
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	617b      	str	r3, [r7, #20]
	gyro_bias_y /= 100;
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4a2d      	ldr	r2, [pc, #180]	; (80015c0 <gyro_caliberate+0x118>)
 800150a:	fb82 1203 	smull	r1, r2, r2, r3
 800150e:	1152      	asrs	r2, r2, #5
 8001510:	17db      	asrs	r3, r3, #31
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	613b      	str	r3, [r7, #16]
	gyro_bias_z /= 100;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4a29      	ldr	r2, [pc, #164]	; (80015c0 <gyro_caliberate+0x118>)
 800151a:	fb82 1203 	smull	r1, r2, r2, r3
 800151e:	1152      	asrs	r2, r2, #5
 8001520:	17db      	asrs	r3, r3, #31
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	60fb      	str	r3, [r7, #12]
	// Step size for offset register: 0.0305 dps/LSB; Offset = Measurement / 4;
	gyro_bias_x = -gyro_bias_x / 4;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	425b      	negs	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	da00      	bge.n	8001530 <gyro_caliberate+0x88>
 800152e:	3303      	adds	r3, #3
 8001530:	109b      	asrs	r3, r3, #2
 8001532:	617b      	str	r3, [r7, #20]
	gyro_bias_y = -gyro_bias_y / 4;
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	425b      	negs	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	da00      	bge.n	800153e <gyro_caliberate+0x96>
 800153c:	3303      	adds	r3, #3
 800153e:	109b      	asrs	r3, r3, #2
 8001540:	613b      	str	r3, [r7, #16]
	gyro_bias_z = -gyro_bias_z / 4;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	425b      	negs	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	da00      	bge.n	800154c <gyro_caliberate+0xa4>
 800154a:	3303      	adds	r3, #3
 800154c:	109b      	asrs	r3, r3, #2
 800154e:	60fb      	str	r3, [r7, #12]
	/*gyro_bias_x = -gyro_bias_x * 2;
	gyro_bias_y = -gyro_bias_y * 2;
	gyro_bias_z = -gyro_bias_z * 2;*/
	// Separate gyro_bias into 2 parts: [15:8] and [7:0]
	uint8_t gyro_bias_x_h = (uint8_t)(gyro_bias_x >> 8);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	121b      	asrs	r3, r3, #8
 8001554:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_bias_x_l = (uint8_t)gyro_bias_x;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	71bb      	strb	r3, [r7, #6]
	uint8_t gyro_bias_y_h = (uint8_t)(gyro_bias_y >> 8);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	121b      	asrs	r3, r3, #8
 800155e:	717b      	strb	r3, [r7, #5]
	uint8_t gyro_bias_y_l = (uint8_t)gyro_bias_y;
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	713b      	strb	r3, [r7, #4]
	uint8_t gyro_bias_z_h = (uint8_t)(gyro_bias_z >> 8);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	121b      	asrs	r3, r3, #8
 8001568:	70fb      	strb	r3, [r7, #3]
	uint8_t gyro_bias_z_l = (uint8_t)gyro_bias_z;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	70bb      	strb	r3, [r7, #2]
	// Write to registers
	write_one_byte(2, B2_XG_OFFS_USRH, gyro_bias_x_h);
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	461a      	mov	r2, r3
 8001572:	2103      	movs	r1, #3
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff fd7f 	bl	8001078 <write_one_byte>
	write_one_byte(2, B2_XG_OFFS_USRL, gyro_bias_x_l);
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	461a      	mov	r2, r3
 800157e:	2104      	movs	r1, #4
 8001580:	2002      	movs	r0, #2
 8001582:	f7ff fd79 	bl	8001078 <write_one_byte>
	write_one_byte(2, B2_YG_OFFS_USRH, gyro_bias_y_h);
 8001586:	797b      	ldrb	r3, [r7, #5]
 8001588:	461a      	mov	r2, r3
 800158a:	2105      	movs	r1, #5
 800158c:	2002      	movs	r0, #2
 800158e:	f7ff fd73 	bl	8001078 <write_one_byte>
	write_one_byte(2, B2_YG_OFFS_USRL, gyro_bias_y_l);
 8001592:	793b      	ldrb	r3, [r7, #4]
 8001594:	461a      	mov	r2, r3
 8001596:	2106      	movs	r1, #6
 8001598:	2002      	movs	r0, #2
 800159a:	f7ff fd6d 	bl	8001078 <write_one_byte>
	write_one_byte(2, B2_ZG_OFFS_USRH, gyro_bias_z_h);
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	461a      	mov	r2, r3
 80015a2:	2107      	movs	r1, #7
 80015a4:	2002      	movs	r0, #2
 80015a6:	f7ff fd67 	bl	8001078 <write_one_byte>
	write_one_byte(2, B2_ZG_OFFS_USRL, gyro_bias_z_l);
 80015aa:	78bb      	ldrb	r3, [r7, #2]
 80015ac:	461a      	mov	r2, r3
 80015ae:	2108      	movs	r1, #8
 80015b0:	2002      	movs	r0, #2
 80015b2:	f7ff fd61 	bl	8001078 <write_one_byte>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	51eb851f 	.word	0x51eb851f

080015c4 <calcOri>:

float calcOri(uint32_t* lastSampleTime, float lastSampleOri) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	ed87 0a00 	vstr	s0, [r7]
	float angular_speed = 0;
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
	angular_speed += read_gyro_z();
 80015d6:	f7ff ff49 	bl	800146c <read_gyro_z>
 80015da:	eeb0 7a40 	vmov.f32	s14, s0
 80015de:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015e6:	edc7 7a05 	vstr	s15, [r7, #20]
	if (abs(angular_speed) < MIN_ANG_SPD)
 80015ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f2:	ee17 3a90 	vmov	r3, s15
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	bfb8      	it	lt
 80015fa:	425b      	neglt	r3, r3
 80015fc:	ee07 3a90 	vmov	s15, r3
 8001600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001604:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001610:	d502      	bpl.n	8001618 <calcOri+0x54>
		angular_speed = 0;
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
	uint32_t curTime = HAL_GetTick();
 8001618:	f001 fe4a 	bl	80032b0 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]
	uint16_t dt = curTime - (*lastSampleTime);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	b29a      	uxth	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b29b      	uxth	r3, r3
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	817b      	strh	r3, [r7, #10]
	*lastSampleTime = curTime;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	601a      	str	r2, [r3, #0]
	float result = lastSampleOri + angular_speed * dt / 1000;
 8001632:	897b      	ldrh	r3, [r7, #10]
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800163c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001644:	eddf 6a19 	vldr	s13, [pc, #100]	; 80016ac <calcOri+0xe8>
 8001648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164c:	ed97 7a00 	vldr	s14, [r7]
 8001650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001654:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result >= 360)
 8001658:	e007      	b.n	800166a <calcOri+0xa6>
		result -= 360;
 800165a:	edd7 7a04 	vldr	s15, [r7, #16]
 800165e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80016b0 <calcOri+0xec>
 8001662:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001666:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result >= 360)
 800166a:	edd7 7a04 	vldr	s15, [r7, #16]
 800166e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80016b0 <calcOri+0xec>
 8001672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	daee      	bge.n	800165a <calcOri+0x96>
	while (result < 0)
 800167c:	e007      	b.n	800168e <calcOri+0xca>
		result += 360;
 800167e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001682:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80016b0 <calcOri+0xec>
 8001686:	ee77 7a87 	vadd.f32	s15, s15, s14
 800168a:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result < 0)
 800168e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001692:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169a:	d4f0      	bmi.n	800167e <calcOri+0xba>
	return result;
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	ee07 3a90 	vmov	s15, r3
}
 80016a2:	eeb0 0a67 	vmov.f32	s0, s15
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	447a0000 	.word	0x447a0000
 80016b0:	43b40000 	.word	0x43b40000

080016b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b8:	f001 fd94 	bl	80031e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016bc:	f000 f866 	bl	800178c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c0:	f000 fae0 	bl	8001c84 <MX_GPIO_Init>
  MX_TIM8_Init();
 80016c4:	f000 fa34 	bl	8001b30 <MX_TIM8_Init>
  MX_I2C1_Init();
 80016c8:	f000 f8be 	bl	8001848 <MX_I2C1_Init>
  MX_TIM2_Init();
 80016cc:	f000 f988 	bl	80019e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016d0:	f000 f9da 	bl	8001a88 <MX_TIM3_Init>
  MX_TIM1_Init();
 80016d4:	f000 f8e6 	bl	80018a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80016d8:	f001 f966 	bl	80029a8 <OLED_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016dc:	f004 fe86 	bl	80063ec <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ori_semaphore */
  ori_semaphoreHandle = osSemaphoreNew(1, 1, &ori_semaphore_attributes);
 80016e0:	4a19      	ldr	r2, [pc, #100]	; (8001748 <main+0x94>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	2001      	movs	r0, #1
 80016e6:	f004 ff78 	bl	80065da <osSemaphoreNew>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <main+0x98>)
 80016ee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80016f0:	4a17      	ldr	r2, [pc, #92]	; (8001750 <main+0x9c>)
 80016f2:	2100      	movs	r1, #0
 80016f4:	4817      	ldr	r0, [pc, #92]	; (8001754 <main+0xa0>)
 80016f6:	f004 fec3 	bl	8006480 <osThreadNew>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a16      	ldr	r2, [pc, #88]	; (8001758 <main+0xa4>)
 80016fe:	6013      	str	r3, [r2, #0]

  /* creation of motorServo */
  motorServoHandle = osThreadNew(StartMotorServo, NULL, &motorServo_attributes);
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <main+0xa8>)
 8001702:	2100      	movs	r1, #0
 8001704:	4816      	ldr	r0, [pc, #88]	; (8001760 <main+0xac>)
 8001706:	f004 febb 	bl	8006480 <osThreadNew>
 800170a:	4603      	mov	r3, r0
 800170c:	4a15      	ldr	r2, [pc, #84]	; (8001764 <main+0xb0>)
 800170e:	6013      	str	r3, [r2, #0]

  /* creation of imu */
  imuHandle = osThreadNew(StartIMU, NULL, &imu_attributes);
 8001710:	4a15      	ldr	r2, [pc, #84]	; (8001768 <main+0xb4>)
 8001712:	2100      	movs	r1, #0
 8001714:	4815      	ldr	r0, [pc, #84]	; (800176c <main+0xb8>)
 8001716:	f004 feb3 	bl	8006480 <osThreadNew>
 800171a:	4603      	mov	r3, r0
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <main+0xbc>)
 800171e:	6013      	str	r3, [r2, #0]

  /* creation of ultrasound */
  ultrasoundHandle = osThreadNew(StartUS, NULL, &ultrasound_attributes);
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <main+0xc0>)
 8001722:	2100      	movs	r1, #0
 8001724:	4814      	ldr	r0, [pc, #80]	; (8001778 <main+0xc4>)
 8001726:	f004 feab 	bl	8006480 <osThreadNew>
 800172a:	4603      	mov	r3, r0
 800172c:	4a13      	ldr	r2, [pc, #76]	; (800177c <main+0xc8>)
 800172e:	6013      	str	r3, [r2, #0]

  /* creation of uart */
  uartHandle = osThreadNew(StartUART, NULL, &uart_attributes);
 8001730:	4a13      	ldr	r2, [pc, #76]	; (8001780 <main+0xcc>)
 8001732:	2100      	movs	r1, #0
 8001734:	4813      	ldr	r0, [pc, #76]	; (8001784 <main+0xd0>)
 8001736:	f004 fea3 	bl	8006480 <osThreadNew>
 800173a:	4603      	mov	r3, r0
 800173c:	4a12      	ldr	r2, [pc, #72]	; (8001788 <main+0xd4>)
 800173e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001740:	f004 fe78 	bl	8006434 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//mtrA_mov(DIR_BCK, 2000);
	//mtrB_mov(DIR_BCK, 2000);
  while (1)
 8001744:	e7fe      	b.n	8001744 <main+0x90>
 8001746:	bf00      	nop
 8001748:	0800bbf4 	.word	0x0800bbf4
 800174c:	2000038c 	.word	0x2000038c
 8001750:	0800bb40 	.word	0x0800bb40
 8001754:	08001dc5 	.word	0x08001dc5
 8001758:	20000378 	.word	0x20000378
 800175c:	0800bb64 	.word	0x0800bb64
 8001760:	08001dd5 	.word	0x08001dd5
 8001764:	2000037c 	.word	0x2000037c
 8001768:	0800bb88 	.word	0x0800bb88
 800176c:	08001e9d 	.word	0x08001e9d
 8001770:	20000380 	.word	0x20000380
 8001774:	0800bbac 	.word	0x0800bbac
 8001778:	08001edd 	.word	0x08001edd
 800177c:	20000384 	.word	0x20000384
 8001780:	0800bbd0 	.word	0x0800bbd0
 8001784:	08001eed 	.word	0x08001eed
 8001788:	20000388 	.word	0x20000388

0800178c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b094      	sub	sp, #80	; 0x50
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	2230      	movs	r2, #48	; 0x30
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f008 fa04 	bl	8009ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	4b22      	ldr	r3, [pc, #136]	; (8001840 <SystemClock_Config+0xb4>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	4a21      	ldr	r2, [pc, #132]	; (8001840 <SystemClock_Config+0xb4>)
 80017ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017be:	6413      	str	r3, [r2, #64]	; 0x40
 80017c0:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <SystemClock_Config+0xb4>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <SystemClock_Config+0xb8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <SystemClock_Config+0xb8>)
 80017d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <SystemClock_Config+0xb8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017e8:	2302      	movs	r3, #2
 80017ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ec:	2301      	movs	r3, #1
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f0:	2310      	movs	r3, #16
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f8:	f107 0320 	add.w	r3, r7, #32
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 f80d 	bl	800481c <HAL_RCC_OscConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001808:	f000 fb78 	bl	8001efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180c:	230f      	movs	r3, #15
 800180e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f003 fa70 	bl	8004d0c <HAL_RCC_ClockConfig>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001832:	f000 fb63 	bl	8001efc <Error_Handler>
  }
}
 8001836:	bf00      	nop
 8001838:	3750      	adds	r7, #80	; 0x50
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000

08001848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_I2C1_Init+0x50>)
 800184e:	4a13      	ldr	r2, [pc, #76]	; (800189c <MX_I2C1_Init+0x54>)
 8001850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_I2C1_Init+0x50>)
 8001854:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <MX_I2C1_Init+0x58>)
 8001856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_I2C1_Init+0x50>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_I2C1_Init+0x50>)
 8001860:	2200      	movs	r2, #0
 8001862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_I2C1_Init+0x50>)
 8001866:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <MX_I2C1_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_I2C1_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <MX_I2C1_Init+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_I2C1_Init+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_I2C1_Init+0x50>)
 8001886:	f002 f80b 	bl	80038a0 <HAL_I2C_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001890:	f000 fb34 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000204 	.word	0x20000204
 800189c:	40005400 	.word	0x40005400
 80018a0:	000186a0 	.word	0x000186a0

080018a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b096      	sub	sp, #88	; 0x58
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2220      	movs	r2, #32
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f008 f963 	bl	8009ba8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <MX_TIM1_Init+0x134>)
 80018e4:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <MX_TIM1_Init+0x138>)
 80018e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80018e8:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <MX_TIM1_Init+0x134>)
 80018ea:	220f      	movs	r2, #15
 80018ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ee:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <MX_TIM1_Init+0x134>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80018f4:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <MX_TIM1_Init+0x134>)
 80018f6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fc:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <MX_TIM1_Init+0x134>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001902:	4b35      	ldr	r3, [pc, #212]	; (80019d8 <MX_TIM1_Init+0x134>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001908:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <MX_TIM1_Init+0x134>)
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800190e:	4832      	ldr	r0, [pc, #200]	; (80019d8 <MX_TIM1_Init+0x134>)
 8001910:	f003 fbc8 	bl	80050a4 <HAL_TIM_Base_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800191a:	f000 faef 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001922:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001924:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001928:	4619      	mov	r1, r3
 800192a:	482b      	ldr	r0, [pc, #172]	; (80019d8 <MX_TIM1_Init+0x134>)
 800192c:	f004 f848 	bl	80059c0 <HAL_TIM_ConfigClockSource>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001936:	f000 fae1 	bl	8001efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800193a:	4827      	ldr	r0, [pc, #156]	; (80019d8 <MX_TIM1_Init+0x134>)
 800193c:	f003 fc01 	bl	8005142 <HAL_TIM_PWM_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001946:	f000 fad9 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001956:	4619      	mov	r1, r3
 8001958:	481f      	ldr	r0, [pc, #124]	; (80019d8 <MX_TIM1_Init+0x134>)
 800195a:	f004 fc31 	bl	80061c0 <HAL_TIMEx_MasterConfigSynchronization>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001964:	f000 faca 	bl	8001efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001968:	2360      	movs	r3, #96	; 0x60
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001984:	220c      	movs	r2, #12
 8001986:	4619      	mov	r1, r3
 8001988:	4813      	ldr	r0, [pc, #76]	; (80019d8 <MX_TIM1_Init+0x134>)
 800198a:	f003 ff57 	bl	800583c <HAL_TIM_PWM_ConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001994:	f000 fab2 	bl	8001efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4807      	ldr	r0, [pc, #28]	; (80019d8 <MX_TIM1_Init+0x134>)
 80019bc:	f004 fc7c 	bl	80062b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80019c6:	f000 fa99 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019ca:	4803      	ldr	r0, [pc, #12]	; (80019d8 <MX_TIM1_Init+0x134>)
 80019cc:	f001 fa96 	bl	8002efc <HAL_TIM_MspPostInit>

}
 80019d0:	bf00      	nop
 80019d2:	3758      	adds	r7, #88	; 0x58
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000258 	.word	0x20000258
 80019dc:	40010000 	.word	0x40010000

080019e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	; 0x30
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	2224      	movs	r2, #36	; 0x24
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f008 f8da 	bl	8009ba8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <MX_TIM2_Init+0xa4>)
 80019fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a04:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <MX_TIM2_Init+0xa4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <MX_TIM2_Init+0xa4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a10:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <MX_TIM2_Init+0xa4>)
 8001a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_TIM2_Init+0xa4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <MX_TIM2_Init+0xa4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a24:	2303      	movs	r3, #3
 8001a26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a34:	230a      	movs	r3, #10
 8001a36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001a44:	230a      	movs	r3, #10
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480d      	ldr	r0, [pc, #52]	; (8001a84 <MX_TIM2_Init+0xa4>)
 8001a50:	f003 fc98 	bl	8005384 <HAL_TIM_Encoder_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001a5a:	f000 fa4f 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4806      	ldr	r0, [pc, #24]	; (8001a84 <MX_TIM2_Init+0xa4>)
 8001a6c:	f004 fba8 	bl	80061c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a76:	f000 fa41 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	3730      	adds	r7, #48	; 0x30
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200002a0 	.word	0x200002a0

08001a88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	; 0x30
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2224      	movs	r2, #36	; 0x24
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f008 f886 	bl	8009ba8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001aa6:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <MX_TIM3_Init+0xa4>)
 8001aa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001abc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aca:	2303      	movs	r3, #3
 8001acc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ada:	230a      	movs	r3, #10
 8001adc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001aea:	230a      	movs	r3, #10
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	4619      	mov	r1, r3
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001af6:	f003 fc45 	bl	8005384 <HAL_TIM_Encoder_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b00:	f000 f9fc 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_TIM3_Init+0xa0>)
 8001b12:	f004 fb55 	bl	80061c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b1c:	f000 f9ee 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	3730      	adds	r7, #48	; 0x30
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200002e8 	.word	0x200002e8
 8001b2c:	40000400 	.word	0x40000400

08001b30 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b096      	sub	sp, #88	; 0x58
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]
 8001b5e:	615a      	str	r2, [r3, #20]
 8001b60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2220      	movs	r2, #32
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f008 f81d 	bl	8009ba8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b6e:	4b43      	ldr	r3, [pc, #268]	; (8001c7c <MX_TIM8_Init+0x14c>)
 8001b70:	4a43      	ldr	r2, [pc, #268]	; (8001c80 <MX_TIM8_Init+0x150>)
 8001b72:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b74:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <MX_TIM8_Init+0x14c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7a:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <MX_TIM8_Init+0x14c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001b80:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <MX_TIM8_Init+0x14c>)
 8001b82:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001b86:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b88:	4b3c      	ldr	r3, [pc, #240]	; (8001c7c <MX_TIM8_Init+0x14c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <MX_TIM8_Init+0x14c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b94:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <MX_TIM8_Init+0x14c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b9a:	4838      	ldr	r0, [pc, #224]	; (8001c7c <MX_TIM8_Init+0x14c>)
 8001b9c:	f003 fa82 	bl	80050a4 <HAL_TIM_Base_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001ba6:	f000 f9a9 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001bb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4831      	ldr	r0, [pc, #196]	; (8001c7c <MX_TIM8_Init+0x14c>)
 8001bb8:	f003 ff02 	bl	80059c0 <HAL_TIM_ConfigClockSource>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001bc2:	f000 f99b 	bl	8001efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001bc6:	482d      	ldr	r0, [pc, #180]	; (8001c7c <MX_TIM8_Init+0x14c>)
 8001bc8:	f003 fabb 	bl	8005142 <HAL_TIM_PWM_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001bd2:	f000 f993 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001be2:	4619      	mov	r1, r3
 8001be4:	4825      	ldr	r0, [pc, #148]	; (8001c7c <MX_TIM8_Init+0x14c>)
 8001be6:	f004 faeb 	bl	80061c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001bf0:	f000 f984 	bl	8001efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf4:	2360      	movs	r3, #96	; 0x60
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c00:	2300      	movs	r3, #0
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c14:	2200      	movs	r2, #0
 8001c16:	4619      	mov	r1, r3
 8001c18:	4818      	ldr	r0, [pc, #96]	; (8001c7c <MX_TIM8_Init+0x14c>)
 8001c1a:	f003 fe0f 	bl	800583c <HAL_TIM_PWM_ConfigChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001c24:	f000 f96a 	bl	8001efc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4812      	ldr	r0, [pc, #72]	; (8001c7c <MX_TIM8_Init+0x14c>)
 8001c32:	f003 fe03 	bl	800583c <HAL_TIM_PWM_ConfigChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001c3c:	f000 f95e 	bl	8001efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4806      	ldr	r0, [pc, #24]	; (8001c7c <MX_TIM8_Init+0x14c>)
 8001c64:	f004 fb28 	bl	80062b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001c6e:	f000 f945 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	3758      	adds	r7, #88	; 0x58
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000330 	.word	0x20000330
 8001c80:	40010400 	.word	0x40010400

08001c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <MX_GPIO_Init+0xe0>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a30      	ldr	r2, [pc, #192]	; (8001d64 <MX_GPIO_Init+0xe0>)
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <MX_GPIO_Init+0xe0>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <MX_GPIO_Init+0xe0>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a29      	ldr	r2, [pc, #164]	; (8001d64 <MX_GPIO_Init+0xe0>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <MX_GPIO_Init+0xe0>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <MX_GPIO_Init+0xe0>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a22      	ldr	r2, [pc, #136]	; (8001d64 <MX_GPIO_Init+0xe0>)
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <MX_GPIO_Init+0xe0>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <MX_GPIO_Init+0xe0>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <MX_GPIO_Init+0xe0>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <MX_GPIO_Init+0xe0>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001d10:	4815      	ldr	r0, [pc, #84]	; (8001d68 <MX_GPIO_Init+0xe4>)
 8001d12:	f001 fdab 	bl	800386c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	213c      	movs	r1, #60	; 0x3c
 8001d1a:	4814      	ldr	r0, [pc, #80]	; (8001d6c <MX_GPIO_Init+0xe8>)
 8001d1c:	f001 fda6 	bl	800386c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001d20:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	480b      	ldr	r0, [pc, #44]	; (8001d68 <MX_GPIO_Init+0xe4>)
 8001d3a:	f001 fbfb 	bl	8003534 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001d3e:	233c      	movs	r3, #60	; 0x3c
 8001d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_GPIO_Init+0xe8>)
 8001d56:	f001 fbed 	bl	8003534 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	; 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40020000 	.word	0x40020000

08001d70 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {		// Motor A's interrupt
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d108      	bne.n	8001d92 <HAL_TIM_IC_CaptureCallback+0x22>
		mtrAPID.count = -(int16_t)__HAL_TIM_GET_COUNTER(htim);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	425b      	negs	r3, r3
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	b21a      	sxth	r2, r3
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001d90:	801a      	strh	r2, [r3, #0]
		//mtrAPID.angle = (int)((mtrAPID.count/2)*360/(PULSE_PER_REV));
	}
	if (htim == &htim3) {		// Motor B's interrupt
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d105      	bne.n	8001da6 <HAL_TIM_IC_CaptureCallback+0x36>
		mtrBPID.count = (int16_t)__HAL_TIM_GET_COUNTER(htim);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	b21a      	sxth	r2, r3
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001da4:	801a      	strh	r2, [r3, #0]
		//mtrBPID.angle = (int)((mtrBPID.count/2)*360/(PULSE_PER_REV));
	}
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	200002a0 	.word	0x200002a0
 8001db8:	200003a4 	.word	0x200003a4
 8001dbc:	200002e8 	.word	0x200002e8
 8001dc0:	200003c4 	.word	0x200003c4

08001dc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f004 fbe9 	bl	80065a4 <osDelay>
 8001dd2:	e7fb      	b.n	8001dcc <StartDefaultTask+0x8>

08001dd4 <StartMotorServo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorServo */
void StartMotorServo(void *argument)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af04      	add	r7, sp, #16
 8001dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorServo */
	mtr_init(&htim8, &htim2, &htim3, &mtrA, &mtrB, &mtrAPID, &mtrBPID, &ori_semaphoreHandle);
 8001ddc:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <StartMotorServo+0x8c>)
 8001dde:	9303      	str	r3, [sp, #12]
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <StartMotorServo+0x90>)
 8001de2:	9302      	str	r3, [sp, #8]
 8001de4:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <StartMotorServo+0x94>)
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <StartMotorServo+0x98>)
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <StartMotorServo+0x9c>)
 8001dee:	4a21      	ldr	r2, [pc, #132]	; (8001e74 <StartMotorServo+0xa0>)
 8001df0:	4921      	ldr	r1, [pc, #132]	; (8001e78 <StartMotorServo+0xa4>)
 8001df2:	4822      	ldr	r0, [pc, #136]	; (8001e7c <StartMotorServo+0xa8>)
 8001df4:	f000 f888 	bl	8001f08 <mtr_init>
	servoInit(&htim1);
 8001df8:	4821      	ldr	r0, [pc, #132]	; (8001e80 <StartMotorServo+0xac>)
 8001dfa:	f000 fecf 	bl	8002b9c <servoInit>
	  mtrB_mov(DIR_FWD, 0);
	  turnServo(RIGHT);
	  mtrA_mov(DIR_BCK, 2000);
	  mtrB_mov(DIR_BCK, 2000);
	  osDelay(500);*/
	  mtr_mov_cm(100, 100);
 8001dfe:	eddf 0a21 	vldr	s1, [pc, #132]	; 8001e84 <StartMotorServo+0xb0>
 8001e02:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001e84 <StartMotorServo+0xb0>
 8001e06:	f000 fb21 	bl	800244c <mtr_mov_cm>
	  turn(90, &orientation);
 8001e0a:	481f      	ldr	r0, [pc, #124]	; (8001e88 <StartMotorServo+0xb4>)
 8001e0c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001e8c <StartMotorServo+0xb8>
 8001e10:	f000 fbf2 	bl	80025f8 <turn>
	  //osDelay(5000);
	  mtr_mov_cm(100, 100);
 8001e14:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8001e84 <StartMotorServo+0xb0>
 8001e18:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001e84 <StartMotorServo+0xb0>
 8001e1c:	f000 fb16 	bl	800244c <mtr_mov_cm>
	  turn(180, &orientation);
 8001e20:	4819      	ldr	r0, [pc, #100]	; (8001e88 <StartMotorServo+0xb4>)
 8001e22:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001e90 <StartMotorServo+0xbc>
 8001e26:	f000 fbe7 	bl	80025f8 <turn>
	  //osDelay(5000);
	  mtr_mov_cm(100, 100);
 8001e2a:	eddf 0a16 	vldr	s1, [pc, #88]	; 8001e84 <StartMotorServo+0xb0>
 8001e2e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001e84 <StartMotorServo+0xb0>
 8001e32:	f000 fb0b 	bl	800244c <mtr_mov_cm>
	  turn(270, &orientation);
 8001e36:	4814      	ldr	r0, [pc, #80]	; (8001e88 <StartMotorServo+0xb4>)
 8001e38:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001e94 <StartMotorServo+0xc0>
 8001e3c:	f000 fbdc 	bl	80025f8 <turn>
	  //osDelay(5000);
	  mtr_mov_cm(100, 100);
 8001e40:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001e84 <StartMotorServo+0xb0>
 8001e44:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001e84 <StartMotorServo+0xb0>
 8001e48:	f000 fb00 	bl	800244c <mtr_mov_cm>
	  turn(0, &orientation);
 8001e4c:	480e      	ldr	r0, [pc, #56]	; (8001e88 <StartMotorServo+0xb4>)
 8001e4e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001e98 <StartMotorServo+0xc4>
 8001e52:	f000 fbd1 	bl	80025f8 <turn>
	  osDelay(5000);
 8001e56:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e5a:	f004 fba3 	bl	80065a4 <osDelay>
	  mtr_mov_cm(100, 100);
 8001e5e:	e7ce      	b.n	8001dfe <StartMotorServo+0x2a>
 8001e60:	2000038c 	.word	0x2000038c
 8001e64:	200003c4 	.word	0x200003c4
 8001e68:	200003a4 	.word	0x200003a4
 8001e6c:	2000039c 	.word	0x2000039c
 8001e70:	20000394 	.word	0x20000394
 8001e74:	200002e8 	.word	0x200002e8
 8001e78:	200002a0 	.word	0x200002a0
 8001e7c:	20000330 	.word	0x20000330
 8001e80:	20000258 	.word	0x20000258
 8001e84:	42c80000 	.word	0x42c80000
 8001e88:	20000390 	.word	0x20000390
 8001e8c:	42b40000 	.word	0x42b40000
 8001e90:	43340000 	.word	0x43340000
 8001e94:	43870000 	.word	0x43870000
 8001e98:	00000000 	.word	0x00000000

08001e9c <StartIMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMU */
void StartIMU(void *argument)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMU */
	uint32_t ori_lastSampleTime = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
	imu_init(&hi2c1);
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <StartIMU+0x38>)
 8001eaa:	f7fe fffb 	bl	8000ea4 <imu_init>
  /* Infinite loop */
  for(;;)
  {
	  orientation = calcOri(&ori_lastSampleTime, orientation);
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <StartIMU+0x3c>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fb81 	bl	80015c4 <calcOri>
 8001ec2:	eef0 7a40 	vmov.f32	s15, s0
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <StartIMU+0x3c>)
 8001ec8:	edc3 7a00 	vstr	s15, [r3]
	  OLED_ShowString(10, 15, &oledbuf[0]);
	  OLED_Refresh_Gram();
	  sprintf(oledbuf, "Gyr_z = %5.1f", read_gyro_z());
	  OLED_ShowString(10, 30, &oledbuf[0]);
	  OLED_Refresh_Gram();*/
	  osDelay(1);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f004 fb69 	bl	80065a4 <osDelay>
	  orientation = calcOri(&ori_lastSampleTime, orientation);
 8001ed2:	e7ec      	b.n	8001eae <StartIMU+0x12>
 8001ed4:	20000204 	.word	0x20000204
 8001ed8:	20000390 	.word	0x20000390

08001edc <StartUS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUS */
void StartUS(void *argument)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUS */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f004 fb5d 	bl	80065a4 <osDelay>
 8001eea:	e7fb      	b.n	8001ee4 <StartUS+0x8>

08001eec <StartUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART */
void StartUART(void *argument)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f004 fb55 	bl	80065a4 <osDelay>
 8001efa:	e7fb      	b.n	8001ef4 <StartUART+0x8>

08001efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f00:	b672      	cpsid	i
}
 8001f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <Error_Handler+0x8>
	...

08001f08 <mtr_init>:
TIM_HandleTypeDef* htim2Ptr;	// Pointer of the timer for motor A encoding (by default should pass &htim2)
TIM_HandleTypeDef* htim3Ptr;	// Pointer of the timer for motor B encoding (by default should pass &htim3)
osSemaphoreId_t* ori_semaphoreHandlePtr;

void mtr_init(TIM_HandleTypeDef* pwm_htimPtr, TIM_HandleTypeDef* encodeA_htimPtr, TIM_HandleTypeDef* encodeB_htimPtr,
		MotorData* mtrA, MotorData* mtrB, MotorPIDData* mtrAPID, MotorPIDData* mtrBPID, osSemaphoreId_t* oriSemHandlePtr) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]

	motorA = mtrA;
 8001f16:	4a23      	ldr	r2, [pc, #140]	; (8001fa4 <mtr_init+0x9c>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6013      	str	r3, [r2, #0]
	motorB = mtrB;
 8001f1c:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <mtr_init+0xa0>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	6013      	str	r3, [r2, #0]
	motorAPID = mtrAPID;
 8001f22:	4a22      	ldr	r2, [pc, #136]	; (8001fac <mtr_init+0xa4>)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	6013      	str	r3, [r2, #0]
	motorBPID = mtrBPID;
 8001f28:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <mtr_init+0xa8>)
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	6013      	str	r3, [r2, #0]

	ori_semaphoreHandlePtr = oriSemHandlePtr;
 8001f2e:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <mtr_init+0xac>)
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	6013      	str	r3, [r2, #0]

	htim8Ptr = pwm_htimPtr;
 8001f34:	4a20      	ldr	r2, [pc, #128]	; (8001fb8 <mtr_init+0xb0>)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6013      	str	r3, [r2, #0]
	htim2Ptr = encodeA_htimPtr;
 8001f3a:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <mtr_init+0xb4>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	6013      	str	r3, [r2, #0]
	htim3Ptr = encodeB_htimPtr;
 8001f40:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <mtr_init+0xb8>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim8Ptr, PWMA_TIM_CH);
 8001f46:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <mtr_init+0xb0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 f951 	bl	80051f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim8Ptr, PWMB_TIM_CH);
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <mtr_init+0xb0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2104      	movs	r1, #4
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 f94b 	bl	80051f4 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start_IT(htim2Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <mtr_init+0xb4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	213c      	movs	r1, #60	; 0x3c
 8001f64:	4618      	mov	r0, r3
 8001f66:	f003 fab3 	bl	80054d0 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(htim3Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <mtr_init+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	213c      	movs	r1, #60	; 0x3c
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 faad 	bl	80054d0 <HAL_TIM_Encoder_Start_IT>

	mtrA_init(0, 0, 0, 0, 1);
 8001f76:	2201      	movs	r2, #1
 8001f78:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001fc4 <mtr_init+0xbc>
 8001f7c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001fc4 <mtr_init+0xbc>
 8001f80:	2100      	movs	r1, #0
 8001f82:	2000      	movs	r0, #0
 8001f84:	f000 f820 	bl	8001fc8 <mtrA_init>
	mtrB_init(0, 0, 0, 0, 1);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8001fc4 <mtr_init+0xbc>
 8001f8e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001fc4 <mtr_init+0xbc>
 8001f92:	2100      	movs	r1, #0
 8001f94:	2000      	movs	r0, #0
 8001f96:	f000 f87d 	bl	8002094 <mtrB_init>
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200003e4 	.word	0x200003e4
 8001fa8:	200003e8 	.word	0x200003e8
 8001fac:	200003ec 	.word	0x200003ec
 8001fb0:	200003f0 	.word	0x200003f0
 8001fb4:	20000400 	.word	0x20000400
 8001fb8:	200003f4 	.word	0x200003f4
 8001fbc:	200003f8 	.word	0x200003f8
 8001fc0:	200003fc 	.word	0x200003fc
 8001fc4:	00000000 	.word	0x00000000

08001fc8 <mtrA_init>:

void mtrA_init(int16_t target, int16_t Kp, float Kd, float Ki, uint8_t reset_timer) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001fd4:	edc7 0a01 	vstr	s1, [r7, #4]
 8001fd8:	81fb      	strh	r3, [r7, #14]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	81bb      	strh	r3, [r7, #12]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	70fb      	strb	r3, [r7, #3]

	if (reset_timer)
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d004      	beq.n	8001ff2 <mtrA_init+0x2a>
		__HAL_TIM_SET_COUNTER(htim2Ptr, 0);
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <mtrA_init+0xc0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24

	motorA->dir = DIR_FWD;
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <mtrA_init+0xc4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
	motorA->pwmVal = 0;
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <mtrA_init+0xc4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2200      	movs	r2, #0
 8002000:	605a      	str	r2, [r3, #4]

	motorAPID->count = -(int16_t)__HAL_TIM_GET_COUNTER(htim2Ptr);       		// Counter (signed value)
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <mtrA_init+0xc0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	b29b      	uxth	r3, r3
 800200c:	425b      	negs	r3, r3
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <mtrA_init+0xc8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	b212      	sxth	r2, r2
 8002016:	801a      	strh	r2, [r3, #0]
	//motorAPID->angle = 0;      			// angle of rotation, in degree resolution = 360/260
	//motorAPID->target_angle = target_angle; 		// target angle of rotation,
	motorAPID->target = target;
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <mtrA_init+0xc8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	89fa      	ldrh	r2, [r7, #14]
 800201e:	805a      	strh	r2, [r3, #2]
	//motorAPID->error = motorAPID->target_angle - motorAPID->angle;           	// error between target and actual
	motorAPID->error = motorAPID->target - motorAPID->count;
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <mtrA_init+0xc8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002028:	b29a      	uxth	r2, r3
 800202a:	4b19      	ldr	r3, [pc, #100]	; (8002090 <mtrA_init+0xc8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002032:	b29b      	uxth	r3, r3
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	b29a      	uxth	r2, r3
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <mtrA_init+0xc8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	b212      	sxth	r2, r2
 800203e:	809a      	strh	r2, [r3, #4]
	motorAPID->error_area = 0;  		// area under error - to calculate I for PI implementation
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <mtrA_init+0xc8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
	motorAPID->error_old = 0; 			// to calculate D for PID control
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <mtrA_init+0xc8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2200      	movs	r2, #0
 800204e:	60da      	str	r2, [r3, #12]
	motorAPID->millisOld = HAL_GetTick();			// to calculate I and D for PID control
 8002050:	f001 f92e 	bl	80032b0 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <mtrA_init+0xc8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	611a      	str	r2, [r3, #16]
	motorAPID->Kp = Kp;
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <mtrA_init+0xc8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002064:	ee07 2a90 	vmov	s15, r2
 8002068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800206c:	edc3 7a05 	vstr	s15, [r3, #20]
	motorAPID->Kd = Kd;
 8002070:	4b07      	ldr	r3, [pc, #28]	; (8002090 <mtrA_init+0xc8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	619a      	str	r2, [r3, #24]
	motorAPID->Ki = Ki;
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <mtrA_init+0xc8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	61da      	str	r2, [r3, #28]
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200003f8 	.word	0x200003f8
 800208c:	200003e4 	.word	0x200003e4
 8002090:	200003ec 	.word	0x200003ec

08002094 <mtrB_init>:

void mtrB_init(int16_t target, int16_t Kp, float Kd, float Ki, uint8_t reset_timer) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	ed87 0a02 	vstr	s0, [r7, #8]
 80020a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80020a4:	81fb      	strh	r3, [r7, #14]
 80020a6:	460b      	mov	r3, r1
 80020a8:	81bb      	strh	r3, [r7, #12]
 80020aa:	4613      	mov	r3, r2
 80020ac:	70fb      	strb	r3, [r7, #3]

	if (reset_timer)
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <mtrB_init+0x2a>
		__HAL_TIM_SET_COUNTER(htim3Ptr, 0);
 80020b4:	4b26      	ldr	r3, [pc, #152]	; (8002150 <mtrB_init+0xbc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24

	motorB->dir = DIR_FWD;
 80020be:	4b25      	ldr	r3, [pc, #148]	; (8002154 <mtrB_init+0xc0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
	motorB->pwmVal = 0;
 80020c6:	4b23      	ldr	r3, [pc, #140]	; (8002154 <mtrB_init+0xc0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2200      	movs	r2, #0
 80020cc:	605a      	str	r2, [r3, #4]

	motorBPID->count = (int16_t)__HAL_TIM_GET_COUNTER(htim3Ptr);       		// Counter (signed value)
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <mtrB_init+0xbc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <mtrB_init+0xc4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	b212      	sxth	r2, r2
 80020dc:	801a      	strh	r2, [r3, #0]
	//motorBPID->angle = 0;      			// angle of rotation, in degree resolution = 360/260
	//motorBPID->target_angle = target_angle; 		// target angle of rotation,
	motorBPID->target = target;
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <mtrB_init+0xc4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	89fa      	ldrh	r2, [r7, #14]
 80020e4:	805a      	strh	r2, [r3, #2]
	//motorBPID->error = motorBPID->target_angle - motorBPID->angle;           	// error between target and actual
	motorBPID->error = motorBPID->target - motorBPID->count;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <mtrB_init+0xc4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <mtrB_init+0xc4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <mtrB_init+0xc4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b212      	sxth	r2, r2
 8002104:	809a      	strh	r2, [r3, #4]
	motorBPID->error_area = 0;  		// area under error - to calculate I for PI implementation
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <mtrB_init+0xc4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
	motorBPID->error_old = 0; 			// to calculate D for PID control
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <mtrB_init+0xc4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
	motorBPID->millisOld = HAL_GetTick();			// to calculate I and D for PID control
 8002116:	f001 f8cb 	bl	80032b0 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <mtrB_init+0xc4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	611a      	str	r2, [r3, #16]
	motorBPID->Kp = Kp;
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <mtrB_init+0xc4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800212a:	ee07 2a90 	vmov	s15, r2
 800212e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002132:	edc3 7a05 	vstr	s15, [r3, #20]
	motorBPID->Kd = Kd;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <mtrB_init+0xc4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	619a      	str	r2, [r3, #24]
	motorBPID->Ki = Ki;
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <mtrB_init+0xc4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	61da      	str	r2, [r3, #28]
}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200003fc 	.word	0x200003fc
 8002154:	200003e8 	.word	0x200003e8
 8002158:	200003f0 	.word	0x200003f0

0800215c <mtrA_mov>:

void mtrA_mov(uint8_t direction, uint16_t speed) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	460a      	mov	r2, r1
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	4613      	mov	r3, r2
 800216a:	80bb      	strh	r3, [r7, #4]

	// Backward
	if (direction == DIR_BCK) {
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <mtrA_mov+0x2c>
		MOTOR_AIN1_Clr();
 8002172:	2200      	movs	r2, #0
 8002174:	2108      	movs	r1, #8
 8002176:	4811      	ldr	r0, [pc, #68]	; (80021bc <mtrA_mov+0x60>)
 8002178:	f001 fb78 	bl	800386c <HAL_GPIO_WritePin>
		MOTOR_AIN2_Set();
 800217c:	2201      	movs	r2, #1
 800217e:	2104      	movs	r1, #4
 8002180:	480e      	ldr	r0, [pc, #56]	; (80021bc <mtrA_mov+0x60>)
 8002182:	f001 fb73 	bl	800386c <HAL_GPIO_WritePin>
 8002186:	e009      	b.n	800219c <mtrA_mov+0x40>
	}
	// Forward
	else {
		MOTOR_AIN1_Set();
 8002188:	2201      	movs	r2, #1
 800218a:	2108      	movs	r1, #8
 800218c:	480b      	ldr	r0, [pc, #44]	; (80021bc <mtrA_mov+0x60>)
 800218e:	f001 fb6d 	bl	800386c <HAL_GPIO_WritePin>
		MOTOR_AIN2_Clr();
 8002192:	2200      	movs	r2, #0
 8002194:	2104      	movs	r1, #4
 8002196:	4809      	ldr	r0, [pc, #36]	; (80021bc <mtrA_mov+0x60>)
 8002198:	f001 fb68 	bl	800386c <HAL_GPIO_WritePin>
	}

	// Set speed
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 800219c:	88bb      	ldrh	r3, [r7, #4]
 800219e:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80021a2:	d302      	bcc.n	80021aa <mtrA_mov+0x4e>
 80021a4:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80021a8:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim8Ptr, PWMA_TIM_CH, speed);
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <mtrA_mov+0x64>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	88ba      	ldrh	r2, [r7, #4]
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40020000 	.word	0x40020000
 80021c0:	200003f4 	.word	0x200003f4

080021c4 <mtrB_mov>:

void mtrB_mov(uint8_t direction, uint16_t speed) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	460a      	mov	r2, r1
 80021ce:	71fb      	strb	r3, [r7, #7]
 80021d0:	4613      	mov	r3, r2
 80021d2:	80bb      	strh	r3, [r7, #4]

	// Backward
	if (direction == DIR_BCK) {
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10a      	bne.n	80021f0 <mtrB_mov+0x2c>
		MOTOR_BIN1_Clr();
 80021da:	2200      	movs	r2, #0
 80021dc:	2110      	movs	r1, #16
 80021de:	4811      	ldr	r0, [pc, #68]	; (8002224 <mtrB_mov+0x60>)
 80021e0:	f001 fb44 	bl	800386c <HAL_GPIO_WritePin>
		MOTOR_BIN2_Set();
 80021e4:	2201      	movs	r2, #1
 80021e6:	2120      	movs	r1, #32
 80021e8:	480e      	ldr	r0, [pc, #56]	; (8002224 <mtrB_mov+0x60>)
 80021ea:	f001 fb3f 	bl	800386c <HAL_GPIO_WritePin>
 80021ee:	e009      	b.n	8002204 <mtrB_mov+0x40>
	}
	// Forward
	else {
		MOTOR_BIN1_Set();
 80021f0:	2201      	movs	r2, #1
 80021f2:	2110      	movs	r1, #16
 80021f4:	480b      	ldr	r0, [pc, #44]	; (8002224 <mtrB_mov+0x60>)
 80021f6:	f001 fb39 	bl	800386c <HAL_GPIO_WritePin>
		MOTOR_BIN2_Clr();
 80021fa:	2200      	movs	r2, #0
 80021fc:	2120      	movs	r1, #32
 80021fe:	4809      	ldr	r0, [pc, #36]	; (8002224 <mtrB_mov+0x60>)
 8002200:	f001 fb34 	bl	800386c <HAL_GPIO_WritePin>
	}

	// Set speed
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 8002204:	88bb      	ldrh	r3, [r7, #4]
 8002206:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800220a:	d302      	bcc.n	8002212 <mtrB_mov+0x4e>
 800220c:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002210:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim8Ptr, PWMB_TIM_CH, speed);
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <mtrB_mov+0x64>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	88ba      	ldrh	r2, [r7, #4]
 800221a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40020000 	.word	0x40020000
 8002228:	200003f4 	.word	0x200003f4

0800222c <mtr_mov>:

void mtr_mov(MotorData* motor) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	if (motor == motorA) {
 8002234:	4b10      	ldr	r3, [pc, #64]	; (8002278 <mtr_mov+0x4c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	429a      	cmp	r2, r3
 800223c:	d109      	bne.n	8002252 <mtr_mov+0x26>
		mtrA_mov(motor->dir, motor->pwmVal);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	b29b      	uxth	r3, r3
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f7ff ff86 	bl	800215c <mtrA_mov>
	}
	else if (motor == motorB) {
		mtrB_mov(motor->dir, motor->pwmVal);
	}
}
 8002250:	e00d      	b.n	800226e <mtr_mov+0x42>
	else if (motor == motorB) {
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <mtr_mov+0x50>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	d108      	bne.n	800226e <mtr_mov+0x42>
		mtrB_mov(motor->dir, motor->pwmVal);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	b29b      	uxth	r3, r3
 8002266:	4619      	mov	r1, r3
 8002268:	4610      	mov	r0, r2
 800226a:	f7ff ffab 	bl	80021c4 <mtrB_mov>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200003e4 	.word	0x200003e4
 800227c:	200003e8 	.word	0x200003e8

08002280 <mtr_stop>:

void mtr_stop() {
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	mtrA_mov(DIR_FWD, 0);
 8002284:	2100      	movs	r1, #0
 8002286:	2001      	movs	r0, #1
 8002288:	f7ff ff68 	bl	800215c <mtrA_mov>
	mtrB_mov(DIR_FWD, 0);
 800228c:	2100      	movs	r1, #0
 800228e:	2001      	movs	r0, #1
 8002290:	f7ff ff98 	bl	80021c4 <mtrB_mov>
	turnServo(STRAIGHT);
 8002294:	2001      	movs	r0, #1
 8002296:	f000 fc69 	bl	8002b6c <turnServo>
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <mtr_mov_cnt>:

void mtr_mov_cnt(int target_A, int target_B) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
	mtrA_init((int16_t)target_A, 1.2, 0.05, 0.0001, 1);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	2201      	movs	r2, #1
 80022b0:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8002430 <mtr_mov_cnt+0x190>
 80022b4:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8002434 <mtr_mov_cnt+0x194>
 80022b8:	2101      	movs	r1, #1
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fe84 	bl	8001fc8 <mtrA_init>
	mtrB_init((int16_t)target_B, 1.2, 0.05, 0.0001, 1);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b21b      	sxth	r3, r3
 80022c4:	2201      	movs	r2, #1
 80022c6:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8002430 <mtr_mov_cnt+0x190>
 80022ca:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8002434 <mtr_mov_cnt+0x194>
 80022ce:	2101      	movs	r1, #1
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fedf 	bl	8002094 <mtrB_init>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 80022d6:	e00f      	b.n	80022f8 <mtr_mov_cnt+0x58>
		PID_Control(motorA, motorAPID);
 80022d8:	4b57      	ldr	r3, [pc, #348]	; (8002438 <mtr_mov_cnt+0x198>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a57      	ldr	r2, [pc, #348]	; (800243c <mtr_mov_cnt+0x19c>)
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f8d6 	bl	8002494 <PID_Control>
		PID_Control(motorB, motorBPID);
 80022e8:	4b55      	ldr	r3, [pc, #340]	; (8002440 <mtr_mov_cnt+0x1a0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a55      	ldr	r2, [pc, #340]	; (8002444 <mtr_mov_cnt+0x1a4>)
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f8ce 	bl	8002494 <PID_Control>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 80022f8:	4b50      	ldr	r3, [pc, #320]	; (800243c <mtr_mov_cnt+0x19c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	bfb8      	it	lt
 8002304:	425b      	neglt	r3, r3
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b32      	cmp	r3, #50	; 0x32
 800230a:	d8e5      	bhi.n	80022d8 <mtr_mov_cnt+0x38>
 800230c:	4b4d      	ldr	r3, [pc, #308]	; (8002444 <mtr_mov_cnt+0x1a4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	bfb8      	it	lt
 8002318:	425b      	neglt	r3, r3
 800231a:	b29b      	uxth	r3, r3
 800231c:	2b32      	cmp	r3, #50	; 0x32
 800231e:	d8db      	bhi.n	80022d8 <mtr_mov_cnt+0x38>
	}
	mtr_stop();
 8002320:	f7ff ffae 	bl	8002280 <mtr_stop>
	osDelay(700);
 8002324:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002328:	f004 f93c 	bl	80065a4 <osDelay>
	mtrA_init((int16_t)target_A, 0.3, 0, 0.0001, 0);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	b21b      	sxth	r3, r3
 8002330:	2200      	movs	r2, #0
 8002332:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8002430 <mtr_mov_cnt+0x190>
 8002336:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8002448 <mtr_mov_cnt+0x1a8>
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fe43 	bl	8001fc8 <mtrA_init>
	mtrB_init((int16_t)target_B, 0.3, 0, 0.0001, 0);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b21b      	sxth	r3, r3
 8002346:	2200      	movs	r2, #0
 8002348:	eddf 0a39 	vldr	s1, [pc, #228]	; 8002430 <mtr_mov_cnt+0x190>
 800234c:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8002448 <mtr_mov_cnt+0x1a8>
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fe9e 	bl	8002094 <mtrB_init>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 8002358:	e00f      	b.n	800237a <mtr_mov_cnt+0xda>
		PID_Control(motorA, motorAPID);
 800235a:	4b37      	ldr	r3, [pc, #220]	; (8002438 <mtr_mov_cnt+0x198>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a37      	ldr	r2, [pc, #220]	; (800243c <mtr_mov_cnt+0x19c>)
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f000 f895 	bl	8002494 <PID_Control>
		PID_Control(motorB, motorBPID);
 800236a:	4b35      	ldr	r3, [pc, #212]	; (8002440 <mtr_mov_cnt+0x1a0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a35      	ldr	r2, [pc, #212]	; (8002444 <mtr_mov_cnt+0x1a4>)
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f88d 	bl	8002494 <PID_Control>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 800237a:	4b30      	ldr	r3, [pc, #192]	; (800243c <mtr_mov_cnt+0x19c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	bfb8      	it	lt
 8002386:	425b      	neglt	r3, r3
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b32      	cmp	r3, #50	; 0x32
 800238c:	d8e5      	bhi.n	800235a <mtr_mov_cnt+0xba>
 800238e:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <mtr_mov_cnt+0x1a4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	bfb8      	it	lt
 800239a:	425b      	neglt	r3, r3
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b32      	cmp	r3, #50	; 0x32
 80023a0:	d8db      	bhi.n	800235a <mtr_mov_cnt+0xba>
	}
	mtr_stop();
 80023a2:	f7ff ff6d 	bl	8002280 <mtr_stop>
	osDelay(500);
 80023a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023aa:	f004 f8fb 	bl	80065a4 <osDelay>
	mtrA_init((int16_t)target_A, 0.1, 0, 0.0001, 0);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	2200      	movs	r2, #0
 80023b4:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8002430 <mtr_mov_cnt+0x190>
 80023b8:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8002448 <mtr_mov_cnt+0x1a8>
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fe02 	bl	8001fc8 <mtrA_init>
	mtrB_init((int16_t)target_B, 0.1, 0, 0.0001, 0);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	2200      	movs	r2, #0
 80023ca:	eddf 0a19 	vldr	s1, [pc, #100]	; 8002430 <mtr_mov_cnt+0x190>
 80023ce:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8002448 <mtr_mov_cnt+0x1a8>
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fe5d 	bl	8002094 <mtrB_init>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 80023da:	e00f      	b.n	80023fc <mtr_mov_cnt+0x15c>
		PID_Control(motorA, motorAPID);
 80023dc:	4b16      	ldr	r3, [pc, #88]	; (8002438 <mtr_mov_cnt+0x198>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a16      	ldr	r2, [pc, #88]	; (800243c <mtr_mov_cnt+0x19c>)
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f854 	bl	8002494 <PID_Control>
		PID_Control(motorB, motorBPID);
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <mtr_mov_cnt+0x1a0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a14      	ldr	r2, [pc, #80]	; (8002444 <mtr_mov_cnt+0x1a4>)
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f84c 	bl	8002494 <PID_Control>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <mtr_mov_cnt+0x19c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	bfb8      	it	lt
 8002408:	425b      	neglt	r3, r3
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b32      	cmp	r3, #50	; 0x32
 800240e:	d8e5      	bhi.n	80023dc <mtr_mov_cnt+0x13c>
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <mtr_mov_cnt+0x1a4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	bfb8      	it	lt
 800241c:	425b      	neglt	r3, r3
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b32      	cmp	r3, #50	; 0x32
 8002422:	d8db      	bhi.n	80023dc <mtr_mov_cnt+0x13c>
	}
	mtr_stop();
 8002424:	f7ff ff2c 	bl	8002280 <mtr_stop>
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	38d1b717 	.word	0x38d1b717
 8002434:	3d4ccccd 	.word	0x3d4ccccd
 8002438:	200003e4 	.word	0x200003e4
 800243c:	200003ec 	.word	0x200003ec
 8002440:	200003e8 	.word	0x200003e8
 8002444:	200003f0 	.word	0x200003f0
 8002448:	00000000 	.word	0x00000000

0800244c <mtr_mov_cm>:

void mtr_mov_cm(float cm_A, float cm_B) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	ed87 0a01 	vstr	s0, [r7, #4]
 8002456:	edc7 0a00 	vstr	s1, [r7]
	mtr_mov_cnt((int)(cm_A * CNT_PER_CM), (int)(cm_B * CNT_PER_CM));
 800245a:	edd7 7a01 	vldr	s15, [r7, #4]
 800245e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002490 <mtr_mov_cm+0x44>
 8002462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002466:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800246a:	edd7 7a00 	vldr	s15, [r7]
 800246e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002490 <mtr_mov_cm+0x44>
 8002472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800247a:	ee17 1a90 	vmov	r1, s15
 800247e:	ee16 0a90 	vmov	r0, s13
 8002482:	f7ff ff0d 	bl	80022a0 <mtr_mov_cnt>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	42928831 	.word	0x42928831

08002494 <PID_Control>:
        motor->pwmVal = (int)(motorPID->error * motorPID->Kp + motorPID->error_area * motorPID->Ki + error_rate * motorPID->Kd);  // PID

        mtr_mov(motor);
	} // if loop
}*/
void PID_Control(MotorData* motor, MotorPIDData* motorPID) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
	  //Control Loop
	if (abs(motorPID->error)>MAX_PID_ERR) { //more than 100  difference
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bfb8      	it	lt
 80024a8:	425b      	neglt	r3, r3
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b32      	cmp	r3, #50	; 0x32
 80024ae:	f240 8095 	bls.w	80025dc <PID_Control+0x148>
  	    motorPID->error = motorPID->target - motorPID->count;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	809a      	strh	r2, [r3, #4]

  	    if (motorPID->error > 0)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	dd03      	ble.n	80024de <PID_Control+0x4a>
        	motor->dir = DIR_FWD;	// Forward
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e002      	b.n	80024e4 <PID_Control+0x50>
        else
        	motor->dir = DIR_BCK;	// Backward
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]

        int32_t millisNow = HAL_GetTick();
 80024e4:	f000 fee4 	bl	80032b0 <HAL_GetTick>
 80024e8:	4603      	mov	r3, r0
 80024ea:	617b      	str	r3, [r7, #20]
        int32_t dt = (millisNow - motorPID->millisOld); // time elapsed in millisecond
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	613b      	str	r3, [r7, #16]
        motorPID->millisOld = millisNow; // store the current time for next round
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	611a      	str	r2, [r3, #16]

        motorPID->error_area = motorPID->error_area + motorPID->error * dt; // area under error for Ki
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002506:	4619      	mov	r1, r3
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	441a      	add	r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	609a      	str	r2, [r3, #8]

        int32_t error_change = motorPID->error - motorPID->error_old; // change in error
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800251a:	461a      	mov	r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	60fb      	str	r3, [r7, #12]
        motorPID->error_old = motorPID->error; //store the error for next round
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800252a:	461a      	mov	r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	60da      	str	r2, [r3, #12]
        float error_rate = (float)error_change / dt; // for Kd
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	ee07 3a90 	vmov	s15, r3
 8002540:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002548:	edc7 7a02 	vstr	s15, [r7, #8]

        motor->pwmVal = abs((int32_t)(motorPID->error * motorPID->Kp + motorPID->error_area * motorPID->Ki + error_rate * motorPID->Kd)) / 2;  // PID
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002560:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	ee07 3a90 	vmov	s15, r3
 800256c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	edd3 7a07 	vldr	s15, [r3, #28]
 8002576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800257a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	edd3 6a06 	vldr	s13, [r3, #24]
 8002584:	edd7 7a02 	vldr	s15, [r7, #8]
 8002588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800258c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002594:	ee17 3a90 	vmov	r3, s15
 8002598:	2b00      	cmp	r3, #0
 800259a:	bfb8      	it	lt
 800259c:	425b      	neglt	r3, r3
 800259e:	0fda      	lsrs	r2, r3, #31
 80025a0:	4413      	add	r3, r2
 80025a2:	105b      	asrs	r3, r3, #1
 80025a4:	461a      	mov	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	605a      	str	r2, [r3, #4]
        osDelay(10);
 80025aa:	200a      	movs	r0, #10
 80025ac:	f003 fffa 	bl	80065a4 <osDelay>
        if (motor->pwmVal > MAX_SPEED)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80025b8:	d303      	bcc.n	80025c2 <PID_Control+0x12e>
        	motor->pwmVal = MAX_SPEED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80025c0:	605a      	str	r2, [r3, #4]
        if (motor->pwmVal < MIN_SPEED)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80025ca:	d203      	bcs.n	80025d4 <PID_Control+0x140>
        	motor-> pwmVal = MIN_SPEED;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80025d2:	605a      	str	r2, [r3, #4]

        mtr_mov(motor);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fe29 	bl	800222c <mtr_mov>
	else {
		motor->dir = DIR_FWD;
		motor->pwmVal = 0;
		mtr_mov(motor);
	}
}
 80025da:	e008      	b.n	80025ee <PID_Control+0x15a>
		motor->dir = DIR_FWD;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
		motor->pwmVal = 0;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	605a      	str	r2, [r3, #4]
		mtr_mov(motor);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fe1f 	bl	800222c <mtr_mov>
}
 80025ee:	bf00      	nop
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <turn>:
		}
	}
	mtr_stop();
}*/

void turn(float target_ori, float* orientation) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002602:	6038      	str	r0, [r7, #0]
	//osSemaphoreWait(*ori_semaphoreHandlePtr, osWaitForever);
	float turning_angle = target_ori - (*orientation);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	ed97 7a01 	vldr	s14, [r7, #4]
 800260e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002612:	edc7 7a07 	vstr	s15, [r7, #28]
	//osSemaphoreRelease(*ori_semaphoreHandlePtr);
	if (abs(turning_angle) < MAX_ORI_ERR)		// Too small, turn may not be accurate
 8002616:	edd7 7a07 	vldr	s15, [r7, #28]
 800261a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800261e:	ee17 3a90 	vmov	r3, s15
 8002622:	f113 0f02 	cmn.w	r3, #2
 8002626:	db08      	blt.n	800263a <turn+0x42>
 8002628:	edd7 7a07 	vldr	s15, [r7, #28]
 800262c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002630:	ee17 3a90 	vmov	r3, s15
 8002634:	2b02      	cmp	r3, #2
 8002636:	f340 8102 	ble.w	800283e <turn+0x246>
		return;
	if (turning_angle < 0)
 800263a:	edd7 7a07 	vldr	s15, [r7, #28]
 800263e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002646:	d507      	bpl.n	8002658 <turn+0x60>
		turning_angle += 360;
 8002648:	edd7 7a07 	vldr	s15, [r7, #28]
 800264c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002848 <turn+0x250>
 8002650:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002654:	edc7 7a07 	vstr	s15, [r7, #28]

	uint8_t near_0 = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	76fb      	strb	r3, [r7, #27]
	if ((target_ori < MAX_ORI_ERR) || (target_ori > 360 - MAX_ORI_ERR)) {
 800265c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002660:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	d408      	bmi.n	8002680 <turn+0x88>
 800266e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002672:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800284c <turn+0x254>
 8002676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	dd01      	ble.n	8002684 <turn+0x8c>
		near_0 = 1;
 8002680:	2301      	movs	r3, #1
 8002682:	76fb      	strb	r3, [r7, #27]
	}

	uint8_t mtr_dir = 1;	// 0: stop, 1: fwd, 2: bck
 8002684:	2301      	movs	r3, #1
 8002686:	76bb      	strb	r3, [r7, #26]

	while (mtr_dir) {
 8002688:	e0d2      	b.n	8002830 <turn+0x238>
		if (turning_angle <= 180) {	// Turn left
 800268a:	edd7 7a07 	vldr	s15, [r7, #28]
 800268e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002850 <turn+0x258>
 8002692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269a:	d822      	bhi.n	80026e2 <turn+0xea>
			if (mtr_dir == 1) {
 800269c:	7ebb      	ldrb	r3, [r7, #26]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d10f      	bne.n	80026c2 <turn+0xca>
				turnServo(LEFT);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f000 fa62 	bl	8002b6c <turnServo>
				mtrA_mov(DIR_FWD, 1200);
 80026a8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80026ac:	2001      	movs	r0, #1
 80026ae:	f7ff fd55 	bl	800215c <mtrA_mov>
				mtrB_mov(DIR_FWD, 1200);
 80026b2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7ff fd84 	bl	80021c4 <mtrB_mov>
				mtr_dir = 2;
 80026bc:	2302      	movs	r3, #2
 80026be:	76bb      	strb	r3, [r7, #26]
 80026c0:	e031      	b.n	8002726 <turn+0x12e>
			}
			else {
				turnServo(RIGHT);
 80026c2:	2002      	movs	r0, #2
 80026c4:	f000 fa52 	bl	8002b6c <turnServo>
				mtrA_mov(DIR_BCK, 1200);
 80026c8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7ff fd45 	bl	800215c <mtrA_mov>
				mtrB_mov(DIR_BCK, 1200);
 80026d2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7ff fd74 	bl	80021c4 <mtrB_mov>
				mtr_dir = 1;
 80026dc:	2301      	movs	r3, #1
 80026de:	76bb      	strb	r3, [r7, #26]
 80026e0:	e021      	b.n	8002726 <turn+0x12e>
			}
		}
		else {
			if (mtr_dir == 1) {
 80026e2:	7ebb      	ldrb	r3, [r7, #26]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d10f      	bne.n	8002708 <turn+0x110>
				turnServo(RIGHT);
 80026e8:	2002      	movs	r0, #2
 80026ea:	f000 fa3f 	bl	8002b6c <turnServo>
				mtrA_mov(DIR_FWD, 1200);
 80026ee:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80026f2:	2001      	movs	r0, #1
 80026f4:	f7ff fd32 	bl	800215c <mtrA_mov>
				mtrB_mov(DIR_FWD, 1200);
 80026f8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80026fc:	2001      	movs	r0, #1
 80026fe:	f7ff fd61 	bl	80021c4 <mtrB_mov>
				mtr_dir = 2;
 8002702:	2302      	movs	r3, #2
 8002704:	76bb      	strb	r3, [r7, #26]
 8002706:	e00e      	b.n	8002726 <turn+0x12e>
			}
			else {
				turnServo(LEFT);
 8002708:	2000      	movs	r0, #0
 800270a:	f000 fa2f 	bl	8002b6c <turnServo>
				mtrA_mov(DIR_BCK, 1200);
 800270e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002712:	2000      	movs	r0, #0
 8002714:	f7ff fd22 	bl	800215c <mtrA_mov>
				mtrB_mov(DIR_BCK, 1200);
 8002718:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800271c:	2000      	movs	r0, #0
 800271e:	f7ff fd51 	bl	80021c4 <mtrB_mov>
				mtr_dir = 1;
 8002722:	2301      	movs	r3, #1
 8002724:	76bb      	strb	r3, [r7, #26]
			}
		}
		if (!near_0) {
 8002726:	7efb      	ldrb	r3, [r7, #27]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d12a      	bne.n	8002782 <turn+0x18a>
			for (int i = 0; i < 100; i++) {
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	e023      	b.n	800277a <turn+0x182>
				if (abs((*orientation) - target_ori) < MAX_ORI_ERR) {
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	ed93 7a00 	vldr	s14, [r3]
 8002738:	edd7 7a01 	vldr	s15, [r7, #4]
 800273c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002744:	ee17 3a90 	vmov	r3, s15
 8002748:	f113 0f02 	cmn.w	r3, #2
 800274c:	db0f      	blt.n	800276e <turn+0x176>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	ed93 7a00 	vldr	s14, [r3]
 8002754:	edd7 7a01 	vldr	s15, [r7, #4]
 8002758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002760:	ee17 3a90 	vmov	r3, s15
 8002764:	2b02      	cmp	r3, #2
 8002766:	dc02      	bgt.n	800276e <turn+0x176>
					mtr_dir = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	76bb      	strb	r3, [r7, #26]
					break;
 800276c:	e05e      	b.n	800282c <turn+0x234>
				}
				osDelay(5);
 800276e:	2005      	movs	r0, #5
 8002770:	f003 ff18 	bl	80065a4 <osDelay>
			for (int i = 0; i < 100; i++) {
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	3301      	adds	r3, #1
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b63      	cmp	r3, #99	; 0x63
 800277e:	ddd8      	ble.n	8002732 <turn+0x13a>
 8002780:	e054      	b.n	800282c <turn+0x234>
			}
		}
		else {
			float bound_lo, bound_hi;
			if (target_ori > 350) {
 8002782:	edd7 7a01 	vldr	s15, [r7, #4]
 8002786:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002854 <turn+0x25c>
 800278a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002792:	dd14      	ble.n	80027be <turn+0x1c6>
				bound_lo = target_ori - MAX_ORI_ERR;
 8002794:	edd7 7a01 	vldr	s15, [r7, #4]
 8002798:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800279c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027a0:	edc7 7a04 	vstr	s15, [r7, #16]
				bound_hi = target_ori + MAX_ORI_ERR - 360;
 80027a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80027a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80027ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027b0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002848 <turn+0x250>
 80027b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027b8:	edc7 7a03 	vstr	s15, [r7, #12]
 80027bc:	e013      	b.n	80027e6 <turn+0x1ee>
			}
			else {
				bound_lo = target_ori - MAX_ORI_ERR + 360;
 80027be:	edd7 7a01 	vldr	s15, [r7, #4]
 80027c2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80027c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027ca:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002848 <turn+0x250>
 80027ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027d2:	edc7 7a04 	vstr	s15, [r7, #16]
				bound_hi = target_ori + MAX_ORI_ERR;
 80027d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80027da:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80027de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027e2:	edc7 7a03 	vstr	s15, [r7, #12]
			}
			for (int i = 0; i < 100; i++) {
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	e01c      	b.n	8002826 <turn+0x22e>
				if (((*orientation) > bound_lo) || ((*orientation) < bound_hi)) {
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80027f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fe:	d409      	bmi.n	8002814 <turn+0x21c>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	ed97 7a03 	vldr	s14, [r7, #12]
 800280a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002812:	dd02      	ble.n	800281a <turn+0x222>
					mtr_dir = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	76bb      	strb	r3, [r7, #26]
					break;
 8002818:	e008      	b.n	800282c <turn+0x234>
				}
				osDelay(5);
 800281a:	2005      	movs	r0, #5
 800281c:	f003 fec2 	bl	80065a4 <osDelay>
			for (int i = 0; i < 100; i++) {
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	3301      	adds	r3, #1
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b63      	cmp	r3, #99	; 0x63
 800282a:	dddf      	ble.n	80027ec <turn+0x1f4>
			}
		}
		mtr_stop();
 800282c:	f7ff fd28 	bl	8002280 <mtr_stop>
	while (mtr_dir) {
 8002830:	7ebb      	ldrb	r3, [r7, #26]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f47f af29 	bne.w	800268a <turn+0x92>
	}
	mtr_stop();
 8002838:	f7ff fd22 	bl	8002280 <mtr_stop>
 800283c:	e000      	b.n	8002840 <turn+0x248>
		return;
 800283e:	bf00      	nop
}
 8002840:	3720      	adds	r7, #32
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	43b40000 	.word	0x43b40000
 800284c:	43b28000 	.word	0x43b28000
 8002850:	43340000 	.word	0x43340000
 8002854:	43af0000 	.word	0x43af0000

08002858 <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800285e:	2300      	movs	r3, #0
 8002860:	71fb      	strb	r3, [r7, #7]
 8002862:	e026      	b.n	80028b2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	3b50      	subs	r3, #80	; 0x50
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f000 f82b 	bl	80028c8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8002872:	2100      	movs	r1, #0
 8002874:	2000      	movs	r0, #0
 8002876:	f000 f827 	bl	80028c8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800287a:	2100      	movs	r1, #0
 800287c:	2010      	movs	r0, #16
 800287e:	f000 f823 	bl	80028c8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8002882:	2300      	movs	r3, #0
 8002884:	71bb      	strb	r3, [r7, #6]
 8002886:	e00d      	b.n	80028a4 <OLED_Refresh_Gram+0x4c>
 8002888:	79ba      	ldrb	r2, [r7, #6]
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	490d      	ldr	r1, [pc, #52]	; (80028c4 <OLED_Refresh_Gram+0x6c>)
 800288e:	00d2      	lsls	r2, r2, #3
 8002890:	440a      	add	r2, r1
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2101      	movs	r1, #1
 8002898:	4618      	mov	r0, r3
 800289a:	f000 f815 	bl	80028c8 <OLED_WR_Byte>
 800289e:	79bb      	ldrb	r3, [r7, #6]
 80028a0:	3301      	adds	r3, #1
 80028a2:	71bb      	strb	r3, [r7, #6]
 80028a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	daed      	bge.n	8002888 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	3301      	adds	r3, #1
 80028b0:	71fb      	strb	r3, [r7, #7]
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b07      	cmp	r3, #7
 80028b6:	d9d5      	bls.n	8002864 <OLED_Refresh_Gram+0xc>
	}   
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000404 	.word	0x20000404

080028c8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	460a      	mov	r2, r1
 80028d2:	71fb      	strb	r3, [r7, #7]
 80028d4:	4613      	mov	r3, r2
 80028d6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80028d8:	79bb      	ldrb	r3, [r7, #6]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80028de:	2201      	movs	r2, #1
 80028e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028e4:	481c      	ldr	r0, [pc, #112]	; (8002958 <OLED_WR_Byte+0x90>)
 80028e6:	f000 ffc1 	bl	800386c <HAL_GPIO_WritePin>
 80028ea:	e005      	b.n	80028f8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80028ec:	2200      	movs	r2, #0
 80028ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028f2:	4819      	ldr	r0, [pc, #100]	; (8002958 <OLED_WR_Byte+0x90>)
 80028f4:	f000 ffba 	bl	800386c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	73fb      	strb	r3, [r7, #15]
 80028fc:	e01e      	b.n	800293c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80028fe:	2200      	movs	r2, #0
 8002900:	2120      	movs	r1, #32
 8002902:	4815      	ldr	r0, [pc, #84]	; (8002958 <OLED_WR_Byte+0x90>)
 8002904:	f000 ffb2 	bl	800386c <HAL_GPIO_WritePin>
		if(dat&0x80)
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	2b00      	cmp	r3, #0
 800290e:	da05      	bge.n	800291c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8002910:	2201      	movs	r2, #1
 8002912:	2140      	movs	r1, #64	; 0x40
 8002914:	4810      	ldr	r0, [pc, #64]	; (8002958 <OLED_WR_Byte+0x90>)
 8002916:	f000 ffa9 	bl	800386c <HAL_GPIO_WritePin>
 800291a:	e004      	b.n	8002926 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800291c:	2200      	movs	r2, #0
 800291e:	2140      	movs	r1, #64	; 0x40
 8002920:	480d      	ldr	r0, [pc, #52]	; (8002958 <OLED_WR_Byte+0x90>)
 8002922:	f000 ffa3 	bl	800386c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8002926:	2201      	movs	r2, #1
 8002928:	2120      	movs	r1, #32
 800292a:	480b      	ldr	r0, [pc, #44]	; (8002958 <OLED_WR_Byte+0x90>)
 800292c:	f000 ff9e 	bl	800386c <HAL_GPIO_WritePin>
		dat<<=1;   
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	3301      	adds	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b07      	cmp	r3, #7
 8002940:	d9dd      	bls.n	80028fe <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8002942:	2201      	movs	r2, #1
 8002944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002948:	4803      	ldr	r0, [pc, #12]	; (8002958 <OLED_WR_Byte+0x90>)
 800294a:	f000 ff8f 	bl	800386c <HAL_GPIO_WritePin>
} 
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000

0800295c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8002962:	2300      	movs	r3, #0
 8002964:	71fb      	strb	r3, [r7, #7]
 8002966:	e014      	b.n	8002992 <OLED_Clear+0x36>
 8002968:	2300      	movs	r3, #0
 800296a:	71bb      	strb	r3, [r7, #6]
 800296c:	e00a      	b.n	8002984 <OLED_Clear+0x28>
 800296e:	79ba      	ldrb	r2, [r7, #6]
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	490c      	ldr	r1, [pc, #48]	; (80029a4 <OLED_Clear+0x48>)
 8002974:	00d2      	lsls	r2, r2, #3
 8002976:	440a      	add	r2, r1
 8002978:	4413      	add	r3, r2
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	79bb      	ldrb	r3, [r7, #6]
 8002980:	3301      	adds	r3, #1
 8002982:	71bb      	strb	r3, [r7, #6]
 8002984:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002988:	2b00      	cmp	r3, #0
 800298a:	daf0      	bge.n	800296e <OLED_Clear+0x12>
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	3301      	adds	r3, #1
 8002990:	71fb      	strb	r3, [r7, #7]
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	2b07      	cmp	r3, #7
 8002996:	d9e7      	bls.n	8002968 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8002998:	f7ff ff5e 	bl	8002858 <OLED_Refresh_Gram>
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000404 	.word	0x20000404

080029a8 <OLED_Init>:
        p++;
    }  
}	 

void OLED_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80029ac:	f001 ff0e 	bl	80047cc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80029b0:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <OLED_Init+0x110>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	4a40      	ldr	r2, [pc, #256]	; (8002ab8 <OLED_Init+0x110>)
 80029b6:	f023 0301 	bic.w	r3, r3, #1
 80029ba:	6713      	str	r3, [r2, #112]	; 0x70
 80029bc:	4b3e      	ldr	r3, [pc, #248]	; (8002ab8 <OLED_Init+0x110>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4a3d      	ldr	r2, [pc, #244]	; (8002ab8 <OLED_Init+0x110>)
 80029c2:	f023 0304 	bic.w	r3, r3, #4
 80029c6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80029c8:	f001 ff14 	bl	80047f4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80029cc:	2200      	movs	r2, #0
 80029ce:	2180      	movs	r1, #128	; 0x80
 80029d0:	483a      	ldr	r0, [pc, #232]	; (8002abc <OLED_Init+0x114>)
 80029d2:	f000 ff4b 	bl	800386c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80029d6:	2064      	movs	r0, #100	; 0x64
 80029d8:	f000 fc76 	bl	80032c8 <HAL_Delay>
	OLED_RST_Set();
 80029dc:	2201      	movs	r2, #1
 80029de:	2180      	movs	r1, #128	; 0x80
 80029e0:	4836      	ldr	r0, [pc, #216]	; (8002abc <OLED_Init+0x114>)
 80029e2:	f000 ff43 	bl	800386c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80029e6:	2100      	movs	r1, #0
 80029e8:	20ae      	movs	r0, #174	; 0xae
 80029ea:	f7ff ff6d 	bl	80028c8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80029ee:	2100      	movs	r1, #0
 80029f0:	20d5      	movs	r0, #213	; 0xd5
 80029f2:	f7ff ff69 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80029f6:	2100      	movs	r1, #0
 80029f8:	2050      	movs	r0, #80	; 0x50
 80029fa:	f7ff ff65 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80029fe:	2100      	movs	r1, #0
 8002a00:	20a8      	movs	r0, #168	; 0xa8
 8002a02:	f7ff ff61 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8002a06:	2100      	movs	r1, #0
 8002a08:	203f      	movs	r0, #63	; 0x3f
 8002a0a:	f7ff ff5d 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8002a0e:	2100      	movs	r1, #0
 8002a10:	20d3      	movs	r0, #211	; 0xd3
 8002a12:	f7ff ff59 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8002a16:	2100      	movs	r1, #0
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7ff ff55 	bl	80028c8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8002a1e:	2100      	movs	r1, #0
 8002a20:	2040      	movs	r0, #64	; 0x40
 8002a22:	f7ff ff51 	bl	80028c8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8002a26:	2100      	movs	r1, #0
 8002a28:	208d      	movs	r0, #141	; 0x8d
 8002a2a:	f7ff ff4d 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8002a2e:	2100      	movs	r1, #0
 8002a30:	2014      	movs	r0, #20
 8002a32:	f7ff ff49 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8002a36:	2100      	movs	r1, #0
 8002a38:	2020      	movs	r0, #32
 8002a3a:	f7ff ff45 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8002a3e:	2100      	movs	r1, #0
 8002a40:	2002      	movs	r0, #2
 8002a42:	f7ff ff41 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8002a46:	2100      	movs	r1, #0
 8002a48:	20a1      	movs	r0, #161	; 0xa1
 8002a4a:	f7ff ff3d 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8002a4e:	2100      	movs	r1, #0
 8002a50:	20c0      	movs	r0, #192	; 0xc0
 8002a52:	f7ff ff39 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8002a56:	2100      	movs	r1, #0
 8002a58:	20da      	movs	r0, #218	; 0xda
 8002a5a:	f7ff ff35 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2012      	movs	r0, #18
 8002a62:	f7ff ff31 	bl	80028c8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8002a66:	2100      	movs	r1, #0
 8002a68:	2081      	movs	r0, #129	; 0x81
 8002a6a:	f7ff ff2d 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8002a6e:	2100      	movs	r1, #0
 8002a70:	20ef      	movs	r0, #239	; 0xef
 8002a72:	f7ff ff29 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8002a76:	2100      	movs	r1, #0
 8002a78:	20d9      	movs	r0, #217	; 0xd9
 8002a7a:	f7ff ff25 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8002a7e:	2100      	movs	r1, #0
 8002a80:	20f1      	movs	r0, #241	; 0xf1
 8002a82:	f7ff ff21 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8002a86:	2100      	movs	r1, #0
 8002a88:	20db      	movs	r0, #219	; 0xdb
 8002a8a:	f7ff ff1d 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8002a8e:	2100      	movs	r1, #0
 8002a90:	2030      	movs	r0, #48	; 0x30
 8002a92:	f7ff ff19 	bl	80028c8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8002a96:	2100      	movs	r1, #0
 8002a98:	20a4      	movs	r0, #164	; 0xa4
 8002a9a:	f7ff ff15 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	20a6      	movs	r0, #166	; 0xa6
 8002aa2:	f7ff ff11 	bl	80028c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	20af      	movs	r0, #175	; 0xaf
 8002aaa:	f7ff ff0d 	bl	80028c8 <OLED_WR_Byte>
	OLED_Clear(); 
 8002aae:	f7ff ff55 	bl	800295c <OLED_Clear>
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40021000 	.word	0x40021000

08002ac0 <turnLeft>:
#include "cmsis_os.h"

uint8_t cur_direction; // 0 as left, 1 as straight, 2 as right
TIM_HandleTypeDef* htim1Ptr;

void turnLeft(){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
	htim1Ptr->Instance->CCR4=1000;
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <turnLeft+0x24>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(700);
 8002ad0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002ad4:	f003 fd66 	bl	80065a4 <osDelay>
	cur_direction = LEFT;
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <turnLeft+0x28>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000808 	.word	0x20000808
 8002ae8:	20000804 	.word	0x20000804

08002aec <turnRight>:
void turnRight(){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
	htim1Ptr->Instance->CCR4=2200;
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <turnRight+0x24>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f640 0298 	movw	r2, #2200	; 0x898
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(700);
 8002afc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002b00:	f003 fd50 	bl	80065a4 <osDelay>
	cur_direction = RIGHT;
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <turnRight+0x28>)
 8002b06:	2202      	movs	r2, #2
 8002b08:	701a      	strb	r2, [r3, #0]
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000808 	.word	0x20000808
 8002b14:	20000804 	.word	0x20000804

08002b18 <turnStraight>:
void turnStraight(){
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
	if(cur_direction == LEFT){
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <turnStraight+0x4c>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <turnStraight+0x22>
		htim1Ptr->Instance->CCR4=1548;
 8002b24:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <turnStraight+0x50>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f240 620c 	movw	r2, #1548	; 0x60c
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(700);
 8002b30:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002b34:	f003 fd36 	bl	80065a4 <osDelay>
 8002b38:	e00d      	b.n	8002b56 <turnStraight+0x3e>
	}else if(cur_direction == RIGHT){
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <turnStraight+0x4c>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d10d      	bne.n	8002b5e <turnStraight+0x46>
		htim1Ptr->Instance->CCR4=1457;
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <turnStraight+0x50>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f240 52b1 	movw	r2, #1457	; 0x5b1
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(700);
 8002b4e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002b52:	f003 fd27 	bl	80065a4 <osDelay>
	}else{
		return;
	}
	cur_direction = STRAIGHT;
 8002b56:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <turnStraight+0x4c>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e000      	b.n	8002b60 <turnStraight+0x48>
		return;
 8002b5e:	bf00      	nop
}
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000804 	.word	0x20000804
 8002b68:	20000808 	.word	0x20000808

08002b6c <turnServo>:
void turnServo(uint8_t target){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
	if(target == LEFT){
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <turnServo+0x16>
		turnLeft();
 8002b7c:	f7ff ffa0 	bl	8002ac0 <turnLeft>
	}else if(target == STRAIGHT){
		turnStraight();
	}else{
		turnRight();
	}
}
 8002b80:	e007      	b.n	8002b92 <turnServo+0x26>
	}else if(target == STRAIGHT){
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d102      	bne.n	8002b8e <turnServo+0x22>
		turnStraight();
 8002b88:	f7ff ffc6 	bl	8002b18 <turnStraight>
}
 8002b8c:	e001      	b.n	8002b92 <turnServo+0x26>
		turnRight();
 8002b8e:	f7ff ffad 	bl	8002aec <turnRight>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <servoInit>:
void servoInit(TIM_HandleTypeDef* htim){
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	htim1Ptr = htim;
 8002ba4:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <servoInit+0x60>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8002baa:	210c      	movs	r1, #12
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f002 fb21 	bl	80051f4 <HAL_TIM_PWM_Start>
	cur_direction = 1;
 8002bb2:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <servoInit+0x64>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
	htim1Ptr->Instance->CCR4=2200;
 8002bb8:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <servoInit+0x60>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f640 0298 	movw	r2, #2200	; 0x898
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(700);
 8002bc4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002bc8:	f003 fcec 	bl	80065a4 <osDelay>
	htim1Ptr->Instance->CCR4=1000;
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <servoInit+0x60>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(700);
 8002bd8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002bdc:	f003 fce2 	bl	80065a4 <osDelay>
	htim1Ptr->Instance->CCR4=1548;
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <servoInit+0x60>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f240 620c 	movw	r2, #1548	; 0x60c
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(700);
 8002bec:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002bf0:	f003 fcd8 	bl	80065a4 <osDelay>

}
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000808 	.word	0x20000808
 8002c00:	20000804 	.word	0x20000804

08002c04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_MspInit+0x54>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4a11      	ldr	r2, [pc, #68]	; (8002c58 <HAL_MspInit+0x54>)
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <HAL_MspInit+0x54>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	607b      	str	r3, [r7, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_MspInit+0x54>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <HAL_MspInit+0x54>)
 8002c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <HAL_MspInit+0x54>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	210f      	movs	r1, #15
 8002c46:	f06f 0001 	mvn.w	r0, #1
 8002c4a:	f000 fc3c 	bl	80034c6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800

08002c5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	; 0x28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c64:	f107 0314 	add.w	r3, r7, #20
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <HAL_I2C_MspInit+0x84>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d12c      	bne.n	8002cd8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <HAL_I2C_MspInit+0x88>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a17      	ldr	r2, [pc, #92]	; (8002ce4 <HAL_I2C_MspInit+0x88>)
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <HAL_I2C_MspInit+0x88>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8002c9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ca0:	2312      	movs	r3, #18
 8002ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cac:	2304      	movs	r3, #4
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	480c      	ldr	r0, [pc, #48]	; (8002ce8 <HAL_I2C_MspInit+0x8c>)
 8002cb8:	f000 fc3c 	bl	8003534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <HAL_I2C_MspInit+0x88>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <HAL_I2C_MspInit+0x88>)
 8002cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cca:	6413      	str	r3, [r2, #64]	; 0x40
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_I2C_MspInit+0x88>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cd8:	bf00      	nop
 8002cda:	3728      	adds	r7, #40	; 0x28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40005400 	.word	0x40005400
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40020400 	.word	0x40020400

08002cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a23      	ldr	r2, [pc, #140]	; (8002d98 <HAL_TIM_Base_MspInit+0xac>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <HAL_TIM_Base_MspInit+0xb0>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4a21      	ldr	r2, [pc, #132]	; (8002d9c <HAL_TIM_Base_MspInit+0xb0>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1e:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <HAL_TIM_Base_MspInit+0xb0>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002d2a:	e030      	b.n	8002d8e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <HAL_TIM_Base_MspInit+0xb4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d12b      	bne.n	8002d8e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_TIM_Base_MspInit+0xb0>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <HAL_TIM_Base_MspInit+0xb0>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	6453      	str	r3, [r2, #68]	; 0x44
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_TIM_Base_MspInit+0xb0>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_TIM_Base_MspInit+0xb0>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a10      	ldr	r2, [pc, #64]	; (8002d9c <HAL_TIM_Base_MspInit+0xb0>)
 8002d5c:	f043 0304 	orr.w	r3, r3, #4
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <HAL_TIM_Base_MspInit+0xb0>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002d6e:	23c0      	movs	r3, #192	; 0xc0
 8002d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	4619      	mov	r1, r3
 8002d88:	4806      	ldr	r0, [pc, #24]	; (8002da4 <HAL_TIM_Base_MspInit+0xb8>)
 8002d8a:	f000 fbd3 	bl	8003534 <HAL_GPIO_Init>
}
 8002d8e:	bf00      	nop
 8002d90:	3728      	adds	r7, #40	; 0x28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40010000 	.word	0x40010000
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40010400 	.word	0x40010400
 8002da4:	40020800 	.word	0x40020800

08002da8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08c      	sub	sp, #48	; 0x30
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db0:	f107 031c 	add.w	r3, r7, #28
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc8:	d153      	bne.n	8002e72 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a46      	ldr	r2, [pc, #280]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b44      	ldr	r3, [pc, #272]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	4b40      	ldr	r3, [pc, #256]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a3f      	ldr	r2, [pc, #252]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	4b39      	ldr	r3, [pc, #228]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	4a38      	ldr	r2, [pc, #224]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	6313      	str	r3, [r2, #48]	; 0x30
 8002e12:	4b36      	ldr	r3, [pc, #216]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	2302      	movs	r3, #2
 8002e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e30:	2301      	movs	r3, #1
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e34:	f107 031c 	add.w	r3, r7, #28
 8002e38:	4619      	mov	r1, r3
 8002e3a:	482d      	ldr	r0, [pc, #180]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x148>)
 8002e3c:	f000 fb7a 	bl	8003534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e40:	2308      	movs	r3, #8
 8002e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e50:	2301      	movs	r3, #1
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e54:	f107 031c 	add.w	r3, r7, #28
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4826      	ldr	r0, [pc, #152]	; (8002ef4 <HAL_TIM_Encoder_MspInit+0x14c>)
 8002e5c:	f000 fb6a 	bl	8003534 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2105      	movs	r1, #5
 8002e64:	201c      	movs	r0, #28
 8002e66:	f000 fb2e 	bl	80034c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e6a:	201c      	movs	r0, #28
 8002e6c:	f000 fb47 	bl	80034fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e70:	e038      	b.n	8002ee4 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM3)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a20      	ldr	r2, [pc, #128]	; (8002ef8 <HAL_TIM_Encoder_MspInit+0x150>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d133      	bne.n	8002ee4 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	4a19      	ldr	r2, [pc, #100]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8c:	4b17      	ldr	r3, [pc, #92]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	4a12      	ldr	r2, [pc, #72]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea8:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_TIM_Encoder_MspInit+0x144>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eb4:	23c0      	movs	r3, #192	; 0xc0
 8002eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec8:	f107 031c 	add.w	r3, r7, #28
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4808      	ldr	r0, [pc, #32]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x148>)
 8002ed0:	f000 fb30 	bl	8003534 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2105      	movs	r1, #5
 8002ed8:	201d      	movs	r0, #29
 8002eda:	f000 faf4 	bl	80034c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ede:	201d      	movs	r0, #29
 8002ee0:	f000 fb0d 	bl	80034fe <HAL_NVIC_EnableIRQ>
}
 8002ee4:	bf00      	nop
 8002ee6:	3730      	adds	r7, #48	; 0x30
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	40000400 	.word	0x40000400

08002efc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <HAL_TIM_MspPostInit+0x68>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d11e      	bne.n	8002f5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f28:	f043 0310 	orr.w	r3, r3, #16
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002f3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	4619      	mov	r1, r3
 8002f56:	4805      	ldr	r0, [pc, #20]	; (8002f6c <HAL_TIM_MspPostInit+0x70>)
 8002f58:	f000 faec 	bl	8003534 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f5c:	bf00      	nop
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40010000 	.word	0x40010000
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40021000 	.word	0x40021000

08002f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <NMI_Handler+0x4>

08002f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f7a:	e7fe      	b.n	8002f7a <HardFault_Handler+0x4>

08002f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <MemManage_Handler+0x4>

08002f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f86:	e7fe      	b.n	8002f86 <BusFault_Handler+0x4>

08002f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f8c:	e7fe      	b.n	8002f8c <UsageFault_Handler+0x4>

08002f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fa0:	f000 f972 	bl	8003288 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002fa4:	f005 f886 	bl	80080b4 <xTaskGetSchedulerState>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d001      	beq.n	8002fb2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002fae:	f005 fe6b 	bl	8008c88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <TIM2_IRQHandler+0x10>)
 8002fbe:	f002 fb35 	bl	800562c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200002a0 	.word	0x200002a0

08002fcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <TIM3_IRQHandler+0x10>)
 8002fd2:	f002 fb2b 	bl	800562c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200002e8 	.word	0x200002e8

08002fe0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return 1;
 8002fe4:	2301      	movs	r3, #1
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <_kill>:

int _kill(int pid, int sig)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ffa:	f006 fde1 	bl	8009bc0 <__errno>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2216      	movs	r2, #22
 8003002:	601a      	str	r2, [r3, #0]
  return -1;
 8003004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <_exit>:

void _exit (int status)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ffe7 	bl	8002ff0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003022:	e7fe      	b.n	8003022 <_exit+0x12>

08003024 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	e00a      	b.n	800304c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003036:	f3af 8000 	nop.w
 800303a:	4601      	mov	r1, r0
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	60ba      	str	r2, [r7, #8]
 8003042:	b2ca      	uxtb	r2, r1
 8003044:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	3301      	adds	r3, #1
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	429a      	cmp	r2, r3
 8003052:	dbf0      	blt.n	8003036 <_read+0x12>
  }

  return len;
 8003054:	687b      	ldr	r3, [r7, #4]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	e009      	b.n	8003084 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	60ba      	str	r2, [r7, #8]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	3301      	adds	r3, #1
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	429a      	cmp	r2, r3
 800308a:	dbf1      	blt.n	8003070 <_write+0x12>
  }
  return len;
 800308c:	687b      	ldr	r3, [r7, #4]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <_close>:

int _close(int file)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800309e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030be:	605a      	str	r2, [r3, #4]
  return 0;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <_isatty>:

int _isatty(int file)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030d6:	2301      	movs	r3, #1
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003108:	4a14      	ldr	r2, [pc, #80]	; (800315c <_sbrk+0x5c>)
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <_sbrk+0x60>)
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003114:	4b13      	ldr	r3, [pc, #76]	; (8003164 <_sbrk+0x64>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <_sbrk+0x64>)
 800311e:	4a12      	ldr	r2, [pc, #72]	; (8003168 <_sbrk+0x68>)
 8003120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <_sbrk+0x64>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	429a      	cmp	r2, r3
 800312e:	d207      	bcs.n	8003140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003130:	f006 fd46 	bl	8009bc0 <__errno>
 8003134:	4603      	mov	r3, r0
 8003136:	220c      	movs	r2, #12
 8003138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800313e:	e009      	b.n	8003154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003140:	4b08      	ldr	r3, [pc, #32]	; (8003164 <_sbrk+0x64>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003146:	4b07      	ldr	r3, [pc, #28]	; (8003164 <_sbrk+0x64>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	4a05      	ldr	r2, [pc, #20]	; (8003164 <_sbrk+0x64>)
 8003150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003152:	68fb      	ldr	r3, [r7, #12]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20020000 	.word	0x20020000
 8003160:	00000400 	.word	0x00000400
 8003164:	2000080c 	.word	0x2000080c
 8003168:	200052b0 	.word	0x200052b0

0800316c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <SystemInit+0x20>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	4a05      	ldr	r2, [pc, #20]	; (800318c <SystemInit+0x20>)
 8003178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800317c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003194:	480d      	ldr	r0, [pc, #52]	; (80031cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003196:	490e      	ldr	r1, [pc, #56]	; (80031d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003198:	4a0e      	ldr	r2, [pc, #56]	; (80031d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800319a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800319c:	e002      	b.n	80031a4 <LoopCopyDataInit>

0800319e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800319e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031a2:	3304      	adds	r3, #4

080031a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031a8:	d3f9      	bcc.n	800319e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031aa:	4a0b      	ldr	r2, [pc, #44]	; (80031d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031ac:	4c0b      	ldr	r4, [pc, #44]	; (80031dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80031ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031b0:	e001      	b.n	80031b6 <LoopFillZerobss>

080031b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031b4:	3204      	adds	r2, #4

080031b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031b8:	d3fb      	bcc.n	80031b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031ba:	f7ff ffd7 	bl	800316c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031be:	f006 fd05 	bl	8009bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031c2:	f7fe fa77 	bl	80016b4 <main>
  bx  lr    
 80031c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031d0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80031d4:	0800bf9c 	.word	0x0800bf9c
  ldr r2, =_sbss
 80031d8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80031dc:	200052b0 	.word	0x200052b0

080031e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031e0:	e7fe      	b.n	80031e0 <ADC_IRQHandler>
	...

080031e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031e8:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <HAL_Init+0x40>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0d      	ldr	r2, [pc, #52]	; (8003224 <HAL_Init+0x40>)
 80031ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_Init+0x40>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <HAL_Init+0x40>)
 80031fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003200:	4b08      	ldr	r3, [pc, #32]	; (8003224 <HAL_Init+0x40>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a07      	ldr	r2, [pc, #28]	; (8003224 <HAL_Init+0x40>)
 8003206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800320c:	2003      	movs	r0, #3
 800320e:	f000 f94f 	bl	80034b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003212:	200f      	movs	r0, #15
 8003214:	f000 f808 	bl	8003228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003218:	f7ff fcf4 	bl	8002c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023c00 	.word	0x40023c00

08003228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_InitTick+0x54>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_InitTick+0x58>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	4619      	mov	r1, r3
 800323a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800323e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003242:	fbb2 f3f3 	udiv	r3, r2, r3
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f967 	bl	800351a <HAL_SYSTICK_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e00e      	b.n	8003274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b0f      	cmp	r3, #15
 800325a:	d80a      	bhi.n	8003272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800325c:	2200      	movs	r2, #0
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003264:	f000 f92f 	bl	80034c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003268:	4a06      	ldr	r2, [pc, #24]	; (8003284 <HAL_InitTick+0x5c>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	e000      	b.n	8003274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20000004 	.word	0x20000004
 8003280:	2000000c 	.word	0x2000000c
 8003284:	20000008 	.word	0x20000008

08003288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_IncTick+0x20>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_IncTick+0x24>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4413      	add	r3, r2
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HAL_IncTick+0x24>)
 800329a:	6013      	str	r3, [r2, #0]
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	2000000c 	.word	0x2000000c
 80032ac:	20000810 	.word	0x20000810

080032b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return uwTick;
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_GetTick+0x14>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20000810 	.word	0x20000810

080032c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d0:	f7ff ffee 	bl	80032b0 <HAL_GetTick>
 80032d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032e0:	d005      	beq.n	80032ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_Delay+0x44>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ee:	bf00      	nop
 80032f0:	f7ff ffde 	bl	80032b0 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d8f7      	bhi.n	80032f0 <HAL_Delay+0x28>
  {
  }
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	2000000c 	.word	0x2000000c

08003310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <__NVIC_SetPriorityGrouping+0x44>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800332c:	4013      	ands	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800333c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003342:	4a04      	ldr	r2, [pc, #16]	; (8003354 <__NVIC_SetPriorityGrouping+0x44>)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	60d3      	str	r3, [r2, #12]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <__NVIC_GetPriorityGrouping+0x18>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	f003 0307 	and.w	r3, r3, #7
}
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	2b00      	cmp	r3, #0
 8003384:	db0b      	blt.n	800339e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	4907      	ldr	r1, [pc, #28]	; (80033ac <__NVIC_EnableIRQ+0x38>)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2001      	movs	r0, #1
 8003396:	fa00 f202 	lsl.w	r2, r0, r2
 800339a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	e000e100 	.word	0xe000e100

080033b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	6039      	str	r1, [r7, #0]
 80033ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	db0a      	blt.n	80033da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	490c      	ldr	r1, [pc, #48]	; (80033fc <__NVIC_SetPriority+0x4c>)
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	0112      	lsls	r2, r2, #4
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	440b      	add	r3, r1
 80033d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d8:	e00a      	b.n	80033f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4908      	ldr	r1, [pc, #32]	; (8003400 <__NVIC_SetPriority+0x50>)
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	3b04      	subs	r3, #4
 80033e8:	0112      	lsls	r2, r2, #4
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	440b      	add	r3, r1
 80033ee:	761a      	strb	r2, [r3, #24]
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	e000e100 	.word	0xe000e100
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003404:	b480      	push	{r7}
 8003406:	b089      	sub	sp, #36	; 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f1c3 0307 	rsb	r3, r3, #7
 800341e:	2b04      	cmp	r3, #4
 8003420:	bf28      	it	cs
 8003422:	2304      	movcs	r3, #4
 8003424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3304      	adds	r3, #4
 800342a:	2b06      	cmp	r3, #6
 800342c:	d902      	bls.n	8003434 <NVIC_EncodePriority+0x30>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3b03      	subs	r3, #3
 8003432:	e000      	b.n	8003436 <NVIC_EncodePriority+0x32>
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43da      	mvns	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	401a      	ands	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800344c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	43d9      	mvns	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345c:	4313      	orrs	r3, r2
         );
}
 800345e:	4618      	mov	r0, r3
 8003460:	3724      	adds	r7, #36	; 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800347c:	d301      	bcc.n	8003482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800347e:	2301      	movs	r3, #1
 8003480:	e00f      	b.n	80034a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003482:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <SysTick_Config+0x40>)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348a:	210f      	movs	r1, #15
 800348c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003490:	f7ff ff8e 	bl	80033b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <SysTick_Config+0x40>)
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349a:	4b04      	ldr	r3, [pc, #16]	; (80034ac <SysTick_Config+0x40>)
 800349c:	2207      	movs	r2, #7
 800349e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	e000e010 	.word	0xe000e010

080034b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ff29 	bl	8003310 <__NVIC_SetPriorityGrouping>
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b086      	sub	sp, #24
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4603      	mov	r3, r0
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034d8:	f7ff ff3e 	bl	8003358 <__NVIC_GetPriorityGrouping>
 80034dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	6978      	ldr	r0, [r7, #20]
 80034e4:	f7ff ff8e 	bl	8003404 <NVIC_EncodePriority>
 80034e8:	4602      	mov	r2, r0
 80034ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff ff5d 	bl	80033b0 <__NVIC_SetPriority>
}
 80034f6:	bf00      	nop
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	4603      	mov	r3, r0
 8003506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff31 	bl	8003374 <__NVIC_EnableIRQ>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff ffa2 	bl	800346c <SysTick_Config>
 8003528:	4603      	mov	r3, r0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	e16b      	b.n	8003828 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003550:	2201      	movs	r2, #1
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	429a      	cmp	r2, r3
 800356a:	f040 815a 	bne.w	8003822 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d005      	beq.n	8003586 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003582:	2b02      	cmp	r3, #2
 8003584:	d130      	bne.n	80035e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	2203      	movs	r2, #3
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035bc:	2201      	movs	r2, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 0201 	and.w	r2, r3, #1
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d017      	beq.n	8003624 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	2203      	movs	r2, #3
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d123      	bne.n	8003678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	08da      	lsrs	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3208      	adds	r2, #8
 8003638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	220f      	movs	r2, #15
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	08da      	lsrs	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3208      	adds	r2, #8
 8003672:	69b9      	ldr	r1, [r7, #24]
 8003674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2203      	movs	r2, #3
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0203 	and.w	r2, r3, #3
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80b4 	beq.w	8003822 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	4b60      	ldr	r3, [pc, #384]	; (8003840 <HAL_GPIO_Init+0x30c>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	4a5f      	ldr	r2, [pc, #380]	; (8003840 <HAL_GPIO_Init+0x30c>)
 80036c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ca:	4b5d      	ldr	r3, [pc, #372]	; (8003840 <HAL_GPIO_Init+0x30c>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036d6:	4a5b      	ldr	r2, [pc, #364]	; (8003844 <HAL_GPIO_Init+0x310>)
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	089b      	lsrs	r3, r3, #2
 80036dc:	3302      	adds	r3, #2
 80036de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	220f      	movs	r2, #15
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a52      	ldr	r2, [pc, #328]	; (8003848 <HAL_GPIO_Init+0x314>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d02b      	beq.n	800375a <HAL_GPIO_Init+0x226>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a51      	ldr	r2, [pc, #324]	; (800384c <HAL_GPIO_Init+0x318>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d025      	beq.n	8003756 <HAL_GPIO_Init+0x222>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a50      	ldr	r2, [pc, #320]	; (8003850 <HAL_GPIO_Init+0x31c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d01f      	beq.n	8003752 <HAL_GPIO_Init+0x21e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4f      	ldr	r2, [pc, #316]	; (8003854 <HAL_GPIO_Init+0x320>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d019      	beq.n	800374e <HAL_GPIO_Init+0x21a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a4e      	ldr	r2, [pc, #312]	; (8003858 <HAL_GPIO_Init+0x324>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <HAL_GPIO_Init+0x216>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a4d      	ldr	r2, [pc, #308]	; (800385c <HAL_GPIO_Init+0x328>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00d      	beq.n	8003746 <HAL_GPIO_Init+0x212>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a4c      	ldr	r2, [pc, #304]	; (8003860 <HAL_GPIO_Init+0x32c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d007      	beq.n	8003742 <HAL_GPIO_Init+0x20e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a4b      	ldr	r2, [pc, #300]	; (8003864 <HAL_GPIO_Init+0x330>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d101      	bne.n	800373e <HAL_GPIO_Init+0x20a>
 800373a:	2307      	movs	r3, #7
 800373c:	e00e      	b.n	800375c <HAL_GPIO_Init+0x228>
 800373e:	2308      	movs	r3, #8
 8003740:	e00c      	b.n	800375c <HAL_GPIO_Init+0x228>
 8003742:	2306      	movs	r3, #6
 8003744:	e00a      	b.n	800375c <HAL_GPIO_Init+0x228>
 8003746:	2305      	movs	r3, #5
 8003748:	e008      	b.n	800375c <HAL_GPIO_Init+0x228>
 800374a:	2304      	movs	r3, #4
 800374c:	e006      	b.n	800375c <HAL_GPIO_Init+0x228>
 800374e:	2303      	movs	r3, #3
 8003750:	e004      	b.n	800375c <HAL_GPIO_Init+0x228>
 8003752:	2302      	movs	r3, #2
 8003754:	e002      	b.n	800375c <HAL_GPIO_Init+0x228>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_GPIO_Init+0x228>
 800375a:	2300      	movs	r3, #0
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	f002 0203 	and.w	r2, r2, #3
 8003762:	0092      	lsls	r2, r2, #2
 8003764:	4093      	lsls	r3, r2
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800376c:	4935      	ldr	r1, [pc, #212]	; (8003844 <HAL_GPIO_Init+0x310>)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	3302      	adds	r3, #2
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800377a:	4b3b      	ldr	r3, [pc, #236]	; (8003868 <HAL_GPIO_Init+0x334>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800379e:	4a32      	ldr	r2, [pc, #200]	; (8003868 <HAL_GPIO_Init+0x334>)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037a4:	4b30      	ldr	r3, [pc, #192]	; (8003868 <HAL_GPIO_Init+0x334>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037c8:	4a27      	ldr	r2, [pc, #156]	; (8003868 <HAL_GPIO_Init+0x334>)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ce:	4b26      	ldr	r3, [pc, #152]	; (8003868 <HAL_GPIO_Init+0x334>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037f2:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <HAL_GPIO_Init+0x334>)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <HAL_GPIO_Init+0x334>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800381c:	4a12      	ldr	r2, [pc, #72]	; (8003868 <HAL_GPIO_Init+0x334>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3301      	adds	r3, #1
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	2b0f      	cmp	r3, #15
 800382c:	f67f ae90 	bls.w	8003550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	3724      	adds	r7, #36	; 0x24
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	40013800 	.word	0x40013800
 8003848:	40020000 	.word	0x40020000
 800384c:	40020400 	.word	0x40020400
 8003850:	40020800 	.word	0x40020800
 8003854:	40020c00 	.word	0x40020c00
 8003858:	40021000 	.word	0x40021000
 800385c:	40021400 	.word	0x40021400
 8003860:	40021800 	.word	0x40021800
 8003864:	40021c00 	.word	0x40021c00
 8003868:	40013c00 	.word	0x40013c00

0800386c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
 8003878:	4613      	mov	r3, r2
 800387a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800387c:	787b      	ldrb	r3, [r7, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003882:	887a      	ldrh	r2, [r7, #2]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003888:	e003      	b.n	8003892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800388a:	887b      	ldrh	r3, [r7, #2]
 800388c:	041a      	lsls	r2, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	619a      	str	r2, [r3, #24]
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e12b      	b.n	8003b0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff f9c8 	bl	8002c5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2224      	movs	r2, #36	; 0x24
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003902:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003904:	f001 fbba 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 8003908:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4a81      	ldr	r2, [pc, #516]	; (8003b14 <HAL_I2C_Init+0x274>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d807      	bhi.n	8003924 <HAL_I2C_Init+0x84>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4a80      	ldr	r2, [pc, #512]	; (8003b18 <HAL_I2C_Init+0x278>)
 8003918:	4293      	cmp	r3, r2
 800391a:	bf94      	ite	ls
 800391c:	2301      	movls	r3, #1
 800391e:	2300      	movhi	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	e006      	b.n	8003932 <HAL_I2C_Init+0x92>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4a7d      	ldr	r2, [pc, #500]	; (8003b1c <HAL_I2C_Init+0x27c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	bf94      	ite	ls
 800392c:	2301      	movls	r3, #1
 800392e:	2300      	movhi	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e0e7      	b.n	8003b0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4a78      	ldr	r2, [pc, #480]	; (8003b20 <HAL_I2C_Init+0x280>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	0c9b      	lsrs	r3, r3, #18
 8003944:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4a6a      	ldr	r2, [pc, #424]	; (8003b14 <HAL_I2C_Init+0x274>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d802      	bhi.n	8003974 <HAL_I2C_Init+0xd4>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	3301      	adds	r3, #1
 8003972:	e009      	b.n	8003988 <HAL_I2C_Init+0xe8>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	4a69      	ldr	r2, [pc, #420]	; (8003b24 <HAL_I2C_Init+0x284>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	099b      	lsrs	r3, r3, #6
 8003986:	3301      	adds	r3, #1
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	430b      	orrs	r3, r1
 800398e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800399a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	495c      	ldr	r1, [pc, #368]	; (8003b14 <HAL_I2C_Init+0x274>)
 80039a4:	428b      	cmp	r3, r1
 80039a6:	d819      	bhi.n	80039dc <HAL_I2C_Init+0x13c>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1e59      	subs	r1, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039b6:	1c59      	adds	r1, r3, #1
 80039b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039bc:	400b      	ands	r3, r1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_I2C_Init+0x138>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1e59      	subs	r1, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d0:	3301      	adds	r3, #1
 80039d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d6:	e051      	b.n	8003a7c <HAL_I2C_Init+0x1dc>
 80039d8:	2304      	movs	r3, #4
 80039da:	e04f      	b.n	8003a7c <HAL_I2C_Init+0x1dc>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d111      	bne.n	8003a08 <HAL_I2C_Init+0x168>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1e58      	subs	r0, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	440b      	add	r3, r1
 80039f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f6:	3301      	adds	r3, #1
 80039f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bf0c      	ite	eq
 8003a00:	2301      	moveq	r3, #1
 8003a02:	2300      	movne	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	e012      	b.n	8003a2e <HAL_I2C_Init+0x18e>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e58      	subs	r0, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	0099      	lsls	r1, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_I2C_Init+0x196>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e022      	b.n	8003a7c <HAL_I2C_Init+0x1dc>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10e      	bne.n	8003a5c <HAL_I2C_Init+0x1bc>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1e58      	subs	r0, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6859      	ldr	r1, [r3, #4]
 8003a46:	460b      	mov	r3, r1
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	440b      	add	r3, r1
 8003a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a50:	3301      	adds	r3, #1
 8003a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a5a:	e00f      	b.n	8003a7c <HAL_I2C_Init+0x1dc>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1e58      	subs	r0, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	0099      	lsls	r1, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a72:	3301      	adds	r3, #1
 8003a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	6809      	ldr	r1, [r1, #0]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6911      	ldr	r1, [r2, #16]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68d2      	ldr	r2, [r2, #12]
 8003ab6:	4311      	orrs	r1, r2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	000186a0 	.word	0x000186a0
 8003b18:	001e847f 	.word	0x001e847f
 8003b1c:	003d08ff 	.word	0x003d08ff
 8003b20:	431bde83 	.word	0x431bde83
 8003b24:	10624dd3 	.word	0x10624dd3

08003b28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	461a      	mov	r2, r3
 8003b34:	460b      	mov	r3, r1
 8003b36:	817b      	strh	r3, [r7, #10]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b3c:	f7ff fbb8 	bl	80032b0 <HAL_GetTick>
 8003b40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	f040 80e0 	bne.w	8003d10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	2319      	movs	r3, #25
 8003b56:	2201      	movs	r2, #1
 8003b58:	4970      	ldr	r1, [pc, #448]	; (8003d1c <HAL_I2C_Master_Transmit+0x1f4>)
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fc58 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
 8003b68:	e0d3      	b.n	8003d12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_I2C_Master_Transmit+0x50>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e0cc      	b.n	8003d12 <HAL_I2C_Master_Transmit+0x1ea>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d007      	beq.n	8003b9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0201 	orr.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2221      	movs	r2, #33	; 0x21
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2210      	movs	r2, #16
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	893a      	ldrh	r2, [r7, #8]
 8003bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a50      	ldr	r2, [pc, #320]	; (8003d20 <HAL_I2C_Master_Transmit+0x1f8>)
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003be0:	8979      	ldrh	r1, [r7, #10]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	6a3a      	ldr	r2, [r7, #32]
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fac2 	bl	8004170 <I2C_MasterRequestWrite>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e08d      	b.n	8003d12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c0c:	e066      	b.n	8003cdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	6a39      	ldr	r1, [r7, #32]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fcd2 	bl	80045bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00d      	beq.n	8003c3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d107      	bne.n	8003c36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06b      	b.n	8003d12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	781a      	ldrb	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d11b      	bne.n	8003cb0 <HAL_I2C_Master_Transmit+0x188>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d017      	beq.n	8003cb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	6a39      	ldr	r1, [r7, #32]
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fcc2 	bl	800463e <I2C_WaitOnBTFFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00d      	beq.n	8003cdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d107      	bne.n	8003cd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e01a      	b.n	8003d12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d194      	bne.n	8003c0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e000      	b.n	8003d12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
  }
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	00100002 	.word	0x00100002
 8003d20:	ffff0000 	.word	0xffff0000

08003d24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08c      	sub	sp, #48	; 0x30
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	460b      	mov	r3, r1
 8003d32:	817b      	strh	r3, [r7, #10]
 8003d34:	4613      	mov	r3, r2
 8003d36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d38:	f7ff faba 	bl	80032b0 <HAL_GetTick>
 8003d3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	f040 820b 	bne.w	8004162 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	2319      	movs	r3, #25
 8003d52:	2201      	movs	r2, #1
 8003d54:	497c      	ldr	r1, [pc, #496]	; (8003f48 <HAL_I2C_Master_Receive+0x224>)
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fb5a 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
 8003d64:	e1fe      	b.n	8004164 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_I2C_Master_Receive+0x50>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e1f7      	b.n	8004164 <HAL_I2C_Master_Receive+0x440>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d007      	beq.n	8003d9a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0201 	orr.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2222      	movs	r2, #34	; 0x22
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2210      	movs	r2, #16
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	893a      	ldrh	r2, [r7, #8]
 8003dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a5c      	ldr	r2, [pc, #368]	; (8003f4c <HAL_I2C_Master_Receive+0x228>)
 8003dda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ddc:	8979      	ldrh	r1, [r7, #10]
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fa46 	bl	8004274 <I2C_MasterRequestRead>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e1b8      	b.n	8004164 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d113      	bne.n	8003e22 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	623b      	str	r3, [r7, #32]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	623b      	str	r3, [r7, #32]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e18c      	b.n	800413c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d11b      	bne.n	8003e62 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	61fb      	str	r3, [r7, #28]
 8003e4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	e16c      	b.n	800413c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d11b      	bne.n	8003ea2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	e14c      	b.n	800413c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ec8:	e138      	b.n	800413c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	f200 80f1 	bhi.w	80040b6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d123      	bne.n	8003f24 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 fbed 	bl	80046c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e139      	b.n	8004164 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f22:	e10b      	b.n	800413c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d14e      	bne.n	8003fca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	2200      	movs	r2, #0
 8003f34:	4906      	ldr	r1, [pc, #24]	; (8003f50 <HAL_I2C_Master_Receive+0x22c>)
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 fa6a 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e10e      	b.n	8004164 <HAL_I2C_Master_Receive+0x440>
 8003f46:	bf00      	nop
 8003f48:	00100002 	.word	0x00100002
 8003f4c:	ffff0000 	.word	0xffff0000
 8003f50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fc8:	e0b8      	b.n	800413c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	4966      	ldr	r1, [pc, #408]	; (800416c <HAL_I2C_Master_Receive+0x448>)
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 fa1b 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0bf      	b.n	8004164 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	2200      	movs	r2, #0
 800402e:	494f      	ldr	r1, [pc, #316]	; (800416c <HAL_I2C_Master_Receive+0x448>)
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f9ed 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e091      	b.n	8004164 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040b4:	e042      	b.n	800413c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fb00 	bl	80046c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e04c      	b.n	8004164 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b04      	cmp	r3, #4
 8004108:	d118      	bne.n	800413c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	2b00      	cmp	r3, #0
 8004142:	f47f aec2 	bne.w	8003eca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
  }
}
 8004164:	4618      	mov	r0, r3
 8004166:	3728      	adds	r7, #40	; 0x28
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	00010004 	.word	0x00010004

08004170 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	460b      	mov	r3, r1
 800417e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d006      	beq.n	800419a <I2C_MasterRequestWrite+0x2a>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d003      	beq.n	800419a <I2C_MasterRequestWrite+0x2a>
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004198:	d108      	bne.n	80041ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e00b      	b.n	80041c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	2b12      	cmp	r3, #18
 80041b2:	d107      	bne.n	80041c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f91d 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00d      	beq.n	80041f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ea:	d103      	bne.n	80041f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e035      	b.n	8004264 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004200:	d108      	bne.n	8004214 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004202:	897b      	ldrh	r3, [r7, #10]
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004210:	611a      	str	r2, [r3, #16]
 8004212:	e01b      	b.n	800424c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004214:	897b      	ldrh	r3, [r7, #10]
 8004216:	11db      	asrs	r3, r3, #7
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f003 0306 	and.w	r3, r3, #6
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f063 030f 	orn	r3, r3, #15
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	490e      	ldr	r1, [pc, #56]	; (800426c <I2C_MasterRequestWrite+0xfc>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f943 	bl	80044be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e010      	b.n	8004264 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004242:	897b      	ldrh	r3, [r7, #10]
 8004244:	b2da      	uxtb	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	4907      	ldr	r1, [pc, #28]	; (8004270 <I2C_MasterRequestWrite+0x100>)
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f933 	bl	80044be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	00010008 	.word	0x00010008
 8004270:	00010002 	.word	0x00010002

08004274 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af02      	add	r7, sp, #8
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	607a      	str	r2, [r7, #4]
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	460b      	mov	r3, r1
 8004282:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004298:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d006      	beq.n	80042ae <I2C_MasterRequestRead+0x3a>
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d003      	beq.n	80042ae <I2C_MasterRequestRead+0x3a>
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042ac:	d108      	bne.n	80042c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e00b      	b.n	80042d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	2b11      	cmp	r3, #17
 80042c6:	d107      	bne.n	80042d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f893 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00d      	beq.n	800430c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fe:	d103      	bne.n	8004308 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004306:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e079      	b.n	8004400 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004314:	d108      	bne.n	8004328 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004316:	897b      	ldrh	r3, [r7, #10]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	611a      	str	r2, [r3, #16]
 8004326:	e05f      	b.n	80043e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004328:	897b      	ldrh	r3, [r7, #10]
 800432a:	11db      	asrs	r3, r3, #7
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f003 0306 	and.w	r3, r3, #6
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f063 030f 	orn	r3, r3, #15
 8004338:	b2da      	uxtb	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4930      	ldr	r1, [pc, #192]	; (8004408 <I2C_MasterRequestRead+0x194>)
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f8b9 	bl	80044be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e054      	b.n	8004400 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004356:	897b      	ldrh	r3, [r7, #10]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4929      	ldr	r1, [pc, #164]	; (800440c <I2C_MasterRequestRead+0x198>)
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f8a9 	bl	80044be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e044      	b.n	8004400 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800439a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f831 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00d      	beq.n	80043d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c2:	d103      	bne.n	80043cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e017      	b.n	8004400 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043d0:	897b      	ldrh	r3, [r7, #10]
 80043d2:	11db      	asrs	r3, r3, #7
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f003 0306 	and.w	r3, r3, #6
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f063 030e 	orn	r3, r3, #14
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4907      	ldr	r1, [pc, #28]	; (800440c <I2C_MasterRequestRead+0x198>)
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f865 	bl	80044be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	00010008 	.word	0x00010008
 800440c:	00010002 	.word	0x00010002

08004410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004420:	e025      	b.n	800446e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004428:	d021      	beq.n	800446e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fe ff41 	bl	80032b0 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d116      	bne.n	800446e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f043 0220 	orr.w	r2, r3, #32
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e023      	b.n	80044b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10d      	bne.n	8004494 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	43da      	mvns	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	e00c      	b.n	80044ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	43da      	mvns	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4013      	ands	r3, r2
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	bf0c      	ite	eq
 80044a6:	2301      	moveq	r3, #1
 80044a8:	2300      	movne	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d0b6      	beq.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044cc:	e051      	b.n	8004572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044dc:	d123      	bne.n	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	f043 0204 	orr.w	r2, r3, #4
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e046      	b.n	80045b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800452c:	d021      	beq.n	8004572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452e:	f7fe febf 	bl	80032b0 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	429a      	cmp	r2, r3
 800453c:	d302      	bcc.n	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d116      	bne.n	8004572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f043 0220 	orr.w	r2, r3, #32
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e020      	b.n	80045b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	0c1b      	lsrs	r3, r3, #16
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d10c      	bne.n	8004596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	43da      	mvns	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4013      	ands	r3, r2
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	bf14      	ite	ne
 800458e:	2301      	movne	r3, #1
 8004590:	2300      	moveq	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	e00b      	b.n	80045ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	43da      	mvns	r2, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4013      	ands	r3, r2
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bf14      	ite	ne
 80045a8:	2301      	movne	r3, #1
 80045aa:	2300      	moveq	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d18d      	bne.n	80044ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045c8:	e02d      	b.n	8004626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f8ce 	bl	800476c <I2C_IsAcknowledgeFailed>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e02d      	b.n	8004636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e0:	d021      	beq.n	8004626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e2:	f7fe fe65 	bl	80032b0 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d302      	bcc.n	80045f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d116      	bne.n	8004626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f043 0220 	orr.w	r2, r3, #32
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e007      	b.n	8004636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	2b80      	cmp	r3, #128	; 0x80
 8004632:	d1ca      	bne.n	80045ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800464a:	e02d      	b.n	80046a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f88d 	bl	800476c <I2C_IsAcknowledgeFailed>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e02d      	b.n	80046b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004662:	d021      	beq.n	80046a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004664:	f7fe fe24 	bl	80032b0 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	429a      	cmp	r2, r3
 8004672:	d302      	bcc.n	800467a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d116      	bne.n	80046a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	f043 0220 	orr.w	r2, r3, #32
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e007      	b.n	80046b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d1ca      	bne.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046cc:	e042      	b.n	8004754 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d119      	bne.n	8004710 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0210 	mvn.w	r2, #16
 80046e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e029      	b.n	8004764 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004710:	f7fe fdce 	bl	80032b0 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	429a      	cmp	r2, r3
 800471e:	d302      	bcc.n	8004726 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d116      	bne.n	8004754 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	f043 0220 	orr.w	r2, r3, #32
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e007      	b.n	8004764 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b40      	cmp	r3, #64	; 0x40
 8004760:	d1b5      	bne.n	80046ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004782:	d11b      	bne.n	80047bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800478c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	f043 0204 	orr.w	r2, r3, #4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80047d2:	4b06      	ldr	r3, [pc, #24]	; (80047ec <HAL_PWR_EnableBkUpAccess+0x20>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_PWR_EnableBkUpAccess+0x24>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80047de:	687b      	ldr	r3, [r7, #4]
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	420e0020 	.word	0x420e0020
 80047f0:	40007000 	.word	0x40007000

080047f4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_PWR_DisableBkUpAccess+0x20>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004806:	687b      	ldr	r3, [r7, #4]
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	420e0020 	.word	0x420e0020
 8004818:	40007000 	.word	0x40007000

0800481c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e267      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d075      	beq.n	8004926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800483a:	4b88      	ldr	r3, [pc, #544]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b04      	cmp	r3, #4
 8004844:	d00c      	beq.n	8004860 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004846:	4b85      	ldr	r3, [pc, #532]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800484e:	2b08      	cmp	r3, #8
 8004850:	d112      	bne.n	8004878 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004852:	4b82      	ldr	r3, [pc, #520]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485e:	d10b      	bne.n	8004878 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	4b7e      	ldr	r3, [pc, #504]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d05b      	beq.n	8004924 <HAL_RCC_OscConfig+0x108>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d157      	bne.n	8004924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e242      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004880:	d106      	bne.n	8004890 <HAL_RCC_OscConfig+0x74>
 8004882:	4b76      	ldr	r3, [pc, #472]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a75      	ldr	r2, [pc, #468]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	e01d      	b.n	80048cc <HAL_RCC_OscConfig+0xb0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x98>
 800489a:	4b70      	ldr	r3, [pc, #448]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a6f      	ldr	r2, [pc, #444]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b6d      	ldr	r3, [pc, #436]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a6c      	ldr	r2, [pc, #432]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e00b      	b.n	80048cc <HAL_RCC_OscConfig+0xb0>
 80048b4:	4b69      	ldr	r3, [pc, #420]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a68      	ldr	r2, [pc, #416]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b66      	ldr	r3, [pc, #408]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a65      	ldr	r2, [pc, #404]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d013      	beq.n	80048fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fe fcec 	bl	80032b0 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fe fce8 	bl	80032b0 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e207      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	4b5b      	ldr	r3, [pc, #364]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0xc0>
 80048fa:	e014      	b.n	8004926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fe fcd8 	bl	80032b0 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004904:	f7fe fcd4 	bl	80032b0 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b64      	cmp	r3, #100	; 0x64
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e1f3      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004916:	4b51      	ldr	r3, [pc, #324]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0xe8>
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d063      	beq.n	80049fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004932:	4b4a      	ldr	r3, [pc, #296]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800493e:	4b47      	ldr	r3, [pc, #284]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004946:	2b08      	cmp	r3, #8
 8004948:	d11c      	bne.n	8004984 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800494a:	4b44      	ldr	r3, [pc, #272]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d116      	bne.n	8004984 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	4b41      	ldr	r3, [pc, #260]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_RCC_OscConfig+0x152>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d001      	beq.n	800496e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e1c7      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496e:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4937      	ldr	r1, [pc, #220]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004982:	e03a      	b.n	80049fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d020      	beq.n	80049ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800498c:	4b34      	ldr	r3, [pc, #208]	; (8004a60 <HAL_RCC_OscConfig+0x244>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fe fc8d 	bl	80032b0 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800499a:	f7fe fc89 	bl	80032b0 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e1a8      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ac:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b8:	4b28      	ldr	r3, [pc, #160]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4925      	ldr	r1, [pc, #148]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	600b      	str	r3, [r1, #0]
 80049cc:	e015      	b.n	80049fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ce:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <HAL_RCC_OscConfig+0x244>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fe fc6c 	bl	80032b0 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049dc:	f7fe fc68 	bl	80032b0 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e187      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ee:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d036      	beq.n	8004a74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d016      	beq.n	8004a3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0e:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <HAL_RCC_OscConfig+0x248>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fe fc4c 	bl	80032b0 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fe fc48 	bl	80032b0 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e167      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x200>
 8004a3a:	e01b      	b.n	8004a74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a3c:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <HAL_RCC_OscConfig+0x248>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a42:	f7fe fc35 	bl	80032b0 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a48:	e00e      	b.n	8004a68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a4a:	f7fe fc31 	bl	80032b0 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d907      	bls.n	8004a68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e150      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	42470000 	.word	0x42470000
 8004a64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a68:	4b88      	ldr	r3, [pc, #544]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1ea      	bne.n	8004a4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8097 	beq.w	8004bb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a82:	2300      	movs	r3, #0
 8004a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a86:	4b81      	ldr	r3, [pc, #516]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10f      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	4b7d      	ldr	r3, [pc, #500]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	4a7c      	ldr	r2, [pc, #496]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa2:	4b7a      	ldr	r3, [pc, #488]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab2:	4b77      	ldr	r3, [pc, #476]	; (8004c90 <HAL_RCC_OscConfig+0x474>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d118      	bne.n	8004af0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004abe:	4b74      	ldr	r3, [pc, #464]	; (8004c90 <HAL_RCC_OscConfig+0x474>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a73      	ldr	r2, [pc, #460]	; (8004c90 <HAL_RCC_OscConfig+0x474>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aca:	f7fe fbf1 	bl	80032b0 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad2:	f7fe fbed 	bl	80032b0 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e10c      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae4:	4b6a      	ldr	r3, [pc, #424]	; (8004c90 <HAL_RCC_OscConfig+0x474>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d106      	bne.n	8004b06 <HAL_RCC_OscConfig+0x2ea>
 8004af8:	4b64      	ldr	r3, [pc, #400]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	4a63      	ldr	r2, [pc, #396]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	6713      	str	r3, [r2, #112]	; 0x70
 8004b04:	e01c      	b.n	8004b40 <HAL_RCC_OscConfig+0x324>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b05      	cmp	r3, #5
 8004b0c:	d10c      	bne.n	8004b28 <HAL_RCC_OscConfig+0x30c>
 8004b0e:	4b5f      	ldr	r3, [pc, #380]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	4a5e      	ldr	r2, [pc, #376]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b14:	f043 0304 	orr.w	r3, r3, #4
 8004b18:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1a:	4b5c      	ldr	r3, [pc, #368]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1e:	4a5b      	ldr	r2, [pc, #364]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	6713      	str	r3, [r2, #112]	; 0x70
 8004b26:	e00b      	b.n	8004b40 <HAL_RCC_OscConfig+0x324>
 8004b28:	4b58      	ldr	r3, [pc, #352]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	4a57      	ldr	r2, [pc, #348]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	6713      	str	r3, [r2, #112]	; 0x70
 8004b34:	4b55      	ldr	r3, [pc, #340]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	4a54      	ldr	r2, [pc, #336]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b3a:	f023 0304 	bic.w	r3, r3, #4
 8004b3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d015      	beq.n	8004b74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b48:	f7fe fbb2 	bl	80032b0 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4e:	e00a      	b.n	8004b66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b50:	f7fe fbae 	bl	80032b0 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0cb      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b66:	4b49      	ldr	r3, [pc, #292]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0ee      	beq.n	8004b50 <HAL_RCC_OscConfig+0x334>
 8004b72:	e014      	b.n	8004b9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b74:	f7fe fb9c 	bl	80032b0 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7a:	e00a      	b.n	8004b92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b7c:	f7fe fb98 	bl	80032b0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e0b5      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b92:	4b3e      	ldr	r3, [pc, #248]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1ee      	bne.n	8004b7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d105      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba4:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	4a38      	ldr	r2, [pc, #224]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80a1 	beq.w	8004cfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bba:	4b34      	ldr	r3, [pc, #208]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d05c      	beq.n	8004c80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d141      	bne.n	8004c52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bce:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <HAL_RCC_OscConfig+0x478>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd4:	f7fe fb6c 	bl	80032b0 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bdc:	f7fe fb68 	bl	80032b0 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e087      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bee:	4b27      	ldr	r3, [pc, #156]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f0      	bne.n	8004bdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	019b      	lsls	r3, r3, #6
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	3b01      	subs	r3, #1
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	061b      	lsls	r3, r3, #24
 8004c1e:	491b      	ldr	r1, [pc, #108]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c24:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <HAL_RCC_OscConfig+0x478>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2a:	f7fe fb41 	bl	80032b0 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c32:	f7fe fb3d 	bl	80032b0 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e05c      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c44:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0f0      	beq.n	8004c32 <HAL_RCC_OscConfig+0x416>
 8004c50:	e054      	b.n	8004cfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c52:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <HAL_RCC_OscConfig+0x478>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c58:	f7fe fb2a 	bl	80032b0 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c60:	f7fe fb26 	bl	80032b0 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e045      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x444>
 8004c7e:	e03d      	b.n	8004cfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d107      	bne.n	8004c98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e038      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40007000 	.word	0x40007000
 8004c94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c98:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <HAL_RCC_OscConfig+0x4ec>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d028      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d121      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d11a      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d111      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cde:	085b      	lsrs	r3, r3, #1
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d107      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40023800 	.word	0x40023800

08004d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0cc      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d20:	4b68      	ldr	r3, [pc, #416]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d90c      	bls.n	8004d48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2e:	4b65      	ldr	r3, [pc, #404]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d36:	4b63      	ldr	r3, [pc, #396]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0b8      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d020      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d60:	4b59      	ldr	r3, [pc, #356]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4a58      	ldr	r2, [pc, #352]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d78:	4b53      	ldr	r3, [pc, #332]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	4a52      	ldr	r2, [pc, #328]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d84:	4b50      	ldr	r3, [pc, #320]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	494d      	ldr	r1, [pc, #308]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d044      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d107      	bne.n	8004dba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004daa:	4b47      	ldr	r3, [pc, #284]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d119      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e07f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d003      	beq.n	8004dca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d107      	bne.n	8004dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dca:	4b3f      	ldr	r3, [pc, #252]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e06f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dda:	4b3b      	ldr	r3, [pc, #236]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e067      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dea:	4b37      	ldr	r3, [pc, #220]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f023 0203 	bic.w	r2, r3, #3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4934      	ldr	r1, [pc, #208]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dfc:	f7fe fa58 	bl	80032b0 <HAL_GetTick>
 8004e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e02:	e00a      	b.n	8004e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e04:	f7fe fa54 	bl	80032b0 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e04f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1a:	4b2b      	ldr	r3, [pc, #172]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 020c 	and.w	r2, r3, #12
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d1eb      	bne.n	8004e04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d20c      	bcs.n	8004e54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b22      	ldr	r3, [pc, #136]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	4b20      	ldr	r3, [pc, #128]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e032      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e60:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4916      	ldr	r1, [pc, #88]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d009      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e7e:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	490e      	ldr	r1, [pc, #56]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e92:	f000 f821 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8004e96:	4602      	mov	r2, r0
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	091b      	lsrs	r3, r3, #4
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	490a      	ldr	r1, [pc, #40]	; (8004ecc <HAL_RCC_ClockConfig+0x1c0>)
 8004ea4:	5ccb      	ldrb	r3, [r1, r3]
 8004ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eaa:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe f9b8 	bl	8003228 <HAL_InitTick>

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40023c00 	.word	0x40023c00
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	0800bc04 	.word	0x0800bc04
 8004ed0:	20000004 	.word	0x20000004
 8004ed4:	20000008 	.word	0x20000008

08004ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004edc:	b090      	sub	sp, #64	; 0x40
 8004ede:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee8:	2300      	movs	r3, #0
 8004eea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ef0:	4b59      	ldr	r3, [pc, #356]	; (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 030c 	and.w	r3, r3, #12
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d00d      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0x40>
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	f200 80a1 	bhi.w	8005044 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0x34>
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d003      	beq.n	8004f12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f0a:	e09b      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f0c:	4b53      	ldr	r3, [pc, #332]	; (800505c <HAL_RCC_GetSysClockFreq+0x184>)
 8004f0e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f10:	e09b      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f12:	4b53      	ldr	r3, [pc, #332]	; (8005060 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f16:	e098      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f18:	4b4f      	ldr	r3, [pc, #316]	; (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f20:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f22:	4b4d      	ldr	r3, [pc, #308]	; (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d028      	beq.n	8004f80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f2e:	4b4a      	ldr	r3, [pc, #296]	; (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	099b      	lsrs	r3, r3, #6
 8004f34:	2200      	movs	r2, #0
 8004f36:	623b      	str	r3, [r7, #32]
 8004f38:	627a      	str	r2, [r7, #36]	; 0x24
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f40:	2100      	movs	r1, #0
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f44:	fb03 f201 	mul.w	r2, r3, r1
 8004f48:	2300      	movs	r3, #0
 8004f4a:	fb00 f303 	mul.w	r3, r0, r3
 8004f4e:	4413      	add	r3, r2
 8004f50:	4a43      	ldr	r2, [pc, #268]	; (8005060 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f52:	fba0 1202 	umull	r1, r2, r0, r2
 8004f56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f58:	460a      	mov	r2, r1
 8004f5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f5e:	4413      	add	r3, r2
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f64:	2200      	movs	r2, #0
 8004f66:	61bb      	str	r3, [r7, #24]
 8004f68:	61fa      	str	r2, [r7, #28]
 8004f6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f72:	f7fb fe19 	bl	8000ba8 <__aeabi_uldivmod>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f7e:	e053      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f80:	4b35      	ldr	r3, [pc, #212]	; (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	099b      	lsrs	r3, r3, #6
 8004f86:	2200      	movs	r2, #0
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	617a      	str	r2, [r7, #20]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f92:	f04f 0b00 	mov.w	fp, #0
 8004f96:	4652      	mov	r2, sl
 8004f98:	465b      	mov	r3, fp
 8004f9a:	f04f 0000 	mov.w	r0, #0
 8004f9e:	f04f 0100 	mov.w	r1, #0
 8004fa2:	0159      	lsls	r1, r3, #5
 8004fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fa8:	0150      	lsls	r0, r2, #5
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	ebb2 080a 	subs.w	r8, r2, sl
 8004fb2:	eb63 090b 	sbc.w	r9, r3, fp
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fca:	ebb2 0408 	subs.w	r4, r2, r8
 8004fce:	eb63 0509 	sbc.w	r5, r3, r9
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	f04f 0300 	mov.w	r3, #0
 8004fda:	00eb      	lsls	r3, r5, #3
 8004fdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fe0:	00e2      	lsls	r2, r4, #3
 8004fe2:	4614      	mov	r4, r2
 8004fe4:	461d      	mov	r5, r3
 8004fe6:	eb14 030a 	adds.w	r3, r4, sl
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	eb45 030b 	adc.w	r3, r5, fp
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ffe:	4629      	mov	r1, r5
 8005000:	028b      	lsls	r3, r1, #10
 8005002:	4621      	mov	r1, r4
 8005004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005008:	4621      	mov	r1, r4
 800500a:	028a      	lsls	r2, r1, #10
 800500c:	4610      	mov	r0, r2
 800500e:	4619      	mov	r1, r3
 8005010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005012:	2200      	movs	r2, #0
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	60fa      	str	r2, [r7, #12]
 8005018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800501c:	f7fb fdc4 	bl	8000ba8 <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4613      	mov	r3, r2
 8005026:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	3301      	adds	r3, #1
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005038:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005040:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005042:	e002      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005044:	4b05      	ldr	r3, [pc, #20]	; (800505c <HAL_RCC_GetSysClockFreq+0x184>)
 8005046:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800504c:	4618      	mov	r0, r3
 800504e:	3740      	adds	r7, #64	; 0x40
 8005050:	46bd      	mov	sp, r7
 8005052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800
 800505c:	00f42400 	.word	0x00f42400
 8005060:	017d7840 	.word	0x017d7840

08005064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005068:	4b03      	ldr	r3, [pc, #12]	; (8005078 <HAL_RCC_GetHCLKFreq+0x14>)
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000004 	.word	0x20000004

0800507c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005080:	f7ff fff0 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	0a9b      	lsrs	r3, r3, #10
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4903      	ldr	r1, [pc, #12]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800
 80050a0:	0800bc14 	.word	0x0800bc14

080050a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e041      	b.n	800513a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fd fe0e 	bl	8002cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3304      	adds	r3, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f000 fd5c 	bl	8005ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e041      	b.n	80051d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d106      	bne.n	800516e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f839 	bl	80051e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3304      	adds	r3, #4
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f000 fd0d 	bl	8005ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d109      	bne.n	8005218 <HAL_TIM_PWM_Start+0x24>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	bf14      	ite	ne
 8005210:	2301      	movne	r3, #1
 8005212:	2300      	moveq	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	e022      	b.n	800525e <HAL_TIM_PWM_Start+0x6a>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b04      	cmp	r3, #4
 800521c:	d109      	bne.n	8005232 <HAL_TIM_PWM_Start+0x3e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b01      	cmp	r3, #1
 8005228:	bf14      	ite	ne
 800522a:	2301      	movne	r3, #1
 800522c:	2300      	moveq	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	e015      	b.n	800525e <HAL_TIM_PWM_Start+0x6a>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b08      	cmp	r3, #8
 8005236:	d109      	bne.n	800524c <HAL_TIM_PWM_Start+0x58>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e008      	b.n	800525e <HAL_TIM_PWM_Start+0x6a>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	bf14      	ite	ne
 8005258:	2301      	movne	r3, #1
 800525a:	2300      	moveq	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e07c      	b.n	8005360 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <HAL_TIM_PWM_Start+0x82>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005274:	e013      	b.n	800529e <HAL_TIM_PWM_Start+0xaa>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b04      	cmp	r3, #4
 800527a:	d104      	bne.n	8005286 <HAL_TIM_PWM_Start+0x92>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005284:	e00b      	b.n	800529e <HAL_TIM_PWM_Start+0xaa>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d104      	bne.n	8005296 <HAL_TIM_PWM_Start+0xa2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005294:	e003      	b.n	800529e <HAL_TIM_PWM_Start+0xaa>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2201      	movs	r2, #1
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 ff64 	bl	8006174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a2d      	ldr	r2, [pc, #180]	; (8005368 <HAL_TIM_PWM_Start+0x174>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d004      	beq.n	80052c0 <HAL_TIM_PWM_Start+0xcc>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2c      	ldr	r2, [pc, #176]	; (800536c <HAL_TIM_PWM_Start+0x178>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d101      	bne.n	80052c4 <HAL_TIM_PWM_Start+0xd0>
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <HAL_TIM_PWM_Start+0xd2>
 80052c4:	2300      	movs	r3, #0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d007      	beq.n	80052da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a22      	ldr	r2, [pc, #136]	; (8005368 <HAL_TIM_PWM_Start+0x174>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d022      	beq.n	800532a <HAL_TIM_PWM_Start+0x136>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ec:	d01d      	beq.n	800532a <HAL_TIM_PWM_Start+0x136>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1f      	ldr	r2, [pc, #124]	; (8005370 <HAL_TIM_PWM_Start+0x17c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d018      	beq.n	800532a <HAL_TIM_PWM_Start+0x136>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <HAL_TIM_PWM_Start+0x180>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d013      	beq.n	800532a <HAL_TIM_PWM_Start+0x136>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a1c      	ldr	r2, [pc, #112]	; (8005378 <HAL_TIM_PWM_Start+0x184>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00e      	beq.n	800532a <HAL_TIM_PWM_Start+0x136>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a16      	ldr	r2, [pc, #88]	; (800536c <HAL_TIM_PWM_Start+0x178>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d009      	beq.n	800532a <HAL_TIM_PWM_Start+0x136>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a18      	ldr	r2, [pc, #96]	; (800537c <HAL_TIM_PWM_Start+0x188>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d004      	beq.n	800532a <HAL_TIM_PWM_Start+0x136>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a16      	ldr	r2, [pc, #88]	; (8005380 <HAL_TIM_PWM_Start+0x18c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d111      	bne.n	800534e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b06      	cmp	r3, #6
 800533a:	d010      	beq.n	800535e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534c:	e007      	b.n	800535e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40010000 	.word	0x40010000
 800536c:	40010400 	.word	0x40010400
 8005370:	40000400 	.word	0x40000400
 8005374:	40000800 	.word	0x40000800
 8005378:	40000c00 	.word	0x40000c00
 800537c:	40014000 	.word	0x40014000
 8005380:	40001800 	.word	0x40001800

08005384 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e097      	b.n	80054c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fd fcfb 	bl	8002da8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2202      	movs	r2, #2
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6812      	ldr	r2, [r2, #0]
 80053c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c8:	f023 0307 	bic.w	r3, r3, #7
 80053cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f000 fbe1 	bl	8005ba0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	4313      	orrs	r3, r2
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005424:	f023 030c 	bic.w	r3, r3, #12
 8005428:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005430:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005434:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	4313      	orrs	r3, r2
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	011a      	lsls	r2, r3, #4
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	031b      	lsls	r3, r3, #12
 8005454:	4313      	orrs	r3, r2
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005462:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	4313      	orrs	r3, r2
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d110      	bne.n	8005522 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d102      	bne.n	800550c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005506:	7b7b      	ldrb	r3, [r7, #13]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d001      	beq.n	8005510 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e089      	b.n	8005624 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005520:	e031      	b.n	8005586 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b04      	cmp	r3, #4
 8005526:	d110      	bne.n	800554a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005528:	7bbb      	ldrb	r3, [r7, #14]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d102      	bne.n	8005534 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800552e:	7b3b      	ldrb	r3, [r7, #12]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d001      	beq.n	8005538 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e075      	b.n	8005624 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005548:	e01d      	b.n	8005586 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d108      	bne.n	8005562 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005550:	7bbb      	ldrb	r3, [r7, #14]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d105      	bne.n	8005562 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005556:	7b7b      	ldrb	r3, [r7, #13]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d102      	bne.n	8005562 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800555c:	7b3b      	ldrb	r3, [r7, #12]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d001      	beq.n	8005566 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e05e      	b.n	8005624 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2202      	movs	r2, #2
 8005572:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2202      	movs	r2, #2
 800557a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2202      	movs	r2, #2
 8005582:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_TIM_Encoder_Start_IT+0xc4>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b04      	cmp	r3, #4
 8005590:	d010      	beq.n	80055b4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005592:	e01f      	b.n	80055d4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2201      	movs	r2, #1
 800559a:	2100      	movs	r1, #0
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fde9 	bl	8006174 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0202 	orr.w	r2, r2, #2
 80055b0:	60da      	str	r2, [r3, #12]
      break;
 80055b2:	e02e      	b.n	8005612 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2201      	movs	r2, #1
 80055ba:	2104      	movs	r1, #4
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fdd9 	bl	8006174 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0204 	orr.w	r2, r2, #4
 80055d0:	60da      	str	r2, [r3, #12]
      break;
 80055d2:	e01e      	b.n	8005612 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2201      	movs	r2, #1
 80055da:	2100      	movs	r1, #0
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fdc9 	bl	8006174 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	2104      	movs	r1, #4
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fdc2 	bl	8006174 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0202 	orr.w	r2, r2, #2
 80055fe:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0204 	orr.w	r2, r2, #4
 800560e:	60da      	str	r2, [r3, #12]
      break;
 8005610:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b02      	cmp	r3, #2
 8005640:	d122      	bne.n	8005688 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b02      	cmp	r3, #2
 800564e:	d11b      	bne.n	8005688 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0202 	mvn.w	r2, #2
 8005658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fc fb7e 	bl	8001d70 <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fa73 	bl	8005b62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fa7a 	bl	8005b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b04      	cmp	r3, #4
 8005694:	d122      	bne.n	80056dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d11b      	bne.n	80056dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0204 	mvn.w	r2, #4
 80056ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2202      	movs	r2, #2
 80056b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fc fb54 	bl	8001d70 <HAL_TIM_IC_CaptureCallback>
 80056c8:	e005      	b.n	80056d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fa49 	bl	8005b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fa50 	bl	8005b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d122      	bne.n	8005730 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d11b      	bne.n	8005730 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0208 	mvn.w	r2, #8
 8005700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2204      	movs	r2, #4
 8005706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fc fb2a 	bl	8001d70 <HAL_TIM_IC_CaptureCallback>
 800571c:	e005      	b.n	800572a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fa1f 	bl	8005b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fa26 	bl	8005b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0310 	and.w	r3, r3, #16
 800573a:	2b10      	cmp	r3, #16
 800573c:	d122      	bne.n	8005784 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	2b10      	cmp	r3, #16
 800574a:	d11b      	bne.n	8005784 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0210 	mvn.w	r2, #16
 8005754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2208      	movs	r2, #8
 800575a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fc fb00 	bl	8001d70 <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f9f5 	bl	8005b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f9fc 	bl	8005b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b01      	cmp	r3, #1
 8005790:	d10e      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b01      	cmp	r3, #1
 800579e:	d107      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0201 	mvn.w	r2, #1
 80057a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f9cf 	bl	8005b4e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ba:	2b80      	cmp	r3, #128	; 0x80
 80057bc:	d10e      	bne.n	80057dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c8:	2b80      	cmp	r3, #128	; 0x80
 80057ca:	d107      	bne.n	80057dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fdca 	bl	8006370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b40      	cmp	r3, #64	; 0x40
 80057e8:	d10e      	bne.n	8005808 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	d107      	bne.n	8005808 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f9c1 	bl	8005b8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b20      	cmp	r3, #32
 8005814:	d10e      	bne.n	8005834 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b20      	cmp	r3, #32
 8005822:	d107      	bne.n	8005834 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0220 	mvn.w	r2, #32
 800582c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fd94 	bl	800635c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005848:	2300      	movs	r3, #0
 800584a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005856:	2302      	movs	r3, #2
 8005858:	e0ae      	b.n	80059b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b0c      	cmp	r3, #12
 8005866:	f200 809f 	bhi.w	80059a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	080058a5 	.word	0x080058a5
 8005874:	080059a9 	.word	0x080059a9
 8005878:	080059a9 	.word	0x080059a9
 800587c:	080059a9 	.word	0x080059a9
 8005880:	080058e5 	.word	0x080058e5
 8005884:	080059a9 	.word	0x080059a9
 8005888:	080059a9 	.word	0x080059a9
 800588c:	080059a9 	.word	0x080059a9
 8005890:	08005927 	.word	0x08005927
 8005894:	080059a9 	.word	0x080059a9
 8005898:	080059a9 	.word	0x080059a9
 800589c:	080059a9 	.word	0x080059a9
 80058a0:	08005967 	.word	0x08005967
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fa18 	bl	8005ce0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0208 	orr.w	r2, r2, #8
 80058be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0204 	bic.w	r2, r2, #4
 80058ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6999      	ldr	r1, [r3, #24]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	619a      	str	r2, [r3, #24]
      break;
 80058e2:	e064      	b.n	80059ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fa68 	bl	8005dc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800590e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6999      	ldr	r1, [r3, #24]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	021a      	lsls	r2, r3, #8
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	619a      	str	r2, [r3, #24]
      break;
 8005924:	e043      	b.n	80059ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	4618      	mov	r0, r3
 800592e:	f000 fabd 	bl	8005eac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f042 0208 	orr.w	r2, r2, #8
 8005940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0204 	bic.w	r2, r2, #4
 8005950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69d9      	ldr	r1, [r3, #28]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	61da      	str	r2, [r3, #28]
      break;
 8005964:	e023      	b.n	80059ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	4618      	mov	r0, r3
 800596e:	f000 fb11 	bl	8005f94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69da      	ldr	r2, [r3, #28]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69d9      	ldr	r1, [r3, #28]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	021a      	lsls	r2, r3, #8
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	61da      	str	r2, [r3, #28]
      break;
 80059a6:	e002      	b.n	80059ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	75fb      	strb	r3, [r7, #23]
      break;
 80059ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_TIM_ConfigClockSource+0x1c>
 80059d8:	2302      	movs	r3, #2
 80059da:	e0b4      	b.n	8005b46 <HAL_TIM_ConfigClockSource+0x186>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a14:	d03e      	beq.n	8005a94 <HAL_TIM_ConfigClockSource+0xd4>
 8005a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a1a:	f200 8087 	bhi.w	8005b2c <HAL_TIM_ConfigClockSource+0x16c>
 8005a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a22:	f000 8086 	beq.w	8005b32 <HAL_TIM_ConfigClockSource+0x172>
 8005a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2a:	d87f      	bhi.n	8005b2c <HAL_TIM_ConfigClockSource+0x16c>
 8005a2c:	2b70      	cmp	r3, #112	; 0x70
 8005a2e:	d01a      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0xa6>
 8005a30:	2b70      	cmp	r3, #112	; 0x70
 8005a32:	d87b      	bhi.n	8005b2c <HAL_TIM_ConfigClockSource+0x16c>
 8005a34:	2b60      	cmp	r3, #96	; 0x60
 8005a36:	d050      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0x11a>
 8005a38:	2b60      	cmp	r3, #96	; 0x60
 8005a3a:	d877      	bhi.n	8005b2c <HAL_TIM_ConfigClockSource+0x16c>
 8005a3c:	2b50      	cmp	r3, #80	; 0x50
 8005a3e:	d03c      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0xfa>
 8005a40:	2b50      	cmp	r3, #80	; 0x50
 8005a42:	d873      	bhi.n	8005b2c <HAL_TIM_ConfigClockSource+0x16c>
 8005a44:	2b40      	cmp	r3, #64	; 0x40
 8005a46:	d058      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0x13a>
 8005a48:	2b40      	cmp	r3, #64	; 0x40
 8005a4a:	d86f      	bhi.n	8005b2c <HAL_TIM_ConfigClockSource+0x16c>
 8005a4c:	2b30      	cmp	r3, #48	; 0x30
 8005a4e:	d064      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x15a>
 8005a50:	2b30      	cmp	r3, #48	; 0x30
 8005a52:	d86b      	bhi.n	8005b2c <HAL_TIM_ConfigClockSource+0x16c>
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d060      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x15a>
 8005a58:	2b20      	cmp	r3, #32
 8005a5a:	d867      	bhi.n	8005b2c <HAL_TIM_ConfigClockSource+0x16c>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d05c      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x15a>
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d05a      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x15a>
 8005a64:	e062      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	6899      	ldr	r1, [r3, #8]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f000 fb5d 	bl	8006134 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	609a      	str	r2, [r3, #8]
      break;
 8005a92:	e04f      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	6899      	ldr	r1, [r3, #8]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f000 fb46 	bl	8006134 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ab6:	609a      	str	r2, [r3, #8]
      break;
 8005ab8:	e03c      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6859      	ldr	r1, [r3, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f000 faba 	bl	8006040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2150      	movs	r1, #80	; 0x50
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fb13 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 8005ad8:	e02c      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	6859      	ldr	r1, [r3, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f000 fad9 	bl	800609e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2160      	movs	r1, #96	; 0x60
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fb03 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 8005af8:	e01c      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	6859      	ldr	r1, [r3, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	461a      	mov	r2, r3
 8005b08:	f000 fa9a 	bl	8006040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2140      	movs	r1, #64	; 0x40
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 faf3 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 8005b18:	e00c      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4619      	mov	r1, r3
 8005b24:	4610      	mov	r0, r2
 8005b26:	f000 faea 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 8005b2a:	e003      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b30:	e000      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a40      	ldr	r2, [pc, #256]	; (8005cb4 <TIM_Base_SetConfig+0x114>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d013      	beq.n	8005be0 <TIM_Base_SetConfig+0x40>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbe:	d00f      	beq.n	8005be0 <TIM_Base_SetConfig+0x40>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a3d      	ldr	r2, [pc, #244]	; (8005cb8 <TIM_Base_SetConfig+0x118>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00b      	beq.n	8005be0 <TIM_Base_SetConfig+0x40>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a3c      	ldr	r2, [pc, #240]	; (8005cbc <TIM_Base_SetConfig+0x11c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d007      	beq.n	8005be0 <TIM_Base_SetConfig+0x40>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a3b      	ldr	r2, [pc, #236]	; (8005cc0 <TIM_Base_SetConfig+0x120>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a3a      	ldr	r2, [pc, #232]	; (8005cc4 <TIM_Base_SetConfig+0x124>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d108      	bne.n	8005bf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a2f      	ldr	r2, [pc, #188]	; (8005cb4 <TIM_Base_SetConfig+0x114>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d02b      	beq.n	8005c52 <TIM_Base_SetConfig+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c00:	d027      	beq.n	8005c52 <TIM_Base_SetConfig+0xb2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a2c      	ldr	r2, [pc, #176]	; (8005cb8 <TIM_Base_SetConfig+0x118>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d023      	beq.n	8005c52 <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a2b      	ldr	r2, [pc, #172]	; (8005cbc <TIM_Base_SetConfig+0x11c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d01f      	beq.n	8005c52 <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2a      	ldr	r2, [pc, #168]	; (8005cc0 <TIM_Base_SetConfig+0x120>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d01b      	beq.n	8005c52 <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a29      	ldr	r2, [pc, #164]	; (8005cc4 <TIM_Base_SetConfig+0x124>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d017      	beq.n	8005c52 <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a28      	ldr	r2, [pc, #160]	; (8005cc8 <TIM_Base_SetConfig+0x128>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d013      	beq.n	8005c52 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a27      	ldr	r2, [pc, #156]	; (8005ccc <TIM_Base_SetConfig+0x12c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00f      	beq.n	8005c52 <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a26      	ldr	r2, [pc, #152]	; (8005cd0 <TIM_Base_SetConfig+0x130>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00b      	beq.n	8005c52 <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a25      	ldr	r2, [pc, #148]	; (8005cd4 <TIM_Base_SetConfig+0x134>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d007      	beq.n	8005c52 <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a24      	ldr	r2, [pc, #144]	; (8005cd8 <TIM_Base_SetConfig+0x138>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d003      	beq.n	8005c52 <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a23      	ldr	r2, [pc, #140]	; (8005cdc <TIM_Base_SetConfig+0x13c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d108      	bne.n	8005c64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a0a      	ldr	r2, [pc, #40]	; (8005cb4 <TIM_Base_SetConfig+0x114>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <TIM_Base_SetConfig+0xf8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a0c      	ldr	r2, [pc, #48]	; (8005cc4 <TIM_Base_SetConfig+0x124>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d103      	bne.n	8005ca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	615a      	str	r2, [r3, #20]
}
 8005ca6:	bf00      	nop
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40000400 	.word	0x40000400
 8005cbc:	40000800 	.word	0x40000800
 8005cc0:	40000c00 	.word	0x40000c00
 8005cc4:	40010400 	.word	0x40010400
 8005cc8:	40014000 	.word	0x40014000
 8005ccc:	40014400 	.word	0x40014400
 8005cd0:	40014800 	.word	0x40014800
 8005cd4:	40001800 	.word	0x40001800
 8005cd8:	40001c00 	.word	0x40001c00
 8005cdc:	40002000 	.word	0x40002000

08005ce0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f023 0201 	bic.w	r2, r3, #1
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0303 	bic.w	r3, r3, #3
 8005d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f023 0302 	bic.w	r3, r3, #2
 8005d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a20      	ldr	r2, [pc, #128]	; (8005db8 <TIM_OC1_SetConfig+0xd8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_OC1_SetConfig+0x64>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a1f      	ldr	r2, [pc, #124]	; (8005dbc <TIM_OC1_SetConfig+0xdc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d10c      	bne.n	8005d5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0308 	bic.w	r3, r3, #8
 8005d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f023 0304 	bic.w	r3, r3, #4
 8005d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a15      	ldr	r2, [pc, #84]	; (8005db8 <TIM_OC1_SetConfig+0xd8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d003      	beq.n	8005d6e <TIM_OC1_SetConfig+0x8e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a14      	ldr	r2, [pc, #80]	; (8005dbc <TIM_OC1_SetConfig+0xdc>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d111      	bne.n	8005d92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	621a      	str	r2, [r3, #32]
}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	40010000 	.word	0x40010000
 8005dbc:	40010400 	.word	0x40010400

08005dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	f023 0210 	bic.w	r2, r3, #16
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	021b      	lsls	r3, r3, #8
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f023 0320 	bic.w	r3, r3, #32
 8005e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a22      	ldr	r2, [pc, #136]	; (8005ea4 <TIM_OC2_SetConfig+0xe4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_OC2_SetConfig+0x68>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a21      	ldr	r2, [pc, #132]	; (8005ea8 <TIM_OC2_SetConfig+0xe8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d10d      	bne.n	8005e44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a17      	ldr	r2, [pc, #92]	; (8005ea4 <TIM_OC2_SetConfig+0xe4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d003      	beq.n	8005e54 <TIM_OC2_SetConfig+0x94>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a16      	ldr	r2, [pc, #88]	; (8005ea8 <TIM_OC2_SetConfig+0xe8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d113      	bne.n	8005e7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40010000 	.word	0x40010000
 8005ea8:	40010400 	.word	0x40010400

08005eac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0303 	bic.w	r3, r3, #3
 8005ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	021b      	lsls	r3, r3, #8
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a21      	ldr	r2, [pc, #132]	; (8005f8c <TIM_OC3_SetConfig+0xe0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d003      	beq.n	8005f12 <TIM_OC3_SetConfig+0x66>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a20      	ldr	r2, [pc, #128]	; (8005f90 <TIM_OC3_SetConfig+0xe4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d10d      	bne.n	8005f2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	021b      	lsls	r3, r3, #8
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a16      	ldr	r2, [pc, #88]	; (8005f8c <TIM_OC3_SetConfig+0xe0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d003      	beq.n	8005f3e <TIM_OC3_SetConfig+0x92>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a15      	ldr	r2, [pc, #84]	; (8005f90 <TIM_OC3_SetConfig+0xe4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d113      	bne.n	8005f66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	621a      	str	r2, [r3, #32]
}
 8005f80:	bf00      	nop
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	40010000 	.word	0x40010000
 8005f90:	40010400 	.word	0x40010400

08005f94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	021b      	lsls	r3, r3, #8
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	031b      	lsls	r3, r3, #12
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a12      	ldr	r2, [pc, #72]	; (8006038 <TIM_OC4_SetConfig+0xa4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d003      	beq.n	8005ffc <TIM_OC4_SetConfig+0x68>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a11      	ldr	r2, [pc, #68]	; (800603c <TIM_OC4_SetConfig+0xa8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d109      	bne.n	8006010 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006002:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	019b      	lsls	r3, r3, #6
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40010000 	.word	0x40010000
 800603c:	40010400 	.word	0x40010400

08006040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0201 	bic.w	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f023 030a 	bic.w	r3, r3, #10
 800607c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800609e:	b480      	push	{r7}
 80060a0:	b087      	sub	sp, #28
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f023 0210 	bic.w	r2, r3, #16
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	031b      	lsls	r3, r3, #12
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	f043 0307 	orr.w	r3, r3, #7
 8006120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	609a      	str	r2, [r3, #8]
}
 8006128:	bf00      	nop
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800614e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	021a      	lsls	r2, r3, #8
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	431a      	orrs	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4313      	orrs	r3, r2
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	609a      	str	r2, [r3, #8]
}
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	2201      	movs	r2, #1
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1a      	ldr	r2, [r3, #32]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	43db      	mvns	r3, r3
 8006196:	401a      	ands	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a1a      	ldr	r2, [r3, #32]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	fa01 f303 	lsl.w	r3, r1, r3
 80061ac:	431a      	orrs	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
	...

080061c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d101      	bne.n	80061d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061d4:	2302      	movs	r3, #2
 80061d6:	e05a      	b.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a21      	ldr	r2, [pc, #132]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d022      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006224:	d01d      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a1d      	ldr	r2, [pc, #116]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d018      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1b      	ldr	r2, [pc, #108]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d013      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1a      	ldr	r2, [pc, #104]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00e      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a18      	ldr	r2, [pc, #96]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d009      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a17      	ldr	r2, [pc, #92]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d004      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a15      	ldr	r2, [pc, #84]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d10c      	bne.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006268:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	4313      	orrs	r3, r2
 8006272:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40010000 	.word	0x40010000
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800
 80062a8:	40000c00 	.word	0x40000c00
 80062ac:	40010400 	.word	0x40010400
 80062b0:	40014000 	.word	0x40014000
 80062b4:	40001800 	.word	0x40001800

080062b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e03d      	b.n	8006350 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <__NVIC_SetPriority>:
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	4603      	mov	r3, r0
 800638c:	6039      	str	r1, [r7, #0]
 800638e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006394:	2b00      	cmp	r3, #0
 8006396:	db0a      	blt.n	80063ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	b2da      	uxtb	r2, r3
 800639c:	490c      	ldr	r1, [pc, #48]	; (80063d0 <__NVIC_SetPriority+0x4c>)
 800639e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a2:	0112      	lsls	r2, r2, #4
 80063a4:	b2d2      	uxtb	r2, r2
 80063a6:	440b      	add	r3, r1
 80063a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80063ac:	e00a      	b.n	80063c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	4908      	ldr	r1, [pc, #32]	; (80063d4 <__NVIC_SetPriority+0x50>)
 80063b4:	79fb      	ldrb	r3, [r7, #7]
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	3b04      	subs	r3, #4
 80063bc:	0112      	lsls	r2, r2, #4
 80063be:	b2d2      	uxtb	r2, r2
 80063c0:	440b      	add	r3, r1
 80063c2:	761a      	strb	r2, [r3, #24]
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	e000e100 	.word	0xe000e100
 80063d4:	e000ed00 	.word	0xe000ed00

080063d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80063dc:	2100      	movs	r1, #0
 80063de:	f06f 0004 	mvn.w	r0, #4
 80063e2:	f7ff ffcf 	bl	8006384 <__NVIC_SetPriority>
#endif
}
 80063e6:	bf00      	nop
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063f2:	f3ef 8305 	mrs	r3, IPSR
 80063f6:	603b      	str	r3, [r7, #0]
  return(result);
 80063f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80063fe:	f06f 0305 	mvn.w	r3, #5
 8006402:	607b      	str	r3, [r7, #4]
 8006404:	e00c      	b.n	8006420 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006406:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <osKernelInitialize+0x44>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d105      	bne.n	800641a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800640e:	4b08      	ldr	r3, [pc, #32]	; (8006430 <osKernelInitialize+0x44>)
 8006410:	2201      	movs	r2, #1
 8006412:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006414:	2300      	movs	r3, #0
 8006416:	607b      	str	r3, [r7, #4]
 8006418:	e002      	b.n	8006420 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800641a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800641e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006420:	687b      	ldr	r3, [r7, #4]
}
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	20000814 	.word	0x20000814

08006434 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800643a:	f3ef 8305 	mrs	r3, IPSR
 800643e:	603b      	str	r3, [r7, #0]
  return(result);
 8006440:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006446:	f06f 0305 	mvn.w	r3, #5
 800644a:	607b      	str	r3, [r7, #4]
 800644c:	e010      	b.n	8006470 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800644e:	4b0b      	ldr	r3, [pc, #44]	; (800647c <osKernelStart+0x48>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d109      	bne.n	800646a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006456:	f7ff ffbf 	bl	80063d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800645a:	4b08      	ldr	r3, [pc, #32]	; (800647c <osKernelStart+0x48>)
 800645c:	2202      	movs	r2, #2
 800645e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006460:	f001 f9e0 	bl	8007824 <vTaskStartScheduler>
      stat = osOK;
 8006464:	2300      	movs	r3, #0
 8006466:	607b      	str	r3, [r7, #4]
 8006468:	e002      	b.n	8006470 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800646a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800646e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006470:	687b      	ldr	r3, [r7, #4]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20000814 	.word	0x20000814

08006480 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006480:	b580      	push	{r7, lr}
 8006482:	b08e      	sub	sp, #56	; 0x38
 8006484:	af04      	add	r7, sp, #16
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800648c:	2300      	movs	r3, #0
 800648e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006490:	f3ef 8305 	mrs	r3, IPSR
 8006494:	617b      	str	r3, [r7, #20]
  return(result);
 8006496:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006498:	2b00      	cmp	r3, #0
 800649a:	d17e      	bne.n	800659a <osThreadNew+0x11a>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d07b      	beq.n	800659a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80064a2:	2380      	movs	r3, #128	; 0x80
 80064a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80064a6:	2318      	movs	r3, #24
 80064a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80064ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d045      	beq.n	8006546 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <osThreadNew+0x48>
        name = attr->name;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d008      	beq.n	80064ee <osThreadNew+0x6e>
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b38      	cmp	r3, #56	; 0x38
 80064e0:	d805      	bhi.n	80064ee <osThreadNew+0x6e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <osThreadNew+0x72>
        return (NULL);
 80064ee:	2300      	movs	r3, #0
 80064f0:	e054      	b.n	800659c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	089b      	lsrs	r3, r3, #2
 8006500:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00e      	beq.n	8006528 <osThreadNew+0xa8>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	2b5b      	cmp	r3, #91	; 0x5b
 8006510:	d90a      	bls.n	8006528 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006516:	2b00      	cmp	r3, #0
 8006518:	d006      	beq.n	8006528 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <osThreadNew+0xa8>
        mem = 1;
 8006522:	2301      	movs	r3, #1
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	e010      	b.n	800654a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10c      	bne.n	800654a <osThreadNew+0xca>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d108      	bne.n	800654a <osThreadNew+0xca>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d104      	bne.n	800654a <osThreadNew+0xca>
          mem = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	61bb      	str	r3, [r7, #24]
 8006544:	e001      	b.n	800654a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d110      	bne.n	8006572 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006558:	9202      	str	r2, [sp, #8]
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	6a3a      	ldr	r2, [r7, #32]
 8006564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 ff86 	bl	8007478 <xTaskCreateStatic>
 800656c:	4603      	mov	r3, r0
 800656e:	613b      	str	r3, [r7, #16]
 8006570:	e013      	b.n	800659a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d110      	bne.n	800659a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	b29a      	uxth	r2, r3
 800657c:	f107 0310 	add.w	r3, r7, #16
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 ffd1 	bl	8007532 <xTaskCreate>
 8006590:	4603      	mov	r3, r0
 8006592:	2b01      	cmp	r3, #1
 8006594:	d001      	beq.n	800659a <osThreadNew+0x11a>
            hTask = NULL;
 8006596:	2300      	movs	r3, #0
 8006598:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800659a:	693b      	ldr	r3, [r7, #16]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3728      	adds	r7, #40	; 0x28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065ac:	f3ef 8305 	mrs	r3, IPSR
 80065b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80065b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <osDelay+0x1c>
    stat = osErrorISR;
 80065b8:	f06f 0305 	mvn.w	r3, #5
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	e007      	b.n	80065d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f001 f8f6 	bl	80077bc <vTaskDelay>
    }
  }

  return (stat);
 80065d0:	68fb      	ldr	r3, [r7, #12]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80065da:	b580      	push	{r7, lr}
 80065dc:	b08a      	sub	sp, #40	; 0x28
 80065de:	af02      	add	r7, sp, #8
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	60b9      	str	r1, [r7, #8]
 80065e4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065ea:	f3ef 8305 	mrs	r3, IPSR
 80065ee:	613b      	str	r3, [r7, #16]
  return(result);
 80065f0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d175      	bne.n	80066e2 <osSemaphoreNew+0x108>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d072      	beq.n	80066e2 <osSemaphoreNew+0x108>
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	429a      	cmp	r2, r3
 8006602:	d86e      	bhi.n	80066e2 <osSemaphoreNew+0x108>
    mem = -1;
 8006604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006608:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d015      	beq.n	800663c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d006      	beq.n	8006626 <osSemaphoreNew+0x4c>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	2b4f      	cmp	r3, #79	; 0x4f
 800661e:	d902      	bls.n	8006626 <osSemaphoreNew+0x4c>
        mem = 1;
 8006620:	2301      	movs	r3, #1
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	e00c      	b.n	8006640 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d108      	bne.n	8006640 <osSemaphoreNew+0x66>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <osSemaphoreNew+0x66>
          mem = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	e001      	b.n	8006640 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006646:	d04c      	beq.n	80066e2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d128      	bne.n	80066a0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d10a      	bne.n	800666a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	2203      	movs	r2, #3
 800665a:	9200      	str	r2, [sp, #0]
 800665c:	2200      	movs	r2, #0
 800665e:	2100      	movs	r1, #0
 8006660:	2001      	movs	r0, #1
 8006662:	f000 f993 	bl	800698c <xQueueGenericCreateStatic>
 8006666:	61f8      	str	r0, [r7, #28]
 8006668:	e005      	b.n	8006676 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800666a:	2203      	movs	r2, #3
 800666c:	2100      	movs	r1, #0
 800666e:	2001      	movs	r0, #1
 8006670:	f000 fa04 	bl	8006a7c <xQueueGenericCreate>
 8006674:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d022      	beq.n	80066c2 <osSemaphoreNew+0xe8>
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d01f      	beq.n	80066c2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006682:	2300      	movs	r3, #0
 8006684:	2200      	movs	r2, #0
 8006686:	2100      	movs	r1, #0
 8006688:	69f8      	ldr	r0, [r7, #28]
 800668a:	f000 fabf 	bl	8006c0c <xQueueGenericSend>
 800668e:	4603      	mov	r3, r0
 8006690:	2b01      	cmp	r3, #1
 8006692:	d016      	beq.n	80066c2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006694:	69f8      	ldr	r0, [r7, #28]
 8006696:	f000 fd33 	bl	8007100 <vQueueDelete>
            hSemaphore = NULL;
 800669a:	2300      	movs	r3, #0
 800669c:	61fb      	str	r3, [r7, #28]
 800669e:	e010      	b.n	80066c2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d108      	bne.n	80066b8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	461a      	mov	r2, r3
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fa41 	bl	8006b36 <xQueueCreateCountingSemaphoreStatic>
 80066b4:	61f8      	str	r0, [r7, #28]
 80066b6:	e004      	b.n	80066c2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 fa72 	bl	8006ba4 <xQueueCreateCountingSemaphore>
 80066c0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00c      	beq.n	80066e2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	e001      	b.n	80066da <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80066da:	6979      	ldr	r1, [r7, #20]
 80066dc:	69f8      	ldr	r0, [r7, #28]
 80066de:	f000 fe43 	bl	8007368 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80066e2:	69fb      	ldr	r3, [r7, #28]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3720      	adds	r7, #32
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4a07      	ldr	r2, [pc, #28]	; (8006718 <vApplicationGetIdleTaskMemory+0x2c>)
 80066fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4a06      	ldr	r2, [pc, #24]	; (800671c <vApplicationGetIdleTaskMemory+0x30>)
 8006702:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2280      	movs	r2, #128	; 0x80
 8006708:	601a      	str	r2, [r3, #0]
}
 800670a:	bf00      	nop
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20000818 	.word	0x20000818
 800671c:	20000874 	.word	0x20000874

08006720 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4a07      	ldr	r2, [pc, #28]	; (800674c <vApplicationGetTimerTaskMemory+0x2c>)
 8006730:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4a06      	ldr	r2, [pc, #24]	; (8006750 <vApplicationGetTimerTaskMemory+0x30>)
 8006736:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800673e:	601a      	str	r2, [r3, #0]
}
 8006740:	bf00      	nop
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	20000a74 	.word	0x20000a74
 8006750:	20000ad0 	.word	0x20000ad0

08006754 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f103 0208 	add.w	r2, r3, #8
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800676c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f103 0208 	add.w	r2, r3, #8
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f103 0208 	add.w	r2, r3, #8
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067ae:	b480      	push	{r7}
 80067b0:	b085      	sub	sp, #20
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	601a      	str	r2, [r3, #0]
}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067f6:	b480      	push	{r7}
 80067f8:	b085      	sub	sp, #20
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800680c:	d103      	bne.n	8006816 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e00c      	b.n	8006830 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3308      	adds	r3, #8
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	e002      	b.n	8006824 <vListInsert+0x2e>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	429a      	cmp	r2, r3
 800682e:	d2f6      	bcs.n	800681e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	601a      	str	r2, [r3, #0]
}
 800685c:	bf00      	nop
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6892      	ldr	r2, [r2, #8]
 800687e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6852      	ldr	r2, [r2, #4]
 8006888:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d103      	bne.n	800689c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	1e5a      	subs	r2, r3, #1
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068e2:	bf00      	nop
 80068e4:	e7fe      	b.n	80068e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068e6:	f002 f93d 	bl	8008b64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f2:	68f9      	ldr	r1, [r7, #12]
 80068f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068f6:	fb01 f303 	mul.w	r3, r1, r3
 80068fa:	441a      	add	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006916:	3b01      	subs	r3, #1
 8006918:	68f9      	ldr	r1, [r7, #12]
 800691a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800691c:	fb01 f303 	mul.w	r3, r1, r3
 8006920:	441a      	add	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	22ff      	movs	r2, #255	; 0xff
 800692a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	22ff      	movs	r2, #255	; 0xff
 8006932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d114      	bne.n	8006966 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01a      	beq.n	800697a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3310      	adds	r3, #16
 8006948:	4618      	mov	r0, r3
 800694a:	f001 f9f5 	bl	8007d38 <xTaskRemoveFromEventList>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d012      	beq.n	800697a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006954:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <xQueueGenericReset+0xcc>)
 8006956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	e009      	b.n	800697a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3310      	adds	r3, #16
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff fef2 	bl	8006754 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3324      	adds	r3, #36	; 0x24
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff feed 	bl	8006754 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800697a:	f002 f923 	bl	8008bc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800697e:	2301      	movs	r3, #1
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08e      	sub	sp, #56	; 0x38
 8006990:	af02      	add	r7, sp, #8
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069ce:	bf00      	nop
 80069d0:	e7fe      	b.n	80069d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <xQueueGenericCreateStatic+0x52>
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <xQueueGenericCreateStatic+0x56>
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <xQueueGenericCreateStatic+0x58>
 80069e2:	2300      	movs	r3, #0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10a      	bne.n	80069fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	623b      	str	r3, [r7, #32]
}
 80069fa:	bf00      	nop
 80069fc:	e7fe      	b.n	80069fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <xQueueGenericCreateStatic+0x7e>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <xQueueGenericCreateStatic+0x82>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <xQueueGenericCreateStatic+0x84>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	61fb      	str	r3, [r7, #28]
}
 8006a26:	bf00      	nop
 8006a28:	e7fe      	b.n	8006a28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a2a:	2350      	movs	r3, #80	; 0x50
 8006a2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b50      	cmp	r3, #80	; 0x50
 8006a32:	d00a      	beq.n	8006a4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	61bb      	str	r3, [r7, #24]
}
 8006a46:	bf00      	nop
 8006a48:	e7fe      	b.n	8006a48 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00d      	beq.n	8006a72 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	4613      	mov	r3, r2
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	68b9      	ldr	r1, [r7, #8]
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f83f 	bl	8006af0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3730      	adds	r7, #48	; 0x30
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08a      	sub	sp, #40	; 0x28
 8006a80:	af02      	add	r7, sp, #8
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	4613      	mov	r3, r2
 8006a88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10a      	bne.n	8006aa6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	613b      	str	r3, [r7, #16]
}
 8006aa2:	bf00      	nop
 8006aa4:	e7fe      	b.n	8006aa4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	fb02 f303 	mul.w	r3, r2, r3
 8006aae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	3350      	adds	r3, #80	; 0x50
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f002 f977 	bl	8008da8 <pvPortMalloc>
 8006aba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d011      	beq.n	8006ae6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	3350      	adds	r3, #80	; 0x50
 8006aca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ad4:	79fa      	ldrb	r2, [r7, #7]
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	4613      	mov	r3, r2
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 f805 	bl	8006af0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ae6:	69bb      	ldr	r3, [r7, #24]
	}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3720      	adds	r7, #32
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d103      	bne.n	8006b0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	e002      	b.n	8006b12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b1e:	2101      	movs	r1, #1
 8006b20:	69b8      	ldr	r0, [r7, #24]
 8006b22:	f7ff fecb 	bl	80068bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	78fa      	ldrb	r2, [r7, #3]
 8006b2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b08a      	sub	sp, #40	; 0x28
 8006b3a:	af02      	add	r7, sp, #8
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10a      	bne.n	8006b5e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	61bb      	str	r3, [r7, #24]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d90a      	bls.n	8006b7c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	617b      	str	r3, [r7, #20]
}
 8006b78:	bf00      	nop
 8006b7a:	e7fe      	b.n	8006b7a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	2100      	movs	r1, #0
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f7ff ff00 	bl	800698c <xQueueGenericCreateStatic>
 8006b8c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006b9a:	69fb      	ldr	r3, [r7, #28]
	}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3720      	adds	r7, #32
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	613b      	str	r3, [r7, #16]
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d90a      	bls.n	8006be8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	60fb      	str	r3, [r7, #12]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006be8:	2202      	movs	r2, #2
 8006bea:	2100      	movs	r1, #0
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff ff45 	bl	8006a7c <xQueueGenericCreate>
 8006bf2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006c00:	697b      	ldr	r3, [r7, #20]
	}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08e      	sub	sp, #56	; 0x38
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <xQueueGenericSend+0x32>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d103      	bne.n	8006c4c <xQueueGenericSend+0x40>
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <xQueueGenericSend+0x44>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e000      	b.n	8006c52 <xQueueGenericSend+0x46>
 8006c50:	2300      	movs	r3, #0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10a      	bne.n	8006c6c <xQueueGenericSend+0x60>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d103      	bne.n	8006c7a <xQueueGenericSend+0x6e>
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <xQueueGenericSend+0x72>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <xQueueGenericSend+0x74>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <xQueueGenericSend+0x8e>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	623b      	str	r3, [r7, #32]
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c9a:	f001 fa0b 	bl	80080b4 <xTaskGetSchedulerState>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d102      	bne.n	8006caa <xQueueGenericSend+0x9e>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <xQueueGenericSend+0xa2>
 8006caa:	2301      	movs	r3, #1
 8006cac:	e000      	b.n	8006cb0 <xQueueGenericSend+0xa4>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <xQueueGenericSend+0xbe>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	61fb      	str	r3, [r7, #28]
}
 8006cc6:	bf00      	nop
 8006cc8:	e7fe      	b.n	8006cc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cca:	f001 ff4b 	bl	8008b64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d302      	bcc.n	8006ce0 <xQueueGenericSend+0xd4>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d129      	bne.n	8006d34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ce6:	f000 fa2e 	bl	8007146 <prvCopyDataToQueue>
 8006cea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d010      	beq.n	8006d16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	3324      	adds	r3, #36	; 0x24
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 f81d 	bl	8007d38 <xTaskRemoveFromEventList>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d013      	beq.n	8006d2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d04:	4b3f      	ldr	r3, [pc, #252]	; (8006e04 <xQueueGenericSend+0x1f8>)
 8006d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	e00a      	b.n	8006d2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d1c:	4b39      	ldr	r3, [pc, #228]	; (8006e04 <xQueueGenericSend+0x1f8>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d2c:	f001 ff4a 	bl	8008bc4 <vPortExitCritical>
				return pdPASS;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e063      	b.n	8006dfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d103      	bne.n	8006d42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d3a:	f001 ff43 	bl	8008bc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e05c      	b.n	8006dfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d106      	bne.n	8006d56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d48:	f107 0314 	add.w	r3, r7, #20
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f001 f857 	bl	8007e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d52:	2301      	movs	r3, #1
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d56:	f001 ff35 	bl	8008bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d5a:	f000 fdc9 	bl	80078f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d5e:	f001 ff01 	bl	8008b64 <vPortEnterCritical>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d68:	b25b      	sxtb	r3, r3
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d6e:	d103      	bne.n	8006d78 <xQueueGenericSend+0x16c>
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d7e:	b25b      	sxtb	r3, r3
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d84:	d103      	bne.n	8006d8e <xQueueGenericSend+0x182>
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d8e:	f001 ff19 	bl	8008bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d92:	1d3a      	adds	r2, r7, #4
 8006d94:	f107 0314 	add.w	r3, r7, #20
 8006d98:	4611      	mov	r1, r2
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f001 f846 	bl	8007e2c <xTaskCheckForTimeOut>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d124      	bne.n	8006df0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006da6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006da8:	f000 fac5 	bl	8007336 <prvIsQueueFull>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d018      	beq.n	8006de4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	3310      	adds	r3, #16
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	4611      	mov	r1, r2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 ff6c 	bl	8007c98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dc2:	f000 fa50 	bl	8007266 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006dc6:	f000 fda1 	bl	800790c <xTaskResumeAll>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f47f af7c 	bne.w	8006cca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <xQueueGenericSend+0x1f8>)
 8006dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	e772      	b.n	8006cca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006de6:	f000 fa3e 	bl	8007266 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dea:	f000 fd8f 	bl	800790c <xTaskResumeAll>
 8006dee:	e76c      	b.n	8006cca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006df2:	f000 fa38 	bl	8007266 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006df6:	f000 fd89 	bl	800790c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3738      	adds	r7, #56	; 0x38
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	e000ed04 	.word	0xe000ed04

08006e08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b090      	sub	sp, #64	; 0x40
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10a      	bne.n	8006e36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d103      	bne.n	8006e44 <xQueueGenericSendFromISR+0x3c>
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <xQueueGenericSendFromISR+0x40>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e000      	b.n	8006e4a <xQueueGenericSendFromISR+0x42>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d103      	bne.n	8006e72 <xQueueGenericSendFromISR+0x6a>
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d101      	bne.n	8006e76 <xQueueGenericSendFromISR+0x6e>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e000      	b.n	8006e78 <xQueueGenericSendFromISR+0x70>
 8006e76:	2300      	movs	r3, #0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	623b      	str	r3, [r7, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	e7fe      	b.n	8006e90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e92:	f001 ff49 	bl	8008d28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e96:	f3ef 8211 	mrs	r2, BASEPRI
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	61fa      	str	r2, [r7, #28]
 8006eac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006eae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d302      	bcc.n	8006ec4 <xQueueGenericSendFromISR+0xbc>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d12f      	bne.n	8006f24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	68b9      	ldr	r1, [r7, #8]
 8006ed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006eda:	f000 f934 	bl	8007146 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ede:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ee6:	d112      	bne.n	8006f0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d016      	beq.n	8006f1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	3324      	adds	r3, #36	; 0x24
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 ff1f 	bl	8007d38 <xTaskRemoveFromEventList>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00e      	beq.n	8006f1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00b      	beq.n	8006f1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	e007      	b.n	8006f1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f12:	3301      	adds	r3, #1
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	b25a      	sxtb	r2, r3
 8006f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006f22:	e001      	b.n	8006f28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3740      	adds	r7, #64	; 0x40
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
	...

08006f40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08c      	sub	sp, #48	; 0x30
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10a      	bne.n	8006f70 <xQueueReceive+0x30>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	623b      	str	r3, [r7, #32]
}
 8006f6c:	bf00      	nop
 8006f6e:	e7fe      	b.n	8006f6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d103      	bne.n	8006f7e <xQueueReceive+0x3e>
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <xQueueReceive+0x42>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <xQueueReceive+0x44>
 8006f82:	2300      	movs	r3, #0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <xQueueReceive+0x5e>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	61fb      	str	r3, [r7, #28]
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f9e:	f001 f889 	bl	80080b4 <xTaskGetSchedulerState>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d102      	bne.n	8006fae <xQueueReceive+0x6e>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <xQueueReceive+0x72>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <xQueueReceive+0x74>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10a      	bne.n	8006fce <xQueueReceive+0x8e>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	61bb      	str	r3, [r7, #24]
}
 8006fca:	bf00      	nop
 8006fcc:	e7fe      	b.n	8006fcc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fce:	f001 fdc9 	bl	8008b64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d01f      	beq.n	800701e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fde:	68b9      	ldr	r1, [r7, #8]
 8006fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe2:	f000 f91a 	bl	800721a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	1e5a      	subs	r2, r3, #1
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00f      	beq.n	8007016 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff8:	3310      	adds	r3, #16
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 fe9c 	bl	8007d38 <xTaskRemoveFromEventList>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007006:	4b3d      	ldr	r3, [pc, #244]	; (80070fc <xQueueReceive+0x1bc>)
 8007008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007016:	f001 fdd5 	bl	8008bc4 <vPortExitCritical>
				return pdPASS;
 800701a:	2301      	movs	r3, #1
 800701c:	e069      	b.n	80070f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d103      	bne.n	800702c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007024:	f001 fdce 	bl	8008bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007028:	2300      	movs	r3, #0
 800702a:	e062      	b.n	80070f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007032:	f107 0310 	add.w	r3, r7, #16
 8007036:	4618      	mov	r0, r3
 8007038:	f000 fee2 	bl	8007e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800703c:	2301      	movs	r3, #1
 800703e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007040:	f001 fdc0 	bl	8008bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007044:	f000 fc54 	bl	80078f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007048:	f001 fd8c 	bl	8008b64 <vPortEnterCritical>
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007052:	b25b      	sxtb	r3, r3
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007058:	d103      	bne.n	8007062 <xQueueReceive+0x122>
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007068:	b25b      	sxtb	r3, r3
 800706a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800706e:	d103      	bne.n	8007078 <xQueueReceive+0x138>
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007078:	f001 fda4 	bl	8008bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800707c:	1d3a      	adds	r2, r7, #4
 800707e:	f107 0310 	add.w	r3, r7, #16
 8007082:	4611      	mov	r1, r2
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fed1 	bl	8007e2c <xTaskCheckForTimeOut>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d123      	bne.n	80070d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007092:	f000 f93a 	bl	800730a <prvIsQueueEmpty>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d017      	beq.n	80070cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	3324      	adds	r3, #36	; 0x24
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	4611      	mov	r1, r2
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fdf7 	bl	8007c98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ac:	f000 f8db 	bl	8007266 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070b0:	f000 fc2c 	bl	800790c <xTaskResumeAll>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d189      	bne.n	8006fce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80070ba:	4b10      	ldr	r3, [pc, #64]	; (80070fc <xQueueReceive+0x1bc>)
 80070bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	e780      	b.n	8006fce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ce:	f000 f8ca 	bl	8007266 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070d2:	f000 fc1b 	bl	800790c <xTaskResumeAll>
 80070d6:	e77a      	b.n	8006fce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070da:	f000 f8c4 	bl	8007266 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070de:	f000 fc15 	bl	800790c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070e4:	f000 f911 	bl	800730a <prvIsQueueEmpty>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f43f af6f 	beq.w	8006fce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3730      	adds	r7, #48	; 0x30
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	e000ed04 	.word	0xe000ed04

08007100 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <vQueueDelete+0x28>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	60bb      	str	r3, [r7, #8]
}
 8007124:	bf00      	nop
 8007126:	e7fe      	b.n	8007126 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f947 	bl	80073bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007134:	2b00      	cmp	r3, #0
 8007136:	d102      	bne.n	800713e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f001 ff01 	bl	8008f40 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800713e:	bf00      	nop
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10d      	bne.n	8007180 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d14d      	bne.n	8007208 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	4618      	mov	r0, r3
 8007172:	f000 ffbd 	bl	80080f0 <xTaskPriorityDisinherit>
 8007176:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	609a      	str	r2, [r3, #8]
 800717e:	e043      	b.n	8007208 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d119      	bne.n	80071ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6858      	ldr	r0, [r3, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	461a      	mov	r2, r3
 8007190:	68b9      	ldr	r1, [r7, #8]
 8007192:	f002 fd41 	bl	8009c18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	441a      	add	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d32b      	bcc.n	8007208 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	605a      	str	r2, [r3, #4]
 80071b8:	e026      	b.n	8007208 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	68d8      	ldr	r0, [r3, #12]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	461a      	mov	r2, r3
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	f002 fd27 	bl	8009c18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	425b      	negs	r3, r3
 80071d4:	441a      	add	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d207      	bcs.n	80071f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	689a      	ldr	r2, [r3, #8]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	425b      	negs	r3, r3
 80071f0:	441a      	add	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d105      	bne.n	8007208 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	3b01      	subs	r3, #1
 8007206:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007210:	697b      	ldr	r3, [r7, #20]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b082      	sub	sp, #8
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	2b00      	cmp	r3, #0
 800722a:	d018      	beq.n	800725e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	441a      	add	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	429a      	cmp	r2, r3
 8007244:	d303      	bcc.n	800724e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68d9      	ldr	r1, [r3, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	461a      	mov	r2, r3
 8007258:	6838      	ldr	r0, [r7, #0]
 800725a:	f002 fcdd 	bl	8009c18 <memcpy>
	}
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b084      	sub	sp, #16
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800726e:	f001 fc79 	bl	8008b64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007278:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800727a:	e011      	b.n	80072a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	2b00      	cmp	r3, #0
 8007282:	d012      	beq.n	80072aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3324      	adds	r3, #36	; 0x24
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fd55 	bl	8007d38 <xTaskRemoveFromEventList>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007294:	f000 fe2c 	bl	8007ef0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	3b01      	subs	r3, #1
 800729c:	b2db      	uxtb	r3, r3
 800729e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dce9      	bgt.n	800727c <prvUnlockQueue+0x16>
 80072a8:	e000      	b.n	80072ac <prvUnlockQueue+0x46>
					break;
 80072aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	22ff      	movs	r2, #255	; 0xff
 80072b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80072b4:	f001 fc86 	bl	8008bc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072b8:	f001 fc54 	bl	8008b64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072c4:	e011      	b.n	80072ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d012      	beq.n	80072f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3310      	adds	r3, #16
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fd30 	bl	8007d38 <xTaskRemoveFromEventList>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072de:	f000 fe07 	bl	8007ef0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	dce9      	bgt.n	80072c6 <prvUnlockQueue+0x60>
 80072f2:	e000      	b.n	80072f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	22ff      	movs	r2, #255	; 0xff
 80072fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072fe:	f001 fc61 	bl	8008bc4 <vPortExitCritical>
}
 8007302:	bf00      	nop
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007312:	f001 fc27 	bl	8008b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	2b00      	cmp	r3, #0
 800731c:	d102      	bne.n	8007324 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800731e:	2301      	movs	r3, #1
 8007320:	60fb      	str	r3, [r7, #12]
 8007322:	e001      	b.n	8007328 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007328:	f001 fc4c 	bl	8008bc4 <vPortExitCritical>

	return xReturn;
 800732c:	68fb      	ldr	r3, [r7, #12]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800733e:	f001 fc11 	bl	8008b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734a:	429a      	cmp	r2, r3
 800734c:	d102      	bne.n	8007354 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800734e:	2301      	movs	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	e001      	b.n	8007358 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007358:	f001 fc34 	bl	8008bc4 <vPortExitCritical>

	return xReturn;
 800735c:	68fb      	ldr	r3, [r7, #12]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	e014      	b.n	80073a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007378:	4a0f      	ldr	r2, [pc, #60]	; (80073b8 <vQueueAddToRegistry+0x50>)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10b      	bne.n	800739c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007384:	490c      	ldr	r1, [pc, #48]	; (80073b8 <vQueueAddToRegistry+0x50>)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800738e:	4a0a      	ldr	r2, [pc, #40]	; (80073b8 <vQueueAddToRegistry+0x50>)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	4413      	add	r3, r2
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800739a:	e006      	b.n	80073aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	3301      	adds	r3, #1
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b07      	cmp	r3, #7
 80073a6:	d9e7      	bls.n	8007378 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	20000ed0 	.word	0x20000ed0

080073bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	e016      	b.n	80073f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80073ca:	4a10      	ldr	r2, [pc, #64]	; (800740c <vQueueUnregisterQueue+0x50>)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	4413      	add	r3, r2
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d10b      	bne.n	80073f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80073da:	4a0c      	ldr	r2, [pc, #48]	; (800740c <vQueueUnregisterQueue+0x50>)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2100      	movs	r1, #0
 80073e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80073e4:	4a09      	ldr	r2, [pc, #36]	; (800740c <vQueueUnregisterQueue+0x50>)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	00db      	lsls	r3, r3, #3
 80073ea:	4413      	add	r3, r2
 80073ec:	2200      	movs	r2, #0
 80073ee:	605a      	str	r2, [r3, #4]
				break;
 80073f0:	e006      	b.n	8007400 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3301      	adds	r3, #1
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b07      	cmp	r3, #7
 80073fc:	d9e5      	bls.n	80073ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80073fe:	bf00      	nop
 8007400:	bf00      	nop
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	20000ed0 	.word	0x20000ed0

08007410 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007420:	f001 fba0 	bl	8008b64 <vPortEnterCritical>
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800742a:	b25b      	sxtb	r3, r3
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007430:	d103      	bne.n	800743a <vQueueWaitForMessageRestricted+0x2a>
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007440:	b25b      	sxtb	r3, r3
 8007442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007446:	d103      	bne.n	8007450 <vQueueWaitForMessageRestricted+0x40>
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007450:	f001 fbb8 	bl	8008bc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	2b00      	cmp	r3, #0
 800745a:	d106      	bne.n	800746a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	3324      	adds	r3, #36	; 0x24
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fc3b 	bl	8007ce0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800746a:	6978      	ldr	r0, [r7, #20]
 800746c:	f7ff fefb 	bl	8007266 <prvUnlockQueue>
	}
 8007470:	bf00      	nop
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08e      	sub	sp, #56	; 0x38
 800747c:	af04      	add	r7, sp, #16
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10a      	bne.n	80074a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	623b      	str	r3, [r7, #32]
}
 800749e:	bf00      	nop
 80074a0:	e7fe      	b.n	80074a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10a      	bne.n	80074be <xTaskCreateStatic+0x46>
	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	61fb      	str	r3, [r7, #28]
}
 80074ba:	bf00      	nop
 80074bc:	e7fe      	b.n	80074bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074be:	235c      	movs	r3, #92	; 0x5c
 80074c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	2b5c      	cmp	r3, #92	; 0x5c
 80074c6:	d00a      	beq.n	80074de <xTaskCreateStatic+0x66>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	61bb      	str	r3, [r7, #24]
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d01e      	beq.n	8007524 <xTaskCreateStatic+0xac>
 80074e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01b      	beq.n	8007524 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	2202      	movs	r2, #2
 80074fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074fe:	2300      	movs	r3, #0
 8007500:	9303      	str	r3, [sp, #12]
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	9302      	str	r3, [sp, #8]
 8007506:	f107 0314 	add.w	r3, r7, #20
 800750a:	9301      	str	r3, [sp, #4]
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 f850 	bl	80075bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800751c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800751e:	f000 f8dd 	bl	80076dc <prvAddNewTaskToReadyList>
 8007522:	e001      	b.n	8007528 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007528:	697b      	ldr	r3, [r7, #20]
	}
 800752a:	4618      	mov	r0, r3
 800752c:	3728      	adds	r7, #40	; 0x28
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007532:	b580      	push	{r7, lr}
 8007534:	b08c      	sub	sp, #48	; 0x30
 8007536:	af04      	add	r7, sp, #16
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	603b      	str	r3, [r7, #0]
 800753e:	4613      	mov	r3, r2
 8007540:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007542:	88fb      	ldrh	r3, [r7, #6]
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4618      	mov	r0, r3
 8007548:	f001 fc2e 	bl	8008da8 <pvPortMalloc>
 800754c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00e      	beq.n	8007572 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007554:	205c      	movs	r0, #92	; 0x5c
 8007556:	f001 fc27 	bl	8008da8 <pvPortMalloc>
 800755a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
 8007568:	e005      	b.n	8007576 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800756a:	6978      	ldr	r0, [r7, #20]
 800756c:	f001 fce8 	bl	8008f40 <vPortFree>
 8007570:	e001      	b.n	8007576 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007572:	2300      	movs	r3, #0
 8007574:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d017      	beq.n	80075ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007584:	88fa      	ldrh	r2, [r7, #6]
 8007586:	2300      	movs	r3, #0
 8007588:	9303      	str	r3, [sp, #12]
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	9302      	str	r3, [sp, #8]
 800758e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68b9      	ldr	r1, [r7, #8]
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 f80e 	bl	80075bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075a0:	69f8      	ldr	r0, [r7, #28]
 80075a2:	f000 f89b 	bl	80076dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075a6:	2301      	movs	r3, #1
 80075a8:	61bb      	str	r3, [r7, #24]
 80075aa:	e002      	b.n	80075b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075b2:	69bb      	ldr	r3, [r7, #24]
	}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3720      	adds	r7, #32
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	461a      	mov	r2, r3
 80075d4:	21a5      	movs	r1, #165	; 0xa5
 80075d6:	f002 fae7 	bl	8009ba8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075e4:	3b01      	subs	r3, #1
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	f023 0307 	bic.w	r3, r3, #7
 80075f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <prvInitialiseNewTask+0x58>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	617b      	str	r3, [r7, #20]
}
 8007610:	bf00      	nop
 8007612:	e7fe      	b.n	8007612 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d01f      	beq.n	800765a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800761a:	2300      	movs	r3, #0
 800761c:	61fb      	str	r3, [r7, #28]
 800761e:	e012      	b.n	8007646 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	4413      	add	r3, r2
 8007626:	7819      	ldrb	r1, [r3, #0]
 8007628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	4413      	add	r3, r2
 800762e:	3334      	adds	r3, #52	; 0x34
 8007630:	460a      	mov	r2, r1
 8007632:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	4413      	add	r3, r2
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d006      	beq.n	800764e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	3301      	adds	r3, #1
 8007644:	61fb      	str	r3, [r7, #28]
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2b0f      	cmp	r3, #15
 800764a:	d9e9      	bls.n	8007620 <prvInitialiseNewTask+0x64>
 800764c:	e000      	b.n	8007650 <prvInitialiseNewTask+0x94>
			{
				break;
 800764e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007658:	e003      	b.n	8007662 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	2b37      	cmp	r3, #55	; 0x37
 8007666:	d901      	bls.n	800766c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007668:	2337      	movs	r3, #55	; 0x37
 800766a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007670:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007676:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767a:	2200      	movs	r2, #0
 800767c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	3304      	adds	r3, #4
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff f886 	bl	8006794 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	3318      	adds	r3, #24
 800768c:	4618      	mov	r0, r3
 800768e:	f7ff f881 	bl	8006794 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007696:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	2200      	movs	r2, #0
 80076ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	68f9      	ldr	r1, [r7, #12]
 80076ba:	69b8      	ldr	r0, [r7, #24]
 80076bc:	f001 f928 	bl	8008910 <pxPortInitialiseStack>
 80076c0:	4602      	mov	r2, r0
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076d2:	bf00      	nop
 80076d4:	3720      	adds	r7, #32
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076e4:	f001 fa3e 	bl	8008b64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076e8:	4b2d      	ldr	r3, [pc, #180]	; (80077a0 <prvAddNewTaskToReadyList+0xc4>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3301      	adds	r3, #1
 80076ee:	4a2c      	ldr	r2, [pc, #176]	; (80077a0 <prvAddNewTaskToReadyList+0xc4>)
 80076f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076f2:	4b2c      	ldr	r3, [pc, #176]	; (80077a4 <prvAddNewTaskToReadyList+0xc8>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d109      	bne.n	800770e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076fa:	4a2a      	ldr	r2, [pc, #168]	; (80077a4 <prvAddNewTaskToReadyList+0xc8>)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007700:	4b27      	ldr	r3, [pc, #156]	; (80077a0 <prvAddNewTaskToReadyList+0xc4>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d110      	bne.n	800772a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007708:	f000 fc16 	bl	8007f38 <prvInitialiseTaskLists>
 800770c:	e00d      	b.n	800772a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800770e:	4b26      	ldr	r3, [pc, #152]	; (80077a8 <prvAddNewTaskToReadyList+0xcc>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007716:	4b23      	ldr	r3, [pc, #140]	; (80077a4 <prvAddNewTaskToReadyList+0xc8>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007720:	429a      	cmp	r2, r3
 8007722:	d802      	bhi.n	800772a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007724:	4a1f      	ldr	r2, [pc, #124]	; (80077a4 <prvAddNewTaskToReadyList+0xc8>)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800772a:	4b20      	ldr	r3, [pc, #128]	; (80077ac <prvAddNewTaskToReadyList+0xd0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3301      	adds	r3, #1
 8007730:	4a1e      	ldr	r2, [pc, #120]	; (80077ac <prvAddNewTaskToReadyList+0xd0>)
 8007732:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007734:	4b1d      	ldr	r3, [pc, #116]	; (80077ac <prvAddNewTaskToReadyList+0xd0>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007740:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <prvAddNewTaskToReadyList+0xd4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	429a      	cmp	r2, r3
 8007746:	d903      	bls.n	8007750 <prvAddNewTaskToReadyList+0x74>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	4a18      	ldr	r2, [pc, #96]	; (80077b0 <prvAddNewTaskToReadyList+0xd4>)
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007754:	4613      	mov	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4a15      	ldr	r2, [pc, #84]	; (80077b4 <prvAddNewTaskToReadyList+0xd8>)
 800775e:	441a      	add	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3304      	adds	r3, #4
 8007764:	4619      	mov	r1, r3
 8007766:	4610      	mov	r0, r2
 8007768:	f7ff f821 	bl	80067ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800776c:	f001 fa2a 	bl	8008bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007770:	4b0d      	ldr	r3, [pc, #52]	; (80077a8 <prvAddNewTaskToReadyList+0xcc>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00e      	beq.n	8007796 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007778:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <prvAddNewTaskToReadyList+0xc8>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	429a      	cmp	r2, r3
 8007784:	d207      	bcs.n	8007796 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007786:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <prvAddNewTaskToReadyList+0xdc>)
 8007788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007796:	bf00      	nop
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	200013e4 	.word	0x200013e4
 80077a4:	20000f10 	.word	0x20000f10
 80077a8:	200013f0 	.word	0x200013f0
 80077ac:	20001400 	.word	0x20001400
 80077b0:	200013ec 	.word	0x200013ec
 80077b4:	20000f14 	.word	0x20000f14
 80077b8:	e000ed04 	.word	0xe000ed04

080077bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d017      	beq.n	80077fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077ce:	4b13      	ldr	r3, [pc, #76]	; (800781c <vTaskDelay+0x60>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <vTaskDelay+0x30>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	60bb      	str	r3, [r7, #8]
}
 80077e8:	bf00      	nop
 80077ea:	e7fe      	b.n	80077ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077ec:	f000 f880 	bl	80078f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077f0:	2100      	movs	r1, #0
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fcea 	bl	80081cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077f8:	f000 f888 	bl	800790c <xTaskResumeAll>
 80077fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d107      	bne.n	8007814 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007804:	4b06      	ldr	r3, [pc, #24]	; (8007820 <vTaskDelay+0x64>)
 8007806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	2000140c 	.word	0x2000140c
 8007820:	e000ed04 	.word	0xe000ed04

08007824 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08a      	sub	sp, #40	; 0x28
 8007828:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800782a:	2300      	movs	r3, #0
 800782c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800782e:	2300      	movs	r3, #0
 8007830:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007832:	463a      	mov	r2, r7
 8007834:	1d39      	adds	r1, r7, #4
 8007836:	f107 0308 	add.w	r3, r7, #8
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe ff56 	bl	80066ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	9202      	str	r2, [sp, #8]
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	2300      	movs	r3, #0
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	2300      	movs	r3, #0
 8007850:	460a      	mov	r2, r1
 8007852:	4921      	ldr	r1, [pc, #132]	; (80078d8 <vTaskStartScheduler+0xb4>)
 8007854:	4821      	ldr	r0, [pc, #132]	; (80078dc <vTaskStartScheduler+0xb8>)
 8007856:	f7ff fe0f 	bl	8007478 <xTaskCreateStatic>
 800785a:	4603      	mov	r3, r0
 800785c:	4a20      	ldr	r2, [pc, #128]	; (80078e0 <vTaskStartScheduler+0xbc>)
 800785e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007860:	4b1f      	ldr	r3, [pc, #124]	; (80078e0 <vTaskStartScheduler+0xbc>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007868:	2301      	movs	r3, #1
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e001      	b.n	8007872 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800786e:	2300      	movs	r3, #0
 8007870:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d102      	bne.n	800787e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007878:	f000 fcfc 	bl	8008274 <xTimerCreateTimerTask>
 800787c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d116      	bne.n	80078b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	613b      	str	r3, [r7, #16]
}
 8007896:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007898:	4b12      	ldr	r3, [pc, #72]	; (80078e4 <vTaskStartScheduler+0xc0>)
 800789a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800789e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078a0:	4b11      	ldr	r3, [pc, #68]	; (80078e8 <vTaskStartScheduler+0xc4>)
 80078a2:	2201      	movs	r2, #1
 80078a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078a6:	4b11      	ldr	r3, [pc, #68]	; (80078ec <vTaskStartScheduler+0xc8>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078ac:	f001 f8b8 	bl	8008a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078b0:	e00e      	b.n	80078d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078b8:	d10a      	bne.n	80078d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	60fb      	str	r3, [r7, #12]
}
 80078cc:	bf00      	nop
 80078ce:	e7fe      	b.n	80078ce <vTaskStartScheduler+0xaa>
}
 80078d0:	bf00      	nop
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	0800bb28 	.word	0x0800bb28
 80078dc:	08007f09 	.word	0x08007f09
 80078e0:	20001408 	.word	0x20001408
 80078e4:	20001404 	.word	0x20001404
 80078e8:	200013f0 	.word	0x200013f0
 80078ec:	200013e8 	.word	0x200013e8

080078f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078f0:	b480      	push	{r7}
 80078f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078f4:	4b04      	ldr	r3, [pc, #16]	; (8007908 <vTaskSuspendAll+0x18>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3301      	adds	r3, #1
 80078fa:	4a03      	ldr	r2, [pc, #12]	; (8007908 <vTaskSuspendAll+0x18>)
 80078fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078fe:	bf00      	nop
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	2000140c 	.word	0x2000140c

0800790c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007916:	2300      	movs	r3, #0
 8007918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800791a:	4b42      	ldr	r3, [pc, #264]	; (8007a24 <xTaskResumeAll+0x118>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10a      	bne.n	8007938 <xTaskResumeAll+0x2c>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	603b      	str	r3, [r7, #0]
}
 8007934:	bf00      	nop
 8007936:	e7fe      	b.n	8007936 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007938:	f001 f914 	bl	8008b64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800793c:	4b39      	ldr	r3, [pc, #228]	; (8007a24 <xTaskResumeAll+0x118>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3b01      	subs	r3, #1
 8007942:	4a38      	ldr	r2, [pc, #224]	; (8007a24 <xTaskResumeAll+0x118>)
 8007944:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007946:	4b37      	ldr	r3, [pc, #220]	; (8007a24 <xTaskResumeAll+0x118>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d162      	bne.n	8007a14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800794e:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <xTaskResumeAll+0x11c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d05e      	beq.n	8007a14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007956:	e02f      	b.n	80079b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007958:	4b34      	ldr	r3, [pc, #208]	; (8007a2c <xTaskResumeAll+0x120>)
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3318      	adds	r3, #24
 8007964:	4618      	mov	r0, r3
 8007966:	f7fe ff7f 	bl	8006868 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3304      	adds	r3, #4
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe ff7a 	bl	8006868 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007978:	4b2d      	ldr	r3, [pc, #180]	; (8007a30 <xTaskResumeAll+0x124>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d903      	bls.n	8007988 <xTaskResumeAll+0x7c>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	4a2a      	ldr	r2, [pc, #168]	; (8007a30 <xTaskResumeAll+0x124>)
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4a27      	ldr	r2, [pc, #156]	; (8007a34 <xTaskResumeAll+0x128>)
 8007996:	441a      	add	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3304      	adds	r3, #4
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	f7fe ff05 	bl	80067ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a8:	4b23      	ldr	r3, [pc, #140]	; (8007a38 <xTaskResumeAll+0x12c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d302      	bcc.n	80079b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80079b2:	4b22      	ldr	r3, [pc, #136]	; (8007a3c <xTaskResumeAll+0x130>)
 80079b4:	2201      	movs	r2, #1
 80079b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079b8:	4b1c      	ldr	r3, [pc, #112]	; (8007a2c <xTaskResumeAll+0x120>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1cb      	bne.n	8007958 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079c6:	f000 fb55 	bl	8008074 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079ca:	4b1d      	ldr	r3, [pc, #116]	; (8007a40 <xTaskResumeAll+0x134>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d010      	beq.n	80079f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079d6:	f000 f847 	bl	8007a68 <xTaskIncrementTick>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80079e0:	4b16      	ldr	r3, [pc, #88]	; (8007a3c <xTaskResumeAll+0x130>)
 80079e2:	2201      	movs	r2, #1
 80079e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1f1      	bne.n	80079d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80079f2:	4b13      	ldr	r3, [pc, #76]	; (8007a40 <xTaskResumeAll+0x134>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079f8:	4b10      	ldr	r3, [pc, #64]	; (8007a3c <xTaskResumeAll+0x130>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d009      	beq.n	8007a14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a00:	2301      	movs	r3, #1
 8007a02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a04:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <xTaskResumeAll+0x138>)
 8007a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a14:	f001 f8d6 	bl	8008bc4 <vPortExitCritical>

	return xAlreadyYielded;
 8007a18:	68bb      	ldr	r3, [r7, #8]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	2000140c 	.word	0x2000140c
 8007a28:	200013e4 	.word	0x200013e4
 8007a2c:	200013a4 	.word	0x200013a4
 8007a30:	200013ec 	.word	0x200013ec
 8007a34:	20000f14 	.word	0x20000f14
 8007a38:	20000f10 	.word	0x20000f10
 8007a3c:	200013f8 	.word	0x200013f8
 8007a40:	200013f4 	.word	0x200013f4
 8007a44:	e000ed04 	.word	0xe000ed04

08007a48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a4e:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <xTaskGetTickCount+0x1c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a54:	687b      	ldr	r3, [r7, #4]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	200013e8 	.word	0x200013e8

08007a68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a72:	4b4f      	ldr	r3, [pc, #316]	; (8007bb0 <xTaskIncrementTick+0x148>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f040 808f 	bne.w	8007b9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a7c:	4b4d      	ldr	r3, [pc, #308]	; (8007bb4 <xTaskIncrementTick+0x14c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3301      	adds	r3, #1
 8007a82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a84:	4a4b      	ldr	r2, [pc, #300]	; (8007bb4 <xTaskIncrementTick+0x14c>)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d120      	bne.n	8007ad2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a90:	4b49      	ldr	r3, [pc, #292]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	603b      	str	r3, [r7, #0]
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <xTaskIncrementTick+0x46>
 8007ab0:	4b41      	ldr	r3, [pc, #260]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	4b41      	ldr	r3, [pc, #260]	; (8007bbc <xTaskIncrementTick+0x154>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a3f      	ldr	r2, [pc, #252]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	4a3f      	ldr	r2, [pc, #252]	; (8007bbc <xTaskIncrementTick+0x154>)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	4b3e      	ldr	r3, [pc, #248]	; (8007bc0 <xTaskIncrementTick+0x158>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	4a3d      	ldr	r2, [pc, #244]	; (8007bc0 <xTaskIncrementTick+0x158>)
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	f000 fad1 	bl	8008074 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ad2:	4b3c      	ldr	r3, [pc, #240]	; (8007bc4 <xTaskIncrementTick+0x15c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d349      	bcc.n	8007b70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007adc:	4b36      	ldr	r3, [pc, #216]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d104      	bne.n	8007af0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ae6:	4b37      	ldr	r3, [pc, #220]	; (8007bc4 <xTaskIncrementTick+0x15c>)
 8007ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007aec:	601a      	str	r2, [r3, #0]
					break;
 8007aee:	e03f      	b.n	8007b70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af0:	4b31      	ldr	r3, [pc, #196]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d203      	bcs.n	8007b10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b08:	4a2e      	ldr	r2, [pc, #184]	; (8007bc4 <xTaskIncrementTick+0x15c>)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b0e:	e02f      	b.n	8007b70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	3304      	adds	r3, #4
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fe fea7 	bl	8006868 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d004      	beq.n	8007b2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	3318      	adds	r3, #24
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe fe9e 	bl	8006868 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b30:	4b25      	ldr	r3, [pc, #148]	; (8007bc8 <xTaskIncrementTick+0x160>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d903      	bls.n	8007b40 <xTaskIncrementTick+0xd8>
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	4a22      	ldr	r2, [pc, #136]	; (8007bc8 <xTaskIncrementTick+0x160>)
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b44:	4613      	mov	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4a1f      	ldr	r2, [pc, #124]	; (8007bcc <xTaskIncrementTick+0x164>)
 8007b4e:	441a      	add	r2, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	3304      	adds	r3, #4
 8007b54:	4619      	mov	r1, r3
 8007b56:	4610      	mov	r0, r2
 8007b58:	f7fe fe29 	bl	80067ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b60:	4b1b      	ldr	r3, [pc, #108]	; (8007bd0 <xTaskIncrementTick+0x168>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d3b8      	bcc.n	8007adc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b6e:	e7b5      	b.n	8007adc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b70:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <xTaskIncrementTick+0x168>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b76:	4915      	ldr	r1, [pc, #84]	; (8007bcc <xTaskIncrementTick+0x164>)
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d901      	bls.n	8007b8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b8c:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <xTaskIncrementTick+0x16c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d007      	beq.n	8007ba4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b94:	2301      	movs	r3, #1
 8007b96:	617b      	str	r3, [r7, #20]
 8007b98:	e004      	b.n	8007ba4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b9a:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <xTaskIncrementTick+0x170>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	4a0d      	ldr	r2, [pc, #52]	; (8007bd8 <xTaskIncrementTick+0x170>)
 8007ba2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ba4:	697b      	ldr	r3, [r7, #20]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	2000140c 	.word	0x2000140c
 8007bb4:	200013e8 	.word	0x200013e8
 8007bb8:	2000139c 	.word	0x2000139c
 8007bbc:	200013a0 	.word	0x200013a0
 8007bc0:	200013fc 	.word	0x200013fc
 8007bc4:	20001404 	.word	0x20001404
 8007bc8:	200013ec 	.word	0x200013ec
 8007bcc:	20000f14 	.word	0x20000f14
 8007bd0:	20000f10 	.word	0x20000f10
 8007bd4:	200013f8 	.word	0x200013f8
 8007bd8:	200013f4 	.word	0x200013f4

08007bdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007be2:	4b28      	ldr	r3, [pc, #160]	; (8007c84 <vTaskSwitchContext+0xa8>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bea:	4b27      	ldr	r3, [pc, #156]	; (8007c88 <vTaskSwitchContext+0xac>)
 8007bec:	2201      	movs	r2, #1
 8007bee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bf0:	e041      	b.n	8007c76 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007bf2:	4b25      	ldr	r3, [pc, #148]	; (8007c88 <vTaskSwitchContext+0xac>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf8:	4b24      	ldr	r3, [pc, #144]	; (8007c8c <vTaskSwitchContext+0xb0>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	e010      	b.n	8007c22 <vTaskSwitchContext+0x46>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10a      	bne.n	8007c1c <vTaskSwitchContext+0x40>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	607b      	str	r3, [r7, #4]
}
 8007c18:	bf00      	nop
 8007c1a:	e7fe      	b.n	8007c1a <vTaskSwitchContext+0x3e>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]
 8007c22:	491b      	ldr	r1, [pc, #108]	; (8007c90 <vTaskSwitchContext+0xb4>)
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4613      	mov	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0e4      	beq.n	8007c00 <vTaskSwitchContext+0x24>
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4a13      	ldr	r2, [pc, #76]	; (8007c90 <vTaskSwitchContext+0xb4>)
 8007c42:	4413      	add	r3, r2
 8007c44:	60bb      	str	r3, [r7, #8]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	605a      	str	r2, [r3, #4]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	3308      	adds	r3, #8
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d104      	bne.n	8007c66 <vTaskSwitchContext+0x8a>
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	605a      	str	r2, [r3, #4]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	4a09      	ldr	r2, [pc, #36]	; (8007c94 <vTaskSwitchContext+0xb8>)
 8007c6e:	6013      	str	r3, [r2, #0]
 8007c70:	4a06      	ldr	r2, [pc, #24]	; (8007c8c <vTaskSwitchContext+0xb0>)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6013      	str	r3, [r2, #0]
}
 8007c76:	bf00      	nop
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	2000140c 	.word	0x2000140c
 8007c88:	200013f8 	.word	0x200013f8
 8007c8c:	200013ec 	.word	0x200013ec
 8007c90:	20000f14 	.word	0x20000f14
 8007c94:	20000f10 	.word	0x20000f10

08007c98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10a      	bne.n	8007cbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	60fb      	str	r3, [r7, #12]
}
 8007cba:	bf00      	nop
 8007cbc:	e7fe      	b.n	8007cbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cbe:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <vTaskPlaceOnEventList+0x44>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3318      	adds	r3, #24
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7fe fd95 	bl	80067f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ccc:	2101      	movs	r1, #1
 8007cce:	6838      	ldr	r0, [r7, #0]
 8007cd0:	f000 fa7c 	bl	80081cc <prvAddCurrentTaskToDelayedList>
}
 8007cd4:	bf00      	nop
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	20000f10 	.word	0x20000f10

08007ce0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	617b      	str	r3, [r7, #20]
}
 8007d04:	bf00      	nop
 8007d06:	e7fe      	b.n	8007d06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d08:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3318      	adds	r3, #24
 8007d0e:	4619      	mov	r1, r3
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7fe fd4c 	bl	80067ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d22:	6879      	ldr	r1, [r7, #4]
 8007d24:	68b8      	ldr	r0, [r7, #8]
 8007d26:	f000 fa51 	bl	80081cc <prvAddCurrentTaskToDelayedList>
	}
 8007d2a:	bf00      	nop
 8007d2c:	3718      	adds	r7, #24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20000f10 	.word	0x20000f10

08007d38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	60fb      	str	r3, [r7, #12]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	3318      	adds	r3, #24
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fe fd7d 	bl	8006868 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d6e:	4b1e      	ldr	r3, [pc, #120]	; (8007de8 <xTaskRemoveFromEventList+0xb0>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d11d      	bne.n	8007db2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe fd74 	bl	8006868 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d84:	4b19      	ldr	r3, [pc, #100]	; (8007dec <xTaskRemoveFromEventList+0xb4>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d903      	bls.n	8007d94 <xTaskRemoveFromEventList+0x5c>
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	4a16      	ldr	r2, [pc, #88]	; (8007dec <xTaskRemoveFromEventList+0xb4>)
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d98:	4613      	mov	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4a13      	ldr	r2, [pc, #76]	; (8007df0 <xTaskRemoveFromEventList+0xb8>)
 8007da2:	441a      	add	r2, r3
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	3304      	adds	r3, #4
 8007da8:	4619      	mov	r1, r3
 8007daa:	4610      	mov	r0, r2
 8007dac:	f7fe fcff 	bl	80067ae <vListInsertEnd>
 8007db0:	e005      	b.n	8007dbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	3318      	adds	r3, #24
 8007db6:	4619      	mov	r1, r3
 8007db8:	480e      	ldr	r0, [pc, #56]	; (8007df4 <xTaskRemoveFromEventList+0xbc>)
 8007dba:	f7fe fcf8 	bl	80067ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc2:	4b0d      	ldr	r3, [pc, #52]	; (8007df8 <xTaskRemoveFromEventList+0xc0>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d905      	bls.n	8007dd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dd0:	4b0a      	ldr	r3, [pc, #40]	; (8007dfc <xTaskRemoveFromEventList+0xc4>)
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	e001      	b.n	8007ddc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ddc:	697b      	ldr	r3, [r7, #20]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	2000140c 	.word	0x2000140c
 8007dec:	200013ec 	.word	0x200013ec
 8007df0:	20000f14 	.word	0x20000f14
 8007df4:	200013a4 	.word	0x200013a4
 8007df8:	20000f10 	.word	0x20000f10
 8007dfc:	200013f8 	.word	0x200013f8

08007e00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e08:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <vTaskInternalSetTimeOutState+0x24>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e10:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <vTaskInternalSetTimeOutState+0x28>)
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	605a      	str	r2, [r3, #4]
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	200013fc 	.word	0x200013fc
 8007e28:	200013e8 	.word	0x200013e8

08007e2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10a      	bne.n	8007e52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	613b      	str	r3, [r7, #16]
}
 8007e4e:	bf00      	nop
 8007e50:	e7fe      	b.n	8007e50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10a      	bne.n	8007e6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	60fb      	str	r3, [r7, #12]
}
 8007e6a:	bf00      	nop
 8007e6c:	e7fe      	b.n	8007e6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e6e:	f000 fe79 	bl	8008b64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e72:	4b1d      	ldr	r3, [pc, #116]	; (8007ee8 <xTaskCheckForTimeOut+0xbc>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e8a:	d102      	bne.n	8007e92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	61fb      	str	r3, [r7, #28]
 8007e90:	e023      	b.n	8007eda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4b15      	ldr	r3, [pc, #84]	; (8007eec <xTaskCheckForTimeOut+0xc0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d007      	beq.n	8007eae <xTaskCheckForTimeOut+0x82>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d302      	bcc.n	8007eae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	61fb      	str	r3, [r7, #28]
 8007eac:	e015      	b.n	8007eda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d20b      	bcs.n	8007ed0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7ff ff9b 	bl	8007e00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61fb      	str	r3, [r7, #28]
 8007ece:	e004      	b.n	8007eda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007eda:	f000 fe73 	bl	8008bc4 <vPortExitCritical>

	return xReturn;
 8007ede:	69fb      	ldr	r3, [r7, #28]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3720      	adds	r7, #32
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	200013e8 	.word	0x200013e8
 8007eec:	200013fc 	.word	0x200013fc

08007ef0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ef4:	4b03      	ldr	r3, [pc, #12]	; (8007f04 <vTaskMissedYield+0x14>)
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]
}
 8007efa:	bf00      	nop
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	200013f8 	.word	0x200013f8

08007f08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f10:	f000 f852 	bl	8007fb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f14:	4b06      	ldr	r3, [pc, #24]	; (8007f30 <prvIdleTask+0x28>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d9f9      	bls.n	8007f10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f1c:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <prvIdleTask+0x2c>)
 8007f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f2c:	e7f0      	b.n	8007f10 <prvIdleTask+0x8>
 8007f2e:	bf00      	nop
 8007f30:	20000f14 	.word	0x20000f14
 8007f34:	e000ed04 	.word	0xe000ed04

08007f38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f3e:	2300      	movs	r3, #0
 8007f40:	607b      	str	r3, [r7, #4]
 8007f42:	e00c      	b.n	8007f5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4a12      	ldr	r2, [pc, #72]	; (8007f98 <prvInitialiseTaskLists+0x60>)
 8007f50:	4413      	add	r3, r2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fe fbfe 	bl	8006754 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	607b      	str	r3, [r7, #4]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b37      	cmp	r3, #55	; 0x37
 8007f62:	d9ef      	bls.n	8007f44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f64:	480d      	ldr	r0, [pc, #52]	; (8007f9c <prvInitialiseTaskLists+0x64>)
 8007f66:	f7fe fbf5 	bl	8006754 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f6a:	480d      	ldr	r0, [pc, #52]	; (8007fa0 <prvInitialiseTaskLists+0x68>)
 8007f6c:	f7fe fbf2 	bl	8006754 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f70:	480c      	ldr	r0, [pc, #48]	; (8007fa4 <prvInitialiseTaskLists+0x6c>)
 8007f72:	f7fe fbef 	bl	8006754 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f76:	480c      	ldr	r0, [pc, #48]	; (8007fa8 <prvInitialiseTaskLists+0x70>)
 8007f78:	f7fe fbec 	bl	8006754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f7c:	480b      	ldr	r0, [pc, #44]	; (8007fac <prvInitialiseTaskLists+0x74>)
 8007f7e:	f7fe fbe9 	bl	8006754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f82:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <prvInitialiseTaskLists+0x78>)
 8007f84:	4a05      	ldr	r2, [pc, #20]	; (8007f9c <prvInitialiseTaskLists+0x64>)
 8007f86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f88:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <prvInitialiseTaskLists+0x7c>)
 8007f8a:	4a05      	ldr	r2, [pc, #20]	; (8007fa0 <prvInitialiseTaskLists+0x68>)
 8007f8c:	601a      	str	r2, [r3, #0]
}
 8007f8e:	bf00      	nop
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000f14 	.word	0x20000f14
 8007f9c:	20001374 	.word	0x20001374
 8007fa0:	20001388 	.word	0x20001388
 8007fa4:	200013a4 	.word	0x200013a4
 8007fa8:	200013b8 	.word	0x200013b8
 8007fac:	200013d0 	.word	0x200013d0
 8007fb0:	2000139c 	.word	0x2000139c
 8007fb4:	200013a0 	.word	0x200013a0

08007fb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fbe:	e019      	b.n	8007ff4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fc0:	f000 fdd0 	bl	8008b64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc4:	4b10      	ldr	r3, [pc, #64]	; (8008008 <prvCheckTasksWaitingTermination+0x50>)
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fe fc49 	bl	8006868 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fd6:	4b0d      	ldr	r3, [pc, #52]	; (800800c <prvCheckTasksWaitingTermination+0x54>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	4a0b      	ldr	r2, [pc, #44]	; (800800c <prvCheckTasksWaitingTermination+0x54>)
 8007fde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <prvCheckTasksWaitingTermination+0x58>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	4a0a      	ldr	r2, [pc, #40]	; (8008010 <prvCheckTasksWaitingTermination+0x58>)
 8007fe8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fea:	f000 fdeb 	bl	8008bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f810 	bl	8008014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ff4:	4b06      	ldr	r3, [pc, #24]	; (8008010 <prvCheckTasksWaitingTermination+0x58>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e1      	bne.n	8007fc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ffc:	bf00      	nop
 8007ffe:	bf00      	nop
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	200013b8 	.word	0x200013b8
 800800c:	200013e4 	.word	0x200013e4
 8008010:	200013cc 	.word	0x200013cc

08008014 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008022:	2b00      	cmp	r3, #0
 8008024:	d108      	bne.n	8008038 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802a:	4618      	mov	r0, r3
 800802c:	f000 ff88 	bl	8008f40 <vPortFree>
				vPortFree( pxTCB );
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 ff85 	bl	8008f40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008036:	e018      	b.n	800806a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800803e:	2b01      	cmp	r3, #1
 8008040:	d103      	bne.n	800804a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 ff7c 	bl	8008f40 <vPortFree>
	}
 8008048:	e00f      	b.n	800806a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008050:	2b02      	cmp	r3, #2
 8008052:	d00a      	beq.n	800806a <prvDeleteTCB+0x56>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	60fb      	str	r3, [r7, #12]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <prvDeleteTCB+0x54>
	}
 800806a:	bf00      	nop
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
	...

08008074 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800807a:	4b0c      	ldr	r3, [pc, #48]	; (80080ac <prvResetNextTaskUnblockTime+0x38>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d104      	bne.n	800808e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008084:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <prvResetNextTaskUnblockTime+0x3c>)
 8008086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800808a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800808c:	e008      	b.n	80080a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800808e:	4b07      	ldr	r3, [pc, #28]	; (80080ac <prvResetNextTaskUnblockTime+0x38>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	4a04      	ldr	r2, [pc, #16]	; (80080b0 <prvResetNextTaskUnblockTime+0x3c>)
 800809e:	6013      	str	r3, [r2, #0]
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	2000139c 	.word	0x2000139c
 80080b0:	20001404 	.word	0x20001404

080080b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080ba:	4b0b      	ldr	r3, [pc, #44]	; (80080e8 <xTaskGetSchedulerState+0x34>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d102      	bne.n	80080c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080c2:	2301      	movs	r3, #1
 80080c4:	607b      	str	r3, [r7, #4]
 80080c6:	e008      	b.n	80080da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080c8:	4b08      	ldr	r3, [pc, #32]	; (80080ec <xTaskGetSchedulerState+0x38>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d102      	bne.n	80080d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080d0:	2302      	movs	r3, #2
 80080d2:	607b      	str	r3, [r7, #4]
 80080d4:	e001      	b.n	80080da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080d6:	2300      	movs	r3, #0
 80080d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080da:	687b      	ldr	r3, [r7, #4]
	}
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	200013f0 	.word	0x200013f0
 80080ec:	2000140c 	.word	0x2000140c

080080f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080fc:	2300      	movs	r3, #0
 80080fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d056      	beq.n	80081b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008106:	4b2e      	ldr	r3, [pc, #184]	; (80081c0 <xTaskPriorityDisinherit+0xd0>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	429a      	cmp	r2, r3
 800810e:	d00a      	beq.n	8008126 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	60fb      	str	r3, [r7, #12]
}
 8008122:	bf00      	nop
 8008124:	e7fe      	b.n	8008124 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10a      	bne.n	8008144 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	60bb      	str	r3, [r7, #8]
}
 8008140:	bf00      	nop
 8008142:	e7fe      	b.n	8008142 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008148:	1e5a      	subs	r2, r3, #1
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008156:	429a      	cmp	r2, r3
 8008158:	d02c      	beq.n	80081b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800815e:	2b00      	cmp	r3, #0
 8008160:	d128      	bne.n	80081b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	3304      	adds	r3, #4
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fb7e 	bl	8006868 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008184:	4b0f      	ldr	r3, [pc, #60]	; (80081c4 <xTaskPriorityDisinherit+0xd4>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	429a      	cmp	r2, r3
 800818a:	d903      	bls.n	8008194 <xTaskPriorityDisinherit+0xa4>
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	4a0c      	ldr	r2, [pc, #48]	; (80081c4 <xTaskPriorityDisinherit+0xd4>)
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4a09      	ldr	r2, [pc, #36]	; (80081c8 <xTaskPriorityDisinherit+0xd8>)
 80081a2:	441a      	add	r2, r3
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	3304      	adds	r3, #4
 80081a8:	4619      	mov	r1, r3
 80081aa:	4610      	mov	r0, r2
 80081ac:	f7fe faff 	bl	80067ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081b0:	2301      	movs	r3, #1
 80081b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081b4:	697b      	ldr	r3, [r7, #20]
	}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000f10 	.word	0x20000f10
 80081c4:	200013ec 	.word	0x200013ec
 80081c8:	20000f14 	.word	0x20000f14

080081cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081d6:	4b21      	ldr	r3, [pc, #132]	; (800825c <prvAddCurrentTaskToDelayedList+0x90>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081dc:	4b20      	ldr	r3, [pc, #128]	; (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3304      	adds	r3, #4
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fb40 	bl	8006868 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081ee:	d10a      	bne.n	8008206 <prvAddCurrentTaskToDelayedList+0x3a>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081f6:	4b1a      	ldr	r3, [pc, #104]	; (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3304      	adds	r3, #4
 80081fc:	4619      	mov	r1, r3
 80081fe:	4819      	ldr	r0, [pc, #100]	; (8008264 <prvAddCurrentTaskToDelayedList+0x98>)
 8008200:	f7fe fad5 	bl	80067ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008204:	e026      	b.n	8008254 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4413      	add	r3, r2
 800820c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800820e:	4b14      	ldr	r3, [pc, #80]	; (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	429a      	cmp	r2, r3
 800821c:	d209      	bcs.n	8008232 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800821e:	4b12      	ldr	r3, [pc, #72]	; (8008268 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3304      	adds	r3, #4
 8008228:	4619      	mov	r1, r3
 800822a:	4610      	mov	r0, r2
 800822c:	f7fe fae3 	bl	80067f6 <vListInsert>
}
 8008230:	e010      	b.n	8008254 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008232:	4b0e      	ldr	r3, [pc, #56]	; (800826c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b0a      	ldr	r3, [pc, #40]	; (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3304      	adds	r3, #4
 800823c:	4619      	mov	r1, r3
 800823e:	4610      	mov	r0, r2
 8008240:	f7fe fad9 	bl	80067f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008244:	4b0a      	ldr	r3, [pc, #40]	; (8008270 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	429a      	cmp	r2, r3
 800824c:	d202      	bcs.n	8008254 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800824e:	4a08      	ldr	r2, [pc, #32]	; (8008270 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	6013      	str	r3, [r2, #0]
}
 8008254:	bf00      	nop
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	200013e8 	.word	0x200013e8
 8008260:	20000f10 	.word	0x20000f10
 8008264:	200013d0 	.word	0x200013d0
 8008268:	200013a0 	.word	0x200013a0
 800826c:	2000139c 	.word	0x2000139c
 8008270:	20001404 	.word	0x20001404

08008274 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	; 0x28
 8008278:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800827a:	2300      	movs	r3, #0
 800827c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800827e:	f000 fb07 	bl	8008890 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008282:	4b1c      	ldr	r3, [pc, #112]	; (80082f4 <xTimerCreateTimerTask+0x80>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d021      	beq.n	80082ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800828e:	2300      	movs	r3, #0
 8008290:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008292:	1d3a      	adds	r2, r7, #4
 8008294:	f107 0108 	add.w	r1, r7, #8
 8008298:	f107 030c 	add.w	r3, r7, #12
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe fa3f 	bl	8006720 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	9202      	str	r2, [sp, #8]
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	2302      	movs	r3, #2
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	2300      	movs	r3, #0
 80082b2:	460a      	mov	r2, r1
 80082b4:	4910      	ldr	r1, [pc, #64]	; (80082f8 <xTimerCreateTimerTask+0x84>)
 80082b6:	4811      	ldr	r0, [pc, #68]	; (80082fc <xTimerCreateTimerTask+0x88>)
 80082b8:	f7ff f8de 	bl	8007478 <xTaskCreateStatic>
 80082bc:	4603      	mov	r3, r0
 80082be:	4a10      	ldr	r2, [pc, #64]	; (8008300 <xTimerCreateTimerTask+0x8c>)
 80082c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082c2:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <xTimerCreateTimerTask+0x8c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082ca:	2301      	movs	r3, #1
 80082cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10a      	bne.n	80082ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	613b      	str	r3, [r7, #16]
}
 80082e6:	bf00      	nop
 80082e8:	e7fe      	b.n	80082e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80082ea:	697b      	ldr	r3, [r7, #20]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20001440 	.word	0x20001440
 80082f8:	0800bb30 	.word	0x0800bb30
 80082fc:	08008439 	.word	0x08008439
 8008300:	20001444 	.word	0x20001444

08008304 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08a      	sub	sp, #40	; 0x28
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008312:	2300      	movs	r3, #0
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10a      	bne.n	8008332 <xTimerGenericCommand+0x2e>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008320:	f383 8811 	msr	BASEPRI, r3
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	623b      	str	r3, [r7, #32]
}
 800832e:	bf00      	nop
 8008330:	e7fe      	b.n	8008330 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008332:	4b1a      	ldr	r3, [pc, #104]	; (800839c <xTimerGenericCommand+0x98>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d02a      	beq.n	8008390 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b05      	cmp	r3, #5
 800834a:	dc18      	bgt.n	800837e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800834c:	f7ff feb2 	bl	80080b4 <xTaskGetSchedulerState>
 8008350:	4603      	mov	r3, r0
 8008352:	2b02      	cmp	r3, #2
 8008354:	d109      	bne.n	800836a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008356:	4b11      	ldr	r3, [pc, #68]	; (800839c <xTimerGenericCommand+0x98>)
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	f107 0110 	add.w	r1, r7, #16
 800835e:	2300      	movs	r3, #0
 8008360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008362:	f7fe fc53 	bl	8006c0c <xQueueGenericSend>
 8008366:	6278      	str	r0, [r7, #36]	; 0x24
 8008368:	e012      	b.n	8008390 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800836a:	4b0c      	ldr	r3, [pc, #48]	; (800839c <xTimerGenericCommand+0x98>)
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	f107 0110 	add.w	r1, r7, #16
 8008372:	2300      	movs	r3, #0
 8008374:	2200      	movs	r2, #0
 8008376:	f7fe fc49 	bl	8006c0c <xQueueGenericSend>
 800837a:	6278      	str	r0, [r7, #36]	; 0x24
 800837c:	e008      	b.n	8008390 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800837e:	4b07      	ldr	r3, [pc, #28]	; (800839c <xTimerGenericCommand+0x98>)
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	f107 0110 	add.w	r1, r7, #16
 8008386:	2300      	movs	r3, #0
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	f7fe fd3d 	bl	8006e08 <xQueueGenericSendFromISR>
 800838e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008392:	4618      	mov	r0, r3
 8008394:	3728      	adds	r7, #40	; 0x28
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20001440 	.word	0x20001440

080083a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af02      	add	r7, sp, #8
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083aa:	4b22      	ldr	r3, [pc, #136]	; (8008434 <prvProcessExpiredTimer+0x94>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	3304      	adds	r3, #4
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fe fa55 	bl	8006868 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d022      	beq.n	8008412 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	699a      	ldr	r2, [r3, #24]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	18d1      	adds	r1, r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	6978      	ldr	r0, [r7, #20]
 80083da:	f000 f8d1 	bl	8008580 <prvInsertTimerInActiveList>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d01f      	beq.n	8008424 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083e4:	2300      	movs	r3, #0
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	2300      	movs	r3, #0
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	2100      	movs	r1, #0
 80083ee:	6978      	ldr	r0, [r7, #20]
 80083f0:	f7ff ff88 	bl	8008304 <xTimerGenericCommand>
 80083f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d113      	bne.n	8008424 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	60fb      	str	r3, [r7, #12]
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008418:	f023 0301 	bic.w	r3, r3, #1
 800841c:	b2da      	uxtb	r2, r3
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	6a1b      	ldr	r3, [r3, #32]
 8008428:	6978      	ldr	r0, [r7, #20]
 800842a:	4798      	blx	r3
}
 800842c:	bf00      	nop
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	20001438 	.word	0x20001438

08008438 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008440:	f107 0308 	add.w	r3, r7, #8
 8008444:	4618      	mov	r0, r3
 8008446:	f000 f857 	bl	80084f8 <prvGetNextExpireTime>
 800844a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4619      	mov	r1, r3
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f000 f803 	bl	800845c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008456:	f000 f8d5 	bl	8008604 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800845a:	e7f1      	b.n	8008440 <prvTimerTask+0x8>

0800845c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008466:	f7ff fa43 	bl	80078f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800846a:	f107 0308 	add.w	r3, r7, #8
 800846e:	4618      	mov	r0, r3
 8008470:	f000 f866 	bl	8008540 <prvSampleTimeNow>
 8008474:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d130      	bne.n	80084de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10a      	bne.n	8008498 <prvProcessTimerOrBlockTask+0x3c>
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	429a      	cmp	r2, r3
 8008488:	d806      	bhi.n	8008498 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800848a:	f7ff fa3f 	bl	800790c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800848e:	68f9      	ldr	r1, [r7, #12]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff ff85 	bl	80083a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008496:	e024      	b.n	80084e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d008      	beq.n	80084b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800849e:	4b13      	ldr	r3, [pc, #76]	; (80084ec <prvProcessTimerOrBlockTask+0x90>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <prvProcessTimerOrBlockTask+0x50>
 80084a8:	2301      	movs	r3, #1
 80084aa:	e000      	b.n	80084ae <prvProcessTimerOrBlockTask+0x52>
 80084ac:	2300      	movs	r3, #0
 80084ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084b0:	4b0f      	ldr	r3, [pc, #60]	; (80084f0 <prvProcessTimerOrBlockTask+0x94>)
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	4619      	mov	r1, r3
 80084be:	f7fe ffa7 	bl	8007410 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80084c2:	f7ff fa23 	bl	800790c <xTaskResumeAll>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10a      	bne.n	80084e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084cc:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <prvProcessTimerOrBlockTask+0x98>)
 80084ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	f3bf 8f6f 	isb	sy
}
 80084dc:	e001      	b.n	80084e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084de:	f7ff fa15 	bl	800790c <xTaskResumeAll>
}
 80084e2:	bf00      	nop
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	2000143c 	.word	0x2000143c
 80084f0:	20001440 	.word	0x20001440
 80084f4:	e000ed04 	.word	0xe000ed04

080084f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008500:	4b0e      	ldr	r3, [pc, #56]	; (800853c <prvGetNextExpireTime+0x44>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <prvGetNextExpireTime+0x16>
 800850a:	2201      	movs	r2, #1
 800850c:	e000      	b.n	8008510 <prvGetNextExpireTime+0x18>
 800850e:	2200      	movs	r2, #0
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d105      	bne.n	8008528 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800851c:	4b07      	ldr	r3, [pc, #28]	; (800853c <prvGetNextExpireTime+0x44>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	60fb      	str	r3, [r7, #12]
 8008526:	e001      	b.n	800852c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008528:	2300      	movs	r3, #0
 800852a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800852c:	68fb      	ldr	r3, [r7, #12]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	20001438 	.word	0x20001438

08008540 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008548:	f7ff fa7e 	bl	8007a48 <xTaskGetTickCount>
 800854c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800854e:	4b0b      	ldr	r3, [pc, #44]	; (800857c <prvSampleTimeNow+0x3c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	429a      	cmp	r2, r3
 8008556:	d205      	bcs.n	8008564 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008558:	f000 f936 	bl	80087c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	e002      	b.n	800856a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800856a:	4a04      	ldr	r2, [pc, #16]	; (800857c <prvSampleTimeNow+0x3c>)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008570:	68fb      	ldr	r3, [r7, #12]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20001448 	.word	0x20001448

08008580 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
 800858c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800858e:	2300      	movs	r3, #0
 8008590:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d812      	bhi.n	80085cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	1ad2      	subs	r2, r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d302      	bcc.n	80085ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085b4:	2301      	movs	r3, #1
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	e01b      	b.n	80085f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085ba:	4b10      	ldr	r3, [pc, #64]	; (80085fc <prvInsertTimerInActiveList+0x7c>)
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	3304      	adds	r3, #4
 80085c2:	4619      	mov	r1, r3
 80085c4:	4610      	mov	r0, r2
 80085c6:	f7fe f916 	bl	80067f6 <vListInsert>
 80085ca:	e012      	b.n	80085f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d206      	bcs.n	80085e2 <prvInsertTimerInActiveList+0x62>
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d302      	bcc.n	80085e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085dc:	2301      	movs	r3, #1
 80085de:	617b      	str	r3, [r7, #20]
 80085e0:	e007      	b.n	80085f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085e2:	4b07      	ldr	r3, [pc, #28]	; (8008600 <prvInsertTimerInActiveList+0x80>)
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3304      	adds	r3, #4
 80085ea:	4619      	mov	r1, r3
 80085ec:	4610      	mov	r0, r2
 80085ee:	f7fe f902 	bl	80067f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80085f2:	697b      	ldr	r3, [r7, #20]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	2000143c 	.word	0x2000143c
 8008600:	20001438 	.word	0x20001438

08008604 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b08e      	sub	sp, #56	; 0x38
 8008608:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800860a:	e0ca      	b.n	80087a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	da18      	bge.n	8008644 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008612:	1d3b      	adds	r3, r7, #4
 8008614:	3304      	adds	r3, #4
 8008616:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10a      	bne.n	8008634 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	61fb      	str	r3, [r7, #28]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800863a:	6850      	ldr	r0, [r2, #4]
 800863c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800863e:	6892      	ldr	r2, [r2, #8]
 8008640:	4611      	mov	r1, r2
 8008642:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	f2c0 80ab 	blt.w	80087a2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d004      	beq.n	8008662 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	3304      	adds	r3, #4
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe f903 	bl	8006868 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008662:	463b      	mov	r3, r7
 8008664:	4618      	mov	r0, r3
 8008666:	f7ff ff6b 	bl	8008540 <prvSampleTimeNow>
 800866a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b09      	cmp	r3, #9
 8008670:	f200 8096 	bhi.w	80087a0 <prvProcessReceivedCommands+0x19c>
 8008674:	a201      	add	r2, pc, #4	; (adr r2, 800867c <prvProcessReceivedCommands+0x78>)
 8008676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867a:	bf00      	nop
 800867c:	080086a5 	.word	0x080086a5
 8008680:	080086a5 	.word	0x080086a5
 8008684:	080086a5 	.word	0x080086a5
 8008688:	08008719 	.word	0x08008719
 800868c:	0800872d 	.word	0x0800872d
 8008690:	08008777 	.word	0x08008777
 8008694:	080086a5 	.word	0x080086a5
 8008698:	080086a5 	.word	0x080086a5
 800869c:	08008719 	.word	0x08008719
 80086a0:	0800872d 	.word	0x0800872d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086aa:	f043 0301 	orr.w	r3, r3, #1
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	18d1      	adds	r1, r2, r3
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086c4:	f7ff ff5c 	bl	8008580 <prvInsertTimerInActiveList>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d069      	beq.n	80087a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d05e      	beq.n	80087a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	441a      	add	r2, r3
 80086ec:	2300      	movs	r3, #0
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	2300      	movs	r3, #0
 80086f2:	2100      	movs	r1, #0
 80086f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086f6:	f7ff fe05 	bl	8008304 <xTimerGenericCommand>
 80086fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d14f      	bne.n	80087a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	61bb      	str	r3, [r7, #24]
}
 8008714:	bf00      	nop
 8008716:	e7fe      	b.n	8008716 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800871e:	f023 0301 	bic.w	r3, r3, #1
 8008722:	b2da      	uxtb	r2, r3
 8008724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008726:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800872a:	e03a      	b.n	80087a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008732:	f043 0301 	orr.w	r3, r3, #1
 8008736:	b2da      	uxtb	r2, r3
 8008738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	617b      	str	r3, [r7, #20]
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	699a      	ldr	r2, [r3, #24]
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	18d1      	adds	r1, r2, r3
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800876e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008770:	f7ff ff06 	bl	8008580 <prvInsertTimerInActiveList>
					break;
 8008774:	e015      	b.n	80087a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800877c:	f003 0302 	and.w	r3, r3, #2
 8008780:	2b00      	cmp	r3, #0
 8008782:	d103      	bne.n	800878c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008786:	f000 fbdb 	bl	8008f40 <vPortFree>
 800878a:	e00a      	b.n	80087a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008792:	f023 0301 	bic.w	r3, r3, #1
 8008796:	b2da      	uxtb	r2, r3
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800879e:	e000      	b.n	80087a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80087a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087a2:	4b08      	ldr	r3, [pc, #32]	; (80087c4 <prvProcessReceivedCommands+0x1c0>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	1d39      	adds	r1, r7, #4
 80087a8:	2200      	movs	r2, #0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fe fbc8 	bl	8006f40 <xQueueReceive>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f47f af2a 	bne.w	800860c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80087b8:	bf00      	nop
 80087ba:	bf00      	nop
 80087bc:	3730      	adds	r7, #48	; 0x30
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20001440 	.word	0x20001440

080087c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087ce:	e048      	b.n	8008862 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087d0:	4b2d      	ldr	r3, [pc, #180]	; (8008888 <prvSwitchTimerLists+0xc0>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087da:	4b2b      	ldr	r3, [pc, #172]	; (8008888 <prvSwitchTimerLists+0xc0>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	3304      	adds	r3, #4
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fe f83d 	bl	8006868 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	2b00      	cmp	r3, #0
 8008802:	d02e      	beq.n	8008862 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	4413      	add	r3, r2
 800880c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	429a      	cmp	r2, r3
 8008814:	d90e      	bls.n	8008834 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008822:	4b19      	ldr	r3, [pc, #100]	; (8008888 <prvSwitchTimerLists+0xc0>)
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	3304      	adds	r3, #4
 800882a:	4619      	mov	r1, r3
 800882c:	4610      	mov	r0, r2
 800882e:	f7fd ffe2 	bl	80067f6 <vListInsert>
 8008832:	e016      	b.n	8008862 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008834:	2300      	movs	r3, #0
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	2300      	movs	r3, #0
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	2100      	movs	r1, #0
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f7ff fd60 	bl	8008304 <xTimerGenericCommand>
 8008844:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	603b      	str	r3, [r7, #0]
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008862:	4b09      	ldr	r3, [pc, #36]	; (8008888 <prvSwitchTimerLists+0xc0>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1b1      	bne.n	80087d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800886c:	4b06      	ldr	r3, [pc, #24]	; (8008888 <prvSwitchTimerLists+0xc0>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008872:	4b06      	ldr	r3, [pc, #24]	; (800888c <prvSwitchTimerLists+0xc4>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a04      	ldr	r2, [pc, #16]	; (8008888 <prvSwitchTimerLists+0xc0>)
 8008878:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800887a:	4a04      	ldr	r2, [pc, #16]	; (800888c <prvSwitchTimerLists+0xc4>)
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	6013      	str	r3, [r2, #0]
}
 8008880:	bf00      	nop
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	20001438 	.word	0x20001438
 800888c:	2000143c 	.word	0x2000143c

08008890 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008896:	f000 f965 	bl	8008b64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800889a:	4b15      	ldr	r3, [pc, #84]	; (80088f0 <prvCheckForValidListAndQueue+0x60>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d120      	bne.n	80088e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088a2:	4814      	ldr	r0, [pc, #80]	; (80088f4 <prvCheckForValidListAndQueue+0x64>)
 80088a4:	f7fd ff56 	bl	8006754 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088a8:	4813      	ldr	r0, [pc, #76]	; (80088f8 <prvCheckForValidListAndQueue+0x68>)
 80088aa:	f7fd ff53 	bl	8006754 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088ae:	4b13      	ldr	r3, [pc, #76]	; (80088fc <prvCheckForValidListAndQueue+0x6c>)
 80088b0:	4a10      	ldr	r2, [pc, #64]	; (80088f4 <prvCheckForValidListAndQueue+0x64>)
 80088b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088b4:	4b12      	ldr	r3, [pc, #72]	; (8008900 <prvCheckForValidListAndQueue+0x70>)
 80088b6:	4a10      	ldr	r2, [pc, #64]	; (80088f8 <prvCheckForValidListAndQueue+0x68>)
 80088b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088ba:	2300      	movs	r3, #0
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	4b11      	ldr	r3, [pc, #68]	; (8008904 <prvCheckForValidListAndQueue+0x74>)
 80088c0:	4a11      	ldr	r2, [pc, #68]	; (8008908 <prvCheckForValidListAndQueue+0x78>)
 80088c2:	2110      	movs	r1, #16
 80088c4:	200a      	movs	r0, #10
 80088c6:	f7fe f861 	bl	800698c <xQueueGenericCreateStatic>
 80088ca:	4603      	mov	r3, r0
 80088cc:	4a08      	ldr	r2, [pc, #32]	; (80088f0 <prvCheckForValidListAndQueue+0x60>)
 80088ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088d0:	4b07      	ldr	r3, [pc, #28]	; (80088f0 <prvCheckForValidListAndQueue+0x60>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d005      	beq.n	80088e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088d8:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <prvCheckForValidListAndQueue+0x60>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	490b      	ldr	r1, [pc, #44]	; (800890c <prvCheckForValidListAndQueue+0x7c>)
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe fd42 	bl	8007368 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088e4:	f000 f96e 	bl	8008bc4 <vPortExitCritical>
}
 80088e8:	bf00      	nop
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	20001440 	.word	0x20001440
 80088f4:	20001410 	.word	0x20001410
 80088f8:	20001424 	.word	0x20001424
 80088fc:	20001438 	.word	0x20001438
 8008900:	2000143c 	.word	0x2000143c
 8008904:	200014ec 	.word	0x200014ec
 8008908:	2000144c 	.word	0x2000144c
 800890c:	0800bb38 	.word	0x0800bb38

08008910 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	3b04      	subs	r3, #4
 8008920:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3b04      	subs	r3, #4
 800892e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	f023 0201 	bic.w	r2, r3, #1
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	3b04      	subs	r3, #4
 800893e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008940:	4a0c      	ldr	r2, [pc, #48]	; (8008974 <pxPortInitialiseStack+0x64>)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3b14      	subs	r3, #20
 800894a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3b04      	subs	r3, #4
 8008956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f06f 0202 	mvn.w	r2, #2
 800895e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3b20      	subs	r3, #32
 8008964:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008966:	68fb      	ldr	r3, [r7, #12]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	08008979 	.word	0x08008979

08008978 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800897e:	2300      	movs	r3, #0
 8008980:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008982:	4b12      	ldr	r3, [pc, #72]	; (80089cc <prvTaskExitError+0x54>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800898a:	d00a      	beq.n	80089a2 <prvTaskExitError+0x2a>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	60fb      	str	r3, [r7, #12]
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <prvTaskExitError+0x28>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	60bb      	str	r3, [r7, #8]
}
 80089b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089b6:	bf00      	nop
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0fc      	beq.n	80089b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089be:	bf00      	nop
 80089c0:	bf00      	nop
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	20000010 	.word	0x20000010

080089d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089d0:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <pxCurrentTCBConst2>)
 80089d2:	6819      	ldr	r1, [r3, #0]
 80089d4:	6808      	ldr	r0, [r1, #0]
 80089d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089da:	f380 8809 	msr	PSP, r0
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f04f 0000 	mov.w	r0, #0
 80089e6:	f380 8811 	msr	BASEPRI, r0
 80089ea:	4770      	bx	lr
 80089ec:	f3af 8000 	nop.w

080089f0 <pxCurrentTCBConst2>:
 80089f0:	20000f10 	.word	0x20000f10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop

080089f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089f8:	4808      	ldr	r0, [pc, #32]	; (8008a1c <prvPortStartFirstTask+0x24>)
 80089fa:	6800      	ldr	r0, [r0, #0]
 80089fc:	6800      	ldr	r0, [r0, #0]
 80089fe:	f380 8808 	msr	MSP, r0
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f380 8814 	msr	CONTROL, r0
 8008a0a:	b662      	cpsie	i
 8008a0c:	b661      	cpsie	f
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	df00      	svc	0
 8008a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a1a:	bf00      	nop
 8008a1c:	e000ed08 	.word	0xe000ed08

08008a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a26:	4b46      	ldr	r3, [pc, #280]	; (8008b40 <xPortStartScheduler+0x120>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a46      	ldr	r2, [pc, #280]	; (8008b44 <xPortStartScheduler+0x124>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d10a      	bne.n	8008a46 <xPortStartScheduler+0x26>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	613b      	str	r3, [r7, #16]
}
 8008a42:	bf00      	nop
 8008a44:	e7fe      	b.n	8008a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a46:	4b3e      	ldr	r3, [pc, #248]	; (8008b40 <xPortStartScheduler+0x120>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a3f      	ldr	r2, [pc, #252]	; (8008b48 <xPortStartScheduler+0x128>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d10a      	bne.n	8008a66 <xPortStartScheduler+0x46>
	__asm volatile
 8008a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	60fb      	str	r3, [r7, #12]
}
 8008a62:	bf00      	nop
 8008a64:	e7fe      	b.n	8008a64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a66:	4b39      	ldr	r3, [pc, #228]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008a68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	22ff      	movs	r2, #255	; 0xff
 8008a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	4b31      	ldr	r3, [pc, #196]	; (8008b50 <xPortStartScheduler+0x130>)
 8008a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a8e:	4b31      	ldr	r3, [pc, #196]	; (8008b54 <xPortStartScheduler+0x134>)
 8008a90:	2207      	movs	r2, #7
 8008a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a94:	e009      	b.n	8008aaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008a96:	4b2f      	ldr	r3, [pc, #188]	; (8008b54 <xPortStartScheduler+0x134>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	4a2d      	ldr	r2, [pc, #180]	; (8008b54 <xPortStartScheduler+0x134>)
 8008a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aaa:	78fb      	ldrb	r3, [r7, #3]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab2:	2b80      	cmp	r3, #128	; 0x80
 8008ab4:	d0ef      	beq.n	8008a96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ab6:	4b27      	ldr	r3, [pc, #156]	; (8008b54 <xPortStartScheduler+0x134>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f1c3 0307 	rsb	r3, r3, #7
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d00a      	beq.n	8008ad8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	60bb      	str	r3, [r7, #8]
}
 8008ad4:	bf00      	nop
 8008ad6:	e7fe      	b.n	8008ad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ad8:	4b1e      	ldr	r3, [pc, #120]	; (8008b54 <xPortStartScheduler+0x134>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	021b      	lsls	r3, r3, #8
 8008ade:	4a1d      	ldr	r2, [pc, #116]	; (8008b54 <xPortStartScheduler+0x134>)
 8008ae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ae2:	4b1c      	ldr	r3, [pc, #112]	; (8008b54 <xPortStartScheduler+0x134>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008aea:	4a1a      	ldr	r2, [pc, #104]	; (8008b54 <xPortStartScheduler+0x134>)
 8008aec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008af6:	4b18      	ldr	r3, [pc, #96]	; (8008b58 <xPortStartScheduler+0x138>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a17      	ldr	r2, [pc, #92]	; (8008b58 <xPortStartScheduler+0x138>)
 8008afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b02:	4b15      	ldr	r3, [pc, #84]	; (8008b58 <xPortStartScheduler+0x138>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a14      	ldr	r2, [pc, #80]	; (8008b58 <xPortStartScheduler+0x138>)
 8008b08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b0e:	f000 f8dd 	bl	8008ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b12:	4b12      	ldr	r3, [pc, #72]	; (8008b5c <xPortStartScheduler+0x13c>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b18:	f000 f8fc 	bl	8008d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b1c:	4b10      	ldr	r3, [pc, #64]	; (8008b60 <xPortStartScheduler+0x140>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a0f      	ldr	r2, [pc, #60]	; (8008b60 <xPortStartScheduler+0x140>)
 8008b22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b28:	f7ff ff66 	bl	80089f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b2c:	f7ff f856 	bl	8007bdc <vTaskSwitchContext>
	prvTaskExitError();
 8008b30:	f7ff ff22 	bl	8008978 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3718      	adds	r7, #24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	e000ed00 	.word	0xe000ed00
 8008b44:	410fc271 	.word	0x410fc271
 8008b48:	410fc270 	.word	0x410fc270
 8008b4c:	e000e400 	.word	0xe000e400
 8008b50:	2000153c 	.word	0x2000153c
 8008b54:	20001540 	.word	0x20001540
 8008b58:	e000ed20 	.word	0xe000ed20
 8008b5c:	20000010 	.word	0x20000010
 8008b60:	e000ef34 	.word	0xe000ef34

08008b64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
	__asm volatile
 8008b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	607b      	str	r3, [r7, #4]
}
 8008b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b7e:	4b0f      	ldr	r3, [pc, #60]	; (8008bbc <vPortEnterCritical+0x58>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3301      	adds	r3, #1
 8008b84:	4a0d      	ldr	r2, [pc, #52]	; (8008bbc <vPortEnterCritical+0x58>)
 8008b86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b88:	4b0c      	ldr	r3, [pc, #48]	; (8008bbc <vPortEnterCritical+0x58>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d10f      	bne.n	8008bb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b90:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <vPortEnterCritical+0x5c>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	603b      	str	r3, [r7, #0]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <vPortEnterCritical+0x4a>
	}
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	20000010 	.word	0x20000010
 8008bc0:	e000ed04 	.word	0xe000ed04

08008bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bca:	4b12      	ldr	r3, [pc, #72]	; (8008c14 <vPortExitCritical+0x50>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10a      	bne.n	8008be8 <vPortExitCritical+0x24>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	607b      	str	r3, [r7, #4]
}
 8008be4:	bf00      	nop
 8008be6:	e7fe      	b.n	8008be6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008be8:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <vPortExitCritical+0x50>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	4a09      	ldr	r2, [pc, #36]	; (8008c14 <vPortExitCritical+0x50>)
 8008bf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bf2:	4b08      	ldr	r3, [pc, #32]	; (8008c14 <vPortExitCritical+0x50>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d105      	bne.n	8008c06 <vPortExitCritical+0x42>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	f383 8811 	msr	BASEPRI, r3
}
 8008c04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	20000010 	.word	0x20000010
	...

08008c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c20:	f3ef 8009 	mrs	r0, PSP
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <pxCurrentTCBConst>)
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	f01e 0f10 	tst.w	lr, #16
 8008c30:	bf08      	it	eq
 8008c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3a:	6010      	str	r0, [r2, #0]
 8008c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c44:	f380 8811 	msr	BASEPRI, r0
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f7fe ffc4 	bl	8007bdc <vTaskSwitchContext>
 8008c54:	f04f 0000 	mov.w	r0, #0
 8008c58:	f380 8811 	msr	BASEPRI, r0
 8008c5c:	bc09      	pop	{r0, r3}
 8008c5e:	6819      	ldr	r1, [r3, #0]
 8008c60:	6808      	ldr	r0, [r1, #0]
 8008c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c66:	f01e 0f10 	tst.w	lr, #16
 8008c6a:	bf08      	it	eq
 8008c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c70:	f380 8809 	msr	PSP, r0
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	f3af 8000 	nop.w

08008c80 <pxCurrentTCBConst>:
 8008c80:	20000f10 	.word	0x20000f10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop

08008c88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	607b      	str	r3, [r7, #4]
}
 8008ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ca2:	f7fe fee1 	bl	8007a68 <xTaskIncrementTick>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cac:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <xPortSysTickHandler+0x40>)
 8008cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	f383 8811 	msr	BASEPRI, r3
}
 8008cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ccc:	b480      	push	{r7}
 8008cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cd0:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <vPortSetupTimerInterrupt+0x34>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cd6:	4b0b      	ldr	r3, [pc, #44]	; (8008d04 <vPortSetupTimerInterrupt+0x38>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cdc:	4b0a      	ldr	r3, [pc, #40]	; (8008d08 <vPortSetupTimerInterrupt+0x3c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a0a      	ldr	r2, [pc, #40]	; (8008d0c <vPortSetupTimerInterrupt+0x40>)
 8008ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce6:	099b      	lsrs	r3, r3, #6
 8008ce8:	4a09      	ldr	r2, [pc, #36]	; (8008d10 <vPortSetupTimerInterrupt+0x44>)
 8008cea:	3b01      	subs	r3, #1
 8008cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cee:	4b04      	ldr	r3, [pc, #16]	; (8008d00 <vPortSetupTimerInterrupt+0x34>)
 8008cf0:	2207      	movs	r2, #7
 8008cf2:	601a      	str	r2, [r3, #0]
}
 8008cf4:	bf00      	nop
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	e000e010 	.word	0xe000e010
 8008d04:	e000e018 	.word	0xe000e018
 8008d08:	20000004 	.word	0x20000004
 8008d0c:	10624dd3 	.word	0x10624dd3
 8008d10:	e000e014 	.word	0xe000e014

08008d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d24 <vPortEnableVFP+0x10>
 8008d18:	6801      	ldr	r1, [r0, #0]
 8008d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d1e:	6001      	str	r1, [r0, #0]
 8008d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d22:	bf00      	nop
 8008d24:	e000ed88 	.word	0xe000ed88

08008d28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d2e:	f3ef 8305 	mrs	r3, IPSR
 8008d32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b0f      	cmp	r3, #15
 8008d38:	d914      	bls.n	8008d64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d3a:	4a17      	ldr	r2, [pc, #92]	; (8008d98 <vPortValidateInterruptPriority+0x70>)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	4413      	add	r3, r2
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d44:	4b15      	ldr	r3, [pc, #84]	; (8008d9c <vPortValidateInterruptPriority+0x74>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	7afa      	ldrb	r2, [r7, #11]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d20a      	bcs.n	8008d64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	607b      	str	r3, [r7, #4]
}
 8008d60:	bf00      	nop
 8008d62:	e7fe      	b.n	8008d62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d64:	4b0e      	ldr	r3, [pc, #56]	; (8008da0 <vPortValidateInterruptPriority+0x78>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d6c:	4b0d      	ldr	r3, [pc, #52]	; (8008da4 <vPortValidateInterruptPriority+0x7c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d90a      	bls.n	8008d8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	603b      	str	r3, [r7, #0]
}
 8008d86:	bf00      	nop
 8008d88:	e7fe      	b.n	8008d88 <vPortValidateInterruptPriority+0x60>
	}
 8008d8a:	bf00      	nop
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	e000e3f0 	.word	0xe000e3f0
 8008d9c:	2000153c 	.word	0x2000153c
 8008da0:	e000ed0c 	.word	0xe000ed0c
 8008da4:	20001540 	.word	0x20001540

08008da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08a      	sub	sp, #40	; 0x28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008db0:	2300      	movs	r3, #0
 8008db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008db4:	f7fe fd9c 	bl	80078f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008db8:	4b5b      	ldr	r3, [pc, #364]	; (8008f28 <pvPortMalloc+0x180>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008dc0:	f000 f920 	bl	8009004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008dc4:	4b59      	ldr	r3, [pc, #356]	; (8008f2c <pvPortMalloc+0x184>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f040 8093 	bne.w	8008ef8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d01d      	beq.n	8008e14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008dd8:	2208      	movs	r2, #8
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4413      	add	r3, r2
 8008dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d014      	beq.n	8008e14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f023 0307 	bic.w	r3, r3, #7
 8008df0:	3308      	adds	r3, #8
 8008df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f003 0307 	and.w	r3, r3, #7
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <pvPortMalloc+0x6c>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	617b      	str	r3, [r7, #20]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d06e      	beq.n	8008ef8 <pvPortMalloc+0x150>
 8008e1a:	4b45      	ldr	r3, [pc, #276]	; (8008f30 <pvPortMalloc+0x188>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d869      	bhi.n	8008ef8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e24:	4b43      	ldr	r3, [pc, #268]	; (8008f34 <pvPortMalloc+0x18c>)
 8008e26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e28:	4b42      	ldr	r3, [pc, #264]	; (8008f34 <pvPortMalloc+0x18c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e2e:	e004      	b.n	8008e3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d903      	bls.n	8008e4c <pvPortMalloc+0xa4>
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1f1      	bne.n	8008e30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e4c:	4b36      	ldr	r3, [pc, #216]	; (8008f28 <pvPortMalloc+0x180>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d050      	beq.n	8008ef8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2208      	movs	r2, #8
 8008e5c:	4413      	add	r3, r2
 8008e5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	1ad2      	subs	r2, r2, r3
 8008e70:	2308      	movs	r3, #8
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d91f      	bls.n	8008eb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	f003 0307 	and.w	r3, r3, #7
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00a      	beq.n	8008ea0 <pvPortMalloc+0xf8>
	__asm volatile
 8008e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	613b      	str	r3, [r7, #16]
}
 8008e9c:	bf00      	nop
 8008e9e:	e7fe      	b.n	8008e9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	1ad2      	subs	r2, r2, r3
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008eb2:	69b8      	ldr	r0, [r7, #24]
 8008eb4:	f000 f908 	bl	80090c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008eb8:	4b1d      	ldr	r3, [pc, #116]	; (8008f30 <pvPortMalloc+0x188>)
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	4a1b      	ldr	r2, [pc, #108]	; (8008f30 <pvPortMalloc+0x188>)
 8008ec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ec6:	4b1a      	ldr	r3, [pc, #104]	; (8008f30 <pvPortMalloc+0x188>)
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	4b1b      	ldr	r3, [pc, #108]	; (8008f38 <pvPortMalloc+0x190>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d203      	bcs.n	8008eda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ed2:	4b17      	ldr	r3, [pc, #92]	; (8008f30 <pvPortMalloc+0x188>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a18      	ldr	r2, [pc, #96]	; (8008f38 <pvPortMalloc+0x190>)
 8008ed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	4b13      	ldr	r3, [pc, #76]	; (8008f2c <pvPortMalloc+0x184>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	2200      	movs	r2, #0
 8008eec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008eee:	4b13      	ldr	r3, [pc, #76]	; (8008f3c <pvPortMalloc+0x194>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	4a11      	ldr	r2, [pc, #68]	; (8008f3c <pvPortMalloc+0x194>)
 8008ef6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ef8:	f7fe fd08 	bl	800790c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	f003 0307 	and.w	r3, r3, #7
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00a      	beq.n	8008f1c <pvPortMalloc+0x174>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	60fb      	str	r3, [r7, #12]
}
 8008f18:	bf00      	nop
 8008f1a:	e7fe      	b.n	8008f1a <pvPortMalloc+0x172>
	return pvReturn;
 8008f1c:	69fb      	ldr	r3, [r7, #28]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3728      	adds	r7, #40	; 0x28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	2000514c 	.word	0x2000514c
 8008f2c:	20005160 	.word	0x20005160
 8008f30:	20005150 	.word	0x20005150
 8008f34:	20005144 	.word	0x20005144
 8008f38:	20005154 	.word	0x20005154
 8008f3c:	20005158 	.word	0x20005158

08008f40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d04d      	beq.n	8008fee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f52:	2308      	movs	r3, #8
 8008f54:	425b      	negs	r3, r3
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	4413      	add	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	4b24      	ldr	r3, [pc, #144]	; (8008ff8 <vPortFree+0xb8>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10a      	bne.n	8008f84 <vPortFree+0x44>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	60fb      	str	r3, [r7, #12]
}
 8008f80:	bf00      	nop
 8008f82:	e7fe      	b.n	8008f82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00a      	beq.n	8008fa2 <vPortFree+0x62>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	60bb      	str	r3, [r7, #8]
}
 8008f9e:	bf00      	nop
 8008fa0:	e7fe      	b.n	8008fa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	4b14      	ldr	r3, [pc, #80]	; (8008ff8 <vPortFree+0xb8>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4013      	ands	r3, r2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d01e      	beq.n	8008fee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d11a      	bne.n	8008fee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	4b0e      	ldr	r3, [pc, #56]	; (8008ff8 <vPortFree+0xb8>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	43db      	mvns	r3, r3
 8008fc2:	401a      	ands	r2, r3
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fc8:	f7fe fc92 	bl	80078f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <vPortFree+0xbc>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	4a09      	ldr	r2, [pc, #36]	; (8008ffc <vPortFree+0xbc>)
 8008fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fda:	6938      	ldr	r0, [r7, #16]
 8008fdc:	f000 f874 	bl	80090c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008fe0:	4b07      	ldr	r3, [pc, #28]	; (8009000 <vPortFree+0xc0>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	4a06      	ldr	r2, [pc, #24]	; (8009000 <vPortFree+0xc0>)
 8008fe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008fea:	f7fe fc8f 	bl	800790c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fee:	bf00      	nop
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20005160 	.word	0x20005160
 8008ffc:	20005150 	.word	0x20005150
 8009000:	2000515c 	.word	0x2000515c

08009004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800900a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800900e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009010:	4b27      	ldr	r3, [pc, #156]	; (80090b0 <prvHeapInit+0xac>)
 8009012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00c      	beq.n	8009038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3307      	adds	r3, #7
 8009022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0307 	bic.w	r3, r3, #7
 800902a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	4a1f      	ldr	r2, [pc, #124]	; (80090b0 <prvHeapInit+0xac>)
 8009034:	4413      	add	r3, r2
 8009036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800903c:	4a1d      	ldr	r2, [pc, #116]	; (80090b4 <prvHeapInit+0xb0>)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009042:	4b1c      	ldr	r3, [pc, #112]	; (80090b4 <prvHeapInit+0xb0>)
 8009044:	2200      	movs	r2, #0
 8009046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	4413      	add	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009050:	2208      	movs	r2, #8
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	1a9b      	subs	r3, r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0307 	bic.w	r3, r3, #7
 800905e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4a15      	ldr	r2, [pc, #84]	; (80090b8 <prvHeapInit+0xb4>)
 8009064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009066:	4b14      	ldr	r3, [pc, #80]	; (80090b8 <prvHeapInit+0xb4>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2200      	movs	r2, #0
 800906c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800906e:	4b12      	ldr	r3, [pc, #72]	; (80090b8 <prvHeapInit+0xb4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	1ad2      	subs	r2, r2, r3
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009084:	4b0c      	ldr	r3, [pc, #48]	; (80090b8 <prvHeapInit+0xb4>)
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	4a0a      	ldr	r2, [pc, #40]	; (80090bc <prvHeapInit+0xb8>)
 8009092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	4a09      	ldr	r2, [pc, #36]	; (80090c0 <prvHeapInit+0xbc>)
 800909a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800909c:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <prvHeapInit+0xc0>)
 800909e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090a2:	601a      	str	r2, [r3, #0]
}
 80090a4:	bf00      	nop
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	20001544 	.word	0x20001544
 80090b4:	20005144 	.word	0x20005144
 80090b8:	2000514c 	.word	0x2000514c
 80090bc:	20005154 	.word	0x20005154
 80090c0:	20005150 	.word	0x20005150
 80090c4:	20005160 	.word	0x20005160

080090c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090d0:	4b28      	ldr	r3, [pc, #160]	; (8009174 <prvInsertBlockIntoFreeList+0xac>)
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e002      	b.n	80090dc <prvInsertBlockIntoFreeList+0x14>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d8f7      	bhi.n	80090d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	4413      	add	r3, r2
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d108      	bne.n	800910a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	441a      	add	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	441a      	add	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d118      	bne.n	8009150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	4b15      	ldr	r3, [pc, #84]	; (8009178 <prvInsertBlockIntoFreeList+0xb0>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	429a      	cmp	r2, r3
 8009128:	d00d      	beq.n	8009146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	441a      	add	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	e008      	b.n	8009158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009146:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <prvInsertBlockIntoFreeList+0xb0>)
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e003      	b.n	8009158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d002      	beq.n	8009166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009166:	bf00      	nop
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	20005144 	.word	0x20005144
 8009178:	2000514c 	.word	0x2000514c

0800917c <__cvt>:
 800917c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009180:	ec55 4b10 	vmov	r4, r5, d0
 8009184:	2d00      	cmp	r5, #0
 8009186:	460e      	mov	r6, r1
 8009188:	4619      	mov	r1, r3
 800918a:	462b      	mov	r3, r5
 800918c:	bfbb      	ittet	lt
 800918e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009192:	461d      	movlt	r5, r3
 8009194:	2300      	movge	r3, #0
 8009196:	232d      	movlt	r3, #45	; 0x2d
 8009198:	700b      	strb	r3, [r1, #0]
 800919a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800919c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80091a0:	4691      	mov	r9, r2
 80091a2:	f023 0820 	bic.w	r8, r3, #32
 80091a6:	bfbc      	itt	lt
 80091a8:	4622      	movlt	r2, r4
 80091aa:	4614      	movlt	r4, r2
 80091ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091b0:	d005      	beq.n	80091be <__cvt+0x42>
 80091b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80091b6:	d100      	bne.n	80091ba <__cvt+0x3e>
 80091b8:	3601      	adds	r6, #1
 80091ba:	2102      	movs	r1, #2
 80091bc:	e000      	b.n	80091c0 <__cvt+0x44>
 80091be:	2103      	movs	r1, #3
 80091c0:	ab03      	add	r3, sp, #12
 80091c2:	9301      	str	r3, [sp, #4]
 80091c4:	ab02      	add	r3, sp, #8
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	ec45 4b10 	vmov	d0, r4, r5
 80091cc:	4653      	mov	r3, sl
 80091ce:	4632      	mov	r2, r6
 80091d0:	f000 fdba 	bl	8009d48 <_dtoa_r>
 80091d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80091d8:	4607      	mov	r7, r0
 80091da:	d102      	bne.n	80091e2 <__cvt+0x66>
 80091dc:	f019 0f01 	tst.w	r9, #1
 80091e0:	d022      	beq.n	8009228 <__cvt+0xac>
 80091e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091e6:	eb07 0906 	add.w	r9, r7, r6
 80091ea:	d110      	bne.n	800920e <__cvt+0x92>
 80091ec:	783b      	ldrb	r3, [r7, #0]
 80091ee:	2b30      	cmp	r3, #48	; 0x30
 80091f0:	d10a      	bne.n	8009208 <__cvt+0x8c>
 80091f2:	2200      	movs	r2, #0
 80091f4:	2300      	movs	r3, #0
 80091f6:	4620      	mov	r0, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	f7f7 fc65 	bl	8000ac8 <__aeabi_dcmpeq>
 80091fe:	b918      	cbnz	r0, 8009208 <__cvt+0x8c>
 8009200:	f1c6 0601 	rsb	r6, r6, #1
 8009204:	f8ca 6000 	str.w	r6, [sl]
 8009208:	f8da 3000 	ldr.w	r3, [sl]
 800920c:	4499      	add	r9, r3
 800920e:	2200      	movs	r2, #0
 8009210:	2300      	movs	r3, #0
 8009212:	4620      	mov	r0, r4
 8009214:	4629      	mov	r1, r5
 8009216:	f7f7 fc57 	bl	8000ac8 <__aeabi_dcmpeq>
 800921a:	b108      	cbz	r0, 8009220 <__cvt+0xa4>
 800921c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009220:	2230      	movs	r2, #48	; 0x30
 8009222:	9b03      	ldr	r3, [sp, #12]
 8009224:	454b      	cmp	r3, r9
 8009226:	d307      	bcc.n	8009238 <__cvt+0xbc>
 8009228:	9b03      	ldr	r3, [sp, #12]
 800922a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800922c:	1bdb      	subs	r3, r3, r7
 800922e:	4638      	mov	r0, r7
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	b004      	add	sp, #16
 8009234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009238:	1c59      	adds	r1, r3, #1
 800923a:	9103      	str	r1, [sp, #12]
 800923c:	701a      	strb	r2, [r3, #0]
 800923e:	e7f0      	b.n	8009222 <__cvt+0xa6>

08009240 <__exponent>:
 8009240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009242:	4603      	mov	r3, r0
 8009244:	2900      	cmp	r1, #0
 8009246:	bfb8      	it	lt
 8009248:	4249      	neglt	r1, r1
 800924a:	f803 2b02 	strb.w	r2, [r3], #2
 800924e:	bfb4      	ite	lt
 8009250:	222d      	movlt	r2, #45	; 0x2d
 8009252:	222b      	movge	r2, #43	; 0x2b
 8009254:	2909      	cmp	r1, #9
 8009256:	7042      	strb	r2, [r0, #1]
 8009258:	dd2a      	ble.n	80092b0 <__exponent+0x70>
 800925a:	f10d 0207 	add.w	r2, sp, #7
 800925e:	4617      	mov	r7, r2
 8009260:	260a      	movs	r6, #10
 8009262:	4694      	mov	ip, r2
 8009264:	fb91 f5f6 	sdiv	r5, r1, r6
 8009268:	fb06 1415 	mls	r4, r6, r5, r1
 800926c:	3430      	adds	r4, #48	; 0x30
 800926e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009272:	460c      	mov	r4, r1
 8009274:	2c63      	cmp	r4, #99	; 0x63
 8009276:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800927a:	4629      	mov	r1, r5
 800927c:	dcf1      	bgt.n	8009262 <__exponent+0x22>
 800927e:	3130      	adds	r1, #48	; 0x30
 8009280:	f1ac 0402 	sub.w	r4, ip, #2
 8009284:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009288:	1c41      	adds	r1, r0, #1
 800928a:	4622      	mov	r2, r4
 800928c:	42ba      	cmp	r2, r7
 800928e:	d30a      	bcc.n	80092a6 <__exponent+0x66>
 8009290:	f10d 0209 	add.w	r2, sp, #9
 8009294:	eba2 020c 	sub.w	r2, r2, ip
 8009298:	42bc      	cmp	r4, r7
 800929a:	bf88      	it	hi
 800929c:	2200      	movhi	r2, #0
 800929e:	4413      	add	r3, r2
 80092a0:	1a18      	subs	r0, r3, r0
 80092a2:	b003      	add	sp, #12
 80092a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80092aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80092ae:	e7ed      	b.n	800928c <__exponent+0x4c>
 80092b0:	2330      	movs	r3, #48	; 0x30
 80092b2:	3130      	adds	r1, #48	; 0x30
 80092b4:	7083      	strb	r3, [r0, #2]
 80092b6:	70c1      	strb	r1, [r0, #3]
 80092b8:	1d03      	adds	r3, r0, #4
 80092ba:	e7f1      	b.n	80092a0 <__exponent+0x60>

080092bc <_printf_float>:
 80092bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	ed2d 8b02 	vpush	{d8}
 80092c4:	b08d      	sub	sp, #52	; 0x34
 80092c6:	460c      	mov	r4, r1
 80092c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80092cc:	4616      	mov	r6, r2
 80092ce:	461f      	mov	r7, r3
 80092d0:	4605      	mov	r5, r0
 80092d2:	f000 fc71 	bl	8009bb8 <_localeconv_r>
 80092d6:	f8d0 a000 	ldr.w	sl, [r0]
 80092da:	4650      	mov	r0, sl
 80092dc:	f7f6 ffc8 	bl	8000270 <strlen>
 80092e0:	2300      	movs	r3, #0
 80092e2:	930a      	str	r3, [sp, #40]	; 0x28
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	9305      	str	r3, [sp, #20]
 80092e8:	f8d8 3000 	ldr.w	r3, [r8]
 80092ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80092f0:	3307      	adds	r3, #7
 80092f2:	f023 0307 	bic.w	r3, r3, #7
 80092f6:	f103 0208 	add.w	r2, r3, #8
 80092fa:	f8c8 2000 	str.w	r2, [r8]
 80092fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009302:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009306:	9307      	str	r3, [sp, #28]
 8009308:	f8cd 8018 	str.w	r8, [sp, #24]
 800930c:	ee08 0a10 	vmov	s16, r0
 8009310:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009314:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009318:	4b9e      	ldr	r3, [pc, #632]	; (8009594 <_printf_float+0x2d8>)
 800931a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800931e:	f7f7 fc05 	bl	8000b2c <__aeabi_dcmpun>
 8009322:	bb88      	cbnz	r0, 8009388 <_printf_float+0xcc>
 8009324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009328:	4b9a      	ldr	r3, [pc, #616]	; (8009594 <_printf_float+0x2d8>)
 800932a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800932e:	f7f7 fbdf 	bl	8000af0 <__aeabi_dcmple>
 8009332:	bb48      	cbnz	r0, 8009388 <_printf_float+0xcc>
 8009334:	2200      	movs	r2, #0
 8009336:	2300      	movs	r3, #0
 8009338:	4640      	mov	r0, r8
 800933a:	4649      	mov	r1, r9
 800933c:	f7f7 fbce 	bl	8000adc <__aeabi_dcmplt>
 8009340:	b110      	cbz	r0, 8009348 <_printf_float+0x8c>
 8009342:	232d      	movs	r3, #45	; 0x2d
 8009344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009348:	4a93      	ldr	r2, [pc, #588]	; (8009598 <_printf_float+0x2dc>)
 800934a:	4b94      	ldr	r3, [pc, #592]	; (800959c <_printf_float+0x2e0>)
 800934c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009350:	bf94      	ite	ls
 8009352:	4690      	movls	r8, r2
 8009354:	4698      	movhi	r8, r3
 8009356:	2303      	movs	r3, #3
 8009358:	6123      	str	r3, [r4, #16]
 800935a:	9b05      	ldr	r3, [sp, #20]
 800935c:	f023 0304 	bic.w	r3, r3, #4
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	f04f 0900 	mov.w	r9, #0
 8009366:	9700      	str	r7, [sp, #0]
 8009368:	4633      	mov	r3, r6
 800936a:	aa0b      	add	r2, sp, #44	; 0x2c
 800936c:	4621      	mov	r1, r4
 800936e:	4628      	mov	r0, r5
 8009370:	f000 f9da 	bl	8009728 <_printf_common>
 8009374:	3001      	adds	r0, #1
 8009376:	f040 8090 	bne.w	800949a <_printf_float+0x1de>
 800937a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800937e:	b00d      	add	sp, #52	; 0x34
 8009380:	ecbd 8b02 	vpop	{d8}
 8009384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009388:	4642      	mov	r2, r8
 800938a:	464b      	mov	r3, r9
 800938c:	4640      	mov	r0, r8
 800938e:	4649      	mov	r1, r9
 8009390:	f7f7 fbcc 	bl	8000b2c <__aeabi_dcmpun>
 8009394:	b140      	cbz	r0, 80093a8 <_printf_float+0xec>
 8009396:	464b      	mov	r3, r9
 8009398:	2b00      	cmp	r3, #0
 800939a:	bfbc      	itt	lt
 800939c:	232d      	movlt	r3, #45	; 0x2d
 800939e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80093a2:	4a7f      	ldr	r2, [pc, #508]	; (80095a0 <_printf_float+0x2e4>)
 80093a4:	4b7f      	ldr	r3, [pc, #508]	; (80095a4 <_printf_float+0x2e8>)
 80093a6:	e7d1      	b.n	800934c <_printf_float+0x90>
 80093a8:	6863      	ldr	r3, [r4, #4]
 80093aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80093ae:	9206      	str	r2, [sp, #24]
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	d13f      	bne.n	8009434 <_printf_float+0x178>
 80093b4:	2306      	movs	r3, #6
 80093b6:	6063      	str	r3, [r4, #4]
 80093b8:	9b05      	ldr	r3, [sp, #20]
 80093ba:	6861      	ldr	r1, [r4, #4]
 80093bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80093c0:	2300      	movs	r3, #0
 80093c2:	9303      	str	r3, [sp, #12]
 80093c4:	ab0a      	add	r3, sp, #40	; 0x28
 80093c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80093ca:	ab09      	add	r3, sp, #36	; 0x24
 80093cc:	ec49 8b10 	vmov	d0, r8, r9
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	6022      	str	r2, [r4, #0]
 80093d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80093d8:	4628      	mov	r0, r5
 80093da:	f7ff fecf 	bl	800917c <__cvt>
 80093de:	9b06      	ldr	r3, [sp, #24]
 80093e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093e2:	2b47      	cmp	r3, #71	; 0x47
 80093e4:	4680      	mov	r8, r0
 80093e6:	d108      	bne.n	80093fa <_printf_float+0x13e>
 80093e8:	1cc8      	adds	r0, r1, #3
 80093ea:	db02      	blt.n	80093f2 <_printf_float+0x136>
 80093ec:	6863      	ldr	r3, [r4, #4]
 80093ee:	4299      	cmp	r1, r3
 80093f0:	dd41      	ble.n	8009476 <_printf_float+0x1ba>
 80093f2:	f1ab 0302 	sub.w	r3, fp, #2
 80093f6:	fa5f fb83 	uxtb.w	fp, r3
 80093fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093fe:	d820      	bhi.n	8009442 <_printf_float+0x186>
 8009400:	3901      	subs	r1, #1
 8009402:	465a      	mov	r2, fp
 8009404:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009408:	9109      	str	r1, [sp, #36]	; 0x24
 800940a:	f7ff ff19 	bl	8009240 <__exponent>
 800940e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009410:	1813      	adds	r3, r2, r0
 8009412:	2a01      	cmp	r2, #1
 8009414:	4681      	mov	r9, r0
 8009416:	6123      	str	r3, [r4, #16]
 8009418:	dc02      	bgt.n	8009420 <_printf_float+0x164>
 800941a:	6822      	ldr	r2, [r4, #0]
 800941c:	07d2      	lsls	r2, r2, #31
 800941e:	d501      	bpl.n	8009424 <_printf_float+0x168>
 8009420:	3301      	adds	r3, #1
 8009422:	6123      	str	r3, [r4, #16]
 8009424:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009428:	2b00      	cmp	r3, #0
 800942a:	d09c      	beq.n	8009366 <_printf_float+0xaa>
 800942c:	232d      	movs	r3, #45	; 0x2d
 800942e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009432:	e798      	b.n	8009366 <_printf_float+0xaa>
 8009434:	9a06      	ldr	r2, [sp, #24]
 8009436:	2a47      	cmp	r2, #71	; 0x47
 8009438:	d1be      	bne.n	80093b8 <_printf_float+0xfc>
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1bc      	bne.n	80093b8 <_printf_float+0xfc>
 800943e:	2301      	movs	r3, #1
 8009440:	e7b9      	b.n	80093b6 <_printf_float+0xfa>
 8009442:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009446:	d118      	bne.n	800947a <_printf_float+0x1be>
 8009448:	2900      	cmp	r1, #0
 800944a:	6863      	ldr	r3, [r4, #4]
 800944c:	dd0b      	ble.n	8009466 <_printf_float+0x1aa>
 800944e:	6121      	str	r1, [r4, #16]
 8009450:	b913      	cbnz	r3, 8009458 <_printf_float+0x19c>
 8009452:	6822      	ldr	r2, [r4, #0]
 8009454:	07d0      	lsls	r0, r2, #31
 8009456:	d502      	bpl.n	800945e <_printf_float+0x1a2>
 8009458:	3301      	adds	r3, #1
 800945a:	440b      	add	r3, r1
 800945c:	6123      	str	r3, [r4, #16]
 800945e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009460:	f04f 0900 	mov.w	r9, #0
 8009464:	e7de      	b.n	8009424 <_printf_float+0x168>
 8009466:	b913      	cbnz	r3, 800946e <_printf_float+0x1b2>
 8009468:	6822      	ldr	r2, [r4, #0]
 800946a:	07d2      	lsls	r2, r2, #31
 800946c:	d501      	bpl.n	8009472 <_printf_float+0x1b6>
 800946e:	3302      	adds	r3, #2
 8009470:	e7f4      	b.n	800945c <_printf_float+0x1a0>
 8009472:	2301      	movs	r3, #1
 8009474:	e7f2      	b.n	800945c <_printf_float+0x1a0>
 8009476:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800947a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800947c:	4299      	cmp	r1, r3
 800947e:	db05      	blt.n	800948c <_printf_float+0x1d0>
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	6121      	str	r1, [r4, #16]
 8009484:	07d8      	lsls	r0, r3, #31
 8009486:	d5ea      	bpl.n	800945e <_printf_float+0x1a2>
 8009488:	1c4b      	adds	r3, r1, #1
 800948a:	e7e7      	b.n	800945c <_printf_float+0x1a0>
 800948c:	2900      	cmp	r1, #0
 800948e:	bfd4      	ite	le
 8009490:	f1c1 0202 	rsble	r2, r1, #2
 8009494:	2201      	movgt	r2, #1
 8009496:	4413      	add	r3, r2
 8009498:	e7e0      	b.n	800945c <_printf_float+0x1a0>
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	055a      	lsls	r2, r3, #21
 800949e:	d407      	bmi.n	80094b0 <_printf_float+0x1f4>
 80094a0:	6923      	ldr	r3, [r4, #16]
 80094a2:	4642      	mov	r2, r8
 80094a4:	4631      	mov	r1, r6
 80094a6:	4628      	mov	r0, r5
 80094a8:	47b8      	blx	r7
 80094aa:	3001      	adds	r0, #1
 80094ac:	d12c      	bne.n	8009508 <_printf_float+0x24c>
 80094ae:	e764      	b.n	800937a <_printf_float+0xbe>
 80094b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094b4:	f240 80e0 	bls.w	8009678 <_printf_float+0x3bc>
 80094b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094bc:	2200      	movs	r2, #0
 80094be:	2300      	movs	r3, #0
 80094c0:	f7f7 fb02 	bl	8000ac8 <__aeabi_dcmpeq>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d034      	beq.n	8009532 <_printf_float+0x276>
 80094c8:	4a37      	ldr	r2, [pc, #220]	; (80095a8 <_printf_float+0x2ec>)
 80094ca:	2301      	movs	r3, #1
 80094cc:	4631      	mov	r1, r6
 80094ce:	4628      	mov	r0, r5
 80094d0:	47b8      	blx	r7
 80094d2:	3001      	adds	r0, #1
 80094d4:	f43f af51 	beq.w	800937a <_printf_float+0xbe>
 80094d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094dc:	429a      	cmp	r2, r3
 80094de:	db02      	blt.n	80094e6 <_printf_float+0x22a>
 80094e0:	6823      	ldr	r3, [r4, #0]
 80094e2:	07d8      	lsls	r0, r3, #31
 80094e4:	d510      	bpl.n	8009508 <_printf_float+0x24c>
 80094e6:	ee18 3a10 	vmov	r3, s16
 80094ea:	4652      	mov	r2, sl
 80094ec:	4631      	mov	r1, r6
 80094ee:	4628      	mov	r0, r5
 80094f0:	47b8      	blx	r7
 80094f2:	3001      	adds	r0, #1
 80094f4:	f43f af41 	beq.w	800937a <_printf_float+0xbe>
 80094f8:	f04f 0800 	mov.w	r8, #0
 80094fc:	f104 091a 	add.w	r9, r4, #26
 8009500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009502:	3b01      	subs	r3, #1
 8009504:	4543      	cmp	r3, r8
 8009506:	dc09      	bgt.n	800951c <_printf_float+0x260>
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	079b      	lsls	r3, r3, #30
 800950c:	f100 8107 	bmi.w	800971e <_printf_float+0x462>
 8009510:	68e0      	ldr	r0, [r4, #12]
 8009512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009514:	4298      	cmp	r0, r3
 8009516:	bfb8      	it	lt
 8009518:	4618      	movlt	r0, r3
 800951a:	e730      	b.n	800937e <_printf_float+0xc2>
 800951c:	2301      	movs	r3, #1
 800951e:	464a      	mov	r2, r9
 8009520:	4631      	mov	r1, r6
 8009522:	4628      	mov	r0, r5
 8009524:	47b8      	blx	r7
 8009526:	3001      	adds	r0, #1
 8009528:	f43f af27 	beq.w	800937a <_printf_float+0xbe>
 800952c:	f108 0801 	add.w	r8, r8, #1
 8009530:	e7e6      	b.n	8009500 <_printf_float+0x244>
 8009532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009534:	2b00      	cmp	r3, #0
 8009536:	dc39      	bgt.n	80095ac <_printf_float+0x2f0>
 8009538:	4a1b      	ldr	r2, [pc, #108]	; (80095a8 <_printf_float+0x2ec>)
 800953a:	2301      	movs	r3, #1
 800953c:	4631      	mov	r1, r6
 800953e:	4628      	mov	r0, r5
 8009540:	47b8      	blx	r7
 8009542:	3001      	adds	r0, #1
 8009544:	f43f af19 	beq.w	800937a <_printf_float+0xbe>
 8009548:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800954c:	4313      	orrs	r3, r2
 800954e:	d102      	bne.n	8009556 <_printf_float+0x29a>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	07d9      	lsls	r1, r3, #31
 8009554:	d5d8      	bpl.n	8009508 <_printf_float+0x24c>
 8009556:	ee18 3a10 	vmov	r3, s16
 800955a:	4652      	mov	r2, sl
 800955c:	4631      	mov	r1, r6
 800955e:	4628      	mov	r0, r5
 8009560:	47b8      	blx	r7
 8009562:	3001      	adds	r0, #1
 8009564:	f43f af09 	beq.w	800937a <_printf_float+0xbe>
 8009568:	f04f 0900 	mov.w	r9, #0
 800956c:	f104 0a1a 	add.w	sl, r4, #26
 8009570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009572:	425b      	negs	r3, r3
 8009574:	454b      	cmp	r3, r9
 8009576:	dc01      	bgt.n	800957c <_printf_float+0x2c0>
 8009578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800957a:	e792      	b.n	80094a2 <_printf_float+0x1e6>
 800957c:	2301      	movs	r3, #1
 800957e:	4652      	mov	r2, sl
 8009580:	4631      	mov	r1, r6
 8009582:	4628      	mov	r0, r5
 8009584:	47b8      	blx	r7
 8009586:	3001      	adds	r0, #1
 8009588:	f43f aef7 	beq.w	800937a <_printf_float+0xbe>
 800958c:	f109 0901 	add.w	r9, r9, #1
 8009590:	e7ee      	b.n	8009570 <_printf_float+0x2b4>
 8009592:	bf00      	nop
 8009594:	7fefffff 	.word	0x7fefffff
 8009598:	0800bc1c 	.word	0x0800bc1c
 800959c:	0800bc20 	.word	0x0800bc20
 80095a0:	0800bc24 	.word	0x0800bc24
 80095a4:	0800bc28 	.word	0x0800bc28
 80095a8:	0800bc2c 	.word	0x0800bc2c
 80095ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095b0:	429a      	cmp	r2, r3
 80095b2:	bfa8      	it	ge
 80095b4:	461a      	movge	r2, r3
 80095b6:	2a00      	cmp	r2, #0
 80095b8:	4691      	mov	r9, r2
 80095ba:	dc37      	bgt.n	800962c <_printf_float+0x370>
 80095bc:	f04f 0b00 	mov.w	fp, #0
 80095c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095c4:	f104 021a 	add.w	r2, r4, #26
 80095c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095ca:	9305      	str	r3, [sp, #20]
 80095cc:	eba3 0309 	sub.w	r3, r3, r9
 80095d0:	455b      	cmp	r3, fp
 80095d2:	dc33      	bgt.n	800963c <_printf_float+0x380>
 80095d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095d8:	429a      	cmp	r2, r3
 80095da:	db3b      	blt.n	8009654 <_printf_float+0x398>
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	07da      	lsls	r2, r3, #31
 80095e0:	d438      	bmi.n	8009654 <_printf_float+0x398>
 80095e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80095e6:	eba2 0903 	sub.w	r9, r2, r3
 80095ea:	9b05      	ldr	r3, [sp, #20]
 80095ec:	1ad2      	subs	r2, r2, r3
 80095ee:	4591      	cmp	r9, r2
 80095f0:	bfa8      	it	ge
 80095f2:	4691      	movge	r9, r2
 80095f4:	f1b9 0f00 	cmp.w	r9, #0
 80095f8:	dc35      	bgt.n	8009666 <_printf_float+0x3aa>
 80095fa:	f04f 0800 	mov.w	r8, #0
 80095fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009602:	f104 0a1a 	add.w	sl, r4, #26
 8009606:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800960a:	1a9b      	subs	r3, r3, r2
 800960c:	eba3 0309 	sub.w	r3, r3, r9
 8009610:	4543      	cmp	r3, r8
 8009612:	f77f af79 	ble.w	8009508 <_printf_float+0x24c>
 8009616:	2301      	movs	r3, #1
 8009618:	4652      	mov	r2, sl
 800961a:	4631      	mov	r1, r6
 800961c:	4628      	mov	r0, r5
 800961e:	47b8      	blx	r7
 8009620:	3001      	adds	r0, #1
 8009622:	f43f aeaa 	beq.w	800937a <_printf_float+0xbe>
 8009626:	f108 0801 	add.w	r8, r8, #1
 800962a:	e7ec      	b.n	8009606 <_printf_float+0x34a>
 800962c:	4613      	mov	r3, r2
 800962e:	4631      	mov	r1, r6
 8009630:	4642      	mov	r2, r8
 8009632:	4628      	mov	r0, r5
 8009634:	47b8      	blx	r7
 8009636:	3001      	adds	r0, #1
 8009638:	d1c0      	bne.n	80095bc <_printf_float+0x300>
 800963a:	e69e      	b.n	800937a <_printf_float+0xbe>
 800963c:	2301      	movs	r3, #1
 800963e:	4631      	mov	r1, r6
 8009640:	4628      	mov	r0, r5
 8009642:	9205      	str	r2, [sp, #20]
 8009644:	47b8      	blx	r7
 8009646:	3001      	adds	r0, #1
 8009648:	f43f ae97 	beq.w	800937a <_printf_float+0xbe>
 800964c:	9a05      	ldr	r2, [sp, #20]
 800964e:	f10b 0b01 	add.w	fp, fp, #1
 8009652:	e7b9      	b.n	80095c8 <_printf_float+0x30c>
 8009654:	ee18 3a10 	vmov	r3, s16
 8009658:	4652      	mov	r2, sl
 800965a:	4631      	mov	r1, r6
 800965c:	4628      	mov	r0, r5
 800965e:	47b8      	blx	r7
 8009660:	3001      	adds	r0, #1
 8009662:	d1be      	bne.n	80095e2 <_printf_float+0x326>
 8009664:	e689      	b.n	800937a <_printf_float+0xbe>
 8009666:	9a05      	ldr	r2, [sp, #20]
 8009668:	464b      	mov	r3, r9
 800966a:	4442      	add	r2, r8
 800966c:	4631      	mov	r1, r6
 800966e:	4628      	mov	r0, r5
 8009670:	47b8      	blx	r7
 8009672:	3001      	adds	r0, #1
 8009674:	d1c1      	bne.n	80095fa <_printf_float+0x33e>
 8009676:	e680      	b.n	800937a <_printf_float+0xbe>
 8009678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800967a:	2a01      	cmp	r2, #1
 800967c:	dc01      	bgt.n	8009682 <_printf_float+0x3c6>
 800967e:	07db      	lsls	r3, r3, #31
 8009680:	d53a      	bpl.n	80096f8 <_printf_float+0x43c>
 8009682:	2301      	movs	r3, #1
 8009684:	4642      	mov	r2, r8
 8009686:	4631      	mov	r1, r6
 8009688:	4628      	mov	r0, r5
 800968a:	47b8      	blx	r7
 800968c:	3001      	adds	r0, #1
 800968e:	f43f ae74 	beq.w	800937a <_printf_float+0xbe>
 8009692:	ee18 3a10 	vmov	r3, s16
 8009696:	4652      	mov	r2, sl
 8009698:	4631      	mov	r1, r6
 800969a:	4628      	mov	r0, r5
 800969c:	47b8      	blx	r7
 800969e:	3001      	adds	r0, #1
 80096a0:	f43f ae6b 	beq.w	800937a <_printf_float+0xbe>
 80096a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096a8:	2200      	movs	r2, #0
 80096aa:	2300      	movs	r3, #0
 80096ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80096b0:	f7f7 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80096b4:	b9d8      	cbnz	r0, 80096ee <_printf_float+0x432>
 80096b6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80096ba:	f108 0201 	add.w	r2, r8, #1
 80096be:	4631      	mov	r1, r6
 80096c0:	4628      	mov	r0, r5
 80096c2:	47b8      	blx	r7
 80096c4:	3001      	adds	r0, #1
 80096c6:	d10e      	bne.n	80096e6 <_printf_float+0x42a>
 80096c8:	e657      	b.n	800937a <_printf_float+0xbe>
 80096ca:	2301      	movs	r3, #1
 80096cc:	4652      	mov	r2, sl
 80096ce:	4631      	mov	r1, r6
 80096d0:	4628      	mov	r0, r5
 80096d2:	47b8      	blx	r7
 80096d4:	3001      	adds	r0, #1
 80096d6:	f43f ae50 	beq.w	800937a <_printf_float+0xbe>
 80096da:	f108 0801 	add.w	r8, r8, #1
 80096de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096e0:	3b01      	subs	r3, #1
 80096e2:	4543      	cmp	r3, r8
 80096e4:	dcf1      	bgt.n	80096ca <_printf_float+0x40e>
 80096e6:	464b      	mov	r3, r9
 80096e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80096ec:	e6da      	b.n	80094a4 <_printf_float+0x1e8>
 80096ee:	f04f 0800 	mov.w	r8, #0
 80096f2:	f104 0a1a 	add.w	sl, r4, #26
 80096f6:	e7f2      	b.n	80096de <_printf_float+0x422>
 80096f8:	2301      	movs	r3, #1
 80096fa:	4642      	mov	r2, r8
 80096fc:	e7df      	b.n	80096be <_printf_float+0x402>
 80096fe:	2301      	movs	r3, #1
 8009700:	464a      	mov	r2, r9
 8009702:	4631      	mov	r1, r6
 8009704:	4628      	mov	r0, r5
 8009706:	47b8      	blx	r7
 8009708:	3001      	adds	r0, #1
 800970a:	f43f ae36 	beq.w	800937a <_printf_float+0xbe>
 800970e:	f108 0801 	add.w	r8, r8, #1
 8009712:	68e3      	ldr	r3, [r4, #12]
 8009714:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009716:	1a5b      	subs	r3, r3, r1
 8009718:	4543      	cmp	r3, r8
 800971a:	dcf0      	bgt.n	80096fe <_printf_float+0x442>
 800971c:	e6f8      	b.n	8009510 <_printf_float+0x254>
 800971e:	f04f 0800 	mov.w	r8, #0
 8009722:	f104 0919 	add.w	r9, r4, #25
 8009726:	e7f4      	b.n	8009712 <_printf_float+0x456>

08009728 <_printf_common>:
 8009728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800972c:	4616      	mov	r6, r2
 800972e:	4699      	mov	r9, r3
 8009730:	688a      	ldr	r2, [r1, #8]
 8009732:	690b      	ldr	r3, [r1, #16]
 8009734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009738:	4293      	cmp	r3, r2
 800973a:	bfb8      	it	lt
 800973c:	4613      	movlt	r3, r2
 800973e:	6033      	str	r3, [r6, #0]
 8009740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009744:	4607      	mov	r7, r0
 8009746:	460c      	mov	r4, r1
 8009748:	b10a      	cbz	r2, 800974e <_printf_common+0x26>
 800974a:	3301      	adds	r3, #1
 800974c:	6033      	str	r3, [r6, #0]
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	0699      	lsls	r1, r3, #26
 8009752:	bf42      	ittt	mi
 8009754:	6833      	ldrmi	r3, [r6, #0]
 8009756:	3302      	addmi	r3, #2
 8009758:	6033      	strmi	r3, [r6, #0]
 800975a:	6825      	ldr	r5, [r4, #0]
 800975c:	f015 0506 	ands.w	r5, r5, #6
 8009760:	d106      	bne.n	8009770 <_printf_common+0x48>
 8009762:	f104 0a19 	add.w	sl, r4, #25
 8009766:	68e3      	ldr	r3, [r4, #12]
 8009768:	6832      	ldr	r2, [r6, #0]
 800976a:	1a9b      	subs	r3, r3, r2
 800976c:	42ab      	cmp	r3, r5
 800976e:	dc26      	bgt.n	80097be <_printf_common+0x96>
 8009770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009774:	1e13      	subs	r3, r2, #0
 8009776:	6822      	ldr	r2, [r4, #0]
 8009778:	bf18      	it	ne
 800977a:	2301      	movne	r3, #1
 800977c:	0692      	lsls	r2, r2, #26
 800977e:	d42b      	bmi.n	80097d8 <_printf_common+0xb0>
 8009780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009784:	4649      	mov	r1, r9
 8009786:	4638      	mov	r0, r7
 8009788:	47c0      	blx	r8
 800978a:	3001      	adds	r0, #1
 800978c:	d01e      	beq.n	80097cc <_printf_common+0xa4>
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	6922      	ldr	r2, [r4, #16]
 8009792:	f003 0306 	and.w	r3, r3, #6
 8009796:	2b04      	cmp	r3, #4
 8009798:	bf02      	ittt	eq
 800979a:	68e5      	ldreq	r5, [r4, #12]
 800979c:	6833      	ldreq	r3, [r6, #0]
 800979e:	1aed      	subeq	r5, r5, r3
 80097a0:	68a3      	ldr	r3, [r4, #8]
 80097a2:	bf0c      	ite	eq
 80097a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097a8:	2500      	movne	r5, #0
 80097aa:	4293      	cmp	r3, r2
 80097ac:	bfc4      	itt	gt
 80097ae:	1a9b      	subgt	r3, r3, r2
 80097b0:	18ed      	addgt	r5, r5, r3
 80097b2:	2600      	movs	r6, #0
 80097b4:	341a      	adds	r4, #26
 80097b6:	42b5      	cmp	r5, r6
 80097b8:	d11a      	bne.n	80097f0 <_printf_common+0xc8>
 80097ba:	2000      	movs	r0, #0
 80097bc:	e008      	b.n	80097d0 <_printf_common+0xa8>
 80097be:	2301      	movs	r3, #1
 80097c0:	4652      	mov	r2, sl
 80097c2:	4649      	mov	r1, r9
 80097c4:	4638      	mov	r0, r7
 80097c6:	47c0      	blx	r8
 80097c8:	3001      	adds	r0, #1
 80097ca:	d103      	bne.n	80097d4 <_printf_common+0xac>
 80097cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d4:	3501      	adds	r5, #1
 80097d6:	e7c6      	b.n	8009766 <_printf_common+0x3e>
 80097d8:	18e1      	adds	r1, r4, r3
 80097da:	1c5a      	adds	r2, r3, #1
 80097dc:	2030      	movs	r0, #48	; 0x30
 80097de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097e2:	4422      	add	r2, r4
 80097e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097ec:	3302      	adds	r3, #2
 80097ee:	e7c7      	b.n	8009780 <_printf_common+0x58>
 80097f0:	2301      	movs	r3, #1
 80097f2:	4622      	mov	r2, r4
 80097f4:	4649      	mov	r1, r9
 80097f6:	4638      	mov	r0, r7
 80097f8:	47c0      	blx	r8
 80097fa:	3001      	adds	r0, #1
 80097fc:	d0e6      	beq.n	80097cc <_printf_common+0xa4>
 80097fe:	3601      	adds	r6, #1
 8009800:	e7d9      	b.n	80097b6 <_printf_common+0x8e>
	...

08009804 <_printf_i>:
 8009804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009808:	7e0f      	ldrb	r7, [r1, #24]
 800980a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800980c:	2f78      	cmp	r7, #120	; 0x78
 800980e:	4691      	mov	r9, r2
 8009810:	4680      	mov	r8, r0
 8009812:	460c      	mov	r4, r1
 8009814:	469a      	mov	sl, r3
 8009816:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800981a:	d807      	bhi.n	800982c <_printf_i+0x28>
 800981c:	2f62      	cmp	r7, #98	; 0x62
 800981e:	d80a      	bhi.n	8009836 <_printf_i+0x32>
 8009820:	2f00      	cmp	r7, #0
 8009822:	f000 80d4 	beq.w	80099ce <_printf_i+0x1ca>
 8009826:	2f58      	cmp	r7, #88	; 0x58
 8009828:	f000 80c0 	beq.w	80099ac <_printf_i+0x1a8>
 800982c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009834:	e03a      	b.n	80098ac <_printf_i+0xa8>
 8009836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800983a:	2b15      	cmp	r3, #21
 800983c:	d8f6      	bhi.n	800982c <_printf_i+0x28>
 800983e:	a101      	add	r1, pc, #4	; (adr r1, 8009844 <_printf_i+0x40>)
 8009840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009844:	0800989d 	.word	0x0800989d
 8009848:	080098b1 	.word	0x080098b1
 800984c:	0800982d 	.word	0x0800982d
 8009850:	0800982d 	.word	0x0800982d
 8009854:	0800982d 	.word	0x0800982d
 8009858:	0800982d 	.word	0x0800982d
 800985c:	080098b1 	.word	0x080098b1
 8009860:	0800982d 	.word	0x0800982d
 8009864:	0800982d 	.word	0x0800982d
 8009868:	0800982d 	.word	0x0800982d
 800986c:	0800982d 	.word	0x0800982d
 8009870:	080099b5 	.word	0x080099b5
 8009874:	080098dd 	.word	0x080098dd
 8009878:	0800996f 	.word	0x0800996f
 800987c:	0800982d 	.word	0x0800982d
 8009880:	0800982d 	.word	0x0800982d
 8009884:	080099d7 	.word	0x080099d7
 8009888:	0800982d 	.word	0x0800982d
 800988c:	080098dd 	.word	0x080098dd
 8009890:	0800982d 	.word	0x0800982d
 8009894:	0800982d 	.word	0x0800982d
 8009898:	08009977 	.word	0x08009977
 800989c:	682b      	ldr	r3, [r5, #0]
 800989e:	1d1a      	adds	r2, r3, #4
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	602a      	str	r2, [r5, #0]
 80098a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098ac:	2301      	movs	r3, #1
 80098ae:	e09f      	b.n	80099f0 <_printf_i+0x1ec>
 80098b0:	6820      	ldr	r0, [r4, #0]
 80098b2:	682b      	ldr	r3, [r5, #0]
 80098b4:	0607      	lsls	r7, r0, #24
 80098b6:	f103 0104 	add.w	r1, r3, #4
 80098ba:	6029      	str	r1, [r5, #0]
 80098bc:	d501      	bpl.n	80098c2 <_printf_i+0xbe>
 80098be:	681e      	ldr	r6, [r3, #0]
 80098c0:	e003      	b.n	80098ca <_printf_i+0xc6>
 80098c2:	0646      	lsls	r6, r0, #25
 80098c4:	d5fb      	bpl.n	80098be <_printf_i+0xba>
 80098c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	da03      	bge.n	80098d6 <_printf_i+0xd2>
 80098ce:	232d      	movs	r3, #45	; 0x2d
 80098d0:	4276      	negs	r6, r6
 80098d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098d6:	485a      	ldr	r0, [pc, #360]	; (8009a40 <_printf_i+0x23c>)
 80098d8:	230a      	movs	r3, #10
 80098da:	e012      	b.n	8009902 <_printf_i+0xfe>
 80098dc:	682b      	ldr	r3, [r5, #0]
 80098de:	6820      	ldr	r0, [r4, #0]
 80098e0:	1d19      	adds	r1, r3, #4
 80098e2:	6029      	str	r1, [r5, #0]
 80098e4:	0605      	lsls	r5, r0, #24
 80098e6:	d501      	bpl.n	80098ec <_printf_i+0xe8>
 80098e8:	681e      	ldr	r6, [r3, #0]
 80098ea:	e002      	b.n	80098f2 <_printf_i+0xee>
 80098ec:	0641      	lsls	r1, r0, #25
 80098ee:	d5fb      	bpl.n	80098e8 <_printf_i+0xe4>
 80098f0:	881e      	ldrh	r6, [r3, #0]
 80098f2:	4853      	ldr	r0, [pc, #332]	; (8009a40 <_printf_i+0x23c>)
 80098f4:	2f6f      	cmp	r7, #111	; 0x6f
 80098f6:	bf0c      	ite	eq
 80098f8:	2308      	moveq	r3, #8
 80098fa:	230a      	movne	r3, #10
 80098fc:	2100      	movs	r1, #0
 80098fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009902:	6865      	ldr	r5, [r4, #4]
 8009904:	60a5      	str	r5, [r4, #8]
 8009906:	2d00      	cmp	r5, #0
 8009908:	bfa2      	ittt	ge
 800990a:	6821      	ldrge	r1, [r4, #0]
 800990c:	f021 0104 	bicge.w	r1, r1, #4
 8009910:	6021      	strge	r1, [r4, #0]
 8009912:	b90e      	cbnz	r6, 8009918 <_printf_i+0x114>
 8009914:	2d00      	cmp	r5, #0
 8009916:	d04b      	beq.n	80099b0 <_printf_i+0x1ac>
 8009918:	4615      	mov	r5, r2
 800991a:	fbb6 f1f3 	udiv	r1, r6, r3
 800991e:	fb03 6711 	mls	r7, r3, r1, r6
 8009922:	5dc7      	ldrb	r7, [r0, r7]
 8009924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009928:	4637      	mov	r7, r6
 800992a:	42bb      	cmp	r3, r7
 800992c:	460e      	mov	r6, r1
 800992e:	d9f4      	bls.n	800991a <_printf_i+0x116>
 8009930:	2b08      	cmp	r3, #8
 8009932:	d10b      	bne.n	800994c <_printf_i+0x148>
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	07de      	lsls	r6, r3, #31
 8009938:	d508      	bpl.n	800994c <_printf_i+0x148>
 800993a:	6923      	ldr	r3, [r4, #16]
 800993c:	6861      	ldr	r1, [r4, #4]
 800993e:	4299      	cmp	r1, r3
 8009940:	bfde      	ittt	le
 8009942:	2330      	movle	r3, #48	; 0x30
 8009944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009948:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800994c:	1b52      	subs	r2, r2, r5
 800994e:	6122      	str	r2, [r4, #16]
 8009950:	f8cd a000 	str.w	sl, [sp]
 8009954:	464b      	mov	r3, r9
 8009956:	aa03      	add	r2, sp, #12
 8009958:	4621      	mov	r1, r4
 800995a:	4640      	mov	r0, r8
 800995c:	f7ff fee4 	bl	8009728 <_printf_common>
 8009960:	3001      	adds	r0, #1
 8009962:	d14a      	bne.n	80099fa <_printf_i+0x1f6>
 8009964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009968:	b004      	add	sp, #16
 800996a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	f043 0320 	orr.w	r3, r3, #32
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	4833      	ldr	r0, [pc, #204]	; (8009a44 <_printf_i+0x240>)
 8009978:	2778      	movs	r7, #120	; 0x78
 800997a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	6829      	ldr	r1, [r5, #0]
 8009982:	061f      	lsls	r7, r3, #24
 8009984:	f851 6b04 	ldr.w	r6, [r1], #4
 8009988:	d402      	bmi.n	8009990 <_printf_i+0x18c>
 800998a:	065f      	lsls	r7, r3, #25
 800998c:	bf48      	it	mi
 800998e:	b2b6      	uxthmi	r6, r6
 8009990:	07df      	lsls	r7, r3, #31
 8009992:	bf48      	it	mi
 8009994:	f043 0320 	orrmi.w	r3, r3, #32
 8009998:	6029      	str	r1, [r5, #0]
 800999a:	bf48      	it	mi
 800999c:	6023      	strmi	r3, [r4, #0]
 800999e:	b91e      	cbnz	r6, 80099a8 <_printf_i+0x1a4>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	f023 0320 	bic.w	r3, r3, #32
 80099a6:	6023      	str	r3, [r4, #0]
 80099a8:	2310      	movs	r3, #16
 80099aa:	e7a7      	b.n	80098fc <_printf_i+0xf8>
 80099ac:	4824      	ldr	r0, [pc, #144]	; (8009a40 <_printf_i+0x23c>)
 80099ae:	e7e4      	b.n	800997a <_printf_i+0x176>
 80099b0:	4615      	mov	r5, r2
 80099b2:	e7bd      	b.n	8009930 <_printf_i+0x12c>
 80099b4:	682b      	ldr	r3, [r5, #0]
 80099b6:	6826      	ldr	r6, [r4, #0]
 80099b8:	6961      	ldr	r1, [r4, #20]
 80099ba:	1d18      	adds	r0, r3, #4
 80099bc:	6028      	str	r0, [r5, #0]
 80099be:	0635      	lsls	r5, r6, #24
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	d501      	bpl.n	80099c8 <_printf_i+0x1c4>
 80099c4:	6019      	str	r1, [r3, #0]
 80099c6:	e002      	b.n	80099ce <_printf_i+0x1ca>
 80099c8:	0670      	lsls	r0, r6, #25
 80099ca:	d5fb      	bpl.n	80099c4 <_printf_i+0x1c0>
 80099cc:	8019      	strh	r1, [r3, #0]
 80099ce:	2300      	movs	r3, #0
 80099d0:	6123      	str	r3, [r4, #16]
 80099d2:	4615      	mov	r5, r2
 80099d4:	e7bc      	b.n	8009950 <_printf_i+0x14c>
 80099d6:	682b      	ldr	r3, [r5, #0]
 80099d8:	1d1a      	adds	r2, r3, #4
 80099da:	602a      	str	r2, [r5, #0]
 80099dc:	681d      	ldr	r5, [r3, #0]
 80099de:	6862      	ldr	r2, [r4, #4]
 80099e0:	2100      	movs	r1, #0
 80099e2:	4628      	mov	r0, r5
 80099e4:	f7f6 fbf4 	bl	80001d0 <memchr>
 80099e8:	b108      	cbz	r0, 80099ee <_printf_i+0x1ea>
 80099ea:	1b40      	subs	r0, r0, r5
 80099ec:	6060      	str	r0, [r4, #4]
 80099ee:	6863      	ldr	r3, [r4, #4]
 80099f0:	6123      	str	r3, [r4, #16]
 80099f2:	2300      	movs	r3, #0
 80099f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099f8:	e7aa      	b.n	8009950 <_printf_i+0x14c>
 80099fa:	6923      	ldr	r3, [r4, #16]
 80099fc:	462a      	mov	r2, r5
 80099fe:	4649      	mov	r1, r9
 8009a00:	4640      	mov	r0, r8
 8009a02:	47d0      	blx	sl
 8009a04:	3001      	adds	r0, #1
 8009a06:	d0ad      	beq.n	8009964 <_printf_i+0x160>
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	079b      	lsls	r3, r3, #30
 8009a0c:	d413      	bmi.n	8009a36 <_printf_i+0x232>
 8009a0e:	68e0      	ldr	r0, [r4, #12]
 8009a10:	9b03      	ldr	r3, [sp, #12]
 8009a12:	4298      	cmp	r0, r3
 8009a14:	bfb8      	it	lt
 8009a16:	4618      	movlt	r0, r3
 8009a18:	e7a6      	b.n	8009968 <_printf_i+0x164>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	4632      	mov	r2, r6
 8009a1e:	4649      	mov	r1, r9
 8009a20:	4640      	mov	r0, r8
 8009a22:	47d0      	blx	sl
 8009a24:	3001      	adds	r0, #1
 8009a26:	d09d      	beq.n	8009964 <_printf_i+0x160>
 8009a28:	3501      	adds	r5, #1
 8009a2a:	68e3      	ldr	r3, [r4, #12]
 8009a2c:	9903      	ldr	r1, [sp, #12]
 8009a2e:	1a5b      	subs	r3, r3, r1
 8009a30:	42ab      	cmp	r3, r5
 8009a32:	dcf2      	bgt.n	8009a1a <_printf_i+0x216>
 8009a34:	e7eb      	b.n	8009a0e <_printf_i+0x20a>
 8009a36:	2500      	movs	r5, #0
 8009a38:	f104 0619 	add.w	r6, r4, #25
 8009a3c:	e7f5      	b.n	8009a2a <_printf_i+0x226>
 8009a3e:	bf00      	nop
 8009a40:	0800bc2e 	.word	0x0800bc2e
 8009a44:	0800bc3f 	.word	0x0800bc3f

08009a48 <std>:
 8009a48:	2300      	movs	r3, #0
 8009a4a:	b510      	push	{r4, lr}
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a56:	6083      	str	r3, [r0, #8]
 8009a58:	8181      	strh	r1, [r0, #12]
 8009a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8009a5c:	81c2      	strh	r2, [r0, #14]
 8009a5e:	6183      	str	r3, [r0, #24]
 8009a60:	4619      	mov	r1, r3
 8009a62:	2208      	movs	r2, #8
 8009a64:	305c      	adds	r0, #92	; 0x5c
 8009a66:	f000 f89f 	bl	8009ba8 <memset>
 8009a6a:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <std+0x38>)
 8009a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8009a6e:	4b05      	ldr	r3, [pc, #20]	; (8009a84 <std+0x3c>)
 8009a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a72:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <std+0x40>)
 8009a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a76:	4b05      	ldr	r3, [pc, #20]	; (8009a8c <std+0x44>)
 8009a78:	6224      	str	r4, [r4, #32]
 8009a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8009a7c:	bd10      	pop	{r4, pc}
 8009a7e:	bf00      	nop
 8009a80:	0800b2e9 	.word	0x0800b2e9
 8009a84:	0800b30b 	.word	0x0800b30b
 8009a88:	0800b343 	.word	0x0800b343
 8009a8c:	0800b367 	.word	0x0800b367

08009a90 <stdio_exit_handler>:
 8009a90:	4a02      	ldr	r2, [pc, #8]	; (8009a9c <stdio_exit_handler+0xc>)
 8009a92:	4903      	ldr	r1, [pc, #12]	; (8009aa0 <stdio_exit_handler+0x10>)
 8009a94:	4803      	ldr	r0, [pc, #12]	; (8009aa4 <stdio_exit_handler+0x14>)
 8009a96:	f000 b869 	b.w	8009b6c <_fwalk_sglue>
 8009a9a:	bf00      	nop
 8009a9c:	20000014 	.word	0x20000014
 8009aa0:	0800ab89 	.word	0x0800ab89
 8009aa4:	20000020 	.word	0x20000020

08009aa8 <cleanup_stdio>:
 8009aa8:	6841      	ldr	r1, [r0, #4]
 8009aaa:	4b0c      	ldr	r3, [pc, #48]	; (8009adc <cleanup_stdio+0x34>)
 8009aac:	4299      	cmp	r1, r3
 8009aae:	b510      	push	{r4, lr}
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	d001      	beq.n	8009ab8 <cleanup_stdio+0x10>
 8009ab4:	f001 f868 	bl	800ab88 <_fflush_r>
 8009ab8:	68a1      	ldr	r1, [r4, #8]
 8009aba:	4b09      	ldr	r3, [pc, #36]	; (8009ae0 <cleanup_stdio+0x38>)
 8009abc:	4299      	cmp	r1, r3
 8009abe:	d002      	beq.n	8009ac6 <cleanup_stdio+0x1e>
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f001 f861 	bl	800ab88 <_fflush_r>
 8009ac6:	68e1      	ldr	r1, [r4, #12]
 8009ac8:	4b06      	ldr	r3, [pc, #24]	; (8009ae4 <cleanup_stdio+0x3c>)
 8009aca:	4299      	cmp	r1, r3
 8009acc:	d004      	beq.n	8009ad8 <cleanup_stdio+0x30>
 8009ace:	4620      	mov	r0, r4
 8009ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad4:	f001 b858 	b.w	800ab88 <_fflush_r>
 8009ad8:	bd10      	pop	{r4, pc}
 8009ada:	bf00      	nop
 8009adc:	20005164 	.word	0x20005164
 8009ae0:	200051cc 	.word	0x200051cc
 8009ae4:	20005234 	.word	0x20005234

08009ae8 <global_stdio_init.part.0>:
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	4b0b      	ldr	r3, [pc, #44]	; (8009b18 <global_stdio_init.part.0+0x30>)
 8009aec:	4c0b      	ldr	r4, [pc, #44]	; (8009b1c <global_stdio_init.part.0+0x34>)
 8009aee:	4a0c      	ldr	r2, [pc, #48]	; (8009b20 <global_stdio_init.part.0+0x38>)
 8009af0:	601a      	str	r2, [r3, #0]
 8009af2:	4620      	mov	r0, r4
 8009af4:	2200      	movs	r2, #0
 8009af6:	2104      	movs	r1, #4
 8009af8:	f7ff ffa6 	bl	8009a48 <std>
 8009afc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009b00:	2201      	movs	r2, #1
 8009b02:	2109      	movs	r1, #9
 8009b04:	f7ff ffa0 	bl	8009a48 <std>
 8009b08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009b0c:	2202      	movs	r2, #2
 8009b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b12:	2112      	movs	r1, #18
 8009b14:	f7ff bf98 	b.w	8009a48 <std>
 8009b18:	2000529c 	.word	0x2000529c
 8009b1c:	20005164 	.word	0x20005164
 8009b20:	08009a91 	.word	0x08009a91

08009b24 <__sfp_lock_acquire>:
 8009b24:	4801      	ldr	r0, [pc, #4]	; (8009b2c <__sfp_lock_acquire+0x8>)
 8009b26:	f000 b875 	b.w	8009c14 <__retarget_lock_acquire_recursive>
 8009b2a:	bf00      	nop
 8009b2c:	200052a1 	.word	0x200052a1

08009b30 <__sfp_lock_release>:
 8009b30:	4801      	ldr	r0, [pc, #4]	; (8009b38 <__sfp_lock_release+0x8>)
 8009b32:	f000 b870 	b.w	8009c16 <__retarget_lock_release_recursive>
 8009b36:	bf00      	nop
 8009b38:	200052a1 	.word	0x200052a1

08009b3c <__sinit>:
 8009b3c:	b510      	push	{r4, lr}
 8009b3e:	4604      	mov	r4, r0
 8009b40:	f7ff fff0 	bl	8009b24 <__sfp_lock_acquire>
 8009b44:	6a23      	ldr	r3, [r4, #32]
 8009b46:	b11b      	cbz	r3, 8009b50 <__sinit+0x14>
 8009b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b4c:	f7ff bff0 	b.w	8009b30 <__sfp_lock_release>
 8009b50:	4b04      	ldr	r3, [pc, #16]	; (8009b64 <__sinit+0x28>)
 8009b52:	6223      	str	r3, [r4, #32]
 8009b54:	4b04      	ldr	r3, [pc, #16]	; (8009b68 <__sinit+0x2c>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1f5      	bne.n	8009b48 <__sinit+0xc>
 8009b5c:	f7ff ffc4 	bl	8009ae8 <global_stdio_init.part.0>
 8009b60:	e7f2      	b.n	8009b48 <__sinit+0xc>
 8009b62:	bf00      	nop
 8009b64:	08009aa9 	.word	0x08009aa9
 8009b68:	2000529c 	.word	0x2000529c

08009b6c <_fwalk_sglue>:
 8009b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b70:	4607      	mov	r7, r0
 8009b72:	4688      	mov	r8, r1
 8009b74:	4614      	mov	r4, r2
 8009b76:	2600      	movs	r6, #0
 8009b78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b7c:	f1b9 0901 	subs.w	r9, r9, #1
 8009b80:	d505      	bpl.n	8009b8e <_fwalk_sglue+0x22>
 8009b82:	6824      	ldr	r4, [r4, #0]
 8009b84:	2c00      	cmp	r4, #0
 8009b86:	d1f7      	bne.n	8009b78 <_fwalk_sglue+0xc>
 8009b88:	4630      	mov	r0, r6
 8009b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b8e:	89ab      	ldrh	r3, [r5, #12]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d907      	bls.n	8009ba4 <_fwalk_sglue+0x38>
 8009b94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	d003      	beq.n	8009ba4 <_fwalk_sglue+0x38>
 8009b9c:	4629      	mov	r1, r5
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	47c0      	blx	r8
 8009ba2:	4306      	orrs	r6, r0
 8009ba4:	3568      	adds	r5, #104	; 0x68
 8009ba6:	e7e9      	b.n	8009b7c <_fwalk_sglue+0x10>

08009ba8 <memset>:
 8009ba8:	4402      	add	r2, r0
 8009baa:	4603      	mov	r3, r0
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d100      	bne.n	8009bb2 <memset+0xa>
 8009bb0:	4770      	bx	lr
 8009bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8009bb6:	e7f9      	b.n	8009bac <memset+0x4>

08009bb8 <_localeconv_r>:
 8009bb8:	4800      	ldr	r0, [pc, #0]	; (8009bbc <_localeconv_r+0x4>)
 8009bba:	4770      	bx	lr
 8009bbc:	20000160 	.word	0x20000160

08009bc0 <__errno>:
 8009bc0:	4b01      	ldr	r3, [pc, #4]	; (8009bc8 <__errno+0x8>)
 8009bc2:	6818      	ldr	r0, [r3, #0]
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	2000006c 	.word	0x2000006c

08009bcc <__libc_init_array>:
 8009bcc:	b570      	push	{r4, r5, r6, lr}
 8009bce:	4d0d      	ldr	r5, [pc, #52]	; (8009c04 <__libc_init_array+0x38>)
 8009bd0:	4c0d      	ldr	r4, [pc, #52]	; (8009c08 <__libc_init_array+0x3c>)
 8009bd2:	1b64      	subs	r4, r4, r5
 8009bd4:	10a4      	asrs	r4, r4, #2
 8009bd6:	2600      	movs	r6, #0
 8009bd8:	42a6      	cmp	r6, r4
 8009bda:	d109      	bne.n	8009bf0 <__libc_init_array+0x24>
 8009bdc:	4d0b      	ldr	r5, [pc, #44]	; (8009c0c <__libc_init_array+0x40>)
 8009bde:	4c0c      	ldr	r4, [pc, #48]	; (8009c10 <__libc_init_array+0x44>)
 8009be0:	f001 ff76 	bl	800bad0 <_init>
 8009be4:	1b64      	subs	r4, r4, r5
 8009be6:	10a4      	asrs	r4, r4, #2
 8009be8:	2600      	movs	r6, #0
 8009bea:	42a6      	cmp	r6, r4
 8009bec:	d105      	bne.n	8009bfa <__libc_init_array+0x2e>
 8009bee:	bd70      	pop	{r4, r5, r6, pc}
 8009bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf4:	4798      	blx	r3
 8009bf6:	3601      	adds	r6, #1
 8009bf8:	e7ee      	b.n	8009bd8 <__libc_init_array+0xc>
 8009bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bfe:	4798      	blx	r3
 8009c00:	3601      	adds	r6, #1
 8009c02:	e7f2      	b.n	8009bea <__libc_init_array+0x1e>
 8009c04:	0800bf94 	.word	0x0800bf94
 8009c08:	0800bf94 	.word	0x0800bf94
 8009c0c:	0800bf94 	.word	0x0800bf94
 8009c10:	0800bf98 	.word	0x0800bf98

08009c14 <__retarget_lock_acquire_recursive>:
 8009c14:	4770      	bx	lr

08009c16 <__retarget_lock_release_recursive>:
 8009c16:	4770      	bx	lr

08009c18 <memcpy>:
 8009c18:	440a      	add	r2, r1
 8009c1a:	4291      	cmp	r1, r2
 8009c1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009c20:	d100      	bne.n	8009c24 <memcpy+0xc>
 8009c22:	4770      	bx	lr
 8009c24:	b510      	push	{r4, lr}
 8009c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c2e:	4291      	cmp	r1, r2
 8009c30:	d1f9      	bne.n	8009c26 <memcpy+0xe>
 8009c32:	bd10      	pop	{r4, pc}

08009c34 <quorem>:
 8009c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c38:	6903      	ldr	r3, [r0, #16]
 8009c3a:	690c      	ldr	r4, [r1, #16]
 8009c3c:	42a3      	cmp	r3, r4
 8009c3e:	4607      	mov	r7, r0
 8009c40:	db7e      	blt.n	8009d40 <quorem+0x10c>
 8009c42:	3c01      	subs	r4, #1
 8009c44:	f101 0814 	add.w	r8, r1, #20
 8009c48:	f100 0514 	add.w	r5, r0, #20
 8009c4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c50:	9301      	str	r3, [sp, #4]
 8009c52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c66:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c6a:	d331      	bcc.n	8009cd0 <quorem+0x9c>
 8009c6c:	f04f 0e00 	mov.w	lr, #0
 8009c70:	4640      	mov	r0, r8
 8009c72:	46ac      	mov	ip, r5
 8009c74:	46f2      	mov	sl, lr
 8009c76:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c7a:	b293      	uxth	r3, r2
 8009c7c:	fb06 e303 	mla	r3, r6, r3, lr
 8009c80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c84:	0c1a      	lsrs	r2, r3, #16
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	ebaa 0303 	sub.w	r3, sl, r3
 8009c8c:	f8dc a000 	ldr.w	sl, [ip]
 8009c90:	fa13 f38a 	uxtah	r3, r3, sl
 8009c94:	fb06 220e 	mla	r2, r6, lr, r2
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	9b00      	ldr	r3, [sp, #0]
 8009c9c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ca0:	b292      	uxth	r2, r2
 8009ca2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ca6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009caa:	f8bd 3000 	ldrh.w	r3, [sp]
 8009cae:	4581      	cmp	r9, r0
 8009cb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cb4:	f84c 3b04 	str.w	r3, [ip], #4
 8009cb8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009cbc:	d2db      	bcs.n	8009c76 <quorem+0x42>
 8009cbe:	f855 300b 	ldr.w	r3, [r5, fp]
 8009cc2:	b92b      	cbnz	r3, 8009cd0 <quorem+0x9c>
 8009cc4:	9b01      	ldr	r3, [sp, #4]
 8009cc6:	3b04      	subs	r3, #4
 8009cc8:	429d      	cmp	r5, r3
 8009cca:	461a      	mov	r2, r3
 8009ccc:	d32c      	bcc.n	8009d28 <quorem+0xf4>
 8009cce:	613c      	str	r4, [r7, #16]
 8009cd0:	4638      	mov	r0, r7
 8009cd2:	f001 fa09 	bl	800b0e8 <__mcmp>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	db22      	blt.n	8009d20 <quorem+0xec>
 8009cda:	3601      	adds	r6, #1
 8009cdc:	4629      	mov	r1, r5
 8009cde:	2000      	movs	r0, #0
 8009ce0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ce4:	f8d1 c000 	ldr.w	ip, [r1]
 8009ce8:	b293      	uxth	r3, r2
 8009cea:	1ac3      	subs	r3, r0, r3
 8009cec:	0c12      	lsrs	r2, r2, #16
 8009cee:	fa13 f38c 	uxtah	r3, r3, ip
 8009cf2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009cf6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d00:	45c1      	cmp	r9, r8
 8009d02:	f841 3b04 	str.w	r3, [r1], #4
 8009d06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d0a:	d2e9      	bcs.n	8009ce0 <quorem+0xac>
 8009d0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d14:	b922      	cbnz	r2, 8009d20 <quorem+0xec>
 8009d16:	3b04      	subs	r3, #4
 8009d18:	429d      	cmp	r5, r3
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	d30a      	bcc.n	8009d34 <quorem+0x100>
 8009d1e:	613c      	str	r4, [r7, #16]
 8009d20:	4630      	mov	r0, r6
 8009d22:	b003      	add	sp, #12
 8009d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d28:	6812      	ldr	r2, [r2, #0]
 8009d2a:	3b04      	subs	r3, #4
 8009d2c:	2a00      	cmp	r2, #0
 8009d2e:	d1ce      	bne.n	8009cce <quorem+0x9a>
 8009d30:	3c01      	subs	r4, #1
 8009d32:	e7c9      	b.n	8009cc8 <quorem+0x94>
 8009d34:	6812      	ldr	r2, [r2, #0]
 8009d36:	3b04      	subs	r3, #4
 8009d38:	2a00      	cmp	r2, #0
 8009d3a:	d1f0      	bne.n	8009d1e <quorem+0xea>
 8009d3c:	3c01      	subs	r4, #1
 8009d3e:	e7eb      	b.n	8009d18 <quorem+0xe4>
 8009d40:	2000      	movs	r0, #0
 8009d42:	e7ee      	b.n	8009d22 <quorem+0xee>
 8009d44:	0000      	movs	r0, r0
	...

08009d48 <_dtoa_r>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	ed2d 8b04 	vpush	{d8-d9}
 8009d50:	69c5      	ldr	r5, [r0, #28]
 8009d52:	b093      	sub	sp, #76	; 0x4c
 8009d54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d58:	ec57 6b10 	vmov	r6, r7, d0
 8009d5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009d60:	9107      	str	r1, [sp, #28]
 8009d62:	4604      	mov	r4, r0
 8009d64:	920a      	str	r2, [sp, #40]	; 0x28
 8009d66:	930d      	str	r3, [sp, #52]	; 0x34
 8009d68:	b975      	cbnz	r5, 8009d88 <_dtoa_r+0x40>
 8009d6a:	2010      	movs	r0, #16
 8009d6c:	f000 fdde 	bl	800a92c <malloc>
 8009d70:	4602      	mov	r2, r0
 8009d72:	61e0      	str	r0, [r4, #28]
 8009d74:	b920      	cbnz	r0, 8009d80 <_dtoa_r+0x38>
 8009d76:	4bae      	ldr	r3, [pc, #696]	; (800a030 <_dtoa_r+0x2e8>)
 8009d78:	21ef      	movs	r1, #239	; 0xef
 8009d7a:	48ae      	ldr	r0, [pc, #696]	; (800a034 <_dtoa_r+0x2ec>)
 8009d7c:	f001 fb4e 	bl	800b41c <__assert_func>
 8009d80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d84:	6005      	str	r5, [r0, #0]
 8009d86:	60c5      	str	r5, [r0, #12]
 8009d88:	69e3      	ldr	r3, [r4, #28]
 8009d8a:	6819      	ldr	r1, [r3, #0]
 8009d8c:	b151      	cbz	r1, 8009da4 <_dtoa_r+0x5c>
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	604a      	str	r2, [r1, #4]
 8009d92:	2301      	movs	r3, #1
 8009d94:	4093      	lsls	r3, r2
 8009d96:	608b      	str	r3, [r1, #8]
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f000 ff69 	bl	800ac70 <_Bfree>
 8009d9e:	69e3      	ldr	r3, [r4, #28]
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	1e3b      	subs	r3, r7, #0
 8009da6:	bfbb      	ittet	lt
 8009da8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009dac:	9303      	strlt	r3, [sp, #12]
 8009dae:	2300      	movge	r3, #0
 8009db0:	2201      	movlt	r2, #1
 8009db2:	bfac      	ite	ge
 8009db4:	f8c8 3000 	strge.w	r3, [r8]
 8009db8:	f8c8 2000 	strlt.w	r2, [r8]
 8009dbc:	4b9e      	ldr	r3, [pc, #632]	; (800a038 <_dtoa_r+0x2f0>)
 8009dbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009dc2:	ea33 0308 	bics.w	r3, r3, r8
 8009dc6:	d11b      	bne.n	8009e00 <_dtoa_r+0xb8>
 8009dc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dca:	f242 730f 	movw	r3, #9999	; 0x270f
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009dd4:	4333      	orrs	r3, r6
 8009dd6:	f000 8593 	beq.w	800a900 <_dtoa_r+0xbb8>
 8009dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ddc:	b963      	cbnz	r3, 8009df8 <_dtoa_r+0xb0>
 8009dde:	4b97      	ldr	r3, [pc, #604]	; (800a03c <_dtoa_r+0x2f4>)
 8009de0:	e027      	b.n	8009e32 <_dtoa_r+0xea>
 8009de2:	4b97      	ldr	r3, [pc, #604]	; (800a040 <_dtoa_r+0x2f8>)
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	3308      	adds	r3, #8
 8009de8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	9800      	ldr	r0, [sp, #0]
 8009dee:	b013      	add	sp, #76	; 0x4c
 8009df0:	ecbd 8b04 	vpop	{d8-d9}
 8009df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df8:	4b90      	ldr	r3, [pc, #576]	; (800a03c <_dtoa_r+0x2f4>)
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	3303      	adds	r3, #3
 8009dfe:	e7f3      	b.n	8009de8 <_dtoa_r+0xa0>
 8009e00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e04:	2200      	movs	r2, #0
 8009e06:	ec51 0b17 	vmov	r0, r1, d7
 8009e0a:	eeb0 8a47 	vmov.f32	s16, s14
 8009e0e:	eef0 8a67 	vmov.f32	s17, s15
 8009e12:	2300      	movs	r3, #0
 8009e14:	f7f6 fe58 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e18:	4681      	mov	r9, r0
 8009e1a:	b160      	cbz	r0, 8009e36 <_dtoa_r+0xee>
 8009e1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e1e:	2301      	movs	r3, #1
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f000 8568 	beq.w	800a8fa <_dtoa_r+0xbb2>
 8009e2a:	4b86      	ldr	r3, [pc, #536]	; (800a044 <_dtoa_r+0x2fc>)
 8009e2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	3b01      	subs	r3, #1
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	e7da      	b.n	8009dec <_dtoa_r+0xa4>
 8009e36:	aa10      	add	r2, sp, #64	; 0x40
 8009e38:	a911      	add	r1, sp, #68	; 0x44
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	eeb0 0a48 	vmov.f32	s0, s16
 8009e40:	eef0 0a68 	vmov.f32	s1, s17
 8009e44:	f001 f9f6 	bl	800b234 <__d2b>
 8009e48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009e4c:	4682      	mov	sl, r0
 8009e4e:	2d00      	cmp	r5, #0
 8009e50:	d07f      	beq.n	8009f52 <_dtoa_r+0x20a>
 8009e52:	ee18 3a90 	vmov	r3, s17
 8009e56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009e5e:	ec51 0b18 	vmov	r0, r1, d8
 8009e62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009e66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009e6e:	4619      	mov	r1, r3
 8009e70:	2200      	movs	r2, #0
 8009e72:	4b75      	ldr	r3, [pc, #468]	; (800a048 <_dtoa_r+0x300>)
 8009e74:	f7f6 fa08 	bl	8000288 <__aeabi_dsub>
 8009e78:	a367      	add	r3, pc, #412	; (adr r3, 800a018 <_dtoa_r+0x2d0>)
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	f7f6 fbbb 	bl	80005f8 <__aeabi_dmul>
 8009e82:	a367      	add	r3, pc, #412	; (adr r3, 800a020 <_dtoa_r+0x2d8>)
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	f7f6 fa00 	bl	800028c <__adddf3>
 8009e8c:	4606      	mov	r6, r0
 8009e8e:	4628      	mov	r0, r5
 8009e90:	460f      	mov	r7, r1
 8009e92:	f7f6 fb47 	bl	8000524 <__aeabi_i2d>
 8009e96:	a364      	add	r3, pc, #400	; (adr r3, 800a028 <_dtoa_r+0x2e0>)
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	f7f6 fbac 	bl	80005f8 <__aeabi_dmul>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	4639      	mov	r1, r7
 8009ea8:	f7f6 f9f0 	bl	800028c <__adddf3>
 8009eac:	4606      	mov	r6, r0
 8009eae:	460f      	mov	r7, r1
 8009eb0:	f7f6 fe52 	bl	8000b58 <__aeabi_d2iz>
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	4683      	mov	fp, r0
 8009eb8:	2300      	movs	r3, #0
 8009eba:	4630      	mov	r0, r6
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	f7f6 fe0d 	bl	8000adc <__aeabi_dcmplt>
 8009ec2:	b148      	cbz	r0, 8009ed8 <_dtoa_r+0x190>
 8009ec4:	4658      	mov	r0, fp
 8009ec6:	f7f6 fb2d 	bl	8000524 <__aeabi_i2d>
 8009eca:	4632      	mov	r2, r6
 8009ecc:	463b      	mov	r3, r7
 8009ece:	f7f6 fdfb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ed2:	b908      	cbnz	r0, 8009ed8 <_dtoa_r+0x190>
 8009ed4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009ed8:	f1bb 0f16 	cmp.w	fp, #22
 8009edc:	d857      	bhi.n	8009f8e <_dtoa_r+0x246>
 8009ede:	4b5b      	ldr	r3, [pc, #364]	; (800a04c <_dtoa_r+0x304>)
 8009ee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	ec51 0b18 	vmov	r0, r1, d8
 8009eec:	f7f6 fdf6 	bl	8000adc <__aeabi_dcmplt>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d04e      	beq.n	8009f92 <_dtoa_r+0x24a>
 8009ef4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009ef8:	2300      	movs	r3, #0
 8009efa:	930c      	str	r3, [sp, #48]	; 0x30
 8009efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009efe:	1b5b      	subs	r3, r3, r5
 8009f00:	1e5a      	subs	r2, r3, #1
 8009f02:	bf45      	ittet	mi
 8009f04:	f1c3 0301 	rsbmi	r3, r3, #1
 8009f08:	9305      	strmi	r3, [sp, #20]
 8009f0a:	2300      	movpl	r3, #0
 8009f0c:	2300      	movmi	r3, #0
 8009f0e:	9206      	str	r2, [sp, #24]
 8009f10:	bf54      	ite	pl
 8009f12:	9305      	strpl	r3, [sp, #20]
 8009f14:	9306      	strmi	r3, [sp, #24]
 8009f16:	f1bb 0f00 	cmp.w	fp, #0
 8009f1a:	db3c      	blt.n	8009f96 <_dtoa_r+0x24e>
 8009f1c:	9b06      	ldr	r3, [sp, #24]
 8009f1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009f22:	445b      	add	r3, fp
 8009f24:	9306      	str	r3, [sp, #24]
 8009f26:	2300      	movs	r3, #0
 8009f28:	9308      	str	r3, [sp, #32]
 8009f2a:	9b07      	ldr	r3, [sp, #28]
 8009f2c:	2b09      	cmp	r3, #9
 8009f2e:	d868      	bhi.n	800a002 <_dtoa_r+0x2ba>
 8009f30:	2b05      	cmp	r3, #5
 8009f32:	bfc4      	itt	gt
 8009f34:	3b04      	subgt	r3, #4
 8009f36:	9307      	strgt	r3, [sp, #28]
 8009f38:	9b07      	ldr	r3, [sp, #28]
 8009f3a:	f1a3 0302 	sub.w	r3, r3, #2
 8009f3e:	bfcc      	ite	gt
 8009f40:	2500      	movgt	r5, #0
 8009f42:	2501      	movle	r5, #1
 8009f44:	2b03      	cmp	r3, #3
 8009f46:	f200 8085 	bhi.w	800a054 <_dtoa_r+0x30c>
 8009f4a:	e8df f003 	tbb	[pc, r3]
 8009f4e:	3b2e      	.short	0x3b2e
 8009f50:	5839      	.short	0x5839
 8009f52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009f56:	441d      	add	r5, r3
 8009f58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009f5c:	2b20      	cmp	r3, #32
 8009f5e:	bfc1      	itttt	gt
 8009f60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f64:	fa08 f803 	lslgt.w	r8, r8, r3
 8009f68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009f6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009f70:	bfd6      	itet	le
 8009f72:	f1c3 0320 	rsble	r3, r3, #32
 8009f76:	ea48 0003 	orrgt.w	r0, r8, r3
 8009f7a:	fa06 f003 	lslle.w	r0, r6, r3
 8009f7e:	f7f6 fac1 	bl	8000504 <__aeabi_ui2d>
 8009f82:	2201      	movs	r2, #1
 8009f84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009f88:	3d01      	subs	r5, #1
 8009f8a:	920e      	str	r2, [sp, #56]	; 0x38
 8009f8c:	e76f      	b.n	8009e6e <_dtoa_r+0x126>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e7b3      	b.n	8009efa <_dtoa_r+0x1b2>
 8009f92:	900c      	str	r0, [sp, #48]	; 0x30
 8009f94:	e7b2      	b.n	8009efc <_dtoa_r+0x1b4>
 8009f96:	9b05      	ldr	r3, [sp, #20]
 8009f98:	eba3 030b 	sub.w	r3, r3, fp
 8009f9c:	9305      	str	r3, [sp, #20]
 8009f9e:	f1cb 0300 	rsb	r3, fp, #0
 8009fa2:	9308      	str	r3, [sp, #32]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fa8:	e7bf      	b.n	8009f2a <_dtoa_r+0x1e2>
 8009faa:	2300      	movs	r3, #0
 8009fac:	9309      	str	r3, [sp, #36]	; 0x24
 8009fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	dc52      	bgt.n	800a05a <_dtoa_r+0x312>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	9301      	str	r3, [sp, #4]
 8009fb8:	9304      	str	r3, [sp, #16]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	920a      	str	r2, [sp, #40]	; 0x28
 8009fbe:	e00b      	b.n	8009fd8 <_dtoa_r+0x290>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e7f3      	b.n	8009fac <_dtoa_r+0x264>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fca:	445b      	add	r3, fp
 8009fcc:	9301      	str	r3, [sp, #4]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	9304      	str	r3, [sp, #16]
 8009fd4:	bfb8      	it	lt
 8009fd6:	2301      	movlt	r3, #1
 8009fd8:	69e0      	ldr	r0, [r4, #28]
 8009fda:	2100      	movs	r1, #0
 8009fdc:	2204      	movs	r2, #4
 8009fde:	f102 0614 	add.w	r6, r2, #20
 8009fe2:	429e      	cmp	r6, r3
 8009fe4:	d93d      	bls.n	800a062 <_dtoa_r+0x31a>
 8009fe6:	6041      	str	r1, [r0, #4]
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f000 fe01 	bl	800abf0 <_Balloc>
 8009fee:	9000      	str	r0, [sp, #0]
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d139      	bne.n	800a068 <_dtoa_r+0x320>
 8009ff4:	4b16      	ldr	r3, [pc, #88]	; (800a050 <_dtoa_r+0x308>)
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	f240 11af 	movw	r1, #431	; 0x1af
 8009ffc:	e6bd      	b.n	8009d7a <_dtoa_r+0x32>
 8009ffe:	2301      	movs	r3, #1
 800a000:	e7e1      	b.n	8009fc6 <_dtoa_r+0x27e>
 800a002:	2501      	movs	r5, #1
 800a004:	2300      	movs	r3, #0
 800a006:	9307      	str	r3, [sp, #28]
 800a008:	9509      	str	r5, [sp, #36]	; 0x24
 800a00a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a00e:	9301      	str	r3, [sp, #4]
 800a010:	9304      	str	r3, [sp, #16]
 800a012:	2200      	movs	r2, #0
 800a014:	2312      	movs	r3, #18
 800a016:	e7d1      	b.n	8009fbc <_dtoa_r+0x274>
 800a018:	636f4361 	.word	0x636f4361
 800a01c:	3fd287a7 	.word	0x3fd287a7
 800a020:	8b60c8b3 	.word	0x8b60c8b3
 800a024:	3fc68a28 	.word	0x3fc68a28
 800a028:	509f79fb 	.word	0x509f79fb
 800a02c:	3fd34413 	.word	0x3fd34413
 800a030:	0800bc5d 	.word	0x0800bc5d
 800a034:	0800bc74 	.word	0x0800bc74
 800a038:	7ff00000 	.word	0x7ff00000
 800a03c:	0800bc59 	.word	0x0800bc59
 800a040:	0800bc50 	.word	0x0800bc50
 800a044:	0800bc2d 	.word	0x0800bc2d
 800a048:	3ff80000 	.word	0x3ff80000
 800a04c:	0800bd60 	.word	0x0800bd60
 800a050:	0800bccc 	.word	0x0800bccc
 800a054:	2301      	movs	r3, #1
 800a056:	9309      	str	r3, [sp, #36]	; 0x24
 800a058:	e7d7      	b.n	800a00a <_dtoa_r+0x2c2>
 800a05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a05c:	9301      	str	r3, [sp, #4]
 800a05e:	9304      	str	r3, [sp, #16]
 800a060:	e7ba      	b.n	8009fd8 <_dtoa_r+0x290>
 800a062:	3101      	adds	r1, #1
 800a064:	0052      	lsls	r2, r2, #1
 800a066:	e7ba      	b.n	8009fde <_dtoa_r+0x296>
 800a068:	69e3      	ldr	r3, [r4, #28]
 800a06a:	9a00      	ldr	r2, [sp, #0]
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	9b04      	ldr	r3, [sp, #16]
 800a070:	2b0e      	cmp	r3, #14
 800a072:	f200 80a8 	bhi.w	800a1c6 <_dtoa_r+0x47e>
 800a076:	2d00      	cmp	r5, #0
 800a078:	f000 80a5 	beq.w	800a1c6 <_dtoa_r+0x47e>
 800a07c:	f1bb 0f00 	cmp.w	fp, #0
 800a080:	dd38      	ble.n	800a0f4 <_dtoa_r+0x3ac>
 800a082:	4bc0      	ldr	r3, [pc, #768]	; (800a384 <_dtoa_r+0x63c>)
 800a084:	f00b 020f 	and.w	r2, fp, #15
 800a088:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a08c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a090:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a094:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a098:	d019      	beq.n	800a0ce <_dtoa_r+0x386>
 800a09a:	4bbb      	ldr	r3, [pc, #748]	; (800a388 <_dtoa_r+0x640>)
 800a09c:	ec51 0b18 	vmov	r0, r1, d8
 800a0a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0a4:	f7f6 fbd2 	bl	800084c <__aeabi_ddiv>
 800a0a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0ac:	f008 080f 	and.w	r8, r8, #15
 800a0b0:	2503      	movs	r5, #3
 800a0b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a388 <_dtoa_r+0x640>
 800a0b6:	f1b8 0f00 	cmp.w	r8, #0
 800a0ba:	d10a      	bne.n	800a0d2 <_dtoa_r+0x38a>
 800a0bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0c0:	4632      	mov	r2, r6
 800a0c2:	463b      	mov	r3, r7
 800a0c4:	f7f6 fbc2 	bl	800084c <__aeabi_ddiv>
 800a0c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0cc:	e02b      	b.n	800a126 <_dtoa_r+0x3de>
 800a0ce:	2502      	movs	r5, #2
 800a0d0:	e7ef      	b.n	800a0b2 <_dtoa_r+0x36a>
 800a0d2:	f018 0f01 	tst.w	r8, #1
 800a0d6:	d008      	beq.n	800a0ea <_dtoa_r+0x3a2>
 800a0d8:	4630      	mov	r0, r6
 800a0da:	4639      	mov	r1, r7
 800a0dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a0e0:	f7f6 fa8a 	bl	80005f8 <__aeabi_dmul>
 800a0e4:	3501      	adds	r5, #1
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	460f      	mov	r7, r1
 800a0ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a0ee:	f109 0908 	add.w	r9, r9, #8
 800a0f2:	e7e0      	b.n	800a0b6 <_dtoa_r+0x36e>
 800a0f4:	f000 809f 	beq.w	800a236 <_dtoa_r+0x4ee>
 800a0f8:	f1cb 0600 	rsb	r6, fp, #0
 800a0fc:	4ba1      	ldr	r3, [pc, #644]	; (800a384 <_dtoa_r+0x63c>)
 800a0fe:	4fa2      	ldr	r7, [pc, #648]	; (800a388 <_dtoa_r+0x640>)
 800a100:	f006 020f 	and.w	r2, r6, #15
 800a104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10c:	ec51 0b18 	vmov	r0, r1, d8
 800a110:	f7f6 fa72 	bl	80005f8 <__aeabi_dmul>
 800a114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a118:	1136      	asrs	r6, r6, #4
 800a11a:	2300      	movs	r3, #0
 800a11c:	2502      	movs	r5, #2
 800a11e:	2e00      	cmp	r6, #0
 800a120:	d17e      	bne.n	800a220 <_dtoa_r+0x4d8>
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1d0      	bne.n	800a0c8 <_dtoa_r+0x380>
 800a126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a128:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f000 8084 	beq.w	800a23a <_dtoa_r+0x4f2>
 800a132:	4b96      	ldr	r3, [pc, #600]	; (800a38c <_dtoa_r+0x644>)
 800a134:	2200      	movs	r2, #0
 800a136:	4640      	mov	r0, r8
 800a138:	4649      	mov	r1, r9
 800a13a:	f7f6 fccf 	bl	8000adc <__aeabi_dcmplt>
 800a13e:	2800      	cmp	r0, #0
 800a140:	d07b      	beq.n	800a23a <_dtoa_r+0x4f2>
 800a142:	9b04      	ldr	r3, [sp, #16]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d078      	beq.n	800a23a <_dtoa_r+0x4f2>
 800a148:	9b01      	ldr	r3, [sp, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	dd39      	ble.n	800a1c2 <_dtoa_r+0x47a>
 800a14e:	4b90      	ldr	r3, [pc, #576]	; (800a390 <_dtoa_r+0x648>)
 800a150:	2200      	movs	r2, #0
 800a152:	4640      	mov	r0, r8
 800a154:	4649      	mov	r1, r9
 800a156:	f7f6 fa4f 	bl	80005f8 <__aeabi_dmul>
 800a15a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a15e:	9e01      	ldr	r6, [sp, #4]
 800a160:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a164:	3501      	adds	r5, #1
 800a166:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a16a:	4628      	mov	r0, r5
 800a16c:	f7f6 f9da 	bl	8000524 <__aeabi_i2d>
 800a170:	4642      	mov	r2, r8
 800a172:	464b      	mov	r3, r9
 800a174:	f7f6 fa40 	bl	80005f8 <__aeabi_dmul>
 800a178:	4b86      	ldr	r3, [pc, #536]	; (800a394 <_dtoa_r+0x64c>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	f7f6 f886 	bl	800028c <__adddf3>
 800a180:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a188:	9303      	str	r3, [sp, #12]
 800a18a:	2e00      	cmp	r6, #0
 800a18c:	d158      	bne.n	800a240 <_dtoa_r+0x4f8>
 800a18e:	4b82      	ldr	r3, [pc, #520]	; (800a398 <_dtoa_r+0x650>)
 800a190:	2200      	movs	r2, #0
 800a192:	4640      	mov	r0, r8
 800a194:	4649      	mov	r1, r9
 800a196:	f7f6 f877 	bl	8000288 <__aeabi_dsub>
 800a19a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a19e:	4680      	mov	r8, r0
 800a1a0:	4689      	mov	r9, r1
 800a1a2:	f7f6 fcb9 	bl	8000b18 <__aeabi_dcmpgt>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	f040 8296 	bne.w	800a6d8 <_dtoa_r+0x990>
 800a1ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a1b0:	4640      	mov	r0, r8
 800a1b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	f7f6 fc90 	bl	8000adc <__aeabi_dcmplt>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	f040 8289 	bne.w	800a6d4 <_dtoa_r+0x98c>
 800a1c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a1c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f2c0 814e 	blt.w	800a46a <_dtoa_r+0x722>
 800a1ce:	f1bb 0f0e 	cmp.w	fp, #14
 800a1d2:	f300 814a 	bgt.w	800a46a <_dtoa_r+0x722>
 800a1d6:	4b6b      	ldr	r3, [pc, #428]	; (800a384 <_dtoa_r+0x63c>)
 800a1d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a1dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f280 80dc 	bge.w	800a3a0 <_dtoa_r+0x658>
 800a1e8:	9b04      	ldr	r3, [sp, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f300 80d8 	bgt.w	800a3a0 <_dtoa_r+0x658>
 800a1f0:	f040 826f 	bne.w	800a6d2 <_dtoa_r+0x98a>
 800a1f4:	4b68      	ldr	r3, [pc, #416]	; (800a398 <_dtoa_r+0x650>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	4640      	mov	r0, r8
 800a1fa:	4649      	mov	r1, r9
 800a1fc:	f7f6 f9fc 	bl	80005f8 <__aeabi_dmul>
 800a200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a204:	f7f6 fc7e 	bl	8000b04 <__aeabi_dcmpge>
 800a208:	9e04      	ldr	r6, [sp, #16]
 800a20a:	4637      	mov	r7, r6
 800a20c:	2800      	cmp	r0, #0
 800a20e:	f040 8245 	bne.w	800a69c <_dtoa_r+0x954>
 800a212:	9d00      	ldr	r5, [sp, #0]
 800a214:	2331      	movs	r3, #49	; 0x31
 800a216:	f805 3b01 	strb.w	r3, [r5], #1
 800a21a:	f10b 0b01 	add.w	fp, fp, #1
 800a21e:	e241      	b.n	800a6a4 <_dtoa_r+0x95c>
 800a220:	07f2      	lsls	r2, r6, #31
 800a222:	d505      	bpl.n	800a230 <_dtoa_r+0x4e8>
 800a224:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a228:	f7f6 f9e6 	bl	80005f8 <__aeabi_dmul>
 800a22c:	3501      	adds	r5, #1
 800a22e:	2301      	movs	r3, #1
 800a230:	1076      	asrs	r6, r6, #1
 800a232:	3708      	adds	r7, #8
 800a234:	e773      	b.n	800a11e <_dtoa_r+0x3d6>
 800a236:	2502      	movs	r5, #2
 800a238:	e775      	b.n	800a126 <_dtoa_r+0x3de>
 800a23a:	9e04      	ldr	r6, [sp, #16]
 800a23c:	465f      	mov	r7, fp
 800a23e:	e792      	b.n	800a166 <_dtoa_r+0x41e>
 800a240:	9900      	ldr	r1, [sp, #0]
 800a242:	4b50      	ldr	r3, [pc, #320]	; (800a384 <_dtoa_r+0x63c>)
 800a244:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a248:	4431      	add	r1, r6
 800a24a:	9102      	str	r1, [sp, #8]
 800a24c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a24e:	eeb0 9a47 	vmov.f32	s18, s14
 800a252:	eef0 9a67 	vmov.f32	s19, s15
 800a256:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a25a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a25e:	2900      	cmp	r1, #0
 800a260:	d044      	beq.n	800a2ec <_dtoa_r+0x5a4>
 800a262:	494e      	ldr	r1, [pc, #312]	; (800a39c <_dtoa_r+0x654>)
 800a264:	2000      	movs	r0, #0
 800a266:	f7f6 faf1 	bl	800084c <__aeabi_ddiv>
 800a26a:	ec53 2b19 	vmov	r2, r3, d9
 800a26e:	f7f6 f80b 	bl	8000288 <__aeabi_dsub>
 800a272:	9d00      	ldr	r5, [sp, #0]
 800a274:	ec41 0b19 	vmov	d9, r0, r1
 800a278:	4649      	mov	r1, r9
 800a27a:	4640      	mov	r0, r8
 800a27c:	f7f6 fc6c 	bl	8000b58 <__aeabi_d2iz>
 800a280:	4606      	mov	r6, r0
 800a282:	f7f6 f94f 	bl	8000524 <__aeabi_i2d>
 800a286:	4602      	mov	r2, r0
 800a288:	460b      	mov	r3, r1
 800a28a:	4640      	mov	r0, r8
 800a28c:	4649      	mov	r1, r9
 800a28e:	f7f5 fffb 	bl	8000288 <__aeabi_dsub>
 800a292:	3630      	adds	r6, #48	; 0x30
 800a294:	f805 6b01 	strb.w	r6, [r5], #1
 800a298:	ec53 2b19 	vmov	r2, r3, d9
 800a29c:	4680      	mov	r8, r0
 800a29e:	4689      	mov	r9, r1
 800a2a0:	f7f6 fc1c 	bl	8000adc <__aeabi_dcmplt>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	d164      	bne.n	800a372 <_dtoa_r+0x62a>
 800a2a8:	4642      	mov	r2, r8
 800a2aa:	464b      	mov	r3, r9
 800a2ac:	4937      	ldr	r1, [pc, #220]	; (800a38c <_dtoa_r+0x644>)
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	f7f5 ffea 	bl	8000288 <__aeabi_dsub>
 800a2b4:	ec53 2b19 	vmov	r2, r3, d9
 800a2b8:	f7f6 fc10 	bl	8000adc <__aeabi_dcmplt>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	f040 80b6 	bne.w	800a42e <_dtoa_r+0x6e6>
 800a2c2:	9b02      	ldr	r3, [sp, #8]
 800a2c4:	429d      	cmp	r5, r3
 800a2c6:	f43f af7c 	beq.w	800a1c2 <_dtoa_r+0x47a>
 800a2ca:	4b31      	ldr	r3, [pc, #196]	; (800a390 <_dtoa_r+0x648>)
 800a2cc:	ec51 0b19 	vmov	r0, r1, d9
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f7f6 f991 	bl	80005f8 <__aeabi_dmul>
 800a2d6:	4b2e      	ldr	r3, [pc, #184]	; (800a390 <_dtoa_r+0x648>)
 800a2d8:	ec41 0b19 	vmov	d9, r0, r1
 800a2dc:	2200      	movs	r2, #0
 800a2de:	4640      	mov	r0, r8
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	f7f6 f989 	bl	80005f8 <__aeabi_dmul>
 800a2e6:	4680      	mov	r8, r0
 800a2e8:	4689      	mov	r9, r1
 800a2ea:	e7c5      	b.n	800a278 <_dtoa_r+0x530>
 800a2ec:	ec51 0b17 	vmov	r0, r1, d7
 800a2f0:	f7f6 f982 	bl	80005f8 <__aeabi_dmul>
 800a2f4:	9b02      	ldr	r3, [sp, #8]
 800a2f6:	9d00      	ldr	r5, [sp, #0]
 800a2f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2fa:	ec41 0b19 	vmov	d9, r0, r1
 800a2fe:	4649      	mov	r1, r9
 800a300:	4640      	mov	r0, r8
 800a302:	f7f6 fc29 	bl	8000b58 <__aeabi_d2iz>
 800a306:	4606      	mov	r6, r0
 800a308:	f7f6 f90c 	bl	8000524 <__aeabi_i2d>
 800a30c:	3630      	adds	r6, #48	; 0x30
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	4640      	mov	r0, r8
 800a314:	4649      	mov	r1, r9
 800a316:	f7f5 ffb7 	bl	8000288 <__aeabi_dsub>
 800a31a:	f805 6b01 	strb.w	r6, [r5], #1
 800a31e:	9b02      	ldr	r3, [sp, #8]
 800a320:	429d      	cmp	r5, r3
 800a322:	4680      	mov	r8, r0
 800a324:	4689      	mov	r9, r1
 800a326:	f04f 0200 	mov.w	r2, #0
 800a32a:	d124      	bne.n	800a376 <_dtoa_r+0x62e>
 800a32c:	4b1b      	ldr	r3, [pc, #108]	; (800a39c <_dtoa_r+0x654>)
 800a32e:	ec51 0b19 	vmov	r0, r1, d9
 800a332:	f7f5 ffab 	bl	800028c <__adddf3>
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	4640      	mov	r0, r8
 800a33c:	4649      	mov	r1, r9
 800a33e:	f7f6 fbeb 	bl	8000b18 <__aeabi_dcmpgt>
 800a342:	2800      	cmp	r0, #0
 800a344:	d173      	bne.n	800a42e <_dtoa_r+0x6e6>
 800a346:	ec53 2b19 	vmov	r2, r3, d9
 800a34a:	4914      	ldr	r1, [pc, #80]	; (800a39c <_dtoa_r+0x654>)
 800a34c:	2000      	movs	r0, #0
 800a34e:	f7f5 ff9b 	bl	8000288 <__aeabi_dsub>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	4640      	mov	r0, r8
 800a358:	4649      	mov	r1, r9
 800a35a:	f7f6 fbbf 	bl	8000adc <__aeabi_dcmplt>
 800a35e:	2800      	cmp	r0, #0
 800a360:	f43f af2f 	beq.w	800a1c2 <_dtoa_r+0x47a>
 800a364:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a366:	1e6b      	subs	r3, r5, #1
 800a368:	930f      	str	r3, [sp, #60]	; 0x3c
 800a36a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a36e:	2b30      	cmp	r3, #48	; 0x30
 800a370:	d0f8      	beq.n	800a364 <_dtoa_r+0x61c>
 800a372:	46bb      	mov	fp, r7
 800a374:	e04a      	b.n	800a40c <_dtoa_r+0x6c4>
 800a376:	4b06      	ldr	r3, [pc, #24]	; (800a390 <_dtoa_r+0x648>)
 800a378:	f7f6 f93e 	bl	80005f8 <__aeabi_dmul>
 800a37c:	4680      	mov	r8, r0
 800a37e:	4689      	mov	r9, r1
 800a380:	e7bd      	b.n	800a2fe <_dtoa_r+0x5b6>
 800a382:	bf00      	nop
 800a384:	0800bd60 	.word	0x0800bd60
 800a388:	0800bd38 	.word	0x0800bd38
 800a38c:	3ff00000 	.word	0x3ff00000
 800a390:	40240000 	.word	0x40240000
 800a394:	401c0000 	.word	0x401c0000
 800a398:	40140000 	.word	0x40140000
 800a39c:	3fe00000 	.word	0x3fe00000
 800a3a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a3a4:	9d00      	ldr	r5, [sp, #0]
 800a3a6:	4642      	mov	r2, r8
 800a3a8:	464b      	mov	r3, r9
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	f7f6 fa4d 	bl	800084c <__aeabi_ddiv>
 800a3b2:	f7f6 fbd1 	bl	8000b58 <__aeabi_d2iz>
 800a3b6:	9001      	str	r0, [sp, #4]
 800a3b8:	f7f6 f8b4 	bl	8000524 <__aeabi_i2d>
 800a3bc:	4642      	mov	r2, r8
 800a3be:	464b      	mov	r3, r9
 800a3c0:	f7f6 f91a 	bl	80005f8 <__aeabi_dmul>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	f7f5 ff5c 	bl	8000288 <__aeabi_dsub>
 800a3d0:	9e01      	ldr	r6, [sp, #4]
 800a3d2:	9f04      	ldr	r7, [sp, #16]
 800a3d4:	3630      	adds	r6, #48	; 0x30
 800a3d6:	f805 6b01 	strb.w	r6, [r5], #1
 800a3da:	9e00      	ldr	r6, [sp, #0]
 800a3dc:	1bae      	subs	r6, r5, r6
 800a3de:	42b7      	cmp	r7, r6
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	d134      	bne.n	800a450 <_dtoa_r+0x708>
 800a3e6:	f7f5 ff51 	bl	800028c <__adddf3>
 800a3ea:	4642      	mov	r2, r8
 800a3ec:	464b      	mov	r3, r9
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	460f      	mov	r7, r1
 800a3f2:	f7f6 fb91 	bl	8000b18 <__aeabi_dcmpgt>
 800a3f6:	b9c8      	cbnz	r0, 800a42c <_dtoa_r+0x6e4>
 800a3f8:	4642      	mov	r2, r8
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	4639      	mov	r1, r7
 800a400:	f7f6 fb62 	bl	8000ac8 <__aeabi_dcmpeq>
 800a404:	b110      	cbz	r0, 800a40c <_dtoa_r+0x6c4>
 800a406:	9b01      	ldr	r3, [sp, #4]
 800a408:	07db      	lsls	r3, r3, #31
 800a40a:	d40f      	bmi.n	800a42c <_dtoa_r+0x6e4>
 800a40c:	4651      	mov	r1, sl
 800a40e:	4620      	mov	r0, r4
 800a410:	f000 fc2e 	bl	800ac70 <_Bfree>
 800a414:	2300      	movs	r3, #0
 800a416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a418:	702b      	strb	r3, [r5, #0]
 800a41a:	f10b 0301 	add.w	r3, fp, #1
 800a41e:	6013      	str	r3, [r2, #0]
 800a420:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a422:	2b00      	cmp	r3, #0
 800a424:	f43f ace2 	beq.w	8009dec <_dtoa_r+0xa4>
 800a428:	601d      	str	r5, [r3, #0]
 800a42a:	e4df      	b.n	8009dec <_dtoa_r+0xa4>
 800a42c:	465f      	mov	r7, fp
 800a42e:	462b      	mov	r3, r5
 800a430:	461d      	mov	r5, r3
 800a432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a436:	2a39      	cmp	r2, #57	; 0x39
 800a438:	d106      	bne.n	800a448 <_dtoa_r+0x700>
 800a43a:	9a00      	ldr	r2, [sp, #0]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d1f7      	bne.n	800a430 <_dtoa_r+0x6e8>
 800a440:	9900      	ldr	r1, [sp, #0]
 800a442:	2230      	movs	r2, #48	; 0x30
 800a444:	3701      	adds	r7, #1
 800a446:	700a      	strb	r2, [r1, #0]
 800a448:	781a      	ldrb	r2, [r3, #0]
 800a44a:	3201      	adds	r2, #1
 800a44c:	701a      	strb	r2, [r3, #0]
 800a44e:	e790      	b.n	800a372 <_dtoa_r+0x62a>
 800a450:	4ba3      	ldr	r3, [pc, #652]	; (800a6e0 <_dtoa_r+0x998>)
 800a452:	2200      	movs	r2, #0
 800a454:	f7f6 f8d0 	bl	80005f8 <__aeabi_dmul>
 800a458:	2200      	movs	r2, #0
 800a45a:	2300      	movs	r3, #0
 800a45c:	4606      	mov	r6, r0
 800a45e:	460f      	mov	r7, r1
 800a460:	f7f6 fb32 	bl	8000ac8 <__aeabi_dcmpeq>
 800a464:	2800      	cmp	r0, #0
 800a466:	d09e      	beq.n	800a3a6 <_dtoa_r+0x65e>
 800a468:	e7d0      	b.n	800a40c <_dtoa_r+0x6c4>
 800a46a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a46c:	2a00      	cmp	r2, #0
 800a46e:	f000 80ca 	beq.w	800a606 <_dtoa_r+0x8be>
 800a472:	9a07      	ldr	r2, [sp, #28]
 800a474:	2a01      	cmp	r2, #1
 800a476:	f300 80ad 	bgt.w	800a5d4 <_dtoa_r+0x88c>
 800a47a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a47c:	2a00      	cmp	r2, #0
 800a47e:	f000 80a5 	beq.w	800a5cc <_dtoa_r+0x884>
 800a482:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a486:	9e08      	ldr	r6, [sp, #32]
 800a488:	9d05      	ldr	r5, [sp, #20]
 800a48a:	9a05      	ldr	r2, [sp, #20]
 800a48c:	441a      	add	r2, r3
 800a48e:	9205      	str	r2, [sp, #20]
 800a490:	9a06      	ldr	r2, [sp, #24]
 800a492:	2101      	movs	r1, #1
 800a494:	441a      	add	r2, r3
 800a496:	4620      	mov	r0, r4
 800a498:	9206      	str	r2, [sp, #24]
 800a49a:	f000 fc9f 	bl	800addc <__i2b>
 800a49e:	4607      	mov	r7, r0
 800a4a0:	b165      	cbz	r5, 800a4bc <_dtoa_r+0x774>
 800a4a2:	9b06      	ldr	r3, [sp, #24]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	dd09      	ble.n	800a4bc <_dtoa_r+0x774>
 800a4a8:	42ab      	cmp	r3, r5
 800a4aa:	9a05      	ldr	r2, [sp, #20]
 800a4ac:	bfa8      	it	ge
 800a4ae:	462b      	movge	r3, r5
 800a4b0:	1ad2      	subs	r2, r2, r3
 800a4b2:	9205      	str	r2, [sp, #20]
 800a4b4:	9a06      	ldr	r2, [sp, #24]
 800a4b6:	1aed      	subs	r5, r5, r3
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	9306      	str	r3, [sp, #24]
 800a4bc:	9b08      	ldr	r3, [sp, #32]
 800a4be:	b1f3      	cbz	r3, 800a4fe <_dtoa_r+0x7b6>
 800a4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 80a3 	beq.w	800a60e <_dtoa_r+0x8c6>
 800a4c8:	2e00      	cmp	r6, #0
 800a4ca:	dd10      	ble.n	800a4ee <_dtoa_r+0x7a6>
 800a4cc:	4639      	mov	r1, r7
 800a4ce:	4632      	mov	r2, r6
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f000 fd43 	bl	800af5c <__pow5mult>
 800a4d6:	4652      	mov	r2, sl
 800a4d8:	4601      	mov	r1, r0
 800a4da:	4607      	mov	r7, r0
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f000 fc93 	bl	800ae08 <__multiply>
 800a4e2:	4651      	mov	r1, sl
 800a4e4:	4680      	mov	r8, r0
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f000 fbc2 	bl	800ac70 <_Bfree>
 800a4ec:	46c2      	mov	sl, r8
 800a4ee:	9b08      	ldr	r3, [sp, #32]
 800a4f0:	1b9a      	subs	r2, r3, r6
 800a4f2:	d004      	beq.n	800a4fe <_dtoa_r+0x7b6>
 800a4f4:	4651      	mov	r1, sl
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 fd30 	bl	800af5c <__pow5mult>
 800a4fc:	4682      	mov	sl, r0
 800a4fe:	2101      	movs	r1, #1
 800a500:	4620      	mov	r0, r4
 800a502:	f000 fc6b 	bl	800addc <__i2b>
 800a506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a508:	2b00      	cmp	r3, #0
 800a50a:	4606      	mov	r6, r0
 800a50c:	f340 8081 	ble.w	800a612 <_dtoa_r+0x8ca>
 800a510:	461a      	mov	r2, r3
 800a512:	4601      	mov	r1, r0
 800a514:	4620      	mov	r0, r4
 800a516:	f000 fd21 	bl	800af5c <__pow5mult>
 800a51a:	9b07      	ldr	r3, [sp, #28]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	4606      	mov	r6, r0
 800a520:	dd7a      	ble.n	800a618 <_dtoa_r+0x8d0>
 800a522:	f04f 0800 	mov.w	r8, #0
 800a526:	6933      	ldr	r3, [r6, #16]
 800a528:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a52c:	6918      	ldr	r0, [r3, #16]
 800a52e:	f000 fc07 	bl	800ad40 <__hi0bits>
 800a532:	f1c0 0020 	rsb	r0, r0, #32
 800a536:	9b06      	ldr	r3, [sp, #24]
 800a538:	4418      	add	r0, r3
 800a53a:	f010 001f 	ands.w	r0, r0, #31
 800a53e:	f000 8094 	beq.w	800a66a <_dtoa_r+0x922>
 800a542:	f1c0 0320 	rsb	r3, r0, #32
 800a546:	2b04      	cmp	r3, #4
 800a548:	f340 8085 	ble.w	800a656 <_dtoa_r+0x90e>
 800a54c:	9b05      	ldr	r3, [sp, #20]
 800a54e:	f1c0 001c 	rsb	r0, r0, #28
 800a552:	4403      	add	r3, r0
 800a554:	9305      	str	r3, [sp, #20]
 800a556:	9b06      	ldr	r3, [sp, #24]
 800a558:	4403      	add	r3, r0
 800a55a:	4405      	add	r5, r0
 800a55c:	9306      	str	r3, [sp, #24]
 800a55e:	9b05      	ldr	r3, [sp, #20]
 800a560:	2b00      	cmp	r3, #0
 800a562:	dd05      	ble.n	800a570 <_dtoa_r+0x828>
 800a564:	4651      	mov	r1, sl
 800a566:	461a      	mov	r2, r3
 800a568:	4620      	mov	r0, r4
 800a56a:	f000 fd51 	bl	800b010 <__lshift>
 800a56e:	4682      	mov	sl, r0
 800a570:	9b06      	ldr	r3, [sp, #24]
 800a572:	2b00      	cmp	r3, #0
 800a574:	dd05      	ble.n	800a582 <_dtoa_r+0x83a>
 800a576:	4631      	mov	r1, r6
 800a578:	461a      	mov	r2, r3
 800a57a:	4620      	mov	r0, r4
 800a57c:	f000 fd48 	bl	800b010 <__lshift>
 800a580:	4606      	mov	r6, r0
 800a582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a584:	2b00      	cmp	r3, #0
 800a586:	d072      	beq.n	800a66e <_dtoa_r+0x926>
 800a588:	4631      	mov	r1, r6
 800a58a:	4650      	mov	r0, sl
 800a58c:	f000 fdac 	bl	800b0e8 <__mcmp>
 800a590:	2800      	cmp	r0, #0
 800a592:	da6c      	bge.n	800a66e <_dtoa_r+0x926>
 800a594:	2300      	movs	r3, #0
 800a596:	4651      	mov	r1, sl
 800a598:	220a      	movs	r2, #10
 800a59a:	4620      	mov	r0, r4
 800a59c:	f000 fb8a 	bl	800acb4 <__multadd>
 800a5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a5a6:	4682      	mov	sl, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f000 81b0 	beq.w	800a90e <_dtoa_r+0xbc6>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	4639      	mov	r1, r7
 800a5b2:	220a      	movs	r2, #10
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f000 fb7d 	bl	800acb4 <__multadd>
 800a5ba:	9b01      	ldr	r3, [sp, #4]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	4607      	mov	r7, r0
 800a5c0:	f300 8096 	bgt.w	800a6f0 <_dtoa_r+0x9a8>
 800a5c4:	9b07      	ldr	r3, [sp, #28]
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	dc59      	bgt.n	800a67e <_dtoa_r+0x936>
 800a5ca:	e091      	b.n	800a6f0 <_dtoa_r+0x9a8>
 800a5cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a5d2:	e758      	b.n	800a486 <_dtoa_r+0x73e>
 800a5d4:	9b04      	ldr	r3, [sp, #16]
 800a5d6:	1e5e      	subs	r6, r3, #1
 800a5d8:	9b08      	ldr	r3, [sp, #32]
 800a5da:	42b3      	cmp	r3, r6
 800a5dc:	bfbf      	itttt	lt
 800a5de:	9b08      	ldrlt	r3, [sp, #32]
 800a5e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a5e2:	9608      	strlt	r6, [sp, #32]
 800a5e4:	1af3      	sublt	r3, r6, r3
 800a5e6:	bfb4      	ite	lt
 800a5e8:	18d2      	addlt	r2, r2, r3
 800a5ea:	1b9e      	subge	r6, r3, r6
 800a5ec:	9b04      	ldr	r3, [sp, #16]
 800a5ee:	bfbc      	itt	lt
 800a5f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a5f2:	2600      	movlt	r6, #0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	bfb7      	itett	lt
 800a5f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a5fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a600:	1a9d      	sublt	r5, r3, r2
 800a602:	2300      	movlt	r3, #0
 800a604:	e741      	b.n	800a48a <_dtoa_r+0x742>
 800a606:	9e08      	ldr	r6, [sp, #32]
 800a608:	9d05      	ldr	r5, [sp, #20]
 800a60a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a60c:	e748      	b.n	800a4a0 <_dtoa_r+0x758>
 800a60e:	9a08      	ldr	r2, [sp, #32]
 800a610:	e770      	b.n	800a4f4 <_dtoa_r+0x7ac>
 800a612:	9b07      	ldr	r3, [sp, #28]
 800a614:	2b01      	cmp	r3, #1
 800a616:	dc19      	bgt.n	800a64c <_dtoa_r+0x904>
 800a618:	9b02      	ldr	r3, [sp, #8]
 800a61a:	b9bb      	cbnz	r3, 800a64c <_dtoa_r+0x904>
 800a61c:	9b03      	ldr	r3, [sp, #12]
 800a61e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a622:	b99b      	cbnz	r3, 800a64c <_dtoa_r+0x904>
 800a624:	9b03      	ldr	r3, [sp, #12]
 800a626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a62a:	0d1b      	lsrs	r3, r3, #20
 800a62c:	051b      	lsls	r3, r3, #20
 800a62e:	b183      	cbz	r3, 800a652 <_dtoa_r+0x90a>
 800a630:	9b05      	ldr	r3, [sp, #20]
 800a632:	3301      	adds	r3, #1
 800a634:	9305      	str	r3, [sp, #20]
 800a636:	9b06      	ldr	r3, [sp, #24]
 800a638:	3301      	adds	r3, #1
 800a63a:	9306      	str	r3, [sp, #24]
 800a63c:	f04f 0801 	mov.w	r8, #1
 800a640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a642:	2b00      	cmp	r3, #0
 800a644:	f47f af6f 	bne.w	800a526 <_dtoa_r+0x7de>
 800a648:	2001      	movs	r0, #1
 800a64a:	e774      	b.n	800a536 <_dtoa_r+0x7ee>
 800a64c:	f04f 0800 	mov.w	r8, #0
 800a650:	e7f6      	b.n	800a640 <_dtoa_r+0x8f8>
 800a652:	4698      	mov	r8, r3
 800a654:	e7f4      	b.n	800a640 <_dtoa_r+0x8f8>
 800a656:	d082      	beq.n	800a55e <_dtoa_r+0x816>
 800a658:	9a05      	ldr	r2, [sp, #20]
 800a65a:	331c      	adds	r3, #28
 800a65c:	441a      	add	r2, r3
 800a65e:	9205      	str	r2, [sp, #20]
 800a660:	9a06      	ldr	r2, [sp, #24]
 800a662:	441a      	add	r2, r3
 800a664:	441d      	add	r5, r3
 800a666:	9206      	str	r2, [sp, #24]
 800a668:	e779      	b.n	800a55e <_dtoa_r+0x816>
 800a66a:	4603      	mov	r3, r0
 800a66c:	e7f4      	b.n	800a658 <_dtoa_r+0x910>
 800a66e:	9b04      	ldr	r3, [sp, #16]
 800a670:	2b00      	cmp	r3, #0
 800a672:	dc37      	bgt.n	800a6e4 <_dtoa_r+0x99c>
 800a674:	9b07      	ldr	r3, [sp, #28]
 800a676:	2b02      	cmp	r3, #2
 800a678:	dd34      	ble.n	800a6e4 <_dtoa_r+0x99c>
 800a67a:	9b04      	ldr	r3, [sp, #16]
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	9b01      	ldr	r3, [sp, #4]
 800a680:	b963      	cbnz	r3, 800a69c <_dtoa_r+0x954>
 800a682:	4631      	mov	r1, r6
 800a684:	2205      	movs	r2, #5
 800a686:	4620      	mov	r0, r4
 800a688:	f000 fb14 	bl	800acb4 <__multadd>
 800a68c:	4601      	mov	r1, r0
 800a68e:	4606      	mov	r6, r0
 800a690:	4650      	mov	r0, sl
 800a692:	f000 fd29 	bl	800b0e8 <__mcmp>
 800a696:	2800      	cmp	r0, #0
 800a698:	f73f adbb 	bgt.w	800a212 <_dtoa_r+0x4ca>
 800a69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a69e:	9d00      	ldr	r5, [sp, #0]
 800a6a0:	ea6f 0b03 	mvn.w	fp, r3
 800a6a4:	f04f 0800 	mov.w	r8, #0
 800a6a8:	4631      	mov	r1, r6
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f000 fae0 	bl	800ac70 <_Bfree>
 800a6b0:	2f00      	cmp	r7, #0
 800a6b2:	f43f aeab 	beq.w	800a40c <_dtoa_r+0x6c4>
 800a6b6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ba:	d005      	beq.n	800a6c8 <_dtoa_r+0x980>
 800a6bc:	45b8      	cmp	r8, r7
 800a6be:	d003      	beq.n	800a6c8 <_dtoa_r+0x980>
 800a6c0:	4641      	mov	r1, r8
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f000 fad4 	bl	800ac70 <_Bfree>
 800a6c8:	4639      	mov	r1, r7
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f000 fad0 	bl	800ac70 <_Bfree>
 800a6d0:	e69c      	b.n	800a40c <_dtoa_r+0x6c4>
 800a6d2:	2600      	movs	r6, #0
 800a6d4:	4637      	mov	r7, r6
 800a6d6:	e7e1      	b.n	800a69c <_dtoa_r+0x954>
 800a6d8:	46bb      	mov	fp, r7
 800a6da:	4637      	mov	r7, r6
 800a6dc:	e599      	b.n	800a212 <_dtoa_r+0x4ca>
 800a6de:	bf00      	nop
 800a6e0:	40240000 	.word	0x40240000
 800a6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f000 80c8 	beq.w	800a87c <_dtoa_r+0xb34>
 800a6ec:	9b04      	ldr	r3, [sp, #16]
 800a6ee:	9301      	str	r3, [sp, #4]
 800a6f0:	2d00      	cmp	r5, #0
 800a6f2:	dd05      	ble.n	800a700 <_dtoa_r+0x9b8>
 800a6f4:	4639      	mov	r1, r7
 800a6f6:	462a      	mov	r2, r5
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 fc89 	bl	800b010 <__lshift>
 800a6fe:	4607      	mov	r7, r0
 800a700:	f1b8 0f00 	cmp.w	r8, #0
 800a704:	d05b      	beq.n	800a7be <_dtoa_r+0xa76>
 800a706:	6879      	ldr	r1, [r7, #4]
 800a708:	4620      	mov	r0, r4
 800a70a:	f000 fa71 	bl	800abf0 <_Balloc>
 800a70e:	4605      	mov	r5, r0
 800a710:	b928      	cbnz	r0, 800a71e <_dtoa_r+0x9d6>
 800a712:	4b83      	ldr	r3, [pc, #524]	; (800a920 <_dtoa_r+0xbd8>)
 800a714:	4602      	mov	r2, r0
 800a716:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a71a:	f7ff bb2e 	b.w	8009d7a <_dtoa_r+0x32>
 800a71e:	693a      	ldr	r2, [r7, #16]
 800a720:	3202      	adds	r2, #2
 800a722:	0092      	lsls	r2, r2, #2
 800a724:	f107 010c 	add.w	r1, r7, #12
 800a728:	300c      	adds	r0, #12
 800a72a:	f7ff fa75 	bl	8009c18 <memcpy>
 800a72e:	2201      	movs	r2, #1
 800a730:	4629      	mov	r1, r5
 800a732:	4620      	mov	r0, r4
 800a734:	f000 fc6c 	bl	800b010 <__lshift>
 800a738:	9b00      	ldr	r3, [sp, #0]
 800a73a:	3301      	adds	r3, #1
 800a73c:	9304      	str	r3, [sp, #16]
 800a73e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a742:	4413      	add	r3, r2
 800a744:	9308      	str	r3, [sp, #32]
 800a746:	9b02      	ldr	r3, [sp, #8]
 800a748:	f003 0301 	and.w	r3, r3, #1
 800a74c:	46b8      	mov	r8, r7
 800a74e:	9306      	str	r3, [sp, #24]
 800a750:	4607      	mov	r7, r0
 800a752:	9b04      	ldr	r3, [sp, #16]
 800a754:	4631      	mov	r1, r6
 800a756:	3b01      	subs	r3, #1
 800a758:	4650      	mov	r0, sl
 800a75a:	9301      	str	r3, [sp, #4]
 800a75c:	f7ff fa6a 	bl	8009c34 <quorem>
 800a760:	4641      	mov	r1, r8
 800a762:	9002      	str	r0, [sp, #8]
 800a764:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a768:	4650      	mov	r0, sl
 800a76a:	f000 fcbd 	bl	800b0e8 <__mcmp>
 800a76e:	463a      	mov	r2, r7
 800a770:	9005      	str	r0, [sp, #20]
 800a772:	4631      	mov	r1, r6
 800a774:	4620      	mov	r0, r4
 800a776:	f000 fcd3 	bl	800b120 <__mdiff>
 800a77a:	68c2      	ldr	r2, [r0, #12]
 800a77c:	4605      	mov	r5, r0
 800a77e:	bb02      	cbnz	r2, 800a7c2 <_dtoa_r+0xa7a>
 800a780:	4601      	mov	r1, r0
 800a782:	4650      	mov	r0, sl
 800a784:	f000 fcb0 	bl	800b0e8 <__mcmp>
 800a788:	4602      	mov	r2, r0
 800a78a:	4629      	mov	r1, r5
 800a78c:	4620      	mov	r0, r4
 800a78e:	9209      	str	r2, [sp, #36]	; 0x24
 800a790:	f000 fa6e 	bl	800ac70 <_Bfree>
 800a794:	9b07      	ldr	r3, [sp, #28]
 800a796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a798:	9d04      	ldr	r5, [sp, #16]
 800a79a:	ea43 0102 	orr.w	r1, r3, r2
 800a79e:	9b06      	ldr	r3, [sp, #24]
 800a7a0:	4319      	orrs	r1, r3
 800a7a2:	d110      	bne.n	800a7c6 <_dtoa_r+0xa7e>
 800a7a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a7a8:	d029      	beq.n	800a7fe <_dtoa_r+0xab6>
 800a7aa:	9b05      	ldr	r3, [sp, #20]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	dd02      	ble.n	800a7b6 <_dtoa_r+0xa6e>
 800a7b0:	9b02      	ldr	r3, [sp, #8]
 800a7b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a7b6:	9b01      	ldr	r3, [sp, #4]
 800a7b8:	f883 9000 	strb.w	r9, [r3]
 800a7bc:	e774      	b.n	800a6a8 <_dtoa_r+0x960>
 800a7be:	4638      	mov	r0, r7
 800a7c0:	e7ba      	b.n	800a738 <_dtoa_r+0x9f0>
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	e7e1      	b.n	800a78a <_dtoa_r+0xa42>
 800a7c6:	9b05      	ldr	r3, [sp, #20]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	db04      	blt.n	800a7d6 <_dtoa_r+0xa8e>
 800a7cc:	9907      	ldr	r1, [sp, #28]
 800a7ce:	430b      	orrs	r3, r1
 800a7d0:	9906      	ldr	r1, [sp, #24]
 800a7d2:	430b      	orrs	r3, r1
 800a7d4:	d120      	bne.n	800a818 <_dtoa_r+0xad0>
 800a7d6:	2a00      	cmp	r2, #0
 800a7d8:	dded      	ble.n	800a7b6 <_dtoa_r+0xa6e>
 800a7da:	4651      	mov	r1, sl
 800a7dc:	2201      	movs	r2, #1
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f000 fc16 	bl	800b010 <__lshift>
 800a7e4:	4631      	mov	r1, r6
 800a7e6:	4682      	mov	sl, r0
 800a7e8:	f000 fc7e 	bl	800b0e8 <__mcmp>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	dc03      	bgt.n	800a7f8 <_dtoa_r+0xab0>
 800a7f0:	d1e1      	bne.n	800a7b6 <_dtoa_r+0xa6e>
 800a7f2:	f019 0f01 	tst.w	r9, #1
 800a7f6:	d0de      	beq.n	800a7b6 <_dtoa_r+0xa6e>
 800a7f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a7fc:	d1d8      	bne.n	800a7b0 <_dtoa_r+0xa68>
 800a7fe:	9a01      	ldr	r2, [sp, #4]
 800a800:	2339      	movs	r3, #57	; 0x39
 800a802:	7013      	strb	r3, [r2, #0]
 800a804:	462b      	mov	r3, r5
 800a806:	461d      	mov	r5, r3
 800a808:	3b01      	subs	r3, #1
 800a80a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a80e:	2a39      	cmp	r2, #57	; 0x39
 800a810:	d06c      	beq.n	800a8ec <_dtoa_r+0xba4>
 800a812:	3201      	adds	r2, #1
 800a814:	701a      	strb	r2, [r3, #0]
 800a816:	e747      	b.n	800a6a8 <_dtoa_r+0x960>
 800a818:	2a00      	cmp	r2, #0
 800a81a:	dd07      	ble.n	800a82c <_dtoa_r+0xae4>
 800a81c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a820:	d0ed      	beq.n	800a7fe <_dtoa_r+0xab6>
 800a822:	9a01      	ldr	r2, [sp, #4]
 800a824:	f109 0301 	add.w	r3, r9, #1
 800a828:	7013      	strb	r3, [r2, #0]
 800a82a:	e73d      	b.n	800a6a8 <_dtoa_r+0x960>
 800a82c:	9b04      	ldr	r3, [sp, #16]
 800a82e:	9a08      	ldr	r2, [sp, #32]
 800a830:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a834:	4293      	cmp	r3, r2
 800a836:	d043      	beq.n	800a8c0 <_dtoa_r+0xb78>
 800a838:	4651      	mov	r1, sl
 800a83a:	2300      	movs	r3, #0
 800a83c:	220a      	movs	r2, #10
 800a83e:	4620      	mov	r0, r4
 800a840:	f000 fa38 	bl	800acb4 <__multadd>
 800a844:	45b8      	cmp	r8, r7
 800a846:	4682      	mov	sl, r0
 800a848:	f04f 0300 	mov.w	r3, #0
 800a84c:	f04f 020a 	mov.w	r2, #10
 800a850:	4641      	mov	r1, r8
 800a852:	4620      	mov	r0, r4
 800a854:	d107      	bne.n	800a866 <_dtoa_r+0xb1e>
 800a856:	f000 fa2d 	bl	800acb4 <__multadd>
 800a85a:	4680      	mov	r8, r0
 800a85c:	4607      	mov	r7, r0
 800a85e:	9b04      	ldr	r3, [sp, #16]
 800a860:	3301      	adds	r3, #1
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	e775      	b.n	800a752 <_dtoa_r+0xa0a>
 800a866:	f000 fa25 	bl	800acb4 <__multadd>
 800a86a:	4639      	mov	r1, r7
 800a86c:	4680      	mov	r8, r0
 800a86e:	2300      	movs	r3, #0
 800a870:	220a      	movs	r2, #10
 800a872:	4620      	mov	r0, r4
 800a874:	f000 fa1e 	bl	800acb4 <__multadd>
 800a878:	4607      	mov	r7, r0
 800a87a:	e7f0      	b.n	800a85e <_dtoa_r+0xb16>
 800a87c:	9b04      	ldr	r3, [sp, #16]
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	9d00      	ldr	r5, [sp, #0]
 800a882:	4631      	mov	r1, r6
 800a884:	4650      	mov	r0, sl
 800a886:	f7ff f9d5 	bl	8009c34 <quorem>
 800a88a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a88e:	9b00      	ldr	r3, [sp, #0]
 800a890:	f805 9b01 	strb.w	r9, [r5], #1
 800a894:	1aea      	subs	r2, r5, r3
 800a896:	9b01      	ldr	r3, [sp, #4]
 800a898:	4293      	cmp	r3, r2
 800a89a:	dd07      	ble.n	800a8ac <_dtoa_r+0xb64>
 800a89c:	4651      	mov	r1, sl
 800a89e:	2300      	movs	r3, #0
 800a8a0:	220a      	movs	r2, #10
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 fa06 	bl	800acb4 <__multadd>
 800a8a8:	4682      	mov	sl, r0
 800a8aa:	e7ea      	b.n	800a882 <_dtoa_r+0xb3a>
 800a8ac:	9b01      	ldr	r3, [sp, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	bfc8      	it	gt
 800a8b2:	461d      	movgt	r5, r3
 800a8b4:	9b00      	ldr	r3, [sp, #0]
 800a8b6:	bfd8      	it	le
 800a8b8:	2501      	movle	r5, #1
 800a8ba:	441d      	add	r5, r3
 800a8bc:	f04f 0800 	mov.w	r8, #0
 800a8c0:	4651      	mov	r1, sl
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f000 fba3 	bl	800b010 <__lshift>
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	4682      	mov	sl, r0
 800a8ce:	f000 fc0b 	bl	800b0e8 <__mcmp>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	dc96      	bgt.n	800a804 <_dtoa_r+0xabc>
 800a8d6:	d102      	bne.n	800a8de <_dtoa_r+0xb96>
 800a8d8:	f019 0f01 	tst.w	r9, #1
 800a8dc:	d192      	bne.n	800a804 <_dtoa_r+0xabc>
 800a8de:	462b      	mov	r3, r5
 800a8e0:	461d      	mov	r5, r3
 800a8e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8e6:	2a30      	cmp	r2, #48	; 0x30
 800a8e8:	d0fa      	beq.n	800a8e0 <_dtoa_r+0xb98>
 800a8ea:	e6dd      	b.n	800a6a8 <_dtoa_r+0x960>
 800a8ec:	9a00      	ldr	r2, [sp, #0]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d189      	bne.n	800a806 <_dtoa_r+0xabe>
 800a8f2:	f10b 0b01 	add.w	fp, fp, #1
 800a8f6:	2331      	movs	r3, #49	; 0x31
 800a8f8:	e796      	b.n	800a828 <_dtoa_r+0xae0>
 800a8fa:	4b0a      	ldr	r3, [pc, #40]	; (800a924 <_dtoa_r+0xbdc>)
 800a8fc:	f7ff ba99 	b.w	8009e32 <_dtoa_r+0xea>
 800a900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a902:	2b00      	cmp	r3, #0
 800a904:	f47f aa6d 	bne.w	8009de2 <_dtoa_r+0x9a>
 800a908:	4b07      	ldr	r3, [pc, #28]	; (800a928 <_dtoa_r+0xbe0>)
 800a90a:	f7ff ba92 	b.w	8009e32 <_dtoa_r+0xea>
 800a90e:	9b01      	ldr	r3, [sp, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	dcb5      	bgt.n	800a880 <_dtoa_r+0xb38>
 800a914:	9b07      	ldr	r3, [sp, #28]
 800a916:	2b02      	cmp	r3, #2
 800a918:	f73f aeb1 	bgt.w	800a67e <_dtoa_r+0x936>
 800a91c:	e7b0      	b.n	800a880 <_dtoa_r+0xb38>
 800a91e:	bf00      	nop
 800a920:	0800bccc 	.word	0x0800bccc
 800a924:	0800bc2c 	.word	0x0800bc2c
 800a928:	0800bc50 	.word	0x0800bc50

0800a92c <malloc>:
 800a92c:	4b02      	ldr	r3, [pc, #8]	; (800a938 <malloc+0xc>)
 800a92e:	4601      	mov	r1, r0
 800a930:	6818      	ldr	r0, [r3, #0]
 800a932:	f000 b823 	b.w	800a97c <_malloc_r>
 800a936:	bf00      	nop
 800a938:	2000006c 	.word	0x2000006c

0800a93c <sbrk_aligned>:
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	4e0e      	ldr	r6, [pc, #56]	; (800a978 <sbrk_aligned+0x3c>)
 800a940:	460c      	mov	r4, r1
 800a942:	6831      	ldr	r1, [r6, #0]
 800a944:	4605      	mov	r5, r0
 800a946:	b911      	cbnz	r1, 800a94e <sbrk_aligned+0x12>
 800a948:	f000 fd46 	bl	800b3d8 <_sbrk_r>
 800a94c:	6030      	str	r0, [r6, #0]
 800a94e:	4621      	mov	r1, r4
 800a950:	4628      	mov	r0, r5
 800a952:	f000 fd41 	bl	800b3d8 <_sbrk_r>
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	d00a      	beq.n	800a970 <sbrk_aligned+0x34>
 800a95a:	1cc4      	adds	r4, r0, #3
 800a95c:	f024 0403 	bic.w	r4, r4, #3
 800a960:	42a0      	cmp	r0, r4
 800a962:	d007      	beq.n	800a974 <sbrk_aligned+0x38>
 800a964:	1a21      	subs	r1, r4, r0
 800a966:	4628      	mov	r0, r5
 800a968:	f000 fd36 	bl	800b3d8 <_sbrk_r>
 800a96c:	3001      	adds	r0, #1
 800a96e:	d101      	bne.n	800a974 <sbrk_aligned+0x38>
 800a970:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a974:	4620      	mov	r0, r4
 800a976:	bd70      	pop	{r4, r5, r6, pc}
 800a978:	200052a8 	.word	0x200052a8

0800a97c <_malloc_r>:
 800a97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a980:	1ccd      	adds	r5, r1, #3
 800a982:	f025 0503 	bic.w	r5, r5, #3
 800a986:	3508      	adds	r5, #8
 800a988:	2d0c      	cmp	r5, #12
 800a98a:	bf38      	it	cc
 800a98c:	250c      	movcc	r5, #12
 800a98e:	2d00      	cmp	r5, #0
 800a990:	4607      	mov	r7, r0
 800a992:	db01      	blt.n	800a998 <_malloc_r+0x1c>
 800a994:	42a9      	cmp	r1, r5
 800a996:	d905      	bls.n	800a9a4 <_malloc_r+0x28>
 800a998:	230c      	movs	r3, #12
 800a99a:	603b      	str	r3, [r7, #0]
 800a99c:	2600      	movs	r6, #0
 800a99e:	4630      	mov	r0, r6
 800a9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa78 <_malloc_r+0xfc>
 800a9a8:	f000 f916 	bl	800abd8 <__malloc_lock>
 800a9ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a9b0:	461c      	mov	r4, r3
 800a9b2:	bb5c      	cbnz	r4, 800aa0c <_malloc_r+0x90>
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	f7ff ffc0 	bl	800a93c <sbrk_aligned>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	4604      	mov	r4, r0
 800a9c0:	d155      	bne.n	800aa6e <_malloc_r+0xf2>
 800a9c2:	f8d8 4000 	ldr.w	r4, [r8]
 800a9c6:	4626      	mov	r6, r4
 800a9c8:	2e00      	cmp	r6, #0
 800a9ca:	d145      	bne.n	800aa58 <_malloc_r+0xdc>
 800a9cc:	2c00      	cmp	r4, #0
 800a9ce:	d048      	beq.n	800aa62 <_malloc_r+0xe6>
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	4638      	mov	r0, r7
 800a9d6:	eb04 0903 	add.w	r9, r4, r3
 800a9da:	f000 fcfd 	bl	800b3d8 <_sbrk_r>
 800a9de:	4581      	cmp	r9, r0
 800a9e0:	d13f      	bne.n	800aa62 <_malloc_r+0xe6>
 800a9e2:	6821      	ldr	r1, [r4, #0]
 800a9e4:	1a6d      	subs	r5, r5, r1
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	4638      	mov	r0, r7
 800a9ea:	f7ff ffa7 	bl	800a93c <sbrk_aligned>
 800a9ee:	3001      	adds	r0, #1
 800a9f0:	d037      	beq.n	800aa62 <_malloc_r+0xe6>
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	442b      	add	r3, r5
 800a9f6:	6023      	str	r3, [r4, #0]
 800a9f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d038      	beq.n	800aa72 <_malloc_r+0xf6>
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	42a2      	cmp	r2, r4
 800aa04:	d12b      	bne.n	800aa5e <_malloc_r+0xe2>
 800aa06:	2200      	movs	r2, #0
 800aa08:	605a      	str	r2, [r3, #4]
 800aa0a:	e00f      	b.n	800aa2c <_malloc_r+0xb0>
 800aa0c:	6822      	ldr	r2, [r4, #0]
 800aa0e:	1b52      	subs	r2, r2, r5
 800aa10:	d41f      	bmi.n	800aa52 <_malloc_r+0xd6>
 800aa12:	2a0b      	cmp	r2, #11
 800aa14:	d917      	bls.n	800aa46 <_malloc_r+0xca>
 800aa16:	1961      	adds	r1, r4, r5
 800aa18:	42a3      	cmp	r3, r4
 800aa1a:	6025      	str	r5, [r4, #0]
 800aa1c:	bf18      	it	ne
 800aa1e:	6059      	strne	r1, [r3, #4]
 800aa20:	6863      	ldr	r3, [r4, #4]
 800aa22:	bf08      	it	eq
 800aa24:	f8c8 1000 	streq.w	r1, [r8]
 800aa28:	5162      	str	r2, [r4, r5]
 800aa2a:	604b      	str	r3, [r1, #4]
 800aa2c:	4638      	mov	r0, r7
 800aa2e:	f104 060b 	add.w	r6, r4, #11
 800aa32:	f000 f8d7 	bl	800abe4 <__malloc_unlock>
 800aa36:	f026 0607 	bic.w	r6, r6, #7
 800aa3a:	1d23      	adds	r3, r4, #4
 800aa3c:	1af2      	subs	r2, r6, r3
 800aa3e:	d0ae      	beq.n	800a99e <_malloc_r+0x22>
 800aa40:	1b9b      	subs	r3, r3, r6
 800aa42:	50a3      	str	r3, [r4, r2]
 800aa44:	e7ab      	b.n	800a99e <_malloc_r+0x22>
 800aa46:	42a3      	cmp	r3, r4
 800aa48:	6862      	ldr	r2, [r4, #4]
 800aa4a:	d1dd      	bne.n	800aa08 <_malloc_r+0x8c>
 800aa4c:	f8c8 2000 	str.w	r2, [r8]
 800aa50:	e7ec      	b.n	800aa2c <_malloc_r+0xb0>
 800aa52:	4623      	mov	r3, r4
 800aa54:	6864      	ldr	r4, [r4, #4]
 800aa56:	e7ac      	b.n	800a9b2 <_malloc_r+0x36>
 800aa58:	4634      	mov	r4, r6
 800aa5a:	6876      	ldr	r6, [r6, #4]
 800aa5c:	e7b4      	b.n	800a9c8 <_malloc_r+0x4c>
 800aa5e:	4613      	mov	r3, r2
 800aa60:	e7cc      	b.n	800a9fc <_malloc_r+0x80>
 800aa62:	230c      	movs	r3, #12
 800aa64:	603b      	str	r3, [r7, #0]
 800aa66:	4638      	mov	r0, r7
 800aa68:	f000 f8bc 	bl	800abe4 <__malloc_unlock>
 800aa6c:	e797      	b.n	800a99e <_malloc_r+0x22>
 800aa6e:	6025      	str	r5, [r4, #0]
 800aa70:	e7dc      	b.n	800aa2c <_malloc_r+0xb0>
 800aa72:	605b      	str	r3, [r3, #4]
 800aa74:	deff      	udf	#255	; 0xff
 800aa76:	bf00      	nop
 800aa78:	200052a4 	.word	0x200052a4

0800aa7c <__sflush_r>:
 800aa7c:	898a      	ldrh	r2, [r1, #12]
 800aa7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa82:	4605      	mov	r5, r0
 800aa84:	0710      	lsls	r0, r2, #28
 800aa86:	460c      	mov	r4, r1
 800aa88:	d458      	bmi.n	800ab3c <__sflush_r+0xc0>
 800aa8a:	684b      	ldr	r3, [r1, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	dc05      	bgt.n	800aa9c <__sflush_r+0x20>
 800aa90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	dc02      	bgt.n	800aa9c <__sflush_r+0x20>
 800aa96:	2000      	movs	r0, #0
 800aa98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa9e:	2e00      	cmp	r6, #0
 800aaa0:	d0f9      	beq.n	800aa96 <__sflush_r+0x1a>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aaa8:	682f      	ldr	r7, [r5, #0]
 800aaaa:	6a21      	ldr	r1, [r4, #32]
 800aaac:	602b      	str	r3, [r5, #0]
 800aaae:	d032      	beq.n	800ab16 <__sflush_r+0x9a>
 800aab0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aab2:	89a3      	ldrh	r3, [r4, #12]
 800aab4:	075a      	lsls	r2, r3, #29
 800aab6:	d505      	bpl.n	800aac4 <__sflush_r+0x48>
 800aab8:	6863      	ldr	r3, [r4, #4]
 800aaba:	1ac0      	subs	r0, r0, r3
 800aabc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aabe:	b10b      	cbz	r3, 800aac4 <__sflush_r+0x48>
 800aac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aac2:	1ac0      	subs	r0, r0, r3
 800aac4:	2300      	movs	r3, #0
 800aac6:	4602      	mov	r2, r0
 800aac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaca:	6a21      	ldr	r1, [r4, #32]
 800aacc:	4628      	mov	r0, r5
 800aace:	47b0      	blx	r6
 800aad0:	1c43      	adds	r3, r0, #1
 800aad2:	89a3      	ldrh	r3, [r4, #12]
 800aad4:	d106      	bne.n	800aae4 <__sflush_r+0x68>
 800aad6:	6829      	ldr	r1, [r5, #0]
 800aad8:	291d      	cmp	r1, #29
 800aada:	d82b      	bhi.n	800ab34 <__sflush_r+0xb8>
 800aadc:	4a29      	ldr	r2, [pc, #164]	; (800ab84 <__sflush_r+0x108>)
 800aade:	410a      	asrs	r2, r1
 800aae0:	07d6      	lsls	r6, r2, #31
 800aae2:	d427      	bmi.n	800ab34 <__sflush_r+0xb8>
 800aae4:	2200      	movs	r2, #0
 800aae6:	6062      	str	r2, [r4, #4]
 800aae8:	04d9      	lsls	r1, r3, #19
 800aaea:	6922      	ldr	r2, [r4, #16]
 800aaec:	6022      	str	r2, [r4, #0]
 800aaee:	d504      	bpl.n	800aafa <__sflush_r+0x7e>
 800aaf0:	1c42      	adds	r2, r0, #1
 800aaf2:	d101      	bne.n	800aaf8 <__sflush_r+0x7c>
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	b903      	cbnz	r3, 800aafa <__sflush_r+0x7e>
 800aaf8:	6560      	str	r0, [r4, #84]	; 0x54
 800aafa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aafc:	602f      	str	r7, [r5, #0]
 800aafe:	2900      	cmp	r1, #0
 800ab00:	d0c9      	beq.n	800aa96 <__sflush_r+0x1a>
 800ab02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab06:	4299      	cmp	r1, r3
 800ab08:	d002      	beq.n	800ab10 <__sflush_r+0x94>
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	f000 fcba 	bl	800b484 <_free_r>
 800ab10:	2000      	movs	r0, #0
 800ab12:	6360      	str	r0, [r4, #52]	; 0x34
 800ab14:	e7c0      	b.n	800aa98 <__sflush_r+0x1c>
 800ab16:	2301      	movs	r3, #1
 800ab18:	4628      	mov	r0, r5
 800ab1a:	47b0      	blx	r6
 800ab1c:	1c41      	adds	r1, r0, #1
 800ab1e:	d1c8      	bne.n	800aab2 <__sflush_r+0x36>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d0c5      	beq.n	800aab2 <__sflush_r+0x36>
 800ab26:	2b1d      	cmp	r3, #29
 800ab28:	d001      	beq.n	800ab2e <__sflush_r+0xb2>
 800ab2a:	2b16      	cmp	r3, #22
 800ab2c:	d101      	bne.n	800ab32 <__sflush_r+0xb6>
 800ab2e:	602f      	str	r7, [r5, #0]
 800ab30:	e7b1      	b.n	800aa96 <__sflush_r+0x1a>
 800ab32:	89a3      	ldrh	r3, [r4, #12]
 800ab34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab38:	81a3      	strh	r3, [r4, #12]
 800ab3a:	e7ad      	b.n	800aa98 <__sflush_r+0x1c>
 800ab3c:	690f      	ldr	r7, [r1, #16]
 800ab3e:	2f00      	cmp	r7, #0
 800ab40:	d0a9      	beq.n	800aa96 <__sflush_r+0x1a>
 800ab42:	0793      	lsls	r3, r2, #30
 800ab44:	680e      	ldr	r6, [r1, #0]
 800ab46:	bf08      	it	eq
 800ab48:	694b      	ldreq	r3, [r1, #20]
 800ab4a:	600f      	str	r7, [r1, #0]
 800ab4c:	bf18      	it	ne
 800ab4e:	2300      	movne	r3, #0
 800ab50:	eba6 0807 	sub.w	r8, r6, r7
 800ab54:	608b      	str	r3, [r1, #8]
 800ab56:	f1b8 0f00 	cmp.w	r8, #0
 800ab5a:	dd9c      	ble.n	800aa96 <__sflush_r+0x1a>
 800ab5c:	6a21      	ldr	r1, [r4, #32]
 800ab5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab60:	4643      	mov	r3, r8
 800ab62:	463a      	mov	r2, r7
 800ab64:	4628      	mov	r0, r5
 800ab66:	47b0      	blx	r6
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	dc06      	bgt.n	800ab7a <__sflush_r+0xfe>
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab72:	81a3      	strh	r3, [r4, #12]
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab78:	e78e      	b.n	800aa98 <__sflush_r+0x1c>
 800ab7a:	4407      	add	r7, r0
 800ab7c:	eba8 0800 	sub.w	r8, r8, r0
 800ab80:	e7e9      	b.n	800ab56 <__sflush_r+0xda>
 800ab82:	bf00      	nop
 800ab84:	dfbffffe 	.word	0xdfbffffe

0800ab88 <_fflush_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	690b      	ldr	r3, [r1, #16]
 800ab8c:	4605      	mov	r5, r0
 800ab8e:	460c      	mov	r4, r1
 800ab90:	b913      	cbnz	r3, 800ab98 <_fflush_r+0x10>
 800ab92:	2500      	movs	r5, #0
 800ab94:	4628      	mov	r0, r5
 800ab96:	bd38      	pop	{r3, r4, r5, pc}
 800ab98:	b118      	cbz	r0, 800aba2 <_fflush_r+0x1a>
 800ab9a:	6a03      	ldr	r3, [r0, #32]
 800ab9c:	b90b      	cbnz	r3, 800aba2 <_fflush_r+0x1a>
 800ab9e:	f7fe ffcd 	bl	8009b3c <__sinit>
 800aba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d0f3      	beq.n	800ab92 <_fflush_r+0xa>
 800abaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abac:	07d0      	lsls	r0, r2, #31
 800abae:	d404      	bmi.n	800abba <_fflush_r+0x32>
 800abb0:	0599      	lsls	r1, r3, #22
 800abb2:	d402      	bmi.n	800abba <_fflush_r+0x32>
 800abb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abb6:	f7ff f82d 	bl	8009c14 <__retarget_lock_acquire_recursive>
 800abba:	4628      	mov	r0, r5
 800abbc:	4621      	mov	r1, r4
 800abbe:	f7ff ff5d 	bl	800aa7c <__sflush_r>
 800abc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abc4:	07da      	lsls	r2, r3, #31
 800abc6:	4605      	mov	r5, r0
 800abc8:	d4e4      	bmi.n	800ab94 <_fflush_r+0xc>
 800abca:	89a3      	ldrh	r3, [r4, #12]
 800abcc:	059b      	lsls	r3, r3, #22
 800abce:	d4e1      	bmi.n	800ab94 <_fflush_r+0xc>
 800abd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abd2:	f7ff f820 	bl	8009c16 <__retarget_lock_release_recursive>
 800abd6:	e7dd      	b.n	800ab94 <_fflush_r+0xc>

0800abd8 <__malloc_lock>:
 800abd8:	4801      	ldr	r0, [pc, #4]	; (800abe0 <__malloc_lock+0x8>)
 800abda:	f7ff b81b 	b.w	8009c14 <__retarget_lock_acquire_recursive>
 800abde:	bf00      	nop
 800abe0:	200052a0 	.word	0x200052a0

0800abe4 <__malloc_unlock>:
 800abe4:	4801      	ldr	r0, [pc, #4]	; (800abec <__malloc_unlock+0x8>)
 800abe6:	f7ff b816 	b.w	8009c16 <__retarget_lock_release_recursive>
 800abea:	bf00      	nop
 800abec:	200052a0 	.word	0x200052a0

0800abf0 <_Balloc>:
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	69c6      	ldr	r6, [r0, #28]
 800abf4:	4604      	mov	r4, r0
 800abf6:	460d      	mov	r5, r1
 800abf8:	b976      	cbnz	r6, 800ac18 <_Balloc+0x28>
 800abfa:	2010      	movs	r0, #16
 800abfc:	f7ff fe96 	bl	800a92c <malloc>
 800ac00:	4602      	mov	r2, r0
 800ac02:	61e0      	str	r0, [r4, #28]
 800ac04:	b920      	cbnz	r0, 800ac10 <_Balloc+0x20>
 800ac06:	4b18      	ldr	r3, [pc, #96]	; (800ac68 <_Balloc+0x78>)
 800ac08:	4818      	ldr	r0, [pc, #96]	; (800ac6c <_Balloc+0x7c>)
 800ac0a:	216b      	movs	r1, #107	; 0x6b
 800ac0c:	f000 fc06 	bl	800b41c <__assert_func>
 800ac10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac14:	6006      	str	r6, [r0, #0]
 800ac16:	60c6      	str	r6, [r0, #12]
 800ac18:	69e6      	ldr	r6, [r4, #28]
 800ac1a:	68f3      	ldr	r3, [r6, #12]
 800ac1c:	b183      	cbz	r3, 800ac40 <_Balloc+0x50>
 800ac1e:	69e3      	ldr	r3, [r4, #28]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac26:	b9b8      	cbnz	r0, 800ac58 <_Balloc+0x68>
 800ac28:	2101      	movs	r1, #1
 800ac2a:	fa01 f605 	lsl.w	r6, r1, r5
 800ac2e:	1d72      	adds	r2, r6, #5
 800ac30:	0092      	lsls	r2, r2, #2
 800ac32:	4620      	mov	r0, r4
 800ac34:	f000 fc10 	bl	800b458 <_calloc_r>
 800ac38:	b160      	cbz	r0, 800ac54 <_Balloc+0x64>
 800ac3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac3e:	e00e      	b.n	800ac5e <_Balloc+0x6e>
 800ac40:	2221      	movs	r2, #33	; 0x21
 800ac42:	2104      	movs	r1, #4
 800ac44:	4620      	mov	r0, r4
 800ac46:	f000 fc07 	bl	800b458 <_calloc_r>
 800ac4a:	69e3      	ldr	r3, [r4, #28]
 800ac4c:	60f0      	str	r0, [r6, #12]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1e4      	bne.n	800ac1e <_Balloc+0x2e>
 800ac54:	2000      	movs	r0, #0
 800ac56:	bd70      	pop	{r4, r5, r6, pc}
 800ac58:	6802      	ldr	r2, [r0, #0]
 800ac5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac5e:	2300      	movs	r3, #0
 800ac60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac64:	e7f7      	b.n	800ac56 <_Balloc+0x66>
 800ac66:	bf00      	nop
 800ac68:	0800bc5d 	.word	0x0800bc5d
 800ac6c:	0800bcdd 	.word	0x0800bcdd

0800ac70 <_Bfree>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	69c6      	ldr	r6, [r0, #28]
 800ac74:	4605      	mov	r5, r0
 800ac76:	460c      	mov	r4, r1
 800ac78:	b976      	cbnz	r6, 800ac98 <_Bfree+0x28>
 800ac7a:	2010      	movs	r0, #16
 800ac7c:	f7ff fe56 	bl	800a92c <malloc>
 800ac80:	4602      	mov	r2, r0
 800ac82:	61e8      	str	r0, [r5, #28]
 800ac84:	b920      	cbnz	r0, 800ac90 <_Bfree+0x20>
 800ac86:	4b09      	ldr	r3, [pc, #36]	; (800acac <_Bfree+0x3c>)
 800ac88:	4809      	ldr	r0, [pc, #36]	; (800acb0 <_Bfree+0x40>)
 800ac8a:	218f      	movs	r1, #143	; 0x8f
 800ac8c:	f000 fbc6 	bl	800b41c <__assert_func>
 800ac90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac94:	6006      	str	r6, [r0, #0]
 800ac96:	60c6      	str	r6, [r0, #12]
 800ac98:	b13c      	cbz	r4, 800acaa <_Bfree+0x3a>
 800ac9a:	69eb      	ldr	r3, [r5, #28]
 800ac9c:	6862      	ldr	r2, [r4, #4]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aca4:	6021      	str	r1, [r4, #0]
 800aca6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acaa:	bd70      	pop	{r4, r5, r6, pc}
 800acac:	0800bc5d 	.word	0x0800bc5d
 800acb0:	0800bcdd 	.word	0x0800bcdd

0800acb4 <__multadd>:
 800acb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb8:	690d      	ldr	r5, [r1, #16]
 800acba:	4607      	mov	r7, r0
 800acbc:	460c      	mov	r4, r1
 800acbe:	461e      	mov	r6, r3
 800acc0:	f101 0c14 	add.w	ip, r1, #20
 800acc4:	2000      	movs	r0, #0
 800acc6:	f8dc 3000 	ldr.w	r3, [ip]
 800acca:	b299      	uxth	r1, r3
 800accc:	fb02 6101 	mla	r1, r2, r1, r6
 800acd0:	0c1e      	lsrs	r6, r3, #16
 800acd2:	0c0b      	lsrs	r3, r1, #16
 800acd4:	fb02 3306 	mla	r3, r2, r6, r3
 800acd8:	b289      	uxth	r1, r1
 800acda:	3001      	adds	r0, #1
 800acdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ace0:	4285      	cmp	r5, r0
 800ace2:	f84c 1b04 	str.w	r1, [ip], #4
 800ace6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800acea:	dcec      	bgt.n	800acc6 <__multadd+0x12>
 800acec:	b30e      	cbz	r6, 800ad32 <__multadd+0x7e>
 800acee:	68a3      	ldr	r3, [r4, #8]
 800acf0:	42ab      	cmp	r3, r5
 800acf2:	dc19      	bgt.n	800ad28 <__multadd+0x74>
 800acf4:	6861      	ldr	r1, [r4, #4]
 800acf6:	4638      	mov	r0, r7
 800acf8:	3101      	adds	r1, #1
 800acfa:	f7ff ff79 	bl	800abf0 <_Balloc>
 800acfe:	4680      	mov	r8, r0
 800ad00:	b928      	cbnz	r0, 800ad0e <__multadd+0x5a>
 800ad02:	4602      	mov	r2, r0
 800ad04:	4b0c      	ldr	r3, [pc, #48]	; (800ad38 <__multadd+0x84>)
 800ad06:	480d      	ldr	r0, [pc, #52]	; (800ad3c <__multadd+0x88>)
 800ad08:	21ba      	movs	r1, #186	; 0xba
 800ad0a:	f000 fb87 	bl	800b41c <__assert_func>
 800ad0e:	6922      	ldr	r2, [r4, #16]
 800ad10:	3202      	adds	r2, #2
 800ad12:	f104 010c 	add.w	r1, r4, #12
 800ad16:	0092      	lsls	r2, r2, #2
 800ad18:	300c      	adds	r0, #12
 800ad1a:	f7fe ff7d 	bl	8009c18 <memcpy>
 800ad1e:	4621      	mov	r1, r4
 800ad20:	4638      	mov	r0, r7
 800ad22:	f7ff ffa5 	bl	800ac70 <_Bfree>
 800ad26:	4644      	mov	r4, r8
 800ad28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad2c:	3501      	adds	r5, #1
 800ad2e:	615e      	str	r6, [r3, #20]
 800ad30:	6125      	str	r5, [r4, #16]
 800ad32:	4620      	mov	r0, r4
 800ad34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad38:	0800bccc 	.word	0x0800bccc
 800ad3c:	0800bcdd 	.word	0x0800bcdd

0800ad40 <__hi0bits>:
 800ad40:	0c03      	lsrs	r3, r0, #16
 800ad42:	041b      	lsls	r3, r3, #16
 800ad44:	b9d3      	cbnz	r3, 800ad7c <__hi0bits+0x3c>
 800ad46:	0400      	lsls	r0, r0, #16
 800ad48:	2310      	movs	r3, #16
 800ad4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad4e:	bf04      	itt	eq
 800ad50:	0200      	lsleq	r0, r0, #8
 800ad52:	3308      	addeq	r3, #8
 800ad54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad58:	bf04      	itt	eq
 800ad5a:	0100      	lsleq	r0, r0, #4
 800ad5c:	3304      	addeq	r3, #4
 800ad5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad62:	bf04      	itt	eq
 800ad64:	0080      	lsleq	r0, r0, #2
 800ad66:	3302      	addeq	r3, #2
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	db05      	blt.n	800ad78 <__hi0bits+0x38>
 800ad6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad70:	f103 0301 	add.w	r3, r3, #1
 800ad74:	bf08      	it	eq
 800ad76:	2320      	moveq	r3, #32
 800ad78:	4618      	mov	r0, r3
 800ad7a:	4770      	bx	lr
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	e7e4      	b.n	800ad4a <__hi0bits+0xa>

0800ad80 <__lo0bits>:
 800ad80:	6803      	ldr	r3, [r0, #0]
 800ad82:	f013 0207 	ands.w	r2, r3, #7
 800ad86:	d00c      	beq.n	800ada2 <__lo0bits+0x22>
 800ad88:	07d9      	lsls	r1, r3, #31
 800ad8a:	d422      	bmi.n	800add2 <__lo0bits+0x52>
 800ad8c:	079a      	lsls	r2, r3, #30
 800ad8e:	bf49      	itett	mi
 800ad90:	085b      	lsrmi	r3, r3, #1
 800ad92:	089b      	lsrpl	r3, r3, #2
 800ad94:	6003      	strmi	r3, [r0, #0]
 800ad96:	2201      	movmi	r2, #1
 800ad98:	bf5c      	itt	pl
 800ad9a:	6003      	strpl	r3, [r0, #0]
 800ad9c:	2202      	movpl	r2, #2
 800ad9e:	4610      	mov	r0, r2
 800ada0:	4770      	bx	lr
 800ada2:	b299      	uxth	r1, r3
 800ada4:	b909      	cbnz	r1, 800adaa <__lo0bits+0x2a>
 800ada6:	0c1b      	lsrs	r3, r3, #16
 800ada8:	2210      	movs	r2, #16
 800adaa:	b2d9      	uxtb	r1, r3
 800adac:	b909      	cbnz	r1, 800adb2 <__lo0bits+0x32>
 800adae:	3208      	adds	r2, #8
 800adb0:	0a1b      	lsrs	r3, r3, #8
 800adb2:	0719      	lsls	r1, r3, #28
 800adb4:	bf04      	itt	eq
 800adb6:	091b      	lsreq	r3, r3, #4
 800adb8:	3204      	addeq	r2, #4
 800adba:	0799      	lsls	r1, r3, #30
 800adbc:	bf04      	itt	eq
 800adbe:	089b      	lsreq	r3, r3, #2
 800adc0:	3202      	addeq	r2, #2
 800adc2:	07d9      	lsls	r1, r3, #31
 800adc4:	d403      	bmi.n	800adce <__lo0bits+0x4e>
 800adc6:	085b      	lsrs	r3, r3, #1
 800adc8:	f102 0201 	add.w	r2, r2, #1
 800adcc:	d003      	beq.n	800add6 <__lo0bits+0x56>
 800adce:	6003      	str	r3, [r0, #0]
 800add0:	e7e5      	b.n	800ad9e <__lo0bits+0x1e>
 800add2:	2200      	movs	r2, #0
 800add4:	e7e3      	b.n	800ad9e <__lo0bits+0x1e>
 800add6:	2220      	movs	r2, #32
 800add8:	e7e1      	b.n	800ad9e <__lo0bits+0x1e>
	...

0800addc <__i2b>:
 800addc:	b510      	push	{r4, lr}
 800adde:	460c      	mov	r4, r1
 800ade0:	2101      	movs	r1, #1
 800ade2:	f7ff ff05 	bl	800abf0 <_Balloc>
 800ade6:	4602      	mov	r2, r0
 800ade8:	b928      	cbnz	r0, 800adf6 <__i2b+0x1a>
 800adea:	4b05      	ldr	r3, [pc, #20]	; (800ae00 <__i2b+0x24>)
 800adec:	4805      	ldr	r0, [pc, #20]	; (800ae04 <__i2b+0x28>)
 800adee:	f240 1145 	movw	r1, #325	; 0x145
 800adf2:	f000 fb13 	bl	800b41c <__assert_func>
 800adf6:	2301      	movs	r3, #1
 800adf8:	6144      	str	r4, [r0, #20]
 800adfa:	6103      	str	r3, [r0, #16]
 800adfc:	bd10      	pop	{r4, pc}
 800adfe:	bf00      	nop
 800ae00:	0800bccc 	.word	0x0800bccc
 800ae04:	0800bcdd 	.word	0x0800bcdd

0800ae08 <__multiply>:
 800ae08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0c:	4691      	mov	r9, r2
 800ae0e:	690a      	ldr	r2, [r1, #16]
 800ae10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	bfb8      	it	lt
 800ae18:	460b      	movlt	r3, r1
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	bfbc      	itt	lt
 800ae1e:	464c      	movlt	r4, r9
 800ae20:	4699      	movlt	r9, r3
 800ae22:	6927      	ldr	r7, [r4, #16]
 800ae24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae28:	68a3      	ldr	r3, [r4, #8]
 800ae2a:	6861      	ldr	r1, [r4, #4]
 800ae2c:	eb07 060a 	add.w	r6, r7, sl
 800ae30:	42b3      	cmp	r3, r6
 800ae32:	b085      	sub	sp, #20
 800ae34:	bfb8      	it	lt
 800ae36:	3101      	addlt	r1, #1
 800ae38:	f7ff feda 	bl	800abf0 <_Balloc>
 800ae3c:	b930      	cbnz	r0, 800ae4c <__multiply+0x44>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	4b44      	ldr	r3, [pc, #272]	; (800af54 <__multiply+0x14c>)
 800ae42:	4845      	ldr	r0, [pc, #276]	; (800af58 <__multiply+0x150>)
 800ae44:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ae48:	f000 fae8 	bl	800b41c <__assert_func>
 800ae4c:	f100 0514 	add.w	r5, r0, #20
 800ae50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae54:	462b      	mov	r3, r5
 800ae56:	2200      	movs	r2, #0
 800ae58:	4543      	cmp	r3, r8
 800ae5a:	d321      	bcc.n	800aea0 <__multiply+0x98>
 800ae5c:	f104 0314 	add.w	r3, r4, #20
 800ae60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae64:	f109 0314 	add.w	r3, r9, #20
 800ae68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae6c:	9202      	str	r2, [sp, #8]
 800ae6e:	1b3a      	subs	r2, r7, r4
 800ae70:	3a15      	subs	r2, #21
 800ae72:	f022 0203 	bic.w	r2, r2, #3
 800ae76:	3204      	adds	r2, #4
 800ae78:	f104 0115 	add.w	r1, r4, #21
 800ae7c:	428f      	cmp	r7, r1
 800ae7e:	bf38      	it	cc
 800ae80:	2204      	movcc	r2, #4
 800ae82:	9201      	str	r2, [sp, #4]
 800ae84:	9a02      	ldr	r2, [sp, #8]
 800ae86:	9303      	str	r3, [sp, #12]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d80c      	bhi.n	800aea6 <__multiply+0x9e>
 800ae8c:	2e00      	cmp	r6, #0
 800ae8e:	dd03      	ble.n	800ae98 <__multiply+0x90>
 800ae90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d05b      	beq.n	800af50 <__multiply+0x148>
 800ae98:	6106      	str	r6, [r0, #16]
 800ae9a:	b005      	add	sp, #20
 800ae9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea0:	f843 2b04 	str.w	r2, [r3], #4
 800aea4:	e7d8      	b.n	800ae58 <__multiply+0x50>
 800aea6:	f8b3 a000 	ldrh.w	sl, [r3]
 800aeaa:	f1ba 0f00 	cmp.w	sl, #0
 800aeae:	d024      	beq.n	800aefa <__multiply+0xf2>
 800aeb0:	f104 0e14 	add.w	lr, r4, #20
 800aeb4:	46a9      	mov	r9, r5
 800aeb6:	f04f 0c00 	mov.w	ip, #0
 800aeba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aebe:	f8d9 1000 	ldr.w	r1, [r9]
 800aec2:	fa1f fb82 	uxth.w	fp, r2
 800aec6:	b289      	uxth	r1, r1
 800aec8:	fb0a 110b 	mla	r1, sl, fp, r1
 800aecc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aed0:	f8d9 2000 	ldr.w	r2, [r9]
 800aed4:	4461      	add	r1, ip
 800aed6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aeda:	fb0a c20b 	mla	r2, sl, fp, ip
 800aede:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aee2:	b289      	uxth	r1, r1
 800aee4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aee8:	4577      	cmp	r7, lr
 800aeea:	f849 1b04 	str.w	r1, [r9], #4
 800aeee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aef2:	d8e2      	bhi.n	800aeba <__multiply+0xb2>
 800aef4:	9a01      	ldr	r2, [sp, #4]
 800aef6:	f845 c002 	str.w	ip, [r5, r2]
 800aefa:	9a03      	ldr	r2, [sp, #12]
 800aefc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af00:	3304      	adds	r3, #4
 800af02:	f1b9 0f00 	cmp.w	r9, #0
 800af06:	d021      	beq.n	800af4c <__multiply+0x144>
 800af08:	6829      	ldr	r1, [r5, #0]
 800af0a:	f104 0c14 	add.w	ip, r4, #20
 800af0e:	46ae      	mov	lr, r5
 800af10:	f04f 0a00 	mov.w	sl, #0
 800af14:	f8bc b000 	ldrh.w	fp, [ip]
 800af18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af1c:	fb09 220b 	mla	r2, r9, fp, r2
 800af20:	4452      	add	r2, sl
 800af22:	b289      	uxth	r1, r1
 800af24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af28:	f84e 1b04 	str.w	r1, [lr], #4
 800af2c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800af30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af34:	f8be 1000 	ldrh.w	r1, [lr]
 800af38:	fb09 110a 	mla	r1, r9, sl, r1
 800af3c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800af40:	4567      	cmp	r7, ip
 800af42:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af46:	d8e5      	bhi.n	800af14 <__multiply+0x10c>
 800af48:	9a01      	ldr	r2, [sp, #4]
 800af4a:	50a9      	str	r1, [r5, r2]
 800af4c:	3504      	adds	r5, #4
 800af4e:	e799      	b.n	800ae84 <__multiply+0x7c>
 800af50:	3e01      	subs	r6, #1
 800af52:	e79b      	b.n	800ae8c <__multiply+0x84>
 800af54:	0800bccc 	.word	0x0800bccc
 800af58:	0800bcdd 	.word	0x0800bcdd

0800af5c <__pow5mult>:
 800af5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af60:	4615      	mov	r5, r2
 800af62:	f012 0203 	ands.w	r2, r2, #3
 800af66:	4606      	mov	r6, r0
 800af68:	460f      	mov	r7, r1
 800af6a:	d007      	beq.n	800af7c <__pow5mult+0x20>
 800af6c:	4c25      	ldr	r4, [pc, #148]	; (800b004 <__pow5mult+0xa8>)
 800af6e:	3a01      	subs	r2, #1
 800af70:	2300      	movs	r3, #0
 800af72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af76:	f7ff fe9d 	bl	800acb4 <__multadd>
 800af7a:	4607      	mov	r7, r0
 800af7c:	10ad      	asrs	r5, r5, #2
 800af7e:	d03d      	beq.n	800affc <__pow5mult+0xa0>
 800af80:	69f4      	ldr	r4, [r6, #28]
 800af82:	b97c      	cbnz	r4, 800afa4 <__pow5mult+0x48>
 800af84:	2010      	movs	r0, #16
 800af86:	f7ff fcd1 	bl	800a92c <malloc>
 800af8a:	4602      	mov	r2, r0
 800af8c:	61f0      	str	r0, [r6, #28]
 800af8e:	b928      	cbnz	r0, 800af9c <__pow5mult+0x40>
 800af90:	4b1d      	ldr	r3, [pc, #116]	; (800b008 <__pow5mult+0xac>)
 800af92:	481e      	ldr	r0, [pc, #120]	; (800b00c <__pow5mult+0xb0>)
 800af94:	f240 11b3 	movw	r1, #435	; 0x1b3
 800af98:	f000 fa40 	bl	800b41c <__assert_func>
 800af9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afa0:	6004      	str	r4, [r0, #0]
 800afa2:	60c4      	str	r4, [r0, #12]
 800afa4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800afa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afac:	b94c      	cbnz	r4, 800afc2 <__pow5mult+0x66>
 800afae:	f240 2171 	movw	r1, #625	; 0x271
 800afb2:	4630      	mov	r0, r6
 800afb4:	f7ff ff12 	bl	800addc <__i2b>
 800afb8:	2300      	movs	r3, #0
 800afba:	f8c8 0008 	str.w	r0, [r8, #8]
 800afbe:	4604      	mov	r4, r0
 800afc0:	6003      	str	r3, [r0, #0]
 800afc2:	f04f 0900 	mov.w	r9, #0
 800afc6:	07eb      	lsls	r3, r5, #31
 800afc8:	d50a      	bpl.n	800afe0 <__pow5mult+0x84>
 800afca:	4639      	mov	r1, r7
 800afcc:	4622      	mov	r2, r4
 800afce:	4630      	mov	r0, r6
 800afd0:	f7ff ff1a 	bl	800ae08 <__multiply>
 800afd4:	4639      	mov	r1, r7
 800afd6:	4680      	mov	r8, r0
 800afd8:	4630      	mov	r0, r6
 800afda:	f7ff fe49 	bl	800ac70 <_Bfree>
 800afde:	4647      	mov	r7, r8
 800afe0:	106d      	asrs	r5, r5, #1
 800afe2:	d00b      	beq.n	800affc <__pow5mult+0xa0>
 800afe4:	6820      	ldr	r0, [r4, #0]
 800afe6:	b938      	cbnz	r0, 800aff8 <__pow5mult+0x9c>
 800afe8:	4622      	mov	r2, r4
 800afea:	4621      	mov	r1, r4
 800afec:	4630      	mov	r0, r6
 800afee:	f7ff ff0b 	bl	800ae08 <__multiply>
 800aff2:	6020      	str	r0, [r4, #0]
 800aff4:	f8c0 9000 	str.w	r9, [r0]
 800aff8:	4604      	mov	r4, r0
 800affa:	e7e4      	b.n	800afc6 <__pow5mult+0x6a>
 800affc:	4638      	mov	r0, r7
 800affe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b002:	bf00      	nop
 800b004:	0800be28 	.word	0x0800be28
 800b008:	0800bc5d 	.word	0x0800bc5d
 800b00c:	0800bcdd 	.word	0x0800bcdd

0800b010 <__lshift>:
 800b010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b014:	460c      	mov	r4, r1
 800b016:	6849      	ldr	r1, [r1, #4]
 800b018:	6923      	ldr	r3, [r4, #16]
 800b01a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b01e:	68a3      	ldr	r3, [r4, #8]
 800b020:	4607      	mov	r7, r0
 800b022:	4691      	mov	r9, r2
 800b024:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b028:	f108 0601 	add.w	r6, r8, #1
 800b02c:	42b3      	cmp	r3, r6
 800b02e:	db0b      	blt.n	800b048 <__lshift+0x38>
 800b030:	4638      	mov	r0, r7
 800b032:	f7ff fddd 	bl	800abf0 <_Balloc>
 800b036:	4605      	mov	r5, r0
 800b038:	b948      	cbnz	r0, 800b04e <__lshift+0x3e>
 800b03a:	4602      	mov	r2, r0
 800b03c:	4b28      	ldr	r3, [pc, #160]	; (800b0e0 <__lshift+0xd0>)
 800b03e:	4829      	ldr	r0, [pc, #164]	; (800b0e4 <__lshift+0xd4>)
 800b040:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b044:	f000 f9ea 	bl	800b41c <__assert_func>
 800b048:	3101      	adds	r1, #1
 800b04a:	005b      	lsls	r3, r3, #1
 800b04c:	e7ee      	b.n	800b02c <__lshift+0x1c>
 800b04e:	2300      	movs	r3, #0
 800b050:	f100 0114 	add.w	r1, r0, #20
 800b054:	f100 0210 	add.w	r2, r0, #16
 800b058:	4618      	mov	r0, r3
 800b05a:	4553      	cmp	r3, sl
 800b05c:	db33      	blt.n	800b0c6 <__lshift+0xb6>
 800b05e:	6920      	ldr	r0, [r4, #16]
 800b060:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b064:	f104 0314 	add.w	r3, r4, #20
 800b068:	f019 091f 	ands.w	r9, r9, #31
 800b06c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b070:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b074:	d02b      	beq.n	800b0ce <__lshift+0xbe>
 800b076:	f1c9 0e20 	rsb	lr, r9, #32
 800b07a:	468a      	mov	sl, r1
 800b07c:	2200      	movs	r2, #0
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	fa00 f009 	lsl.w	r0, r0, r9
 800b084:	4310      	orrs	r0, r2
 800b086:	f84a 0b04 	str.w	r0, [sl], #4
 800b08a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b08e:	459c      	cmp	ip, r3
 800b090:	fa22 f20e 	lsr.w	r2, r2, lr
 800b094:	d8f3      	bhi.n	800b07e <__lshift+0x6e>
 800b096:	ebac 0304 	sub.w	r3, ip, r4
 800b09a:	3b15      	subs	r3, #21
 800b09c:	f023 0303 	bic.w	r3, r3, #3
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	f104 0015 	add.w	r0, r4, #21
 800b0a6:	4584      	cmp	ip, r0
 800b0a8:	bf38      	it	cc
 800b0aa:	2304      	movcc	r3, #4
 800b0ac:	50ca      	str	r2, [r1, r3]
 800b0ae:	b10a      	cbz	r2, 800b0b4 <__lshift+0xa4>
 800b0b0:	f108 0602 	add.w	r6, r8, #2
 800b0b4:	3e01      	subs	r6, #1
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	612e      	str	r6, [r5, #16]
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	f7ff fdd8 	bl	800ac70 <_Bfree>
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	e7c5      	b.n	800b05a <__lshift+0x4a>
 800b0ce:	3904      	subs	r1, #4
 800b0d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0d8:	459c      	cmp	ip, r3
 800b0da:	d8f9      	bhi.n	800b0d0 <__lshift+0xc0>
 800b0dc:	e7ea      	b.n	800b0b4 <__lshift+0xa4>
 800b0de:	bf00      	nop
 800b0e0:	0800bccc 	.word	0x0800bccc
 800b0e4:	0800bcdd 	.word	0x0800bcdd

0800b0e8 <__mcmp>:
 800b0e8:	b530      	push	{r4, r5, lr}
 800b0ea:	6902      	ldr	r2, [r0, #16]
 800b0ec:	690c      	ldr	r4, [r1, #16]
 800b0ee:	1b12      	subs	r2, r2, r4
 800b0f0:	d10e      	bne.n	800b110 <__mcmp+0x28>
 800b0f2:	f100 0314 	add.w	r3, r0, #20
 800b0f6:	3114      	adds	r1, #20
 800b0f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b100:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b104:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b108:	42a5      	cmp	r5, r4
 800b10a:	d003      	beq.n	800b114 <__mcmp+0x2c>
 800b10c:	d305      	bcc.n	800b11a <__mcmp+0x32>
 800b10e:	2201      	movs	r2, #1
 800b110:	4610      	mov	r0, r2
 800b112:	bd30      	pop	{r4, r5, pc}
 800b114:	4283      	cmp	r3, r0
 800b116:	d3f3      	bcc.n	800b100 <__mcmp+0x18>
 800b118:	e7fa      	b.n	800b110 <__mcmp+0x28>
 800b11a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b11e:	e7f7      	b.n	800b110 <__mcmp+0x28>

0800b120 <__mdiff>:
 800b120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b124:	460c      	mov	r4, r1
 800b126:	4606      	mov	r6, r0
 800b128:	4611      	mov	r1, r2
 800b12a:	4620      	mov	r0, r4
 800b12c:	4690      	mov	r8, r2
 800b12e:	f7ff ffdb 	bl	800b0e8 <__mcmp>
 800b132:	1e05      	subs	r5, r0, #0
 800b134:	d110      	bne.n	800b158 <__mdiff+0x38>
 800b136:	4629      	mov	r1, r5
 800b138:	4630      	mov	r0, r6
 800b13a:	f7ff fd59 	bl	800abf0 <_Balloc>
 800b13e:	b930      	cbnz	r0, 800b14e <__mdiff+0x2e>
 800b140:	4b3a      	ldr	r3, [pc, #232]	; (800b22c <__mdiff+0x10c>)
 800b142:	4602      	mov	r2, r0
 800b144:	f240 2137 	movw	r1, #567	; 0x237
 800b148:	4839      	ldr	r0, [pc, #228]	; (800b230 <__mdiff+0x110>)
 800b14a:	f000 f967 	bl	800b41c <__assert_func>
 800b14e:	2301      	movs	r3, #1
 800b150:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b154:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b158:	bfa4      	itt	ge
 800b15a:	4643      	movge	r3, r8
 800b15c:	46a0      	movge	r8, r4
 800b15e:	4630      	mov	r0, r6
 800b160:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b164:	bfa6      	itte	ge
 800b166:	461c      	movge	r4, r3
 800b168:	2500      	movge	r5, #0
 800b16a:	2501      	movlt	r5, #1
 800b16c:	f7ff fd40 	bl	800abf0 <_Balloc>
 800b170:	b920      	cbnz	r0, 800b17c <__mdiff+0x5c>
 800b172:	4b2e      	ldr	r3, [pc, #184]	; (800b22c <__mdiff+0x10c>)
 800b174:	4602      	mov	r2, r0
 800b176:	f240 2145 	movw	r1, #581	; 0x245
 800b17a:	e7e5      	b.n	800b148 <__mdiff+0x28>
 800b17c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b180:	6926      	ldr	r6, [r4, #16]
 800b182:	60c5      	str	r5, [r0, #12]
 800b184:	f104 0914 	add.w	r9, r4, #20
 800b188:	f108 0514 	add.w	r5, r8, #20
 800b18c:	f100 0e14 	add.w	lr, r0, #20
 800b190:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b194:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b198:	f108 0210 	add.w	r2, r8, #16
 800b19c:	46f2      	mov	sl, lr
 800b19e:	2100      	movs	r1, #0
 800b1a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b1a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b1a8:	fa11 f88b 	uxtah	r8, r1, fp
 800b1ac:	b299      	uxth	r1, r3
 800b1ae:	0c1b      	lsrs	r3, r3, #16
 800b1b0:	eba8 0801 	sub.w	r8, r8, r1
 800b1b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b1b8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b1bc:	fa1f f888 	uxth.w	r8, r8
 800b1c0:	1419      	asrs	r1, r3, #16
 800b1c2:	454e      	cmp	r6, r9
 800b1c4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b1c8:	f84a 3b04 	str.w	r3, [sl], #4
 800b1cc:	d8e8      	bhi.n	800b1a0 <__mdiff+0x80>
 800b1ce:	1b33      	subs	r3, r6, r4
 800b1d0:	3b15      	subs	r3, #21
 800b1d2:	f023 0303 	bic.w	r3, r3, #3
 800b1d6:	3304      	adds	r3, #4
 800b1d8:	3415      	adds	r4, #21
 800b1da:	42a6      	cmp	r6, r4
 800b1dc:	bf38      	it	cc
 800b1de:	2304      	movcc	r3, #4
 800b1e0:	441d      	add	r5, r3
 800b1e2:	4473      	add	r3, lr
 800b1e4:	469e      	mov	lr, r3
 800b1e6:	462e      	mov	r6, r5
 800b1e8:	4566      	cmp	r6, ip
 800b1ea:	d30e      	bcc.n	800b20a <__mdiff+0xea>
 800b1ec:	f10c 0203 	add.w	r2, ip, #3
 800b1f0:	1b52      	subs	r2, r2, r5
 800b1f2:	f022 0203 	bic.w	r2, r2, #3
 800b1f6:	3d03      	subs	r5, #3
 800b1f8:	45ac      	cmp	ip, r5
 800b1fa:	bf38      	it	cc
 800b1fc:	2200      	movcc	r2, #0
 800b1fe:	4413      	add	r3, r2
 800b200:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b204:	b17a      	cbz	r2, 800b226 <__mdiff+0x106>
 800b206:	6107      	str	r7, [r0, #16]
 800b208:	e7a4      	b.n	800b154 <__mdiff+0x34>
 800b20a:	f856 8b04 	ldr.w	r8, [r6], #4
 800b20e:	fa11 f288 	uxtah	r2, r1, r8
 800b212:	1414      	asrs	r4, r2, #16
 800b214:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b218:	b292      	uxth	r2, r2
 800b21a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b21e:	f84e 2b04 	str.w	r2, [lr], #4
 800b222:	1421      	asrs	r1, r4, #16
 800b224:	e7e0      	b.n	800b1e8 <__mdiff+0xc8>
 800b226:	3f01      	subs	r7, #1
 800b228:	e7ea      	b.n	800b200 <__mdiff+0xe0>
 800b22a:	bf00      	nop
 800b22c:	0800bccc 	.word	0x0800bccc
 800b230:	0800bcdd 	.word	0x0800bcdd

0800b234 <__d2b>:
 800b234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b238:	460f      	mov	r7, r1
 800b23a:	2101      	movs	r1, #1
 800b23c:	ec59 8b10 	vmov	r8, r9, d0
 800b240:	4616      	mov	r6, r2
 800b242:	f7ff fcd5 	bl	800abf0 <_Balloc>
 800b246:	4604      	mov	r4, r0
 800b248:	b930      	cbnz	r0, 800b258 <__d2b+0x24>
 800b24a:	4602      	mov	r2, r0
 800b24c:	4b24      	ldr	r3, [pc, #144]	; (800b2e0 <__d2b+0xac>)
 800b24e:	4825      	ldr	r0, [pc, #148]	; (800b2e4 <__d2b+0xb0>)
 800b250:	f240 310f 	movw	r1, #783	; 0x30f
 800b254:	f000 f8e2 	bl	800b41c <__assert_func>
 800b258:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b25c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b260:	bb2d      	cbnz	r5, 800b2ae <__d2b+0x7a>
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	f1b8 0300 	subs.w	r3, r8, #0
 800b268:	d026      	beq.n	800b2b8 <__d2b+0x84>
 800b26a:	4668      	mov	r0, sp
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	f7ff fd87 	bl	800ad80 <__lo0bits>
 800b272:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b276:	b1e8      	cbz	r0, 800b2b4 <__d2b+0x80>
 800b278:	f1c0 0320 	rsb	r3, r0, #32
 800b27c:	fa02 f303 	lsl.w	r3, r2, r3
 800b280:	430b      	orrs	r3, r1
 800b282:	40c2      	lsrs	r2, r0
 800b284:	6163      	str	r3, [r4, #20]
 800b286:	9201      	str	r2, [sp, #4]
 800b288:	9b01      	ldr	r3, [sp, #4]
 800b28a:	61a3      	str	r3, [r4, #24]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	bf14      	ite	ne
 800b290:	2202      	movne	r2, #2
 800b292:	2201      	moveq	r2, #1
 800b294:	6122      	str	r2, [r4, #16]
 800b296:	b1bd      	cbz	r5, 800b2c8 <__d2b+0x94>
 800b298:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b29c:	4405      	add	r5, r0
 800b29e:	603d      	str	r5, [r7, #0]
 800b2a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2a4:	6030      	str	r0, [r6, #0]
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	b003      	add	sp, #12
 800b2aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2b2:	e7d6      	b.n	800b262 <__d2b+0x2e>
 800b2b4:	6161      	str	r1, [r4, #20]
 800b2b6:	e7e7      	b.n	800b288 <__d2b+0x54>
 800b2b8:	a801      	add	r0, sp, #4
 800b2ba:	f7ff fd61 	bl	800ad80 <__lo0bits>
 800b2be:	9b01      	ldr	r3, [sp, #4]
 800b2c0:	6163      	str	r3, [r4, #20]
 800b2c2:	3020      	adds	r0, #32
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	e7e5      	b.n	800b294 <__d2b+0x60>
 800b2c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2d0:	6038      	str	r0, [r7, #0]
 800b2d2:	6918      	ldr	r0, [r3, #16]
 800b2d4:	f7ff fd34 	bl	800ad40 <__hi0bits>
 800b2d8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2dc:	e7e2      	b.n	800b2a4 <__d2b+0x70>
 800b2de:	bf00      	nop
 800b2e0:	0800bccc 	.word	0x0800bccc
 800b2e4:	0800bcdd 	.word	0x0800bcdd

0800b2e8 <__sread>:
 800b2e8:	b510      	push	{r4, lr}
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2f0:	f000 f860 	bl	800b3b4 <_read_r>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	bfab      	itete	ge
 800b2f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2fa:	89a3      	ldrhlt	r3, [r4, #12]
 800b2fc:	181b      	addge	r3, r3, r0
 800b2fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b302:	bfac      	ite	ge
 800b304:	6563      	strge	r3, [r4, #84]	; 0x54
 800b306:	81a3      	strhlt	r3, [r4, #12]
 800b308:	bd10      	pop	{r4, pc}

0800b30a <__swrite>:
 800b30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b30e:	461f      	mov	r7, r3
 800b310:	898b      	ldrh	r3, [r1, #12]
 800b312:	05db      	lsls	r3, r3, #23
 800b314:	4605      	mov	r5, r0
 800b316:	460c      	mov	r4, r1
 800b318:	4616      	mov	r6, r2
 800b31a:	d505      	bpl.n	800b328 <__swrite+0x1e>
 800b31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b320:	2302      	movs	r3, #2
 800b322:	2200      	movs	r2, #0
 800b324:	f000 f834 	bl	800b390 <_lseek_r>
 800b328:	89a3      	ldrh	r3, [r4, #12]
 800b32a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b32e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b332:	81a3      	strh	r3, [r4, #12]
 800b334:	4632      	mov	r2, r6
 800b336:	463b      	mov	r3, r7
 800b338:	4628      	mov	r0, r5
 800b33a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b33e:	f000 b85b 	b.w	800b3f8 <_write_r>

0800b342 <__sseek>:
 800b342:	b510      	push	{r4, lr}
 800b344:	460c      	mov	r4, r1
 800b346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34a:	f000 f821 	bl	800b390 <_lseek_r>
 800b34e:	1c43      	adds	r3, r0, #1
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	bf15      	itete	ne
 800b354:	6560      	strne	r0, [r4, #84]	; 0x54
 800b356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b35a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b35e:	81a3      	strheq	r3, [r4, #12]
 800b360:	bf18      	it	ne
 800b362:	81a3      	strhne	r3, [r4, #12]
 800b364:	bd10      	pop	{r4, pc}

0800b366 <__sclose>:
 800b366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b36a:	f000 b801 	b.w	800b370 <_close_r>
	...

0800b370 <_close_r>:
 800b370:	b538      	push	{r3, r4, r5, lr}
 800b372:	4d06      	ldr	r5, [pc, #24]	; (800b38c <_close_r+0x1c>)
 800b374:	2300      	movs	r3, #0
 800b376:	4604      	mov	r4, r0
 800b378:	4608      	mov	r0, r1
 800b37a:	602b      	str	r3, [r5, #0]
 800b37c:	f7f7 fe8b 	bl	8003096 <_close>
 800b380:	1c43      	adds	r3, r0, #1
 800b382:	d102      	bne.n	800b38a <_close_r+0x1a>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	b103      	cbz	r3, 800b38a <_close_r+0x1a>
 800b388:	6023      	str	r3, [r4, #0]
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	200052ac 	.word	0x200052ac

0800b390 <_lseek_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d07      	ldr	r5, [pc, #28]	; (800b3b0 <_lseek_r+0x20>)
 800b394:	4604      	mov	r4, r0
 800b396:	4608      	mov	r0, r1
 800b398:	4611      	mov	r1, r2
 800b39a:	2200      	movs	r2, #0
 800b39c:	602a      	str	r2, [r5, #0]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f7f7 fea0 	bl	80030e4 <_lseek>
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	d102      	bne.n	800b3ae <_lseek_r+0x1e>
 800b3a8:	682b      	ldr	r3, [r5, #0]
 800b3aa:	b103      	cbz	r3, 800b3ae <_lseek_r+0x1e>
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	200052ac 	.word	0x200052ac

0800b3b4 <_read_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4d07      	ldr	r5, [pc, #28]	; (800b3d4 <_read_r+0x20>)
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	4608      	mov	r0, r1
 800b3bc:	4611      	mov	r1, r2
 800b3be:	2200      	movs	r2, #0
 800b3c0:	602a      	str	r2, [r5, #0]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	f7f7 fe2e 	bl	8003024 <_read>
 800b3c8:	1c43      	adds	r3, r0, #1
 800b3ca:	d102      	bne.n	800b3d2 <_read_r+0x1e>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	b103      	cbz	r3, 800b3d2 <_read_r+0x1e>
 800b3d0:	6023      	str	r3, [r4, #0]
 800b3d2:	bd38      	pop	{r3, r4, r5, pc}
 800b3d4:	200052ac 	.word	0x200052ac

0800b3d8 <_sbrk_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4d06      	ldr	r5, [pc, #24]	; (800b3f4 <_sbrk_r+0x1c>)
 800b3dc:	2300      	movs	r3, #0
 800b3de:	4604      	mov	r4, r0
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	602b      	str	r3, [r5, #0]
 800b3e4:	f7f7 fe8c 	bl	8003100 <_sbrk>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d102      	bne.n	800b3f2 <_sbrk_r+0x1a>
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	b103      	cbz	r3, 800b3f2 <_sbrk_r+0x1a>
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	bd38      	pop	{r3, r4, r5, pc}
 800b3f4:	200052ac 	.word	0x200052ac

0800b3f8 <_write_r>:
 800b3f8:	b538      	push	{r3, r4, r5, lr}
 800b3fa:	4d07      	ldr	r5, [pc, #28]	; (800b418 <_write_r+0x20>)
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	4608      	mov	r0, r1
 800b400:	4611      	mov	r1, r2
 800b402:	2200      	movs	r2, #0
 800b404:	602a      	str	r2, [r5, #0]
 800b406:	461a      	mov	r2, r3
 800b408:	f7f7 fe29 	bl	800305e <_write>
 800b40c:	1c43      	adds	r3, r0, #1
 800b40e:	d102      	bne.n	800b416 <_write_r+0x1e>
 800b410:	682b      	ldr	r3, [r5, #0]
 800b412:	b103      	cbz	r3, 800b416 <_write_r+0x1e>
 800b414:	6023      	str	r3, [r4, #0]
 800b416:	bd38      	pop	{r3, r4, r5, pc}
 800b418:	200052ac 	.word	0x200052ac

0800b41c <__assert_func>:
 800b41c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b41e:	4614      	mov	r4, r2
 800b420:	461a      	mov	r2, r3
 800b422:	4b09      	ldr	r3, [pc, #36]	; (800b448 <__assert_func+0x2c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4605      	mov	r5, r0
 800b428:	68d8      	ldr	r0, [r3, #12]
 800b42a:	b14c      	cbz	r4, 800b440 <__assert_func+0x24>
 800b42c:	4b07      	ldr	r3, [pc, #28]	; (800b44c <__assert_func+0x30>)
 800b42e:	9100      	str	r1, [sp, #0]
 800b430:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b434:	4906      	ldr	r1, [pc, #24]	; (800b450 <__assert_func+0x34>)
 800b436:	462b      	mov	r3, r5
 800b438:	f000 f882 	bl	800b540 <fiprintf>
 800b43c:	f000 f89f 	bl	800b57e <abort>
 800b440:	4b04      	ldr	r3, [pc, #16]	; (800b454 <__assert_func+0x38>)
 800b442:	461c      	mov	r4, r3
 800b444:	e7f3      	b.n	800b42e <__assert_func+0x12>
 800b446:	bf00      	nop
 800b448:	2000006c 	.word	0x2000006c
 800b44c:	0800bf3f 	.word	0x0800bf3f
 800b450:	0800bf4c 	.word	0x0800bf4c
 800b454:	0800bf7a 	.word	0x0800bf7a

0800b458 <_calloc_r>:
 800b458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b45a:	fba1 2402 	umull	r2, r4, r1, r2
 800b45e:	b94c      	cbnz	r4, 800b474 <_calloc_r+0x1c>
 800b460:	4611      	mov	r1, r2
 800b462:	9201      	str	r2, [sp, #4]
 800b464:	f7ff fa8a 	bl	800a97c <_malloc_r>
 800b468:	9a01      	ldr	r2, [sp, #4]
 800b46a:	4605      	mov	r5, r0
 800b46c:	b930      	cbnz	r0, 800b47c <_calloc_r+0x24>
 800b46e:	4628      	mov	r0, r5
 800b470:	b003      	add	sp, #12
 800b472:	bd30      	pop	{r4, r5, pc}
 800b474:	220c      	movs	r2, #12
 800b476:	6002      	str	r2, [r0, #0]
 800b478:	2500      	movs	r5, #0
 800b47a:	e7f8      	b.n	800b46e <_calloc_r+0x16>
 800b47c:	4621      	mov	r1, r4
 800b47e:	f7fe fb93 	bl	8009ba8 <memset>
 800b482:	e7f4      	b.n	800b46e <_calloc_r+0x16>

0800b484 <_free_r>:
 800b484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b486:	2900      	cmp	r1, #0
 800b488:	d044      	beq.n	800b514 <_free_r+0x90>
 800b48a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b48e:	9001      	str	r0, [sp, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	f1a1 0404 	sub.w	r4, r1, #4
 800b496:	bfb8      	it	lt
 800b498:	18e4      	addlt	r4, r4, r3
 800b49a:	f7ff fb9d 	bl	800abd8 <__malloc_lock>
 800b49e:	4a1e      	ldr	r2, [pc, #120]	; (800b518 <_free_r+0x94>)
 800b4a0:	9801      	ldr	r0, [sp, #4]
 800b4a2:	6813      	ldr	r3, [r2, #0]
 800b4a4:	b933      	cbnz	r3, 800b4b4 <_free_r+0x30>
 800b4a6:	6063      	str	r3, [r4, #4]
 800b4a8:	6014      	str	r4, [r2, #0]
 800b4aa:	b003      	add	sp, #12
 800b4ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4b0:	f7ff bb98 	b.w	800abe4 <__malloc_unlock>
 800b4b4:	42a3      	cmp	r3, r4
 800b4b6:	d908      	bls.n	800b4ca <_free_r+0x46>
 800b4b8:	6825      	ldr	r5, [r4, #0]
 800b4ba:	1961      	adds	r1, r4, r5
 800b4bc:	428b      	cmp	r3, r1
 800b4be:	bf01      	itttt	eq
 800b4c0:	6819      	ldreq	r1, [r3, #0]
 800b4c2:	685b      	ldreq	r3, [r3, #4]
 800b4c4:	1949      	addeq	r1, r1, r5
 800b4c6:	6021      	streq	r1, [r4, #0]
 800b4c8:	e7ed      	b.n	800b4a6 <_free_r+0x22>
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	b10b      	cbz	r3, 800b4d4 <_free_r+0x50>
 800b4d0:	42a3      	cmp	r3, r4
 800b4d2:	d9fa      	bls.n	800b4ca <_free_r+0x46>
 800b4d4:	6811      	ldr	r1, [r2, #0]
 800b4d6:	1855      	adds	r5, r2, r1
 800b4d8:	42a5      	cmp	r5, r4
 800b4da:	d10b      	bne.n	800b4f4 <_free_r+0x70>
 800b4dc:	6824      	ldr	r4, [r4, #0]
 800b4de:	4421      	add	r1, r4
 800b4e0:	1854      	adds	r4, r2, r1
 800b4e2:	42a3      	cmp	r3, r4
 800b4e4:	6011      	str	r1, [r2, #0]
 800b4e6:	d1e0      	bne.n	800b4aa <_free_r+0x26>
 800b4e8:	681c      	ldr	r4, [r3, #0]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	6053      	str	r3, [r2, #4]
 800b4ee:	440c      	add	r4, r1
 800b4f0:	6014      	str	r4, [r2, #0]
 800b4f2:	e7da      	b.n	800b4aa <_free_r+0x26>
 800b4f4:	d902      	bls.n	800b4fc <_free_r+0x78>
 800b4f6:	230c      	movs	r3, #12
 800b4f8:	6003      	str	r3, [r0, #0]
 800b4fa:	e7d6      	b.n	800b4aa <_free_r+0x26>
 800b4fc:	6825      	ldr	r5, [r4, #0]
 800b4fe:	1961      	adds	r1, r4, r5
 800b500:	428b      	cmp	r3, r1
 800b502:	bf04      	itt	eq
 800b504:	6819      	ldreq	r1, [r3, #0]
 800b506:	685b      	ldreq	r3, [r3, #4]
 800b508:	6063      	str	r3, [r4, #4]
 800b50a:	bf04      	itt	eq
 800b50c:	1949      	addeq	r1, r1, r5
 800b50e:	6021      	streq	r1, [r4, #0]
 800b510:	6054      	str	r4, [r2, #4]
 800b512:	e7ca      	b.n	800b4aa <_free_r+0x26>
 800b514:	b003      	add	sp, #12
 800b516:	bd30      	pop	{r4, r5, pc}
 800b518:	200052a4 	.word	0x200052a4

0800b51c <__ascii_mbtowc>:
 800b51c:	b082      	sub	sp, #8
 800b51e:	b901      	cbnz	r1, 800b522 <__ascii_mbtowc+0x6>
 800b520:	a901      	add	r1, sp, #4
 800b522:	b142      	cbz	r2, 800b536 <__ascii_mbtowc+0x1a>
 800b524:	b14b      	cbz	r3, 800b53a <__ascii_mbtowc+0x1e>
 800b526:	7813      	ldrb	r3, [r2, #0]
 800b528:	600b      	str	r3, [r1, #0]
 800b52a:	7812      	ldrb	r2, [r2, #0]
 800b52c:	1e10      	subs	r0, r2, #0
 800b52e:	bf18      	it	ne
 800b530:	2001      	movne	r0, #1
 800b532:	b002      	add	sp, #8
 800b534:	4770      	bx	lr
 800b536:	4610      	mov	r0, r2
 800b538:	e7fb      	b.n	800b532 <__ascii_mbtowc+0x16>
 800b53a:	f06f 0001 	mvn.w	r0, #1
 800b53e:	e7f8      	b.n	800b532 <__ascii_mbtowc+0x16>

0800b540 <fiprintf>:
 800b540:	b40e      	push	{r1, r2, r3}
 800b542:	b503      	push	{r0, r1, lr}
 800b544:	4601      	mov	r1, r0
 800b546:	ab03      	add	r3, sp, #12
 800b548:	4805      	ldr	r0, [pc, #20]	; (800b560 <fiprintf+0x20>)
 800b54a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b54e:	6800      	ldr	r0, [r0, #0]
 800b550:	9301      	str	r3, [sp, #4]
 800b552:	f000 f845 	bl	800b5e0 <_vfiprintf_r>
 800b556:	b002      	add	sp, #8
 800b558:	f85d eb04 	ldr.w	lr, [sp], #4
 800b55c:	b003      	add	sp, #12
 800b55e:	4770      	bx	lr
 800b560:	2000006c 	.word	0x2000006c

0800b564 <__ascii_wctomb>:
 800b564:	b149      	cbz	r1, 800b57a <__ascii_wctomb+0x16>
 800b566:	2aff      	cmp	r2, #255	; 0xff
 800b568:	bf85      	ittet	hi
 800b56a:	238a      	movhi	r3, #138	; 0x8a
 800b56c:	6003      	strhi	r3, [r0, #0]
 800b56e:	700a      	strbls	r2, [r1, #0]
 800b570:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b574:	bf98      	it	ls
 800b576:	2001      	movls	r0, #1
 800b578:	4770      	bx	lr
 800b57a:	4608      	mov	r0, r1
 800b57c:	4770      	bx	lr

0800b57e <abort>:
 800b57e:	b508      	push	{r3, lr}
 800b580:	2006      	movs	r0, #6
 800b582:	f000 fa89 	bl	800ba98 <raise>
 800b586:	2001      	movs	r0, #1
 800b588:	f7f7 fd42 	bl	8003010 <_exit>

0800b58c <__sfputc_r>:
 800b58c:	6893      	ldr	r3, [r2, #8]
 800b58e:	3b01      	subs	r3, #1
 800b590:	2b00      	cmp	r3, #0
 800b592:	b410      	push	{r4}
 800b594:	6093      	str	r3, [r2, #8]
 800b596:	da08      	bge.n	800b5aa <__sfputc_r+0x1e>
 800b598:	6994      	ldr	r4, [r2, #24]
 800b59a:	42a3      	cmp	r3, r4
 800b59c:	db01      	blt.n	800b5a2 <__sfputc_r+0x16>
 800b59e:	290a      	cmp	r1, #10
 800b5a0:	d103      	bne.n	800b5aa <__sfputc_r+0x1e>
 800b5a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5a6:	f000 b935 	b.w	800b814 <__swbuf_r>
 800b5aa:	6813      	ldr	r3, [r2, #0]
 800b5ac:	1c58      	adds	r0, r3, #1
 800b5ae:	6010      	str	r0, [r2, #0]
 800b5b0:	7019      	strb	r1, [r3, #0]
 800b5b2:	4608      	mov	r0, r1
 800b5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <__sfputs_r>:
 800b5ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5bc:	4606      	mov	r6, r0
 800b5be:	460f      	mov	r7, r1
 800b5c0:	4614      	mov	r4, r2
 800b5c2:	18d5      	adds	r5, r2, r3
 800b5c4:	42ac      	cmp	r4, r5
 800b5c6:	d101      	bne.n	800b5cc <__sfputs_r+0x12>
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	e007      	b.n	800b5dc <__sfputs_r+0x22>
 800b5cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5d0:	463a      	mov	r2, r7
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	f7ff ffda 	bl	800b58c <__sfputc_r>
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	d1f3      	bne.n	800b5c4 <__sfputs_r+0xa>
 800b5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5e0 <_vfiprintf_r>:
 800b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e4:	460d      	mov	r5, r1
 800b5e6:	b09d      	sub	sp, #116	; 0x74
 800b5e8:	4614      	mov	r4, r2
 800b5ea:	4698      	mov	r8, r3
 800b5ec:	4606      	mov	r6, r0
 800b5ee:	b118      	cbz	r0, 800b5f8 <_vfiprintf_r+0x18>
 800b5f0:	6a03      	ldr	r3, [r0, #32]
 800b5f2:	b90b      	cbnz	r3, 800b5f8 <_vfiprintf_r+0x18>
 800b5f4:	f7fe faa2 	bl	8009b3c <__sinit>
 800b5f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5fa:	07d9      	lsls	r1, r3, #31
 800b5fc:	d405      	bmi.n	800b60a <_vfiprintf_r+0x2a>
 800b5fe:	89ab      	ldrh	r3, [r5, #12]
 800b600:	059a      	lsls	r2, r3, #22
 800b602:	d402      	bmi.n	800b60a <_vfiprintf_r+0x2a>
 800b604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b606:	f7fe fb05 	bl	8009c14 <__retarget_lock_acquire_recursive>
 800b60a:	89ab      	ldrh	r3, [r5, #12]
 800b60c:	071b      	lsls	r3, r3, #28
 800b60e:	d501      	bpl.n	800b614 <_vfiprintf_r+0x34>
 800b610:	692b      	ldr	r3, [r5, #16]
 800b612:	b99b      	cbnz	r3, 800b63c <_vfiprintf_r+0x5c>
 800b614:	4629      	mov	r1, r5
 800b616:	4630      	mov	r0, r6
 800b618:	f000 f93a 	bl	800b890 <__swsetup_r>
 800b61c:	b170      	cbz	r0, 800b63c <_vfiprintf_r+0x5c>
 800b61e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b620:	07dc      	lsls	r4, r3, #31
 800b622:	d504      	bpl.n	800b62e <_vfiprintf_r+0x4e>
 800b624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b628:	b01d      	add	sp, #116	; 0x74
 800b62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62e:	89ab      	ldrh	r3, [r5, #12]
 800b630:	0598      	lsls	r0, r3, #22
 800b632:	d4f7      	bmi.n	800b624 <_vfiprintf_r+0x44>
 800b634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b636:	f7fe faee 	bl	8009c16 <__retarget_lock_release_recursive>
 800b63a:	e7f3      	b.n	800b624 <_vfiprintf_r+0x44>
 800b63c:	2300      	movs	r3, #0
 800b63e:	9309      	str	r3, [sp, #36]	; 0x24
 800b640:	2320      	movs	r3, #32
 800b642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b646:	f8cd 800c 	str.w	r8, [sp, #12]
 800b64a:	2330      	movs	r3, #48	; 0x30
 800b64c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b800 <_vfiprintf_r+0x220>
 800b650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b654:	f04f 0901 	mov.w	r9, #1
 800b658:	4623      	mov	r3, r4
 800b65a:	469a      	mov	sl, r3
 800b65c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b660:	b10a      	cbz	r2, 800b666 <_vfiprintf_r+0x86>
 800b662:	2a25      	cmp	r2, #37	; 0x25
 800b664:	d1f9      	bne.n	800b65a <_vfiprintf_r+0x7a>
 800b666:	ebba 0b04 	subs.w	fp, sl, r4
 800b66a:	d00b      	beq.n	800b684 <_vfiprintf_r+0xa4>
 800b66c:	465b      	mov	r3, fp
 800b66e:	4622      	mov	r2, r4
 800b670:	4629      	mov	r1, r5
 800b672:	4630      	mov	r0, r6
 800b674:	f7ff ffa1 	bl	800b5ba <__sfputs_r>
 800b678:	3001      	adds	r0, #1
 800b67a:	f000 80a9 	beq.w	800b7d0 <_vfiprintf_r+0x1f0>
 800b67e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b680:	445a      	add	r2, fp
 800b682:	9209      	str	r2, [sp, #36]	; 0x24
 800b684:	f89a 3000 	ldrb.w	r3, [sl]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f000 80a1 	beq.w	800b7d0 <_vfiprintf_r+0x1f0>
 800b68e:	2300      	movs	r3, #0
 800b690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b698:	f10a 0a01 	add.w	sl, sl, #1
 800b69c:	9304      	str	r3, [sp, #16]
 800b69e:	9307      	str	r3, [sp, #28]
 800b6a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6a4:	931a      	str	r3, [sp, #104]	; 0x68
 800b6a6:	4654      	mov	r4, sl
 800b6a8:	2205      	movs	r2, #5
 800b6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ae:	4854      	ldr	r0, [pc, #336]	; (800b800 <_vfiprintf_r+0x220>)
 800b6b0:	f7f4 fd8e 	bl	80001d0 <memchr>
 800b6b4:	9a04      	ldr	r2, [sp, #16]
 800b6b6:	b9d8      	cbnz	r0, 800b6f0 <_vfiprintf_r+0x110>
 800b6b8:	06d1      	lsls	r1, r2, #27
 800b6ba:	bf44      	itt	mi
 800b6bc:	2320      	movmi	r3, #32
 800b6be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6c2:	0713      	lsls	r3, r2, #28
 800b6c4:	bf44      	itt	mi
 800b6c6:	232b      	movmi	r3, #43	; 0x2b
 800b6c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b6d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6d2:	d015      	beq.n	800b700 <_vfiprintf_r+0x120>
 800b6d4:	9a07      	ldr	r2, [sp, #28]
 800b6d6:	4654      	mov	r4, sl
 800b6d8:	2000      	movs	r0, #0
 800b6da:	f04f 0c0a 	mov.w	ip, #10
 800b6de:	4621      	mov	r1, r4
 800b6e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6e4:	3b30      	subs	r3, #48	; 0x30
 800b6e6:	2b09      	cmp	r3, #9
 800b6e8:	d94d      	bls.n	800b786 <_vfiprintf_r+0x1a6>
 800b6ea:	b1b0      	cbz	r0, 800b71a <_vfiprintf_r+0x13a>
 800b6ec:	9207      	str	r2, [sp, #28]
 800b6ee:	e014      	b.n	800b71a <_vfiprintf_r+0x13a>
 800b6f0:	eba0 0308 	sub.w	r3, r0, r8
 800b6f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	9304      	str	r3, [sp, #16]
 800b6fc:	46a2      	mov	sl, r4
 800b6fe:	e7d2      	b.n	800b6a6 <_vfiprintf_r+0xc6>
 800b700:	9b03      	ldr	r3, [sp, #12]
 800b702:	1d19      	adds	r1, r3, #4
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	9103      	str	r1, [sp, #12]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	bfbb      	ittet	lt
 800b70c:	425b      	neglt	r3, r3
 800b70e:	f042 0202 	orrlt.w	r2, r2, #2
 800b712:	9307      	strge	r3, [sp, #28]
 800b714:	9307      	strlt	r3, [sp, #28]
 800b716:	bfb8      	it	lt
 800b718:	9204      	strlt	r2, [sp, #16]
 800b71a:	7823      	ldrb	r3, [r4, #0]
 800b71c:	2b2e      	cmp	r3, #46	; 0x2e
 800b71e:	d10c      	bne.n	800b73a <_vfiprintf_r+0x15a>
 800b720:	7863      	ldrb	r3, [r4, #1]
 800b722:	2b2a      	cmp	r3, #42	; 0x2a
 800b724:	d134      	bne.n	800b790 <_vfiprintf_r+0x1b0>
 800b726:	9b03      	ldr	r3, [sp, #12]
 800b728:	1d1a      	adds	r2, r3, #4
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	9203      	str	r2, [sp, #12]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	bfb8      	it	lt
 800b732:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b736:	3402      	adds	r4, #2
 800b738:	9305      	str	r3, [sp, #20]
 800b73a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b810 <_vfiprintf_r+0x230>
 800b73e:	7821      	ldrb	r1, [r4, #0]
 800b740:	2203      	movs	r2, #3
 800b742:	4650      	mov	r0, sl
 800b744:	f7f4 fd44 	bl	80001d0 <memchr>
 800b748:	b138      	cbz	r0, 800b75a <_vfiprintf_r+0x17a>
 800b74a:	9b04      	ldr	r3, [sp, #16]
 800b74c:	eba0 000a 	sub.w	r0, r0, sl
 800b750:	2240      	movs	r2, #64	; 0x40
 800b752:	4082      	lsls	r2, r0
 800b754:	4313      	orrs	r3, r2
 800b756:	3401      	adds	r4, #1
 800b758:	9304      	str	r3, [sp, #16]
 800b75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b75e:	4829      	ldr	r0, [pc, #164]	; (800b804 <_vfiprintf_r+0x224>)
 800b760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b764:	2206      	movs	r2, #6
 800b766:	f7f4 fd33 	bl	80001d0 <memchr>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d03f      	beq.n	800b7ee <_vfiprintf_r+0x20e>
 800b76e:	4b26      	ldr	r3, [pc, #152]	; (800b808 <_vfiprintf_r+0x228>)
 800b770:	bb1b      	cbnz	r3, 800b7ba <_vfiprintf_r+0x1da>
 800b772:	9b03      	ldr	r3, [sp, #12]
 800b774:	3307      	adds	r3, #7
 800b776:	f023 0307 	bic.w	r3, r3, #7
 800b77a:	3308      	adds	r3, #8
 800b77c:	9303      	str	r3, [sp, #12]
 800b77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b780:	443b      	add	r3, r7
 800b782:	9309      	str	r3, [sp, #36]	; 0x24
 800b784:	e768      	b.n	800b658 <_vfiprintf_r+0x78>
 800b786:	fb0c 3202 	mla	r2, ip, r2, r3
 800b78a:	460c      	mov	r4, r1
 800b78c:	2001      	movs	r0, #1
 800b78e:	e7a6      	b.n	800b6de <_vfiprintf_r+0xfe>
 800b790:	2300      	movs	r3, #0
 800b792:	3401      	adds	r4, #1
 800b794:	9305      	str	r3, [sp, #20]
 800b796:	4619      	mov	r1, r3
 800b798:	f04f 0c0a 	mov.w	ip, #10
 800b79c:	4620      	mov	r0, r4
 800b79e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7a2:	3a30      	subs	r2, #48	; 0x30
 800b7a4:	2a09      	cmp	r2, #9
 800b7a6:	d903      	bls.n	800b7b0 <_vfiprintf_r+0x1d0>
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d0c6      	beq.n	800b73a <_vfiprintf_r+0x15a>
 800b7ac:	9105      	str	r1, [sp, #20]
 800b7ae:	e7c4      	b.n	800b73a <_vfiprintf_r+0x15a>
 800b7b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e7f0      	b.n	800b79c <_vfiprintf_r+0x1bc>
 800b7ba:	ab03      	add	r3, sp, #12
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	462a      	mov	r2, r5
 800b7c0:	4b12      	ldr	r3, [pc, #72]	; (800b80c <_vfiprintf_r+0x22c>)
 800b7c2:	a904      	add	r1, sp, #16
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	f7fd fd79 	bl	80092bc <_printf_float>
 800b7ca:	4607      	mov	r7, r0
 800b7cc:	1c78      	adds	r0, r7, #1
 800b7ce:	d1d6      	bne.n	800b77e <_vfiprintf_r+0x19e>
 800b7d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7d2:	07d9      	lsls	r1, r3, #31
 800b7d4:	d405      	bmi.n	800b7e2 <_vfiprintf_r+0x202>
 800b7d6:	89ab      	ldrh	r3, [r5, #12]
 800b7d8:	059a      	lsls	r2, r3, #22
 800b7da:	d402      	bmi.n	800b7e2 <_vfiprintf_r+0x202>
 800b7dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7de:	f7fe fa1a 	bl	8009c16 <__retarget_lock_release_recursive>
 800b7e2:	89ab      	ldrh	r3, [r5, #12]
 800b7e4:	065b      	lsls	r3, r3, #25
 800b7e6:	f53f af1d 	bmi.w	800b624 <_vfiprintf_r+0x44>
 800b7ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7ec:	e71c      	b.n	800b628 <_vfiprintf_r+0x48>
 800b7ee:	ab03      	add	r3, sp, #12
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	462a      	mov	r2, r5
 800b7f4:	4b05      	ldr	r3, [pc, #20]	; (800b80c <_vfiprintf_r+0x22c>)
 800b7f6:	a904      	add	r1, sp, #16
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f7fe f803 	bl	8009804 <_printf_i>
 800b7fe:	e7e4      	b.n	800b7ca <_vfiprintf_r+0x1ea>
 800b800:	0800bf7b 	.word	0x0800bf7b
 800b804:	0800bf85 	.word	0x0800bf85
 800b808:	080092bd 	.word	0x080092bd
 800b80c:	0800b5bb 	.word	0x0800b5bb
 800b810:	0800bf81 	.word	0x0800bf81

0800b814 <__swbuf_r>:
 800b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b816:	460e      	mov	r6, r1
 800b818:	4614      	mov	r4, r2
 800b81a:	4605      	mov	r5, r0
 800b81c:	b118      	cbz	r0, 800b826 <__swbuf_r+0x12>
 800b81e:	6a03      	ldr	r3, [r0, #32]
 800b820:	b90b      	cbnz	r3, 800b826 <__swbuf_r+0x12>
 800b822:	f7fe f98b 	bl	8009b3c <__sinit>
 800b826:	69a3      	ldr	r3, [r4, #24]
 800b828:	60a3      	str	r3, [r4, #8]
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	071a      	lsls	r2, r3, #28
 800b82e:	d525      	bpl.n	800b87c <__swbuf_r+0x68>
 800b830:	6923      	ldr	r3, [r4, #16]
 800b832:	b31b      	cbz	r3, 800b87c <__swbuf_r+0x68>
 800b834:	6823      	ldr	r3, [r4, #0]
 800b836:	6922      	ldr	r2, [r4, #16]
 800b838:	1a98      	subs	r0, r3, r2
 800b83a:	6963      	ldr	r3, [r4, #20]
 800b83c:	b2f6      	uxtb	r6, r6
 800b83e:	4283      	cmp	r3, r0
 800b840:	4637      	mov	r7, r6
 800b842:	dc04      	bgt.n	800b84e <__swbuf_r+0x3a>
 800b844:	4621      	mov	r1, r4
 800b846:	4628      	mov	r0, r5
 800b848:	f7ff f99e 	bl	800ab88 <_fflush_r>
 800b84c:	b9e0      	cbnz	r0, 800b888 <__swbuf_r+0x74>
 800b84e:	68a3      	ldr	r3, [r4, #8]
 800b850:	3b01      	subs	r3, #1
 800b852:	60a3      	str	r3, [r4, #8]
 800b854:	6823      	ldr	r3, [r4, #0]
 800b856:	1c5a      	adds	r2, r3, #1
 800b858:	6022      	str	r2, [r4, #0]
 800b85a:	701e      	strb	r6, [r3, #0]
 800b85c:	6962      	ldr	r2, [r4, #20]
 800b85e:	1c43      	adds	r3, r0, #1
 800b860:	429a      	cmp	r2, r3
 800b862:	d004      	beq.n	800b86e <__swbuf_r+0x5a>
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	07db      	lsls	r3, r3, #31
 800b868:	d506      	bpl.n	800b878 <__swbuf_r+0x64>
 800b86a:	2e0a      	cmp	r6, #10
 800b86c:	d104      	bne.n	800b878 <__swbuf_r+0x64>
 800b86e:	4621      	mov	r1, r4
 800b870:	4628      	mov	r0, r5
 800b872:	f7ff f989 	bl	800ab88 <_fflush_r>
 800b876:	b938      	cbnz	r0, 800b888 <__swbuf_r+0x74>
 800b878:	4638      	mov	r0, r7
 800b87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b87c:	4621      	mov	r1, r4
 800b87e:	4628      	mov	r0, r5
 800b880:	f000 f806 	bl	800b890 <__swsetup_r>
 800b884:	2800      	cmp	r0, #0
 800b886:	d0d5      	beq.n	800b834 <__swbuf_r+0x20>
 800b888:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b88c:	e7f4      	b.n	800b878 <__swbuf_r+0x64>
	...

0800b890 <__swsetup_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4b2a      	ldr	r3, [pc, #168]	; (800b93c <__swsetup_r+0xac>)
 800b894:	4605      	mov	r5, r0
 800b896:	6818      	ldr	r0, [r3, #0]
 800b898:	460c      	mov	r4, r1
 800b89a:	b118      	cbz	r0, 800b8a4 <__swsetup_r+0x14>
 800b89c:	6a03      	ldr	r3, [r0, #32]
 800b89e:	b90b      	cbnz	r3, 800b8a4 <__swsetup_r+0x14>
 800b8a0:	f7fe f94c 	bl	8009b3c <__sinit>
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8aa:	0718      	lsls	r0, r3, #28
 800b8ac:	d422      	bmi.n	800b8f4 <__swsetup_r+0x64>
 800b8ae:	06d9      	lsls	r1, r3, #27
 800b8b0:	d407      	bmi.n	800b8c2 <__swsetup_r+0x32>
 800b8b2:	2309      	movs	r3, #9
 800b8b4:	602b      	str	r3, [r5, #0]
 800b8b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8ba:	81a3      	strh	r3, [r4, #12]
 800b8bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8c0:	e034      	b.n	800b92c <__swsetup_r+0x9c>
 800b8c2:	0758      	lsls	r0, r3, #29
 800b8c4:	d512      	bpl.n	800b8ec <__swsetup_r+0x5c>
 800b8c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8c8:	b141      	cbz	r1, 800b8dc <__swsetup_r+0x4c>
 800b8ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8ce:	4299      	cmp	r1, r3
 800b8d0:	d002      	beq.n	800b8d8 <__swsetup_r+0x48>
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	f7ff fdd6 	bl	800b484 <_free_r>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	6363      	str	r3, [r4, #52]	; 0x34
 800b8dc:	89a3      	ldrh	r3, [r4, #12]
 800b8de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8e2:	81a3      	strh	r3, [r4, #12]
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	6063      	str	r3, [r4, #4]
 800b8e8:	6923      	ldr	r3, [r4, #16]
 800b8ea:	6023      	str	r3, [r4, #0]
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	f043 0308 	orr.w	r3, r3, #8
 800b8f2:	81a3      	strh	r3, [r4, #12]
 800b8f4:	6923      	ldr	r3, [r4, #16]
 800b8f6:	b94b      	cbnz	r3, 800b90c <__swsetup_r+0x7c>
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b8fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b902:	d003      	beq.n	800b90c <__swsetup_r+0x7c>
 800b904:	4621      	mov	r1, r4
 800b906:	4628      	mov	r0, r5
 800b908:	f000 f840 	bl	800b98c <__smakebuf_r>
 800b90c:	89a0      	ldrh	r0, [r4, #12]
 800b90e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b912:	f010 0301 	ands.w	r3, r0, #1
 800b916:	d00a      	beq.n	800b92e <__swsetup_r+0x9e>
 800b918:	2300      	movs	r3, #0
 800b91a:	60a3      	str	r3, [r4, #8]
 800b91c:	6963      	ldr	r3, [r4, #20]
 800b91e:	425b      	negs	r3, r3
 800b920:	61a3      	str	r3, [r4, #24]
 800b922:	6923      	ldr	r3, [r4, #16]
 800b924:	b943      	cbnz	r3, 800b938 <__swsetup_r+0xa8>
 800b926:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b92a:	d1c4      	bne.n	800b8b6 <__swsetup_r+0x26>
 800b92c:	bd38      	pop	{r3, r4, r5, pc}
 800b92e:	0781      	lsls	r1, r0, #30
 800b930:	bf58      	it	pl
 800b932:	6963      	ldrpl	r3, [r4, #20]
 800b934:	60a3      	str	r3, [r4, #8]
 800b936:	e7f4      	b.n	800b922 <__swsetup_r+0x92>
 800b938:	2000      	movs	r0, #0
 800b93a:	e7f7      	b.n	800b92c <__swsetup_r+0x9c>
 800b93c:	2000006c 	.word	0x2000006c

0800b940 <__swhatbuf_r>:
 800b940:	b570      	push	{r4, r5, r6, lr}
 800b942:	460c      	mov	r4, r1
 800b944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b948:	2900      	cmp	r1, #0
 800b94a:	b096      	sub	sp, #88	; 0x58
 800b94c:	4615      	mov	r5, r2
 800b94e:	461e      	mov	r6, r3
 800b950:	da0d      	bge.n	800b96e <__swhatbuf_r+0x2e>
 800b952:	89a3      	ldrh	r3, [r4, #12]
 800b954:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b958:	f04f 0100 	mov.w	r1, #0
 800b95c:	bf0c      	ite	eq
 800b95e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b962:	2340      	movne	r3, #64	; 0x40
 800b964:	2000      	movs	r0, #0
 800b966:	6031      	str	r1, [r6, #0]
 800b968:	602b      	str	r3, [r5, #0]
 800b96a:	b016      	add	sp, #88	; 0x58
 800b96c:	bd70      	pop	{r4, r5, r6, pc}
 800b96e:	466a      	mov	r2, sp
 800b970:	f000 f848 	bl	800ba04 <_fstat_r>
 800b974:	2800      	cmp	r0, #0
 800b976:	dbec      	blt.n	800b952 <__swhatbuf_r+0x12>
 800b978:	9901      	ldr	r1, [sp, #4]
 800b97a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b97e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b982:	4259      	negs	r1, r3
 800b984:	4159      	adcs	r1, r3
 800b986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b98a:	e7eb      	b.n	800b964 <__swhatbuf_r+0x24>

0800b98c <__smakebuf_r>:
 800b98c:	898b      	ldrh	r3, [r1, #12]
 800b98e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b990:	079d      	lsls	r5, r3, #30
 800b992:	4606      	mov	r6, r0
 800b994:	460c      	mov	r4, r1
 800b996:	d507      	bpl.n	800b9a8 <__smakebuf_r+0x1c>
 800b998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b99c:	6023      	str	r3, [r4, #0]
 800b99e:	6123      	str	r3, [r4, #16]
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	6163      	str	r3, [r4, #20]
 800b9a4:	b002      	add	sp, #8
 800b9a6:	bd70      	pop	{r4, r5, r6, pc}
 800b9a8:	ab01      	add	r3, sp, #4
 800b9aa:	466a      	mov	r2, sp
 800b9ac:	f7ff ffc8 	bl	800b940 <__swhatbuf_r>
 800b9b0:	9900      	ldr	r1, [sp, #0]
 800b9b2:	4605      	mov	r5, r0
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f7fe ffe1 	bl	800a97c <_malloc_r>
 800b9ba:	b948      	cbnz	r0, 800b9d0 <__smakebuf_r+0x44>
 800b9bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9c0:	059a      	lsls	r2, r3, #22
 800b9c2:	d4ef      	bmi.n	800b9a4 <__smakebuf_r+0x18>
 800b9c4:	f023 0303 	bic.w	r3, r3, #3
 800b9c8:	f043 0302 	orr.w	r3, r3, #2
 800b9cc:	81a3      	strh	r3, [r4, #12]
 800b9ce:	e7e3      	b.n	800b998 <__smakebuf_r+0xc>
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	6020      	str	r0, [r4, #0]
 800b9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d8:	81a3      	strh	r3, [r4, #12]
 800b9da:	9b00      	ldr	r3, [sp, #0]
 800b9dc:	6163      	str	r3, [r4, #20]
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	6120      	str	r0, [r4, #16]
 800b9e2:	b15b      	cbz	r3, 800b9fc <__smakebuf_r+0x70>
 800b9e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	f000 f81d 	bl	800ba28 <_isatty_r>
 800b9ee:	b128      	cbz	r0, 800b9fc <__smakebuf_r+0x70>
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	f023 0303 	bic.w	r3, r3, #3
 800b9f6:	f043 0301 	orr.w	r3, r3, #1
 800b9fa:	81a3      	strh	r3, [r4, #12]
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	431d      	orrs	r5, r3
 800ba00:	81a5      	strh	r5, [r4, #12]
 800ba02:	e7cf      	b.n	800b9a4 <__smakebuf_r+0x18>

0800ba04 <_fstat_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4d07      	ldr	r5, [pc, #28]	; (800ba24 <_fstat_r+0x20>)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	4611      	mov	r1, r2
 800ba10:	602b      	str	r3, [r5, #0]
 800ba12:	f7f7 fb4c 	bl	80030ae <_fstat>
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	d102      	bne.n	800ba20 <_fstat_r+0x1c>
 800ba1a:	682b      	ldr	r3, [r5, #0]
 800ba1c:	b103      	cbz	r3, 800ba20 <_fstat_r+0x1c>
 800ba1e:	6023      	str	r3, [r4, #0]
 800ba20:	bd38      	pop	{r3, r4, r5, pc}
 800ba22:	bf00      	nop
 800ba24:	200052ac 	.word	0x200052ac

0800ba28 <_isatty_r>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	4d06      	ldr	r5, [pc, #24]	; (800ba44 <_isatty_r+0x1c>)
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	4604      	mov	r4, r0
 800ba30:	4608      	mov	r0, r1
 800ba32:	602b      	str	r3, [r5, #0]
 800ba34:	f7f7 fb4b 	bl	80030ce <_isatty>
 800ba38:	1c43      	adds	r3, r0, #1
 800ba3a:	d102      	bne.n	800ba42 <_isatty_r+0x1a>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	b103      	cbz	r3, 800ba42 <_isatty_r+0x1a>
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	bd38      	pop	{r3, r4, r5, pc}
 800ba44:	200052ac 	.word	0x200052ac

0800ba48 <_raise_r>:
 800ba48:	291f      	cmp	r1, #31
 800ba4a:	b538      	push	{r3, r4, r5, lr}
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	460d      	mov	r5, r1
 800ba50:	d904      	bls.n	800ba5c <_raise_r+0x14>
 800ba52:	2316      	movs	r3, #22
 800ba54:	6003      	str	r3, [r0, #0]
 800ba56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba5a:	bd38      	pop	{r3, r4, r5, pc}
 800ba5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ba5e:	b112      	cbz	r2, 800ba66 <_raise_r+0x1e>
 800ba60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba64:	b94b      	cbnz	r3, 800ba7a <_raise_r+0x32>
 800ba66:	4620      	mov	r0, r4
 800ba68:	f000 f830 	bl	800bacc <_getpid_r>
 800ba6c:	462a      	mov	r2, r5
 800ba6e:	4601      	mov	r1, r0
 800ba70:	4620      	mov	r0, r4
 800ba72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba76:	f000 b817 	b.w	800baa8 <_kill_r>
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d00a      	beq.n	800ba94 <_raise_r+0x4c>
 800ba7e:	1c59      	adds	r1, r3, #1
 800ba80:	d103      	bne.n	800ba8a <_raise_r+0x42>
 800ba82:	2316      	movs	r3, #22
 800ba84:	6003      	str	r3, [r0, #0]
 800ba86:	2001      	movs	r0, #1
 800ba88:	e7e7      	b.n	800ba5a <_raise_r+0x12>
 800ba8a:	2400      	movs	r4, #0
 800ba8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba90:	4628      	mov	r0, r5
 800ba92:	4798      	blx	r3
 800ba94:	2000      	movs	r0, #0
 800ba96:	e7e0      	b.n	800ba5a <_raise_r+0x12>

0800ba98 <raise>:
 800ba98:	4b02      	ldr	r3, [pc, #8]	; (800baa4 <raise+0xc>)
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	6818      	ldr	r0, [r3, #0]
 800ba9e:	f7ff bfd3 	b.w	800ba48 <_raise_r>
 800baa2:	bf00      	nop
 800baa4:	2000006c 	.word	0x2000006c

0800baa8 <_kill_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	4d07      	ldr	r5, [pc, #28]	; (800bac8 <_kill_r+0x20>)
 800baac:	2300      	movs	r3, #0
 800baae:	4604      	mov	r4, r0
 800bab0:	4608      	mov	r0, r1
 800bab2:	4611      	mov	r1, r2
 800bab4:	602b      	str	r3, [r5, #0]
 800bab6:	f7f7 fa9b 	bl	8002ff0 <_kill>
 800baba:	1c43      	adds	r3, r0, #1
 800babc:	d102      	bne.n	800bac4 <_kill_r+0x1c>
 800babe:	682b      	ldr	r3, [r5, #0]
 800bac0:	b103      	cbz	r3, 800bac4 <_kill_r+0x1c>
 800bac2:	6023      	str	r3, [r4, #0]
 800bac4:	bd38      	pop	{r3, r4, r5, pc}
 800bac6:	bf00      	nop
 800bac8:	200052ac 	.word	0x200052ac

0800bacc <_getpid_r>:
 800bacc:	f7f7 ba88 	b.w	8002fe0 <_getpid>

0800bad0 <_init>:
 800bad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad2:	bf00      	nop
 800bad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bad6:	bc08      	pop	{r3}
 800bad8:	469e      	mov	lr, r3
 800bada:	4770      	bx	lr

0800badc <_fini>:
 800badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bade:	bf00      	nop
 800bae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bae2:	bc08      	pop	{r3}
 800bae4:	469e      	mov	lr, r3
 800bae6:	4770      	bx	lr
