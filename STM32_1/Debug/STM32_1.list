
STM32_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001100  0800f960  0800f960  0001f960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a60  08010a60  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08010a60  08010a60  00020a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a68  08010a68  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a68  08010a68  00020a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a6c  08010a6c  00020a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08010a70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e0  2**0
                  CONTENTS
 10 .bss          000051bc  200001e0  200001e0  000301e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000539c  2000539c  000301e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e008  00000000  00000000  00030253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000043bb  00000000  00000000  0004e25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b18  00000000  00000000  00052618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001532  00000000  00000000  00054130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025886  00000000  00000000  00055662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001eff7  00000000  00000000  0007aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000db771  00000000  00000000  00099edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000085ec  00000000  00000000  00175650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0017dc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f948 	.word	0x0800f948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800f948 	.word	0x0800f948

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <comm_init>:

void uart_ack(uint8_t id);

/* Functions */

void comm_init(UART_HandleTypeDef* uart, Instruction* curInstObjRef, CompleteError* cpltErrObjRef) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
	instructionId = 0;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <comm_init+0x80>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
	ack_tx = 0;
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <comm_init+0x84>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]

	huart3Ptr = uart;
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <comm_init+0x88>)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6013      	str	r3, [r2, #0]
	curInstPtr = curInstObjRef;
 8000f62:	4a1b      	ldr	r2, [pc, #108]	; (8000fd0 <comm_init+0x8c>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	6013      	str	r3, [r2, #0]
	cpltErrPtr = cpltErrObjRef;
 8000f68:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <comm_init+0x90>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]

	curInstPtr->id = 0;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <comm_init+0x8c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
	curInstPtr->type = INST_TYPE_UNDEFINED;
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <comm_init+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	705a      	strb	r2, [r3, #1]
	curInstPtr->val = 0;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <comm_init+0x8c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2200      	movs	r2, #0
 8000f84:	805a      	strh	r2, [r3, #2]

	cpltErrPtr->id = 0;
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <comm_init+0x90>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
	cpltErrPtr->type = CPLTERR_TYPE_UNDEFINED;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <comm_init+0x90>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2202      	movs	r2, #2
 8000f94:	705a      	strb	r2, [r3, #1]
	cpltErrPtr->pos_x = 0;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <comm_init+0x90>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	805a      	strh	r2, [r3, #2]
	cpltErrPtr->pos_y = 0;
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <comm_init+0x90>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	809a      	strh	r2, [r3, #4]
	cpltErrPtr->finished = 1;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <comm_init+0x90>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2201      	movs	r2, #1
 8000fac:	719a      	strb	r2, [r3, #6]

	HAL_UART_Receive_IT(huart3Ptr, (uint8_t*) uartbuf, 4);
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <comm_init+0x88>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <comm_init+0x94>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f006 ff29 	bl	8007e0e <HAL_UART_Receive_IT>

	return;
 8000fbc:	bf00      	nop
}
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200001fc 	.word	0x200001fc
 8000fc8:	200001fd 	.word	0x200001fd
 8000fcc:	20000204 	.word	0x20000204
 8000fd0:	20000208 	.word	0x20000208
 8000fd4:	2000020c 	.word	0x2000020c
 8000fd8:	20000200 	.word	0x20000200

08000fdc <uart_send>:

HAL_StatusTypeDef uart_send() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
	if (cpltErrPtr->id == 0) {
 8000fe2:	4b45      	ldr	r3, [pc, #276]	; (80010f8 <uart_send+0x11c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <uart_send+0x14>
		return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e07e      	b.n	80010ee <uart_send+0x112>
	}
	if (ack_tx != cpltErrPtr->id - 1) {	// RPI is not expecting CompleteError with this id
 8000ff0:	4b42      	ldr	r3, [pc, #264]	; (80010fc <uart_send+0x120>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <uart_send+0x11c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d001      	beq.n	8001006 <uart_send+0x2a>
		return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e073      	b.n	80010ee <uart_send+0x112>
	}
	uartbuf[0] = (((0x01 << 1) | (cpltErrPtr->type & 0x01)) << 6) | (uint8_t)((cpltErrPtr->pos_x >> 5) & 0x003F);
 8001006:	4b3c      	ldr	r3, [pc, #240]	; (80010f8 <uart_send+0x11c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	785b      	ldrb	r3, [r3, #1]
 800100c:	019b      	lsls	r3, r3, #6
 800100e:	b25b      	sxtb	r3, r3
 8001010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001014:	b25b      	sxtb	r3, r3
 8001016:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800101a:	b25a      	sxtb	r2, r3
 800101c:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <uart_send+0x11c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001024:	115b      	asrs	r3, r3, #5
 8001026:	b21b      	sxth	r3, r3
 8001028:	b25b      	sxtb	r3, r3
 800102a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800102e:	b25b      	sxtb	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b25b      	sxtb	r3, r3
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b32      	ldr	r3, [pc, #200]	; (8001100 <uart_send+0x124>)
 8001038:	701a      	strb	r2, [r3, #0]
	uartbuf[1] = (uint8_t)((cpltErrPtr->pos_x & 0x1F) << 3) | (uint8_t)((cpltErrPtr->pos_y >> 8) & 0x0007);
 800103a:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <uart_send+0x11c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	b25a      	sxtb	r2, r3
 800104a:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <uart_send+0x11c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001052:	121b      	asrs	r3, r3, #8
 8001054:	b21b      	sxth	r3, r3
 8001056:	b25b      	sxtb	r3, r3
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	b25b      	sxtb	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b25b      	sxtb	r3, r3
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <uart_send+0x124>)
 8001066:	705a      	strb	r2, [r3, #1]
	uartbuf[2] = (uint8_t)(cpltErrPtr->pos_y & 0xFF);
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <uart_send+0x11c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <uart_send+0x124>)
 8001074:	709a      	strb	r2, [r3, #2]
	uartbuf[3] = cpltErrPtr->id;
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <uart_send+0x11c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	781a      	ldrb	r2, [r3, #0]
 800107c:	4b20      	ldr	r3, [pc, #128]	; (8001100 <uart_send+0x124>)
 800107e:	70da      	strb	r2, [r3, #3]
	while (ack_tx < cpltErrPtr->id) {
 8001080:	e02d      	b.n	80010de <uart_send+0x102>
		while (HAL_UART_Transmit(huart3Ptr, (uint8_t*)uartbuf, 4, UART_ACK_MAX_DELAY) != HAL_OK) {
			osDelay(500);
 8001082:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001086:	f007 ff6b 	bl	8008f60 <osDelay>
		while (HAL_UART_Transmit(huart3Ptr, (uint8_t*)uartbuf, 4, UART_ACK_MAX_DELAY) != HAL_OK) {
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <uart_send+0x128>)
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001092:	2204      	movs	r2, #4
 8001094:	491a      	ldr	r1, [pc, #104]	; (8001100 <uart_send+0x124>)
 8001096:	f006 fe28 	bl	8007cea <HAL_UART_Transmit>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f0      	bne.n	8001082 <uart_send+0xa6>
		}
		// Waiting for ACK
		for (int i = 0; i < 10; i++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	e018      	b.n	80010d8 <uart_send+0xfc>
			if (ack_tx < cpltErrPtr->id) {
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <uart_send+0x11c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <uart_send+0x120>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d904      	bls.n	80010be <uart_send+0xe2>
				osDelay(UART_ACK_MAX_DELAY / 10);
 80010b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b8:	f007 ff52 	bl	8008f60 <osDelay>
 80010bc:	e009      	b.n	80010d2 <uart_send+0xf6>
			}
			else if (ack_tx == cpltErrPtr->id) {	// RPI received cpltErr
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <uart_send+0x11c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <uart_send+0x120>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d100      	bne.n	80010ce <uart_send+0xf2>
				break;
 80010cc:	e007      	b.n	80010de <uart_send+0x102>
			}
			else {
				return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00d      	b.n	80010ee <uart_send+0x112>
		for (int i = 0; i < 10; i++) {
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3301      	adds	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b09      	cmp	r3, #9
 80010dc:	dde3      	ble.n	80010a6 <uart_send+0xca>
	while (ack_tx < cpltErrPtr->id) {
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <uart_send+0x11c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <uart_send+0x120>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8ce      	bhi.n	800108a <uart_send+0xae>
			}
		}
	}
	return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000020c 	.word	0x2000020c
 80010fc:	200001fd 	.word	0x200001fd
 8001100:	20000200 	.word	0x20000200
 8001104:	20000204 	.word	0x20000204

08001108 <uart_ack>:

void uart_ack(uint8_t id) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	uartbuf[0] = 0x41;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <uart_ack+0x4c>)
 8001114:	2241      	movs	r2, #65	; 0x41
 8001116:	701a      	strb	r2, [r3, #0]
	uartbuf[1] = 0x43;
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <uart_ack+0x4c>)
 800111a:	2243      	movs	r2, #67	; 0x43
 800111c:	705a      	strb	r2, [r3, #1]
	uartbuf[2] = 0x4B;
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <uart_ack+0x4c>)
 8001120:	224b      	movs	r2, #75	; 0x4b
 8001122:	709a      	strb	r2, [r3, #2]
	uartbuf[3] = id;
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <uart_ack+0x4c>)
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	70d3      	strb	r3, [r2, #3]
	while (HAL_UART_Transmit(huart3Ptr, (uint8_t*)uartbuf, 4, UART_ACK_MAX_DELAY) != HAL_OK) {
 800112a:	e003      	b.n	8001134 <uart_ack+0x2c>
		osDelay(500);
 800112c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001130:	f007 ff16 	bl	8008f60 <osDelay>
	while (HAL_UART_Transmit(huart3Ptr, (uint8_t*)uartbuf, 4, UART_ACK_MAX_DELAY) != HAL_OK) {
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <uart_ack+0x50>)
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	f241 3388 	movw	r3, #5000	; 0x1388
 800113c:	2204      	movs	r2, #4
 800113e:	4905      	ldr	r1, [pc, #20]	; (8001154 <uart_ack+0x4c>)
 8001140:	f006 fdd3 	bl	8007cea <HAL_UART_Transmit>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <uart_ack+0x24>
	}
	return;
 800114a:	bf00      	nop
}
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000200 	.word	0x20000200
 8001158:	20000204 	.word	0x20000204

0800115c <uart_receive>:

HAL_StatusTypeDef uart_receive() {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	uint8_t id = uartbuf[3];
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <uart_receive+0x8c>)
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	71fb      	strb	r3, [r7, #7]
	if (uartbuf[0] == 0x41) {	// ACK from RPI
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <uart_receive+0x8c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b41      	cmp	r3, #65	; 0x41
 800116e:	d104      	bne.n	800117a <uart_receive+0x1e>
		ack_tx = id;
 8001170:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <uart_receive+0x90>)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	7013      	strb	r3, [r2, #0]
		return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e032      	b.n	80011e0 <uart_receive+0x84>
	}
	if (id == instructionId + 1) {		// Received instruction is correct in order
 800117a:	79fa      	ldrb	r2, [r7, #7]
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <uart_receive+0x94>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	429a      	cmp	r2, r3
 8001184:	d126      	bne.n	80011d4 <uart_receive+0x78>
		curInstPtr->id = id;
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <uart_receive+0x98>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	701a      	strb	r2, [r3, #0]
		curInstPtr->type = (uartbuf[0] >> 6) & 0x01;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <uart_receive+0x8c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	099b      	lsrs	r3, r3, #6
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <uart_receive+0x98>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f002 0201 	and.w	r2, r2, #1
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	705a      	strb	r2, [r3, #1]
		curInstPtr->val = ((int16_t)uartbuf[2] << 8) | uartbuf[1];
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <uart_receive+0x8c>)
 80011a4:	789b      	ldrb	r3, [r3, #2]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b219      	sxth	r1, r3
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <uart_receive+0x8c>)
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <uart_receive+0x98>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	b212      	sxth	r2, r2
 80011b8:	805a      	strh	r2, [r3, #2]
		instructionId++;
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <uart_receive+0x94>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <uart_receive+0x94>)
 80011c4:	701a      	strb	r2, [r3, #0]
		uart_ack(instructionId);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <uart_receive+0x94>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff9c 	bl	8001108 <uart_ack>
		return HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	e005      	b.n	80011e0 <uart_receive+0x84>
	}
	uart_ack(instructionId);
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <uart_receive+0x94>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff95 	bl	8001108 <uart_ack>
	return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000200 	.word	0x20000200
 80011ec:	200001fd 	.word	0x200001fd
 80011f0:	200001fc 	.word	0x200001fc
 80011f4:	20000208 	.word	0x20000208

080011f8 <newCpltErr>:

uint8_t getCurInstId() {
	return instructionId;
}

uint8_t newCpltErr(uint8_t id) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	instructionId = 1;		// For testing only, delete
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <newCpltErr+0x64>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
	if ((id == instructionId) && (ack_tx == id - 1)) {
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <newCpltErr+0x64>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	429a      	cmp	r2, r3
 8001210:	d11c      	bne.n	800124c <newCpltErr+0x54>
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <newCpltErr+0x68>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	3b01      	subs	r3, #1
 800121c:	429a      	cmp	r2, r3
 800121e:	d115      	bne.n	800124c <newCpltErr+0x54>
		cpltErrPtr->id = id;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <newCpltErr+0x6c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	79fa      	ldrb	r2, [r7, #7]
 8001226:	701a      	strb	r2, [r3, #0]
		cpltErrPtr->type = CPLTERR_TYPE_UNDEFINED;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <newCpltErr+0x6c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2202      	movs	r2, #2
 800122e:	705a      	strb	r2, [r3, #1]
		cpltErrPtr->pos_x = 0;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <newCpltErr+0x6c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2200      	movs	r2, #0
 8001236:	805a      	strh	r2, [r3, #2]
		cpltErrPtr->pos_y = 0;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <newCpltErr+0x6c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2200      	movs	r2, #0
 800123e:	809a      	strh	r2, [r3, #4]
		cpltErrPtr->finished = 0;
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <newCpltErr+0x6c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2200      	movs	r2, #0
 8001246:	719a      	strb	r2, [r3, #6]
		return 1;
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <newCpltErr+0x56>
	}
	return 0;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200001fc 	.word	0x200001fc
 8001260:	200001fd 	.word	0x200001fd
 8001264:	2000020c 	.word	0x2000020c

08001268 <imu_init>:

/*+++++++++++++++++++++++++++++++++++*/

/*----------------------------------------------------------------*/

uint8_t imu_init(I2C_HandleTypeDef* hi2c_ptr) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	hi2c1_ptr = hi2c_ptr;
 8001270:	4a4d      	ldr	r2, [pc, #308]	; (80013a8 <imu_init+0x140>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]

	// Reset chip
	if (!write_one_byte(0, B0_PWR_MGMT_1, 0x80 | 0x41)) return 1;
 8001276:	22c1      	movs	r2, #193	; 0xc1
 8001278:	2106      	movs	r1, #6
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f8de 	bl	800143c <write_one_byte>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <imu_init+0x22>
 8001286:	2301      	movs	r3, #1
 8001288:	e089      	b.n	800139e <imu_init+0x136>

	cur_bank = get_cur_bank();
 800128a:	f000 f939 	bl	8001500 <get_cur_bank>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b46      	ldr	r3, [pc, #280]	; (80013ac <imu_init+0x144>)
 8001294:	701a      	strb	r2, [r3, #0]

	osDelay(100);
 8001296:	2064      	movs	r0, #100	; 0x64
 8001298:	f007 fe62 	bl	8008f60 <osDelay>
	uint8_t who_am_i = read_one_byte(0, 0);
 800129c:	2100      	movs	r1, #0
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 f894 	bl	80013cc <read_one_byte>
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]
	if (who_am_i != 0xEA) { 	// read WHO_AM_I register, should receive 0xEA
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	2bea      	cmp	r3, #234	; 0xea
 80012ac:	d001      	beq.n	80012b2 <imu_init+0x4a>
		return 2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	e075      	b.n	800139e <imu_init+0x136>
	}

	// Wake up chip
	if (!write_one_byte(0, B0_PWR_MGMT_1, ~0x40 & 0x41)) return 3;
 80012b2:	2201      	movs	r2, #1
 80012b4:	2106      	movs	r1, #6
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 f8c0 	bl	800143c <write_one_byte>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <imu_init+0x5e>
 80012c2:	2303      	movs	r3, #3
 80012c4:	e06b      	b.n	800139e <imu_init+0x136>

	// Enables ODR start-time alignment when any of the following registers is written: GYRO_SMPLRT_DIV,
	// ACCEL_SMPLRT_DIV_1, ACCEL_SMPLRT_DIV_2, I2C_MST_ODR_CONFIG.
	if (!write_one_byte(2, B2_ODR_ALIGN_EN, 0x01)) return 4;
 80012c6:	2201      	movs	r2, #1
 80012c8:	2109      	movs	r1, #9
 80012ca:	2002      	movs	r0, #2
 80012cc:	f000 f8b6 	bl	800143c <write_one_byte>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <imu_init+0x72>
 80012d6:	2304      	movs	r3, #4
 80012d8:	e061      	b.n	800139e <imu_init+0x136>

	// Set accel low pass filter
	if (!write_one_byte(2, B2_ACCEL_CONFIG, (ACCEL_DLPFCFG_val << 3) | ACCEL_FCHOICE_val)) return 5;
 80012da:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <imu_init+0x148>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	b25a      	sxtb	r2, r3
 80012e2:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <imu_init+0x14c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	2114      	movs	r1, #20
 80012f2:	2002      	movs	r0, #2
 80012f4:	f000 f8a2 	bl	800143c <write_one_byte>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <imu_init+0x9a>
 80012fe:	2305      	movs	r3, #5
 8001300:	e04d      	b.n	800139e <imu_init+0x136>

	// Set gyro low pass filter and scale
	if (!write_one_byte(2, B2_GYRO_CONFIG_1, (((GYRO_DLPFCFG_val << 2) | GYRO_FS_SEL_val) << 1) | GYRO_FCHOICE_val)) return 6;
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <imu_init+0x150>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4a2c      	ldr	r2, [pc, #176]	; (80013bc <imu_init+0x154>)
 800130a:	7812      	ldrb	r2, [r2, #0]
 800130c:	4313      	orrs	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	b25a      	sxtb	r2, r3
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <imu_init+0x158>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b25b      	sxtb	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	2101      	movs	r1, #1
 8001322:	2002      	movs	r0, #2
 8001324:	f000 f88a 	bl	800143c <write_one_byte>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <imu_init+0xca>
 800132e:	2306      	movs	r3, #6
 8001330:	e035      	b.n	800139e <imu_init+0x136>

	// Set accel sample rate divider
	if (ACCEL_SMPLRT_DIV_val > 0x0FFF) ACCEL_SMPLRT_DIV_val = 0x0FFF;
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <imu_init+0x15c>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800133a:	d303      	bcc.n	8001344 <imu_init+0xdc>
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <imu_init+0x15c>)
 800133e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001342:	801a      	strh	r2, [r3, #0]
	if (!write_one_byte(2, B2_ACCEL_SMPLRT_DIV_1, (uint8_t)(ACCEL_SMPLRT_DIV_val >> 8))) return 7;
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <imu_init+0x15c>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	b29b      	uxth	r3, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	2110      	movs	r1, #16
 8001352:	2002      	movs	r0, #2
 8001354:	f000 f872 	bl	800143c <write_one_byte>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <imu_init+0xfa>
 800135e:	2307      	movs	r3, #7
 8001360:	e01d      	b.n	800139e <imu_init+0x136>
	if (!write_one_byte(2, B2_ACCEL_SMPLRT_DIV_2, (uint8_t)(ACCEL_SMPLRT_DIV_val & 0x00FF))) return 8;
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <imu_init+0x15c>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	2111      	movs	r1, #17
 800136c:	2002      	movs	r0, #2
 800136e:	f000 f865 	bl	800143c <write_one_byte>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <imu_init+0x114>
 8001378:	2308      	movs	r3, #8
 800137a:	e010      	b.n	800139e <imu_init+0x136>

	// Set gyro sample rate divider
	if (!write_one_byte(2, B2_GYRO_SMPLRT_DIV, GYRO_SMPLRT_DIV_val)) return 9;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <imu_init+0x160>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	2100      	movs	r1, #0
 8001384:	2002      	movs	r0, #2
 8001386:	f000 f859 	bl	800143c <write_one_byte>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <imu_init+0x12c>
 8001390:	2309      	movs	r3, #9
 8001392:	e004      	b.n	800139e <imu_init+0x136>

	// Caliberate accelerometer (eliminate bias)
	accel_caliberate();
 8001394:	f000 f92a 	bl	80015ec <accel_caliberate>

	// Caliberate gyroscope (eliminate bias)
	gyro_caliberate();
 8001398:	f000 fa68 	bl	800186c <gyro_caliberate>

	return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000210 	.word	0x20000210
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000214 	.word	0x20000214
 80013b4:	20000001 	.word	0x20000001
 80013b8:	20000003 	.word	0x20000003
 80013bc:	20000218 	.word	0x20000218
 80013c0:	20000002 	.word	0x20000002
 80013c4:	20000216 	.word	0x20000216
 80013c8:	20000219 	.word	0x20000219

080013cc <read_one_byte>:

uint8_t read_one_byte(uint8_t bank, uint8_t regAddr) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	4603      	mov	r3, r0
 80013d4:	460a      	mov	r2, r1
 80013d6:	71fb      	strb	r3, [r7, #7]
 80013d8:	4613      	mov	r3, r2
 80013da:	71bb      	strb	r3, [r7, #6]

	if (!select_bank(bank)) return 0;
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f85a 	bl	8001498 <select_bank>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <read_one_byte+0x22>
 80013ea:	2300      	movs	r3, #0
 80013ec:	e020      	b.n	8001430 <read_one_byte+0x64>
	uint8_t buf[1];

	uint8_t reg = regAddr;
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	72fb      	strb	r3, [r7, #11]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <read_one_byte+0x6c>)
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	f107 020b 	add.w	r2, r7, #11
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2301      	movs	r3, #1
 8001402:	21d0      	movs	r1, #208	; 0xd0
 8001404:	f003 fbec 	bl	8004be0 <HAL_I2C_Master_Transmit>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10f      	bne.n	800142e <read_one_byte+0x62>
		if (HAL_I2C_Master_Receive(hi2c1_ptr, IMU_I2C_ADDR, buf, 1, HAL_MAX_DELAY) == HAL_OK) {
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <read_one_byte+0x6c>)
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	f107 020c 	add.w	r2, r7, #12
 8001416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	21d0      	movs	r1, #208	; 0xd0
 8001420:	f003 fcdc 	bl	8004ddc <HAL_I2C_Master_Receive>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <read_one_byte+0x62>
			return buf[0];
 800142a:	7b3b      	ldrb	r3, [r7, #12]
 800142c:	e000      	b.n	8001430 <read_one_byte+0x64>
		}
	}
	return 0;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000210 	.word	0x20000210

0800143c <write_one_byte>:

uint8_t write_one_byte(uint8_t bank, uint8_t regAddr, uint8_t data) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af02      	add	r7, sp, #8
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	460b      	mov	r3, r1
 8001448:	71bb      	strb	r3, [r7, #6]
 800144a:	4613      	mov	r3, r2
 800144c:	717b      	strb	r3, [r7, #5]

	if (!select_bank(bank)) return 0;
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f821 	bl	8001498 <select_bank>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <write_one_byte+0x24>
 800145c:	2300      	movs	r3, #0
 800145e:	e014      	b.n	800148a <write_one_byte+0x4e>
	uint8_t buf[2];
	buf[0] = regAddr;
 8001460:	79bb      	ldrb	r3, [r7, #6]
 8001462:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 8001464:	797b      	ldrb	r3, [r7, #5]
 8001466:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, buf, 2, HAL_MAX_DELAY) == HAL_OK) {
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <write_one_byte+0x58>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	f107 020c 	add.w	r2, r7, #12
 8001470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2302      	movs	r3, #2
 8001478:	21d0      	movs	r1, #208	; 0xd0
 800147a:	f003 fbb1 	bl	8004be0 <HAL_I2C_Master_Transmit>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <write_one_byte+0x4c>
		return 1;
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <write_one_byte+0x4e>
	}
	return 0;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000210 	.word	0x20000210

08001498 <select_bank>:

uint8_t select_bank(uint8_t bank) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af02      	add	r7, sp, #8
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]

	if (bank > 3) return 0;
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d901      	bls.n	80014ac <select_bank+0x14>
 80014a8:	2300      	movs	r3, #0
 80014aa:	e020      	b.n	80014ee <select_bank+0x56>
	if (cur_bank == bank) return 1;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <select_bank+0x60>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	79fa      	ldrb	r2, [r7, #7]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d101      	bne.n	80014ba <select_bank+0x22>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e019      	b.n	80014ee <select_bank+0x56>
	uint8_t buf[2];
	buf[0] = REG_BANK_SEL;
 80014ba:	237f      	movs	r3, #127	; 0x7f
 80014bc:	733b      	strb	r3, [r7, #12]
	buf[1] = bank << 4;
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, buf, 2, HAL_MAX_DELAY) == HAL_OK) {
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <select_bank+0x64>)
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	f107 020c 	add.w	r2, r7, #12
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2302      	movs	r3, #2
 80014d6:	21d0      	movs	r1, #208	; 0xd0
 80014d8:	f003 fb82 	bl	8004be0 <HAL_I2C_Master_Transmit>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d104      	bne.n	80014ec <select_bank+0x54>
		cur_bank = bank;
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <select_bank+0x60>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	7013      	strb	r3, [r2, #0]
		return 1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <select_bank+0x56>
	}
	return 0;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000210 	.word	0x20000210

08001500 <get_cur_bank>:

uint8_t get_cur_bank() {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af02      	add	r7, sp, #8
	uint8_t buf[1];

	uint8_t reg = REG_BANK_SEL;
 8001506:	237f      	movs	r3, #127	; 0x7f
 8001508:	70fb      	strb	r3, [r7, #3]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <get_cur_bank+0x58>)
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	1cfa      	adds	r2, r7, #3
 8001510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2301      	movs	r3, #1
 8001518:	21d0      	movs	r1, #208	; 0xd0
 800151a:	f003 fb61 	bl	8004be0 <HAL_I2C_Master_Transmit>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d113      	bne.n	800154c <get_cur_bank+0x4c>
		if (HAL_I2C_Master_Receive(hi2c1_ptr, IMU_I2C_ADDR, buf, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <get_cur_bank+0x58>)
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	1d3a      	adds	r2, r7, #4
 800152a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	21d0      	movs	r1, #208	; 0xd0
 8001534:	f003 fc52 	bl	8004ddc <HAL_I2C_Master_Receive>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d106      	bne.n	800154c <get_cur_bank+0x4c>
			return (buf[0] >> 4) & 0x3;
 800153e:	793b      	ldrb	r3, [r7, #4]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	e000      	b.n	800154e <get_cur_bank+0x4e>
		}
	}
	return 4;
 800154c:	2304      	movs	r3, #4
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000210 	.word	0x20000210

0800155c <read_raw_accel_x>:

int16_t read_raw_accel_x() {
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_ACCEL_XOUT_H) << 8) | read_one_byte(0, B0_ACCEL_XOUT_L));
 8001562:	212d      	movs	r1, #45	; 0x2d
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ff31 	bl	80013cc <read_one_byte>
 800156a:	4603      	mov	r3, r0
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21c      	sxth	r4, r3
 8001570:	212e      	movs	r1, #46	; 0x2e
 8001572:	2000      	movs	r0, #0
 8001574:	f7ff ff2a 	bl	80013cc <read_one_byte>
 8001578:	4603      	mov	r3, r0
 800157a:	b21b      	sxth	r3, r3
 800157c:	4323      	orrs	r3, r4
 800157e:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bd90      	pop	{r4, r7, pc}

0800158c <read_raw_accel_y>:
	int16_t raw = read_raw_accel_x();
	float result = ((float)raw / ACCEL_SENSITIVITY_SCALE) * G;
	return result;
}

int16_t read_raw_accel_y() {
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_ACCEL_YOUT_H) << 8) | read_one_byte(0, B0_ACCEL_YOUT_L));
 8001592:	212f      	movs	r1, #47	; 0x2f
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff ff19 	bl	80013cc <read_one_byte>
 800159a:	4603      	mov	r3, r0
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b21c      	sxth	r4, r3
 80015a0:	2130      	movs	r1, #48	; 0x30
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff ff12 	bl	80013cc <read_one_byte>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	4323      	orrs	r3, r4
 80015ae:	80fb      	strh	r3, [r7, #6]
	return raw;
 80015b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}

080015bc <read_raw_accel_z>:
	int16_t raw = read_raw_accel_y();
	float result = ((float)raw / ACCEL_SENSITIVITY_SCALE) * G;
	return result;
}

int16_t read_raw_accel_z() {
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_ACCEL_ZOUT_H) << 8) | read_one_byte(0, B0_ACCEL_ZOUT_L));
 80015c2:	2131      	movs	r1, #49	; 0x31
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff ff01 	bl	80013cc <read_one_byte>
 80015ca:	4603      	mov	r3, r0
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21c      	sxth	r4, r3
 80015d0:	2132      	movs	r1, #50	; 0x32
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff fefa 	bl	80013cc <read_one_byte>
 80015d8:	4603      	mov	r3, r0
 80015da:	b21b      	sxth	r3, r3
 80015dc:	4323      	orrs	r3, r4
 80015de:	80fb      	strh	r3, [r7, #6]
	return raw;
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd90      	pop	{r4, r7, pc}

080015ec <accel_caliberate>:
}

/*
 * Assumption: Device is initialize on flat surface (ax = ay = 0, az = g)
 */
void accel_caliberate() {
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
	int32_t accel_bias_x = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
	int32_t accel_bias_y = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
	int32_t accel_bias_z = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 100; i++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	e017      	b.n	8001634 <accel_caliberate+0x48>
		accel_bias_x += read_raw_accel_x();
 8001604:	f7ff ffaa 	bl	800155c <read_raw_accel_x>
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	4413      	add	r3, r2
 8001610:	61fb      	str	r3, [r7, #28]
		accel_bias_y += read_raw_accel_y();
 8001612:	f7ff ffbb 	bl	800158c <read_raw_accel_y>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	4413      	add	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
		accel_bias_z += read_raw_accel_z();
 8001620:	f7ff ffcc 	bl	80015bc <read_raw_accel_z>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	4413      	add	r3, r2
 800162c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 100; i++) {
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	3301      	adds	r3, #1
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	2b63      	cmp	r3, #99	; 0x63
 8001638:	dde4      	ble.n	8001604 <accel_caliberate+0x18>
	}
	accel_bias_x /= 100;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	4a57      	ldr	r2, [pc, #348]	; (800179c <accel_caliberate+0x1b0>)
 800163e:	fb82 1203 	smull	r1, r2, r2, r3
 8001642:	1152      	asrs	r2, r2, #5
 8001644:	17db      	asrs	r3, r3, #31
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	61fb      	str	r3, [r7, #28]
	accel_bias_y /= 100;
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4a53      	ldr	r2, [pc, #332]	; (800179c <accel_caliberate+0x1b0>)
 800164e:	fb82 1203 	smull	r1, r2, r2, r3
 8001652:	1152      	asrs	r2, r2, #5
 8001654:	17db      	asrs	r3, r3, #31
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	61bb      	str	r3, [r7, #24]
	accel_bias_z /= 100;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	4a4f      	ldr	r2, [pc, #316]	; (800179c <accel_caliberate+0x1b0>)
 800165e:	fb82 1203 	smull	r1, r2, r2, r3
 8001662:	1152      	asrs	r2, r2, #5
 8001664:	17db      	asrs	r3, r3, #31
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	617b      	str	r3, [r7, #20]
	accel_bias_z -= ACCEL_SENSITIVITY_SCALE;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001670:	617b      	str	r3, [r7, #20]
	// Measured scale: 16384 lsb/g. Offset scale: 0.98 mg/lsb. Convert by offset = - measurement / 16
	accel_bias_x = -accel_bias_x / 16;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	425b      	negs	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	da00      	bge.n	800167c <accel_caliberate+0x90>
 800167a:	330f      	adds	r3, #15
 800167c:	111b      	asrs	r3, r3, #4
 800167e:	61fb      	str	r3, [r7, #28]
	accel_bias_y = -accel_bias_y / 16;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	425b      	negs	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	da00      	bge.n	800168a <accel_caliberate+0x9e>
 8001688:	330f      	adds	r3, #15
 800168a:	111b      	asrs	r3, r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
	accel_bias_z = -accel_bias_z / 16;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	425b      	negs	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	da00      	bge.n	8001698 <accel_caliberate+0xac>
 8001696:	330f      	adds	r3, #15
 8001698:	111b      	asrs	r3, r3, #4
 800169a:	617b      	str	r3, [r7, #20]
	// Get the preloaded offset and add with our custom bias
	int16_t accel_offset_x = (int16_t)(read_one_byte(1, B1_XA_OFFS_H) << 8 | read_one_byte(1, B1_XA_OFFS_L)) >> 1;
 800169c:	2114      	movs	r1, #20
 800169e:	2001      	movs	r0, #1
 80016a0:	f7ff fe94 	bl	80013cc <read_one_byte>
 80016a4:	4603      	mov	r3, r0
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	b21c      	sxth	r4, r3
 80016aa:	2115      	movs	r1, #21
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff fe8d 	bl	80013cc <read_one_byte>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	4323      	orrs	r3, r4
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	105b      	asrs	r3, r3, #1
 80016bc:	81fb      	strh	r3, [r7, #14]
	int16_t accel_offset_y = (int16_t)(read_one_byte(1, B1_YA_OFFS_H) << 8 | read_one_byte(1, B1_YA_OFFS_L)) >> 1;
 80016be:	2117      	movs	r1, #23
 80016c0:	2001      	movs	r0, #1
 80016c2:	f7ff fe83 	bl	80013cc <read_one_byte>
 80016c6:	4603      	mov	r3, r0
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21c      	sxth	r4, r3
 80016cc:	2118      	movs	r1, #24
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff fe7c 	bl	80013cc <read_one_byte>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4323      	orrs	r3, r4
 80016da:	b21b      	sxth	r3, r3
 80016dc:	105b      	asrs	r3, r3, #1
 80016de:	81bb      	strh	r3, [r7, #12]
	int16_t accel_offset_z = (int16_t)(read_one_byte(1, B1_ZA_OFFS_H) << 8 | read_one_byte(1, B1_ZA_OFFS_L)) >> 1;
 80016e0:	211a      	movs	r1, #26
 80016e2:	2001      	movs	r0, #1
 80016e4:	f7ff fe72 	bl	80013cc <read_one_byte>
 80016e8:	4603      	mov	r3, r0
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21c      	sxth	r4, r3
 80016ee:	211b      	movs	r1, #27
 80016f0:	2001      	movs	r0, #1
 80016f2:	f7ff fe6b 	bl	80013cc <read_one_byte>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	4323      	orrs	r3, r4
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	105b      	asrs	r3, r3, #1
 8001700:	817b      	strh	r3, [r7, #10]

	accel_bias_x += accel_offset_x;
 8001702:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	4413      	add	r3, r2
 800170a:	61fb      	str	r3, [r7, #28]
	accel_bias_y += accel_offset_y;
 800170c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4413      	add	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
	accel_bias_z += accel_offset_z;
 8001716:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4413      	add	r3, r2
 800171e:	617b      	str	r3, [r7, #20]

	// Separate accel_bias into 2 part: [14:7] and [6:0]
	uint8_t accel_bias_x_h = (uint8_t)(accel_bias_x >> 7);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	11db      	asrs	r3, r3, #7
 8001724:	727b      	strb	r3, [r7, #9]
	uint8_t accel_bias_x_l = (uint8_t)(accel_bias_x << 1);
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	723b      	strb	r3, [r7, #8]
	uint8_t accel_bias_y_h = (uint8_t)(accel_bias_y >> 7);
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	11db      	asrs	r3, r3, #7
 8001732:	71fb      	strb	r3, [r7, #7]
	uint8_t accel_bias_y_l = (uint8_t)(accel_bias_y << 1);
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	71bb      	strb	r3, [r7, #6]
	uint8_t accel_bias_z_h = (uint8_t)(accel_bias_z >> 7);
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	11db      	asrs	r3, r3, #7
 8001740:	717b      	strb	r3, [r7, #5]
	uint8_t accel_bias_z_l = (uint8_t)(accel_bias_z << 1);
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	713b      	strb	r3, [r7, #4]
	// Write to registers
	write_one_byte(1, B1_XA_OFFS_H, accel_bias_x_h);
 800174a:	7a7b      	ldrb	r3, [r7, #9]
 800174c:	461a      	mov	r2, r3
 800174e:	2114      	movs	r1, #20
 8001750:	2001      	movs	r0, #1
 8001752:	f7ff fe73 	bl	800143c <write_one_byte>
	write_one_byte(1, B1_XA_OFFS_L, accel_bias_x_l);
 8001756:	7a3b      	ldrb	r3, [r7, #8]
 8001758:	461a      	mov	r2, r3
 800175a:	2115      	movs	r1, #21
 800175c:	2001      	movs	r0, #1
 800175e:	f7ff fe6d 	bl	800143c <write_one_byte>
	write_one_byte(1, B1_YA_OFFS_H, accel_bias_y_h);
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	461a      	mov	r2, r3
 8001766:	2117      	movs	r1, #23
 8001768:	2001      	movs	r0, #1
 800176a:	f7ff fe67 	bl	800143c <write_one_byte>
	write_one_byte(1, B1_YA_OFFS_L, accel_bias_y_l);
 800176e:	79bb      	ldrb	r3, [r7, #6]
 8001770:	461a      	mov	r2, r3
 8001772:	2118      	movs	r1, #24
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff fe61 	bl	800143c <write_one_byte>
	write_one_byte(1, B1_ZA_OFFS_H, accel_bias_z_h);
 800177a:	797b      	ldrb	r3, [r7, #5]
 800177c:	461a      	mov	r2, r3
 800177e:	211a      	movs	r1, #26
 8001780:	2001      	movs	r0, #1
 8001782:	f7ff fe5b 	bl	800143c <write_one_byte>
	write_one_byte(1, B1_ZA_OFFS_L, accel_bias_z_l);
 8001786:	793b      	ldrb	r3, [r7, #4]
 8001788:	461a      	mov	r2, r3
 800178a:	211b      	movs	r1, #27
 800178c:	2001      	movs	r0, #1
 800178e:	f7ff fe55 	bl	800143c <write_one_byte>
}
 8001792:	bf00      	nop
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd90      	pop	{r4, r7, pc}
 800179a:	bf00      	nop
 800179c:	51eb851f 	.word	0x51eb851f

080017a0 <read_raw_gyro_x>:

int16_t read_raw_gyro_x() {
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_XOUT_H) << 8) | read_one_byte(0, B0_GYRO_XOUT_L));
 80017a6:	2133      	movs	r1, #51	; 0x33
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff fe0f 	bl	80013cc <read_one_byte>
 80017ae:	4603      	mov	r3, r0
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	b21c      	sxth	r4, r3
 80017b4:	2134      	movs	r1, #52	; 0x34
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff fe08 	bl	80013cc <read_one_byte>
 80017bc:	4603      	mov	r3, r0
 80017be:	b21b      	sxth	r3, r3
 80017c0:	4323      	orrs	r3, r4
 80017c2:	80fb      	strh	r3, [r7, #6]
	return raw;
 80017c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <read_raw_gyro_y>:
	int16_t raw = read_raw_gyro_x();
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
	return result;
}

int16_t read_raw_gyro_y() {
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_YOUT_H) << 8) | read_one_byte(0, B0_GYRO_YOUT_L));
 80017d6:	2135      	movs	r1, #53	; 0x35
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff fdf7 	bl	80013cc <read_one_byte>
 80017de:	4603      	mov	r3, r0
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	b21c      	sxth	r4, r3
 80017e4:	2136      	movs	r1, #54	; 0x36
 80017e6:	2000      	movs	r0, #0
 80017e8:	f7ff fdf0 	bl	80013cc <read_one_byte>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	4323      	orrs	r3, r4
 80017f2:	80fb      	strh	r3, [r7, #6]
	return raw;
 80017f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}

08001800 <read_raw_gyro_z>:
	int16_t raw = read_raw_gyro_y();
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
	return result;
}

int16_t read_raw_gyro_z() {
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_ZOUT_H) << 8) | read_one_byte(0, B0_GYRO_ZOUT_L));
 8001806:	2137      	movs	r1, #55	; 0x37
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff fddf 	bl	80013cc <read_one_byte>
 800180e:	4603      	mov	r3, r0
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	b21c      	sxth	r4, r3
 8001814:	2138      	movs	r1, #56	; 0x38
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fdd8 	bl	80013cc <read_one_byte>
 800181c:	4603      	mov	r3, r0
 800181e:	b21b      	sxth	r3, r3
 8001820:	4323      	orrs	r3, r4
 8001822:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bd90      	pop	{r4, r7, pc}

08001830 <read_gyro_z>:

float read_gyro_z() {
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
	int16_t raw = read_raw_gyro_z();
 8001836:	f7ff ffe3 	bl	8001800 <read_raw_gyro_z>
 800183a:	4603      	mov	r3, r0
 800183c:	80fb      	strh	r3, [r7, #6]
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
 800183e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001868 <read_gyro_z+0x38>
 800184e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001852:	edc7 7a00 	vstr	s15, [r7]
	return result;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	ee07 3a90 	vmov	s15, r3
}
 800185c:	eeb0 0a67 	vmov.f32	s0, s15
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	43030000 	.word	0x43030000

0800186c <gyro_caliberate>:
	gyro->x = read_gyro_x();
	gyro->y = read_gyro_y();
	gyro->z = read_gyro_z();
}

void gyro_caliberate() {
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
	int32_t gyro_bias_x = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
	int32_t gyro_bias_y = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
	int32_t gyro_bias_z = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	e017      	b.n	80018b4 <gyro_caliberate+0x48>
		gyro_bias_x += read_raw_gyro_x();
 8001884:	f7ff ff8c 	bl	80017a0 <read_raw_gyro_x>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	4413      	add	r3, r2
 8001890:	617b      	str	r3, [r7, #20]
		gyro_bias_y += read_raw_gyro_y();
 8001892:	f7ff ff9d 	bl	80017d0 <read_raw_gyro_y>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4413      	add	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
		gyro_bias_z += read_raw_gyro_z();
 80018a0:	f7ff ffae 	bl	8001800 <read_raw_gyro_z>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b63      	cmp	r3, #99	; 0x63
 80018b8:	dde4      	ble.n	8001884 <gyro_caliberate+0x18>
	}
	gyro_bias_x /= 100;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	4a31      	ldr	r2, [pc, #196]	; (8001984 <gyro_caliberate+0x118>)
 80018be:	fb82 1203 	smull	r1, r2, r2, r3
 80018c2:	1152      	asrs	r2, r2, #5
 80018c4:	17db      	asrs	r3, r3, #31
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]
	gyro_bias_y /= 100;
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4a2d      	ldr	r2, [pc, #180]	; (8001984 <gyro_caliberate+0x118>)
 80018ce:	fb82 1203 	smull	r1, r2, r2, r3
 80018d2:	1152      	asrs	r2, r2, #5
 80018d4:	17db      	asrs	r3, r3, #31
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	613b      	str	r3, [r7, #16]
	gyro_bias_z /= 100;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4a29      	ldr	r2, [pc, #164]	; (8001984 <gyro_caliberate+0x118>)
 80018de:	fb82 1203 	smull	r1, r2, r2, r3
 80018e2:	1152      	asrs	r2, r2, #5
 80018e4:	17db      	asrs	r3, r3, #31
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	60fb      	str	r3, [r7, #12]
	// Step size for offset register: 0.0305 dps/LSB; Offset = Measurement / 4;
	gyro_bias_x = -gyro_bias_x / 4;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	425b      	negs	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	da00      	bge.n	80018f4 <gyro_caliberate+0x88>
 80018f2:	3303      	adds	r3, #3
 80018f4:	109b      	asrs	r3, r3, #2
 80018f6:	617b      	str	r3, [r7, #20]
	gyro_bias_y = -gyro_bias_y / 4;
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	425b      	negs	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	da00      	bge.n	8001902 <gyro_caliberate+0x96>
 8001900:	3303      	adds	r3, #3
 8001902:	109b      	asrs	r3, r3, #2
 8001904:	613b      	str	r3, [r7, #16]
	gyro_bias_z = -gyro_bias_z / 4;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	425b      	negs	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	da00      	bge.n	8001910 <gyro_caliberate+0xa4>
 800190e:	3303      	adds	r3, #3
 8001910:	109b      	asrs	r3, r3, #2
 8001912:	60fb      	str	r3, [r7, #12]
	/*gyro_bias_x = -gyro_bias_x * 2;
	gyro_bias_y = -gyro_bias_y * 2;
	gyro_bias_z = -gyro_bias_z * 2;*/
	// Separate gyro_bias into 2 parts: [15:8] and [7:0]
	uint8_t gyro_bias_x_h = (uint8_t)(gyro_bias_x >> 8);
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	121b      	asrs	r3, r3, #8
 8001918:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_bias_x_l = (uint8_t)gyro_bias_x;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	71bb      	strb	r3, [r7, #6]
	uint8_t gyro_bias_y_h = (uint8_t)(gyro_bias_y >> 8);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	121b      	asrs	r3, r3, #8
 8001922:	717b      	strb	r3, [r7, #5]
	uint8_t gyro_bias_y_l = (uint8_t)gyro_bias_y;
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	713b      	strb	r3, [r7, #4]
	uint8_t gyro_bias_z_h = (uint8_t)(gyro_bias_z >> 8);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	121b      	asrs	r3, r3, #8
 800192c:	70fb      	strb	r3, [r7, #3]
	uint8_t gyro_bias_z_l = (uint8_t)gyro_bias_z;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	70bb      	strb	r3, [r7, #2]
	// Write to registers
	write_one_byte(2, B2_XG_OFFS_USRH, gyro_bias_x_h);
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	461a      	mov	r2, r3
 8001936:	2103      	movs	r1, #3
 8001938:	2002      	movs	r0, #2
 800193a:	f7ff fd7f 	bl	800143c <write_one_byte>
	write_one_byte(2, B2_XG_OFFS_USRL, gyro_bias_x_l);
 800193e:	79bb      	ldrb	r3, [r7, #6]
 8001940:	461a      	mov	r2, r3
 8001942:	2104      	movs	r1, #4
 8001944:	2002      	movs	r0, #2
 8001946:	f7ff fd79 	bl	800143c <write_one_byte>
	write_one_byte(2, B2_YG_OFFS_USRH, gyro_bias_y_h);
 800194a:	797b      	ldrb	r3, [r7, #5]
 800194c:	461a      	mov	r2, r3
 800194e:	2105      	movs	r1, #5
 8001950:	2002      	movs	r0, #2
 8001952:	f7ff fd73 	bl	800143c <write_one_byte>
	write_one_byte(2, B2_YG_OFFS_USRL, gyro_bias_y_l);
 8001956:	793b      	ldrb	r3, [r7, #4]
 8001958:	461a      	mov	r2, r3
 800195a:	2106      	movs	r1, #6
 800195c:	2002      	movs	r0, #2
 800195e:	f7ff fd6d 	bl	800143c <write_one_byte>
	write_one_byte(2, B2_ZG_OFFS_USRH, gyro_bias_z_h);
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	461a      	mov	r2, r3
 8001966:	2107      	movs	r1, #7
 8001968:	2002      	movs	r0, #2
 800196a:	f7ff fd67 	bl	800143c <write_one_byte>
	write_one_byte(2, B2_ZG_OFFS_USRL, gyro_bias_z_l);
 800196e:	78bb      	ldrb	r3, [r7, #2]
 8001970:	461a      	mov	r2, r3
 8001972:	2108      	movs	r1, #8
 8001974:	2002      	movs	r0, #2
 8001976:	f7ff fd61 	bl	800143c <write_one_byte>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	51eb851f 	.word	0x51eb851f

08001988 <calcOri>:

float calcOri(uint32_t* lastSampleTime, float lastSampleOri) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	ed87 0a00 	vstr	s0, [r7]
	float angular_speed = 0;
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
	angular_speed += read_gyro_z();
 800199a:	f7ff ff49 	bl	8001830 <read_gyro_z>
 800199e:	eeb0 7a40 	vmov.f32	s14, s0
 80019a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80019a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019aa:	edc7 7a05 	vstr	s15, [r7, #20]
	if (abs(angular_speed) < MIN_ANG_SPD)
 80019ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80019b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b6:	ee17 3a90 	vmov	r3, s15
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	bfb8      	it	lt
 80019be:	425b      	neglt	r3, r3
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80019cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	d502      	bpl.n	80019dc <calcOri+0x54>
		angular_speed = 0;
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
	uint32_t curTime = HAL_GetTick();
 80019dc:	f002 fc32 	bl	8004244 <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]
	uint16_t dt = curTime - (*lastSampleTime);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	817b      	strh	r3, [r7, #10]
	*lastSampleTime = curTime;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	601a      	str	r2, [r3, #0]
	float result = lastSampleOri + angular_speed * dt / 1000;
 80019f6:	897b      	ldrh	r3, [r7, #10]
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a00:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a08:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001a70 <calcOri+0xe8>
 8001a0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a10:	ed97 7a00 	vldr	s14, [r7]
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result >= 360)
 8001a1c:	e007      	b.n	8001a2e <calcOri+0xa6>
		result -= 360;
 8001a1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a22:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001a74 <calcOri+0xec>
 8001a26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a2a:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result >= 360)
 8001a2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a32:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a74 <calcOri+0xec>
 8001a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3e:	daee      	bge.n	8001a1e <calcOri+0x96>
	while (result < 0)
 8001a40:	e007      	b.n	8001a52 <calcOri+0xca>
		result += 360;
 8001a42:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a46:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001a74 <calcOri+0xec>
 8001a4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a4e:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result < 0)
 8001a52:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	d4f0      	bmi.n	8001a42 <calcOri+0xba>
	return result;
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	ee07 3a90 	vmov	s15, r3
}
 8001a66:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	447a0000 	.word	0x447a0000
 8001a74:	43b40000 	.word	0x43b40000

08001a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a7c:	f002 fb7c 	bl	8004178 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a80:	f000 f872 	bl	8001b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a84:	f000 fb70 	bl	8002168 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001a88:	f000 fa9a 	bl	8001fc0 <MX_TIM8_Init>
  MX_I2C1_Init();
 8001a8c:	f000 f8ca 	bl	8001c24 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001a90:	f000 f9b8 	bl	8001e04 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a94:	f000 fa0a 	bl	8001eac <MX_TIM3_Init>
  MX_TIM1_Init();
 8001a98:	f000 f8f2 	bl	8001c80 <MX_TIM1_Init>
  MX_TIM6_Init();
 8001a9c:	f000 fa5a 	bl	8001f54 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001aa0:	f000 fb38 	bl	8002114 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8001aa4:	f001 fe9c 	bl	80037e0 <OLED_Init>
  HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aae:	481c      	ldr	r0, [pc, #112]	; (8001b20 <main+0xa8>)
 8001ab0:	f002 ff38 	bl	8004924 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ab4:	f007 f978 	bl	8008da8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ori_semaphore */
  ori_semaphoreHandle = osSemaphoreNew(1, 1, &ori_semaphore_attributes);
 8001ab8:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <main+0xac>)
 8001aba:	2101      	movs	r1, #1
 8001abc:	2001      	movs	r0, #1
 8001abe:	f007 fa6a 	bl	8008f96 <osSemaphoreNew>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <main+0xb0>)
 8001ac6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ac8:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <main+0xb4>)
 8001aca:	2100      	movs	r1, #0
 8001acc:	4818      	ldr	r0, [pc, #96]	; (8001b30 <main+0xb8>)
 8001ace:	f007 f9b5 	bl	8008e3c <osThreadNew>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a17      	ldr	r2, [pc, #92]	; (8001b34 <main+0xbc>)
 8001ad6:	6013      	str	r3, [r2, #0]

  /* creation of motorServo */
  motorServoHandle = osThreadNew(StartMotorServo, NULL, &motorServo_attributes);
 8001ad8:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <main+0xc0>)
 8001ada:	2100      	movs	r1, #0
 8001adc:	4817      	ldr	r0, [pc, #92]	; (8001b3c <main+0xc4>)
 8001ade:	f007 f9ad 	bl	8008e3c <osThreadNew>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a16      	ldr	r2, [pc, #88]	; (8001b40 <main+0xc8>)
 8001ae6:	6013      	str	r3, [r2, #0]

  /* creation of imu */
  imuHandle = osThreadNew(StartIMU, NULL, &imu_attributes);
 8001ae8:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <main+0xcc>)
 8001aea:	2100      	movs	r1, #0
 8001aec:	4816      	ldr	r0, [pc, #88]	; (8001b48 <main+0xd0>)
 8001aee:	f007 f9a5 	bl	8008e3c <osThreadNew>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <main+0xd4>)
 8001af6:	6013      	str	r3, [r2, #0]

  /* creation of ultrasound */
  ultrasoundHandle = osThreadNew(StartUS, NULL, &ultrasound_attributes);
 8001af8:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <main+0xd8>)
 8001afa:	2100      	movs	r1, #0
 8001afc:	4815      	ldr	r0, [pc, #84]	; (8001b54 <main+0xdc>)
 8001afe:	f007 f99d 	bl	8008e3c <osThreadNew>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <main+0xe0>)
 8001b06:	6013      	str	r3, [r2, #0]

  /* creation of uart */
  uartHandle = osThreadNew(StartUART, NULL, &uart_attributes);
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <main+0xe4>)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4814      	ldr	r0, [pc, #80]	; (8001b60 <main+0xe8>)
 8001b0e:	f007 f995 	bl	8008e3c <osThreadNew>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <main+0xec>)
 8001b16:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b18:	f007 f96a 	bl	8008df0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <main+0xa4>
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	0800fa88 	.word	0x0800fa88
 8001b28:	20000430 	.word	0x20000430
 8001b2c:	0800f9d4 	.word	0x0800f9d4
 8001b30:	08002541 	.word	0x08002541
 8001b34:	2000041c 	.word	0x2000041c
 8001b38:	0800f9f8 	.word	0x0800f9f8
 8001b3c:	08002551 	.word	0x08002551
 8001b40:	20000420 	.word	0x20000420
 8001b44:	0800fa1c 	.word	0x0800fa1c
 8001b48:	0800275d 	.word	0x0800275d
 8001b4c:	20000424 	.word	0x20000424
 8001b50:	0800fa40 	.word	0x0800fa40
 8001b54:	08002799 	.word	0x08002799
 8001b58:	20000428 	.word	0x20000428
 8001b5c:	0800fa64 	.word	0x0800fa64
 8001b60:	080027ed 	.word	0x080027ed
 8001b64:	2000042c 	.word	0x2000042c

08001b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b094      	sub	sp, #80	; 0x50
 8001b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6e:	f107 0320 	add.w	r3, r7, #32
 8001b72:	2230      	movs	r2, #48	; 0x30
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f00a fd16 	bl	800c5a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <SystemClock_Config+0xb4>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <SystemClock_Config+0xb4>)
 8001b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <SystemClock_Config+0xb4>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba8:	2300      	movs	r3, #0
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <SystemClock_Config+0xb8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1b      	ldr	r2, [pc, #108]	; (8001c20 <SystemClock_Config+0xb8>)
 8001bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <SystemClock_Config+0xb8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bcc:	2310      	movs	r3, #16
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd4:	f107 0320 	add.w	r3, r7, #32
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 fe7b 	bl	80058d4 <HAL_RCC_OscConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001be4:	f000 fe34 	bl	8002850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be8:	230f      	movs	r3, #15
 8001bea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f004 f8de 	bl	8005dc4 <HAL_RCC_ClockConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001c0e:	f000 fe1f 	bl	8002850 <Error_Handler>
  }
}
 8001c12:	bf00      	nop
 8001c14:	3750      	adds	r7, #80	; 0x50
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40007000 	.word	0x40007000

08001c24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c2a:	4a13      	ldr	r2, [pc, #76]	; (8001c78 <MX_I2C1_Init+0x54>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c30:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <MX_I2C1_Init+0x58>)
 8001c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c60:	4804      	ldr	r0, [pc, #16]	; (8001c74 <MX_I2C1_Init+0x50>)
 8001c62:	f002 fe79 	bl	8004958 <HAL_I2C_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c6c:	f000 fdf0 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	2000021c 	.word	0x2000021c
 8001c78:	40005400 	.word	0x40005400
 8001c7c:	000186a0 	.word	0x000186a0

08001c80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b09a      	sub	sp, #104	; 0x68
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
 8001cbc:	615a      	str	r2, [r3, #20]
 8001cbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f00a fc6e 	bl	800c5a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ccc:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001cce:	4a4c      	ldr	r2, [pc, #304]	; (8001e00 <MX_TIM1_Init+0x180>)
 8001cd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001cd2:	4b4a      	ldr	r3, [pc, #296]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd8:	4b48      	ldr	r3, [pc, #288]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001cde:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001ce0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ce4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce6:	4b45      	ldr	r3, [pc, #276]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cec:	4b43      	ldr	r3, [pc, #268]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cf2:	4b42      	ldr	r3, [pc, #264]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cf8:	4840      	ldr	r0, [pc, #256]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001cfa:	f004 fa43 	bl	8006184 <HAL_TIM_Base_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001d04:	f000 fda4 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d12:	4619      	mov	r1, r3
 8001d14:	4839      	ldr	r0, [pc, #228]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001d16:	f005 f94b 	bl	8006fb0 <HAL_TIM_ConfigClockSource>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001d20:	f000 fd96 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001d24:	4835      	ldr	r0, [pc, #212]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001d26:	f004 fc07 	bl	8006538 <HAL_TIM_IC_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001d30:	f000 fd8e 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d34:	4831      	ldr	r0, [pc, #196]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001d36:	f004 fadd 	bl	80062f4 <HAL_TIM_PWM_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d40:	f000 fd86 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d44:	2300      	movs	r3, #0
 8001d46:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d50:	4619      	mov	r1, r3
 8001d52:	482a      	ldr	r0, [pc, #168]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001d54:	f005 fe9a 	bl	8007a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8001d5e:	f000 fd77 	bl	8002850 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001d62:	230a      	movs	r3, #10
 8001d64:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d66:	2301      	movs	r3, #1
 8001d68:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d76:	2200      	movs	r2, #0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4820      	ldr	r0, [pc, #128]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001d7c:	f004 ffba 	bl	8006cf4 <HAL_TIM_IC_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001d86:	f000 fd63 	bl	8002850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d8a:	2360      	movs	r3, #96	; 0x60
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da6:	220c      	movs	r2, #12
 8001da8:	4619      	mov	r1, r3
 8001daa:	4814      	ldr	r0, [pc, #80]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001dac:	f005 f83e 	bl	8006e2c <HAL_TIM_PWM_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001db6:	f000 fd4b 	bl	8002850 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4807      	ldr	r0, [pc, #28]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001dde:	f005 fed1 	bl	8007b84 <HAL_TIMEx_ConfigBreakDeadTime>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001de8:	f000 fd32 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dec:	4803      	ldr	r0, [pc, #12]	; (8001dfc <MX_TIM1_Init+0x17c>)
 8001dee:	f001 ffeb 	bl	8003dc8 <HAL_TIM_MspPostInit>

}
 8001df2:	bf00      	nop
 8001df4:	3768      	adds	r7, #104	; 0x68
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000270 	.word	0x20000270
 8001e00:	40010000 	.word	0x40010000

08001e04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	; 0x30
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	2224      	movs	r2, #36	; 0x24
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f00a fbc8 	bl	800c5a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <MX_TIM2_Init+0xa4>)
 8001e22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e28:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <MX_TIM2_Init+0xa4>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <MX_TIM2_Init+0xa4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001e34:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <MX_TIM2_Init+0xa4>)
 8001e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <MX_TIM2_Init+0xa4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e42:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <MX_TIM2_Init+0xa4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e50:	2301      	movs	r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001e58:	230a      	movs	r3, #10
 8001e5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e60:	2301      	movs	r3, #1
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001e68:	230a      	movs	r3, #10
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e6c:	f107 030c 	add.w	r3, r7, #12
 8001e70:	4619      	mov	r1, r3
 8001e72:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <MX_TIM2_Init+0xa4>)
 8001e74:	f004 fce2 	bl	800683c <HAL_TIM_Encoder_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e7e:	f000 fce7 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4806      	ldr	r0, [pc, #24]	; (8001ea8 <MX_TIM2_Init+0xa4>)
 8001e90:	f005 fdfc 	bl	8007a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001e9a:	f000 fcd9 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	3730      	adds	r7, #48	; 0x30
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200002b8 	.word	0x200002b8

08001eac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08c      	sub	sp, #48	; 0x30
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	2224      	movs	r2, #36	; 0x24
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f00a fb74 	bl	800c5a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ec8:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001eca:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <MX_TIM3_Init+0xa4>)
 8001ecc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001eda:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001efe:	230a      	movs	r3, #10
 8001f00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001f02:	2302      	movs	r3, #2
 8001f04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f06:	2301      	movs	r3, #1
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001f0e:	230a      	movs	r3, #10
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	4619      	mov	r1, r3
 8001f18:	480c      	ldr	r0, [pc, #48]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001f1a:	f004 fc8f 	bl	800683c <HAL_TIM_Encoder_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f24:	f000 fc94 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	4619      	mov	r1, r3
 8001f34:	4805      	ldr	r0, [pc, #20]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001f36:	f005 fda9 	bl	8007a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f40:	f000 fc86 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	3730      	adds	r7, #48	; 0x30
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000300 	.word	0x20000300
 8001f50:	40000400 	.word	0x40000400

08001f54 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <MX_TIM6_Init+0x64>)
 8001f64:	4a15      	ldr	r2, [pc, #84]	; (8001fbc <MX_TIM6_Init+0x68>)
 8001f66:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <MX_TIM6_Init+0x64>)
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <MX_TIM6_Init+0x64>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <MX_TIM6_Init+0x64>)
 8001f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f7a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_TIM6_Init+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <MX_TIM6_Init+0x64>)
 8001f84:	f004 f8fe 	bl	8006184 <HAL_TIM_Base_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f8e:	f000 fc5f 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <MX_TIM6_Init+0x64>)
 8001fa0:	f005 fd74 	bl	8007a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001faa:	f000 fc51 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000348 	.word	0x20000348
 8001fbc:	40001000 	.word	0x40001000

08001fc0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b096      	sub	sp, #88	; 0x58
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	611a      	str	r2, [r3, #16]
 8001fee:	615a      	str	r2, [r3, #20]
 8001ff0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f00a fad5 	bl	800c5a8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ffe:	4b43      	ldr	r3, [pc, #268]	; (800210c <MX_TIM8_Init+0x14c>)
 8002000:	4a43      	ldr	r2, [pc, #268]	; (8002110 <MX_TIM8_Init+0x150>)
 8002002:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002004:	4b41      	ldr	r3, [pc, #260]	; (800210c <MX_TIM8_Init+0x14c>)
 8002006:	2200      	movs	r2, #0
 8002008:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200a:	4b40      	ldr	r3, [pc, #256]	; (800210c <MX_TIM8_Init+0x14c>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8002010:	4b3e      	ldr	r3, [pc, #248]	; (800210c <MX_TIM8_Init+0x14c>)
 8002012:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002016:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002018:	4b3c      	ldr	r3, [pc, #240]	; (800210c <MX_TIM8_Init+0x14c>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800201e:	4b3b      	ldr	r3, [pc, #236]	; (800210c <MX_TIM8_Init+0x14c>)
 8002020:	2200      	movs	r2, #0
 8002022:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002024:	4b39      	ldr	r3, [pc, #228]	; (800210c <MX_TIM8_Init+0x14c>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800202a:	4838      	ldr	r0, [pc, #224]	; (800210c <MX_TIM8_Init+0x14c>)
 800202c:	f004 f8aa 	bl	8006184 <HAL_TIM_Base_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002036:	f000 fc0b 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002040:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002044:	4619      	mov	r1, r3
 8002046:	4831      	ldr	r0, [pc, #196]	; (800210c <MX_TIM8_Init+0x14c>)
 8002048:	f004 ffb2 	bl	8006fb0 <HAL_TIM_ConfigClockSource>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002052:	f000 fbfd 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002056:	482d      	ldr	r0, [pc, #180]	; (800210c <MX_TIM8_Init+0x14c>)
 8002058:	f004 f94c 	bl	80062f4 <HAL_TIM_PWM_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002062:	f000 fbf5 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800206e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002072:	4619      	mov	r1, r3
 8002074:	4825      	ldr	r0, [pc, #148]	; (800210c <MX_TIM8_Init+0x14c>)
 8002076:	f005 fd09 	bl	8007a8c <HAL_TIMEx_MasterConfigSynchronization>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002080:	f000 fbe6 	bl	8002850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002084:	2360      	movs	r3, #96	; 0x60
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002090:	2300      	movs	r3, #0
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002098:	2300      	movs	r3, #0
 800209a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a4:	2200      	movs	r2, #0
 80020a6:	4619      	mov	r1, r3
 80020a8:	4818      	ldr	r0, [pc, #96]	; (800210c <MX_TIM8_Init+0x14c>)
 80020aa:	f004 febf 	bl	8006e2c <HAL_TIM_PWM_ConfigChannel>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80020b4:	f000 fbcc 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020bc:	2204      	movs	r2, #4
 80020be:	4619      	mov	r1, r3
 80020c0:	4812      	ldr	r0, [pc, #72]	; (800210c <MX_TIM8_Init+0x14c>)
 80020c2:	f004 feb3 	bl	8006e2c <HAL_TIM_PWM_ConfigChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80020cc:	f000 fbc0 	bl	8002850 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	4619      	mov	r1, r3
 80020f2:	4806      	ldr	r0, [pc, #24]	; (800210c <MX_TIM8_Init+0x14c>)
 80020f4:	f005 fd46 	bl	8007b84 <HAL_TIMEx_ConfigBreakDeadTime>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80020fe:	f000 fba7 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	3758      	adds	r7, #88	; 0x58
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000390 	.word	0x20000390
 8002110:	40010400 	.word	0x40010400

08002114 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <MX_USART3_UART_Init+0x4c>)
 800211a:	4a12      	ldr	r2, [pc, #72]	; (8002164 <MX_USART3_UART_Init+0x50>)
 800211c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <MX_USART3_UART_Init+0x4c>)
 8002120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002124:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <MX_USART3_UART_Init+0x4c>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <MX_USART3_UART_Init+0x4c>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <MX_USART3_UART_Init+0x4c>)
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <MX_USART3_UART_Init+0x4c>)
 800213a:	220c      	movs	r2, #12
 800213c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <MX_USART3_UART_Init+0x4c>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <MX_USART3_UART_Init+0x4c>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_USART3_UART_Init+0x4c>)
 800214c:	f005 fd80 	bl	8007c50 <HAL_UART_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002156:	f000 fb7b 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200003d8 	.word	0x200003d8
 8002164:	40004800 	.word	0x40004800

08002168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]
 800217c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b3a      	ldr	r3, [pc, #232]	; (800226c <MX_GPIO_Init+0x104>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a39      	ldr	r2, [pc, #228]	; (800226c <MX_GPIO_Init+0x104>)
 8002188:	f043 0310 	orr.w	r3, r3, #16
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b37      	ldr	r3, [pc, #220]	; (800226c <MX_GPIO_Init+0x104>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b33      	ldr	r3, [pc, #204]	; (800226c <MX_GPIO_Init+0x104>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a32      	ldr	r2, [pc, #200]	; (800226c <MX_GPIO_Init+0x104>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b30      	ldr	r3, [pc, #192]	; (800226c <MX_GPIO_Init+0x104>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	4b2c      	ldr	r3, [pc, #176]	; (800226c <MX_GPIO_Init+0x104>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a2b      	ldr	r2, [pc, #172]	; (800226c <MX_GPIO_Init+0x104>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <MX_GPIO_Init+0x104>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <MX_GPIO_Init+0x104>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a24      	ldr	r2, [pc, #144]	; (800226c <MX_GPIO_Init+0x104>)
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b22      	ldr	r3, [pc, #136]	; (800226c <MX_GPIO_Init+0x104>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80021f4:	481e      	ldr	r0, [pc, #120]	; (8002270 <MX_GPIO_Init+0x108>)
 80021f6:	f002 fb95 	bl	8004924 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80021fa:	2200      	movs	r2, #0
 80021fc:	213c      	movs	r1, #60	; 0x3c
 80021fe:	481d      	ldr	r0, [pc, #116]	; (8002274 <MX_GPIO_Init+0x10c>)
 8002200:	f002 fb90 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	2110      	movs	r1, #16
 8002208:	481b      	ldr	r0, [pc, #108]	; (8002278 <MX_GPIO_Init+0x110>)
 800220a:	f002 fb8b 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 PE7 PE8
                           LED3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800220e:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8002212:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	2301      	movs	r3, #1
 8002216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	4812      	ldr	r0, [pc, #72]	; (8002270 <MX_GPIO_Init+0x108>)
 8002228:	f002 f9e0 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800222c:	233c      	movs	r3, #60	; 0x3c
 800222e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002230:	2301      	movs	r3, #1
 8002232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002238:	2302      	movs	r3, #2
 800223a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4619      	mov	r1, r3
 8002242:	480c      	ldr	r0, [pc, #48]	; (8002274 <MX_GPIO_Init+0x10c>)
 8002244:	f002 f9d2 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 8002248:	2310      	movs	r3, #16
 800224a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224c:	2301      	movs	r3, #1
 800224e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4619      	mov	r1, r3
 800225e:	4806      	ldr	r0, [pc, #24]	; (8002278 <MX_GPIO_Init+0x110>)
 8002260:	f002 f9c4 	bl	80045ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002264:	bf00      	nop
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40023800 	.word	0x40023800
 8002270:	40021000 	.word	0x40021000
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400

0800227c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800227c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {		// Ultrasound Echo
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a70      	ldr	r2, [pc, #448]	; (800244c <HAL_TIM_IC_CaptureCallback+0x1d0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	f040 80c2 	bne.w	8002414 <HAL_TIM_IC_CaptureCallback+0x198>
		if (echo_upEdge > 20000) {
 8002290:	4b6f      	ldr	r3, [pc, #444]	; (8002450 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002298:	4293      	cmp	r3, r2
 800229a:	d908      	bls.n	80022ae <HAL_TIM_IC_CaptureCallback+0x32>
			echo_upEdge = (uint16_t)HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800229c:	2100      	movs	r1, #0
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f004 ff4e 	bl	8007140 <HAL_TIM_ReadCapturedValue>
 80022a4:	4603      	mov	r3, r0
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	4b69      	ldr	r3, [pc, #420]	; (8002450 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 80022aa:	801a      	strh	r2, [r3, #0]
 80022ac:	e0b2      	b.n	8002414 <HAL_TIM_IC_CaptureCallback+0x198>
		}
		else {
			echo_downEdge = (uint16_t)HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80022ae:	2100      	movs	r1, #0
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f004 ff45 	bl	8007140 <HAL_TIM_ReadCapturedValue>
 80022b6:	4603      	mov	r3, r0
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	4b66      	ldr	r3, [pc, #408]	; (8002454 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80022bc:	801a      	strh	r2, [r3, #0]
			if (echo_upEdge > echo_downEdge) {
 80022be:	4b64      	ldr	r3, [pc, #400]	; (8002450 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 80022c0:	881a      	ldrh	r2, [r3, #0]
 80022c2:	4b64      	ldr	r3, [pc, #400]	; (8002454 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d90c      	bls.n	80022e4 <HAL_TIM_IC_CaptureCallback+0x68>
				echo = (echo_downEdge + 20000) - echo_upEdge;
 80022ca:	4b62      	ldr	r3, [pc, #392]	; (8002454 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80022cc:	881a      	ldrh	r2, [r3, #0]
 80022ce:	4b60      	ldr	r3, [pc, #384]	; (8002450 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80022da:	3320      	adds	r3, #32
 80022dc:	b29a      	uxth	r2, r3
 80022de:	4b5e      	ldr	r3, [pc, #376]	; (8002458 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80022e0:	801a      	strh	r2, [r3, #0]
 80022e2:	e007      	b.n	80022f4 <HAL_TIM_IC_CaptureCallback+0x78>
			}
			else {
				echo = echo_downEdge - echo_upEdge;
 80022e4:	4b5b      	ldr	r3, [pc, #364]	; (8002454 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80022e6:	881a      	ldrh	r2, [r3, #0]
 80022e8:	4b59      	ldr	r3, [pc, #356]	; (8002450 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	4b59      	ldr	r3, [pc, #356]	; (8002458 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80022f2:	801a      	strh	r2, [r3, #0]
			}
			if (echo < MIN_US_ECHO) {
 80022f4:	4b58      	ldr	r3, [pc, #352]	; (8002458 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80022fc:	f080 8082 	bcs.w	8002404 <HAL_TIM_IC_CaptureCallback+0x188>
				if ((curInst.type == INST_TYPE_GOSTRAIGHT) && (curInst.val > 0)) {
 8002300:	4b56      	ldr	r3, [pc, #344]	; (800245c <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8002302:	785b      	ldrb	r3, [r3, #1]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d108      	bne.n	800231a <HAL_TIM_IC_CaptureCallback+0x9e>
 8002308:	4b54      	ldr	r3, [pc, #336]	; (800245c <HAL_TIM_IC_CaptureCallback+0x1e0>)
 800230a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800230e:	2b00      	cmp	r3, #0
 8002310:	dd03      	ble.n	800231a <HAL_TIM_IC_CaptureCallback+0x9e>
					mtr_suspend(SUS_STOPPID);
 8002312:	2003      	movs	r0, #3
 8002314:	f000 fcd2 	bl	8002cbc <mtr_suspend>
 8002318:	e074      	b.n	8002404 <HAL_TIM_IC_CaptureCallback+0x188>
				}
				else {
					if (mtrA.suspend == SUS_OFF) {
 800231a:	4b51      	ldr	r3, [pc, #324]	; (8002460 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d16d      	bne.n	80023fe <HAL_TIM_IC_CaptureCallback+0x182>
						float distchange = (float)SOSBACK_DIST_CNT / CNT_PER_CM;
 8002322:	4b50      	ldr	r3, [pc, #320]	; (8002464 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8002324:	60fb      	str	r3, [r7, #12]
						us_distchange_x += distchange * sin((orientation / 180) * PI);
 8002326:	4b50      	ldr	r3, [pc, #320]	; (8002468 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f90c 	bl	8000548 <__aeabi_f2d>
 8002330:	4604      	mov	r4, r0
 8002332:	460d      	mov	r5, r1
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7fe f907 	bl	8000548 <__aeabi_f2d>
 800233a:	4680      	mov	r8, r0
 800233c:	4689      	mov	r9, r1
 800233e:	4b4b      	ldr	r3, [pc, #300]	; (800246c <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8002340:	ed93 7a00 	vldr	s14, [r3]
 8002344:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8002470 <HAL_TIM_IC_CaptureCallback+0x1f4>
 8002348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800234c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002474 <HAL_TIM_IC_CaptureCallback+0x1f8>
 8002350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002354:	ee17 0a90 	vmov	r0, s15
 8002358:	f7fe f8f6 	bl	8000548 <__aeabi_f2d>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	ec43 2b10 	vmov	d0, r2, r3
 8002364:	f00c fab0 	bl	800e8c8 <sin>
 8002368:	ec53 2b10 	vmov	r2, r3, d0
 800236c:	4640      	mov	r0, r8
 800236e:	4649      	mov	r1, r9
 8002370:	f7fe f942 	bl	80005f8 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4620      	mov	r0, r4
 800237a:	4629      	mov	r1, r5
 800237c:	f7fd ff86 	bl	800028c <__adddf3>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4610      	mov	r0, r2
 8002386:	4619      	mov	r1, r3
 8002388:	f7fe fc0e 	bl	8000ba8 <__aeabi_d2f>
 800238c:	4603      	mov	r3, r0
 800238e:	4a36      	ldr	r2, [pc, #216]	; (8002468 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8002390:	6013      	str	r3, [r2, #0]
						us_distchange_y += distchange * cos((orientation / 180) * PI);
 8002392:	4b39      	ldr	r3, [pc, #228]	; (8002478 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe f8d6 	bl	8000548 <__aeabi_f2d>
 800239c:	4604      	mov	r4, r0
 800239e:	460d      	mov	r5, r1
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f7fe f8d1 	bl	8000548 <__aeabi_f2d>
 80023a6:	4680      	mov	r8, r0
 80023a8:	4689      	mov	r9, r1
 80023aa:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80023ac:	ed93 7a00 	vldr	s14, [r3]
 80023b0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002470 <HAL_TIM_IC_CaptureCallback+0x1f4>
 80023b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023b8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002474 <HAL_TIM_IC_CaptureCallback+0x1f8>
 80023bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c0:	ee17 0a90 	vmov	r0, s15
 80023c4:	f7fe f8c0 	bl	8000548 <__aeabi_f2d>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	ec43 2b10 	vmov	d0, r2, r3
 80023d0:	f00c fa26 	bl	800e820 <cos>
 80023d4:	ec53 2b10 	vmov	r2, r3, d0
 80023d8:	4640      	mov	r0, r8
 80023da:	4649      	mov	r1, r9
 80023dc:	f7fe f90c 	bl	80005f8 <__aeabi_dmul>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4620      	mov	r0, r4
 80023e6:	4629      	mov	r1, r5
 80023e8:	f7fd ff50 	bl	800028c <__adddf3>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	f7fe fbd8 	bl	8000ba8 <__aeabi_d2f>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80023fc:	6013      	str	r3, [r2, #0]
					}
					mtr_suspend(SUS_BACK);
 80023fe:	2002      	movs	r0, #2
 8002400:	f000 fc5c 	bl	8002cbc <mtr_suspend>
				}
			}
			echo_upEdge = 65535;
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8002406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800240a:	801a      	strh	r2, [r3, #0]
			echo_downEdge = 65535;
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 800240e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002412:	801a      	strh	r2, [r3, #0]
		}
	}
	if (htim == &htim2) {		// Motor A's interrupt
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a19      	ldr	r2, [pc, #100]	; (800247c <HAL_TIM_IC_CaptureCallback+0x200>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d108      	bne.n	800242e <HAL_TIM_IC_CaptureCallback+0x1b2>
		mtrAPID.count = -(int16_t)__HAL_TIM_GET_COUNTER(htim);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	b29b      	uxth	r3, r3
 8002424:	425b      	negs	r3, r3
 8002426:	b29b      	uxth	r3, r3
 8002428:	b21a      	sxth	r2, r3
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_TIM_IC_CaptureCallback+0x204>)
 800242c:	801a      	strh	r2, [r3, #0]
		//mtrAPID.angle = (int)((mtrAPID.count/2)*360/(PULSE_PER_REV));
	}
	if (htim == &htim3) {		// Motor B's interrupt
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d105      	bne.n	8002442 <HAL_TIM_IC_CaptureCallback+0x1c6>
		mtrBPID.count = (int16_t)__HAL_TIM_GET_COUNTER(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	b21a      	sxth	r2, r3
 800243e:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002440:	801a      	strh	r2, [r3, #0]
		//mtrBPID.angle = (int)((mtrBPID.count/2)*360/(PULSE_PER_REV));
	}
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800244c:	20000270 	.word	0x20000270
 8002450:	20000004 	.word	0x20000004
 8002454:	20000006 	.word	0x20000006
 8002458:	2000045c 	.word	0x2000045c
 800245c:	20000460 	.word	0x20000460
 8002460:	2000046c 	.word	0x2000046c
 8002464:	c12eb4b4 	.word	0xc12eb4b4
 8002468:	20000440 	.word	0x20000440
 800246c:	20000434 	.word	0x20000434
 8002470:	43340000 	.word	0x43340000
 8002474:	40490fdb 	.word	0x40490fdb
 8002478:	20000444 	.word	0x20000444
 800247c:	200002b8 	.word	0x200002b8
 8002480:	2000047c 	.word	0x2000047c
 8002484:	20000300 	.word	0x20000300
 8002488:	2000049c 	.word	0x2000049c

0800248c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	uart_receive();
 8002494:	f7fe fe62 	bl	800115c <uart_receive>

	OLED_Clear();
 8002498:	f001 f87e 	bl	8003598 <OLED_Clear>
	sprintf(oledbuf, "Id: %d", curInst.id);
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_UART_RxCpltCallback+0x70>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	4917      	ldr	r1, [pc, #92]	; (8002500 <HAL_UART_RxCpltCallback+0x74>)
 80024a4:	4817      	ldr	r0, [pc, #92]	; (8002504 <HAL_UART_RxCpltCallback+0x78>)
 80024a6:	f009 ffaf 	bl	800c408 <siprintf>
	OLED_ShowString(10, 15, &oledbuf[0]);
 80024aa:	4a16      	ldr	r2, [pc, #88]	; (8002504 <HAL_UART_RxCpltCallback+0x78>)
 80024ac:	210f      	movs	r1, #15
 80024ae:	200a      	movs	r0, #10
 80024b0:	f001 f964 	bl	800377c <OLED_ShowString>
	OLED_Refresh_Gram();
 80024b4:	f000 ffee 	bl	8003494 <OLED_Refresh_Gram>
	sprintf(oledbuf, "Type: %d", curInst.type);
 80024b8:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_UART_RxCpltCallback+0x70>)
 80024ba:	785b      	ldrb	r3, [r3, #1]
 80024bc:	461a      	mov	r2, r3
 80024be:	4912      	ldr	r1, [pc, #72]	; (8002508 <HAL_UART_RxCpltCallback+0x7c>)
 80024c0:	4810      	ldr	r0, [pc, #64]	; (8002504 <HAL_UART_RxCpltCallback+0x78>)
 80024c2:	f009 ffa1 	bl	800c408 <siprintf>
	OLED_ShowString(10, 30, &oledbuf[0]);
 80024c6:	4a0f      	ldr	r2, [pc, #60]	; (8002504 <HAL_UART_RxCpltCallback+0x78>)
 80024c8:	211e      	movs	r1, #30
 80024ca:	200a      	movs	r0, #10
 80024cc:	f001 f956 	bl	800377c <OLED_ShowString>
	OLED_Refresh_Gram();
 80024d0:	f000 ffe0 	bl	8003494 <OLED_Refresh_Gram>
	sprintf(oledbuf, "Val: %d", curInst.val);
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_UART_RxCpltCallback+0x70>)
 80024d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024da:	461a      	mov	r2, r3
 80024dc:	490b      	ldr	r1, [pc, #44]	; (800250c <HAL_UART_RxCpltCallback+0x80>)
 80024de:	4809      	ldr	r0, [pc, #36]	; (8002504 <HAL_UART_RxCpltCallback+0x78>)
 80024e0:	f009 ff92 	bl	800c408 <siprintf>
	OLED_ShowString(10, 45, &oledbuf[0]);
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <HAL_UART_RxCpltCallback+0x78>)
 80024e6:	212d      	movs	r1, #45	; 0x2d
 80024e8:	200a      	movs	r0, #10
 80024ea:	f001 f947 	bl	800377c <OLED_ShowString>
	OLED_Refresh_Gram();
 80024ee:	f000 ffd1 	bl	8003494 <OLED_Refresh_Gram>

}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000460 	.word	0x20000460
 8002500:	0800f9a0 	.word	0x0800f9a0
 8002504:	20000448 	.word	0x20000448
 8002508:	0800f9a8 	.word	0x0800f9a8
 800250c:	0800f9b4 	.word	0x0800f9b4

08002510 <Delay_us>:

void Delay_us(uint16_t us) {
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <Delay_us+0x2c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2200      	movs	r2, #0
 8002520:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < us);
 8002522:	bf00      	nop
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <Delay_us+0x2c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	429a      	cmp	r2, r3
 800252e:	d3f9      	bcc.n	8002524 <Delay_us+0x14>
	return;
 8002530:	bf00      	nop
}
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	20000348 	.word	0x20000348

08002540 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002548:	2001      	movs	r0, #1
 800254a:	f006 fd09 	bl	8008f60 <osDelay>
 800254e:	e7fb      	b.n	8002548 <StartDefaultTask+0x8>

08002550 <StartMotorServo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorServo */
void StartMotorServo(void *argument)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af06      	add	r7, sp, #24
 8002556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorServo */
	mtr_init(&htim8, &htim2, &htim3, &mtrA, &mtrB, &mtrAPID, &mtrBPID, &backupObj, &orientation, &ori_semaphoreHandle);
 8002558:	4b6d      	ldr	r3, [pc, #436]	; (8002710 <StartMotorServo+0x1c0>)
 800255a:	9305      	str	r3, [sp, #20]
 800255c:	4b6d      	ldr	r3, [pc, #436]	; (8002714 <StartMotorServo+0x1c4>)
 800255e:	9304      	str	r3, [sp, #16]
 8002560:	4b6d      	ldr	r3, [pc, #436]	; (8002718 <StartMotorServo+0x1c8>)
 8002562:	9303      	str	r3, [sp, #12]
 8002564:	4b6d      	ldr	r3, [pc, #436]	; (800271c <StartMotorServo+0x1cc>)
 8002566:	9302      	str	r3, [sp, #8]
 8002568:	4b6d      	ldr	r3, [pc, #436]	; (8002720 <StartMotorServo+0x1d0>)
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	4b6d      	ldr	r3, [pc, #436]	; (8002724 <StartMotorServo+0x1d4>)
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	4b6d      	ldr	r3, [pc, #436]	; (8002728 <StartMotorServo+0x1d8>)
 8002572:	4a6e      	ldr	r2, [pc, #440]	; (800272c <StartMotorServo+0x1dc>)
 8002574:	496e      	ldr	r1, [pc, #440]	; (8002730 <StartMotorServo+0x1e0>)
 8002576:	486f      	ldr	r0, [pc, #444]	; (8002734 <StartMotorServo+0x1e4>)
 8002578:	f000 f970 	bl	800285c <mtr_init>
	servoInit(&htim1);
 800257c:	486e      	ldr	r0, [pc, #440]	; (8002738 <StartMotorServo+0x1e8>)
 800257e:	f001 fa35 	bl	80039ec <servoInit>

  /* Infinite loop */
  for(;;)
  {
	  if ((cpltErr.id == curInst.id) && (!cpltErr.finished)) {	// If the current instruction is the next one to be executed
 8002582:	4b6e      	ldr	r3, [pc, #440]	; (800273c <StartMotorServo+0x1ec>)
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	4b6e      	ldr	r3, [pc, #440]	; (8002740 <StartMotorServo+0x1f0>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	f040 80b8 	bne.w	8002700 <StartMotorServo+0x1b0>
 8002590:	4b6a      	ldr	r3, [pc, #424]	; (800273c <StartMotorServo+0x1ec>)
 8002592:	799b      	ldrb	r3, [r3, #6]
 8002594:	2b00      	cmp	r3, #0
 8002596:	f040 80b3 	bne.w	8002700 <StartMotorServo+0x1b0>
		  float dist = executeInstruction(&curInst, &cpltErr);
 800259a:	4968      	ldr	r1, [pc, #416]	; (800273c <StartMotorServo+0x1ec>)
 800259c:	4868      	ldr	r0, [pc, #416]	; (8002740 <StartMotorServo+0x1f0>)
 800259e:	f000 ff15 	bl	80033cc <executeInstruction>
 80025a2:	ed87 0a03 	vstr	s0, [r7, #12]
		  if ((mtrA.suspend != SUS_OFF) || (mtrB.suspend != SUS_OFF)) {
 80025a6:	4b60      	ldr	r3, [pc, #384]	; (8002728 <StartMotorServo+0x1d8>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d103      	bne.n	80025b6 <StartMotorServo+0x66>
 80025ae:	4b5d      	ldr	r3, [pc, #372]	; (8002724 <StartMotorServo+0x1d4>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <StartMotorServo+0x6e>
			  mtr_continue();
 80025b6:	f000 fbd1 	bl	8002d5c <mtr_continue>
			  mtr_stop();
 80025ba:	f000 fb13 	bl	8002be4 <mtr_stop>
		  }
		  if (!cpltErr.finished) {	// If instruction did not finish, try again
 80025be:	4b5f      	ldr	r3, [pc, #380]	; (800273c <StartMotorServo+0x1ec>)
 80025c0:	799b      	ldrb	r3, [r3, #6]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80a1 	beq.w	800270a <StartMotorServo+0x1ba>
			  continue;
		  }
		  if (dist != 0) {
 80025c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d4:	d052      	beq.n	800267c <StartMotorServo+0x12c>
			  pos_x += dist * (float)sin((orientation / 180) * PI);
 80025d6:	4b4f      	ldr	r3, [pc, #316]	; (8002714 <StartMotorServo+0x1c4>)
 80025d8:	ed93 7a00 	vldr	s14, [r3]
 80025dc:	eddf 6a59 	vldr	s13, [pc, #356]	; 8002744 <StartMotorServo+0x1f4>
 80025e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e4:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002748 <StartMotorServo+0x1f8>
 80025e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ec:	ee17 0a90 	vmov	r0, s15
 80025f0:	f7fd ffaa 	bl	8000548 <__aeabi_f2d>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	ec43 2b10 	vmov	d0, r2, r3
 80025fc:	f00c f964 	bl	800e8c8 <sin>
 8002600:	ec53 2b10 	vmov	r2, r3, d0
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	f7fe face 	bl	8000ba8 <__aeabi_d2f>
 800260c:	ee07 0a10 	vmov	s14, r0
 8002610:	edd7 7a03 	vldr	s15, [r7, #12]
 8002614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002618:	4b4c      	ldr	r3, [pc, #304]	; (800274c <StartMotorServo+0x1fc>)
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002622:	4b4a      	ldr	r3, [pc, #296]	; (800274c <StartMotorServo+0x1fc>)
 8002624:	edc3 7a00 	vstr	s15, [r3]
			  pos_y += dist * (float)cos((orientation / 180) * PI);
 8002628:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <StartMotorServo+0x1c4>)
 800262a:	ed93 7a00 	vldr	s14, [r3]
 800262e:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002744 <StartMotorServo+0x1f4>
 8002632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002636:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002748 <StartMotorServo+0x1f8>
 800263a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800263e:	ee17 0a90 	vmov	r0, s15
 8002642:	f7fd ff81 	bl	8000548 <__aeabi_f2d>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	ec43 2b10 	vmov	d0, r2, r3
 800264e:	f00c f8e7 	bl	800e820 <cos>
 8002652:	ec53 2b10 	vmov	r2, r3, d0
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f7fe faa5 	bl	8000ba8 <__aeabi_d2f>
 800265e:	ee07 0a10 	vmov	s14, r0
 8002662:	edd7 7a03 	vldr	s15, [r7, #12]
 8002666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800266a:	4b39      	ldr	r3, [pc, #228]	; (8002750 <StartMotorServo+0x200>)
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002674:	4b36      	ldr	r3, [pc, #216]	; (8002750 <StartMotorServo+0x200>)
 8002676:	edc3 7a00 	vstr	s15, [r3]
 800267a:	e025      	b.n	80026c8 <StartMotorServo+0x178>
		  }
		  else {
			  if (us_distchange_x != 0) {		// When the command is turn and there's US course correction
 800267c:	4b35      	ldr	r3, [pc, #212]	; (8002754 <StartMotorServo+0x204>)
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268a:	d00a      	beq.n	80026a2 <StartMotorServo+0x152>
				  pos_x += us_distchange_x;
 800268c:	4b2f      	ldr	r3, [pc, #188]	; (800274c <StartMotorServo+0x1fc>)
 800268e:	ed93 7a00 	vldr	s14, [r3]
 8002692:	4b30      	ldr	r3, [pc, #192]	; (8002754 <StartMotorServo+0x204>)
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <StartMotorServo+0x1fc>)
 800269e:	edc3 7a00 	vstr	s15, [r3]
			  }
			  if (us_distchange_y != 0) {
 80026a2:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <StartMotorServo+0x208>)
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	d00a      	beq.n	80026c8 <StartMotorServo+0x178>
				  pos_y += us_distchange_y;
 80026b2:	4b27      	ldr	r3, [pc, #156]	; (8002750 <StartMotorServo+0x200>)
 80026b4:	ed93 7a00 	vldr	s14, [r3]
 80026b8:	4b27      	ldr	r3, [pc, #156]	; (8002758 <StartMotorServo+0x208>)
 80026ba:	edd3 7a00 	vldr	s15, [r3]
 80026be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c2:	4b23      	ldr	r3, [pc, #140]	; (8002750 <StartMotorServo+0x200>)
 80026c4:	edc3 7a00 	vstr	s15, [r3]
			  }
		  }
		  // Reset us_distchange after each instruction run
		  us_distchange_x = 0;
 80026c8:	4b22      	ldr	r3, [pc, #136]	; (8002754 <StartMotorServo+0x204>)
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
		  us_distchange_y = 0;
 80026d0:	4b21      	ldr	r3, [pc, #132]	; (8002758 <StartMotorServo+0x208>)
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

		  cpltErr.pos_x = (int16_t)pos_x;
 80026d8:	4b1c      	ldr	r3, [pc, #112]	; (800274c <StartMotorServo+0x1fc>)
 80026da:	edd3 7a00 	vldr	s15, [r3]
 80026de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e2:	ee17 3a90 	vmov	r3, s15
 80026e6:	b21a      	sxth	r2, r3
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <StartMotorServo+0x1ec>)
 80026ea:	805a      	strh	r2, [r3, #2]
		  cpltErr.pos_y = (int16_t)pos_y;
 80026ec:	4b18      	ldr	r3, [pc, #96]	; (8002750 <StartMotorServo+0x200>)
 80026ee:	edd3 7a00 	vldr	s15, [r3]
 80026f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f6:	ee17 3a90 	vmov	r3, s15
 80026fa:	b21a      	sxth	r2, r3
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <StartMotorServo+0x1ec>)
 80026fe:	809a      	strh	r2, [r3, #4]
	  OLED_Refresh_Gram();
	  sprintf(oledbuf, "Ori = %5.1f", orientation);
	  OLED_ShowString(10, 45, &oledbuf[0]);
	  OLED_Refresh_Gram();
	  */
	  osDelay(500);		// Make sure to give time for UART task to transmit instructions
 8002700:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002704:	f006 fc2c 	bl	8008f60 <osDelay>
 8002708:	e73b      	b.n	8002582 <StartMotorServo+0x32>
			  continue;
 800270a:	bf00      	nop
	  if ((cpltErr.id == curInst.id) && (!cpltErr.finished)) {	// If the current instruction is the next one to be executed
 800270c:	e739      	b.n	8002582 <StartMotorServo+0x32>
 800270e:	bf00      	nop
 8002710:	20000430 	.word	0x20000430
 8002714:	20000434 	.word	0x20000434
 8002718:	200004bc 	.word	0x200004bc
 800271c:	2000049c 	.word	0x2000049c
 8002720:	2000047c 	.word	0x2000047c
 8002724:	20000474 	.word	0x20000474
 8002728:	2000046c 	.word	0x2000046c
 800272c:	20000300 	.word	0x20000300
 8002730:	200002b8 	.word	0x200002b8
 8002734:	20000390 	.word	0x20000390
 8002738:	20000270 	.word	0x20000270
 800273c:	20000464 	.word	0x20000464
 8002740:	20000460 	.word	0x20000460
 8002744:	43340000 	.word	0x43340000
 8002748:	40490fdb 	.word	0x40490fdb
 800274c:	20000438 	.word	0x20000438
 8002750:	2000043c 	.word	0x2000043c
 8002754:	20000440 	.word	0x20000440
 8002758:	20000444 	.word	0x20000444

0800275c <StartIMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMU */
void StartIMU(void *argument)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMU */
	uint32_t ori_lastSampleTime = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
	imu_init(&hi2c1);
 8002768:	4809      	ldr	r0, [pc, #36]	; (8002790 <StartIMU+0x34>)
 800276a:	f7fe fd7d 	bl	8001268 <imu_init>
  /* Infinite loop */
  for(;;)
  {
	  orientation = calcOri(&ori_lastSampleTime, orientation);
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <StartIMU+0x38>)
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	eeb0 0a67 	vmov.f32	s0, s15
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff f903 	bl	8001988 <calcOri>
 8002782:	eef0 7a40 	vmov.f32	s15, s0
 8002786:	4b03      	ldr	r3, [pc, #12]	; (8002794 <StartIMU+0x38>)
 8002788:	edc3 7a00 	vstr	s15, [r3]
 800278c:	e7ef      	b.n	800276e <StartIMU+0x12>
 800278e:	bf00      	nop
 8002790:	2000021c 	.word	0x2000021c
 8002794:	20000434 	.word	0x20000434

08002798 <StartUS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUS */
void StartUS(void *argument)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUS */
	HAL_TIM_Base_Start(&htim6);
 80027a0:	480f      	ldr	r0, [pc, #60]	; (80027e0 <StartUS+0x48>)
 80027a2:	f003 fd3f 	bl	8006224 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80027a6:	2100      	movs	r1, #0
 80027a8:	480e      	ldr	r0, [pc, #56]	; (80027e4 <StartUS+0x4c>)
 80027aa:	f003 ff1f 	bl	80065ec <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2110      	movs	r1, #16
 80027b2:	480d      	ldr	r0, [pc, #52]	; (80027e8 <StartUS+0x50>)
 80027b4:	f002 f8b6 	bl	8004924 <HAL_GPIO_WritePin>
	  osDelay(50);
 80027b8:	2032      	movs	r0, #50	; 0x32
 80027ba:	f006 fbd1 	bl	8008f60 <osDelay>
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_SET);
 80027be:	2201      	movs	r2, #1
 80027c0:	2110      	movs	r1, #16
 80027c2:	4809      	ldr	r0, [pc, #36]	; (80027e8 <StartUS+0x50>)
 80027c4:	f002 f8ae 	bl	8004924 <HAL_GPIO_WritePin>
	  Delay_us(10);
 80027c8:	200a      	movs	r0, #10
 80027ca:	f7ff fea1 	bl	8002510 <Delay_us>
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2110      	movs	r1, #16
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <StartUS+0x50>)
 80027d4:	f002 f8a6 	bl	8004924 <HAL_GPIO_WritePin>
	  osDelay(50);
 80027d8:	2032      	movs	r0, #50	; 0x32
 80027da:	f006 fbc1 	bl	8008f60 <osDelay>
	  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 80027de:	e7e6      	b.n	80027ae <StartUS+0x16>
 80027e0:	20000348 	.word	0x20000348
 80027e4:	20000270 	.word	0x20000270
 80027e8:	40020400 	.word	0x40020400

080027ec <StartUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART */
void StartUART(void *argument)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART */
	comm_init(&huart3, &curInst, &cpltErr);
 80027f4:	4a13      	ldr	r2, [pc, #76]	; (8002844 <StartUART+0x58>)
 80027f6:	4914      	ldr	r1, [pc, #80]	; (8002848 <StartUART+0x5c>)
 80027f8:	4814      	ldr	r0, [pc, #80]	; (800284c <StartUART+0x60>)
 80027fa:	f7fe fba3 	bl	8000f44 <comm_init>
	curInst.val = 150;*/
  /* Infinite loop */
  for(;;)
  {
	  // Initiate new task
	  if ((curInst.id == cpltErr.id + 1) && (cpltErr.finished)) {	// If a new instruction has been received but has not been processed
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <StartUART+0x5c>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <StartUART+0x58>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	429a      	cmp	r2, r3
 800280c:	d108      	bne.n	8002820 <StartUART+0x34>
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <StartUART+0x58>)
 8002810:	799b      	ldrb	r3, [r3, #6]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d004      	beq.n	8002820 <StartUART+0x34>
		  if (!newCpltErr(curInst.id)) {
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <StartUART+0x5c>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fcec 	bl	80011f8 <newCpltErr>

		  }
	  }
	  // Send results
	  if ((curInst.id == cpltErr.id) && (cpltErr.finished)) {
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <StartUART+0x5c>)
 8002822:	781a      	ldrb	r2, [r3, #0]
 8002824:	4b07      	ldr	r3, [pc, #28]	; (8002844 <StartUART+0x58>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d105      	bne.n	8002838 <StartUART+0x4c>
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <StartUART+0x58>)
 800282e:	799b      	ldrb	r3, [r3, #6]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <StartUART+0x4c>
		  uart_send();
 8002834:	f7fe fbd2 	bl	8000fdc <uart_send>
	  }
	  osDelay(500);
 8002838:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800283c:	f006 fb90 	bl	8008f60 <osDelay>
	  if ((curInst.id == cpltErr.id + 1) && (cpltErr.finished)) {	// If a new instruction has been received but has not been processed
 8002840:	e7dd      	b.n	80027fe <StartUART+0x12>
 8002842:	bf00      	nop
 8002844:	20000464 	.word	0x20000464
 8002848:	20000460 	.word	0x20000460
 800284c:	200003d8 	.word	0x200003d8

08002850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002854:	b672      	cpsid	i
}
 8002856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002858:	e7fe      	b.n	8002858 <Error_Handler+0x8>
	...

0800285c <mtr_init>:

/* All functions */

void mtr_init(TIM_HandleTypeDef* pwm_htimPtr, TIM_HandleTypeDef* encodeA_htimPtr, TIM_HandleTypeDef* encodeB_htimPtr,
		MotorData* mtrA, MotorData* mtrB, MotorPIDData* mtrAPID, MotorPIDData* mtrBPID, MotorServoStatus* backupObj,
		float* orientation, osSemaphoreId_t* oriSemHandlePtr) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]

	motorA = mtrA;
 800286a:	4a2b      	ldr	r2, [pc, #172]	; (8002918 <mtr_init+0xbc>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6013      	str	r3, [r2, #0]
	motorB = mtrB;
 8002870:	4a2a      	ldr	r2, [pc, #168]	; (800291c <mtr_init+0xc0>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	6013      	str	r3, [r2, #0]
	motorA->suspend = 0;
 8002876:	4b28      	ldr	r3, [pc, #160]	; (8002918 <mtr_init+0xbc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
	motorA->suspend = 0;
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <mtr_init+0xbc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]

	motorAPID = mtrAPID;
 8002886:	4a26      	ldr	r2, [pc, #152]	; (8002920 <mtr_init+0xc4>)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	6013      	str	r3, [r2, #0]
	motorBPID = mtrBPID;
 800288c:	4a25      	ldr	r2, [pc, #148]	; (8002924 <mtr_init+0xc8>)
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	6013      	str	r3, [r2, #0]

	backup = backupObj;
 8002892:	4a25      	ldr	r2, [pc, #148]	; (8002928 <mtr_init+0xcc>)
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	6013      	str	r3, [r2, #0]
	backup_reset();
 8002898:	f000 f854 	bl	8002944 <backup_reset>

	ori = orientation;
 800289c:	4a23      	ldr	r2, [pc, #140]	; (800292c <mtr_init+0xd0>)
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	6013      	str	r3, [r2, #0]
	ori_semaphoreHandlePtr = oriSemHandlePtr;
 80028a2:	4a23      	ldr	r2, [pc, #140]	; (8002930 <mtr_init+0xd4>)
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	6013      	str	r3, [r2, #0]

	htim8Ptr = pwm_htimPtr;
 80028a8:	4a22      	ldr	r2, [pc, #136]	; (8002934 <mtr_init+0xd8>)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6013      	str	r3, [r2, #0]
	htim2Ptr = encodeA_htimPtr;
 80028ae:	4a22      	ldr	r2, [pc, #136]	; (8002938 <mtr_init+0xdc>)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	6013      	str	r3, [r2, #0]
	htim3Ptr = encodeB_htimPtr;
 80028b4:	4a21      	ldr	r2, [pc, #132]	; (800293c <mtr_init+0xe0>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim8Ptr, PWMA_TIM_CH);
 80028ba:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <mtr_init+0xd8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f003 fd71 	bl	80063a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim8Ptr, PWMB_TIM_CH);
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <mtr_init+0xd8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2104      	movs	r1, #4
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 fd6b 	bl	80063a8 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start_IT(htim2Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <mtr_init+0xdc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	213c      	movs	r1, #60	; 0x3c
 80028d8:	4618      	mov	r0, r3
 80028da:	f004 f855 	bl	8006988 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(htim3Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <mtr_init+0xe0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	213c      	movs	r1, #60	; 0x3c
 80028e4:	4618      	mov	r0, r3
 80028e6:	f004 f84f 	bl	8006988 <HAL_TIM_Encoder_Start_IT>

	mtrA_init(0, 0, 0, 0, 1);
 80028ea:	2201      	movs	r2, #1
 80028ec:	eddf 0a14 	vldr	s1, [pc, #80]	; 8002940 <mtr_init+0xe4>
 80028f0:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002940 <mtr_init+0xe4>
 80028f4:	2100      	movs	r1, #0
 80028f6:	2000      	movs	r0, #0
 80028f8:	f000 f842 	bl	8002980 <mtrA_init>
	mtrB_init(0, 0, 0, 0, 1);
 80028fc:	2201      	movs	r2, #1
 80028fe:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002940 <mtr_init+0xe4>
 8002902:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002940 <mtr_init+0xe4>
 8002906:	2100      	movs	r1, #0
 8002908:	2000      	movs	r0, #0
 800290a:	f000 f89f 	bl	8002a4c <mtrB_init>
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200004c8 	.word	0x200004c8
 800291c:	200004cc 	.word	0x200004cc
 8002920:	200004d0 	.word	0x200004d0
 8002924:	200004d4 	.word	0x200004d4
 8002928:	200004d8 	.word	0x200004d8
 800292c:	200004dc 	.word	0x200004dc
 8002930:	200004ec 	.word	0x200004ec
 8002934:	200004e0 	.word	0x200004e0
 8002938:	200004e4 	.word	0x200004e4
 800293c:	200004e8 	.word	0x200004e8
 8002940:	00000000 	.word	0x00000000

08002944 <backup_reset>:

void backup_reset() {
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
	backup->servoDir = STRAIGHT;
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <backup_reset+0x38>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
	backup->mtrADir = DIR_FWD;
 8002950:	4b0a      	ldr	r3, [pc, #40]	; (800297c <backup_reset+0x38>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2201      	movs	r2, #1
 8002956:	705a      	strb	r2, [r3, #1]
	backup->mtrAPWM = 0;
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <backup_reset+0x38>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2200      	movs	r2, #0
 800295e:	605a      	str	r2, [r3, #4]
	backup->mtrBDir = DIR_FWD;
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <backup_reset+0x38>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2201      	movs	r2, #1
 8002966:	709a      	strb	r2, [r3, #2]
	backup->mtrBPWM = 0;
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <backup_reset+0x38>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	200004d8 	.word	0x200004d8

08002980 <mtrA_init>:

void mtrA_init(int16_t target, int16_t Kp, float Kd, float Ki, uint8_t reset_timer) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	ed87 0a02 	vstr	s0, [r7, #8]
 800298c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002990:	81fb      	strh	r3, [r7, #14]
 8002992:	460b      	mov	r3, r1
 8002994:	81bb      	strh	r3, [r7, #12]
 8002996:	4613      	mov	r3, r2
 8002998:	70fb      	strb	r3, [r7, #3]

	if (reset_timer)
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d004      	beq.n	80029aa <mtrA_init+0x2a>
		__HAL_TIM_SET_COUNTER(htim2Ptr, 0);
 80029a0:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <mtrA_init+0xc0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24

	motorA->dir = DIR_FWD;
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <mtrA_init+0xc4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2201      	movs	r2, #1
 80029b0:	705a      	strb	r2, [r3, #1]
	motorA->pwmVal = 0;
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <mtrA_init+0xc4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2200      	movs	r2, #0
 80029b8:	605a      	str	r2, [r3, #4]

	motorAPID->count = -(int16_t)__HAL_TIM_GET_COUNTER(htim2Ptr);       		// Counter (signed value)
 80029ba:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <mtrA_init+0xc0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	425b      	negs	r3, r3
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <mtrA_init+0xc8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	b212      	sxth	r2, r2
 80029ce:	801a      	strh	r2, [r3, #0]
	motorAPID->target = target;
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <mtrA_init+0xc8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	89fa      	ldrh	r2, [r7, #14]
 80029d6:	805a      	strh	r2, [r3, #2]
	motorAPID->error = motorAPID->target - motorAPID->count;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <mtrA_init+0xc8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <mtrA_init+0xc8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <mtrA_init+0xc8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	b212      	sxth	r2, r2
 80029f6:	809a      	strh	r2, [r3, #4]
	motorAPID->error_area = 0;  		// area under error - to calculate I for PI implementation
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <mtrA_init+0xc8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
	motorAPID->error_old = 0; 			// to calculate D for PID control
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <mtrA_init+0xc8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2200      	movs	r2, #0
 8002a06:	60da      	str	r2, [r3, #12]
	motorAPID->millisOld = HAL_GetTick();			// to calculate I and D for PID control
 8002a08:	f001 fc1c 	bl	8004244 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <mtrA_init+0xc8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	611a      	str	r2, [r3, #16]
	motorAPID->Kp = Kp;
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <mtrA_init+0xc8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002a1c:	ee07 2a90 	vmov	s15, r2
 8002a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a24:	edc3 7a05 	vstr	s15, [r3, #20]
	motorAPID->Kd = Kd;
 8002a28:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <mtrA_init+0xc8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	619a      	str	r2, [r3, #24]
	motorAPID->Ki = Ki;
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <mtrA_init+0xc8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	61da      	str	r2, [r3, #28]
}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	200004e4 	.word	0x200004e4
 8002a44:	200004c8 	.word	0x200004c8
 8002a48:	200004d0 	.word	0x200004d0

08002a4c <mtrB_init>:

void mtrB_init(int16_t target, int16_t Kp, float Kd, float Ki, uint8_t reset_timer) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a58:	edc7 0a01 	vstr	s1, [r7, #4]
 8002a5c:	81fb      	strh	r3, [r7, #14]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	81bb      	strh	r3, [r7, #12]
 8002a62:	4613      	mov	r3, r2
 8002a64:	70fb      	strb	r3, [r7, #3]

	if (reset_timer)
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <mtrB_init+0x2a>
		__HAL_TIM_SET_COUNTER(htim3Ptr, 0);
 8002a6c:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <mtrB_init+0xbc>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2200      	movs	r2, #0
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

	motorB->dir = DIR_FWD;
 8002a76:	4b25      	ldr	r3, [pc, #148]	; (8002b0c <mtrB_init+0xc0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	705a      	strb	r2, [r3, #1]
	motorB->pwmVal = 0;
 8002a7e:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <mtrB_init+0xc0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2200      	movs	r2, #0
 8002a84:	605a      	str	r2, [r3, #4]

	motorBPID->count = (int16_t)__HAL_TIM_GET_COUNTER(htim3Ptr);       		// Counter (signed value)
 8002a86:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <mtrB_init+0xbc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <mtrB_init+0xc4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	b212      	sxth	r2, r2
 8002a94:	801a      	strh	r2, [r3, #0]
	motorBPID->target = target;
 8002a96:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <mtrB_init+0xc4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	89fa      	ldrh	r2, [r7, #14]
 8002a9c:	805a      	strh	r2, [r3, #2]
	motorBPID->error = motorBPID->target - motorBPID->count;
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <mtrB_init+0xc4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <mtrB_init+0xc4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <mtrB_init+0xc4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	b212      	sxth	r2, r2
 8002abc:	809a      	strh	r2, [r3, #4]
	motorBPID->error_area = 0;  		// area under error - to calculate I for PI implementation
 8002abe:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <mtrB_init+0xc4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
	motorBPID->error_old = 0; 			// to calculate D for PID control
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <mtrB_init+0xc4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
	motorBPID->millisOld = HAL_GetTick();			// to calculate I and D for PID control
 8002ace:	f001 fbb9 	bl	8004244 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <mtrB_init+0xc4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	611a      	str	r2, [r3, #16]
	motorBPID->Kp = Kp;
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <mtrB_init+0xc4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002ae2:	ee07 2a90 	vmov	s15, r2
 8002ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aea:	edc3 7a05 	vstr	s15, [r3, #20]
	motorBPID->Kd = Kd;
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <mtrB_init+0xc4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	619a      	str	r2, [r3, #24]
	motorBPID->Ki = Ki;
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <mtrB_init+0xc4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	61da      	str	r2, [r3, #28]
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200004e8 	.word	0x200004e8
 8002b0c:	200004cc 	.word	0x200004cc
 8002b10:	200004d4 	.word	0x200004d4

08002b14 <mtrA_mov>:

void mtrA_mov(uint8_t direction, uint16_t speed) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	460a      	mov	r2, r1
 8002b1e:	71fb      	strb	r3, [r7, #7]
 8002b20:	4613      	mov	r3, r2
 8002b22:	80bb      	strh	r3, [r7, #4]

	// Backward
	if (direction == DIR_BCK) {
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <mtrA_mov+0x2c>
		MOTOR_AIN1_Clr();
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2108      	movs	r1, #8
 8002b2e:	4811      	ldr	r0, [pc, #68]	; (8002b74 <mtrA_mov+0x60>)
 8002b30:	f001 fef8 	bl	8004924 <HAL_GPIO_WritePin>
		MOTOR_AIN2_Set();
 8002b34:	2201      	movs	r2, #1
 8002b36:	2104      	movs	r1, #4
 8002b38:	480e      	ldr	r0, [pc, #56]	; (8002b74 <mtrA_mov+0x60>)
 8002b3a:	f001 fef3 	bl	8004924 <HAL_GPIO_WritePin>
 8002b3e:	e009      	b.n	8002b54 <mtrA_mov+0x40>
	}
	// Forward
	else {
		MOTOR_AIN1_Set();
 8002b40:	2201      	movs	r2, #1
 8002b42:	2108      	movs	r1, #8
 8002b44:	480b      	ldr	r0, [pc, #44]	; (8002b74 <mtrA_mov+0x60>)
 8002b46:	f001 feed 	bl	8004924 <HAL_GPIO_WritePin>
		MOTOR_AIN2_Clr();
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2104      	movs	r1, #4
 8002b4e:	4809      	ldr	r0, [pc, #36]	; (8002b74 <mtrA_mov+0x60>)
 8002b50:	f001 fee8 	bl	8004924 <HAL_GPIO_WritePin>
	}

	// Set speed
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 8002b54:	88bb      	ldrh	r3, [r7, #4]
 8002b56:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8002b5a:	d302      	bcc.n	8002b62 <mtrA_mov+0x4e>
 8002b5c:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002b60:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim8Ptr, PWMA_TIM_CH, speed);
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <mtrA_mov+0x64>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	88ba      	ldrh	r2, [r7, #4]
 8002b6a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40020000 	.word	0x40020000
 8002b78:	200004e0 	.word	0x200004e0

08002b7c <mtrB_mov>:

void mtrB_mov(uint8_t direction, uint16_t speed) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	460a      	mov	r2, r1
 8002b86:	71fb      	strb	r3, [r7, #7]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	80bb      	strh	r3, [r7, #4]

	// Backward
	if (direction == DIR_BCK) {
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <mtrB_mov+0x2c>
		MOTOR_BIN1_Clr();
 8002b92:	2200      	movs	r2, #0
 8002b94:	2110      	movs	r1, #16
 8002b96:	4811      	ldr	r0, [pc, #68]	; (8002bdc <mtrB_mov+0x60>)
 8002b98:	f001 fec4 	bl	8004924 <HAL_GPIO_WritePin>
		MOTOR_BIN2_Set();
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	480e      	ldr	r0, [pc, #56]	; (8002bdc <mtrB_mov+0x60>)
 8002ba2:	f001 febf 	bl	8004924 <HAL_GPIO_WritePin>
 8002ba6:	e009      	b.n	8002bbc <mtrB_mov+0x40>
	}
	// Forward
	else {
		MOTOR_BIN1_Set();
 8002ba8:	2201      	movs	r2, #1
 8002baa:	2110      	movs	r1, #16
 8002bac:	480b      	ldr	r0, [pc, #44]	; (8002bdc <mtrB_mov+0x60>)
 8002bae:	f001 feb9 	bl	8004924 <HAL_GPIO_WritePin>
		MOTOR_BIN2_Clr();
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2120      	movs	r1, #32
 8002bb6:	4809      	ldr	r0, [pc, #36]	; (8002bdc <mtrB_mov+0x60>)
 8002bb8:	f001 feb4 	bl	8004924 <HAL_GPIO_WritePin>
	}

	// Set speed
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 8002bbc:	88bb      	ldrh	r3, [r7, #4]
 8002bbe:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8002bc2:	d302      	bcc.n	8002bca <mtrB_mov+0x4e>
 8002bc4:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002bc8:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim8Ptr, PWMB_TIM_CH, speed);
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <mtrB_mov+0x64>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	88ba      	ldrh	r2, [r7, #4]
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40020000 	.word	0x40020000
 8002be0:	200004e0 	.word	0x200004e0

08002be4 <mtr_stop>:

/* Set params and stop both motors */
void mtr_stop() {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
	motorA->dir = DIR_FWD;
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <mtr_stop+0x44>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2201      	movs	r2, #1
 8002bee:	705a      	strb	r2, [r3, #1]
	motorA->pwmVal = 0;
 8002bf0:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <mtr_stop+0x44>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	605a      	str	r2, [r3, #4]
	motorB->dir = DIR_FWD;
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <mtr_stop+0x48>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	705a      	strb	r2, [r3, #1]
	motorB->pwmVal = 0;
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <mtr_stop+0x48>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2200      	movs	r2, #0
 8002c06:	605a      	str	r2, [r3, #4]
	mtrA_mov(DIR_FWD, 0);
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f7ff ff82 	bl	8002b14 <mtrA_mov>
	mtrB_mov(DIR_FWD, 0);
 8002c10:	2100      	movs	r1, #0
 8002c12:	2001      	movs	r0, #1
 8002c14:	f7ff ffb2 	bl	8002b7c <mtrB_mov>
	turnServo(STRAIGHT);
 8002c18:	2001      	movs	r0, #1
 8002c1a:	f000 fec3 	bl	80039a4 <turnServo>
	osDelay(100);
 8002c1e:	2064      	movs	r0, #100	; 0x64
 8002c20:	f006 f99e 	bl	8008f60 <osDelay>
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	200004c8 	.word	0x200004c8
 8002c2c:	200004cc 	.word	0x200004cc

08002c30 <mtr_mov>:

void mtr_mov(MotorData* motor) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	if (motor->suspend > 0) {
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d004      	beq.n	8002c4a <mtr_mov+0x1a>
		mtr_stop();
 8002c40:	f7ff ffd0 	bl	8002be4 <mtr_stop>
		mtr_continue();
 8002c44:	f000 f88a 	bl	8002d5c <mtr_continue>
		return;
 8002c48:	e01c      	b.n	8002c84 <mtr_mov+0x54>
	}
	if (motor == motorA)  {
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <mtr_mov+0x5c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d109      	bne.n	8002c68 <mtr_mov+0x38>
		mtrA_mov(motor->dir, motor->pwmVal);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	785a      	ldrb	r2, [r3, #1]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4610      	mov	r0, r2
 8002c62:	f7ff ff57 	bl	8002b14 <mtrA_mov>
 8002c66:	e00d      	b.n	8002c84 <mtr_mov+0x54>
	}
	else if (motor == motorB) {
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <mtr_mov+0x60>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d108      	bne.n	8002c84 <mtr_mov+0x54>
		mtrB_mov(motor->dir, motor->pwmVal);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	785a      	ldrb	r2, [r3, #1]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f7ff ff7c 	bl	8002b7c <mtrB_mov>
	}
}
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200004c8 	.word	0x200004c8
 8002c90:	200004cc 	.word	0x200004cc

08002c94 <mtr_SetParamAndMove>:

void mtr_SetParamAndMove(MotorData* motor, uint8_t param_dir, uint32_t param_pwmVal) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	72fb      	strb	r3, [r7, #11]
	motor->dir = param_dir;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	7afa      	ldrb	r2, [r7, #11]
 8002ca6:	705a      	strb	r2, [r3, #1]
	motor->pwmVal = param_pwmVal;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	605a      	str	r2, [r3, #4]
	mtr_mov(motor);
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff ffbe 	bl	8002c30 <mtr_mov>
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <mtr_suspend>:

void mtr_suspend(uint8_t mode) {
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
	if (mode > 3) return;
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d838      	bhi.n	8002d3e <mtr_suspend+0x82>
	if ((motorA->suspend != SUS_OFF) || (motorB->suspend != SUS_OFF)) return;	// Suspend is in effect / being resolved
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <mtr_suspend+0x90>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d135      	bne.n	8002d42 <mtr_suspend+0x86>
 8002cd6:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <mtr_suspend+0x94>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d130      	bne.n	8002d42 <mtr_suspend+0x86>
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ce6:	481b      	ldr	r0, [pc, #108]	; (8002d54 <mtr_suspend+0x98>)
 8002ce8:	f001 fe1c 	bl	8004924 <HAL_GPIO_WritePin>
	motorA->suspend = mode;
 8002cec:	4b17      	ldr	r3, [pc, #92]	; (8002d4c <mtr_suspend+0x90>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	79fa      	ldrb	r2, [r7, #7]
 8002cf2:	701a      	strb	r2, [r3, #0]
	motorB->suspend = mode;
 8002cf4:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <mtr_suspend+0x94>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	79fa      	ldrb	r2, [r7, #7]
 8002cfa:	701a      	strb	r2, [r3, #0]
	backup->servoDir = getServoDir();
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <mtr_suspend+0x9c>)
 8002cfe:	681c      	ldr	r4, [r3, #0]
 8002d00:	f000 fe68 	bl	80039d4 <getServoDir>
 8002d04:	4603      	mov	r3, r0
 8002d06:	7023      	strb	r3, [r4, #0]
	backup->mtrADir = motorA->dir;
 8002d08:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <mtr_suspend+0x90>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <mtr_suspend+0x9c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	7852      	ldrb	r2, [r2, #1]
 8002d12:	705a      	strb	r2, [r3, #1]
	backup->mtrAPWM = motorA->pwmVal;
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <mtr_suspend+0x90>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <mtr_suspend+0x9c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6852      	ldr	r2, [r2, #4]
 8002d1e:	605a      	str	r2, [r3, #4]
	backup->mtrBDir = motorB->dir;
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <mtr_suspend+0x94>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <mtr_suspend+0x9c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	7852      	ldrb	r2, [r2, #1]
 8002d2a:	709a      	strb	r2, [r3, #2]
	backup->mtrBPWM = motorB->pwmVal;
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <mtr_suspend+0x94>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <mtr_suspend+0x9c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6852      	ldr	r2, [r2, #4]
 8002d36:	609a      	str	r2, [r3, #8]
	mtr_stop();
 8002d38:	f7ff ff54 	bl	8002be4 <mtr_stop>
 8002d3c:	e002      	b.n	8002d44 <mtr_suspend+0x88>
	if (mode > 3) return;
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <mtr_suspend+0x88>
	if ((motorA->suspend != SUS_OFF) || (motorB->suspend != SUS_OFF)) return;	// Suspend is in effect / being resolved
 8002d42:	bf00      	nop
}
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd90      	pop	{r4, r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	200004c8 	.word	0x200004c8
 8002d50:	200004cc 	.word	0x200004cc
 8002d54:	40021000 	.word	0x40021000
 8002d58:	200004d8 	.word	0x200004d8

08002d5c <mtr_continue>:

void mtr_continue() {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
	if (!motorA->suspend) return;	// Not suspended or likely an error
 8002d60:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <mtr_continue+0xc4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d058      	beq.n	8002e1c <mtr_continue+0xc0>
	if ((motorA->suspend == SUS_BACK) || (motorA->suspend == SUS_STOPPID)) {	// Needs SOSBack
 8002d6a:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <mtr_continue+0xc4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d004      	beq.n	8002d7e <mtr_continue+0x22>
 8002d74:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <mtr_continue+0xc4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d101      	bne.n	8002d82 <mtr_continue+0x26>
		mtr_SOSBack();
 8002d7e:	f000 f857 	bl	8002e30 <mtr_SOSBack>
		//HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
	}
	if (motorA->suspend == SUS_STOPPID) {	// Stop PID, do not restore movement
 8002d82:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <mtr_continue+0xc4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d102      	bne.n	8002d92 <mtr_continue+0x36>
		stopPID();
 8002d8c:	f000 f996 	bl	80030bc <stopPID>
 8002d90:	e033      	b.n	8002dfa <mtr_continue+0x9e>
	}
	else {									// Restore movement
		turnServo(backup->servoDir);
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <mtr_continue+0xc8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fe03 	bl	80039a4 <turnServo>
		motorA->dir = backup->mtrADir;
 8002d9e:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <mtr_continue+0xc8>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4b1f      	ldr	r3, [pc, #124]	; (8002e20 <mtr_continue+0xc4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	7852      	ldrb	r2, [r2, #1]
 8002da8:	705a      	strb	r2, [r3, #1]
		motorA->pwmVal = backup->mtrAPWM;
 8002daa:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <mtr_continue+0xc8>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b1c      	ldr	r3, [pc, #112]	; (8002e20 <mtr_continue+0xc4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6852      	ldr	r2, [r2, #4]
 8002db4:	605a      	str	r2, [r3, #4]
		motorB->dir = backup->mtrBDir;
 8002db6:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <mtr_continue+0xc8>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <mtr_continue+0xcc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	7892      	ldrb	r2, [r2, #2]
 8002dc0:	705a      	strb	r2, [r3, #1]
		motorB->pwmVal = backup->mtrBPWM;
 8002dc2:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <mtr_continue+0xc8>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <mtr_continue+0xcc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6892      	ldr	r2, [r2, #8]
 8002dcc:	605a      	str	r2, [r3, #4]
		mtrA_mov(motorA->dir, motorA->pwmVal);
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <mtr_continue+0xc4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	785a      	ldrb	r2, [r3, #1]
 8002dd4:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <mtr_continue+0xc4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f7ff fe98 	bl	8002b14 <mtrA_mov>
		mtrB_mov(motorB->dir, motorB->pwmVal);
 8002de4:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <mtr_continue+0xcc>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	785a      	ldrb	r2, [r3, #1]
 8002dea:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <mtr_continue+0xcc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	4619      	mov	r1, r3
 8002df4:	4610      	mov	r0, r2
 8002df6:	f7ff fec1 	bl	8002b7c <mtrB_mov>
	}
	backup_reset();
 8002dfa:	f7ff fda3 	bl	8002944 <backup_reset>
	motorA->suspend = 0;
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <mtr_continue+0xc4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]
	motorB->suspend = 0;
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <mtr_continue+0xcc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_SET);
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e14:	4805      	ldr	r0, [pc, #20]	; (8002e2c <mtr_continue+0xd0>)
 8002e16:	f001 fd85 	bl	8004924 <HAL_GPIO_WritePin>
 8002e1a:	e000      	b.n	8002e1e <mtr_continue+0xc2>
	if (!motorA->suspend) return;	// Not suspended or likely an error
 8002e1c:	bf00      	nop
}
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200004c8 	.word	0x200004c8
 8002e24:	200004d8 	.word	0x200004d8
 8002e28:	200004cc 	.word	0x200004cc
 8002e2c:	40021000 	.word	0x40021000

08002e30 <mtr_SOSBack>:

/* Used in emergency cases when car is too close to obstacles only */
float mtr_SOSBack() {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
	mtrA_mov(DIR_BCK, 1800);
 8002e34:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7ff fe6b 	bl	8002b14 <mtrA_mov>
	mtrB_mov(DIR_BCK, 1800);
 8002e3e:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7ff fe9a 	bl	8002b7c <mtrB_mov>
	osDelay(500);
 8002e48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e4c:	f006 f888 	bl	8008f60 <osDelay>
	mtr_stop();
 8002e50:	f7ff fec8 	bl	8002be4 <mtr_stop>
	return SOSBACK_DIST_CNT / CNT_PER_CM;
 8002e54:	4b02      	ldr	r3, [pc, #8]	; (8002e60 <mtr_SOSBack+0x30>)
 8002e56:	ee07 3a90 	vmov	s15, r3
}
 8002e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	c12eb4b4 	.word	0xc12eb4b4

08002e64 <mtr_mov_cnt>:

void mtr_mov_cnt(int target_A, int target_B) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
	mtrA_init((int16_t)target_A, 1.2, 0.05, 0.0001, 1);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	2201      	movs	r2, #1
 8002e74:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002f04 <mtr_mov_cnt+0xa0>
 8002e78:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8002f08 <mtr_mov_cnt+0xa4>
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fd7e 	bl	8002980 <mtrA_init>
	mtrB_init((int16_t)target_B, 1.2, 0.05, 0.0001, 1);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	b21b      	sxth	r3, r3
 8002e88:	2201      	movs	r2, #1
 8002e8a:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8002f04 <mtr_mov_cnt+0xa0>
 8002e8e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8002f08 <mtr_mov_cnt+0xa4>
 8002e92:	2101      	movs	r1, #1
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fdd9 	bl	8002a4c <mtrB_init>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 8002e9a:	e019      	b.n	8002ed0 <mtr_mov_cnt+0x6c>
		PID_Control(motorA, motorAPID);
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <mtr_mov_cnt+0xa8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <mtr_mov_cnt+0xac>)
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f85c 	bl	8002f64 <PID_Control>
		PID_Control(motorB, motorBPID);
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <mtr_mov_cnt+0xb0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <mtr_mov_cnt+0xb4>)
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f854 	bl	8002f64 <PID_Control>
		mtr_mov(motorA);
 8002ebc:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <mtr_mov_cnt+0xa8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff feb5 	bl	8002c30 <mtr_mov>
		mtr_mov(motorB);
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <mtr_mov_cnt+0xb0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff feb0 	bl	8002c30 <mtr_mov>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <mtr_mov_cnt+0xac>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bfb8      	it	lt
 8002edc:	425b      	neglt	r3, r3
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b32      	cmp	r3, #50	; 0x32
 8002ee2:	d8db      	bhi.n	8002e9c <mtr_mov_cnt+0x38>
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <mtr_mov_cnt+0xb4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bfb8      	it	lt
 8002ef0:	425b      	neglt	r3, r3
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b32      	cmp	r3, #50	; 0x32
 8002ef6:	d8d1      	bhi.n	8002e9c <mtr_mov_cnt+0x38>
	}
	mtr_stop();
 8002ef8:	f7ff fe74 	bl	8002be4 <mtr_stop>
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	38d1b717 	.word	0x38d1b717
 8002f08:	3d4ccccd 	.word	0x3d4ccccd
 8002f0c:	200004c8 	.word	0x200004c8
 8002f10:	200004d0 	.word	0x200004d0
 8002f14:	200004cc 	.word	0x200004cc
 8002f18:	200004d4 	.word	0x200004d4

08002f1c <mtr_mov_cm>:
	}
	mtr_stop();
}


void mtr_mov_cm(float cm_A, float cm_B) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f26:	edc7 0a00 	vstr	s1, [r7]
	mtr_mov_cnt((int)(cm_A * CNT_PER_CM), (int)(cm_B * CNT_PER_CM));
 8002f2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f2e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002f60 <mtr_mov_cm+0x44>
 8002f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f36:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002f3a:	edd7 7a00 	vldr	s15, [r7]
 8002f3e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002f60 <mtr_mov_cm+0x44>
 8002f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f4a:	ee17 1a90 	vmov	r1, s15
 8002f4e:	ee16 0a90 	vmov	r0, s13
 8002f52:	f7ff ff87 	bl	8002e64 <mtr_mov_cnt>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	42928831 	.word	0x42928831

08002f64 <PID_Control>:

void PID_Control(MotorData* motor, MotorPIDData* motorPID) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
	  //Control Loop
	if (abs(motorPID->error)>MAX_PID_ERR) { //more than 100  difference
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bfb8      	it	lt
 8002f78:	425b      	neglt	r3, r3
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b32      	cmp	r3, #50	; 0x32
 8002f7e:	f240 8092 	bls.w	80030a6 <PID_Control+0x142>
  	    motorPID->error = motorPID->target - motorPID->count;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	b21a      	sxth	r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	809a      	strh	r2, [r3, #4]

  	    if (motorPID->error > 0)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	dd03      	ble.n	8002fae <PID_Control+0x4a>
        	motor->dir = DIR_FWD;	// Forward
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	705a      	strb	r2, [r3, #1]
 8002fac:	e002      	b.n	8002fb4 <PID_Control+0x50>
        else
        	motor->dir = DIR_BCK;	// Backward
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	705a      	strb	r2, [r3, #1]

        int32_t millisNow = HAL_GetTick();
 8002fb4:	f001 f946 	bl	8004244 <HAL_GetTick>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	617b      	str	r3, [r7, #20]
        int32_t dt = (millisNow - motorPID->millisOld); // time elapsed in millisecond
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	613b      	str	r3, [r7, #16]
        motorPID->millisOld = millisNow; // store the current time for next round
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	611a      	str	r2, [r3, #16]

        motorPID->error_area = motorPID->error_area + motorPID->error * dt; // area under error for Ki
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	441a      	add	r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	609a      	str	r2, [r3, #8]

        int32_t error_change = motorPID->error - motorPID->error_old; // change in error
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fea:	461a      	mov	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	60fb      	str	r3, [r7, #12]
        motorPID->error_old = motorPID->error; //store the error for next round
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	60da      	str	r2, [r3, #12]
        float error_rate = (float)error_change / dt; // for Kd
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003018:	edc7 7a02 	vstr	s15, [r7, #8]

        motor->pwmVal = abs((int32_t)(motorPID->error * motorPID->Kp + motorPID->error_area * motorPID->Ki + error_rate * motorPID->Kd)) / 2;  // PID
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003030:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	ee07 3a90 	vmov	s15, r3
 800303c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	edd3 7a07 	vldr	s15, [r3, #28]
 8003046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800304a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	edd3 6a06 	vldr	s13, [r3, #24]
 8003054:	edd7 7a02 	vldr	s15, [r7, #8]
 8003058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800305c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003064:	ee17 3a90 	vmov	r3, s15
 8003068:	2b00      	cmp	r3, #0
 800306a:	bfb8      	it	lt
 800306c:	425b      	neglt	r3, r3
 800306e:	0fda      	lsrs	r2, r3, #31
 8003070:	4413      	add	r3, r2
 8003072:	105b      	asrs	r3, r3, #1
 8003074:	461a      	mov	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	605a      	str	r2, [r3, #4]
        osDelay(10);
 800307a:	200a      	movs	r0, #10
 800307c:	f005 ff70 	bl	8008f60 <osDelay>
        if (motor->pwmVal > MAX_SPEED)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8003088:	d303      	bcc.n	8003092 <PID_Control+0x12e>
        	motor->pwmVal = MAX_SPEED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003090:	605a      	str	r2, [r3, #4]
        if (motor->pwmVal < MIN_SPEED)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800309a:	d20a      	bcs.n	80030b2 <PID_Control+0x14e>
        	motor-> pwmVal = MIN_SPEED;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80030a2:	605a      	str	r2, [r3, #4]
	} // if loop
	else {
		motor->dir = DIR_FWD;
		motor->pwmVal = 0;
	}
}
 80030a4:	e005      	b.n	80030b2 <PID_Control+0x14e>
		motor->dir = DIR_FWD;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	705a      	strb	r2, [r3, #1]
		motor->pwmVal = 0;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	605a      	str	r2, [r3, #4]
}
 80030b2:	bf00      	nop
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <stopPID>:

void stopPID() {
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
	motorAPID->error = 0;
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <stopPID+0x60>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2200      	movs	r2, #0
 80030c6:	809a      	strh	r2, [r3, #4]
	motorBPID->error = 0;
 80030c8:	4b15      	ldr	r3, [pc, #84]	; (8003120 <stopPID+0x64>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2200      	movs	r2, #0
 80030ce:	809a      	strh	r2, [r3, #4]
	motorAPID->target = motorAPID->count;
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <stopPID+0x60>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <stopPID+0x60>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80030dc:	805a      	strh	r2, [r3, #2]
	motorBPID->target = motorBPID->count;
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <stopPID+0x64>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <stopPID+0x64>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80030ea:	805a      	strh	r2, [r3, #2]
	mtr_stop();
 80030ec:	f7ff fd7a 	bl	8002be4 <mtr_stop>
	// Also clear backup
	backup->mtrADir = DIR_FWD;
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <stopPID+0x68>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2201      	movs	r2, #1
 80030f6:	705a      	strb	r2, [r3, #1]
	backup->mtrBDir = DIR_FWD;
 80030f8:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <stopPID+0x68>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2201      	movs	r2, #1
 80030fe:	709a      	strb	r2, [r3, #2]
	backup->mtrAPWM = 0;
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <stopPID+0x68>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2200      	movs	r2, #0
 8003106:	605a      	str	r2, [r3, #4]
	backup->mtrBPWM = 0;
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <stopPID+0x68>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2200      	movs	r2, #0
 800310e:	609a      	str	r2, [r3, #8]
	backup->servoDir = STRAIGHT;
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <stopPID+0x68>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}
 800311c:	200004d0 	.word	0x200004d0
 8003120:	200004d4 	.word	0x200004d4
 8003124:	200004d8 	.word	0x200004d8

08003128 <turn>:

void turn(float target_ori) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	ed87 0a01 	vstr	s0, [r7, #4]
	//osSemaphoreWait(*ori_semaphoreHandlePtr, osWaitForever);
	float turning_angle = target_ori - (*ori);
 8003132:	4b9f      	ldr	r3, [pc, #636]	; (80033b0 <turn+0x288>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	edd3 7a00 	vldr	s15, [r3]
 800313a:	ed97 7a01 	vldr	s14, [r7, #4]
 800313e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003142:	edc7 7a07 	vstr	s15, [r7, #28]
	//osSemaphoreRelease(*ori_semaphoreHandlePtr);
	if (abs(turning_angle) < MAX_ORI_ERR)		// Too small, turn may not be accurate
 8003146:	edd7 7a07 	vldr	s15, [r7, #28]
 800314a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800314e:	ee17 3a90 	vmov	r3, s15
 8003152:	2b00      	cmp	r3, #0
 8003154:	bfb8      	it	lt
 8003156:	425b      	neglt	r3, r3
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003160:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316c:	f100 811b 	bmi.w	80033a6 <turn+0x27e>
		return;
	if (turning_angle < 0)
 8003170:	edd7 7a07 	vldr	s15, [r7, #28]
 8003174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317c:	d507      	bpl.n	800318e <turn+0x66>
		turning_angle += 360;
 800317e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003182:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80033b4 <turn+0x28c>
 8003186:	ee77 7a87 	vadd.f32	s15, s15, s14
 800318a:	edc7 7a07 	vstr	s15, [r7, #28]

	uint8_t near_0 = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	76fb      	strb	r3, [r7, #27]
	if ((target_ori < MAX_ORI_ERR) || (target_ori > 360 - MAX_ORI_ERR)) {
 8003192:	edd7 7a01 	vldr	s15, [r7, #4]
 8003196:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800319a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800319e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a2:	d408      	bmi.n	80031b6 <turn+0x8e>
 80031a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80031a8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80033b8 <turn+0x290>
 80031ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b4:	dd01      	ble.n	80031ba <turn+0x92>
		near_0 = 1;
 80031b6:	2301      	movs	r3, #1
 80031b8:	76fb      	strb	r3, [r7, #27]
	}

	uint8_t mtr_dir = 1;	// 0: stop, 1: fwd, 2: bck
 80031ba:	2301      	movs	r3, #1
 80031bc:	76bb      	strb	r3, [r7, #26]

	while (mtr_dir) {
 80031be:	e0eb      	b.n	8003398 <turn+0x270>
		if (turning_angle <= 180) {	// Turn left
 80031c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80031c4:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80033bc <turn+0x294>
 80031c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	d82e      	bhi.n	8003230 <turn+0x108>
			if (mtr_dir == 1) {
 80031d2:	7ebb      	ldrb	r3, [r7, #26]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d115      	bne.n	8003204 <turn+0xdc>
				turnServo(LEFT);
 80031d8:	2000      	movs	r0, #0
 80031da:	f000 fbe3 	bl	80039a4 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_FWD, 1200);
 80031de:	4b78      	ldr	r3, [pc, #480]	; (80033c0 <turn+0x298>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80031e6:	2101      	movs	r1, #1
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fd53 	bl	8002c94 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_FWD, 1200);
 80031ee:	4b75      	ldr	r3, [pc, #468]	; (80033c4 <turn+0x29c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80031f6:	2101      	movs	r1, #1
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fd4b 	bl	8002c94 <mtr_SetParamAndMove>
				mtr_dir = 2;
 80031fe:	2302      	movs	r3, #2
 8003200:	76bb      	strb	r3, [r7, #26]
 8003202:	e043      	b.n	800328c <turn+0x164>
			}
			else {
				turnServo(RIGHT);
 8003204:	2002      	movs	r0, #2
 8003206:	f000 fbcd 	bl	80039a4 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_BCK, 1200);
 800320a:	4b6d      	ldr	r3, [pc, #436]	; (80033c0 <turn+0x298>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fd3d 	bl	8002c94 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_BCK, 1200);
 800321a:	4b6a      	ldr	r3, [pc, #424]	; (80033c4 <turn+0x29c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fd35 	bl	8002c94 <mtr_SetParamAndMove>
				mtr_dir = 1;
 800322a:	2301      	movs	r3, #1
 800322c:	76bb      	strb	r3, [r7, #26]
 800322e:	e02d      	b.n	800328c <turn+0x164>
			}
		}
		else {
			if (mtr_dir == 1) {
 8003230:	7ebb      	ldrb	r3, [r7, #26]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d115      	bne.n	8003262 <turn+0x13a>
				turnServo(RIGHT);
 8003236:	2002      	movs	r0, #2
 8003238:	f000 fbb4 	bl	80039a4 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_FWD, 1200);
 800323c:	4b60      	ldr	r3, [pc, #384]	; (80033c0 <turn+0x298>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003244:	2101      	movs	r1, #1
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fd24 	bl	8002c94 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_FWD, 1200);
 800324c:	4b5d      	ldr	r3, [pc, #372]	; (80033c4 <turn+0x29c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fd1c 	bl	8002c94 <mtr_SetParamAndMove>
				mtr_dir = 2;
 800325c:	2302      	movs	r3, #2
 800325e:	76bb      	strb	r3, [r7, #26]
 8003260:	e014      	b.n	800328c <turn+0x164>
			}
			else {
				turnServo(LEFT);
 8003262:	2000      	movs	r0, #0
 8003264:	f000 fb9e 	bl	80039a4 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_BCK, 1200);
 8003268:	4b55      	ldr	r3, [pc, #340]	; (80033c0 <turn+0x298>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fd0e 	bl	8002c94 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_BCK, 1200);
 8003278:	4b52      	ldr	r3, [pc, #328]	; (80033c4 <turn+0x29c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fd06 	bl	8002c94 <mtr_SetParamAndMove>
				mtr_dir = 1;
 8003288:	2301      	movs	r3, #1
 800328a:	76bb      	strb	r3, [r7, #26]
			}
		}
		if (!near_0) {
 800328c:	7efb      	ldrb	r3, [r7, #27]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d129      	bne.n	80032e6 <turn+0x1be>
			for (int i = 0; i < 100; i++) {
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	e022      	b.n	80032de <turn+0x1b6>
				if (abs((*ori) - target_ori) < MAX_ORI_ERR) {
 8003298:	4b45      	ldr	r3, [pc, #276]	; (80033b0 <turn+0x288>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	ed93 7a00 	vldr	s14, [r3]
 80032a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80032a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ac:	ee17 3a90 	vmov	r3, s15
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bfb8      	it	lt
 80032b4:	425b      	neglt	r3, r3
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032be:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80032c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ca:	d502      	bpl.n	80032d2 <turn+0x1aa>
					mtr_dir = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	76bb      	strb	r3, [r7, #26]
					break;
 80032d0:	e060      	b.n	8003394 <turn+0x26c>
				}
				osDelay(5);
 80032d2:	2005      	movs	r0, #5
 80032d4:	f005 fe44 	bl	8008f60 <osDelay>
			for (int i = 0; i < 100; i++) {
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3301      	adds	r3, #1
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b63      	cmp	r3, #99	; 0x63
 80032e2:	ddd9      	ble.n	8003298 <turn+0x170>
 80032e4:	e056      	b.n	8003394 <turn+0x26c>
			}
		}
		else {
			float bound_lo, bound_hi;
			if (target_ori > 350) {
 80032e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ea:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80033c8 <turn+0x2a0>
 80032ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f6:	dd14      	ble.n	8003322 <turn+0x1fa>
				bound_lo = target_ori - MAX_ORI_ERR;
 80032f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80032fc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003300:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003304:	edc7 7a04 	vstr	s15, [r7, #16]
				bound_hi = target_ori + MAX_ORI_ERR - 360;
 8003308:	edd7 7a01 	vldr	s15, [r7, #4]
 800330c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003310:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003314:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80033b4 <turn+0x28c>
 8003318:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800331c:	edc7 7a03 	vstr	s15, [r7, #12]
 8003320:	e013      	b.n	800334a <turn+0x222>
			}
			else {
				bound_lo = target_ori - MAX_ORI_ERR + 360;
 8003322:	edd7 7a01 	vldr	s15, [r7, #4]
 8003326:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800332a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800332e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80033b4 <turn+0x28c>
 8003332:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003336:	edc7 7a04 	vstr	s15, [r7, #16]
				bound_hi = target_ori + MAX_ORI_ERR;
 800333a:	edd7 7a01 	vldr	s15, [r7, #4]
 800333e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003342:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003346:	edc7 7a03 	vstr	s15, [r7, #12]
			}
			for (int i = 0; i < 100; i++) {
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	e01e      	b.n	800338e <turn+0x266>
				if (((*ori) > bound_lo) || ((*ori) < bound_hi)) {
 8003350:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <turn+0x288>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	ed97 7a04 	vldr	s14, [r7, #16]
 800335c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	d40a      	bmi.n	800337c <turn+0x254>
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <turn+0x288>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	edd3 7a00 	vldr	s15, [r3]
 800336e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337a:	dd02      	ble.n	8003382 <turn+0x25a>
					mtr_dir = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	76bb      	strb	r3, [r7, #26]
					break;
 8003380:	e008      	b.n	8003394 <turn+0x26c>
				}
				osDelay(5);
 8003382:	2005      	movs	r0, #5
 8003384:	f005 fdec 	bl	8008f60 <osDelay>
			for (int i = 0; i < 100; i++) {
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	3301      	adds	r3, #1
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b63      	cmp	r3, #99	; 0x63
 8003392:	dddd      	ble.n	8003350 <turn+0x228>
			}
		}
		mtr_stop();
 8003394:	f7ff fc26 	bl	8002be4 <mtr_stop>
	while (mtr_dir) {
 8003398:	7ebb      	ldrb	r3, [r7, #26]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f47f af10 	bne.w	80031c0 <turn+0x98>
	}
	mtr_stop();
 80033a0:	f7ff fc20 	bl	8002be4 <mtr_stop>
 80033a4:	e000      	b.n	80033a8 <turn+0x280>
		return;
 80033a6:	bf00      	nop
}
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	200004dc 	.word	0x200004dc
 80033b4:	43b40000 	.word	0x43b40000
 80033b8:	43b34000 	.word	0x43b34000
 80033bc:	43340000 	.word	0x43340000
 80033c0:	200004c8 	.word	0x200004c8
 80033c4:	200004cc 	.word	0x200004cc
 80033c8:	43af0000 	.word	0x43af0000

080033cc <executeInstruction>:

/*
 * @brief Run instruction inst
 * @retval Distance moved in cm (linear). If execute turn, always return 0 even if SOSBack is called.
 */
float executeInstruction(Instruction* inst, CompleteError* cpltErr) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
	float retval;
	if (inst->type == INST_TYPE_GOSTRAIGHT) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	785b      	ldrb	r3, [r3, #1]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d12c      	bne.n	8003438 <executeInstruction+0x6c>
		mtr_mov_cm((float)inst->val, (float)inst->val);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033e4:	ee07 3a90 	vmov	s15, r3
 80033e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033f2:	ee07 3a10 	vmov	s14, r3
 80033f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80033fa:	eef0 0a47 	vmov.f32	s1, s14
 80033fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003402:	f7ff fd8b 	bl	8002f1c <mtr_mov_cm>
		retval = ((float)(motorAPID->count + motorBPID->count) / 2) / CNT_PER_CM;
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <executeInstruction+0xbc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800340e:	461a      	mov	r2, r3
 8003410:	4b1e      	ldr	r3, [pc, #120]	; (800348c <executeInstruction+0xc0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003418:	4413      	add	r3, r2
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003422:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003426:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800342a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003490 <executeInstruction+0xc4>
 800342e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003432:	edc7 7a03 	vstr	s15, [r7, #12]
 8003436:	e015      	b.n	8003464 <executeInstruction+0x98>
	}
	else if (inst->type == INST_TYPE_TURN) {
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d10e      	bne.n	800345e <executeInstruction+0x92>
		turn((float)inst->val);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800344e:	eeb0 0a67 	vmov.f32	s0, s15
 8003452:	f7ff fe69 	bl	8003128 <turn>
		retval = 0;
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e002      	b.n	8003464 <executeInstruction+0x98>
	}
	else {
		return 0;
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	e00a      	b.n	800347a <executeInstruction+0xae>
	}
	cpltErr->finished = 1;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2201      	movs	r2, #1
 8003468:	719a      	strb	r2, [r3, #6]
	if (cpltErr->type == CPLTERR_TYPE_UNDEFINED) {
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	785b      	ldrb	r3, [r3, #1]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d102      	bne.n	8003478 <executeInstruction+0xac>
		cpltErr->type = CPLTERR_TYPE_CPLT;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2200      	movs	r2, #0
 8003476:	705a      	strb	r2, [r3, #1]
	}
	return retval;
 8003478:	68fb      	ldr	r3, [r7, #12]
}
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eeb0 0a67 	vmov.f32	s0, s15
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	200004d0 	.word	0x200004d0
 800348c:	200004d4 	.word	0x200004d4
 8003490:	42928831 	.word	0x42928831

08003494 <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800349a:	2300      	movs	r3, #0
 800349c:	71fb      	strb	r3, [r7, #7]
 800349e:	e026      	b.n	80034ee <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	3b50      	subs	r3, #80	; 0x50
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f82b 	bl	8003504 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80034ae:	2100      	movs	r1, #0
 80034b0:	2000      	movs	r0, #0
 80034b2:	f000 f827 	bl	8003504 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80034b6:	2100      	movs	r1, #0
 80034b8:	2010      	movs	r0, #16
 80034ba:	f000 f823 	bl	8003504 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80034be:	2300      	movs	r3, #0
 80034c0:	71bb      	strb	r3, [r7, #6]
 80034c2:	e00d      	b.n	80034e0 <OLED_Refresh_Gram+0x4c>
 80034c4:	79ba      	ldrb	r2, [r7, #6]
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	490d      	ldr	r1, [pc, #52]	; (8003500 <OLED_Refresh_Gram+0x6c>)
 80034ca:	00d2      	lsls	r2, r2, #3
 80034cc:	440a      	add	r2, r1
 80034ce:	4413      	add	r3, r2
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2101      	movs	r1, #1
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f815 	bl	8003504 <OLED_WR_Byte>
 80034da:	79bb      	ldrb	r3, [r7, #6]
 80034dc:	3301      	adds	r3, #1
 80034de:	71bb      	strb	r3, [r7, #6]
 80034e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	daed      	bge.n	80034c4 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	3301      	adds	r3, #1
 80034ec:	71fb      	strb	r3, [r7, #7]
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	2b07      	cmp	r3, #7
 80034f2:	d9d5      	bls.n	80034a0 <OLED_Refresh_Gram+0xc>
	}   
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	200004f0 	.word	0x200004f0

08003504 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	460a      	mov	r2, r1
 800350e:	71fb      	strb	r3, [r7, #7]
 8003510:	4613      	mov	r3, r2
 8003512:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8003514:	79bb      	ldrb	r3, [r7, #6]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d006      	beq.n	8003528 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800351a:	2201      	movs	r2, #1
 800351c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003520:	481c      	ldr	r0, [pc, #112]	; (8003594 <OLED_WR_Byte+0x90>)
 8003522:	f001 f9ff 	bl	8004924 <HAL_GPIO_WritePin>
 8003526:	e005      	b.n	8003534 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8003528:	2200      	movs	r2, #0
 800352a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800352e:	4819      	ldr	r0, [pc, #100]	; (8003594 <OLED_WR_Byte+0x90>)
 8003530:	f001 f9f8 	bl	8004924 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8003534:	2300      	movs	r3, #0
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	e01e      	b.n	8003578 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800353a:	2200      	movs	r2, #0
 800353c:	2120      	movs	r1, #32
 800353e:	4815      	ldr	r0, [pc, #84]	; (8003594 <OLED_WR_Byte+0x90>)
 8003540:	f001 f9f0 	bl	8004924 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	2b00      	cmp	r3, #0
 800354a:	da05      	bge.n	8003558 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800354c:	2201      	movs	r2, #1
 800354e:	2140      	movs	r1, #64	; 0x40
 8003550:	4810      	ldr	r0, [pc, #64]	; (8003594 <OLED_WR_Byte+0x90>)
 8003552:	f001 f9e7 	bl	8004924 <HAL_GPIO_WritePin>
 8003556:	e004      	b.n	8003562 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8003558:	2200      	movs	r2, #0
 800355a:	2140      	movs	r1, #64	; 0x40
 800355c:	480d      	ldr	r0, [pc, #52]	; (8003594 <OLED_WR_Byte+0x90>)
 800355e:	f001 f9e1 	bl	8004924 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8003562:	2201      	movs	r2, #1
 8003564:	2120      	movs	r1, #32
 8003566:	480b      	ldr	r0, [pc, #44]	; (8003594 <OLED_WR_Byte+0x90>)
 8003568:	f001 f9dc 	bl	8004924 <HAL_GPIO_WritePin>
		dat<<=1;   
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	3301      	adds	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b07      	cmp	r3, #7
 800357c:	d9dd      	bls.n	800353a <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800357e:	2201      	movs	r2, #1
 8003580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003584:	4803      	ldr	r0, [pc, #12]	; (8003594 <OLED_WR_Byte+0x90>)
 8003586:	f001 f9cd 	bl	8004924 <HAL_GPIO_WritePin>
} 
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000

08003598 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800359e:	2300      	movs	r3, #0
 80035a0:	71fb      	strb	r3, [r7, #7]
 80035a2:	e014      	b.n	80035ce <OLED_Clear+0x36>
 80035a4:	2300      	movs	r3, #0
 80035a6:	71bb      	strb	r3, [r7, #6]
 80035a8:	e00a      	b.n	80035c0 <OLED_Clear+0x28>
 80035aa:	79ba      	ldrb	r2, [r7, #6]
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	490c      	ldr	r1, [pc, #48]	; (80035e0 <OLED_Clear+0x48>)
 80035b0:	00d2      	lsls	r2, r2, #3
 80035b2:	440a      	add	r2, r1
 80035b4:	4413      	add	r3, r2
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	79bb      	ldrb	r3, [r7, #6]
 80035bc:	3301      	adds	r3, #1
 80035be:	71bb      	strb	r3, [r7, #6]
 80035c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	daf0      	bge.n	80035aa <OLED_Clear+0x12>
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	3301      	adds	r3, #1
 80035cc:	71fb      	strb	r3, [r7, #7]
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	2b07      	cmp	r3, #7
 80035d2:	d9e7      	bls.n	80035a4 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80035d4:	f7ff ff5e 	bl	8003494 <OLED_Refresh_Gram>
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	200004f0 	.word	0x200004f0

080035e4 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	71fb      	strb	r3, [r7, #7]
 80035ee:	460b      	mov	r3, r1
 80035f0:	71bb      	strb	r3, [r7, #6]
 80035f2:	4613      	mov	r3, r2
 80035f4:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	db41      	blt.n	8003686 <OLED_DrawPoint+0xa2>
 8003602:	79bb      	ldrb	r3, [r7, #6]
 8003604:	2b3f      	cmp	r3, #63	; 0x3f
 8003606:	d83e      	bhi.n	8003686 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003608:	79bb      	ldrb	r3, [r7, #6]
 800360a:	08db      	lsrs	r3, r3, #3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f1c3 0307 	rsb	r3, r3, #7
 8003612:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003614:	79bb      	ldrb	r3, [r7, #6]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800361c:	7b7b      	ldrb	r3, [r7, #13]
 800361e:	f1c3 0307 	rsb	r3, r3, #7
 8003622:	2201      	movs	r2, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800362a:	797b      	ldrb	r3, [r7, #5]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d012      	beq.n	8003656 <OLED_DrawPoint+0x72>
 8003630:	79fa      	ldrb	r2, [r7, #7]
 8003632:	7bbb      	ldrb	r3, [r7, #14]
 8003634:	4917      	ldr	r1, [pc, #92]	; (8003694 <OLED_DrawPoint+0xb0>)
 8003636:	00d2      	lsls	r2, r2, #3
 8003638:	440a      	add	r2, r1
 800363a:	4413      	add	r3, r2
 800363c:	7818      	ldrb	r0, [r3, #0]
 800363e:	79fa      	ldrb	r2, [r7, #7]
 8003640:	7bbb      	ldrb	r3, [r7, #14]
 8003642:	7bf9      	ldrb	r1, [r7, #15]
 8003644:	4301      	orrs	r1, r0
 8003646:	b2c8      	uxtb	r0, r1
 8003648:	4912      	ldr	r1, [pc, #72]	; (8003694 <OLED_DrawPoint+0xb0>)
 800364a:	00d2      	lsls	r2, r2, #3
 800364c:	440a      	add	r2, r1
 800364e:	4413      	add	r3, r2
 8003650:	4602      	mov	r2, r0
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	e018      	b.n	8003688 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8003656:	79fa      	ldrb	r2, [r7, #7]
 8003658:	7bbb      	ldrb	r3, [r7, #14]
 800365a:	490e      	ldr	r1, [pc, #56]	; (8003694 <OLED_DrawPoint+0xb0>)
 800365c:	00d2      	lsls	r2, r2, #3
 800365e:	440a      	add	r2, r1
 8003660:	4413      	add	r3, r2
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	b25a      	sxtb	r2, r3
 8003666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366a:	43db      	mvns	r3, r3
 800366c:	b25b      	sxtb	r3, r3
 800366e:	4013      	ands	r3, r2
 8003670:	b259      	sxtb	r1, r3
 8003672:	79fa      	ldrb	r2, [r7, #7]
 8003674:	7bbb      	ldrb	r3, [r7, #14]
 8003676:	b2c8      	uxtb	r0, r1
 8003678:	4906      	ldr	r1, [pc, #24]	; (8003694 <OLED_DrawPoint+0xb0>)
 800367a:	00d2      	lsls	r2, r2, #3
 800367c:	440a      	add	r2, r1
 800367e:	4413      	add	r3, r2
 8003680:	4602      	mov	r2, r0
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	e000      	b.n	8003688 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8003686:	bf00      	nop
}
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	200004f0 	.word	0x200004f0

08003698 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	4604      	mov	r4, r0
 80036a0:	4608      	mov	r0, r1
 80036a2:	4611      	mov	r1, r2
 80036a4:	461a      	mov	r2, r3
 80036a6:	4623      	mov	r3, r4
 80036a8:	71fb      	strb	r3, [r7, #7]
 80036aa:	4603      	mov	r3, r0
 80036ac:	71bb      	strb	r3, [r7, #6]
 80036ae:	460b      	mov	r3, r1
 80036b0:	717b      	strb	r3, [r7, #5]
 80036b2:	4613      	mov	r3, r2
 80036b4:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80036b6:	79bb      	ldrb	r3, [r7, #6]
 80036b8:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80036ba:	797b      	ldrb	r3, [r7, #5]
 80036bc:	3b20      	subs	r3, #32
 80036be:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	73bb      	strb	r3, [r7, #14]
 80036c4:	e04d      	b.n	8003762 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80036c6:	793b      	ldrb	r3, [r7, #4]
 80036c8:	2b0c      	cmp	r3, #12
 80036ca:	d10b      	bne.n	80036e4 <OLED_ShowChar+0x4c>
 80036cc:	797a      	ldrb	r2, [r7, #5]
 80036ce:	7bb9      	ldrb	r1, [r7, #14]
 80036d0:	4828      	ldr	r0, [pc, #160]	; (8003774 <OLED_ShowChar+0xdc>)
 80036d2:	4613      	mov	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4403      	add	r3, r0
 80036dc:	440b      	add	r3, r1
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	73fb      	strb	r3, [r7, #15]
 80036e2:	e007      	b.n	80036f4 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80036e4:	797a      	ldrb	r2, [r7, #5]
 80036e6:	7bbb      	ldrb	r3, [r7, #14]
 80036e8:	4923      	ldr	r1, [pc, #140]	; (8003778 <OLED_ShowChar+0xe0>)
 80036ea:	0112      	lsls	r2, r2, #4
 80036ec:	440a      	add	r2, r1
 80036ee:	4413      	add	r3, r2
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80036f4:	2300      	movs	r3, #0
 80036f6:	737b      	strb	r3, [r7, #13]
 80036f8:	e02d      	b.n	8003756 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80036fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	da07      	bge.n	8003712 <OLED_ShowChar+0x7a>
 8003702:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003706:	79b9      	ldrb	r1, [r7, #6]
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ff6a 	bl	80035e4 <OLED_DrawPoint>
 8003710:	e00c      	b.n	800372c <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8003712:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003716:	2b00      	cmp	r3, #0
 8003718:	bf0c      	ite	eq
 800371a:	2301      	moveq	r3, #1
 800371c:	2300      	movne	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	79b9      	ldrb	r1, [r7, #6]
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff ff5c 	bl	80035e4 <OLED_DrawPoint>
			temp<<=1;
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
			y++;
 8003732:	79bb      	ldrb	r3, [r7, #6]
 8003734:	3301      	adds	r3, #1
 8003736:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003738:	79ba      	ldrb	r2, [r7, #6]
 800373a:	7b3b      	ldrb	r3, [r7, #12]
 800373c:	1ad2      	subs	r2, r2, r3
 800373e:	793b      	ldrb	r3, [r7, #4]
 8003740:	429a      	cmp	r2, r3
 8003742:	d105      	bne.n	8003750 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8003744:	7b3b      	ldrb	r3, [r7, #12]
 8003746:	71bb      	strb	r3, [r7, #6]
				x++;
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	3301      	adds	r3, #1
 800374c:	71fb      	strb	r3, [r7, #7]
				break;
 800374e:	e005      	b.n	800375c <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8003750:	7b7b      	ldrb	r3, [r7, #13]
 8003752:	3301      	adds	r3, #1
 8003754:	737b      	strb	r3, [r7, #13]
 8003756:	7b7b      	ldrb	r3, [r7, #13]
 8003758:	2b07      	cmp	r3, #7
 800375a:	d9ce      	bls.n	80036fa <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800375c:	7bbb      	ldrb	r3, [r7, #14]
 800375e:	3301      	adds	r3, #1
 8003760:	73bb      	strb	r3, [r7, #14]
 8003762:	7bba      	ldrb	r2, [r7, #14]
 8003764:	793b      	ldrb	r3, [r7, #4]
 8003766:	429a      	cmp	r2, r3
 8003768:	d3ad      	bcc.n	80036c6 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	bd90      	pop	{r4, r7, pc}
 8003774:	0800fa98 	.word	0x0800fa98
 8003778:	0800ff0c 	.word	0x0800ff0c

0800377c <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af02      	add	r7, sp, #8
 8003782:	4603      	mov	r3, r0
 8003784:	603a      	str	r2, [r7, #0]
 8003786:	71fb      	strb	r3, [r7, #7]
 8003788:	460b      	mov	r3, r1
 800378a:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800378c:	e01f      	b.n	80037ce <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	2b7a      	cmp	r3, #122	; 0x7a
 8003792:	d904      	bls.n	800379e <OLED_ShowString+0x22>
 8003794:	2300      	movs	r3, #0
 8003796:	71fb      	strb	r3, [r7, #7]
 8003798:	79bb      	ldrb	r3, [r7, #6]
 800379a:	3310      	adds	r3, #16
 800379c:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800379e:	79bb      	ldrb	r3, [r7, #6]
 80037a0:	2b3a      	cmp	r3, #58	; 0x3a
 80037a2:	d905      	bls.n	80037b0 <OLED_ShowString+0x34>
 80037a4:	2300      	movs	r3, #0
 80037a6:	71fb      	strb	r3, [r7, #7]
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	71bb      	strb	r3, [r7, #6]
 80037ac:	f7ff fef4 	bl	8003598 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	781a      	ldrb	r2, [r3, #0]
 80037b4:	79b9      	ldrb	r1, [r7, #6]
 80037b6:	79f8      	ldrb	r0, [r7, #7]
 80037b8:	2301      	movs	r3, #1
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	230c      	movs	r3, #12
 80037be:	f7ff ff6b 	bl	8003698 <OLED_ShowChar>
        x+=8;
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	3308      	adds	r3, #8
 80037c6:	71fb      	strb	r3, [r7, #7]
        p++;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	3301      	adds	r3, #1
 80037cc:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1db      	bne.n	800378e <OLED_ShowString+0x12>
    }  
}	 
 80037d6:	bf00      	nop
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <OLED_Init>:

void OLED_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80037e4:	f002 f84e 	bl	8005884 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80037e8:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <OLED_Init+0x110>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a40      	ldr	r2, [pc, #256]	; (80038f0 <OLED_Init+0x110>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	4b3e      	ldr	r3, [pc, #248]	; (80038f0 <OLED_Init+0x110>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a3d      	ldr	r2, [pc, #244]	; (80038f0 <OLED_Init+0x110>)
 80037fa:	f023 0304 	bic.w	r3, r3, #4
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8003800:	f002 f854 	bl	80058ac <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8003804:	2200      	movs	r2, #0
 8003806:	2180      	movs	r1, #128	; 0x80
 8003808:	483a      	ldr	r0, [pc, #232]	; (80038f4 <OLED_Init+0x114>)
 800380a:	f001 f88b 	bl	8004924 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800380e:	2064      	movs	r0, #100	; 0x64
 8003810:	f000 fd24 	bl	800425c <HAL_Delay>
	OLED_RST_Set();
 8003814:	2201      	movs	r2, #1
 8003816:	2180      	movs	r1, #128	; 0x80
 8003818:	4836      	ldr	r0, [pc, #216]	; (80038f4 <OLED_Init+0x114>)
 800381a:	f001 f883 	bl	8004924 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800381e:	2100      	movs	r1, #0
 8003820:	20ae      	movs	r0, #174	; 0xae
 8003822:	f7ff fe6f 	bl	8003504 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8003826:	2100      	movs	r1, #0
 8003828:	20d5      	movs	r0, #213	; 0xd5
 800382a:	f7ff fe6b 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800382e:	2100      	movs	r1, #0
 8003830:	2050      	movs	r0, #80	; 0x50
 8003832:	f7ff fe67 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8003836:	2100      	movs	r1, #0
 8003838:	20a8      	movs	r0, #168	; 0xa8
 800383a:	f7ff fe63 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800383e:	2100      	movs	r1, #0
 8003840:	203f      	movs	r0, #63	; 0x3f
 8003842:	f7ff fe5f 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8003846:	2100      	movs	r1, #0
 8003848:	20d3      	movs	r0, #211	; 0xd3
 800384a:	f7ff fe5b 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800384e:	2100      	movs	r1, #0
 8003850:	2000      	movs	r0, #0
 8003852:	f7ff fe57 	bl	8003504 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8003856:	2100      	movs	r1, #0
 8003858:	2040      	movs	r0, #64	; 0x40
 800385a:	f7ff fe53 	bl	8003504 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800385e:	2100      	movs	r1, #0
 8003860:	208d      	movs	r0, #141	; 0x8d
 8003862:	f7ff fe4f 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8003866:	2100      	movs	r1, #0
 8003868:	2014      	movs	r0, #20
 800386a:	f7ff fe4b 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800386e:	2100      	movs	r1, #0
 8003870:	2020      	movs	r0, #32
 8003872:	f7ff fe47 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8003876:	2100      	movs	r1, #0
 8003878:	2002      	movs	r0, #2
 800387a:	f7ff fe43 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800387e:	2100      	movs	r1, #0
 8003880:	20a1      	movs	r0, #161	; 0xa1
 8003882:	f7ff fe3f 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8003886:	2100      	movs	r1, #0
 8003888:	20c0      	movs	r0, #192	; 0xc0
 800388a:	f7ff fe3b 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800388e:	2100      	movs	r1, #0
 8003890:	20da      	movs	r0, #218	; 0xda
 8003892:	f7ff fe37 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8003896:	2100      	movs	r1, #0
 8003898:	2012      	movs	r0, #18
 800389a:	f7ff fe33 	bl	8003504 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800389e:	2100      	movs	r1, #0
 80038a0:	2081      	movs	r0, #129	; 0x81
 80038a2:	f7ff fe2f 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80038a6:	2100      	movs	r1, #0
 80038a8:	20ef      	movs	r0, #239	; 0xef
 80038aa:	f7ff fe2b 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80038ae:	2100      	movs	r1, #0
 80038b0:	20d9      	movs	r0, #217	; 0xd9
 80038b2:	f7ff fe27 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80038b6:	2100      	movs	r1, #0
 80038b8:	20f1      	movs	r0, #241	; 0xf1
 80038ba:	f7ff fe23 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80038be:	2100      	movs	r1, #0
 80038c0:	20db      	movs	r0, #219	; 0xdb
 80038c2:	f7ff fe1f 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80038c6:	2100      	movs	r1, #0
 80038c8:	2030      	movs	r0, #48	; 0x30
 80038ca:	f7ff fe1b 	bl	8003504 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80038ce:	2100      	movs	r1, #0
 80038d0:	20a4      	movs	r0, #164	; 0xa4
 80038d2:	f7ff fe17 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80038d6:	2100      	movs	r1, #0
 80038d8:	20a6      	movs	r0, #166	; 0xa6
 80038da:	f7ff fe13 	bl	8003504 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80038de:	2100      	movs	r1, #0
 80038e0:	20af      	movs	r0, #175	; 0xaf
 80038e2:	f7ff fe0f 	bl	8003504 <OLED_WR_Byte>
	OLED_Clear(); 
 80038e6:	f7ff fe57 	bl	8003598 <OLED_Clear>
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40021000 	.word	0x40021000

080038f8 <turnLeft>:
#include "cmsis_os.h"

uint8_t cur_direction; // 0 as left, 1 as straight, 2 as right
TIM_HandleTypeDef* htim1Ptr;

void turnLeft(){
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
	htim1Ptr->Instance->CCR4=1000;
 80038fc:	4b07      	ldr	r3, [pc, #28]	; (800391c <turnLeft+0x24>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003906:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(700);
 8003908:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800390c:	f005 fb28 	bl	8008f60 <osDelay>
	cur_direction = LEFT;
 8003910:	4b03      	ldr	r3, [pc, #12]	; (8003920 <turnLeft+0x28>)
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	200008f4 	.word	0x200008f4
 8003920:	200008f0 	.word	0x200008f0

08003924 <turnRight>:
void turnRight(){
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
	htim1Ptr->Instance->CCR4=2200;
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <turnRight+0x24>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f640 0298 	movw	r2, #2200	; 0x898
 8003932:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(700);
 8003934:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003938:	f005 fb12 	bl	8008f60 <osDelay>
	cur_direction = RIGHT;
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <turnRight+0x28>)
 800393e:	2202      	movs	r2, #2
 8003940:	701a      	strb	r2, [r3, #0]
}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	200008f4 	.word	0x200008f4
 800394c:	200008f0 	.word	0x200008f0

08003950 <turnStraight>:
void turnStraight(){
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
	if(cur_direction == LEFT){
 8003954:	4b11      	ldr	r3, [pc, #68]	; (800399c <turnStraight+0x4c>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <turnStraight+0x22>
		htim1Ptr->Instance->CCR4=1548;
 800395c:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <turnStraight+0x50>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f240 620c 	movw	r2, #1548	; 0x60c
 8003966:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(700);
 8003968:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800396c:	f005 faf8 	bl	8008f60 <osDelay>
 8003970:	e00d      	b.n	800398e <turnStraight+0x3e>
	}else if(cur_direction == RIGHT){
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <turnStraight+0x4c>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d10d      	bne.n	8003996 <turnStraight+0x46>
		htim1Ptr->Instance->CCR4=1457;
 800397a:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <turnStraight+0x50>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f240 52b1 	movw	r2, #1457	; 0x5b1
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(700);
 8003986:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800398a:	f005 fae9 	bl	8008f60 <osDelay>
	}else{
		return;
	}
	cur_direction = STRAIGHT;
 800398e:	4b03      	ldr	r3, [pc, #12]	; (800399c <turnStraight+0x4c>)
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	e000      	b.n	8003998 <turnStraight+0x48>
		return;
 8003996:	bf00      	nop
}
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	200008f0 	.word	0x200008f0
 80039a0:	200008f4 	.word	0x200008f4

080039a4 <turnServo>:
void turnServo(uint8_t target){
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
	if(target == LEFT){
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <turnServo+0x16>
		turnLeft();
 80039b4:	f7ff ffa0 	bl	80038f8 <turnLeft>
	}else if(target == STRAIGHT){
		turnStraight();
	}else{
		turnRight();
	}
}
 80039b8:	e007      	b.n	80039ca <turnServo+0x26>
	}else if(target == STRAIGHT){
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d102      	bne.n	80039c6 <turnServo+0x22>
		turnStraight();
 80039c0:	f7ff ffc6 	bl	8003950 <turnStraight>
}
 80039c4:	e001      	b.n	80039ca <turnServo+0x26>
		turnRight();
 80039c6:	f7ff ffad 	bl	8003924 <turnRight>
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <getServoDir>:
uint8_t getServoDir() {
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
	return cur_direction;
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <getServoDir+0x14>)
 80039da:	781b      	ldrb	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	200008f0 	.word	0x200008f0

080039ec <servoInit>:
void servoInit(TIM_HandleTypeDef* htim){
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	htim1Ptr = htim;
 80039f4:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <servoInit+0x60>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 80039fa:	210c      	movs	r1, #12
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f002 fcd3 	bl	80063a8 <HAL_TIM_PWM_Start>
	cur_direction = 1;
 8003a02:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <servoInit+0x64>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
	htim1Ptr->Instance->CCR4=2200;
 8003a08:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <servoInit+0x60>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f640 0298 	movw	r2, #2200	; 0x898
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(700);
 8003a14:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003a18:	f005 faa2 	bl	8008f60 <osDelay>
	htim1Ptr->Instance->CCR4=1000;
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <servoInit+0x60>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(700);
 8003a28:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003a2c:	f005 fa98 	bl	8008f60 <osDelay>
	htim1Ptr->Instance->CCR4=1548;
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <servoInit+0x60>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f240 620c 	movw	r2, #1548	; 0x60c
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(700);
 8003a3c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003a40:	f005 fa8e 	bl	8008f60 <osDelay>

}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	200008f4 	.word	0x200008f4
 8003a50:	200008f0 	.word	0x200008f0

08003a54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_MspInit+0x54>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	4a11      	ldr	r2, [pc, #68]	; (8003aa8 <HAL_MspInit+0x54>)
 8003a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a68:	6453      	str	r3, [r2, #68]	; 0x44
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <HAL_MspInit+0x54>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_MspInit+0x54>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <HAL_MspInit+0x54>)
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a84:	6413      	str	r3, [r2, #64]	; 0x40
 8003a86:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <HAL_MspInit+0x54>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	210f      	movs	r1, #15
 8003a96:	f06f 0001 	mvn.w	r0, #1
 8003a9a:	f000 fcde 	bl	800445a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023800 	.word	0x40023800

08003aac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab4:	f107 0314 	add.w	r3, r7, #20
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a19      	ldr	r2, [pc, #100]	; (8003b30 <HAL_I2C_MspInit+0x84>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d12c      	bne.n	8003b28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	4b18      	ldr	r3, [pc, #96]	; (8003b34 <HAL_I2C_MspInit+0x88>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <HAL_I2C_MspInit+0x88>)
 8003ad8:	f043 0302 	orr.w	r3, r3, #2
 8003adc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ade:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <HAL_I2C_MspInit+0x88>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8003aea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003af0:	2312      	movs	r3, #18
 8003af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af8:	2303      	movs	r3, #3
 8003afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003afc:	2304      	movs	r3, #4
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	4619      	mov	r1, r3
 8003b06:	480c      	ldr	r0, [pc, #48]	; (8003b38 <HAL_I2C_MspInit+0x8c>)
 8003b08:	f000 fd70 	bl	80045ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	4b08      	ldr	r3, [pc, #32]	; (8003b34 <HAL_I2C_MspInit+0x88>)
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	4a07      	ldr	r2, [pc, #28]	; (8003b34 <HAL_I2C_MspInit+0x88>)
 8003b16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HAL_I2C_MspInit+0x88>)
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b28:	bf00      	nop
 8003b2a:	3728      	adds	r7, #40	; 0x28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40005400 	.word	0x40005400
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40020400 	.word	0x40020400

08003b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08c      	sub	sp, #48	; 0x30
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b44:	f107 031c 	add.w	r3, r7, #28
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	60da      	str	r2, [r3, #12]
 8003b52:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a40      	ldr	r2, [pc, #256]	; (8003c5c <HAL_TIM_Base_MspInit+0x120>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d135      	bne.n	8003bca <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	4b3f      	ldr	r3, [pc, #252]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	4a3e      	ldr	r2, [pc, #248]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b6e:	4b3c      	ldr	r3, [pc, #240]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	4b38      	ldr	r3, [pc, #224]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	4a37      	ldr	r2, [pc, #220]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003b84:	f043 0310 	orr.w	r3, r3, #16
 8003b88:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8a:	4b35      	ldr	r3, [pc, #212]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = US_ECHO_Pin;
 8003b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(US_ECHO_GPIO_Port, &GPIO_InitStruct);
 8003bac:	f107 031c 	add.w	r3, r7, #28
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	482c      	ldr	r0, [pc, #176]	; (8003c64 <HAL_TIM_Base_MspInit+0x128>)
 8003bb4:	f000 fd1a 	bl	80045ec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2105      	movs	r1, #5
 8003bbc:	201b      	movs	r0, #27
 8003bbe:	f000 fc4c 	bl	800445a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003bc2:	201b      	movs	r0, #27
 8003bc4:	f000 fc65 	bl	8004492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003bc8:	e044      	b.n	8003c54 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM6)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a26      	ldr	r2, [pc, #152]	; (8003c68 <HAL_TIM_Base_MspInit+0x12c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d10e      	bne.n	8003bf2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003bde:	f043 0310 	orr.w	r3, r3, #16
 8003be2:	6413      	str	r3, [r2, #64]	; 0x40
 8003be4:	4b1e      	ldr	r3, [pc, #120]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	693b      	ldr	r3, [r7, #16]
}
 8003bf0:	e030      	b.n	8003c54 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM8)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <HAL_TIM_Base_MspInit+0x130>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d12b      	bne.n	8003c54 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	4a16      	ldr	r2, [pc, #88]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003c06:	f043 0302 	orr.w	r3, r3, #2
 8003c0a:	6453      	str	r3, [r2, #68]	; 0x44
 8003c0c:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	4a0f      	ldr	r2, [pc, #60]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003c22:	f043 0304 	orr.w	r3, r3, #4
 8003c26:	6313      	str	r3, [r2, #48]	; 0x30
 8003c28:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <HAL_TIM_Base_MspInit+0x124>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003c34:	23c0      	movs	r3, #192	; 0xc0
 8003c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c40:	2300      	movs	r3, #0
 8003c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003c44:	2303      	movs	r3, #3
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c48:	f107 031c 	add.w	r3, r7, #28
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4808      	ldr	r0, [pc, #32]	; (8003c70 <HAL_TIM_Base_MspInit+0x134>)
 8003c50:	f000 fccc 	bl	80045ec <HAL_GPIO_Init>
}
 8003c54:	bf00      	nop
 8003c56:	3730      	adds	r7, #48	; 0x30
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40010000 	.word	0x40010000
 8003c60:	40023800 	.word	0x40023800
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40001000 	.word	0x40001000
 8003c6c:	40010400 	.word	0x40010400
 8003c70:	40020800 	.word	0x40020800

08003c74 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08c      	sub	sp, #48	; 0x30
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c7c:	f107 031c 	add.w	r3, r7, #28
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	605a      	str	r2, [r3, #4]
 8003c86:	609a      	str	r2, [r3, #8]
 8003c88:	60da      	str	r2, [r3, #12]
 8003c8a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c94:	d153      	bne.n	8003d3e <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	4a46      	ldr	r2, [pc, #280]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ca6:	4b44      	ldr	r3, [pc, #272]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	4b40      	ldr	r3, [pc, #256]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4a3f      	ldr	r2, [pc, #252]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc2:	4b3d      	ldr	r3, [pc, #244]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	4a38      	ldr	r2, [pc, #224]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003cd8:	f043 0302 	orr.w	r3, r3, #2
 8003cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cde:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d00:	f107 031c 	add.w	r3, r7, #28
 8003d04:	4619      	mov	r1, r3
 8003d06:	482d      	ldr	r0, [pc, #180]	; (8003dbc <HAL_TIM_Encoder_MspInit+0x148>)
 8003d08:	f000 fc70 	bl	80045ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d10:	2302      	movs	r3, #2
 8003d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d20:	f107 031c 	add.w	r3, r7, #28
 8003d24:	4619      	mov	r1, r3
 8003d26:	4826      	ldr	r0, [pc, #152]	; (8003dc0 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003d28:	f000 fc60 	bl	80045ec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2105      	movs	r1, #5
 8003d30:	201c      	movs	r0, #28
 8003d32:	f000 fb92 	bl	800445a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d36:	201c      	movs	r0, #28
 8003d38:	f000 fbab 	bl	8004492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003d3c:	e038      	b.n	8003db0 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM3)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a20      	ldr	r2, [pc, #128]	; (8003dc4 <HAL_TIM_Encoder_MspInit+0x150>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d133      	bne.n	8003db0 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	4a19      	ldr	r2, [pc, #100]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003d52:	f043 0302 	orr.w	r3, r3, #2
 8003d56:	6413      	str	r3, [r2, #64]	; 0x40
 8003d58:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d64:	2300      	movs	r3, #0
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6313      	str	r3, [r2, #48]	; 0x30
 8003d74:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x144>)
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d80:	23c0      	movs	r3, #192	; 0xc0
 8003d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d84:	2302      	movs	r3, #2
 8003d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d90:	2302      	movs	r3, #2
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d94:	f107 031c 	add.w	r3, r7, #28
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4808      	ldr	r0, [pc, #32]	; (8003dbc <HAL_TIM_Encoder_MspInit+0x148>)
 8003d9c:	f000 fc26 	bl	80045ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003da0:	2200      	movs	r2, #0
 8003da2:	2105      	movs	r1, #5
 8003da4:	201d      	movs	r0, #29
 8003da6:	f000 fb58 	bl	800445a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003daa:	201d      	movs	r0, #29
 8003dac:	f000 fb71 	bl	8004492 <HAL_NVIC_EnableIRQ>
}
 8003db0:	bf00      	nop
 8003db2:	3730      	adds	r7, #48	; 0x30
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40020000 	.word	0x40020000
 8003dc0:	40020400 	.word	0x40020400
 8003dc4:	40000400 	.word	0x40000400

08003dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd0:	f107 030c 	add.w	r3, r7, #12
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	60da      	str	r2, [r3, #12]
 8003dde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a12      	ldr	r2, [pc, #72]	; (8003e30 <HAL_TIM_MspPostInit+0x68>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d11e      	bne.n	8003e28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <HAL_TIM_MspPostInit+0x6c>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	4a10      	ldr	r2, [pc, #64]	; (8003e34 <HAL_TIM_MspPostInit+0x6c>)
 8003df4:	f043 0310 	orr.w	r3, r3, #16
 8003df8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfa:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <HAL_TIM_MspPostInit+0x6c>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003e06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e1c:	f107 030c 	add.w	r3, r7, #12
 8003e20:	4619      	mov	r1, r3
 8003e22:	4805      	ldr	r0, [pc, #20]	; (8003e38 <HAL_TIM_MspPostInit+0x70>)
 8003e24:	f000 fbe2 	bl	80045ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003e28:	bf00      	nop
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40010000 	.word	0x40010000
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40021000 	.word	0x40021000

08003e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	; 0x28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e44:	f107 0314 	add.w	r3, r7, #20
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <HAL_UART_MspInit+0x94>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d134      	bne.n	8003ec8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	4b1c      	ldr	r3, [pc, #112]	; (8003ed4 <HAL_UART_MspInit+0x98>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a1b      	ldr	r2, [pc, #108]	; (8003ed4 <HAL_UART_MspInit+0x98>)
 8003e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6e:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <HAL_UART_MspInit+0x98>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <HAL_UART_MspInit+0x98>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	4a14      	ldr	r2, [pc, #80]	; (8003ed4 <HAL_UART_MspInit+0x98>)
 8003e84:	f043 0304 	orr.w	r3, r3, #4
 8003e88:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8a:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <HAL_UART_MspInit+0x98>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ea8:	2307      	movs	r3, #7
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4809      	ldr	r0, [pc, #36]	; (8003ed8 <HAL_UART_MspInit+0x9c>)
 8003eb4:	f000 fb9a 	bl	80045ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2105      	movs	r1, #5
 8003ebc:	2027      	movs	r0, #39	; 0x27
 8003ebe:	f000 facc 	bl	800445a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003ec2:	2027      	movs	r0, #39	; 0x27
 8003ec4:	f000 fae5 	bl	8004492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ec8:	bf00      	nop
 8003eca:	3728      	adds	r7, #40	; 0x28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40004800 	.word	0x40004800
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40020800 	.word	0x40020800

08003edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ee0:	e7fe      	b.n	8003ee0 <NMI_Handler+0x4>

08003ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ee6:	e7fe      	b.n	8003ee6 <HardFault_Handler+0x4>

08003ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eec:	e7fe      	b.n	8003eec <MemManage_Handler+0x4>

08003eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ef2:	e7fe      	b.n	8003ef2 <BusFault_Handler+0x4>

08003ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef8:	e7fe      	b.n	8003ef8 <UsageFault_Handler+0x4>

08003efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003efa:	b480      	push	{r7}
 8003efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f0c:	f000 f986 	bl	800421c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003f10:	f006 fdae 	bl	800aa70 <xTaskGetSchedulerState>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d001      	beq.n	8003f1e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003f1a:	f007 fb95 	bl	800b648 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f28:	4802      	ldr	r0, [pc, #8]	; (8003f34 <TIM1_CC_IRQHandler+0x10>)
 8003f2a:	f002 fddb 	bl	8006ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000270 	.word	0x20000270

08003f38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f3c:	4802      	ldr	r0, [pc, #8]	; (8003f48 <TIM2_IRQHandler+0x10>)
 8003f3e:	f002 fdd1 	bl	8006ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200002b8 	.word	0x200002b8

08003f4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f50:	4802      	ldr	r0, [pc, #8]	; (8003f5c <TIM3_IRQHandler+0x10>)
 8003f52:	f002 fdc7 	bl	8006ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000300 	.word	0x20000300

08003f60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f64:	4802      	ldr	r0, [pc, #8]	; (8003f70 <USART3_IRQHandler+0x10>)
 8003f66:	f003 ff83 	bl	8007e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	200003d8 	.word	0x200003d8

08003f74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return 1;
 8003f78:	2301      	movs	r3, #1
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <_kill>:

int _kill(int pid, int sig)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f8e:	f008 fb17 	bl	800c5c0 <__errno>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2216      	movs	r2, #22
 8003f96:	601a      	str	r2, [r3, #0]
  return -1;
 8003f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <_exit>:

void _exit (int status)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff ffe7 	bl	8003f84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fb6:	e7fe      	b.n	8003fb6 <_exit+0x12>

08003fb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	e00a      	b.n	8003fe0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fca:	f3af 8000 	nop.w
 8003fce:	4601      	mov	r1, r0
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	60ba      	str	r2, [r7, #8]
 8003fd6:	b2ca      	uxtb	r2, r1
 8003fd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	dbf0      	blt.n	8003fca <_read+0x12>
  }

  return len;
 8003fe8:	687b      	ldr	r3, [r7, #4]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b086      	sub	sp, #24
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	e009      	b.n	8004018 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	60ba      	str	r2, [r7, #8]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	3301      	adds	r3, #1
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	429a      	cmp	r2, r3
 800401e:	dbf1      	blt.n	8004004 <_write+0x12>
  }
  return len;
 8004020:	687b      	ldr	r3, [r7, #4]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <_close>:

int _close(int file)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004052:	605a      	str	r2, [r3, #4]
  return 0;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <_isatty>:

int _isatty(int file)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800406a:	2301      	movs	r3, #1
}
 800406c:	4618      	mov	r0, r3
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800409c:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <_sbrk+0x5c>)
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <_sbrk+0x60>)
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040a8:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <_sbrk+0x64>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d102      	bne.n	80040b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <_sbrk+0x64>)
 80040b2:	4a12      	ldr	r2, [pc, #72]	; (80040fc <_sbrk+0x68>)
 80040b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <_sbrk+0x64>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4413      	add	r3, r2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d207      	bcs.n	80040d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040c4:	f008 fa7c 	bl	800c5c0 <__errno>
 80040c8:	4603      	mov	r3, r0
 80040ca:	220c      	movs	r2, #12
 80040cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040d2:	e009      	b.n	80040e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040d4:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <_sbrk+0x64>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040da:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <_sbrk+0x64>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4413      	add	r3, r2
 80040e2:	4a05      	ldr	r2, [pc, #20]	; (80040f8 <_sbrk+0x64>)
 80040e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040e6:	68fb      	ldr	r3, [r7, #12]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20020000 	.word	0x20020000
 80040f4:	00000400 	.word	0x00000400
 80040f8:	200008f8 	.word	0x200008f8
 80040fc:	200053a0 	.word	0x200053a0

08004100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <SystemInit+0x20>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	4a05      	ldr	r2, [pc, #20]	; (8004120 <SystemInit+0x20>)
 800410c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	e000ed00 	.word	0xe000ed00

08004124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800415c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004128:	480d      	ldr	r0, [pc, #52]	; (8004160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800412a:	490e      	ldr	r1, [pc, #56]	; (8004164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800412c:	4a0e      	ldr	r2, [pc, #56]	; (8004168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800412e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004130:	e002      	b.n	8004138 <LoopCopyDataInit>

08004132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004136:	3304      	adds	r3, #4

08004138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800413a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800413c:	d3f9      	bcc.n	8004132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800413e:	4a0b      	ldr	r2, [pc, #44]	; (800416c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004140:	4c0b      	ldr	r4, [pc, #44]	; (8004170 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004144:	e001      	b.n	800414a <LoopFillZerobss>

08004146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004148:	3204      	adds	r2, #4

0800414a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800414a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800414c:	d3fb      	bcc.n	8004146 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800414e:	f7ff ffd7 	bl	8004100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004152:	f008 fa3b 	bl	800c5cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004156:	f7fd fc8f 	bl	8001a78 <main>
  bx  lr    
 800415a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800415c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004164:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004168:	08010a70 	.word	0x08010a70
  ldr r2, =_sbss
 800416c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004170:	2000539c 	.word	0x2000539c

08004174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004174:	e7fe      	b.n	8004174 <ADC_IRQHandler>
	...

08004178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800417c:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <HAL_Init+0x40>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0d      	ldr	r2, [pc, #52]	; (80041b8 <HAL_Init+0x40>)
 8004182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_Init+0x40>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <HAL_Init+0x40>)
 800418e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004194:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <HAL_Init+0x40>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <HAL_Init+0x40>)
 800419a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041a0:	2003      	movs	r0, #3
 80041a2:	f000 f94f 	bl	8004444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041a6:	200f      	movs	r0, #15
 80041a8:	f000 f808 	bl	80041bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041ac:	f7ff fc52 	bl	8003a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023c00 	.word	0x40023c00

080041bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041c4:	4b12      	ldr	r3, [pc, #72]	; (8004210 <HAL_InitTick+0x54>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b12      	ldr	r3, [pc, #72]	; (8004214 <HAL_InitTick+0x58>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	4619      	mov	r1, r3
 80041ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f967 	bl	80044ae <HAL_SYSTICK_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e00e      	b.n	8004208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b0f      	cmp	r3, #15
 80041ee:	d80a      	bhi.n	8004206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041f0:	2200      	movs	r2, #0
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041f8:	f000 f92f 	bl	800445a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041fc:	4a06      	ldr	r2, [pc, #24]	; (8004218 <HAL_InitTick+0x5c>)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e000      	b.n	8004208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20000008 	.word	0x20000008
 8004214:	20000010 	.word	0x20000010
 8004218:	2000000c 	.word	0x2000000c

0800421c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_IncTick+0x20>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_IncTick+0x24>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4413      	add	r3, r2
 800422c:	4a04      	ldr	r2, [pc, #16]	; (8004240 <HAL_IncTick+0x24>)
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000010 	.word	0x20000010
 8004240:	200008fc 	.word	0x200008fc

08004244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return uwTick;
 8004248:	4b03      	ldr	r3, [pc, #12]	; (8004258 <HAL_GetTick+0x14>)
 800424a:	681b      	ldr	r3, [r3, #0]
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	200008fc 	.word	0x200008fc

0800425c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004264:	f7ff ffee 	bl	8004244 <HAL_GetTick>
 8004268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004274:	d005      	beq.n	8004282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <HAL_Delay+0x44>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004282:	bf00      	nop
 8004284:	f7ff ffde 	bl	8004244 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	429a      	cmp	r2, r3
 8004292:	d8f7      	bhi.n	8004284 <HAL_Delay+0x28>
  {
  }
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000010 	.word	0x20000010

080042a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <__NVIC_SetPriorityGrouping+0x44>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042c0:	4013      	ands	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042d6:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <__NVIC_SetPriorityGrouping+0x44>)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	60d3      	str	r3, [r2, #12]
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	e000ed00 	.word	0xe000ed00

080042ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <__NVIC_GetPriorityGrouping+0x18>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	f003 0307 	and.w	r3, r3, #7
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	2b00      	cmp	r3, #0
 8004318:	db0b      	blt.n	8004332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	f003 021f 	and.w	r2, r3, #31
 8004320:	4907      	ldr	r1, [pc, #28]	; (8004340 <__NVIC_EnableIRQ+0x38>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2001      	movs	r0, #1
 800432a:	fa00 f202 	lsl.w	r2, r0, r2
 800432e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	e000e100 	.word	0xe000e100

08004344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	6039      	str	r1, [r7, #0]
 800434e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004354:	2b00      	cmp	r3, #0
 8004356:	db0a      	blt.n	800436e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	490c      	ldr	r1, [pc, #48]	; (8004390 <__NVIC_SetPriority+0x4c>)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	0112      	lsls	r2, r2, #4
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	440b      	add	r3, r1
 8004368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800436c:	e00a      	b.n	8004384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4908      	ldr	r1, [pc, #32]	; (8004394 <__NVIC_SetPriority+0x50>)
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	3b04      	subs	r3, #4
 800437c:	0112      	lsls	r2, r2, #4
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	440b      	add	r3, r1
 8004382:	761a      	strb	r2, [r3, #24]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	e000e100 	.word	0xe000e100
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004398:	b480      	push	{r7}
 800439a:	b089      	sub	sp, #36	; 0x24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f1c3 0307 	rsb	r3, r3, #7
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	bf28      	it	cs
 80043b6:	2304      	movcs	r3, #4
 80043b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3304      	adds	r3, #4
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d902      	bls.n	80043c8 <NVIC_EncodePriority+0x30>
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	3b03      	subs	r3, #3
 80043c6:	e000      	b.n	80043ca <NVIC_EncodePriority+0x32>
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43da      	mvns	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	401a      	ands	r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ea:	43d9      	mvns	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f0:	4313      	orrs	r3, r2
         );
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3724      	adds	r7, #36	; 0x24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3b01      	subs	r3, #1
 800440c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004410:	d301      	bcc.n	8004416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004412:	2301      	movs	r3, #1
 8004414:	e00f      	b.n	8004436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004416:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <SysTick_Config+0x40>)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800441e:	210f      	movs	r1, #15
 8004420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004424:	f7ff ff8e 	bl	8004344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <SysTick_Config+0x40>)
 800442a:	2200      	movs	r2, #0
 800442c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800442e:	4b04      	ldr	r3, [pc, #16]	; (8004440 <SysTick_Config+0x40>)
 8004430:	2207      	movs	r2, #7
 8004432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	e000e010 	.word	0xe000e010

08004444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff29 	bl	80042a4 <__NVIC_SetPriorityGrouping>
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	4603      	mov	r3, r0
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800446c:	f7ff ff3e 	bl	80042ec <__NVIC_GetPriorityGrouping>
 8004470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	f7ff ff8e 	bl	8004398 <NVIC_EncodePriority>
 800447c:	4602      	mov	r2, r0
 800447e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004482:	4611      	mov	r1, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff ff5d 	bl	8004344 <__NVIC_SetPriority>
}
 800448a:	bf00      	nop
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	4603      	mov	r3, r0
 800449a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800449c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff31 	bl	8004308 <__NVIC_EnableIRQ>
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff ffa2 	bl	8004400 <SysTick_Config>
 80044bc:	4603      	mov	r3, r0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80044d4:	f7ff feb6 	bl	8004244 <HAL_GetTick>
 80044d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d008      	beq.n	80044f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2280      	movs	r2, #128	; 0x80
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e052      	b.n	800459e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0216 	bic.w	r2, r2, #22
 8004506:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004516:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	d103      	bne.n	8004528 <HAL_DMA_Abort+0x62>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0208 	bic.w	r2, r2, #8
 8004536:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0201 	bic.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004548:	e013      	b.n	8004572 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800454a:	f7ff fe7b 	bl	8004244 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b05      	cmp	r3, #5
 8004556:	d90c      	bls.n	8004572 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2203      	movs	r2, #3
 8004562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e015      	b.n	800459e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e4      	bne.n	800454a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	223f      	movs	r2, #63	; 0x3f
 8004586:	409a      	lsls	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d004      	beq.n	80045c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2280      	movs	r2, #128	; 0x80
 80045be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e00c      	b.n	80045de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2205      	movs	r2, #5
 80045c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0201 	bic.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b089      	sub	sp, #36	; 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045fe:	2300      	movs	r3, #0
 8004600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	e16b      	b.n	80048e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004608:	2201      	movs	r2, #1
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	429a      	cmp	r2, r3
 8004622:	f040 815a 	bne.w	80048da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b01      	cmp	r3, #1
 8004630:	d005      	beq.n	800463e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800463a:	2b02      	cmp	r3, #2
 800463c:	d130      	bne.n	80046a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	2203      	movs	r2, #3
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	43db      	mvns	r3, r3
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	4013      	ands	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4313      	orrs	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004674:	2201      	movs	r2, #1
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	43db      	mvns	r3, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4013      	ands	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	f003 0201 	and.w	r2, r3, #1
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4313      	orrs	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d017      	beq.n	80046dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	2203      	movs	r2, #3
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d123      	bne.n	8004730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	08da      	lsrs	r2, r3, #3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3208      	adds	r2, #8
 80046f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	220f      	movs	r2, #15
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4313      	orrs	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	08da      	lsrs	r2, r3, #3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3208      	adds	r2, #8
 800472a:	69b9      	ldr	r1, [r7, #24]
 800472c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	2203      	movs	r2, #3
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 0203 	and.w	r2, r3, #3
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80b4 	beq.w	80048da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	4b60      	ldr	r3, [pc, #384]	; (80048f8 <HAL_GPIO_Init+0x30c>)
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	4a5f      	ldr	r2, [pc, #380]	; (80048f8 <HAL_GPIO_Init+0x30c>)
 800477c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004780:	6453      	str	r3, [r2, #68]	; 0x44
 8004782:	4b5d      	ldr	r3, [pc, #372]	; (80048f8 <HAL_GPIO_Init+0x30c>)
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800478e:	4a5b      	ldr	r2, [pc, #364]	; (80048fc <HAL_GPIO_Init+0x310>)
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	3302      	adds	r3, #2
 8004796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	220f      	movs	r2, #15
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a52      	ldr	r2, [pc, #328]	; (8004900 <HAL_GPIO_Init+0x314>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d02b      	beq.n	8004812 <HAL_GPIO_Init+0x226>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a51      	ldr	r2, [pc, #324]	; (8004904 <HAL_GPIO_Init+0x318>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d025      	beq.n	800480e <HAL_GPIO_Init+0x222>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a50      	ldr	r2, [pc, #320]	; (8004908 <HAL_GPIO_Init+0x31c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01f      	beq.n	800480a <HAL_GPIO_Init+0x21e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a4f      	ldr	r2, [pc, #316]	; (800490c <HAL_GPIO_Init+0x320>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d019      	beq.n	8004806 <HAL_GPIO_Init+0x21a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a4e      	ldr	r2, [pc, #312]	; (8004910 <HAL_GPIO_Init+0x324>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_GPIO_Init+0x216>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a4d      	ldr	r2, [pc, #308]	; (8004914 <HAL_GPIO_Init+0x328>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00d      	beq.n	80047fe <HAL_GPIO_Init+0x212>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a4c      	ldr	r2, [pc, #304]	; (8004918 <HAL_GPIO_Init+0x32c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d007      	beq.n	80047fa <HAL_GPIO_Init+0x20e>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a4b      	ldr	r2, [pc, #300]	; (800491c <HAL_GPIO_Init+0x330>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d101      	bne.n	80047f6 <HAL_GPIO_Init+0x20a>
 80047f2:	2307      	movs	r3, #7
 80047f4:	e00e      	b.n	8004814 <HAL_GPIO_Init+0x228>
 80047f6:	2308      	movs	r3, #8
 80047f8:	e00c      	b.n	8004814 <HAL_GPIO_Init+0x228>
 80047fa:	2306      	movs	r3, #6
 80047fc:	e00a      	b.n	8004814 <HAL_GPIO_Init+0x228>
 80047fe:	2305      	movs	r3, #5
 8004800:	e008      	b.n	8004814 <HAL_GPIO_Init+0x228>
 8004802:	2304      	movs	r3, #4
 8004804:	e006      	b.n	8004814 <HAL_GPIO_Init+0x228>
 8004806:	2303      	movs	r3, #3
 8004808:	e004      	b.n	8004814 <HAL_GPIO_Init+0x228>
 800480a:	2302      	movs	r3, #2
 800480c:	e002      	b.n	8004814 <HAL_GPIO_Init+0x228>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <HAL_GPIO_Init+0x228>
 8004812:	2300      	movs	r3, #0
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	f002 0203 	and.w	r2, r2, #3
 800481a:	0092      	lsls	r2, r2, #2
 800481c:	4093      	lsls	r3, r2
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4313      	orrs	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004824:	4935      	ldr	r1, [pc, #212]	; (80048fc <HAL_GPIO_Init+0x310>)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	089b      	lsrs	r3, r3, #2
 800482a:	3302      	adds	r3, #2
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004832:	4b3b      	ldr	r3, [pc, #236]	; (8004920 <HAL_GPIO_Init+0x334>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	43db      	mvns	r3, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4013      	ands	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004856:	4a32      	ldr	r2, [pc, #200]	; (8004920 <HAL_GPIO_Init+0x334>)
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800485c:	4b30      	ldr	r3, [pc, #192]	; (8004920 <HAL_GPIO_Init+0x334>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	43db      	mvns	r3, r3
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4013      	ands	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004880:	4a27      	ldr	r2, [pc, #156]	; (8004920 <HAL_GPIO_Init+0x334>)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004886:	4b26      	ldr	r3, [pc, #152]	; (8004920 <HAL_GPIO_Init+0x334>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	43db      	mvns	r3, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4013      	ands	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048aa:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <HAL_GPIO_Init+0x334>)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048b0:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <HAL_GPIO_Init+0x334>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	43db      	mvns	r3, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4013      	ands	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048d4:	4a12      	ldr	r2, [pc, #72]	; (8004920 <HAL_GPIO_Init+0x334>)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	3301      	adds	r3, #1
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	2b0f      	cmp	r3, #15
 80048e4:	f67f ae90 	bls.w	8004608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	3724      	adds	r7, #36	; 0x24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40013800 	.word	0x40013800
 8004900:	40020000 	.word	0x40020000
 8004904:	40020400 	.word	0x40020400
 8004908:	40020800 	.word	0x40020800
 800490c:	40020c00 	.word	0x40020c00
 8004910:	40021000 	.word	0x40021000
 8004914:	40021400 	.word	0x40021400
 8004918:	40021800 	.word	0x40021800
 800491c:	40021c00 	.word	0x40021c00
 8004920:	40013c00 	.word	0x40013c00

08004924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	807b      	strh	r3, [r7, #2]
 8004930:	4613      	mov	r3, r2
 8004932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004934:	787b      	ldrb	r3, [r7, #1]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800493a:	887a      	ldrh	r2, [r7, #2]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004940:	e003      	b.n	800494a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004942:	887b      	ldrh	r3, [r7, #2]
 8004944:	041a      	lsls	r2, r3, #16
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	619a      	str	r2, [r3, #24]
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
	...

08004958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e12b      	b.n	8004bc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff f894 	bl	8003aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2224      	movs	r2, #36	; 0x24
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0201 	bic.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049bc:	f001 fbba 	bl	8006134 <HAL_RCC_GetPCLK1Freq>
 80049c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4a81      	ldr	r2, [pc, #516]	; (8004bcc <HAL_I2C_Init+0x274>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d807      	bhi.n	80049dc <HAL_I2C_Init+0x84>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a80      	ldr	r2, [pc, #512]	; (8004bd0 <HAL_I2C_Init+0x278>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	bf94      	ite	ls
 80049d4:	2301      	movls	r3, #1
 80049d6:	2300      	movhi	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	e006      	b.n	80049ea <HAL_I2C_Init+0x92>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4a7d      	ldr	r2, [pc, #500]	; (8004bd4 <HAL_I2C_Init+0x27c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	bf94      	ite	ls
 80049e4:	2301      	movls	r3, #1
 80049e6:	2300      	movhi	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0e7      	b.n	8004bc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a78      	ldr	r2, [pc, #480]	; (8004bd8 <HAL_I2C_Init+0x280>)
 80049f6:	fba2 2303 	umull	r2, r3, r2, r3
 80049fa:	0c9b      	lsrs	r3, r3, #18
 80049fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4a6a      	ldr	r2, [pc, #424]	; (8004bcc <HAL_I2C_Init+0x274>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d802      	bhi.n	8004a2c <HAL_I2C_Init+0xd4>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	e009      	b.n	8004a40 <HAL_I2C_Init+0xe8>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	4a69      	ldr	r2, [pc, #420]	; (8004bdc <HAL_I2C_Init+0x284>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	099b      	lsrs	r3, r3, #6
 8004a3e:	3301      	adds	r3, #1
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	430b      	orrs	r3, r1
 8004a46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	495c      	ldr	r1, [pc, #368]	; (8004bcc <HAL_I2C_Init+0x274>)
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	d819      	bhi.n	8004a94 <HAL_I2C_Init+0x13c>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	1e59      	subs	r1, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a6e:	1c59      	adds	r1, r3, #1
 8004a70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a74:	400b      	ands	r3, r1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_I2C_Init+0x138>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1e59      	subs	r1, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a88:	3301      	adds	r3, #1
 8004a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a8e:	e051      	b.n	8004b34 <HAL_I2C_Init+0x1dc>
 8004a90:	2304      	movs	r3, #4
 8004a92:	e04f      	b.n	8004b34 <HAL_I2C_Init+0x1dc>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d111      	bne.n	8004ac0 <HAL_I2C_Init+0x168>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	1e58      	subs	r0, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6859      	ldr	r1, [r3, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	440b      	add	r3, r1
 8004aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e012      	b.n	8004ae6 <HAL_I2C_Init+0x18e>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	1e58      	subs	r0, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6859      	ldr	r1, [r3, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	0099      	lsls	r1, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_I2C_Init+0x196>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e022      	b.n	8004b34 <HAL_I2C_Init+0x1dc>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10e      	bne.n	8004b14 <HAL_I2C_Init+0x1bc>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1e58      	subs	r0, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6859      	ldr	r1, [r3, #4]
 8004afe:	460b      	mov	r3, r1
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	440b      	add	r3, r1
 8004b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b12:	e00f      	b.n	8004b34 <HAL_I2C_Init+0x1dc>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1e58      	subs	r0, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6859      	ldr	r1, [r3, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	0099      	lsls	r1, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	6809      	ldr	r1, [r1, #0]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69da      	ldr	r2, [r3, #28]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6911      	ldr	r1, [r2, #16]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68d2      	ldr	r2, [r2, #12]
 8004b6e:	4311      	orrs	r1, r2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	430b      	orrs	r3, r1
 8004b76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	000186a0 	.word	0x000186a0
 8004bd0:	001e847f 	.word	0x001e847f
 8004bd4:	003d08ff 	.word	0x003d08ff
 8004bd8:	431bde83 	.word	0x431bde83
 8004bdc:	10624dd3 	.word	0x10624dd3

08004be0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	607a      	str	r2, [r7, #4]
 8004bea:	461a      	mov	r2, r3
 8004bec:	460b      	mov	r3, r1
 8004bee:	817b      	strh	r3, [r7, #10]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bf4:	f7ff fb26 	bl	8004244 <HAL_GetTick>
 8004bf8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	f040 80e0 	bne.w	8004dc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	2319      	movs	r3, #25
 8004c0e:	2201      	movs	r2, #1
 8004c10:	4970      	ldr	r1, [pc, #448]	; (8004dd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fc58 	bl	80054c8 <I2C_WaitOnFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e0d3      	b.n	8004dca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_I2C_Master_Transmit+0x50>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e0cc      	b.n	8004dca <HAL_I2C_Master_Transmit+0x1ea>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d007      	beq.n	8004c56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f042 0201 	orr.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2221      	movs	r2, #33	; 0x21
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2210      	movs	r2, #16
 8004c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	893a      	ldrh	r2, [r7, #8]
 8004c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a50      	ldr	r2, [pc, #320]	; (8004dd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c98:	8979      	ldrh	r1, [r7, #10]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	6a3a      	ldr	r2, [r7, #32]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fac2 	bl	8005228 <I2C_MasterRequestWrite>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e08d      	b.n	8004dca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004cc4:	e066      	b.n	8004d94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	6a39      	ldr	r1, [r7, #32]
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 fcd2 	bl	8005674 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00d      	beq.n	8004cf2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d107      	bne.n	8004cee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e06b      	b.n	8004dca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	781a      	ldrb	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d11b      	bne.n	8004d68 <HAL_I2C_Master_Transmit+0x188>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d017      	beq.n	8004d68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	781a      	ldrb	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	6a39      	ldr	r1, [r7, #32]
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 fcc2 	bl	80056f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00d      	beq.n	8004d94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d107      	bne.n	8004d90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e01a      	b.n	8004dca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d194      	bne.n	8004cc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e000      	b.n	8004dca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004dc8:	2302      	movs	r3, #2
  }
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	00100002 	.word	0x00100002
 8004dd8:	ffff0000 	.word	0xffff0000

08004ddc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08c      	sub	sp, #48	; 0x30
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	607a      	str	r2, [r7, #4]
 8004de6:	461a      	mov	r2, r3
 8004de8:	460b      	mov	r3, r1
 8004dea:	817b      	strh	r3, [r7, #10]
 8004dec:	4613      	mov	r3, r2
 8004dee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004df0:	f7ff fa28 	bl	8004244 <HAL_GetTick>
 8004df4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	f040 820b 	bne.w	800521a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	2319      	movs	r3, #25
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	497c      	ldr	r1, [pc, #496]	; (8005000 <HAL_I2C_Master_Receive+0x224>)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 fb5a 	bl	80054c8 <I2C_WaitOnFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e1fe      	b.n	800521c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_I2C_Master_Receive+0x50>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e1f7      	b.n	800521c <HAL_I2C_Master_Receive+0x440>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d007      	beq.n	8004e52 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0201 	orr.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2222      	movs	r2, #34	; 0x22
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2210      	movs	r2, #16
 8004e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	893a      	ldrh	r2, [r7, #8]
 8004e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4a5c      	ldr	r2, [pc, #368]	; (8005004 <HAL_I2C_Master_Receive+0x228>)
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e94:	8979      	ldrh	r1, [r7, #10]
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fa46 	bl	800532c <I2C_MasterRequestRead>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e1b8      	b.n	800521c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d113      	bne.n	8004eda <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	623b      	str	r3, [r7, #32]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	623b      	str	r3, [r7, #32]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	623b      	str	r3, [r7, #32]
 8004ec6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	e18c      	b.n	80051f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d11b      	bne.n	8004f1a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e16c      	b.n	80051f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d11b      	bne.n	8004f5a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f42:	2300      	movs	r3, #0
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	e14c      	b.n	80051f4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f80:	e138      	b.n	80051f4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	f200 80f1 	bhi.w	800516e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d123      	bne.n	8004fdc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fbed 	bl	8005778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e139      	b.n	800521c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fda:	e10b      	b.n	80051f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d14e      	bne.n	8005082 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	2200      	movs	r2, #0
 8004fec:	4906      	ldr	r1, [pc, #24]	; (8005008 <HAL_I2C_Master_Receive+0x22c>)
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 fa6a 	bl	80054c8 <I2C_WaitOnFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d008      	beq.n	800500c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e10e      	b.n	800521c <HAL_I2C_Master_Receive+0x440>
 8004ffe:	bf00      	nop
 8005000:	00100002 	.word	0x00100002
 8005004:	ffff0000 	.word	0xffff0000
 8005008:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005080:	e0b8      	b.n	80051f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	2200      	movs	r2, #0
 800508a:	4966      	ldr	r1, [pc, #408]	; (8005224 <HAL_I2C_Master_Receive+0x448>)
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fa1b 	bl	80054c8 <I2C_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0bf      	b.n	800521c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	2200      	movs	r2, #0
 80050e6:	494f      	ldr	r1, [pc, #316]	; (8005224 <HAL_I2C_Master_Receive+0x448>)
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f9ed 	bl	80054c8 <I2C_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e091      	b.n	800521c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005106:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800516c:	e042      	b.n	80051f4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800516e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fb00 	bl	8005778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e04c      	b.n	800521c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d118      	bne.n	80051f4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f47f aec2 	bne.w	8004f82 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	e000      	b.n	800521c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800521a:	2302      	movs	r3, #2
  }
}
 800521c:	4618      	mov	r0, r3
 800521e:	3728      	adds	r7, #40	; 0x28
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	00010004 	.word	0x00010004

08005228 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af02      	add	r7, sp, #8
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	460b      	mov	r3, r1
 8005236:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b08      	cmp	r3, #8
 8005242:	d006      	beq.n	8005252 <I2C_MasterRequestWrite+0x2a>
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d003      	beq.n	8005252 <I2C_MasterRequestWrite+0x2a>
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005250:	d108      	bne.n	8005264 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	e00b      	b.n	800527c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005268:	2b12      	cmp	r3, #18
 800526a:	d107      	bne.n	800527c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800527a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f91d 	bl	80054c8 <I2C_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00d      	beq.n	80052b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a2:	d103      	bne.n	80052ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e035      	b.n	800531c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052b8:	d108      	bne.n	80052cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052ba:	897b      	ldrh	r3, [r7, #10]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052c8:	611a      	str	r2, [r3, #16]
 80052ca:	e01b      	b.n	8005304 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052cc:	897b      	ldrh	r3, [r7, #10]
 80052ce:	11db      	asrs	r3, r3, #7
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	f003 0306 	and.w	r3, r3, #6
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	f063 030f 	orn	r3, r3, #15
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	490e      	ldr	r1, [pc, #56]	; (8005324 <I2C_MasterRequestWrite+0xfc>)
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f943 	bl	8005576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e010      	b.n	800531c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052fa:	897b      	ldrh	r3, [r7, #10]
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4907      	ldr	r1, [pc, #28]	; (8005328 <I2C_MasterRequestWrite+0x100>)
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f933 	bl	8005576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	00010008 	.word	0x00010008
 8005328:	00010002 	.word	0x00010002

0800532c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af02      	add	r7, sp, #8
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	607a      	str	r2, [r7, #4]
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	460b      	mov	r3, r1
 800533a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005350:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2b08      	cmp	r3, #8
 8005356:	d006      	beq.n	8005366 <I2C_MasterRequestRead+0x3a>
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d003      	beq.n	8005366 <I2C_MasterRequestRead+0x3a>
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005364:	d108      	bne.n	8005378 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	e00b      	b.n	8005390 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	2b11      	cmp	r3, #17
 800537e:	d107      	bne.n	8005390 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800538e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f893 	bl	80054c8 <I2C_WaitOnFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00d      	beq.n	80053c4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b6:	d103      	bne.n	80053c0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e079      	b.n	80054b8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053cc:	d108      	bne.n	80053e0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053ce:	897b      	ldrh	r3, [r7, #10]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	f043 0301 	orr.w	r3, r3, #1
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	611a      	str	r2, [r3, #16]
 80053de:	e05f      	b.n	80054a0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053e0:	897b      	ldrh	r3, [r7, #10]
 80053e2:	11db      	asrs	r3, r3, #7
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	f003 0306 	and.w	r3, r3, #6
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	f063 030f 	orn	r3, r3, #15
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	4930      	ldr	r1, [pc, #192]	; (80054c0 <I2C_MasterRequestRead+0x194>)
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f8b9 	bl	8005576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e054      	b.n	80054b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800540e:	897b      	ldrh	r3, [r7, #10]
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	4929      	ldr	r1, [pc, #164]	; (80054c4 <I2C_MasterRequestRead+0x198>)
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f8a9 	bl	8005576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e044      	b.n	80054b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542e:	2300      	movs	r3, #0
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005452:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f831 	bl	80054c8 <I2C_WaitOnFlagUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00d      	beq.n	8005488 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547a:	d103      	bne.n	8005484 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005482:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e017      	b.n	80054b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005488:	897b      	ldrh	r3, [r7, #10]
 800548a:	11db      	asrs	r3, r3, #7
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f003 0306 	and.w	r3, r3, #6
 8005492:	b2db      	uxtb	r3, r3
 8005494:	f063 030e 	orn	r3, r3, #14
 8005498:	b2da      	uxtb	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	4907      	ldr	r1, [pc, #28]	; (80054c4 <I2C_MasterRequestRead+0x198>)
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 f865 	bl	8005576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	00010008 	.word	0x00010008
 80054c4:	00010002 	.word	0x00010002

080054c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054d8:	e025      	b.n	8005526 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e0:	d021      	beq.n	8005526 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e2:	f7fe feaf 	bl	8004244 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d302      	bcc.n	80054f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d116      	bne.n	8005526 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	f043 0220 	orr.w	r2, r3, #32
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e023      	b.n	800556e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	0c1b      	lsrs	r3, r3, #16
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	d10d      	bne.n	800554c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	43da      	mvns	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4013      	ands	r3, r2
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf0c      	ite	eq
 8005542:	2301      	moveq	r3, #1
 8005544:	2300      	movne	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	e00c      	b.n	8005566 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	43da      	mvns	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4013      	ands	r3, r2
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	bf0c      	ite	eq
 800555e:	2301      	moveq	r3, #1
 8005560:	2300      	movne	r3, #0
 8005562:	b2db      	uxtb	r3, r3
 8005564:	461a      	mov	r2, r3
 8005566:	79fb      	ldrb	r3, [r7, #7]
 8005568:	429a      	cmp	r2, r3
 800556a:	d0b6      	beq.n	80054da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	607a      	str	r2, [r7, #4]
 8005582:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005584:	e051      	b.n	800562a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005594:	d123      	bne.n	80055de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f043 0204 	orr.w	r2, r3, #4
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e046      	b.n	800566c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e4:	d021      	beq.n	800562a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e6:	f7fe fe2d 	bl	8004244 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d302      	bcc.n	80055fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d116      	bne.n	800562a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f043 0220 	orr.w	r2, r3, #32
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e020      	b.n	800566c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	0c1b      	lsrs	r3, r3, #16
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	d10c      	bne.n	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	43da      	mvns	r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	4013      	ands	r3, r2
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	bf14      	ite	ne
 8005646:	2301      	movne	r3, #1
 8005648:	2300      	moveq	r3, #0
 800564a:	b2db      	uxtb	r3, r3
 800564c:	e00b      	b.n	8005666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	43da      	mvns	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	4013      	ands	r3, r2
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	bf14      	ite	ne
 8005660:	2301      	movne	r3, #1
 8005662:	2300      	moveq	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d18d      	bne.n	8005586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005680:	e02d      	b.n	80056de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f8ce 	bl	8005824 <I2C_IsAcknowledgeFailed>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e02d      	b.n	80056ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005698:	d021      	beq.n	80056de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569a:	f7fe fdd3 	bl	8004244 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d302      	bcc.n	80056b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d116      	bne.n	80056de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f043 0220 	orr.w	r2, r3, #32
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e007      	b.n	80056ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e8:	2b80      	cmp	r3, #128	; 0x80
 80056ea:	d1ca      	bne.n	8005682 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005702:	e02d      	b.n	8005760 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f88d 	bl	8005824 <I2C_IsAcknowledgeFailed>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e02d      	b.n	8005770 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800571a:	d021      	beq.n	8005760 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800571c:	f7fe fd92 	bl	8004244 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	429a      	cmp	r2, r3
 800572a:	d302      	bcc.n	8005732 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d116      	bne.n	8005760 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	f043 0220 	orr.w	r2, r3, #32
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e007      	b.n	8005770 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f003 0304 	and.w	r3, r3, #4
 800576a:	2b04      	cmp	r3, #4
 800576c:	d1ca      	bne.n	8005704 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005784:	e042      	b.n	800580c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b10      	cmp	r3, #16
 8005792:	d119      	bne.n	80057c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0210 	mvn.w	r2, #16
 800579c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e029      	b.n	800581c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c8:	f7fe fd3c 	bl	8004244 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d302      	bcc.n	80057de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d116      	bne.n	800580c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	f043 0220 	orr.w	r2, r3, #32
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e007      	b.n	800581c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	d1b5      	bne.n	8005786 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583a:	d11b      	bne.n	8005874 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005844:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	f043 0204 	orr.w	r2, r3, #4
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
	...

08005884 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800588a:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <HAL_PWR_EnableBkUpAccess+0x20>)
 800588c:	2201      	movs	r2, #1
 800588e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_PWR_EnableBkUpAccess+0x24>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005896:	687b      	ldr	r3, [r7, #4]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	420e0020 	.word	0x420e0020
 80058a8:	40007000 	.word	0x40007000

080058ac <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80058b2:	4b06      	ldr	r3, [pc, #24]	; (80058cc <HAL_PWR_DisableBkUpAccess+0x20>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80058b8:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <HAL_PWR_DisableBkUpAccess+0x24>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80058be:	687b      	ldr	r3, [r7, #4]
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	420e0020 	.word	0x420e0020
 80058d0:	40007000 	.word	0x40007000

080058d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e267      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d075      	beq.n	80059de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058f2:	4b88      	ldr	r3, [pc, #544]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 030c 	and.w	r3, r3, #12
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d00c      	beq.n	8005918 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058fe:	4b85      	ldr	r3, [pc, #532]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005906:	2b08      	cmp	r3, #8
 8005908:	d112      	bne.n	8005930 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800590a:	4b82      	ldr	r3, [pc, #520]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005916:	d10b      	bne.n	8005930 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005918:	4b7e      	ldr	r3, [pc, #504]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d05b      	beq.n	80059dc <HAL_RCC_OscConfig+0x108>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d157      	bne.n	80059dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e242      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005938:	d106      	bne.n	8005948 <HAL_RCC_OscConfig+0x74>
 800593a:	4b76      	ldr	r3, [pc, #472]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a75      	ldr	r2, [pc, #468]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	e01d      	b.n	8005984 <HAL_RCC_OscConfig+0xb0>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005950:	d10c      	bne.n	800596c <HAL_RCC_OscConfig+0x98>
 8005952:	4b70      	ldr	r3, [pc, #448]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a6f      	ldr	r2, [pc, #444]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	4b6d      	ldr	r3, [pc, #436]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a6c      	ldr	r2, [pc, #432]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	e00b      	b.n	8005984 <HAL_RCC_OscConfig+0xb0>
 800596c:	4b69      	ldr	r3, [pc, #420]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a68      	ldr	r2, [pc, #416]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	4b66      	ldr	r3, [pc, #408]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a65      	ldr	r2, [pc, #404]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 800597e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d013      	beq.n	80059b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800598c:	f7fe fc5a 	bl	8004244 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005994:	f7fe fc56 	bl	8004244 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b64      	cmp	r3, #100	; 0x64
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e207      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a6:	4b5b      	ldr	r3, [pc, #364]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0xc0>
 80059b2:	e014      	b.n	80059de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b4:	f7fe fc46 	bl	8004244 <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059bc:	f7fe fc42 	bl	8004244 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b64      	cmp	r3, #100	; 0x64
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e1f3      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ce:	4b51      	ldr	r3, [pc, #324]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f0      	bne.n	80059bc <HAL_RCC_OscConfig+0xe8>
 80059da:	e000      	b.n	80059de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d063      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059ea:	4b4a      	ldr	r3, [pc, #296]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 030c 	and.w	r3, r3, #12
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00b      	beq.n	8005a0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059f6:	4b47      	ldr	r3, [pc, #284]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d11c      	bne.n	8005a3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a02:	4b44      	ldr	r3, [pc, #272]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d116      	bne.n	8005a3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a0e:	4b41      	ldr	r3, [pc, #260]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <HAL_RCC_OscConfig+0x152>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d001      	beq.n	8005a26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e1c7      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a26:	4b3b      	ldr	r3, [pc, #236]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	4937      	ldr	r1, [pc, #220]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a3a:	e03a      	b.n	8005ab2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d020      	beq.n	8005a86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a44:	4b34      	ldr	r3, [pc, #208]	; (8005b18 <HAL_RCC_OscConfig+0x244>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4a:	f7fe fbfb 	bl	8004244 <HAL_GetTick>
 8005a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a50:	e008      	b.n	8005a64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a52:	f7fe fbf7 	bl	8004244 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e1a8      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a64:	4b2b      	ldr	r3, [pc, #172]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0f0      	beq.n	8005a52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a70:	4b28      	ldr	r3, [pc, #160]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	4925      	ldr	r1, [pc, #148]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	600b      	str	r3, [r1, #0]
 8005a84:	e015      	b.n	8005ab2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a86:	4b24      	ldr	r3, [pc, #144]	; (8005b18 <HAL_RCC_OscConfig+0x244>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8c:	f7fe fbda 	bl	8004244 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a94:	f7fe fbd6 	bl	8004244 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e187      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aa6:	4b1b      	ldr	r3, [pc, #108]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f0      	bne.n	8005a94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d036      	beq.n	8005b2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d016      	beq.n	8005af4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ac6:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <HAL_RCC_OscConfig+0x248>)
 8005ac8:	2201      	movs	r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005acc:	f7fe fbba 	bl	8004244 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ad4:	f7fe fbb6 	bl	8004244 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e167      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0f0      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x200>
 8005af2:	e01b      	b.n	8005b2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <HAL_RCC_OscConfig+0x248>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005afa:	f7fe fba3 	bl	8004244 <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b00:	e00e      	b.n	8005b20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b02:	f7fe fb9f 	bl	8004244 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d907      	bls.n	8005b20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e150      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
 8005b14:	40023800 	.word	0x40023800
 8005b18:	42470000 	.word	0x42470000
 8005b1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b20:	4b88      	ldr	r3, [pc, #544]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1ea      	bne.n	8005b02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 8097 	beq.w	8005c68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b3e:	4b81      	ldr	r3, [pc, #516]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10f      	bne.n	8005b6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	4b7d      	ldr	r3, [pc, #500]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	4a7c      	ldr	r2, [pc, #496]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b58:	6413      	str	r3, [r2, #64]	; 0x40
 8005b5a:	4b7a      	ldr	r3, [pc, #488]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b62:	60bb      	str	r3, [r7, #8]
 8005b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b66:	2301      	movs	r3, #1
 8005b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6a:	4b77      	ldr	r3, [pc, #476]	; (8005d48 <HAL_RCC_OscConfig+0x474>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d118      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b76:	4b74      	ldr	r3, [pc, #464]	; (8005d48 <HAL_RCC_OscConfig+0x474>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a73      	ldr	r2, [pc, #460]	; (8005d48 <HAL_RCC_OscConfig+0x474>)
 8005b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b82:	f7fe fb5f 	bl	8004244 <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b8a:	f7fe fb5b 	bl	8004244 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e10c      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9c:	4b6a      	ldr	r3, [pc, #424]	; (8005d48 <HAL_RCC_OscConfig+0x474>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f0      	beq.n	8005b8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d106      	bne.n	8005bbe <HAL_RCC_OscConfig+0x2ea>
 8005bb0:	4b64      	ldr	r3, [pc, #400]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb4:	4a63      	ldr	r2, [pc, #396]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	6713      	str	r3, [r2, #112]	; 0x70
 8005bbc:	e01c      	b.n	8005bf8 <HAL_RCC_OscConfig+0x324>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d10c      	bne.n	8005be0 <HAL_RCC_OscConfig+0x30c>
 8005bc6:	4b5f      	ldr	r3, [pc, #380]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	4a5e      	ldr	r2, [pc, #376]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bcc:	f043 0304 	orr.w	r3, r3, #4
 8005bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd2:	4b5c      	ldr	r3, [pc, #368]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd6:	4a5b      	ldr	r2, [pc, #364]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bd8:	f043 0301 	orr.w	r3, r3, #1
 8005bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bde:	e00b      	b.n	8005bf8 <HAL_RCC_OscConfig+0x324>
 8005be0:	4b58      	ldr	r3, [pc, #352]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be4:	4a57      	ldr	r2, [pc, #348]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	6713      	str	r3, [r2, #112]	; 0x70
 8005bec:	4b55      	ldr	r3, [pc, #340]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf0:	4a54      	ldr	r2, [pc, #336]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bf2:	f023 0304 	bic.w	r3, r3, #4
 8005bf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d015      	beq.n	8005c2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c00:	f7fe fb20 	bl	8004244 <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c06:	e00a      	b.n	8005c1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c08:	f7fe fb1c 	bl	8004244 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e0cb      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c1e:	4b49      	ldr	r3, [pc, #292]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0ee      	beq.n	8005c08 <HAL_RCC_OscConfig+0x334>
 8005c2a:	e014      	b.n	8005c56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2c:	f7fe fb0a 	bl	8004244 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c32:	e00a      	b.n	8005c4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c34:	f7fe fb06 	bl	8004244 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e0b5      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c4a:	4b3e      	ldr	r3, [pc, #248]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1ee      	bne.n	8005c34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d105      	bne.n	8005c68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c5c:	4b39      	ldr	r3, [pc, #228]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	4a38      	ldr	r2, [pc, #224]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 80a1 	beq.w	8005db4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c72:	4b34      	ldr	r3, [pc, #208]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 030c 	and.w	r3, r3, #12
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	d05c      	beq.n	8005d38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d141      	bne.n	8005d0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c86:	4b31      	ldr	r3, [pc, #196]	; (8005d4c <HAL_RCC_OscConfig+0x478>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8c:	f7fe fada 	bl	8004244 <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c94:	f7fe fad6 	bl	8004244 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e087      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca6:	4b27      	ldr	r3, [pc, #156]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f0      	bne.n	8005c94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69da      	ldr	r2, [r3, #28]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	019b      	lsls	r3, r3, #6
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc8:	085b      	lsrs	r3, r3, #1
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	041b      	lsls	r3, r3, #16
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	061b      	lsls	r3, r3, #24
 8005cd6:	491b      	ldr	r1, [pc, #108]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cdc:	4b1b      	ldr	r3, [pc, #108]	; (8005d4c <HAL_RCC_OscConfig+0x478>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce2:	f7fe faaf 	bl	8004244 <HAL_GetTick>
 8005ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cea:	f7fe faab 	bl	8004244 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e05c      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cfc:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0f0      	beq.n	8005cea <HAL_RCC_OscConfig+0x416>
 8005d08:	e054      	b.n	8005db4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0a:	4b10      	ldr	r3, [pc, #64]	; (8005d4c <HAL_RCC_OscConfig+0x478>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d10:	f7fe fa98 	bl	8004244 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d18:	f7fe fa94 	bl	8004244 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e045      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2a:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f0      	bne.n	8005d18 <HAL_RCC_OscConfig+0x444>
 8005d36:	e03d      	b.n	8005db4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d107      	bne.n	8005d50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e038      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
 8005d44:	40023800 	.word	0x40023800
 8005d48:	40007000 	.word	0x40007000
 8005d4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d50:	4b1b      	ldr	r3, [pc, #108]	; (8005dc0 <HAL_RCC_OscConfig+0x4ec>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d028      	beq.n	8005db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d121      	bne.n	8005db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d11a      	bne.n	8005db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d80:	4013      	ands	r3, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d111      	bne.n	8005db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d107      	bne.n	8005db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d001      	beq.n	8005db4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40023800 	.word	0x40023800

08005dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e0cc      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dd8:	4b68      	ldr	r3, [pc, #416]	; (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d90c      	bls.n	8005e00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005de6:	4b65      	ldr	r3, [pc, #404]	; (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dee:	4b63      	ldr	r3, [pc, #396]	; (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e0b8      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d020      	beq.n	8005e4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e18:	4b59      	ldr	r3, [pc, #356]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	4a58      	ldr	r2, [pc, #352]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0308 	and.w	r3, r3, #8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e30:	4b53      	ldr	r3, [pc, #332]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	4a52      	ldr	r2, [pc, #328]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e3c:	4b50      	ldr	r3, [pc, #320]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	494d      	ldr	r1, [pc, #308]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d044      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d107      	bne.n	8005e72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e62:	4b47      	ldr	r3, [pc, #284]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d119      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e07f      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d003      	beq.n	8005e82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d107      	bne.n	8005e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e82:	4b3f      	ldr	r3, [pc, #252]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d109      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e06f      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e92:	4b3b      	ldr	r3, [pc, #236]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e067      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ea2:	4b37      	ldr	r3, [pc, #220]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f023 0203 	bic.w	r2, r3, #3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	4934      	ldr	r1, [pc, #208]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005eb4:	f7fe f9c6 	bl	8004244 <HAL_GetTick>
 8005eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eba:	e00a      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ebc:	f7fe f9c2 	bl	8004244 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e04f      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed2:	4b2b      	ldr	r3, [pc, #172]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 020c 	and.w	r2, r3, #12
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d1eb      	bne.n	8005ebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ee4:	4b25      	ldr	r3, [pc, #148]	; (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d20c      	bcs.n	8005f0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef2:	4b22      	ldr	r3, [pc, #136]	; (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005efa:	4b20      	ldr	r3, [pc, #128]	; (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d001      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e032      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d008      	beq.n	8005f2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f18:	4b19      	ldr	r3, [pc, #100]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4916      	ldr	r1, [pc, #88]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f36:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	490e      	ldr	r1, [pc, #56]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f4a:	f000 f821 	bl	8005f90 <HAL_RCC_GetSysClockFreq>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	091b      	lsrs	r3, r3, #4
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	490a      	ldr	r1, [pc, #40]	; (8005f84 <HAL_RCC_ClockConfig+0x1c0>)
 8005f5c:	5ccb      	ldrb	r3, [r1, r3]
 8005f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f62:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <HAL_RCC_ClockConfig+0x1c4>)
 8005f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f66:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <HAL_RCC_ClockConfig+0x1c8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe f926 	bl	80041bc <HAL_InitTick>

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40023c00 	.word	0x40023c00
 8005f80:	40023800 	.word	0x40023800
 8005f84:	080104fc 	.word	0x080104fc
 8005f88:	20000008 	.word	0x20000008
 8005f8c:	2000000c 	.word	0x2000000c

08005f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f94:	b090      	sub	sp, #64	; 0x40
 8005f96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fa8:	4b59      	ldr	r3, [pc, #356]	; (8006110 <HAL_RCC_GetSysClockFreq+0x180>)
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f003 030c 	and.w	r3, r3, #12
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d00d      	beq.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	f200 80a1 	bhi.w	80060fc <HAL_RCC_GetSysClockFreq+0x16c>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d003      	beq.n	8005fca <HAL_RCC_GetSysClockFreq+0x3a>
 8005fc2:	e09b      	b.n	80060fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fc4:	4b53      	ldr	r3, [pc, #332]	; (8006114 <HAL_RCC_GetSysClockFreq+0x184>)
 8005fc6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005fc8:	e09b      	b.n	8006102 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fca:	4b53      	ldr	r3, [pc, #332]	; (8006118 <HAL_RCC_GetSysClockFreq+0x188>)
 8005fcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005fce:	e098      	b.n	8006102 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fd0:	4b4f      	ldr	r3, [pc, #316]	; (8006110 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fd8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fda:	4b4d      	ldr	r3, [pc, #308]	; (8006110 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d028      	beq.n	8006038 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fe6:	4b4a      	ldr	r3, [pc, #296]	; (8006110 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	099b      	lsrs	r3, r3, #6
 8005fec:	2200      	movs	r2, #0
 8005fee:	623b      	str	r3, [r7, #32]
 8005ff0:	627a      	str	r2, [r7, #36]	; 0x24
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	4b47      	ldr	r3, [pc, #284]	; (8006118 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ffc:	fb03 f201 	mul.w	r2, r3, r1
 8006000:	2300      	movs	r3, #0
 8006002:	fb00 f303 	mul.w	r3, r0, r3
 8006006:	4413      	add	r3, r2
 8006008:	4a43      	ldr	r2, [pc, #268]	; (8006118 <HAL_RCC_GetSysClockFreq+0x188>)
 800600a:	fba0 1202 	umull	r1, r2, r0, r2
 800600e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006010:	460a      	mov	r2, r1
 8006012:	62ba      	str	r2, [r7, #40]	; 0x28
 8006014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006016:	4413      	add	r3, r2
 8006018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	2200      	movs	r2, #0
 800601e:	61bb      	str	r3, [r7, #24]
 8006020:	61fa      	str	r2, [r7, #28]
 8006022:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006026:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800602a:	f7fa fe0d 	bl	8000c48 <__aeabi_uldivmod>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4613      	mov	r3, r2
 8006034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006036:	e053      	b.n	80060e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006038:	4b35      	ldr	r3, [pc, #212]	; (8006110 <HAL_RCC_GetSysClockFreq+0x180>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	099b      	lsrs	r3, r3, #6
 800603e:	2200      	movs	r2, #0
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	617a      	str	r2, [r7, #20]
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800604a:	f04f 0b00 	mov.w	fp, #0
 800604e:	4652      	mov	r2, sl
 8006050:	465b      	mov	r3, fp
 8006052:	f04f 0000 	mov.w	r0, #0
 8006056:	f04f 0100 	mov.w	r1, #0
 800605a:	0159      	lsls	r1, r3, #5
 800605c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006060:	0150      	lsls	r0, r2, #5
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	ebb2 080a 	subs.w	r8, r2, sl
 800606a:	eb63 090b 	sbc.w	r9, r3, fp
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800607a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800607e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006082:	ebb2 0408 	subs.w	r4, r2, r8
 8006086:	eb63 0509 	sbc.w	r5, r3, r9
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	00eb      	lsls	r3, r5, #3
 8006094:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006098:	00e2      	lsls	r2, r4, #3
 800609a:	4614      	mov	r4, r2
 800609c:	461d      	mov	r5, r3
 800609e:	eb14 030a 	adds.w	r3, r4, sl
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	eb45 030b 	adc.w	r3, r5, fp
 80060a8:	607b      	str	r3, [r7, #4]
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060b6:	4629      	mov	r1, r5
 80060b8:	028b      	lsls	r3, r1, #10
 80060ba:	4621      	mov	r1, r4
 80060bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060c0:	4621      	mov	r1, r4
 80060c2:	028a      	lsls	r2, r1, #10
 80060c4:	4610      	mov	r0, r2
 80060c6:	4619      	mov	r1, r3
 80060c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ca:	2200      	movs	r2, #0
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	60fa      	str	r2, [r7, #12]
 80060d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060d4:	f7fa fdb8 	bl	8000c48 <__aeabi_uldivmod>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4613      	mov	r3, r2
 80060de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060e0:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <HAL_RCC_GetSysClockFreq+0x180>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	0c1b      	lsrs	r3, r3, #16
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	3301      	adds	r3, #1
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80060f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060fa:	e002      	b.n	8006102 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060fc:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_RCC_GetSysClockFreq+0x184>)
 80060fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006104:	4618      	mov	r0, r3
 8006106:	3740      	adds	r7, #64	; 0x40
 8006108:	46bd      	mov	sp, r7
 800610a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800610e:	bf00      	nop
 8006110:	40023800 	.word	0x40023800
 8006114:	00f42400 	.word	0x00f42400
 8006118:	017d7840 	.word	0x017d7840

0800611c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006120:	4b03      	ldr	r3, [pc, #12]	; (8006130 <HAL_RCC_GetHCLKFreq+0x14>)
 8006122:	681b      	ldr	r3, [r3, #0]
}
 8006124:	4618      	mov	r0, r3
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20000008 	.word	0x20000008

08006134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006138:	f7ff fff0 	bl	800611c <HAL_RCC_GetHCLKFreq>
 800613c:	4602      	mov	r2, r0
 800613e:	4b05      	ldr	r3, [pc, #20]	; (8006154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	0a9b      	lsrs	r3, r3, #10
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	4903      	ldr	r1, [pc, #12]	; (8006158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800614a:	5ccb      	ldrb	r3, [r1, r3]
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006150:	4618      	mov	r0, r3
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40023800 	.word	0x40023800
 8006158:	0801050c 	.word	0x0801050c

0800615c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006160:	f7ff ffdc 	bl	800611c <HAL_RCC_GetHCLKFreq>
 8006164:	4602      	mov	r2, r0
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	0b5b      	lsrs	r3, r3, #13
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	4903      	ldr	r1, [pc, #12]	; (8006180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006172:	5ccb      	ldrb	r3, [r1, r3]
 8006174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006178:	4618      	mov	r0, r3
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40023800 	.word	0x40023800
 8006180:	0801050c 	.word	0x0801050c

08006184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e041      	b.n	800621a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fd fcc6 	bl	8003b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3304      	adds	r3, #4
 80061c0:	4619      	mov	r1, r3
 80061c2:	4610      	mov	r0, r2
 80061c4:	f001 f828 	bl	8007218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	d001      	beq.n	800623c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e046      	b.n	80062ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a23      	ldr	r2, [pc, #140]	; (80062d8 <HAL_TIM_Base_Start+0xb4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d022      	beq.n	8006294 <HAL_TIM_Base_Start+0x70>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006256:	d01d      	beq.n	8006294 <HAL_TIM_Base_Start+0x70>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1f      	ldr	r2, [pc, #124]	; (80062dc <HAL_TIM_Base_Start+0xb8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d018      	beq.n	8006294 <HAL_TIM_Base_Start+0x70>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1e      	ldr	r2, [pc, #120]	; (80062e0 <HAL_TIM_Base_Start+0xbc>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <HAL_TIM_Base_Start+0x70>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1c      	ldr	r2, [pc, #112]	; (80062e4 <HAL_TIM_Base_Start+0xc0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00e      	beq.n	8006294 <HAL_TIM_Base_Start+0x70>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1b      	ldr	r2, [pc, #108]	; (80062e8 <HAL_TIM_Base_Start+0xc4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d009      	beq.n	8006294 <HAL_TIM_Base_Start+0x70>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a19      	ldr	r2, [pc, #100]	; (80062ec <HAL_TIM_Base_Start+0xc8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d004      	beq.n	8006294 <HAL_TIM_Base_Start+0x70>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a18      	ldr	r2, [pc, #96]	; (80062f0 <HAL_TIM_Base_Start+0xcc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d111      	bne.n	80062b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b06      	cmp	r3, #6
 80062a4:	d010      	beq.n	80062c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0201 	orr.w	r2, r2, #1
 80062b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b6:	e007      	b.n	80062c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40010000 	.word	0x40010000
 80062dc:	40000400 	.word	0x40000400
 80062e0:	40000800 	.word	0x40000800
 80062e4:	40000c00 	.word	0x40000c00
 80062e8:	40010400 	.word	0x40010400
 80062ec:	40014000 	.word	0x40014000
 80062f0:	40001800 	.word	0x40001800

080062f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e041      	b.n	800638a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f839 	bl	8006392 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3304      	adds	r3, #4
 8006330:	4619      	mov	r1, r3
 8006332:	4610      	mov	r0, r2
 8006334:	f000 ff70 	bl	8007218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
	...

080063a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d109      	bne.n	80063cc <HAL_TIM_PWM_Start+0x24>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	bf14      	ite	ne
 80063c4:	2301      	movne	r3, #1
 80063c6:	2300      	moveq	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	e022      	b.n	8006412 <HAL_TIM_PWM_Start+0x6a>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d109      	bne.n	80063e6 <HAL_TIM_PWM_Start+0x3e>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b01      	cmp	r3, #1
 80063dc:	bf14      	ite	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	2300      	moveq	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	e015      	b.n	8006412 <HAL_TIM_PWM_Start+0x6a>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d109      	bne.n	8006400 <HAL_TIM_PWM_Start+0x58>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	bf14      	ite	ne
 80063f8:	2301      	movne	r3, #1
 80063fa:	2300      	moveq	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	e008      	b.n	8006412 <HAL_TIM_PWM_Start+0x6a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	bf14      	ite	ne
 800640c:	2301      	movne	r3, #1
 800640e:	2300      	moveq	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e07c      	b.n	8006514 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d104      	bne.n	800642a <HAL_TIM_PWM_Start+0x82>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006428:	e013      	b.n	8006452 <HAL_TIM_PWM_Start+0xaa>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b04      	cmp	r3, #4
 800642e:	d104      	bne.n	800643a <HAL_TIM_PWM_Start+0x92>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006438:	e00b      	b.n	8006452 <HAL_TIM_PWM_Start+0xaa>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b08      	cmp	r3, #8
 800643e:	d104      	bne.n	800644a <HAL_TIM_PWM_Start+0xa2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006448:	e003      	b.n	8006452 <HAL_TIM_PWM_Start+0xaa>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2201      	movs	r2, #1
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f001 faf0 	bl	8007a40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a2d      	ldr	r2, [pc, #180]	; (800651c <HAL_TIM_PWM_Start+0x174>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d004      	beq.n	8006474 <HAL_TIM_PWM_Start+0xcc>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a2c      	ldr	r2, [pc, #176]	; (8006520 <HAL_TIM_PWM_Start+0x178>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d101      	bne.n	8006478 <HAL_TIM_PWM_Start+0xd0>
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <HAL_TIM_PWM_Start+0xd2>
 8006478:	2300      	movs	r3, #0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d007      	beq.n	800648e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800648c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a22      	ldr	r2, [pc, #136]	; (800651c <HAL_TIM_PWM_Start+0x174>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d022      	beq.n	80064de <HAL_TIM_PWM_Start+0x136>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a0:	d01d      	beq.n	80064de <HAL_TIM_PWM_Start+0x136>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1f      	ldr	r2, [pc, #124]	; (8006524 <HAL_TIM_PWM_Start+0x17c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d018      	beq.n	80064de <HAL_TIM_PWM_Start+0x136>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a1d      	ldr	r2, [pc, #116]	; (8006528 <HAL_TIM_PWM_Start+0x180>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d013      	beq.n	80064de <HAL_TIM_PWM_Start+0x136>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1c      	ldr	r2, [pc, #112]	; (800652c <HAL_TIM_PWM_Start+0x184>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00e      	beq.n	80064de <HAL_TIM_PWM_Start+0x136>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a16      	ldr	r2, [pc, #88]	; (8006520 <HAL_TIM_PWM_Start+0x178>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d009      	beq.n	80064de <HAL_TIM_PWM_Start+0x136>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a18      	ldr	r2, [pc, #96]	; (8006530 <HAL_TIM_PWM_Start+0x188>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d004      	beq.n	80064de <HAL_TIM_PWM_Start+0x136>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a16      	ldr	r2, [pc, #88]	; (8006534 <HAL_TIM_PWM_Start+0x18c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d111      	bne.n	8006502 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b06      	cmp	r3, #6
 80064ee:	d010      	beq.n	8006512 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0201 	orr.w	r2, r2, #1
 80064fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006500:	e007      	b.n	8006512 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0201 	orr.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	40010000 	.word	0x40010000
 8006520:	40010400 	.word	0x40010400
 8006524:	40000400 	.word	0x40000400
 8006528:	40000800 	.word	0x40000800
 800652c:	40000c00 	.word	0x40000c00
 8006530:	40014000 	.word	0x40014000
 8006534:	40001800 	.word	0x40001800

08006538 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e041      	b.n	80065ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f839 	bl	80065d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3304      	adds	r3, #4
 8006574:	4619      	mov	r1, r3
 8006576:	4610      	mov	r0, r2
 8006578:	f000 fe4e 	bl	8007218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
	...

080065ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d104      	bne.n	800660a <HAL_TIM_IC_Start_IT+0x1e>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006606:	b2db      	uxtb	r3, r3
 8006608:	e013      	b.n	8006632 <HAL_TIM_IC_Start_IT+0x46>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b04      	cmp	r3, #4
 800660e:	d104      	bne.n	800661a <HAL_TIM_IC_Start_IT+0x2e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006616:	b2db      	uxtb	r3, r3
 8006618:	e00b      	b.n	8006632 <HAL_TIM_IC_Start_IT+0x46>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b08      	cmp	r3, #8
 800661e:	d104      	bne.n	800662a <HAL_TIM_IC_Start_IT+0x3e>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006626:	b2db      	uxtb	r3, r3
 8006628:	e003      	b.n	8006632 <HAL_TIM_IC_Start_IT+0x46>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006630:	b2db      	uxtb	r3, r3
 8006632:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d104      	bne.n	8006644 <HAL_TIM_IC_Start_IT+0x58>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006640:	b2db      	uxtb	r3, r3
 8006642:	e013      	b.n	800666c <HAL_TIM_IC_Start_IT+0x80>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b04      	cmp	r3, #4
 8006648:	d104      	bne.n	8006654 <HAL_TIM_IC_Start_IT+0x68>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006650:	b2db      	uxtb	r3, r3
 8006652:	e00b      	b.n	800666c <HAL_TIM_IC_Start_IT+0x80>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2b08      	cmp	r3, #8
 8006658:	d104      	bne.n	8006664 <HAL_TIM_IC_Start_IT+0x78>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006660:	b2db      	uxtb	r3, r3
 8006662:	e003      	b.n	800666c <HAL_TIM_IC_Start_IT+0x80>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800666a:	b2db      	uxtb	r3, r3
 800666c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d102      	bne.n	800667a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006674:	7b7b      	ldrb	r3, [r7, #13]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d001      	beq.n	800667e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e0cc      	b.n	8006818 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <HAL_TIM_IC_Start_IT+0xa2>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800668c:	e013      	b.n	80066b6 <HAL_TIM_IC_Start_IT+0xca>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b04      	cmp	r3, #4
 8006692:	d104      	bne.n	800669e <HAL_TIM_IC_Start_IT+0xb2>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800669c:	e00b      	b.n	80066b6 <HAL_TIM_IC_Start_IT+0xca>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d104      	bne.n	80066ae <HAL_TIM_IC_Start_IT+0xc2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066ac:	e003      	b.n	80066b6 <HAL_TIM_IC_Start_IT+0xca>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2202      	movs	r2, #2
 80066b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d104      	bne.n	80066c6 <HAL_TIM_IC_Start_IT+0xda>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066c4:	e013      	b.n	80066ee <HAL_TIM_IC_Start_IT+0x102>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d104      	bne.n	80066d6 <HAL_TIM_IC_Start_IT+0xea>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2202      	movs	r2, #2
 80066d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066d4:	e00b      	b.n	80066ee <HAL_TIM_IC_Start_IT+0x102>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d104      	bne.n	80066e6 <HAL_TIM_IC_Start_IT+0xfa>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e4:	e003      	b.n	80066ee <HAL_TIM_IC_Start_IT+0x102>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2202      	movs	r2, #2
 80066ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b0c      	cmp	r3, #12
 80066f2:	d841      	bhi.n	8006778 <HAL_TIM_IC_Start_IT+0x18c>
 80066f4:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <HAL_TIM_IC_Start_IT+0x110>)
 80066f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fa:	bf00      	nop
 80066fc:	08006731 	.word	0x08006731
 8006700:	08006779 	.word	0x08006779
 8006704:	08006779 	.word	0x08006779
 8006708:	08006779 	.word	0x08006779
 800670c:	08006743 	.word	0x08006743
 8006710:	08006779 	.word	0x08006779
 8006714:	08006779 	.word	0x08006779
 8006718:	08006779 	.word	0x08006779
 800671c:	08006755 	.word	0x08006755
 8006720:	08006779 	.word	0x08006779
 8006724:	08006779 	.word	0x08006779
 8006728:	08006779 	.word	0x08006779
 800672c:	08006767 	.word	0x08006767
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0202 	orr.w	r2, r2, #2
 800673e:	60da      	str	r2, [r3, #12]
      break;
 8006740:	e01d      	b.n	800677e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0204 	orr.w	r2, r2, #4
 8006750:	60da      	str	r2, [r3, #12]
      break;
 8006752:	e014      	b.n	800677e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0208 	orr.w	r2, r2, #8
 8006762:	60da      	str	r2, [r3, #12]
      break;
 8006764:	e00b      	b.n	800677e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0210 	orr.w	r2, r2, #16
 8006774:	60da      	str	r2, [r3, #12]
      break;
 8006776:	e002      	b.n	800677e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	73fb      	strb	r3, [r7, #15]
      break;
 800677c:	bf00      	nop
  }

  if (status == HAL_OK)
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d148      	bne.n	8006816 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2201      	movs	r2, #1
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	4618      	mov	r0, r3
 800678e:	f001 f957 	bl	8007a40 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a22      	ldr	r2, [pc, #136]	; (8006820 <HAL_TIM_IC_Start_IT+0x234>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d022      	beq.n	80067e2 <HAL_TIM_IC_Start_IT+0x1f6>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a4:	d01d      	beq.n	80067e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1e      	ldr	r2, [pc, #120]	; (8006824 <HAL_TIM_IC_Start_IT+0x238>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d018      	beq.n	80067e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <HAL_TIM_IC_Start_IT+0x23c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1b      	ldr	r2, [pc, #108]	; (800682c <HAL_TIM_IC_Start_IT+0x240>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00e      	beq.n	80067e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a19      	ldr	r2, [pc, #100]	; (8006830 <HAL_TIM_IC_Start_IT+0x244>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d009      	beq.n	80067e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a18      	ldr	r2, [pc, #96]	; (8006834 <HAL_TIM_IC_Start_IT+0x248>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d004      	beq.n	80067e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a16      	ldr	r2, [pc, #88]	; (8006838 <HAL_TIM_IC_Start_IT+0x24c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d111      	bne.n	8006806 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b06      	cmp	r3, #6
 80067f2:	d010      	beq.n	8006816 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006804:	e007      	b.n	8006816 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0201 	orr.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006816:	7bfb      	ldrb	r3, [r7, #15]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	40010000 	.word	0x40010000
 8006824:	40000400 	.word	0x40000400
 8006828:	40000800 	.word	0x40000800
 800682c:	40000c00 	.word	0x40000c00
 8006830:	40010400 	.word	0x40010400
 8006834:	40014000 	.word	0x40014000
 8006838:	40001800 	.word	0x40001800

0800683c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e097      	b.n	8006980 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7fd fa05 	bl	8003c74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6812      	ldr	r2, [r2, #0]
 800687c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006880:	f023 0307 	bic.w	r3, r3, #7
 8006884:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3304      	adds	r3, #4
 800688e:	4619      	mov	r1, r3
 8006890:	4610      	mov	r0, r2
 8006892:	f000 fcc1 	bl	8007218 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068be:	f023 0303 	bic.w	r3, r3, #3
 80068c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	4313      	orrs	r3, r2
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068dc:	f023 030c 	bic.w	r3, r3, #12
 80068e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	021b      	lsls	r3, r3, #8
 80068f8:	4313      	orrs	r3, r2
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	011a      	lsls	r2, r3, #4
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	031b      	lsls	r3, r3, #12
 800690c:	4313      	orrs	r3, r2
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800691a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006922:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	4313      	orrs	r3, r2
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006998:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d110      	bne.n	80069da <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d102      	bne.n	80069c4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80069be:	7b7b      	ldrb	r3, [r7, #13]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d001      	beq.n	80069c8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e089      	b.n	8006adc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069d8:	e031      	b.n	8006a3e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b04      	cmp	r3, #4
 80069de:	d110      	bne.n	8006a02 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d102      	bne.n	80069ec <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069e6:	7b3b      	ldrb	r3, [r7, #12]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d001      	beq.n	80069f0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e075      	b.n	8006adc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a00:	e01d      	b.n	8006a3e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d108      	bne.n	8006a1a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d105      	bne.n	8006a1a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a0e:	7b7b      	ldrb	r3, [r7, #13]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d102      	bne.n	8006a1a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a14:	7b3b      	ldrb	r3, [r7, #12]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d001      	beq.n	8006a1e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e05e      	b.n	8006adc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2202      	movs	r2, #2
 8006a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2202      	movs	r2, #2
 8006a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <HAL_TIM_Encoder_Start_IT+0xc4>
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d010      	beq.n	8006a6c <HAL_TIM_Encoder_Start_IT+0xe4>
 8006a4a:	e01f      	b.n	8006a8c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2201      	movs	r2, #1
 8006a52:	2100      	movs	r1, #0
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 fff3 	bl	8007a40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0202 	orr.w	r2, r2, #2
 8006a68:	60da      	str	r2, [r3, #12]
      break;
 8006a6a:	e02e      	b.n	8006aca <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2201      	movs	r2, #1
 8006a72:	2104      	movs	r1, #4
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 ffe3 	bl	8007a40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f042 0204 	orr.w	r2, r2, #4
 8006a88:	60da      	str	r2, [r3, #12]
      break;
 8006a8a:	e01e      	b.n	8006aca <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2201      	movs	r2, #1
 8006a92:	2100      	movs	r1, #0
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 ffd3 	bl	8007a40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	2104      	movs	r1, #4
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 ffcc 	bl	8007a40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0202 	orr.w	r2, r2, #2
 8006ab6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0204 	orr.w	r2, r2, #4
 8006ac6:	60da      	str	r2, [r3, #12]
      break;
 8006ac8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f042 0201 	orr.w	r2, r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d122      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d11b      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f06f 0202 	mvn.w	r2, #2
 8006b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fb fba8 	bl	800227c <HAL_TIM_IC_CaptureCallback>
 8006b2c:	e005      	b.n	8006b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fb54 	bl	80071dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fb5b 	bl	80071f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d122      	bne.n	8006b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d11b      	bne.n	8006b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f06f 0204 	mvn.w	r2, #4
 8006b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fb fb7e 	bl	800227c <HAL_TIM_IC_CaptureCallback>
 8006b80:	e005      	b.n	8006b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fb2a 	bl	80071dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fb31 	bl	80071f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d122      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d11b      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0208 	mvn.w	r2, #8
 8006bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7fb fb54 	bl	800227c <HAL_TIM_IC_CaptureCallback>
 8006bd4:	e005      	b.n	8006be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fb00 	bl	80071dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fb07 	bl	80071f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0310 	and.w	r3, r3, #16
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d122      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d11b      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f06f 0210 	mvn.w	r2, #16
 8006c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2208      	movs	r2, #8
 8006c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7fb fb2a 	bl	800227c <HAL_TIM_IC_CaptureCallback>
 8006c28:	e005      	b.n	8006c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fad6 	bl	80071dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fadd 	bl	80071f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d10e      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d107      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f06f 0201 	mvn.w	r2, #1
 8006c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fab0 	bl	80071c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c72:	2b80      	cmp	r3, #128	; 0x80
 8006c74:	d10e      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c80:	2b80      	cmp	r3, #128	; 0x80
 8006c82:	d107      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 ffd4 	bl	8007c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9e:	2b40      	cmp	r3, #64	; 0x40
 8006ca0:	d10e      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cac:	2b40      	cmp	r3, #64	; 0x40
 8006cae:	d107      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 faa2 	bl	8007204 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d10e      	bne.n	8006cec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b20      	cmp	r3, #32
 8006cda:	d107      	bne.n	8006cec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f06f 0220 	mvn.w	r2, #32
 8006ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 ff9e 	bl	8007c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e088      	b.n	8006e24 <HAL_TIM_IC_ConfigChannel+0x130>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d11b      	bne.n	8006d58 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6819      	ldr	r1, [r3, #0]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f000 fcc2 	bl	80076b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699a      	ldr	r2, [r3, #24]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 020c 	bic.w	r2, r2, #12
 8006d42:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6999      	ldr	r1, [r3, #24]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	619a      	str	r2, [r3, #24]
 8006d56:	e060      	b.n	8006e1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d11c      	bne.n	8006d98 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6819      	ldr	r1, [r3, #0]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f000 fd46 	bl	80077fe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	699a      	ldr	r2, [r3, #24]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d80:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6999      	ldr	r1, [r3, #24]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	021a      	lsls	r2, r3, #8
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	619a      	str	r2, [r3, #24]
 8006d96:	e040      	b.n	8006e1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d11b      	bne.n	8006dd6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	6819      	ldr	r1, [r3, #0]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f000 fd93 	bl	80078d8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69da      	ldr	r2, [r3, #28]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 020c 	bic.w	r2, r2, #12
 8006dc0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69d9      	ldr	r1, [r3, #28]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	61da      	str	r2, [r3, #28]
 8006dd4:	e021      	b.n	8006e1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b0c      	cmp	r3, #12
 8006dda:	d11c      	bne.n	8006e16 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6818      	ldr	r0, [r3, #0]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	6819      	ldr	r1, [r3, #0]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f000 fdb0 	bl	8007950 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69da      	ldr	r2, [r3, #28]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006dfe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69d9      	ldr	r1, [r3, #28]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	021a      	lsls	r2, r3, #8
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	61da      	str	r2, [r3, #28]
 8006e14:	e001      	b.n	8006e1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d101      	bne.n	8006e4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e46:	2302      	movs	r3, #2
 8006e48:	e0ae      	b.n	8006fa8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b0c      	cmp	r3, #12
 8006e56:	f200 809f 	bhi.w	8006f98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e5a:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e60:	08006e95 	.word	0x08006e95
 8006e64:	08006f99 	.word	0x08006f99
 8006e68:	08006f99 	.word	0x08006f99
 8006e6c:	08006f99 	.word	0x08006f99
 8006e70:	08006ed5 	.word	0x08006ed5
 8006e74:	08006f99 	.word	0x08006f99
 8006e78:	08006f99 	.word	0x08006f99
 8006e7c:	08006f99 	.word	0x08006f99
 8006e80:	08006f17 	.word	0x08006f17
 8006e84:	08006f99 	.word	0x08006f99
 8006e88:	08006f99 	.word	0x08006f99
 8006e8c:	08006f99 	.word	0x08006f99
 8006e90:	08006f57 	.word	0x08006f57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68b9      	ldr	r1, [r7, #8]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fa5c 	bl	8007358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0208 	orr.w	r2, r2, #8
 8006eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699a      	ldr	r2, [r3, #24]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0204 	bic.w	r2, r2, #4
 8006ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6999      	ldr	r1, [r3, #24]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	691a      	ldr	r2, [r3, #16]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	619a      	str	r2, [r3, #24]
      break;
 8006ed2:	e064      	b.n	8006f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68b9      	ldr	r1, [r7, #8]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 faac 	bl	8007438 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699a      	ldr	r2, [r3, #24]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6999      	ldr	r1, [r3, #24]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	021a      	lsls	r2, r3, #8
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	619a      	str	r2, [r3, #24]
      break;
 8006f14:	e043      	b.n	8006f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 fb01 	bl	8007524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0208 	orr.w	r2, r2, #8
 8006f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69da      	ldr	r2, [r3, #28]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0204 	bic.w	r2, r2, #4
 8006f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69d9      	ldr	r1, [r3, #28]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	61da      	str	r2, [r3, #28]
      break;
 8006f54:	e023      	b.n	8006f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68b9      	ldr	r1, [r7, #8]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 fb55 	bl	800760c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69da      	ldr	r2, [r3, #28]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69da      	ldr	r2, [r3, #28]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69d9      	ldr	r1, [r3, #28]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	021a      	lsls	r2, r3, #8
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	61da      	str	r2, [r3, #28]
      break;
 8006f96:	e002      	b.n	8006f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_TIM_ConfigClockSource+0x1c>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e0b4      	b.n	8007136 <HAL_TIM_ConfigClockSource+0x186>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007004:	d03e      	beq.n	8007084 <HAL_TIM_ConfigClockSource+0xd4>
 8007006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800700a:	f200 8087 	bhi.w	800711c <HAL_TIM_ConfigClockSource+0x16c>
 800700e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007012:	f000 8086 	beq.w	8007122 <HAL_TIM_ConfigClockSource+0x172>
 8007016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701a:	d87f      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
 800701c:	2b70      	cmp	r3, #112	; 0x70
 800701e:	d01a      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0xa6>
 8007020:	2b70      	cmp	r3, #112	; 0x70
 8007022:	d87b      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
 8007024:	2b60      	cmp	r3, #96	; 0x60
 8007026:	d050      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x11a>
 8007028:	2b60      	cmp	r3, #96	; 0x60
 800702a:	d877      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
 800702c:	2b50      	cmp	r3, #80	; 0x50
 800702e:	d03c      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0xfa>
 8007030:	2b50      	cmp	r3, #80	; 0x50
 8007032:	d873      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
 8007034:	2b40      	cmp	r3, #64	; 0x40
 8007036:	d058      	beq.n	80070ea <HAL_TIM_ConfigClockSource+0x13a>
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	d86f      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
 800703c:	2b30      	cmp	r3, #48	; 0x30
 800703e:	d064      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x15a>
 8007040:	2b30      	cmp	r3, #48	; 0x30
 8007042:	d86b      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
 8007044:	2b20      	cmp	r3, #32
 8007046:	d060      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x15a>
 8007048:	2b20      	cmp	r3, #32
 800704a:	d867      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
 800704c:	2b00      	cmp	r3, #0
 800704e:	d05c      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x15a>
 8007050:	2b10      	cmp	r3, #16
 8007052:	d05a      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x15a>
 8007054:	e062      	b.n	800711c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	6899      	ldr	r1, [r3, #8]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f000 fccb 	bl	8007a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	609a      	str	r2, [r3, #8]
      break;
 8007082:	e04f      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6818      	ldr	r0, [r3, #0]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	6899      	ldr	r1, [r3, #8]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f000 fcb4 	bl	8007a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070a6:	609a      	str	r2, [r3, #8]
      break;
 80070a8:	e03c      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	6859      	ldr	r1, [r3, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	461a      	mov	r2, r3
 80070b8:	f000 fb72 	bl	80077a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2150      	movs	r1, #80	; 0x50
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fc81 	bl	80079ca <TIM_ITRx_SetConfig>
      break;
 80070c8:	e02c      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	6859      	ldr	r1, [r3, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	461a      	mov	r2, r3
 80070d8:	f000 fbce 	bl	8007878 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2160      	movs	r1, #96	; 0x60
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fc71 	bl	80079ca <TIM_ITRx_SetConfig>
      break;
 80070e8:	e01c      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	6859      	ldr	r1, [r3, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f000 fb52 	bl	80077a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2140      	movs	r1, #64	; 0x40
 8007102:	4618      	mov	r0, r3
 8007104:	f000 fc61 	bl	80079ca <TIM_ITRx_SetConfig>
      break;
 8007108:	e00c      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4619      	mov	r1, r3
 8007114:	4610      	mov	r0, r2
 8007116:	f000 fc58 	bl	80079ca <TIM_ITRx_SetConfig>
      break;
 800711a:	e003      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	73fb      	strb	r3, [r7, #15]
      break;
 8007120:	e000      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b0c      	cmp	r3, #12
 8007152:	d831      	bhi.n	80071b8 <HAL_TIM_ReadCapturedValue+0x78>
 8007154:	a201      	add	r2, pc, #4	; (adr r2, 800715c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715a:	bf00      	nop
 800715c:	08007191 	.word	0x08007191
 8007160:	080071b9 	.word	0x080071b9
 8007164:	080071b9 	.word	0x080071b9
 8007168:	080071b9 	.word	0x080071b9
 800716c:	0800719b 	.word	0x0800719b
 8007170:	080071b9 	.word	0x080071b9
 8007174:	080071b9 	.word	0x080071b9
 8007178:	080071b9 	.word	0x080071b9
 800717c:	080071a5 	.word	0x080071a5
 8007180:	080071b9 	.word	0x080071b9
 8007184:	080071b9 	.word	0x080071b9
 8007188:	080071b9 	.word	0x080071b9
 800718c:	080071af 	.word	0x080071af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007196:	60fb      	str	r3, [r7, #12]

      break;
 8007198:	e00f      	b.n	80071ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	60fb      	str	r3, [r7, #12]

      break;
 80071a2:	e00a      	b.n	80071ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071aa:	60fb      	str	r3, [r7, #12]

      break;
 80071ac:	e005      	b.n	80071ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b4:	60fb      	str	r3, [r7, #12]

      break;
 80071b6:	e000      	b.n	80071ba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80071b8:	bf00      	nop
  }

  return tmpreg;
 80071ba:	68fb      	ldr	r3, [r7, #12]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a40      	ldr	r2, [pc, #256]	; (800732c <TIM_Base_SetConfig+0x114>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d013      	beq.n	8007258 <TIM_Base_SetConfig+0x40>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007236:	d00f      	beq.n	8007258 <TIM_Base_SetConfig+0x40>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a3d      	ldr	r2, [pc, #244]	; (8007330 <TIM_Base_SetConfig+0x118>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d00b      	beq.n	8007258 <TIM_Base_SetConfig+0x40>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a3c      	ldr	r2, [pc, #240]	; (8007334 <TIM_Base_SetConfig+0x11c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d007      	beq.n	8007258 <TIM_Base_SetConfig+0x40>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a3b      	ldr	r2, [pc, #236]	; (8007338 <TIM_Base_SetConfig+0x120>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d003      	beq.n	8007258 <TIM_Base_SetConfig+0x40>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a3a      	ldr	r2, [pc, #232]	; (800733c <TIM_Base_SetConfig+0x124>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d108      	bne.n	800726a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a2f      	ldr	r2, [pc, #188]	; (800732c <TIM_Base_SetConfig+0x114>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d02b      	beq.n	80072ca <TIM_Base_SetConfig+0xb2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007278:	d027      	beq.n	80072ca <TIM_Base_SetConfig+0xb2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a2c      	ldr	r2, [pc, #176]	; (8007330 <TIM_Base_SetConfig+0x118>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d023      	beq.n	80072ca <TIM_Base_SetConfig+0xb2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a2b      	ldr	r2, [pc, #172]	; (8007334 <TIM_Base_SetConfig+0x11c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d01f      	beq.n	80072ca <TIM_Base_SetConfig+0xb2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a2a      	ldr	r2, [pc, #168]	; (8007338 <TIM_Base_SetConfig+0x120>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d01b      	beq.n	80072ca <TIM_Base_SetConfig+0xb2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a29      	ldr	r2, [pc, #164]	; (800733c <TIM_Base_SetConfig+0x124>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d017      	beq.n	80072ca <TIM_Base_SetConfig+0xb2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a28      	ldr	r2, [pc, #160]	; (8007340 <TIM_Base_SetConfig+0x128>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d013      	beq.n	80072ca <TIM_Base_SetConfig+0xb2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a27      	ldr	r2, [pc, #156]	; (8007344 <TIM_Base_SetConfig+0x12c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d00f      	beq.n	80072ca <TIM_Base_SetConfig+0xb2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a26      	ldr	r2, [pc, #152]	; (8007348 <TIM_Base_SetConfig+0x130>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d00b      	beq.n	80072ca <TIM_Base_SetConfig+0xb2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a25      	ldr	r2, [pc, #148]	; (800734c <TIM_Base_SetConfig+0x134>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d007      	beq.n	80072ca <TIM_Base_SetConfig+0xb2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a24      	ldr	r2, [pc, #144]	; (8007350 <TIM_Base_SetConfig+0x138>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d003      	beq.n	80072ca <TIM_Base_SetConfig+0xb2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a23      	ldr	r2, [pc, #140]	; (8007354 <TIM_Base_SetConfig+0x13c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d108      	bne.n	80072dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	4313      	orrs	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	689a      	ldr	r2, [r3, #8]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a0a      	ldr	r2, [pc, #40]	; (800732c <TIM_Base_SetConfig+0x114>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d003      	beq.n	8007310 <TIM_Base_SetConfig+0xf8>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a0c      	ldr	r2, [pc, #48]	; (800733c <TIM_Base_SetConfig+0x124>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d103      	bne.n	8007318 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	691a      	ldr	r2, [r3, #16]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	615a      	str	r2, [r3, #20]
}
 800731e:	bf00      	nop
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	40010000 	.word	0x40010000
 8007330:	40000400 	.word	0x40000400
 8007334:	40000800 	.word	0x40000800
 8007338:	40000c00 	.word	0x40000c00
 800733c:	40010400 	.word	0x40010400
 8007340:	40014000 	.word	0x40014000
 8007344:	40014400 	.word	0x40014400
 8007348:	40014800 	.word	0x40014800
 800734c:	40001800 	.word	0x40001800
 8007350:	40001c00 	.word	0x40001c00
 8007354:	40002000 	.word	0x40002000

08007358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	f023 0201 	bic.w	r2, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f023 0303 	bic.w	r3, r3, #3
 800738e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f023 0302 	bic.w	r3, r3, #2
 80073a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a20      	ldr	r2, [pc, #128]	; (8007430 <TIM_OC1_SetConfig+0xd8>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <TIM_OC1_SetConfig+0x64>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a1f      	ldr	r2, [pc, #124]	; (8007434 <TIM_OC1_SetConfig+0xdc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d10c      	bne.n	80073d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f023 0308 	bic.w	r3, r3, #8
 80073c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f023 0304 	bic.w	r3, r3, #4
 80073d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a15      	ldr	r2, [pc, #84]	; (8007430 <TIM_OC1_SetConfig+0xd8>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d003      	beq.n	80073e6 <TIM_OC1_SetConfig+0x8e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a14      	ldr	r2, [pc, #80]	; (8007434 <TIM_OC1_SetConfig+0xdc>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d111      	bne.n	800740a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	4313      	orrs	r3, r2
 8007408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	621a      	str	r2, [r3, #32]
}
 8007424:	bf00      	nop
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	40010000 	.word	0x40010000
 8007434:	40010400 	.word	0x40010400

08007438 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	f023 0210 	bic.w	r2, r3, #16
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800746e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	021b      	lsls	r3, r3, #8
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f023 0320 	bic.w	r3, r3, #32
 8007482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	4313      	orrs	r3, r2
 800748e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a22      	ldr	r2, [pc, #136]	; (800751c <TIM_OC2_SetConfig+0xe4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <TIM_OC2_SetConfig+0x68>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a21      	ldr	r2, [pc, #132]	; (8007520 <TIM_OC2_SetConfig+0xe8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d10d      	bne.n	80074bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a17      	ldr	r2, [pc, #92]	; (800751c <TIM_OC2_SetConfig+0xe4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d003      	beq.n	80074cc <TIM_OC2_SetConfig+0x94>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a16      	ldr	r2, [pc, #88]	; (8007520 <TIM_OC2_SetConfig+0xe8>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d113      	bne.n	80074f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	621a      	str	r2, [r3, #32]
}
 800750e:	bf00      	nop
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40010000 	.word	0x40010000
 8007520:	40010400 	.word	0x40010400

08007524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007524:	b480      	push	{r7}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0303 	bic.w	r3, r3, #3
 800755a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800756c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	021b      	lsls	r3, r3, #8
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a21      	ldr	r2, [pc, #132]	; (8007604 <TIM_OC3_SetConfig+0xe0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d003      	beq.n	800758a <TIM_OC3_SetConfig+0x66>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a20      	ldr	r2, [pc, #128]	; (8007608 <TIM_OC3_SetConfig+0xe4>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d10d      	bne.n	80075a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	021b      	lsls	r3, r3, #8
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	4313      	orrs	r3, r2
 800759c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a16      	ldr	r2, [pc, #88]	; (8007604 <TIM_OC3_SetConfig+0xe0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d003      	beq.n	80075b6 <TIM_OC3_SetConfig+0x92>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a15      	ldr	r2, [pc, #84]	; (8007608 <TIM_OC3_SetConfig+0xe4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d113      	bne.n	80075de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	621a      	str	r2, [r3, #32]
}
 80075f8:	bf00      	nop
 80075fa:	371c      	adds	r7, #28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	40010000 	.word	0x40010000
 8007608:	40010400 	.word	0x40010400

0800760c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800763a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	021b      	lsls	r3, r3, #8
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	4313      	orrs	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	031b      	lsls	r3, r3, #12
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	4313      	orrs	r3, r2
 8007662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a12      	ldr	r2, [pc, #72]	; (80076b0 <TIM_OC4_SetConfig+0xa4>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d003      	beq.n	8007674 <TIM_OC4_SetConfig+0x68>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a11      	ldr	r2, [pc, #68]	; (80076b4 <TIM_OC4_SetConfig+0xa8>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d109      	bne.n	8007688 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800767a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	019b      	lsls	r3, r3, #6
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	4313      	orrs	r3, r2
 8007686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	621a      	str	r2, [r3, #32]
}
 80076a2:	bf00      	nop
 80076a4:	371c      	adds	r7, #28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40010000 	.word	0x40010000
 80076b4:	40010400 	.word	0x40010400

080076b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	f023 0201 	bic.w	r2, r3, #1
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4a28      	ldr	r2, [pc, #160]	; (8007784 <TIM_TI1_SetConfig+0xcc>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d01b      	beq.n	800771e <TIM_TI1_SetConfig+0x66>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ec:	d017      	beq.n	800771e <TIM_TI1_SetConfig+0x66>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4a25      	ldr	r2, [pc, #148]	; (8007788 <TIM_TI1_SetConfig+0xd0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d013      	beq.n	800771e <TIM_TI1_SetConfig+0x66>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	4a24      	ldr	r2, [pc, #144]	; (800778c <TIM_TI1_SetConfig+0xd4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00f      	beq.n	800771e <TIM_TI1_SetConfig+0x66>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4a23      	ldr	r2, [pc, #140]	; (8007790 <TIM_TI1_SetConfig+0xd8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00b      	beq.n	800771e <TIM_TI1_SetConfig+0x66>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4a22      	ldr	r2, [pc, #136]	; (8007794 <TIM_TI1_SetConfig+0xdc>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d007      	beq.n	800771e <TIM_TI1_SetConfig+0x66>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a21      	ldr	r2, [pc, #132]	; (8007798 <TIM_TI1_SetConfig+0xe0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d003      	beq.n	800771e <TIM_TI1_SetConfig+0x66>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4a20      	ldr	r2, [pc, #128]	; (800779c <TIM_TI1_SetConfig+0xe4>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d101      	bne.n	8007722 <TIM_TI1_SetConfig+0x6a>
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <TIM_TI1_SetConfig+0x6c>
 8007722:	2300      	movs	r3, #0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d008      	beq.n	800773a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f023 0303 	bic.w	r3, r3, #3
 800772e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4313      	orrs	r3, r2
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	e003      	b.n	8007742 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f043 0301 	orr.w	r3, r3, #1
 8007740:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	011b      	lsls	r3, r3, #4
 800774e:	b2db      	uxtb	r3, r3
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f023 030a 	bic.w	r3, r3, #10
 800775c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f003 030a 	and.w	r3, r3, #10
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	4313      	orrs	r3, r2
 8007768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	621a      	str	r2, [r3, #32]
}
 8007776:	bf00      	nop
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	40010000 	.word	0x40010000
 8007788:	40000400 	.word	0x40000400
 800778c:	40000800 	.word	0x40000800
 8007790:	40000c00 	.word	0x40000c00
 8007794:	40010400 	.word	0x40010400
 8007798:	40014000 	.word	0x40014000
 800779c:	40001800 	.word	0x40001800

080077a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	f023 0201 	bic.w	r2, r3, #1
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f023 030a 	bic.w	r3, r3, #10
 80077dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	621a      	str	r2, [r3, #32]
}
 80077f2:	bf00      	nop
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80077fe:	b480      	push	{r7}
 8007800:	b087      	sub	sp, #28
 8007802:	af00      	add	r7, sp, #0
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	607a      	str	r2, [r7, #4]
 800780a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	f023 0210 	bic.w	r2, r3, #16
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800782a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	021b      	lsls	r3, r3, #8
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800783c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	031b      	lsls	r3, r3, #12
 8007842:	b29b      	uxth	r3, r3
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	4313      	orrs	r3, r2
 8007848:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007850:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	4313      	orrs	r3, r2
 800785e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	621a      	str	r2, [r3, #32]
}
 800786c:	bf00      	nop
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	f023 0210 	bic.w	r2, r3, #16
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	031b      	lsls	r3, r3, #12
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	4313      	orrs	r3, r2
 80078be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	621a      	str	r2, [r3, #32]
}
 80078cc:	bf00      	nop
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f023 0303 	bic.w	r3, r3, #3
 8007904:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4313      	orrs	r3, r2
 800790c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007914:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	011b      	lsls	r3, r3, #4
 800791a:	b2db      	uxtb	r3, r3
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	4313      	orrs	r3, r2
 8007920:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007928:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	4313      	orrs	r3, r2
 8007936:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	621a      	str	r2, [r3, #32]
}
 8007944:	bf00      	nop
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800797c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	021b      	lsls	r3, r3, #8
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800798e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	031b      	lsls	r3, r3, #12
 8007994:	b29b      	uxth	r3, r3
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80079a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	031b      	lsls	r3, r3, #12
 80079a8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	621a      	str	r2, [r3, #32]
}
 80079be:	bf00      	nop
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	f043 0307 	orr.w	r3, r3, #7
 80079ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	609a      	str	r2, [r3, #8]
}
 80079f4:	bf00      	nop
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	021a      	lsls	r2, r3, #8
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	431a      	orrs	r2, r3
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	609a      	str	r2, [r3, #8]
}
 8007a34:	bf00      	nop
 8007a36:	371c      	adds	r7, #28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f003 031f 	and.w	r3, r3, #31
 8007a52:	2201      	movs	r2, #1
 8007a54:	fa02 f303 	lsl.w	r3, r2, r3
 8007a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6a1a      	ldr	r2, [r3, #32]
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	43db      	mvns	r3, r3
 8007a62:	401a      	ands	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a1a      	ldr	r2, [r3, #32]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f003 031f 	and.w	r3, r3, #31
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	fa01 f303 	lsl.w	r3, r1, r3
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	621a      	str	r2, [r3, #32]
}
 8007a7e:	bf00      	nop
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
	...

08007a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d101      	bne.n	8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	e05a      	b.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a21      	ldr	r2, [pc, #132]	; (8007b68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d022      	beq.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af0:	d01d      	beq.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a1d      	ldr	r2, [pc, #116]	; (8007b6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d018      	beq.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a1b      	ldr	r2, [pc, #108]	; (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d013      	beq.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a1a      	ldr	r2, [pc, #104]	; (8007b74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d00e      	beq.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a18      	ldr	r2, [pc, #96]	; (8007b78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d009      	beq.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a17      	ldr	r2, [pc, #92]	; (8007b7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d004      	beq.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a15      	ldr	r2, [pc, #84]	; (8007b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d10c      	bne.n	8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	40010000 	.word	0x40010000
 8007b6c:	40000400 	.word	0x40000400
 8007b70:	40000800 	.word	0x40000800
 8007b74:	40000c00 	.word	0x40000c00
 8007b78:	40010400 	.word	0x40010400
 8007b7c:	40014000 	.word	0x40014000
 8007b80:	40001800 	.word	0x40001800

08007b84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d101      	bne.n	8007ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e03d      	b.n	8007c1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e03f      	b.n	8007ce2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d106      	bne.n	8007c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7fc f8e0 	bl	8003e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2224      	movs	r2, #36	; 0x24
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68da      	ldr	r2, [r3, #12]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fddf 	bl	8008858 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	691a      	ldr	r2, [r3, #16]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695a      	ldr	r2, [r3, #20]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b08a      	sub	sp, #40	; 0x28
 8007cee:	af02      	add	r7, sp, #8
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	603b      	str	r3, [r7, #0]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b20      	cmp	r3, #32
 8007d08:	d17c      	bne.n	8007e04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <HAL_UART_Transmit+0x2c>
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e075      	b.n	8007e06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_UART_Transmit+0x3e>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e06e      	b.n	8007e06 <HAL_UART_Transmit+0x11c>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2221      	movs	r2, #33	; 0x21
 8007d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d3e:	f7fc fa81 	bl	8004244 <HAL_GetTick>
 8007d42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	88fa      	ldrh	r2, [r7, #6]
 8007d48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	88fa      	ldrh	r2, [r7, #6]
 8007d4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d58:	d108      	bne.n	8007d6c <HAL_UART_Transmit+0x82>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d104      	bne.n	8007d6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	61bb      	str	r3, [r7, #24]
 8007d6a:	e003      	b.n	8007d74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007d7c:	e02a      	b.n	8007dd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2200      	movs	r2, #0
 8007d86:	2180      	movs	r1, #128	; 0x80
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 fb1f 	bl	80083cc <UART_WaitOnFlagUntilTimeout>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e036      	b.n	8007e06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10b      	bne.n	8007db6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	3302      	adds	r3, #2
 8007db2:	61bb      	str	r3, [r7, #24]
 8007db4:	e007      	b.n	8007dc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	781a      	ldrb	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1cf      	bne.n	8007d7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2200      	movs	r2, #0
 8007de6:	2140      	movs	r1, #64	; 0x40
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 faef 	bl	80083cc <UART_WaitOnFlagUntilTimeout>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e006      	b.n	8007e06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	e000      	b.n	8007e06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007e04:	2302      	movs	r3, #2
  }
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3720      	adds	r7, #32
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	60b9      	str	r1, [r7, #8]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b20      	cmp	r3, #32
 8007e26:	d11d      	bne.n	8007e64 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <HAL_UART_Receive_IT+0x26>
 8007e2e:	88fb      	ldrh	r3, [r7, #6]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e016      	b.n	8007e66 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d101      	bne.n	8007e46 <HAL_UART_Receive_IT+0x38>
 8007e42:	2302      	movs	r3, #2
 8007e44:	e00f      	b.n	8007e66 <HAL_UART_Receive_IT+0x58>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	461a      	mov	r2, r3
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 fb24 	bl	80084a8 <UART_Start_Receive_IT>
 8007e60:	4603      	mov	r3, r0
 8007e62:	e000      	b.n	8007e66 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e64:	2302      	movs	r3, #2
  }
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b0ba      	sub	sp, #232	; 0xe8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ea6:	f003 030f 	and.w	r3, r3, #15
 8007eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10f      	bne.n	8007ed6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d009      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x66>
 8007ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec6:	f003 0320 	and.w	r3, r3, #32
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fc07 	bl	80086e2 <UART_Receive_IT>
      return;
 8007ed4:	e256      	b.n	8008384 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 80de 	beq.w	800809c <HAL_UART_IRQHandler+0x22c>
 8007ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d106      	bne.n	8007efa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 80d1 	beq.w	800809c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00b      	beq.n	8007f1e <HAL_UART_IRQHandler+0xae>
 8007f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	f043 0201 	orr.w	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00b      	beq.n	8007f42 <HAL_UART_IRQHandler+0xd2>
 8007f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d005      	beq.n	8007f42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	f043 0202 	orr.w	r2, r3, #2
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00b      	beq.n	8007f66 <HAL_UART_IRQHandler+0xf6>
 8007f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d005      	beq.n	8007f66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	f043 0204 	orr.w	r2, r3, #4
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f6a:	f003 0308 	and.w	r3, r3, #8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d011      	beq.n	8007f96 <HAL_UART_IRQHandler+0x126>
 8007f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f76:	f003 0320 	and.w	r3, r3, #32
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d105      	bne.n	8007f8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d005      	beq.n	8007f96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	f043 0208 	orr.w	r2, r3, #8
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 81ed 	beq.w	800837a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d008      	beq.n	8007fbe <HAL_UART_IRQHandler+0x14e>
 8007fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb0:	f003 0320 	and.w	r3, r3, #32
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fb92 	bl	80086e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc8:	2b40      	cmp	r3, #64	; 0x40
 8007fca:	bf0c      	ite	eq
 8007fcc:	2301      	moveq	r3, #1
 8007fce:	2300      	movne	r3, #0
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fda:	f003 0308 	and.w	r3, r3, #8
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d103      	bne.n	8007fea <HAL_UART_IRQHandler+0x17a>
 8007fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d04f      	beq.n	800808a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa9a 	bl	8008524 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffa:	2b40      	cmp	r3, #64	; 0x40
 8007ffc:	d141      	bne.n	8008082 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3314      	adds	r3, #20
 8008004:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800801c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3314      	adds	r3, #20
 8008026:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800802a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800802e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008036:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1d9      	bne.n	8007ffe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804e:	2b00      	cmp	r3, #0
 8008050:	d013      	beq.n	800807a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008056:	4a7d      	ldr	r2, [pc, #500]	; (800824c <HAL_UART_IRQHandler+0x3dc>)
 8008058:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	4618      	mov	r0, r3
 8008060:	f7fc faa1 	bl	80045a6 <HAL_DMA_Abort_IT>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d016      	beq.n	8008098 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008074:	4610      	mov	r0, r2
 8008076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008078:	e00e      	b.n	8008098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f990 	bl	80083a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008080:	e00a      	b.n	8008098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f98c 	bl	80083a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008088:	e006      	b.n	8008098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f988 	bl	80083a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008096:	e170      	b.n	800837a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008098:	bf00      	nop
    return;
 800809a:	e16e      	b.n	800837a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	f040 814a 	bne.w	800833a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80080a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080aa:	f003 0310 	and.w	r3, r3, #16
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 8143 	beq.w	800833a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80080b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080b8:	f003 0310 	and.w	r3, r3, #16
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 813c 	beq.w	800833a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080c2:	2300      	movs	r3, #0
 80080c4:	60bb      	str	r3, [r7, #8]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60bb      	str	r3, [r7, #8]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	60bb      	str	r3, [r7, #8]
 80080d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e2:	2b40      	cmp	r3, #64	; 0x40
 80080e4:	f040 80b4 	bne.w	8008250 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 8140 	beq.w	800837e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008106:	429a      	cmp	r2, r3
 8008108:	f080 8139 	bcs.w	800837e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008112:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800811e:	f000 8088 	beq.w	8008232 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	330c      	adds	r3, #12
 8008128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008138:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800813c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008140:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	330c      	adds	r3, #12
 800814a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800814e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800815a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1d9      	bne.n	8008122 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3314      	adds	r3, #20
 8008174:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800817e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3314      	adds	r3, #20
 800818e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008192:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008196:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008198:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800819a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e1      	bne.n	800816e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3314      	adds	r3, #20
 80081b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3314      	adds	r3, #20
 80081ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e3      	bne.n	80081aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	330c      	adds	r3, #12
 80081f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081fa:	e853 3f00 	ldrex	r3, [r3]
 80081fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008202:	f023 0310 	bic.w	r3, r3, #16
 8008206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	330c      	adds	r3, #12
 8008210:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008214:	65ba      	str	r2, [r7, #88]	; 0x58
 8008216:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008218:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800821a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800821c:	e841 2300 	strex	r3, r2, [r1]
 8008220:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1e3      	bne.n	80081f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822c:	4618      	mov	r0, r3
 800822e:	f7fc f94a 	bl	80044c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800823a:	b29b      	uxth	r3, r3
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	b29b      	uxth	r3, r3
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f8b6 	bl	80083b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008248:	e099      	b.n	800837e <HAL_UART_IRQHandler+0x50e>
 800824a:	bf00      	nop
 800824c:	080085eb 	.word	0x080085eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008258:	b29b      	uxth	r3, r3
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008264:	b29b      	uxth	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 808b 	beq.w	8008382 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800826c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 8086 	beq.w	8008382 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	330c      	adds	r3, #12
 800827c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800828c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	330c      	adds	r3, #12
 8008296:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800829a:	647a      	str	r2, [r7, #68]	; 0x44
 800829c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082a2:	e841 2300 	strex	r3, r2, [r1]
 80082a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e3      	bne.n	8008276 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3314      	adds	r3, #20
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	623b      	str	r3, [r7, #32]
   return(result);
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	f023 0301 	bic.w	r3, r3, #1
 80082c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3314      	adds	r3, #20
 80082ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082d2:	633a      	str	r2, [r7, #48]	; 0x30
 80082d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e3      	bne.n	80082ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	330c      	adds	r3, #12
 80082fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	e853 3f00 	ldrex	r3, [r3]
 8008302:	60fb      	str	r3, [r7, #12]
   return(result);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f023 0310 	bic.w	r3, r3, #16
 800830a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	330c      	adds	r3, #12
 8008314:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008318:	61fa      	str	r2, [r7, #28]
 800831a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	69b9      	ldr	r1, [r7, #24]
 800831e:	69fa      	ldr	r2, [r7, #28]
 8008320:	e841 2300 	strex	r3, r2, [r1]
 8008324:	617b      	str	r3, [r7, #20]
   return(result);
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e3      	bne.n	80082f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800832c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f83e 	bl	80083b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008338:	e023      	b.n	8008382 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800833a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800833e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008342:	2b00      	cmp	r3, #0
 8008344:	d009      	beq.n	800835a <HAL_UART_IRQHandler+0x4ea>
 8008346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800834a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f95d 	bl	8008612 <UART_Transmit_IT>
    return;
 8008358:	e014      	b.n	8008384 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800835a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800835e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00e      	beq.n	8008384 <HAL_UART_IRQHandler+0x514>
 8008366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800836a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836e:	2b00      	cmp	r3, #0
 8008370:	d008      	beq.n	8008384 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f99d 	bl	80086b2 <UART_EndTransmit_IT>
    return;
 8008378:	e004      	b.n	8008384 <HAL_UART_IRQHandler+0x514>
    return;
 800837a:	bf00      	nop
 800837c:	e002      	b.n	8008384 <HAL_UART_IRQHandler+0x514>
      return;
 800837e:	bf00      	nop
 8008380:	e000      	b.n	8008384 <HAL_UART_IRQHandler+0x514>
      return;
 8008382:	bf00      	nop
  }
}
 8008384:	37e8      	adds	r7, #232	; 0xe8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop

0800838c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b090      	sub	sp, #64	; 0x40
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	603b      	str	r3, [r7, #0]
 80083d8:	4613      	mov	r3, r2
 80083da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083dc:	e050      	b.n	8008480 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083e4:	d04c      	beq.n	8008480 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80083e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d007      	beq.n	80083fc <UART_WaitOnFlagUntilTimeout+0x30>
 80083ec:	f7fb ff2a 	bl	8004244 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d241      	bcs.n	8008480 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	330c      	adds	r3, #12
 8008402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	e853 3f00 	ldrex	r3, [r3]
 800840a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	330c      	adds	r3, #12
 800841a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800841c:	637a      	str	r2, [r7, #52]	; 0x34
 800841e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008424:	e841 2300 	strex	r3, r2, [r1]
 8008428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1e5      	bne.n	80083fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3314      	adds	r3, #20
 8008436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	613b      	str	r3, [r7, #16]
   return(result);
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f023 0301 	bic.w	r3, r3, #1
 8008446:	63bb      	str	r3, [r7, #56]	; 0x38
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3314      	adds	r3, #20
 800844e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008450:	623a      	str	r2, [r7, #32]
 8008452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	69f9      	ldr	r1, [r7, #28]
 8008456:	6a3a      	ldr	r2, [r7, #32]
 8008458:	e841 2300 	strex	r3, r2, [r1]
 800845c:	61bb      	str	r3, [r7, #24]
   return(result);
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e5      	bne.n	8008430 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2220      	movs	r2, #32
 8008468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2220      	movs	r2, #32
 8008470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e00f      	b.n	80084a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	4013      	ands	r3, r2
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	429a      	cmp	r2, r3
 800848e:	bf0c      	ite	eq
 8008490:	2301      	moveq	r3, #1
 8008492:	2300      	movne	r3, #0
 8008494:	b2db      	uxtb	r3, r3
 8008496:	461a      	mov	r2, r3
 8008498:	79fb      	ldrb	r3, [r7, #7]
 800849a:	429a      	cmp	r2, r3
 800849c:	d09f      	beq.n	80083de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3740      	adds	r7, #64	; 0x40
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	4613      	mov	r3, r2
 80084b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	88fa      	ldrh	r2, [r7, #6]
 80084c0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	88fa      	ldrh	r2, [r7, #6]
 80084c6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2222      	movs	r2, #34	; 0x22
 80084d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	695a      	ldr	r2, [r3, #20]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0201 	orr.w	r2, r2, #1
 8008504:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f042 0220 	orr.w	r2, r2, #32
 8008514:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008524:	b480      	push	{r7}
 8008526:	b095      	sub	sp, #84	; 0x54
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	330c      	adds	r3, #12
 8008532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008536:	e853 3f00 	ldrex	r3, [r3]
 800853a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	330c      	adds	r3, #12
 800854a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800854c:	643a      	str	r2, [r7, #64]	; 0x40
 800854e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008554:	e841 2300 	strex	r3, r2, [r1]
 8008558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800855a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1e5      	bne.n	800852c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3314      	adds	r3, #20
 8008566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008568:	6a3b      	ldr	r3, [r7, #32]
 800856a:	e853 3f00 	ldrex	r3, [r3]
 800856e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	f023 0301 	bic.w	r3, r3, #1
 8008576:	64bb      	str	r3, [r7, #72]	; 0x48
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3314      	adds	r3, #20
 800857e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008580:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008588:	e841 2300 	strex	r3, r2, [r1]
 800858c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e5      	bne.n	8008560 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008598:	2b01      	cmp	r3, #1
 800859a:	d119      	bne.n	80085d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	330c      	adds	r3, #12
 80085a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	e853 3f00 	ldrex	r3, [r3]
 80085aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f023 0310 	bic.w	r3, r3, #16
 80085b2:	647b      	str	r3, [r7, #68]	; 0x44
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	330c      	adds	r3, #12
 80085ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085bc:	61ba      	str	r2, [r7, #24]
 80085be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c0:	6979      	ldr	r1, [r7, #20]
 80085c2:	69ba      	ldr	r2, [r7, #24]
 80085c4:	e841 2300 	strex	r3, r2, [r1]
 80085c8:	613b      	str	r3, [r7, #16]
   return(result);
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1e5      	bne.n	800859c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2220      	movs	r2, #32
 80085d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80085de:	bf00      	nop
 80085e0:	3754      	adds	r7, #84	; 0x54
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f7ff fecb 	bl	80083a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800860a:	bf00      	nop
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008612:	b480      	push	{r7}
 8008614:	b085      	sub	sp, #20
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b21      	cmp	r3, #33	; 0x21
 8008624:	d13e      	bne.n	80086a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800862e:	d114      	bne.n	800865a <UART_Transmit_IT+0x48>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d110      	bne.n	800865a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800864c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	1c9a      	adds	r2, r3, #2
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	621a      	str	r2, [r3, #32]
 8008658:	e008      	b.n	800866c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	1c59      	adds	r1, r3, #1
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	6211      	str	r1, [r2, #32]
 8008664:	781a      	ldrb	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008670:	b29b      	uxth	r3, r3
 8008672:	3b01      	subs	r3, #1
 8008674:	b29b      	uxth	r3, r3
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	4619      	mov	r1, r3
 800867a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10f      	bne.n	80086a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68da      	ldr	r2, [r3, #12]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800868e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800869e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	e000      	b.n	80086a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80086a4:	2302      	movs	r3, #2
  }
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b082      	sub	sp, #8
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68da      	ldr	r2, [r3, #12]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2220      	movs	r2, #32
 80086ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff fe5a 	bl	800838c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b08c      	sub	sp, #48	; 0x30
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b22      	cmp	r3, #34	; 0x22
 80086f4:	f040 80ab 	bne.w	800884e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008700:	d117      	bne.n	8008732 <UART_Receive_IT+0x50>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d113      	bne.n	8008732 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800870a:	2300      	movs	r3, #0
 800870c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008712:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	b29b      	uxth	r3, r3
 800871c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008720:	b29a      	uxth	r2, r3
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	1c9a      	adds	r2, r3, #2
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	629a      	str	r2, [r3, #40]	; 0x28
 8008730:	e026      	b.n	8008780 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008738:	2300      	movs	r3, #0
 800873a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008744:	d007      	beq.n	8008756 <UART_Receive_IT+0x74>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10a      	bne.n	8008764 <UART_Receive_IT+0x82>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d106      	bne.n	8008764 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	b2da      	uxtb	r2, r3
 800875e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008760:	701a      	strb	r2, [r3, #0]
 8008762:	e008      	b.n	8008776 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	b2db      	uxtb	r3, r3
 800876c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008770:	b2da      	uxtb	r2, r3
 8008772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008774:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008784:	b29b      	uxth	r3, r3
 8008786:	3b01      	subs	r3, #1
 8008788:	b29b      	uxth	r3, r3
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	4619      	mov	r1, r3
 800878e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008790:	2b00      	cmp	r3, #0
 8008792:	d15a      	bne.n	800884a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 0220 	bic.w	r2, r2, #32
 80087a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68da      	ldr	r2, [r3, #12]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	695a      	ldr	r2, [r3, #20]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f022 0201 	bic.w	r2, r2, #1
 80087c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d135      	bne.n	8008840 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	330c      	adds	r3, #12
 80087e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	613b      	str	r3, [r7, #16]
   return(result);
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f023 0310 	bic.w	r3, r3, #16
 80087f0:	627b      	str	r3, [r7, #36]	; 0x24
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	330c      	adds	r3, #12
 80087f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fa:	623a      	str	r2, [r7, #32]
 80087fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	69f9      	ldr	r1, [r7, #28]
 8008800:	6a3a      	ldr	r2, [r7, #32]
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	61bb      	str	r3, [r7, #24]
   return(result);
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e5      	bne.n	80087da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0310 	and.w	r3, r3, #16
 8008818:	2b10      	cmp	r3, #16
 800881a:	d10a      	bne.n	8008832 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800881c:	2300      	movs	r3, #0
 800881e:	60fb      	str	r3, [r7, #12]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	60fb      	str	r3, [r7, #12]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7ff fdbb 	bl	80083b4 <HAL_UARTEx_RxEventCallback>
 800883e:	e002      	b.n	8008846 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7f9 fe23 	bl	800248c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	e002      	b.n	8008850 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	e000      	b.n	8008850 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800884e:	2302      	movs	r3, #2
  }
}
 8008850:	4618      	mov	r0, r3
 8008852:	3730      	adds	r7, #48	; 0x30
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800885c:	b0c0      	sub	sp, #256	; 0x100
 800885e:	af00      	add	r7, sp, #0
 8008860:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008874:	68d9      	ldr	r1, [r3, #12]
 8008876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	ea40 0301 	orr.w	r3, r0, r1
 8008880:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008886:	689a      	ldr	r2, [r3, #8]
 8008888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	431a      	orrs	r2, r3
 8008890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	431a      	orrs	r2, r3
 8008898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	4313      	orrs	r3, r2
 80088a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80088a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80088b0:	f021 010c 	bic.w	r1, r1, #12
 80088b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80088be:	430b      	orrs	r3, r1
 80088c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80088ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088d2:	6999      	ldr	r1, [r3, #24]
 80088d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	ea40 0301 	orr.w	r3, r0, r1
 80088de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	4b8f      	ldr	r3, [pc, #572]	; (8008b24 <UART_SetConfig+0x2cc>)
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d005      	beq.n	80088f8 <UART_SetConfig+0xa0>
 80088ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	4b8d      	ldr	r3, [pc, #564]	; (8008b28 <UART_SetConfig+0x2d0>)
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d104      	bne.n	8008902 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80088f8:	f7fd fc30 	bl	800615c <HAL_RCC_GetPCLK2Freq>
 80088fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008900:	e003      	b.n	800890a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008902:	f7fd fc17 	bl	8006134 <HAL_RCC_GetPCLK1Freq>
 8008906:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800890a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008914:	f040 810c 	bne.w	8008b30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800891c:	2200      	movs	r2, #0
 800891e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008922:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008926:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800892a:	4622      	mov	r2, r4
 800892c:	462b      	mov	r3, r5
 800892e:	1891      	adds	r1, r2, r2
 8008930:	65b9      	str	r1, [r7, #88]	; 0x58
 8008932:	415b      	adcs	r3, r3
 8008934:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008936:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800893a:	4621      	mov	r1, r4
 800893c:	eb12 0801 	adds.w	r8, r2, r1
 8008940:	4629      	mov	r1, r5
 8008942:	eb43 0901 	adc.w	r9, r3, r1
 8008946:	f04f 0200 	mov.w	r2, #0
 800894a:	f04f 0300 	mov.w	r3, #0
 800894e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800895a:	4690      	mov	r8, r2
 800895c:	4699      	mov	r9, r3
 800895e:	4623      	mov	r3, r4
 8008960:	eb18 0303 	adds.w	r3, r8, r3
 8008964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008968:	462b      	mov	r3, r5
 800896a:	eb49 0303 	adc.w	r3, r9, r3
 800896e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800897e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008982:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008986:	460b      	mov	r3, r1
 8008988:	18db      	adds	r3, r3, r3
 800898a:	653b      	str	r3, [r7, #80]	; 0x50
 800898c:	4613      	mov	r3, r2
 800898e:	eb42 0303 	adc.w	r3, r2, r3
 8008992:	657b      	str	r3, [r7, #84]	; 0x54
 8008994:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008998:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800899c:	f7f8 f954 	bl	8000c48 <__aeabi_uldivmod>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4b61      	ldr	r3, [pc, #388]	; (8008b2c <UART_SetConfig+0x2d4>)
 80089a6:	fba3 2302 	umull	r2, r3, r3, r2
 80089aa:	095b      	lsrs	r3, r3, #5
 80089ac:	011c      	lsls	r4, r3, #4
 80089ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089b2:	2200      	movs	r2, #0
 80089b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80089bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80089c0:	4642      	mov	r2, r8
 80089c2:	464b      	mov	r3, r9
 80089c4:	1891      	adds	r1, r2, r2
 80089c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80089c8:	415b      	adcs	r3, r3
 80089ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80089d0:	4641      	mov	r1, r8
 80089d2:	eb12 0a01 	adds.w	sl, r2, r1
 80089d6:	4649      	mov	r1, r9
 80089d8:	eb43 0b01 	adc.w	fp, r3, r1
 80089dc:	f04f 0200 	mov.w	r2, #0
 80089e0:	f04f 0300 	mov.w	r3, #0
 80089e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80089e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80089ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089f0:	4692      	mov	sl, r2
 80089f2:	469b      	mov	fp, r3
 80089f4:	4643      	mov	r3, r8
 80089f6:	eb1a 0303 	adds.w	r3, sl, r3
 80089fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089fe:	464b      	mov	r3, r9
 8008a00:	eb4b 0303 	adc.w	r3, fp, r3
 8008a04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008a18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	18db      	adds	r3, r3, r3
 8008a20:	643b      	str	r3, [r7, #64]	; 0x40
 8008a22:	4613      	mov	r3, r2
 8008a24:	eb42 0303 	adc.w	r3, r2, r3
 8008a28:	647b      	str	r3, [r7, #68]	; 0x44
 8008a2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008a32:	f7f8 f909 	bl	8000c48 <__aeabi_uldivmod>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	4b3b      	ldr	r3, [pc, #236]	; (8008b2c <UART_SetConfig+0x2d4>)
 8008a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8008a42:	095b      	lsrs	r3, r3, #5
 8008a44:	2264      	movs	r2, #100	; 0x64
 8008a46:	fb02 f303 	mul.w	r3, r2, r3
 8008a4a:	1acb      	subs	r3, r1, r3
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008a52:	4b36      	ldr	r3, [pc, #216]	; (8008b2c <UART_SetConfig+0x2d4>)
 8008a54:	fba3 2302 	umull	r2, r3, r3, r2
 8008a58:	095b      	lsrs	r3, r3, #5
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a60:	441c      	add	r4, r3
 8008a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a66:	2200      	movs	r2, #0
 8008a68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008a70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008a74:	4642      	mov	r2, r8
 8008a76:	464b      	mov	r3, r9
 8008a78:	1891      	adds	r1, r2, r2
 8008a7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008a7c:	415b      	adcs	r3, r3
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008a84:	4641      	mov	r1, r8
 8008a86:	1851      	adds	r1, r2, r1
 8008a88:	6339      	str	r1, [r7, #48]	; 0x30
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	414b      	adcs	r3, r1
 8008a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a90:	f04f 0200 	mov.w	r2, #0
 8008a94:	f04f 0300 	mov.w	r3, #0
 8008a98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008a9c:	4659      	mov	r1, fp
 8008a9e:	00cb      	lsls	r3, r1, #3
 8008aa0:	4651      	mov	r1, sl
 8008aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008aa6:	4651      	mov	r1, sl
 8008aa8:	00ca      	lsls	r2, r1, #3
 8008aaa:	4610      	mov	r0, r2
 8008aac:	4619      	mov	r1, r3
 8008aae:	4603      	mov	r3, r0
 8008ab0:	4642      	mov	r2, r8
 8008ab2:	189b      	adds	r3, r3, r2
 8008ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ab8:	464b      	mov	r3, r9
 8008aba:	460a      	mov	r2, r1
 8008abc:	eb42 0303 	adc.w	r3, r2, r3
 8008ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ad0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ad4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008ad8:	460b      	mov	r3, r1
 8008ada:	18db      	adds	r3, r3, r3
 8008adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ade:	4613      	mov	r3, r2
 8008ae0:	eb42 0303 	adc.w	r3, r2, r3
 8008ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ae6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008aea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008aee:	f7f8 f8ab 	bl	8000c48 <__aeabi_uldivmod>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4b0d      	ldr	r3, [pc, #52]	; (8008b2c <UART_SetConfig+0x2d4>)
 8008af8:	fba3 1302 	umull	r1, r3, r3, r2
 8008afc:	095b      	lsrs	r3, r3, #5
 8008afe:	2164      	movs	r1, #100	; 0x64
 8008b00:	fb01 f303 	mul.w	r3, r1, r3
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	00db      	lsls	r3, r3, #3
 8008b08:	3332      	adds	r3, #50	; 0x32
 8008b0a:	4a08      	ldr	r2, [pc, #32]	; (8008b2c <UART_SetConfig+0x2d4>)
 8008b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b10:	095b      	lsrs	r3, r3, #5
 8008b12:	f003 0207 	and.w	r2, r3, #7
 8008b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4422      	add	r2, r4
 8008b1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b20:	e106      	b.n	8008d30 <UART_SetConfig+0x4d8>
 8008b22:	bf00      	nop
 8008b24:	40011000 	.word	0x40011000
 8008b28:	40011400 	.word	0x40011400
 8008b2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008b3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008b3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008b42:	4642      	mov	r2, r8
 8008b44:	464b      	mov	r3, r9
 8008b46:	1891      	adds	r1, r2, r2
 8008b48:	6239      	str	r1, [r7, #32]
 8008b4a:	415b      	adcs	r3, r3
 8008b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b52:	4641      	mov	r1, r8
 8008b54:	1854      	adds	r4, r2, r1
 8008b56:	4649      	mov	r1, r9
 8008b58:	eb43 0501 	adc.w	r5, r3, r1
 8008b5c:	f04f 0200 	mov.w	r2, #0
 8008b60:	f04f 0300 	mov.w	r3, #0
 8008b64:	00eb      	lsls	r3, r5, #3
 8008b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b6a:	00e2      	lsls	r2, r4, #3
 8008b6c:	4614      	mov	r4, r2
 8008b6e:	461d      	mov	r5, r3
 8008b70:	4643      	mov	r3, r8
 8008b72:	18e3      	adds	r3, r4, r3
 8008b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b78:	464b      	mov	r3, r9
 8008b7a:	eb45 0303 	adc.w	r3, r5, r3
 8008b7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b92:	f04f 0200 	mov.w	r2, #0
 8008b96:	f04f 0300 	mov.w	r3, #0
 8008b9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	008b      	lsls	r3, r1, #2
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ba8:	4621      	mov	r1, r4
 8008baa:	008a      	lsls	r2, r1, #2
 8008bac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008bb0:	f7f8 f84a 	bl	8000c48 <__aeabi_uldivmod>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4b60      	ldr	r3, [pc, #384]	; (8008d3c <UART_SetConfig+0x4e4>)
 8008bba:	fba3 2302 	umull	r2, r3, r3, r2
 8008bbe:	095b      	lsrs	r3, r3, #5
 8008bc0:	011c      	lsls	r4, r3, #4
 8008bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008bcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008bd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008bd4:	4642      	mov	r2, r8
 8008bd6:	464b      	mov	r3, r9
 8008bd8:	1891      	adds	r1, r2, r2
 8008bda:	61b9      	str	r1, [r7, #24]
 8008bdc:	415b      	adcs	r3, r3
 8008bde:	61fb      	str	r3, [r7, #28]
 8008be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008be4:	4641      	mov	r1, r8
 8008be6:	1851      	adds	r1, r2, r1
 8008be8:	6139      	str	r1, [r7, #16]
 8008bea:	4649      	mov	r1, r9
 8008bec:	414b      	adcs	r3, r1
 8008bee:	617b      	str	r3, [r7, #20]
 8008bf0:	f04f 0200 	mov.w	r2, #0
 8008bf4:	f04f 0300 	mov.w	r3, #0
 8008bf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bfc:	4659      	mov	r1, fp
 8008bfe:	00cb      	lsls	r3, r1, #3
 8008c00:	4651      	mov	r1, sl
 8008c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c06:	4651      	mov	r1, sl
 8008c08:	00ca      	lsls	r2, r1, #3
 8008c0a:	4610      	mov	r0, r2
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4603      	mov	r3, r0
 8008c10:	4642      	mov	r2, r8
 8008c12:	189b      	adds	r3, r3, r2
 8008c14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c18:	464b      	mov	r3, r9
 8008c1a:	460a      	mov	r2, r1
 8008c1c:	eb42 0303 	adc.w	r3, r2, r3
 8008c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	008b      	lsls	r3, r1, #2
 8008c40:	4641      	mov	r1, r8
 8008c42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c46:	4641      	mov	r1, r8
 8008c48:	008a      	lsls	r2, r1, #2
 8008c4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008c4e:	f7f7 fffb 	bl	8000c48 <__aeabi_uldivmod>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4611      	mov	r1, r2
 8008c58:	4b38      	ldr	r3, [pc, #224]	; (8008d3c <UART_SetConfig+0x4e4>)
 8008c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8008c5e:	095b      	lsrs	r3, r3, #5
 8008c60:	2264      	movs	r2, #100	; 0x64
 8008c62:	fb02 f303 	mul.w	r3, r2, r3
 8008c66:	1acb      	subs	r3, r1, r3
 8008c68:	011b      	lsls	r3, r3, #4
 8008c6a:	3332      	adds	r3, #50	; 0x32
 8008c6c:	4a33      	ldr	r2, [pc, #204]	; (8008d3c <UART_SetConfig+0x4e4>)
 8008c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c72:	095b      	lsrs	r3, r3, #5
 8008c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c78:	441c      	add	r4, r3
 8008c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c7e:	2200      	movs	r2, #0
 8008c80:	673b      	str	r3, [r7, #112]	; 0x70
 8008c82:	677a      	str	r2, [r7, #116]	; 0x74
 8008c84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008c88:	4642      	mov	r2, r8
 8008c8a:	464b      	mov	r3, r9
 8008c8c:	1891      	adds	r1, r2, r2
 8008c8e:	60b9      	str	r1, [r7, #8]
 8008c90:	415b      	adcs	r3, r3
 8008c92:	60fb      	str	r3, [r7, #12]
 8008c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c98:	4641      	mov	r1, r8
 8008c9a:	1851      	adds	r1, r2, r1
 8008c9c:	6039      	str	r1, [r7, #0]
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	414b      	adcs	r3, r1
 8008ca2:	607b      	str	r3, [r7, #4]
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	f04f 0300 	mov.w	r3, #0
 8008cac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008cb0:	4659      	mov	r1, fp
 8008cb2:	00cb      	lsls	r3, r1, #3
 8008cb4:	4651      	mov	r1, sl
 8008cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cba:	4651      	mov	r1, sl
 8008cbc:	00ca      	lsls	r2, r1, #3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	4642      	mov	r2, r8
 8008cc6:	189b      	adds	r3, r3, r2
 8008cc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cca:	464b      	mov	r3, r9
 8008ccc:	460a      	mov	r2, r1
 8008cce:	eb42 0303 	adc.w	r3, r2, r3
 8008cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	663b      	str	r3, [r7, #96]	; 0x60
 8008cde:	667a      	str	r2, [r7, #100]	; 0x64
 8008ce0:	f04f 0200 	mov.w	r2, #0
 8008ce4:	f04f 0300 	mov.w	r3, #0
 8008ce8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008cec:	4649      	mov	r1, r9
 8008cee:	008b      	lsls	r3, r1, #2
 8008cf0:	4641      	mov	r1, r8
 8008cf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cf6:	4641      	mov	r1, r8
 8008cf8:	008a      	lsls	r2, r1, #2
 8008cfa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008cfe:	f7f7 ffa3 	bl	8000c48 <__aeabi_uldivmod>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4b0d      	ldr	r3, [pc, #52]	; (8008d3c <UART_SetConfig+0x4e4>)
 8008d08:	fba3 1302 	umull	r1, r3, r3, r2
 8008d0c:	095b      	lsrs	r3, r3, #5
 8008d0e:	2164      	movs	r1, #100	; 0x64
 8008d10:	fb01 f303 	mul.w	r3, r1, r3
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	011b      	lsls	r3, r3, #4
 8008d18:	3332      	adds	r3, #50	; 0x32
 8008d1a:	4a08      	ldr	r2, [pc, #32]	; (8008d3c <UART_SetConfig+0x4e4>)
 8008d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d20:	095b      	lsrs	r3, r3, #5
 8008d22:	f003 020f 	and.w	r2, r3, #15
 8008d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4422      	add	r2, r4
 8008d2e:	609a      	str	r2, [r3, #8]
}
 8008d30:	bf00      	nop
 8008d32:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008d36:	46bd      	mov	sp, r7
 8008d38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d3c:	51eb851f 	.word	0x51eb851f

08008d40 <__NVIC_SetPriority>:
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	4603      	mov	r3, r0
 8008d48:	6039      	str	r1, [r7, #0]
 8008d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	db0a      	blt.n	8008d6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	490c      	ldr	r1, [pc, #48]	; (8008d8c <__NVIC_SetPriority+0x4c>)
 8008d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d5e:	0112      	lsls	r2, r2, #4
 8008d60:	b2d2      	uxtb	r2, r2
 8008d62:	440b      	add	r3, r1
 8008d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008d68:	e00a      	b.n	8008d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	4908      	ldr	r1, [pc, #32]	; (8008d90 <__NVIC_SetPriority+0x50>)
 8008d70:	79fb      	ldrb	r3, [r7, #7]
 8008d72:	f003 030f 	and.w	r3, r3, #15
 8008d76:	3b04      	subs	r3, #4
 8008d78:	0112      	lsls	r2, r2, #4
 8008d7a:	b2d2      	uxtb	r2, r2
 8008d7c:	440b      	add	r3, r1
 8008d7e:	761a      	strb	r2, [r3, #24]
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	e000e100 	.word	0xe000e100
 8008d90:	e000ed00 	.word	0xe000ed00

08008d94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008d98:	2100      	movs	r1, #0
 8008d9a:	f06f 0004 	mvn.w	r0, #4
 8008d9e:	f7ff ffcf 	bl	8008d40 <__NVIC_SetPriority>
#endif
}
 8008da2:	bf00      	nop
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dae:	f3ef 8305 	mrs	r3, IPSR
 8008db2:	603b      	str	r3, [r7, #0]
  return(result);
 8008db4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008dba:	f06f 0305 	mvn.w	r3, #5
 8008dbe:	607b      	str	r3, [r7, #4]
 8008dc0:	e00c      	b.n	8008ddc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008dc2:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <osKernelInitialize+0x44>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d105      	bne.n	8008dd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008dca:	4b08      	ldr	r3, [pc, #32]	; (8008dec <osKernelInitialize+0x44>)
 8008dcc:	2201      	movs	r2, #1
 8008dce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	607b      	str	r3, [r7, #4]
 8008dd4:	e002      	b.n	8008ddc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ddc:	687b      	ldr	r3, [r7, #4]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	20000900 	.word	0x20000900

08008df0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008df6:	f3ef 8305 	mrs	r3, IPSR
 8008dfa:	603b      	str	r3, [r7, #0]
  return(result);
 8008dfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008e02:	f06f 0305 	mvn.w	r3, #5
 8008e06:	607b      	str	r3, [r7, #4]
 8008e08:	e010      	b.n	8008e2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008e0a:	4b0b      	ldr	r3, [pc, #44]	; (8008e38 <osKernelStart+0x48>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d109      	bne.n	8008e26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008e12:	f7ff ffbf 	bl	8008d94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008e16:	4b08      	ldr	r3, [pc, #32]	; (8008e38 <osKernelStart+0x48>)
 8008e18:	2202      	movs	r2, #2
 8008e1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008e1c:	f001 f9e0 	bl	800a1e0 <vTaskStartScheduler>
      stat = osOK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	607b      	str	r3, [r7, #4]
 8008e24:	e002      	b.n	8008e2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008e2c:	687b      	ldr	r3, [r7, #4]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20000900 	.word	0x20000900

08008e3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08e      	sub	sp, #56	; 0x38
 8008e40:	af04      	add	r7, sp, #16
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e4c:	f3ef 8305 	mrs	r3, IPSR
 8008e50:	617b      	str	r3, [r7, #20]
  return(result);
 8008e52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d17e      	bne.n	8008f56 <osThreadNew+0x11a>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d07b      	beq.n	8008f56 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008e5e:	2380      	movs	r3, #128	; 0x80
 8008e60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008e62:	2318      	movs	r3, #24
 8008e64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d045      	beq.n	8008f02 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d002      	beq.n	8008e84 <osThreadNew+0x48>
        name = attr->name;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d008      	beq.n	8008eaa <osThreadNew+0x6e>
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	2b38      	cmp	r3, #56	; 0x38
 8008e9c:	d805      	bhi.n	8008eaa <osThreadNew+0x6e>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <osThreadNew+0x72>
        return (NULL);
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e054      	b.n	8008f58 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d003      	beq.n	8008ebe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	089b      	lsrs	r3, r3, #2
 8008ebc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00e      	beq.n	8008ee4 <osThreadNew+0xa8>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	2b5b      	cmp	r3, #91	; 0x5b
 8008ecc:	d90a      	bls.n	8008ee4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d006      	beq.n	8008ee4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <osThreadNew+0xa8>
        mem = 1;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	61bb      	str	r3, [r7, #24]
 8008ee2:	e010      	b.n	8008f06 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10c      	bne.n	8008f06 <osThreadNew+0xca>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d108      	bne.n	8008f06 <osThreadNew+0xca>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d104      	bne.n	8008f06 <osThreadNew+0xca>
          mem = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	61bb      	str	r3, [r7, #24]
 8008f00:	e001      	b.n	8008f06 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d110      	bne.n	8008f2e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f14:	9202      	str	r2, [sp, #8]
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	6a3a      	ldr	r2, [r7, #32]
 8008f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f000 ff86 	bl	8009e34 <xTaskCreateStatic>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	e013      	b.n	8008f56 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d110      	bne.n	8008f56 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	f107 0310 	add.w	r3, r7, #16
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f000 ffd1 	bl	8009eee <xTaskCreate>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d001      	beq.n	8008f56 <osThreadNew+0x11a>
            hTask = NULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008f56:	693b      	ldr	r3, [r7, #16]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3728      	adds	r7, #40	; 0x28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f68:	f3ef 8305 	mrs	r3, IPSR
 8008f6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d003      	beq.n	8008f7c <osDelay+0x1c>
    stat = osErrorISR;
 8008f74:	f06f 0305 	mvn.w	r3, #5
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	e007      	b.n	8008f8c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 f8f6 	bl	800a178 <vTaskDelay>
    }
  }

  return (stat);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b08a      	sub	sp, #40	; 0x28
 8008f9a:	af02      	add	r7, sp, #8
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	60b9      	str	r1, [r7, #8]
 8008fa0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fa6:	f3ef 8305 	mrs	r3, IPSR
 8008faa:	613b      	str	r3, [r7, #16]
  return(result);
 8008fac:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d175      	bne.n	800909e <osSemaphoreNew+0x108>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d072      	beq.n	800909e <osSemaphoreNew+0x108>
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d86e      	bhi.n	800909e <osSemaphoreNew+0x108>
    mem = -1;
 8008fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fc4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d015      	beq.n	8008ff8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d006      	beq.n	8008fe2 <osSemaphoreNew+0x4c>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	2b4f      	cmp	r3, #79	; 0x4f
 8008fda:	d902      	bls.n	8008fe2 <osSemaphoreNew+0x4c>
        mem = 1;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	61bb      	str	r3, [r7, #24]
 8008fe0:	e00c      	b.n	8008ffc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d108      	bne.n	8008ffc <osSemaphoreNew+0x66>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d104      	bne.n	8008ffc <osSemaphoreNew+0x66>
          mem = 0;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	61bb      	str	r3, [r7, #24]
 8008ff6:	e001      	b.n	8008ffc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009002:	d04c      	beq.n	800909e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d128      	bne.n	800905c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d10a      	bne.n	8009026 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	2203      	movs	r2, #3
 8009016:	9200      	str	r2, [sp, #0]
 8009018:	2200      	movs	r2, #0
 800901a:	2100      	movs	r1, #0
 800901c:	2001      	movs	r0, #1
 800901e:	f000 f993 	bl	8009348 <xQueueGenericCreateStatic>
 8009022:	61f8      	str	r0, [r7, #28]
 8009024:	e005      	b.n	8009032 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009026:	2203      	movs	r2, #3
 8009028:	2100      	movs	r1, #0
 800902a:	2001      	movs	r0, #1
 800902c:	f000 fa04 	bl	8009438 <xQueueGenericCreate>
 8009030:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d022      	beq.n	800907e <osSemaphoreNew+0xe8>
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d01f      	beq.n	800907e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800903e:	2300      	movs	r3, #0
 8009040:	2200      	movs	r2, #0
 8009042:	2100      	movs	r1, #0
 8009044:	69f8      	ldr	r0, [r7, #28]
 8009046:	f000 fabf 	bl	80095c8 <xQueueGenericSend>
 800904a:	4603      	mov	r3, r0
 800904c:	2b01      	cmp	r3, #1
 800904e:	d016      	beq.n	800907e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009050:	69f8      	ldr	r0, [r7, #28]
 8009052:	f000 fd33 	bl	8009abc <vQueueDelete>
            hSemaphore = NULL;
 8009056:	2300      	movs	r3, #0
 8009058:	61fb      	str	r3, [r7, #28]
 800905a:	e010      	b.n	800907e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d108      	bne.n	8009074 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	461a      	mov	r2, r3
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 fa41 	bl	80094f2 <xQueueCreateCountingSemaphoreStatic>
 8009070:	61f8      	str	r0, [r7, #28]
 8009072:	e004      	b.n	800907e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009074:	68b9      	ldr	r1, [r7, #8]
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 fa72 	bl	8009560 <xQueueCreateCountingSemaphore>
 800907c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00c      	beq.n	800909e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <osSemaphoreNew+0xfc>
          name = attr->name;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	617b      	str	r3, [r7, #20]
 8009090:	e001      	b.n	8009096 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009092:	2300      	movs	r3, #0
 8009094:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009096:	6979      	ldr	r1, [r7, #20]
 8009098:	69f8      	ldr	r0, [r7, #28]
 800909a:	f000 fe43 	bl	8009d24 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800909e:	69fb      	ldr	r3, [r7, #28]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3720      	adds	r7, #32
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4a07      	ldr	r2, [pc, #28]	; (80090d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80090b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	4a06      	ldr	r2, [pc, #24]	; (80090d8 <vApplicationGetIdleTaskMemory+0x30>)
 80090be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2280      	movs	r2, #128	; 0x80
 80090c4:	601a      	str	r2, [r3, #0]
}
 80090c6:	bf00      	nop
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	20000904 	.word	0x20000904
 80090d8:	20000960 	.word	0x20000960

080090dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4a07      	ldr	r2, [pc, #28]	; (8009108 <vApplicationGetTimerTaskMemory+0x2c>)
 80090ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	4a06      	ldr	r2, [pc, #24]	; (800910c <vApplicationGetTimerTaskMemory+0x30>)
 80090f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090fa:	601a      	str	r2, [r3, #0]
}
 80090fc:	bf00      	nop
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	20000b60 	.word	0x20000b60
 800910c:	20000bbc 	.word	0x20000bbc

08009110 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f103 0208 	add.w	r2, r3, #8
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009128:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f103 0208 	add.w	r2, r3, #8
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f103 0208 	add.w	r2, r3, #8
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800915e:	bf00      	nop
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800916a:	b480      	push	{r7}
 800916c:	b085      	sub	sp, #20
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	689a      	ldr	r2, [r3, #8]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	601a      	str	r2, [r3, #0]
}
 80091a6:	bf00      	nop
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091c8:	d103      	bne.n	80091d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	60fb      	str	r3, [r7, #12]
 80091d0:	e00c      	b.n	80091ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	3308      	adds	r3, #8
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	e002      	b.n	80091e0 <vListInsert+0x2e>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d2f6      	bcs.n	80091da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	601a      	str	r2, [r3, #0]
}
 8009218:	bf00      	nop
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	6892      	ldr	r2, [r2, #8]
 800923a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6852      	ldr	r2, [r2, #4]
 8009244:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	429a      	cmp	r2, r3
 800924e:	d103      	bne.n	8009258 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	1e5a      	subs	r2, r3, #1
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800929e:	bf00      	nop
 80092a0:	e7fe      	b.n	80092a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80092a2:	f002 f93f 	bl	800b524 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ae:	68f9      	ldr	r1, [r7, #12]
 80092b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092b2:	fb01 f303 	mul.w	r3, r1, r3
 80092b6:	441a      	add	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d2:	3b01      	subs	r3, #1
 80092d4:	68f9      	ldr	r1, [r7, #12]
 80092d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092d8:	fb01 f303 	mul.w	r3, r1, r3
 80092dc:	441a      	add	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	22ff      	movs	r2, #255	; 0xff
 80092e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	22ff      	movs	r2, #255	; 0xff
 80092ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d114      	bne.n	8009322 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d01a      	beq.n	8009336 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	3310      	adds	r3, #16
 8009304:	4618      	mov	r0, r3
 8009306:	f001 f9f5 	bl	800a6f4 <xTaskRemoveFromEventList>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d012      	beq.n	8009336 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009310:	4b0c      	ldr	r3, [pc, #48]	; (8009344 <xQueueGenericReset+0xcc>)
 8009312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009316:	601a      	str	r2, [r3, #0]
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	e009      	b.n	8009336 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	3310      	adds	r3, #16
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff fef2 	bl	8009110 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3324      	adds	r3, #36	; 0x24
 8009330:	4618      	mov	r0, r3
 8009332:	f7ff feed 	bl	8009110 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009336:	f002 f925 	bl	800b584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800933a:	2301      	movs	r3, #1
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	e000ed04 	.word	0xe000ed04

08009348 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08e      	sub	sp, #56	; 0x38
 800934c:	af02      	add	r7, sp, #8
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10a      	bne.n	8009372 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800936e:	bf00      	nop
 8009370:	e7fe      	b.n	8009370 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10a      	bne.n	800938e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	627b      	str	r3, [r7, #36]	; 0x24
}
 800938a:	bf00      	nop
 800938c:	e7fe      	b.n	800938c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <xQueueGenericCreateStatic+0x52>
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <xQueueGenericCreateStatic+0x56>
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <xQueueGenericCreateStatic+0x58>
 800939e:	2300      	movs	r3, #0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	623b      	str	r3, [r7, #32]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d102      	bne.n	80093c6 <xQueueGenericCreateStatic+0x7e>
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <xQueueGenericCreateStatic+0x82>
 80093c6:	2301      	movs	r3, #1
 80093c8:	e000      	b.n	80093cc <xQueueGenericCreateStatic+0x84>
 80093ca:	2300      	movs	r3, #0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10a      	bne.n	80093e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	61fb      	str	r3, [r7, #28]
}
 80093e2:	bf00      	nop
 80093e4:	e7fe      	b.n	80093e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80093e6:	2350      	movs	r3, #80	; 0x50
 80093e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	2b50      	cmp	r3, #80	; 0x50
 80093ee:	d00a      	beq.n	8009406 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	61bb      	str	r3, [r7, #24]
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009406:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800940c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00d      	beq.n	800942e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800941a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800941e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	4613      	mov	r3, r2
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	68b9      	ldr	r1, [r7, #8]
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 f83f 	bl	80094ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800942e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009430:	4618      	mov	r0, r3
 8009432:	3730      	adds	r7, #48	; 0x30
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08a      	sub	sp, #40	; 0x28
 800943c:	af02      	add	r7, sp, #8
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4613      	mov	r3, r2
 8009444:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10a      	bne.n	8009462 <xQueueGenericCreate+0x2a>
	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	613b      	str	r3, [r7, #16]
}
 800945e:	bf00      	nop
 8009460:	e7fe      	b.n	8009460 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	fb02 f303 	mul.w	r3, r2, r3
 800946a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	3350      	adds	r3, #80	; 0x50
 8009470:	4618      	mov	r0, r3
 8009472:	f002 f979 	bl	800b768 <pvPortMalloc>
 8009476:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d011      	beq.n	80094a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	3350      	adds	r3, #80	; 0x50
 8009486:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009490:	79fa      	ldrb	r2, [r7, #7]
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	4613      	mov	r3, r2
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	68b9      	ldr	r1, [r7, #8]
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 f805 	bl	80094ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094a2:	69bb      	ldr	r3, [r7, #24]
	}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3720      	adds	r7, #32
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d103      	bne.n	80094c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	69ba      	ldr	r2, [r7, #24]
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	e002      	b.n	80094ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094da:	2101      	movs	r1, #1
 80094dc:	69b8      	ldr	r0, [r7, #24]
 80094de:	f7ff fecb 	bl	8009278 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	78fa      	ldrb	r2, [r7, #3]
 80094e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094ea:	bf00      	nop
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b08a      	sub	sp, #40	; 0x28
 80094f6:	af02      	add	r7, sp, #8
 80094f8:	60f8      	str	r0, [r7, #12]
 80094fa:	60b9      	str	r1, [r7, #8]
 80094fc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10a      	bne.n	800951a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	61bb      	str	r3, [r7, #24]
}
 8009516:	bf00      	nop
 8009518:	e7fe      	b.n	8009518 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	429a      	cmp	r2, r3
 8009520:	d90a      	bls.n	8009538 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	617b      	str	r3, [r7, #20]
}
 8009534:	bf00      	nop
 8009536:	e7fe      	b.n	8009536 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009538:	2302      	movs	r3, #2
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	2100      	movs	r1, #0
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff ff00 	bl	8009348 <xQueueGenericCreateStatic>
 8009548:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009556:	69fb      	ldr	r3, [r7, #28]
	}
 8009558:	4618      	mov	r0, r3
 800955a:	3720      	adds	r7, #32
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10a      	bne.n	8009586 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	613b      	str	r3, [r7, #16]
}
 8009582:	bf00      	nop
 8009584:	e7fe      	b.n	8009584 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	429a      	cmp	r2, r3
 800958c:	d90a      	bls.n	80095a4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	60fb      	str	r3, [r7, #12]
}
 80095a0:	bf00      	nop
 80095a2:	e7fe      	b.n	80095a2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80095a4:	2202      	movs	r2, #2
 80095a6:	2100      	movs	r1, #0
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff ff45 	bl	8009438 <xQueueGenericCreate>
 80095ae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80095bc:	697b      	ldr	r3, [r7, #20]
	}
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08e      	sub	sp, #56	; 0x38
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80095d6:	2300      	movs	r3, #0
 80095d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80095de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <xQueueGenericSend+0x32>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d103      	bne.n	8009608 <xQueueGenericSend+0x40>
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	d101      	bne.n	800960c <xQueueGenericSend+0x44>
 8009608:	2301      	movs	r3, #1
 800960a:	e000      	b.n	800960e <xQueueGenericSend+0x46>
 800960c:	2300      	movs	r3, #0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10a      	bne.n	8009628 <xQueueGenericSend+0x60>
	__asm volatile
 8009612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009616:	f383 8811 	msr	BASEPRI, r3
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009624:	bf00      	nop
 8009626:	e7fe      	b.n	8009626 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	2b02      	cmp	r3, #2
 800962c:	d103      	bne.n	8009636 <xQueueGenericSend+0x6e>
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009632:	2b01      	cmp	r3, #1
 8009634:	d101      	bne.n	800963a <xQueueGenericSend+0x72>
 8009636:	2301      	movs	r3, #1
 8009638:	e000      	b.n	800963c <xQueueGenericSend+0x74>
 800963a:	2300      	movs	r3, #0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10a      	bne.n	8009656 <xQueueGenericSend+0x8e>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	623b      	str	r3, [r7, #32]
}
 8009652:	bf00      	nop
 8009654:	e7fe      	b.n	8009654 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009656:	f001 fa0b 	bl	800aa70 <xTaskGetSchedulerState>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d102      	bne.n	8009666 <xQueueGenericSend+0x9e>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <xQueueGenericSend+0xa2>
 8009666:	2301      	movs	r3, #1
 8009668:	e000      	b.n	800966c <xQueueGenericSend+0xa4>
 800966a:	2300      	movs	r3, #0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10a      	bne.n	8009686 <xQueueGenericSend+0xbe>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	61fb      	str	r3, [r7, #28]
}
 8009682:	bf00      	nop
 8009684:	e7fe      	b.n	8009684 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009686:	f001 ff4d 	bl	800b524 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800968e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009692:	429a      	cmp	r2, r3
 8009694:	d302      	bcc.n	800969c <xQueueGenericSend+0xd4>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b02      	cmp	r3, #2
 800969a:	d129      	bne.n	80096f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800969c:	683a      	ldr	r2, [r7, #0]
 800969e:	68b9      	ldr	r1, [r7, #8]
 80096a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096a2:	f000 fa2e 	bl	8009b02 <prvCopyDataToQueue>
 80096a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d010      	beq.n	80096d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b2:	3324      	adds	r3, #36	; 0x24
 80096b4:	4618      	mov	r0, r3
 80096b6:	f001 f81d 	bl	800a6f4 <xTaskRemoveFromEventList>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d013      	beq.n	80096e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80096c0:	4b3f      	ldr	r3, [pc, #252]	; (80097c0 <xQueueGenericSend+0x1f8>)
 80096c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	e00a      	b.n	80096e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80096d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d007      	beq.n	80096e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80096d8:	4b39      	ldr	r3, [pc, #228]	; (80097c0 <xQueueGenericSend+0x1f8>)
 80096da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096de:	601a      	str	r2, [r3, #0]
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80096e8:	f001 ff4c 	bl	800b584 <vPortExitCritical>
				return pdPASS;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e063      	b.n	80097b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d103      	bne.n	80096fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096f6:	f001 ff45 	bl	800b584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80096fa:	2300      	movs	r3, #0
 80096fc:	e05c      	b.n	80097b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009700:	2b00      	cmp	r3, #0
 8009702:	d106      	bne.n	8009712 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009704:	f107 0314 	add.w	r3, r7, #20
 8009708:	4618      	mov	r0, r3
 800970a:	f001 f857 	bl	800a7bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800970e:	2301      	movs	r3, #1
 8009710:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009712:	f001 ff37 	bl	800b584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009716:	f000 fdc9 	bl	800a2ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800971a:	f001 ff03 	bl	800b524 <vPortEnterCritical>
 800971e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009724:	b25b      	sxtb	r3, r3
 8009726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800972a:	d103      	bne.n	8009734 <xQueueGenericSend+0x16c>
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800973a:	b25b      	sxtb	r3, r3
 800973c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009740:	d103      	bne.n	800974a <xQueueGenericSend+0x182>
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800974a:	f001 ff1b 	bl	800b584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800974e:	1d3a      	adds	r2, r7, #4
 8009750:	f107 0314 	add.w	r3, r7, #20
 8009754:	4611      	mov	r1, r2
 8009756:	4618      	mov	r0, r3
 8009758:	f001 f846 	bl	800a7e8 <xTaskCheckForTimeOut>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d124      	bne.n	80097ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009764:	f000 fac5 	bl	8009cf2 <prvIsQueueFull>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d018      	beq.n	80097a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	3310      	adds	r3, #16
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f000 ff6c 	bl	800a654 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800977c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800977e:	f000 fa50 	bl	8009c22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009782:	f000 fda1 	bl	800a2c8 <xTaskResumeAll>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	f47f af7c 	bne.w	8009686 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800978e:	4b0c      	ldr	r3, [pc, #48]	; (80097c0 <xQueueGenericSend+0x1f8>)
 8009790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	e772      	b.n	8009686 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80097a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097a2:	f000 fa3e 	bl	8009c22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097a6:	f000 fd8f 	bl	800a2c8 <xTaskResumeAll>
 80097aa:	e76c      	b.n	8009686 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80097ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097ae:	f000 fa38 	bl	8009c22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097b2:	f000 fd89 	bl	800a2c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80097b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3738      	adds	r7, #56	; 0x38
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	e000ed04 	.word	0xe000ed04

080097c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b090      	sub	sp, #64	; 0x40
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80097d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10a      	bne.n	80097f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d103      	bne.n	8009800 <xQueueGenericSendFromISR+0x3c>
 80097f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <xQueueGenericSendFromISR+0x40>
 8009800:	2301      	movs	r3, #1
 8009802:	e000      	b.n	8009806 <xQueueGenericSendFromISR+0x42>
 8009804:	2300      	movs	r3, #0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10a      	bne.n	8009820 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800981c:	bf00      	nop
 800981e:	e7fe      	b.n	800981e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	2b02      	cmp	r3, #2
 8009824:	d103      	bne.n	800982e <xQueueGenericSendFromISR+0x6a>
 8009826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800982a:	2b01      	cmp	r3, #1
 800982c:	d101      	bne.n	8009832 <xQueueGenericSendFromISR+0x6e>
 800982e:	2301      	movs	r3, #1
 8009830:	e000      	b.n	8009834 <xQueueGenericSendFromISR+0x70>
 8009832:	2300      	movs	r3, #0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10a      	bne.n	800984e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	623b      	str	r3, [r7, #32]
}
 800984a:	bf00      	nop
 800984c:	e7fe      	b.n	800984c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800984e:	f001 ff4b 	bl	800b6e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009852:	f3ef 8211 	mrs	r2, BASEPRI
 8009856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	61fa      	str	r2, [r7, #28]
 8009868:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800986a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800986c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800986e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009876:	429a      	cmp	r2, r3
 8009878:	d302      	bcc.n	8009880 <xQueueGenericSendFromISR+0xbc>
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2b02      	cmp	r3, #2
 800987e:	d12f      	bne.n	80098e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800988a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	68b9      	ldr	r1, [r7, #8]
 8009894:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009896:	f000 f934 	bl	8009b02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800989a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800989e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098a2:	d112      	bne.n	80098ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d016      	beq.n	80098da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ae:	3324      	adds	r3, #36	; 0x24
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 ff1f 	bl	800a6f4 <xTaskRemoveFromEventList>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00e      	beq.n	80098da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00b      	beq.n	80098da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2201      	movs	r2, #1
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	e007      	b.n	80098da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098ce:	3301      	adds	r3, #1
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	b25a      	sxtb	r2, r3
 80098d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80098da:	2301      	movs	r3, #1
 80098dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80098de:	e001      	b.n	80098e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098e0:	2300      	movs	r3, #0
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80098ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3740      	adds	r7, #64	; 0x40
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
	...

080098fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b08c      	sub	sp, #48	; 0x30
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009908:	2300      	movs	r3, #0
 800990a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10a      	bne.n	800992c <xQueueReceive+0x30>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	623b      	str	r3, [r7, #32]
}
 8009928:	bf00      	nop
 800992a:	e7fe      	b.n	800992a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d103      	bne.n	800993a <xQueueReceive+0x3e>
 8009932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <xQueueReceive+0x42>
 800993a:	2301      	movs	r3, #1
 800993c:	e000      	b.n	8009940 <xQueueReceive+0x44>
 800993e:	2300      	movs	r3, #0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10a      	bne.n	800995a <xQueueReceive+0x5e>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	61fb      	str	r3, [r7, #28]
}
 8009956:	bf00      	nop
 8009958:	e7fe      	b.n	8009958 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800995a:	f001 f889 	bl	800aa70 <xTaskGetSchedulerState>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d102      	bne.n	800996a <xQueueReceive+0x6e>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <xQueueReceive+0x72>
 800996a:	2301      	movs	r3, #1
 800996c:	e000      	b.n	8009970 <xQueueReceive+0x74>
 800996e:	2300      	movs	r3, #0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10a      	bne.n	800998a <xQueueReceive+0x8e>
	__asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	61bb      	str	r3, [r7, #24]
}
 8009986:	bf00      	nop
 8009988:	e7fe      	b.n	8009988 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800998a:	f001 fdcb 	bl	800b524 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800998e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009992:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	2b00      	cmp	r3, #0
 8009998:	d01f      	beq.n	80099da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800999a:	68b9      	ldr	r1, [r7, #8]
 800999c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800999e:	f000 f91a 	bl	8009bd6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a4:	1e5a      	subs	r2, r3, #1
 80099a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00f      	beq.n	80099d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b4:	3310      	adds	r3, #16
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 fe9c 	bl	800a6f4 <xTaskRemoveFromEventList>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d007      	beq.n	80099d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80099c2:	4b3d      	ldr	r3, [pc, #244]	; (8009ab8 <xQueueReceive+0x1bc>)
 80099c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80099d2:	f001 fdd7 	bl	800b584 <vPortExitCritical>
				return pdPASS;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e069      	b.n	8009aae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d103      	bne.n	80099e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099e0:	f001 fdd0 	bl	800b584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099e4:	2300      	movs	r3, #0
 80099e6:	e062      	b.n	8009aae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d106      	bne.n	80099fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099ee:	f107 0310 	add.w	r3, r7, #16
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 fee2 	bl	800a7bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099f8:	2301      	movs	r3, #1
 80099fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099fc:	f001 fdc2 	bl	800b584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a00:	f000 fc54 	bl	800a2ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a04:	f001 fd8e 	bl	800b524 <vPortEnterCritical>
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a0e:	b25b      	sxtb	r3, r3
 8009a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a14:	d103      	bne.n	8009a1e <xQueueReceive+0x122>
 8009a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a24:	b25b      	sxtb	r3, r3
 8009a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a2a:	d103      	bne.n	8009a34 <xQueueReceive+0x138>
 8009a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a34:	f001 fda6 	bl	800b584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a38:	1d3a      	adds	r2, r7, #4
 8009a3a:	f107 0310 	add.w	r3, r7, #16
 8009a3e:	4611      	mov	r1, r2
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 fed1 	bl	800a7e8 <xTaskCheckForTimeOut>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d123      	bne.n	8009a94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a4e:	f000 f93a 	bl	8009cc6 <prvIsQueueEmpty>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d017      	beq.n	8009a88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	3324      	adds	r3, #36	; 0x24
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	4611      	mov	r1, r2
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 fdf7 	bl	800a654 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a68:	f000 f8db 	bl	8009c22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a6c:	f000 fc2c 	bl	800a2c8 <xTaskResumeAll>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d189      	bne.n	800998a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009a76:	4b10      	ldr	r3, [pc, #64]	; (8009ab8 <xQueueReceive+0x1bc>)
 8009a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	e780      	b.n	800998a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a8a:	f000 f8ca 	bl	8009c22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a8e:	f000 fc1b 	bl	800a2c8 <xTaskResumeAll>
 8009a92:	e77a      	b.n	800998a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a96:	f000 f8c4 	bl	8009c22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a9a:	f000 fc15 	bl	800a2c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aa0:	f000 f911 	bl	8009cc6 <prvIsQueueEmpty>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f43f af6f 	beq.w	800998a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009aac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3730      	adds	r7, #48	; 0x30
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	e000ed04 	.word	0xe000ed04

08009abc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10a      	bne.n	8009ae4 <vQueueDelete+0x28>
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	60bb      	str	r3, [r7, #8]
}
 8009ae0:	bf00      	nop
 8009ae2:	e7fe      	b.n	8009ae2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 f947 	bl	8009d78 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d102      	bne.n	8009afa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f001 ff03 	bl	800b900 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009afa:	bf00      	nop
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b086      	sub	sp, #24
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	60b9      	str	r1, [r7, #8]
 8009b0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10d      	bne.n	8009b3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d14d      	bne.n	8009bc4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f000 ffbd 	bl	800aaac <xTaskPriorityDisinherit>
 8009b32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	609a      	str	r2, [r3, #8]
 8009b3a:	e043      	b.n	8009bc4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d119      	bne.n	8009b76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6858      	ldr	r0, [r3, #4]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	68b9      	ldr	r1, [r7, #8]
 8009b4e:	f002 fd63 	bl	800c618 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5a:	441a      	add	r2, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d32b      	bcc.n	8009bc4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	605a      	str	r2, [r3, #4]
 8009b74:	e026      	b.n	8009bc4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	68d8      	ldr	r0, [r3, #12]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7e:	461a      	mov	r2, r3
 8009b80:	68b9      	ldr	r1, [r7, #8]
 8009b82:	f002 fd49 	bl	800c618 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	68da      	ldr	r2, [r3, #12]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8e:	425b      	negs	r3, r3
 8009b90:	441a      	add	r2, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	68da      	ldr	r2, [r3, #12]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d207      	bcs.n	8009bb2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009baa:	425b      	negs	r3, r3
 8009bac:	441a      	add	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d105      	bne.n	8009bc4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	1c5a      	adds	r2, r3, #1
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009bcc:	697b      	ldr	r3, [r7, #20]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3718      	adds	r7, #24
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b082      	sub	sp, #8
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d018      	beq.n	8009c1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	68da      	ldr	r2, [r3, #12]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf0:	441a      	add	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68da      	ldr	r2, [r3, #12]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d303      	bcc.n	8009c0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	68d9      	ldr	r1, [r3, #12]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c12:	461a      	mov	r2, r3
 8009c14:	6838      	ldr	r0, [r7, #0]
 8009c16:	f002 fcff 	bl	800c618 <memcpy>
	}
}
 8009c1a:	bf00      	nop
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b084      	sub	sp, #16
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009c2a:	f001 fc7b 	bl	800b524 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c36:	e011      	b.n	8009c5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d012      	beq.n	8009c66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	3324      	adds	r3, #36	; 0x24
 8009c44:	4618      	mov	r0, r3
 8009c46:	f000 fd55 	bl	800a6f4 <xTaskRemoveFromEventList>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c50:	f000 fe2c 	bl	800a8ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	dce9      	bgt.n	8009c38 <prvUnlockQueue+0x16>
 8009c64:	e000      	b.n	8009c68 <prvUnlockQueue+0x46>
					break;
 8009c66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	22ff      	movs	r2, #255	; 0xff
 8009c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009c70:	f001 fc88 	bl	800b584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c74:	f001 fc56 	bl	800b524 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c80:	e011      	b.n	8009ca6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d012      	beq.n	8009cb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	3310      	adds	r3, #16
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f000 fd30 	bl	800a6f4 <xTaskRemoveFromEventList>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c9a:	f000 fe07 	bl	800a8ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ca6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	dce9      	bgt.n	8009c82 <prvUnlockQueue+0x60>
 8009cae:	e000      	b.n	8009cb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009cb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	22ff      	movs	r2, #255	; 0xff
 8009cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009cba:	f001 fc63 	bl	800b584 <vPortExitCritical>
}
 8009cbe:	bf00      	nop
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cce:	f001 fc29 	bl	800b524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d102      	bne.n	8009ce0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	60fb      	str	r3, [r7, #12]
 8009cde:	e001      	b.n	8009ce4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ce4:	f001 fc4e 	bl	800b584 <vPortExitCritical>

	return xReturn;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cfa:	f001 fc13 	bl	800b524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d102      	bne.n	8009d10 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	60fb      	str	r3, [r7, #12]
 8009d0e:	e001      	b.n	8009d14 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009d10:	2300      	movs	r3, #0
 8009d12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d14:	f001 fc36 	bl	800b584 <vPortExitCritical>

	return xReturn;
 8009d18:	68fb      	ldr	r3, [r7, #12]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
	...

08009d24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d2e:	2300      	movs	r3, #0
 8009d30:	60fb      	str	r3, [r7, #12]
 8009d32:	e014      	b.n	8009d5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009d34:	4a0f      	ldr	r2, [pc, #60]	; (8009d74 <vQueueAddToRegistry+0x50>)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10b      	bne.n	8009d58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009d40:	490c      	ldr	r1, [pc, #48]	; (8009d74 <vQueueAddToRegistry+0x50>)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009d4a:	4a0a      	ldr	r2, [pc, #40]	; (8009d74 <vQueueAddToRegistry+0x50>)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	00db      	lsls	r3, r3, #3
 8009d50:	4413      	add	r3, r2
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009d56:	e006      	b.n	8009d66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	60fb      	str	r3, [r7, #12]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2b07      	cmp	r3, #7
 8009d62:	d9e7      	bls.n	8009d34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	20000fbc 	.word	0x20000fbc

08009d78 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d80:	2300      	movs	r3, #0
 8009d82:	60fb      	str	r3, [r7, #12]
 8009d84:	e016      	b.n	8009db4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009d86:	4a10      	ldr	r2, [pc, #64]	; (8009dc8 <vQueueUnregisterQueue+0x50>)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	00db      	lsls	r3, r3, #3
 8009d8c:	4413      	add	r3, r2
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d10b      	bne.n	8009dae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009d96:	4a0c      	ldr	r2, [pc, #48]	; (8009dc8 <vQueueUnregisterQueue+0x50>)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009da0:	4a09      	ldr	r2, [pc, #36]	; (8009dc8 <vQueueUnregisterQueue+0x50>)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	00db      	lsls	r3, r3, #3
 8009da6:	4413      	add	r3, r2
 8009da8:	2200      	movs	r2, #0
 8009daa:	605a      	str	r2, [r3, #4]
				break;
 8009dac:	e006      	b.n	8009dbc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3301      	adds	r3, #1
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2b07      	cmp	r3, #7
 8009db8:	d9e5      	bls.n	8009d86 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009dba:	bf00      	nop
 8009dbc:	bf00      	nop
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	20000fbc 	.word	0x20000fbc

08009dcc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ddc:	f001 fba2 	bl	800b524 <vPortEnterCritical>
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009de6:	b25b      	sxtb	r3, r3
 8009de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dec:	d103      	bne.n	8009df6 <vQueueWaitForMessageRestricted+0x2a>
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dfc:	b25b      	sxtb	r3, r3
 8009dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e02:	d103      	bne.n	8009e0c <vQueueWaitForMessageRestricted+0x40>
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e0c:	f001 fbba 	bl	800b584 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d106      	bne.n	8009e26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	3324      	adds	r3, #36	; 0x24
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	68b9      	ldr	r1, [r7, #8]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f000 fc3b 	bl	800a69c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e26:	6978      	ldr	r0, [r7, #20]
 8009e28:	f7ff fefb 	bl	8009c22 <prvUnlockQueue>
	}
 8009e2c:	bf00      	nop
 8009e2e:	3718      	adds	r7, #24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b08e      	sub	sp, #56	; 0x38
 8009e38:	af04      	add	r7, sp, #16
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
 8009e40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10a      	bne.n	8009e5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	623b      	str	r3, [r7, #32]
}
 8009e5a:	bf00      	nop
 8009e5c:	e7fe      	b.n	8009e5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <xTaskCreateStatic+0x46>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	61fb      	str	r3, [r7, #28]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e7a:	235c      	movs	r3, #92	; 0x5c
 8009e7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	2b5c      	cmp	r3, #92	; 0x5c
 8009e82:	d00a      	beq.n	8009e9a <xTaskCreateStatic+0x66>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	61bb      	str	r3, [r7, #24]
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d01e      	beq.n	8009ee0 <xTaskCreateStatic+0xac>
 8009ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d01b      	beq.n	8009ee0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eaa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009eb0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009eba:	2300      	movs	r3, #0
 8009ebc:	9303      	str	r3, [sp, #12]
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	9302      	str	r3, [sp, #8]
 8009ec2:	f107 0314 	add.w	r3, r7, #20
 8009ec6:	9301      	str	r3, [sp, #4]
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	68b9      	ldr	r1, [r7, #8]
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f000 f850 	bl	8009f78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ed8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009eda:	f000 f8dd 	bl	800a098 <prvAddNewTaskToReadyList>
 8009ede:	e001      	b.n	8009ee4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ee4:	697b      	ldr	r3, [r7, #20]
	}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3728      	adds	r7, #40	; 0x28
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b08c      	sub	sp, #48	; 0x30
 8009ef2:	af04      	add	r7, sp, #16
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	60b9      	str	r1, [r7, #8]
 8009ef8:	603b      	str	r3, [r7, #0]
 8009efa:	4613      	mov	r3, r2
 8009efc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009efe:	88fb      	ldrh	r3, [r7, #6]
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4618      	mov	r0, r3
 8009f04:	f001 fc30 	bl	800b768 <pvPortMalloc>
 8009f08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00e      	beq.n	8009f2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f10:	205c      	movs	r0, #92	; 0x5c
 8009f12:	f001 fc29 	bl	800b768 <pvPortMalloc>
 8009f16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	631a      	str	r2, [r3, #48]	; 0x30
 8009f24:	e005      	b.n	8009f32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f26:	6978      	ldr	r0, [r7, #20]
 8009f28:	f001 fcea 	bl	800b900 <vPortFree>
 8009f2c:	e001      	b.n	8009f32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d017      	beq.n	8009f68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f40:	88fa      	ldrh	r2, [r7, #6]
 8009f42:	2300      	movs	r3, #0
 8009f44:	9303      	str	r3, [sp, #12]
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	9302      	str	r3, [sp, #8]
 8009f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4c:	9301      	str	r3, [sp, #4]
 8009f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	68b9      	ldr	r1, [r7, #8]
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f000 f80e 	bl	8009f78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f5c:	69f8      	ldr	r0, [r7, #28]
 8009f5e:	f000 f89b 	bl	800a098 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009f62:	2301      	movs	r3, #1
 8009f64:	61bb      	str	r3, [r7, #24]
 8009f66:	e002      	b.n	8009f6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009f6e:	69bb      	ldr	r3, [r7, #24]
	}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3720      	adds	r7, #32
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b088      	sub	sp, #32
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
 8009f84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	461a      	mov	r2, r3
 8009f90:	21a5      	movs	r1, #165	; 0xa5
 8009f92:	f002 fb09 	bl	800c5a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	f023 0307 	bic.w	r3, r3, #7
 8009fae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	f003 0307 	and.w	r3, r3, #7
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	617b      	str	r3, [r7, #20]
}
 8009fcc:	bf00      	nop
 8009fce:	e7fe      	b.n	8009fce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d01f      	beq.n	800a016 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	61fb      	str	r3, [r7, #28]
 8009fda:	e012      	b.n	800a002 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	7819      	ldrb	r1, [r3, #0]
 8009fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	4413      	add	r3, r2
 8009fea:	3334      	adds	r3, #52	; 0x34
 8009fec:	460a      	mov	r2, r1
 8009fee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d006      	beq.n	800a00a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	3301      	adds	r3, #1
 800a000:	61fb      	str	r3, [r7, #28]
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	2b0f      	cmp	r3, #15
 800a006:	d9e9      	bls.n	8009fdc <prvInitialiseNewTask+0x64>
 800a008:	e000      	b.n	800a00c <prvInitialiseNewTask+0x94>
			{
				break;
 800a00a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a014:	e003      	b.n	800a01e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a020:	2b37      	cmp	r3, #55	; 0x37
 800a022:	d901      	bls.n	800a028 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a024:	2337      	movs	r3, #55	; 0x37
 800a026:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a02c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a032:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	2200      	movs	r2, #0
 800a038:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	3304      	adds	r3, #4
 800a03e:	4618      	mov	r0, r3
 800a040:	f7ff f886 	bl	8009150 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a046:	3318      	adds	r3, #24
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff f881 	bl	8009150 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a052:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a056:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a062:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	2200      	movs	r2, #0
 800a068:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	68f9      	ldr	r1, [r7, #12]
 800a076:	69b8      	ldr	r0, [r7, #24]
 800a078:	f001 f928 	bl	800b2cc <pxPortInitialiseStack>
 800a07c:	4602      	mov	r2, r0
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a08c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a08e:	bf00      	nop
 800a090:	3720      	adds	r7, #32
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a0a0:	f001 fa40 	bl	800b524 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a0a4:	4b2d      	ldr	r3, [pc, #180]	; (800a15c <prvAddNewTaskToReadyList+0xc4>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	4a2c      	ldr	r2, [pc, #176]	; (800a15c <prvAddNewTaskToReadyList+0xc4>)
 800a0ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a0ae:	4b2c      	ldr	r3, [pc, #176]	; (800a160 <prvAddNewTaskToReadyList+0xc8>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d109      	bne.n	800a0ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a0b6:	4a2a      	ldr	r2, [pc, #168]	; (800a160 <prvAddNewTaskToReadyList+0xc8>)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a0bc:	4b27      	ldr	r3, [pc, #156]	; (800a15c <prvAddNewTaskToReadyList+0xc4>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d110      	bne.n	800a0e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a0c4:	f000 fc16 	bl	800a8f4 <prvInitialiseTaskLists>
 800a0c8:	e00d      	b.n	800a0e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a0ca:	4b26      	ldr	r3, [pc, #152]	; (800a164 <prvAddNewTaskToReadyList+0xcc>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d109      	bne.n	800a0e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a0d2:	4b23      	ldr	r3, [pc, #140]	; (800a160 <prvAddNewTaskToReadyList+0xc8>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d802      	bhi.n	800a0e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a0e0:	4a1f      	ldr	r2, [pc, #124]	; (800a160 <prvAddNewTaskToReadyList+0xc8>)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a0e6:	4b20      	ldr	r3, [pc, #128]	; (800a168 <prvAddNewTaskToReadyList+0xd0>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	4a1e      	ldr	r2, [pc, #120]	; (800a168 <prvAddNewTaskToReadyList+0xd0>)
 800a0ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a0f0:	4b1d      	ldr	r3, [pc, #116]	; (800a168 <prvAddNewTaskToReadyList+0xd0>)
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0fc:	4b1b      	ldr	r3, [pc, #108]	; (800a16c <prvAddNewTaskToReadyList+0xd4>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	429a      	cmp	r2, r3
 800a102:	d903      	bls.n	800a10c <prvAddNewTaskToReadyList+0x74>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a108:	4a18      	ldr	r2, [pc, #96]	; (800a16c <prvAddNewTaskToReadyList+0xd4>)
 800a10a:	6013      	str	r3, [r2, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a110:	4613      	mov	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4a15      	ldr	r2, [pc, #84]	; (800a170 <prvAddNewTaskToReadyList+0xd8>)
 800a11a:	441a      	add	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	3304      	adds	r3, #4
 800a120:	4619      	mov	r1, r3
 800a122:	4610      	mov	r0, r2
 800a124:	f7ff f821 	bl	800916a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a128:	f001 fa2c 	bl	800b584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a12c:	4b0d      	ldr	r3, [pc, #52]	; (800a164 <prvAddNewTaskToReadyList+0xcc>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00e      	beq.n	800a152 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a134:	4b0a      	ldr	r3, [pc, #40]	; (800a160 <prvAddNewTaskToReadyList+0xc8>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13e:	429a      	cmp	r2, r3
 800a140:	d207      	bcs.n	800a152 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a142:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <prvAddNewTaskToReadyList+0xdc>)
 800a144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a152:	bf00      	nop
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	200014d0 	.word	0x200014d0
 800a160:	20000ffc 	.word	0x20000ffc
 800a164:	200014dc 	.word	0x200014dc
 800a168:	200014ec 	.word	0x200014ec
 800a16c:	200014d8 	.word	0x200014d8
 800a170:	20001000 	.word	0x20001000
 800a174:	e000ed04 	.word	0xe000ed04

0800a178 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d017      	beq.n	800a1ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a18a:	4b13      	ldr	r3, [pc, #76]	; (800a1d8 <vTaskDelay+0x60>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00a      	beq.n	800a1a8 <vTaskDelay+0x30>
	__asm volatile
 800a192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	60bb      	str	r3, [r7, #8]
}
 800a1a4:	bf00      	nop
 800a1a6:	e7fe      	b.n	800a1a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a1a8:	f000 f880 	bl	800a2ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 fcea 	bl	800ab88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1b4:	f000 f888 	bl	800a2c8 <xTaskResumeAll>
 800a1b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d107      	bne.n	800a1d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a1c0:	4b06      	ldr	r3, [pc, #24]	; (800a1dc <vTaskDelay+0x64>)
 800a1c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c6:	601a      	str	r2, [r3, #0]
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1d0:	bf00      	nop
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	200014f8 	.word	0x200014f8
 800a1dc:	e000ed04 	.word	0xe000ed04

0800a1e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08a      	sub	sp, #40	; 0x28
 800a1e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a1ee:	463a      	mov	r2, r7
 800a1f0:	1d39      	adds	r1, r7, #4
 800a1f2:	f107 0308 	add.w	r3, r7, #8
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe ff56 	bl	80090a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	9202      	str	r2, [sp, #8]
 800a204:	9301      	str	r3, [sp, #4]
 800a206:	2300      	movs	r3, #0
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	2300      	movs	r3, #0
 800a20c:	460a      	mov	r2, r1
 800a20e:	4921      	ldr	r1, [pc, #132]	; (800a294 <vTaskStartScheduler+0xb4>)
 800a210:	4821      	ldr	r0, [pc, #132]	; (800a298 <vTaskStartScheduler+0xb8>)
 800a212:	f7ff fe0f 	bl	8009e34 <xTaskCreateStatic>
 800a216:	4603      	mov	r3, r0
 800a218:	4a20      	ldr	r2, [pc, #128]	; (800a29c <vTaskStartScheduler+0xbc>)
 800a21a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a21c:	4b1f      	ldr	r3, [pc, #124]	; (800a29c <vTaskStartScheduler+0xbc>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a224:	2301      	movs	r3, #1
 800a226:	617b      	str	r3, [r7, #20]
 800a228:	e001      	b.n	800a22e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d102      	bne.n	800a23a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a234:	f000 fcfc 	bl	800ac30 <xTimerCreateTimerTask>
 800a238:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d116      	bne.n	800a26e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	613b      	str	r3, [r7, #16]
}
 800a252:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a254:	4b12      	ldr	r3, [pc, #72]	; (800a2a0 <vTaskStartScheduler+0xc0>)
 800a256:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a25a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a25c:	4b11      	ldr	r3, [pc, #68]	; (800a2a4 <vTaskStartScheduler+0xc4>)
 800a25e:	2201      	movs	r2, #1
 800a260:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a262:	4b11      	ldr	r3, [pc, #68]	; (800a2a8 <vTaskStartScheduler+0xc8>)
 800a264:	2200      	movs	r2, #0
 800a266:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a268:	f001 f8ba 	bl	800b3e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a26c:	e00e      	b.n	800a28c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a274:	d10a      	bne.n	800a28c <vTaskStartScheduler+0xac>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	60fb      	str	r3, [r7, #12]
}
 800a288:	bf00      	nop
 800a28a:	e7fe      	b.n	800a28a <vTaskStartScheduler+0xaa>
}
 800a28c:	bf00      	nop
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	0800f9bc 	.word	0x0800f9bc
 800a298:	0800a8c5 	.word	0x0800a8c5
 800a29c:	200014f4 	.word	0x200014f4
 800a2a0:	200014f0 	.word	0x200014f0
 800a2a4:	200014dc 	.word	0x200014dc
 800a2a8:	200014d4 	.word	0x200014d4

0800a2ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2b0:	4b04      	ldr	r3, [pc, #16]	; (800a2c4 <vTaskSuspendAll+0x18>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	4a03      	ldr	r2, [pc, #12]	; (800a2c4 <vTaskSuspendAll+0x18>)
 800a2b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2ba:	bf00      	nop
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	200014f8 	.word	0x200014f8

0800a2c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2d6:	4b42      	ldr	r3, [pc, #264]	; (800a3e0 <xTaskResumeAll+0x118>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10a      	bne.n	800a2f4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	603b      	str	r3, [r7, #0]
}
 800a2f0:	bf00      	nop
 800a2f2:	e7fe      	b.n	800a2f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a2f4:	f001 f916 	bl	800b524 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a2f8:	4b39      	ldr	r3, [pc, #228]	; (800a3e0 <xTaskResumeAll+0x118>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	4a38      	ldr	r2, [pc, #224]	; (800a3e0 <xTaskResumeAll+0x118>)
 800a300:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a302:	4b37      	ldr	r3, [pc, #220]	; (800a3e0 <xTaskResumeAll+0x118>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d162      	bne.n	800a3d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a30a:	4b36      	ldr	r3, [pc, #216]	; (800a3e4 <xTaskResumeAll+0x11c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d05e      	beq.n	800a3d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a312:	e02f      	b.n	800a374 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a314:	4b34      	ldr	r3, [pc, #208]	; (800a3e8 <xTaskResumeAll+0x120>)
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	3318      	adds	r3, #24
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe ff7f 	bl	8009224 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	3304      	adds	r3, #4
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe ff7a 	bl	8009224 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a334:	4b2d      	ldr	r3, [pc, #180]	; (800a3ec <xTaskResumeAll+0x124>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d903      	bls.n	800a344 <xTaskResumeAll+0x7c>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	4a2a      	ldr	r2, [pc, #168]	; (800a3ec <xTaskResumeAll+0x124>)
 800a342:	6013      	str	r3, [r2, #0]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a348:	4613      	mov	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4a27      	ldr	r2, [pc, #156]	; (800a3f0 <xTaskResumeAll+0x128>)
 800a352:	441a      	add	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3304      	adds	r3, #4
 800a358:	4619      	mov	r1, r3
 800a35a:	4610      	mov	r0, r2
 800a35c:	f7fe ff05 	bl	800916a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a364:	4b23      	ldr	r3, [pc, #140]	; (800a3f4 <xTaskResumeAll+0x12c>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d302      	bcc.n	800a374 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a36e:	4b22      	ldr	r3, [pc, #136]	; (800a3f8 <xTaskResumeAll+0x130>)
 800a370:	2201      	movs	r2, #1
 800a372:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a374:	4b1c      	ldr	r3, [pc, #112]	; (800a3e8 <xTaskResumeAll+0x120>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1cb      	bne.n	800a314 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a382:	f000 fb55 	bl	800aa30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a386:	4b1d      	ldr	r3, [pc, #116]	; (800a3fc <xTaskResumeAll+0x134>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d010      	beq.n	800a3b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a392:	f000 f847 	bl	800a424 <xTaskIncrementTick>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a39c:	4b16      	ldr	r3, [pc, #88]	; (800a3f8 <xTaskResumeAll+0x130>)
 800a39e:	2201      	movs	r2, #1
 800a3a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1f1      	bne.n	800a392 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a3ae:	4b13      	ldr	r3, [pc, #76]	; (800a3fc <xTaskResumeAll+0x134>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3b4:	4b10      	ldr	r3, [pc, #64]	; (800a3f8 <xTaskResumeAll+0x130>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d009      	beq.n	800a3d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3c0:	4b0f      	ldr	r3, [pc, #60]	; (800a400 <xTaskResumeAll+0x138>)
 800a3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3d0:	f001 f8d8 	bl	800b584 <vPortExitCritical>

	return xAlreadyYielded;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	200014f8 	.word	0x200014f8
 800a3e4:	200014d0 	.word	0x200014d0
 800a3e8:	20001490 	.word	0x20001490
 800a3ec:	200014d8 	.word	0x200014d8
 800a3f0:	20001000 	.word	0x20001000
 800a3f4:	20000ffc 	.word	0x20000ffc
 800a3f8:	200014e4 	.word	0x200014e4
 800a3fc:	200014e0 	.word	0x200014e0
 800a400:	e000ed04 	.word	0xe000ed04

0800a404 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a40a:	4b05      	ldr	r3, [pc, #20]	; (800a420 <xTaskGetTickCount+0x1c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a410:	687b      	ldr	r3, [r7, #4]
}
 800a412:	4618      	mov	r0, r3
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	200014d4 	.word	0x200014d4

0800a424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a42a:	2300      	movs	r3, #0
 800a42c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a42e:	4b4f      	ldr	r3, [pc, #316]	; (800a56c <xTaskIncrementTick+0x148>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	f040 808f 	bne.w	800a556 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a438:	4b4d      	ldr	r3, [pc, #308]	; (800a570 <xTaskIncrementTick+0x14c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3301      	adds	r3, #1
 800a43e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a440:	4a4b      	ldr	r2, [pc, #300]	; (800a570 <xTaskIncrementTick+0x14c>)
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d120      	bne.n	800a48e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a44c:	4b49      	ldr	r3, [pc, #292]	; (800a574 <xTaskIncrementTick+0x150>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <xTaskIncrementTick+0x48>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	603b      	str	r3, [r7, #0]
}
 800a468:	bf00      	nop
 800a46a:	e7fe      	b.n	800a46a <xTaskIncrementTick+0x46>
 800a46c:	4b41      	ldr	r3, [pc, #260]	; (800a574 <xTaskIncrementTick+0x150>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	60fb      	str	r3, [r7, #12]
 800a472:	4b41      	ldr	r3, [pc, #260]	; (800a578 <xTaskIncrementTick+0x154>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a3f      	ldr	r2, [pc, #252]	; (800a574 <xTaskIncrementTick+0x150>)
 800a478:	6013      	str	r3, [r2, #0]
 800a47a:	4a3f      	ldr	r2, [pc, #252]	; (800a578 <xTaskIncrementTick+0x154>)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	4b3e      	ldr	r3, [pc, #248]	; (800a57c <xTaskIncrementTick+0x158>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3301      	adds	r3, #1
 800a486:	4a3d      	ldr	r2, [pc, #244]	; (800a57c <xTaskIncrementTick+0x158>)
 800a488:	6013      	str	r3, [r2, #0]
 800a48a:	f000 fad1 	bl	800aa30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a48e:	4b3c      	ldr	r3, [pc, #240]	; (800a580 <xTaskIncrementTick+0x15c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	429a      	cmp	r2, r3
 800a496:	d349      	bcc.n	800a52c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a498:	4b36      	ldr	r3, [pc, #216]	; (800a574 <xTaskIncrementTick+0x150>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d104      	bne.n	800a4ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a2:	4b37      	ldr	r3, [pc, #220]	; (800a580 <xTaskIncrementTick+0x15c>)
 800a4a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4a8:	601a      	str	r2, [r3, #0]
					break;
 800a4aa:	e03f      	b.n	800a52c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ac:	4b31      	ldr	r3, [pc, #196]	; (800a574 <xTaskIncrementTick+0x150>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d203      	bcs.n	800a4cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4c4:	4a2e      	ldr	r2, [pc, #184]	; (800a580 <xTaskIncrementTick+0x15c>)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4ca:	e02f      	b.n	800a52c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fe fea7 	bl	8009224 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d004      	beq.n	800a4e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	3318      	adds	r3, #24
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fe fe9e 	bl	8009224 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ec:	4b25      	ldr	r3, [pc, #148]	; (800a584 <xTaskIncrementTick+0x160>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d903      	bls.n	800a4fc <xTaskIncrementTick+0xd8>
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f8:	4a22      	ldr	r2, [pc, #136]	; (800a584 <xTaskIncrementTick+0x160>)
 800a4fa:	6013      	str	r3, [r2, #0]
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a500:	4613      	mov	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4a1f      	ldr	r2, [pc, #124]	; (800a588 <xTaskIncrementTick+0x164>)
 800a50a:	441a      	add	r2, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	3304      	adds	r3, #4
 800a510:	4619      	mov	r1, r3
 800a512:	4610      	mov	r0, r2
 800a514:	f7fe fe29 	bl	800916a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a51c:	4b1b      	ldr	r3, [pc, #108]	; (800a58c <xTaskIncrementTick+0x168>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a522:	429a      	cmp	r2, r3
 800a524:	d3b8      	bcc.n	800a498 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a526:	2301      	movs	r3, #1
 800a528:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a52a:	e7b5      	b.n	800a498 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a52c:	4b17      	ldr	r3, [pc, #92]	; (800a58c <xTaskIncrementTick+0x168>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a532:	4915      	ldr	r1, [pc, #84]	; (800a588 <xTaskIncrementTick+0x164>)
 800a534:	4613      	mov	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	4413      	add	r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	440b      	add	r3, r1
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d901      	bls.n	800a548 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a544:	2301      	movs	r3, #1
 800a546:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a548:	4b11      	ldr	r3, [pc, #68]	; (800a590 <xTaskIncrementTick+0x16c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d007      	beq.n	800a560 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a550:	2301      	movs	r3, #1
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	e004      	b.n	800a560 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a556:	4b0f      	ldr	r3, [pc, #60]	; (800a594 <xTaskIncrementTick+0x170>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3301      	adds	r3, #1
 800a55c:	4a0d      	ldr	r2, [pc, #52]	; (800a594 <xTaskIncrementTick+0x170>)
 800a55e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a560:	697b      	ldr	r3, [r7, #20]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	200014f8 	.word	0x200014f8
 800a570:	200014d4 	.word	0x200014d4
 800a574:	20001488 	.word	0x20001488
 800a578:	2000148c 	.word	0x2000148c
 800a57c:	200014e8 	.word	0x200014e8
 800a580:	200014f0 	.word	0x200014f0
 800a584:	200014d8 	.word	0x200014d8
 800a588:	20001000 	.word	0x20001000
 800a58c:	20000ffc 	.word	0x20000ffc
 800a590:	200014e4 	.word	0x200014e4
 800a594:	200014e0 	.word	0x200014e0

0800a598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a59e:	4b28      	ldr	r3, [pc, #160]	; (800a640 <vTaskSwitchContext+0xa8>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d003      	beq.n	800a5ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5a6:	4b27      	ldr	r3, [pc, #156]	; (800a644 <vTaskSwitchContext+0xac>)
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5ac:	e041      	b.n	800a632 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a5ae:	4b25      	ldr	r3, [pc, #148]	; (800a644 <vTaskSwitchContext+0xac>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b4:	4b24      	ldr	r3, [pc, #144]	; (800a648 <vTaskSwitchContext+0xb0>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60fb      	str	r3, [r7, #12]
 800a5ba:	e010      	b.n	800a5de <vTaskSwitchContext+0x46>
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10a      	bne.n	800a5d8 <vTaskSwitchContext+0x40>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	607b      	str	r3, [r7, #4]
}
 800a5d4:	bf00      	nop
 800a5d6:	e7fe      	b.n	800a5d6 <vTaskSwitchContext+0x3e>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	60fb      	str	r3, [r7, #12]
 800a5de:	491b      	ldr	r1, [pc, #108]	; (800a64c <vTaskSwitchContext+0xb4>)
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	440b      	add	r3, r1
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0e4      	beq.n	800a5bc <vTaskSwitchContext+0x24>
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4a13      	ldr	r2, [pc, #76]	; (800a64c <vTaskSwitchContext+0xb4>)
 800a5fe:	4413      	add	r3, r2
 800a600:	60bb      	str	r3, [r7, #8]
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	685a      	ldr	r2, [r3, #4]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	605a      	str	r2, [r3, #4]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	3308      	adds	r3, #8
 800a614:	429a      	cmp	r2, r3
 800a616:	d104      	bne.n	800a622 <vTaskSwitchContext+0x8a>
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	605a      	str	r2, [r3, #4]
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	4a09      	ldr	r2, [pc, #36]	; (800a650 <vTaskSwitchContext+0xb8>)
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	4a06      	ldr	r2, [pc, #24]	; (800a648 <vTaskSwitchContext+0xb0>)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6013      	str	r3, [r2, #0]
}
 800a632:	bf00      	nop
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	200014f8 	.word	0x200014f8
 800a644:	200014e4 	.word	0x200014e4
 800a648:	200014d8 	.word	0x200014d8
 800a64c:	20001000 	.word	0x20001000
 800a650:	20000ffc 	.word	0x20000ffc

0800a654 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10a      	bne.n	800a67a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	60fb      	str	r3, [r7, #12]
}
 800a676:	bf00      	nop
 800a678:	e7fe      	b.n	800a678 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a67a:	4b07      	ldr	r3, [pc, #28]	; (800a698 <vTaskPlaceOnEventList+0x44>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	3318      	adds	r3, #24
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7fe fd95 	bl	80091b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a688:	2101      	movs	r1, #1
 800a68a:	6838      	ldr	r0, [r7, #0]
 800a68c:	f000 fa7c 	bl	800ab88 <prvAddCurrentTaskToDelayedList>
}
 800a690:	bf00      	nop
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	20000ffc 	.word	0x20000ffc

0800a69c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10a      	bne.n	800a6c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	617b      	str	r3, [r7, #20]
}
 800a6c0:	bf00      	nop
 800a6c2:	e7fe      	b.n	800a6c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6c4:	4b0a      	ldr	r3, [pc, #40]	; (800a6f0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3318      	adds	r3, #24
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f7fe fd4c 	bl	800916a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d002      	beq.n	800a6de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a6d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a6de:	6879      	ldr	r1, [r7, #4]
 800a6e0:	68b8      	ldr	r0, [r7, #8]
 800a6e2:	f000 fa51 	bl	800ab88 <prvAddCurrentTaskToDelayedList>
	}
 800a6e6:	bf00      	nop
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20000ffc 	.word	0x20000ffc

0800a6f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10a      	bne.n	800a720 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	60fb      	str	r3, [r7, #12]
}
 800a71c:	bf00      	nop
 800a71e:	e7fe      	b.n	800a71e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	3318      	adds	r3, #24
 800a724:	4618      	mov	r0, r3
 800a726:	f7fe fd7d 	bl	8009224 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a72a:	4b1e      	ldr	r3, [pc, #120]	; (800a7a4 <xTaskRemoveFromEventList+0xb0>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d11d      	bne.n	800a76e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	3304      	adds	r3, #4
 800a736:	4618      	mov	r0, r3
 800a738:	f7fe fd74 	bl	8009224 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a740:	4b19      	ldr	r3, [pc, #100]	; (800a7a8 <xTaskRemoveFromEventList+0xb4>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	429a      	cmp	r2, r3
 800a746:	d903      	bls.n	800a750 <xTaskRemoveFromEventList+0x5c>
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74c:	4a16      	ldr	r2, [pc, #88]	; (800a7a8 <xTaskRemoveFromEventList+0xb4>)
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a754:	4613      	mov	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4a13      	ldr	r2, [pc, #76]	; (800a7ac <xTaskRemoveFromEventList+0xb8>)
 800a75e:	441a      	add	r2, r3
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	3304      	adds	r3, #4
 800a764:	4619      	mov	r1, r3
 800a766:	4610      	mov	r0, r2
 800a768:	f7fe fcff 	bl	800916a <vListInsertEnd>
 800a76c:	e005      	b.n	800a77a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	3318      	adds	r3, #24
 800a772:	4619      	mov	r1, r3
 800a774:	480e      	ldr	r0, [pc, #56]	; (800a7b0 <xTaskRemoveFromEventList+0xbc>)
 800a776:	f7fe fcf8 	bl	800916a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a77e:	4b0d      	ldr	r3, [pc, #52]	; (800a7b4 <xTaskRemoveFromEventList+0xc0>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	429a      	cmp	r2, r3
 800a786:	d905      	bls.n	800a794 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a788:	2301      	movs	r3, #1
 800a78a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a78c:	4b0a      	ldr	r3, [pc, #40]	; (800a7b8 <xTaskRemoveFromEventList+0xc4>)
 800a78e:	2201      	movs	r2, #1
 800a790:	601a      	str	r2, [r3, #0]
 800a792:	e001      	b.n	800a798 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a794:	2300      	movs	r3, #0
 800a796:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a798:	697b      	ldr	r3, [r7, #20]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	200014f8 	.word	0x200014f8
 800a7a8:	200014d8 	.word	0x200014d8
 800a7ac:	20001000 	.word	0x20001000
 800a7b0:	20001490 	.word	0x20001490
 800a7b4:	20000ffc 	.word	0x20000ffc
 800a7b8:	200014e4 	.word	0x200014e4

0800a7bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7c4:	4b06      	ldr	r3, [pc, #24]	; (800a7e0 <vTaskInternalSetTimeOutState+0x24>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7cc:	4b05      	ldr	r3, [pc, #20]	; (800a7e4 <vTaskInternalSetTimeOutState+0x28>)
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	605a      	str	r2, [r3, #4]
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	200014e8 	.word	0x200014e8
 800a7e4:	200014d4 	.word	0x200014d4

0800a7e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b088      	sub	sp, #32
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10a      	bne.n	800a80e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	613b      	str	r3, [r7, #16]
}
 800a80a:	bf00      	nop
 800a80c:	e7fe      	b.n	800a80c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10a      	bne.n	800a82a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	60fb      	str	r3, [r7, #12]
}
 800a826:	bf00      	nop
 800a828:	e7fe      	b.n	800a828 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a82a:	f000 fe7b 	bl	800b524 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a82e:	4b1d      	ldr	r3, [pc, #116]	; (800a8a4 <xTaskCheckForTimeOut+0xbc>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	69ba      	ldr	r2, [r7, #24]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a846:	d102      	bne.n	800a84e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a848:	2300      	movs	r3, #0
 800a84a:	61fb      	str	r3, [r7, #28]
 800a84c:	e023      	b.n	800a896 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	4b15      	ldr	r3, [pc, #84]	; (800a8a8 <xTaskCheckForTimeOut+0xc0>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	429a      	cmp	r2, r3
 800a858:	d007      	beq.n	800a86a <xTaskCheckForTimeOut+0x82>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	69ba      	ldr	r2, [r7, #24]
 800a860:	429a      	cmp	r2, r3
 800a862:	d302      	bcc.n	800a86a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a864:	2301      	movs	r3, #1
 800a866:	61fb      	str	r3, [r7, #28]
 800a868:	e015      	b.n	800a896 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	429a      	cmp	r2, r3
 800a872:	d20b      	bcs.n	800a88c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	1ad2      	subs	r2, r2, r3
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7ff ff9b 	bl	800a7bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a886:	2300      	movs	r3, #0
 800a888:	61fb      	str	r3, [r7, #28]
 800a88a:	e004      	b.n	800a896 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	2200      	movs	r2, #0
 800a890:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a892:	2301      	movs	r3, #1
 800a894:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a896:	f000 fe75 	bl	800b584 <vPortExitCritical>

	return xReturn;
 800a89a:	69fb      	ldr	r3, [r7, #28]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3720      	adds	r7, #32
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	200014d4 	.word	0x200014d4
 800a8a8:	200014e8 	.word	0x200014e8

0800a8ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8b0:	4b03      	ldr	r3, [pc, #12]	; (800a8c0 <vTaskMissedYield+0x14>)
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	601a      	str	r2, [r3, #0]
}
 800a8b6:	bf00      	nop
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	200014e4 	.word	0x200014e4

0800a8c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8cc:	f000 f852 	bl	800a974 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8d0:	4b06      	ldr	r3, [pc, #24]	; (800a8ec <prvIdleTask+0x28>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d9f9      	bls.n	800a8cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8d8:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <prvIdleTask+0x2c>)
 800a8da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8de:	601a      	str	r2, [r3, #0]
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8e8:	e7f0      	b.n	800a8cc <prvIdleTask+0x8>
 800a8ea:	bf00      	nop
 800a8ec:	20001000 	.word	0x20001000
 800a8f0:	e000ed04 	.word	0xe000ed04

0800a8f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	607b      	str	r3, [r7, #4]
 800a8fe:	e00c      	b.n	800a91a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	4613      	mov	r3, r2
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	4413      	add	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4a12      	ldr	r2, [pc, #72]	; (800a954 <prvInitialiseTaskLists+0x60>)
 800a90c:	4413      	add	r3, r2
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fe fbfe 	bl	8009110 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	3301      	adds	r3, #1
 800a918:	607b      	str	r3, [r7, #4]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b37      	cmp	r3, #55	; 0x37
 800a91e:	d9ef      	bls.n	800a900 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a920:	480d      	ldr	r0, [pc, #52]	; (800a958 <prvInitialiseTaskLists+0x64>)
 800a922:	f7fe fbf5 	bl	8009110 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a926:	480d      	ldr	r0, [pc, #52]	; (800a95c <prvInitialiseTaskLists+0x68>)
 800a928:	f7fe fbf2 	bl	8009110 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a92c:	480c      	ldr	r0, [pc, #48]	; (800a960 <prvInitialiseTaskLists+0x6c>)
 800a92e:	f7fe fbef 	bl	8009110 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a932:	480c      	ldr	r0, [pc, #48]	; (800a964 <prvInitialiseTaskLists+0x70>)
 800a934:	f7fe fbec 	bl	8009110 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a938:	480b      	ldr	r0, [pc, #44]	; (800a968 <prvInitialiseTaskLists+0x74>)
 800a93a:	f7fe fbe9 	bl	8009110 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a93e:	4b0b      	ldr	r3, [pc, #44]	; (800a96c <prvInitialiseTaskLists+0x78>)
 800a940:	4a05      	ldr	r2, [pc, #20]	; (800a958 <prvInitialiseTaskLists+0x64>)
 800a942:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a944:	4b0a      	ldr	r3, [pc, #40]	; (800a970 <prvInitialiseTaskLists+0x7c>)
 800a946:	4a05      	ldr	r2, [pc, #20]	; (800a95c <prvInitialiseTaskLists+0x68>)
 800a948:	601a      	str	r2, [r3, #0]
}
 800a94a:	bf00      	nop
 800a94c:	3708      	adds	r7, #8
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	20001000 	.word	0x20001000
 800a958:	20001460 	.word	0x20001460
 800a95c:	20001474 	.word	0x20001474
 800a960:	20001490 	.word	0x20001490
 800a964:	200014a4 	.word	0x200014a4
 800a968:	200014bc 	.word	0x200014bc
 800a96c:	20001488 	.word	0x20001488
 800a970:	2000148c 	.word	0x2000148c

0800a974 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a97a:	e019      	b.n	800a9b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a97c:	f000 fdd2 	bl	800b524 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a980:	4b10      	ldr	r3, [pc, #64]	; (800a9c4 <prvCheckTasksWaitingTermination+0x50>)
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3304      	adds	r3, #4
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fe fc49 	bl	8009224 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a992:	4b0d      	ldr	r3, [pc, #52]	; (800a9c8 <prvCheckTasksWaitingTermination+0x54>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	3b01      	subs	r3, #1
 800a998:	4a0b      	ldr	r2, [pc, #44]	; (800a9c8 <prvCheckTasksWaitingTermination+0x54>)
 800a99a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a99c:	4b0b      	ldr	r3, [pc, #44]	; (800a9cc <prvCheckTasksWaitingTermination+0x58>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	4a0a      	ldr	r2, [pc, #40]	; (800a9cc <prvCheckTasksWaitingTermination+0x58>)
 800a9a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9a6:	f000 fded 	bl	800b584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f810 	bl	800a9d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9b0:	4b06      	ldr	r3, [pc, #24]	; (800a9cc <prvCheckTasksWaitingTermination+0x58>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1e1      	bne.n	800a97c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9b8:	bf00      	nop
 800a9ba:	bf00      	nop
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	200014a4 	.word	0x200014a4
 800a9c8:	200014d0 	.word	0x200014d0
 800a9cc:	200014b8 	.word	0x200014b8

0800a9d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d108      	bne.n	800a9f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 ff8a 	bl	800b900 <vPortFree>
				vPortFree( pxTCB );
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 ff87 	bl	800b900 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9f2:	e018      	b.n	800aa26 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d103      	bne.n	800aa06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 ff7e 	bl	800b900 <vPortFree>
	}
 800aa04:	e00f      	b.n	800aa26 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	d00a      	beq.n	800aa26 <prvDeleteTCB+0x56>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	60fb      	str	r3, [r7, #12]
}
 800aa22:	bf00      	nop
 800aa24:	e7fe      	b.n	800aa24 <prvDeleteTCB+0x54>
	}
 800aa26:	bf00      	nop
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
	...

0800aa30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa36:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <prvResetNextTaskUnblockTime+0x38>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d104      	bne.n	800aa4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa40:	4b0a      	ldr	r3, [pc, #40]	; (800aa6c <prvResetNextTaskUnblockTime+0x3c>)
 800aa42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa48:	e008      	b.n	800aa5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa4a:	4b07      	ldr	r3, [pc, #28]	; (800aa68 <prvResetNextTaskUnblockTime+0x38>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	4a04      	ldr	r2, [pc, #16]	; (800aa6c <prvResetNextTaskUnblockTime+0x3c>)
 800aa5a:	6013      	str	r3, [r2, #0]
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr
 800aa68:	20001488 	.word	0x20001488
 800aa6c:	200014f0 	.word	0x200014f0

0800aa70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa76:	4b0b      	ldr	r3, [pc, #44]	; (800aaa4 <xTaskGetSchedulerState+0x34>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d102      	bne.n	800aa84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	607b      	str	r3, [r7, #4]
 800aa82:	e008      	b.n	800aa96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa84:	4b08      	ldr	r3, [pc, #32]	; (800aaa8 <xTaskGetSchedulerState+0x38>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d102      	bne.n	800aa92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	607b      	str	r3, [r7, #4]
 800aa90:	e001      	b.n	800aa96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa92:	2300      	movs	r3, #0
 800aa94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa96:	687b      	ldr	r3, [r7, #4]
	}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	200014dc 	.word	0x200014dc
 800aaa8:	200014f8 	.word	0x200014f8

0800aaac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aab8:	2300      	movs	r3, #0
 800aaba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d056      	beq.n	800ab70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aac2:	4b2e      	ldr	r3, [pc, #184]	; (800ab7c <xTaskPriorityDisinherit+0xd0>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d00a      	beq.n	800aae2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad0:	f383 8811 	msr	BASEPRI, r3
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	60fb      	str	r3, [r7, #12]
}
 800aade:	bf00      	nop
 800aae0:	e7fe      	b.n	800aae0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10a      	bne.n	800ab00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	60bb      	str	r3, [r7, #8]
}
 800aafc:	bf00      	nop
 800aafe:	e7fe      	b.n	800aafe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab04:	1e5a      	subs	r2, r3, #1
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d02c      	beq.n	800ab70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d128      	bne.n	800ab70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	3304      	adds	r3, #4
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe fb7e 	bl	8009224 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab40:	4b0f      	ldr	r3, [pc, #60]	; (800ab80 <xTaskPriorityDisinherit+0xd4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d903      	bls.n	800ab50 <xTaskPriorityDisinherit+0xa4>
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4c:	4a0c      	ldr	r2, [pc, #48]	; (800ab80 <xTaskPriorityDisinherit+0xd4>)
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab54:	4613      	mov	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4a09      	ldr	r2, [pc, #36]	; (800ab84 <xTaskPriorityDisinherit+0xd8>)
 800ab5e:	441a      	add	r2, r3
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	3304      	adds	r3, #4
 800ab64:	4619      	mov	r1, r3
 800ab66:	4610      	mov	r0, r2
 800ab68:	f7fe faff 	bl	800916a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab70:	697b      	ldr	r3, [r7, #20]
	}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20000ffc 	.word	0x20000ffc
 800ab80:	200014d8 	.word	0x200014d8
 800ab84:	20001000 	.word	0x20001000

0800ab88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab92:	4b21      	ldr	r3, [pc, #132]	; (800ac18 <prvAddCurrentTaskToDelayedList+0x90>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab98:	4b20      	ldr	r3, [pc, #128]	; (800ac1c <prvAddCurrentTaskToDelayedList+0x94>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fe fb40 	bl	8009224 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abaa:	d10a      	bne.n	800abc2 <prvAddCurrentTaskToDelayedList+0x3a>
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d007      	beq.n	800abc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abb2:	4b1a      	ldr	r3, [pc, #104]	; (800ac1c <prvAddCurrentTaskToDelayedList+0x94>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3304      	adds	r3, #4
 800abb8:	4619      	mov	r1, r3
 800abba:	4819      	ldr	r0, [pc, #100]	; (800ac20 <prvAddCurrentTaskToDelayedList+0x98>)
 800abbc:	f7fe fad5 	bl	800916a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abc0:	e026      	b.n	800ac10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4413      	add	r3, r2
 800abc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abca:	4b14      	ldr	r3, [pc, #80]	; (800ac1c <prvAddCurrentTaskToDelayedList+0x94>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d209      	bcs.n	800abee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abda:	4b12      	ldr	r3, [pc, #72]	; (800ac24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	4b0f      	ldr	r3, [pc, #60]	; (800ac1c <prvAddCurrentTaskToDelayedList+0x94>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3304      	adds	r3, #4
 800abe4:	4619      	mov	r1, r3
 800abe6:	4610      	mov	r0, r2
 800abe8:	f7fe fae3 	bl	80091b2 <vListInsert>
}
 800abec:	e010      	b.n	800ac10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abee:	4b0e      	ldr	r3, [pc, #56]	; (800ac28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	4b0a      	ldr	r3, [pc, #40]	; (800ac1c <prvAddCurrentTaskToDelayedList+0x94>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3304      	adds	r3, #4
 800abf8:	4619      	mov	r1, r3
 800abfa:	4610      	mov	r0, r2
 800abfc:	f7fe fad9 	bl	80091b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac00:	4b0a      	ldr	r3, [pc, #40]	; (800ac2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d202      	bcs.n	800ac10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac0a:	4a08      	ldr	r2, [pc, #32]	; (800ac2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	6013      	str	r3, [r2, #0]
}
 800ac10:	bf00      	nop
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	200014d4 	.word	0x200014d4
 800ac1c:	20000ffc 	.word	0x20000ffc
 800ac20:	200014bc 	.word	0x200014bc
 800ac24:	2000148c 	.word	0x2000148c
 800ac28:	20001488 	.word	0x20001488
 800ac2c:	200014f0 	.word	0x200014f0

0800ac30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08a      	sub	sp, #40	; 0x28
 800ac34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac36:	2300      	movs	r3, #0
 800ac38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac3a:	f000 fb07 	bl	800b24c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac3e:	4b1c      	ldr	r3, [pc, #112]	; (800acb0 <xTimerCreateTimerTask+0x80>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d021      	beq.n	800ac8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac46:	2300      	movs	r3, #0
 800ac48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac4e:	1d3a      	adds	r2, r7, #4
 800ac50:	f107 0108 	add.w	r1, r7, #8
 800ac54:	f107 030c 	add.w	r3, r7, #12
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7fe fa3f 	bl	80090dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac5e:	6879      	ldr	r1, [r7, #4]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	9202      	str	r2, [sp, #8]
 800ac66:	9301      	str	r3, [sp, #4]
 800ac68:	2302      	movs	r3, #2
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	460a      	mov	r2, r1
 800ac70:	4910      	ldr	r1, [pc, #64]	; (800acb4 <xTimerCreateTimerTask+0x84>)
 800ac72:	4811      	ldr	r0, [pc, #68]	; (800acb8 <xTimerCreateTimerTask+0x88>)
 800ac74:	f7ff f8de 	bl	8009e34 <xTaskCreateStatic>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	4a10      	ldr	r2, [pc, #64]	; (800acbc <xTimerCreateTimerTask+0x8c>)
 800ac7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac7e:	4b0f      	ldr	r3, [pc, #60]	; (800acbc <xTimerCreateTimerTask+0x8c>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac86:	2301      	movs	r3, #1
 800ac88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10a      	bne.n	800aca6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	613b      	str	r3, [r7, #16]
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aca6:	697b      	ldr	r3, [r7, #20]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3718      	adds	r7, #24
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	2000152c 	.word	0x2000152c
 800acb4:	0800f9c4 	.word	0x0800f9c4
 800acb8:	0800adf5 	.word	0x0800adf5
 800acbc:	20001530 	.word	0x20001530

0800acc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08a      	sub	sp, #40	; 0x28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800acce:	2300      	movs	r3, #0
 800acd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10a      	bne.n	800acee <xTimerGenericCommand+0x2e>
	__asm volatile
 800acd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	623b      	str	r3, [r7, #32]
}
 800acea:	bf00      	nop
 800acec:	e7fe      	b.n	800acec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800acee:	4b1a      	ldr	r3, [pc, #104]	; (800ad58 <xTimerGenericCommand+0x98>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d02a      	beq.n	800ad4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	2b05      	cmp	r3, #5
 800ad06:	dc18      	bgt.n	800ad3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad08:	f7ff feb2 	bl	800aa70 <xTaskGetSchedulerState>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d109      	bne.n	800ad26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad12:	4b11      	ldr	r3, [pc, #68]	; (800ad58 <xTimerGenericCommand+0x98>)
 800ad14:	6818      	ldr	r0, [r3, #0]
 800ad16:	f107 0110 	add.w	r1, r7, #16
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad1e:	f7fe fc53 	bl	80095c8 <xQueueGenericSend>
 800ad22:	6278      	str	r0, [r7, #36]	; 0x24
 800ad24:	e012      	b.n	800ad4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad26:	4b0c      	ldr	r3, [pc, #48]	; (800ad58 <xTimerGenericCommand+0x98>)
 800ad28:	6818      	ldr	r0, [r3, #0]
 800ad2a:	f107 0110 	add.w	r1, r7, #16
 800ad2e:	2300      	movs	r3, #0
 800ad30:	2200      	movs	r2, #0
 800ad32:	f7fe fc49 	bl	80095c8 <xQueueGenericSend>
 800ad36:	6278      	str	r0, [r7, #36]	; 0x24
 800ad38:	e008      	b.n	800ad4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad3a:	4b07      	ldr	r3, [pc, #28]	; (800ad58 <xTimerGenericCommand+0x98>)
 800ad3c:	6818      	ldr	r0, [r3, #0]
 800ad3e:	f107 0110 	add.w	r1, r7, #16
 800ad42:	2300      	movs	r3, #0
 800ad44:	683a      	ldr	r2, [r7, #0]
 800ad46:	f7fe fd3d 	bl	80097c4 <xQueueGenericSendFromISR>
 800ad4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3728      	adds	r7, #40	; 0x28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	2000152c 	.word	0x2000152c

0800ad5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b088      	sub	sp, #32
 800ad60:	af02      	add	r7, sp, #8
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad66:	4b22      	ldr	r3, [pc, #136]	; (800adf0 <prvProcessExpiredTimer+0x94>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	3304      	adds	r3, #4
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fe fa55 	bl	8009224 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad80:	f003 0304 	and.w	r3, r3, #4
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d022      	beq.n	800adce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	699a      	ldr	r2, [r3, #24]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	18d1      	adds	r1, r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	683a      	ldr	r2, [r7, #0]
 800ad94:	6978      	ldr	r0, [r7, #20]
 800ad96:	f000 f8d1 	bl	800af3c <prvInsertTimerInActiveList>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d01f      	beq.n	800ade0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ada0:	2300      	movs	r3, #0
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	2300      	movs	r3, #0
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	2100      	movs	r1, #0
 800adaa:	6978      	ldr	r0, [r7, #20]
 800adac:	f7ff ff88 	bl	800acc0 <xTimerGenericCommand>
 800adb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d113      	bne.n	800ade0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	60fb      	str	r3, [r7, #12]
}
 800adca:	bf00      	nop
 800adcc:	e7fe      	b.n	800adcc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800add4:	f023 0301 	bic.w	r3, r3, #1
 800add8:	b2da      	uxtb	r2, r3
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
 800ade4:	6978      	ldr	r0, [r7, #20]
 800ade6:	4798      	blx	r3
}
 800ade8:	bf00      	nop
 800adea:	3718      	adds	r7, #24
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	20001524 	.word	0x20001524

0800adf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800adfc:	f107 0308 	add.w	r3, r7, #8
 800ae00:	4618      	mov	r0, r3
 800ae02:	f000 f857 	bl	800aeb4 <prvGetNextExpireTime>
 800ae06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f000 f803 	bl	800ae18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae12:	f000 f8d5 	bl	800afc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae16:	e7f1      	b.n	800adfc <prvTimerTask+0x8>

0800ae18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae22:	f7ff fa43 	bl	800a2ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae26:	f107 0308 	add.w	r3, r7, #8
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f000 f866 	bl	800aefc <prvSampleTimeNow>
 800ae30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d130      	bne.n	800ae9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10a      	bne.n	800ae54 <prvProcessTimerOrBlockTask+0x3c>
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d806      	bhi.n	800ae54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae46:	f7ff fa3f 	bl	800a2c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae4a:	68f9      	ldr	r1, [r7, #12]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f7ff ff85 	bl	800ad5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae52:	e024      	b.n	800ae9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d008      	beq.n	800ae6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae5a:	4b13      	ldr	r3, [pc, #76]	; (800aea8 <prvProcessTimerOrBlockTask+0x90>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d101      	bne.n	800ae68 <prvProcessTimerOrBlockTask+0x50>
 800ae64:	2301      	movs	r3, #1
 800ae66:	e000      	b.n	800ae6a <prvProcessTimerOrBlockTask+0x52>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae6c:	4b0f      	ldr	r3, [pc, #60]	; (800aeac <prvProcessTimerOrBlockTask+0x94>)
 800ae6e:	6818      	ldr	r0, [r3, #0]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	f7fe ffa7 	bl	8009dcc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae7e:	f7ff fa23 	bl	800a2c8 <xTaskResumeAll>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10a      	bne.n	800ae9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae88:	4b09      	ldr	r3, [pc, #36]	; (800aeb0 <prvProcessTimerOrBlockTask+0x98>)
 800ae8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae8e:	601a      	str	r2, [r3, #0]
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	f3bf 8f6f 	isb	sy
}
 800ae98:	e001      	b.n	800ae9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ae9a:	f7ff fa15 	bl	800a2c8 <xTaskResumeAll>
}
 800ae9e:	bf00      	nop
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20001528 	.word	0x20001528
 800aeac:	2000152c 	.word	0x2000152c
 800aeb0:	e000ed04 	.word	0xe000ed04

0800aeb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aebc:	4b0e      	ldr	r3, [pc, #56]	; (800aef8 <prvGetNextExpireTime+0x44>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <prvGetNextExpireTime+0x16>
 800aec6:	2201      	movs	r2, #1
 800aec8:	e000      	b.n	800aecc <prvGetNextExpireTime+0x18>
 800aeca:	2200      	movs	r2, #0
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d105      	bne.n	800aee4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aed8:	4b07      	ldr	r3, [pc, #28]	; (800aef8 <prvGetNextExpireTime+0x44>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	e001      	b.n	800aee8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aee4:	2300      	movs	r3, #0
 800aee6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aee8:	68fb      	ldr	r3, [r7, #12]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	20001524 	.word	0x20001524

0800aefc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af04:	f7ff fa7e 	bl	800a404 <xTaskGetTickCount>
 800af08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af0a:	4b0b      	ldr	r3, [pc, #44]	; (800af38 <prvSampleTimeNow+0x3c>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	429a      	cmp	r2, r3
 800af12:	d205      	bcs.n	800af20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af14:	f000 f936 	bl	800b184 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	e002      	b.n	800af26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af26:	4a04      	ldr	r2, [pc, #16]	; (800af38 <prvSampleTimeNow+0x3c>)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af2c:	68fb      	ldr	r3, [r7, #12]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	20001534 	.word	0x20001534

0800af3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
 800af48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af4a:	2300      	movs	r3, #0
 800af4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d812      	bhi.n	800af88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	1ad2      	subs	r2, r2, r3
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d302      	bcc.n	800af76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af70:	2301      	movs	r3, #1
 800af72:	617b      	str	r3, [r7, #20]
 800af74:	e01b      	b.n	800afae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af76:	4b10      	ldr	r3, [pc, #64]	; (800afb8 <prvInsertTimerInActiveList+0x7c>)
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	3304      	adds	r3, #4
 800af7e:	4619      	mov	r1, r3
 800af80:	4610      	mov	r0, r2
 800af82:	f7fe f916 	bl	80091b2 <vListInsert>
 800af86:	e012      	b.n	800afae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d206      	bcs.n	800af9e <prvInsertTimerInActiveList+0x62>
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	429a      	cmp	r2, r3
 800af96:	d302      	bcc.n	800af9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800af98:	2301      	movs	r3, #1
 800af9a:	617b      	str	r3, [r7, #20]
 800af9c:	e007      	b.n	800afae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af9e:	4b07      	ldr	r3, [pc, #28]	; (800afbc <prvInsertTimerInActiveList+0x80>)
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3304      	adds	r3, #4
 800afa6:	4619      	mov	r1, r3
 800afa8:	4610      	mov	r0, r2
 800afaa:	f7fe f902 	bl	80091b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800afae:	697b      	ldr	r3, [r7, #20]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	20001528 	.word	0x20001528
 800afbc:	20001524 	.word	0x20001524

0800afc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b08e      	sub	sp, #56	; 0x38
 800afc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afc6:	e0ca      	b.n	800b15e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	da18      	bge.n	800b000 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800afce:	1d3b      	adds	r3, r7, #4
 800afd0:	3304      	adds	r3, #4
 800afd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800afd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10a      	bne.n	800aff0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800afda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afde:	f383 8811 	msr	BASEPRI, r3
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	61fb      	str	r3, [r7, #28]
}
 800afec:	bf00      	nop
 800afee:	e7fe      	b.n	800afee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aff6:	6850      	ldr	r0, [r2, #4]
 800aff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800affa:	6892      	ldr	r2, [r2, #8]
 800affc:	4611      	mov	r1, r2
 800affe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	f2c0 80ab 	blt.w	800b15e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00e:	695b      	ldr	r3, [r3, #20]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d004      	beq.n	800b01e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b016:	3304      	adds	r3, #4
 800b018:	4618      	mov	r0, r3
 800b01a:	f7fe f903 	bl	8009224 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b01e:	463b      	mov	r3, r7
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff ff6b 	bl	800aefc <prvSampleTimeNow>
 800b026:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2b09      	cmp	r3, #9
 800b02c:	f200 8096 	bhi.w	800b15c <prvProcessReceivedCommands+0x19c>
 800b030:	a201      	add	r2, pc, #4	; (adr r2, 800b038 <prvProcessReceivedCommands+0x78>)
 800b032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b036:	bf00      	nop
 800b038:	0800b061 	.word	0x0800b061
 800b03c:	0800b061 	.word	0x0800b061
 800b040:	0800b061 	.word	0x0800b061
 800b044:	0800b0d5 	.word	0x0800b0d5
 800b048:	0800b0e9 	.word	0x0800b0e9
 800b04c:	0800b133 	.word	0x0800b133
 800b050:	0800b061 	.word	0x0800b061
 800b054:	0800b061 	.word	0x0800b061
 800b058:	0800b0d5 	.word	0x0800b0d5
 800b05c:	0800b0e9 	.word	0x0800b0e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b066:	f043 0301 	orr.w	r3, r3, #1
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b072:	68ba      	ldr	r2, [r7, #8]
 800b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	18d1      	adds	r1, r2, r3
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b07e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b080:	f7ff ff5c 	bl	800af3c <prvInsertTimerInActiveList>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d069      	beq.n	800b15e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08c:	6a1b      	ldr	r3, [r3, #32]
 800b08e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b090:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b098:	f003 0304 	and.w	r3, r3, #4
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d05e      	beq.n	800b15e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	441a      	add	r2, r3
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0b2:	f7ff fe05 	bl	800acc0 <xTimerGenericCommand>
 800b0b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b0b8:	6a3b      	ldr	r3, [r7, #32]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d14f      	bne.n	800b15e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	61bb      	str	r3, [r7, #24]
}
 800b0d0:	bf00      	nop
 800b0d2:	e7fe      	b.n	800b0d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0da:	f023 0301 	bic.w	r3, r3, #1
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b0e6:	e03a      	b.n	800b15e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0ee:	f043 0301 	orr.w	r3, r3, #1
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10a      	bne.n	800b11e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	617b      	str	r3, [r7, #20]
}
 800b11a:	bf00      	nop
 800b11c:	e7fe      	b.n	800b11c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b120:	699a      	ldr	r2, [r3, #24]
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	18d1      	adds	r1, r2, r3
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b12a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b12c:	f7ff ff06 	bl	800af3c <prvInsertTimerInActiveList>
					break;
 800b130:	e015      	b.n	800b15e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b138:	f003 0302 	and.w	r3, r3, #2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d103      	bne.n	800b148 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b142:	f000 fbdd 	bl	800b900 <vPortFree>
 800b146:	e00a      	b.n	800b15e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b14e:	f023 0301 	bic.w	r3, r3, #1
 800b152:	b2da      	uxtb	r2, r3
 800b154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b15a:	e000      	b.n	800b15e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b15c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b15e:	4b08      	ldr	r3, [pc, #32]	; (800b180 <prvProcessReceivedCommands+0x1c0>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	1d39      	adds	r1, r7, #4
 800b164:	2200      	movs	r2, #0
 800b166:	4618      	mov	r0, r3
 800b168:	f7fe fbc8 	bl	80098fc <xQueueReceive>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f47f af2a 	bne.w	800afc8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b174:	bf00      	nop
 800b176:	bf00      	nop
 800b178:	3730      	adds	r7, #48	; 0x30
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	2000152c 	.word	0x2000152c

0800b184 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b088      	sub	sp, #32
 800b188:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b18a:	e048      	b.n	800b21e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b18c:	4b2d      	ldr	r3, [pc, #180]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b196:	4b2b      	ldr	r3, [pc, #172]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fe f83d 	bl	8009224 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d02e      	beq.n	800b21e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b1ca:	68ba      	ldr	r2, [r7, #8]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d90e      	bls.n	800b1f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1de:	4b19      	ldr	r3, [pc, #100]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	f7fd ffe2 	bl	80091b2 <vListInsert>
 800b1ee:	e016      	b.n	800b21e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f7ff fd60 	bl	800acc0 <xTimerGenericCommand>
 800b200:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10a      	bne.n	800b21e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20c:	f383 8811 	msr	BASEPRI, r3
 800b210:	f3bf 8f6f 	isb	sy
 800b214:	f3bf 8f4f 	dsb	sy
 800b218:	603b      	str	r3, [r7, #0]
}
 800b21a:	bf00      	nop
 800b21c:	e7fe      	b.n	800b21c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b21e:	4b09      	ldr	r3, [pc, #36]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1b1      	bne.n	800b18c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b228:	4b06      	ldr	r3, [pc, #24]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b22e:	4b06      	ldr	r3, [pc, #24]	; (800b248 <prvSwitchTimerLists+0xc4>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a04      	ldr	r2, [pc, #16]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b234:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b236:	4a04      	ldr	r2, [pc, #16]	; (800b248 <prvSwitchTimerLists+0xc4>)
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	6013      	str	r3, [r2, #0]
}
 800b23c:	bf00      	nop
 800b23e:	3718      	adds	r7, #24
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	20001524 	.word	0x20001524
 800b248:	20001528 	.word	0x20001528

0800b24c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b252:	f000 f967 	bl	800b524 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b256:	4b15      	ldr	r3, [pc, #84]	; (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d120      	bne.n	800b2a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b25e:	4814      	ldr	r0, [pc, #80]	; (800b2b0 <prvCheckForValidListAndQueue+0x64>)
 800b260:	f7fd ff56 	bl	8009110 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b264:	4813      	ldr	r0, [pc, #76]	; (800b2b4 <prvCheckForValidListAndQueue+0x68>)
 800b266:	f7fd ff53 	bl	8009110 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b26a:	4b13      	ldr	r3, [pc, #76]	; (800b2b8 <prvCheckForValidListAndQueue+0x6c>)
 800b26c:	4a10      	ldr	r2, [pc, #64]	; (800b2b0 <prvCheckForValidListAndQueue+0x64>)
 800b26e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b270:	4b12      	ldr	r3, [pc, #72]	; (800b2bc <prvCheckForValidListAndQueue+0x70>)
 800b272:	4a10      	ldr	r2, [pc, #64]	; (800b2b4 <prvCheckForValidListAndQueue+0x68>)
 800b274:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b276:	2300      	movs	r3, #0
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	4b11      	ldr	r3, [pc, #68]	; (800b2c0 <prvCheckForValidListAndQueue+0x74>)
 800b27c:	4a11      	ldr	r2, [pc, #68]	; (800b2c4 <prvCheckForValidListAndQueue+0x78>)
 800b27e:	2110      	movs	r1, #16
 800b280:	200a      	movs	r0, #10
 800b282:	f7fe f861 	bl	8009348 <xQueueGenericCreateStatic>
 800b286:	4603      	mov	r3, r0
 800b288:	4a08      	ldr	r2, [pc, #32]	; (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b28a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b28c:	4b07      	ldr	r3, [pc, #28]	; (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d005      	beq.n	800b2a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b294:	4b05      	ldr	r3, [pc, #20]	; (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	490b      	ldr	r1, [pc, #44]	; (800b2c8 <prvCheckForValidListAndQueue+0x7c>)
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fe fd42 	bl	8009d24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2a0:	f000 f970 	bl	800b584 <vPortExitCritical>
}
 800b2a4:	bf00      	nop
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	2000152c 	.word	0x2000152c
 800b2b0:	200014fc 	.word	0x200014fc
 800b2b4:	20001510 	.word	0x20001510
 800b2b8:	20001524 	.word	0x20001524
 800b2bc:	20001528 	.word	0x20001528
 800b2c0:	200015d8 	.word	0x200015d8
 800b2c4:	20001538 	.word	0x20001538
 800b2c8:	0800f9cc 	.word	0x0800f9cc

0800b2cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	3b04      	subs	r3, #4
 800b2dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3b04      	subs	r3, #4
 800b2ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	f023 0201 	bic.w	r2, r3, #1
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3b04      	subs	r3, #4
 800b2fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b2fc:	4a0c      	ldr	r2, [pc, #48]	; (800b330 <pxPortInitialiseStack+0x64>)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3b14      	subs	r3, #20
 800b306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3b04      	subs	r3, #4
 800b312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f06f 0202 	mvn.w	r2, #2
 800b31a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	3b20      	subs	r3, #32
 800b320:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b322:	68fb      	ldr	r3, [r7, #12]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	0800b335 	.word	0x0800b335

0800b334 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b33e:	4b12      	ldr	r3, [pc, #72]	; (800b388 <prvTaskExitError+0x54>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b346:	d00a      	beq.n	800b35e <prvTaskExitError+0x2a>
	__asm volatile
 800b348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34c:	f383 8811 	msr	BASEPRI, r3
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	60fb      	str	r3, [r7, #12]
}
 800b35a:	bf00      	nop
 800b35c:	e7fe      	b.n	800b35c <prvTaskExitError+0x28>
	__asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	60bb      	str	r3, [r7, #8]
}
 800b370:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b372:	bf00      	nop
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d0fc      	beq.n	800b374 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b37a:	bf00      	nop
 800b37c:	bf00      	nop
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr
 800b388:	20000014 	.word	0x20000014
 800b38c:	00000000 	.word	0x00000000

0800b390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b390:	4b07      	ldr	r3, [pc, #28]	; (800b3b0 <pxCurrentTCBConst2>)
 800b392:	6819      	ldr	r1, [r3, #0]
 800b394:	6808      	ldr	r0, [r1, #0]
 800b396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39a:	f380 8809 	msr	PSP, r0
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f04f 0000 	mov.w	r0, #0
 800b3a6:	f380 8811 	msr	BASEPRI, r0
 800b3aa:	4770      	bx	lr
 800b3ac:	f3af 8000 	nop.w

0800b3b0 <pxCurrentTCBConst2>:
 800b3b0:	20000ffc 	.word	0x20000ffc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3b4:	bf00      	nop
 800b3b6:	bf00      	nop

0800b3b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3b8:	4808      	ldr	r0, [pc, #32]	; (800b3dc <prvPortStartFirstTask+0x24>)
 800b3ba:	6800      	ldr	r0, [r0, #0]
 800b3bc:	6800      	ldr	r0, [r0, #0]
 800b3be:	f380 8808 	msr	MSP, r0
 800b3c2:	f04f 0000 	mov.w	r0, #0
 800b3c6:	f380 8814 	msr	CONTROL, r0
 800b3ca:	b662      	cpsie	i
 800b3cc:	b661      	cpsie	f
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	df00      	svc	0
 800b3d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3da:	bf00      	nop
 800b3dc:	e000ed08 	.word	0xe000ed08

0800b3e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3e6:	4b46      	ldr	r3, [pc, #280]	; (800b500 <xPortStartScheduler+0x120>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a46      	ldr	r2, [pc, #280]	; (800b504 <xPortStartScheduler+0x124>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d10a      	bne.n	800b406 <xPortStartScheduler+0x26>
	__asm volatile
 800b3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	613b      	str	r3, [r7, #16]
}
 800b402:	bf00      	nop
 800b404:	e7fe      	b.n	800b404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b406:	4b3e      	ldr	r3, [pc, #248]	; (800b500 <xPortStartScheduler+0x120>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a3f      	ldr	r2, [pc, #252]	; (800b508 <xPortStartScheduler+0x128>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d10a      	bne.n	800b426 <xPortStartScheduler+0x46>
	__asm volatile
 800b410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b414:	f383 8811 	msr	BASEPRI, r3
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	60fb      	str	r3, [r7, #12]
}
 800b422:	bf00      	nop
 800b424:	e7fe      	b.n	800b424 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b426:	4b39      	ldr	r3, [pc, #228]	; (800b50c <xPortStartScheduler+0x12c>)
 800b428:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	22ff      	movs	r2, #255	; 0xff
 800b436:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b440:	78fb      	ldrb	r3, [r7, #3]
 800b442:	b2db      	uxtb	r3, r3
 800b444:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b448:	b2da      	uxtb	r2, r3
 800b44a:	4b31      	ldr	r3, [pc, #196]	; (800b510 <xPortStartScheduler+0x130>)
 800b44c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b44e:	4b31      	ldr	r3, [pc, #196]	; (800b514 <xPortStartScheduler+0x134>)
 800b450:	2207      	movs	r2, #7
 800b452:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b454:	e009      	b.n	800b46a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b456:	4b2f      	ldr	r3, [pc, #188]	; (800b514 <xPortStartScheduler+0x134>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	4a2d      	ldr	r2, [pc, #180]	; (800b514 <xPortStartScheduler+0x134>)
 800b45e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b460:	78fb      	ldrb	r3, [r7, #3]
 800b462:	b2db      	uxtb	r3, r3
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	b2db      	uxtb	r3, r3
 800b468:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b46a:	78fb      	ldrb	r3, [r7, #3]
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b472:	2b80      	cmp	r3, #128	; 0x80
 800b474:	d0ef      	beq.n	800b456 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b476:	4b27      	ldr	r3, [pc, #156]	; (800b514 <xPortStartScheduler+0x134>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f1c3 0307 	rsb	r3, r3, #7
 800b47e:	2b04      	cmp	r3, #4
 800b480:	d00a      	beq.n	800b498 <xPortStartScheduler+0xb8>
	__asm volatile
 800b482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	60bb      	str	r3, [r7, #8]
}
 800b494:	bf00      	nop
 800b496:	e7fe      	b.n	800b496 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b498:	4b1e      	ldr	r3, [pc, #120]	; (800b514 <xPortStartScheduler+0x134>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	021b      	lsls	r3, r3, #8
 800b49e:	4a1d      	ldr	r2, [pc, #116]	; (800b514 <xPortStartScheduler+0x134>)
 800b4a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4a2:	4b1c      	ldr	r3, [pc, #112]	; (800b514 <xPortStartScheduler+0x134>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4aa:	4a1a      	ldr	r2, [pc, #104]	; (800b514 <xPortStartScheduler+0x134>)
 800b4ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4b6:	4b18      	ldr	r3, [pc, #96]	; (800b518 <xPortStartScheduler+0x138>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a17      	ldr	r2, [pc, #92]	; (800b518 <xPortStartScheduler+0x138>)
 800b4bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4c2:	4b15      	ldr	r3, [pc, #84]	; (800b518 <xPortStartScheduler+0x138>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a14      	ldr	r2, [pc, #80]	; (800b518 <xPortStartScheduler+0x138>)
 800b4c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b4cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4ce:	f000 f8dd 	bl	800b68c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4d2:	4b12      	ldr	r3, [pc, #72]	; (800b51c <xPortStartScheduler+0x13c>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4d8:	f000 f8fc 	bl	800b6d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4dc:	4b10      	ldr	r3, [pc, #64]	; (800b520 <xPortStartScheduler+0x140>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a0f      	ldr	r2, [pc, #60]	; (800b520 <xPortStartScheduler+0x140>)
 800b4e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b4e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4e8:	f7ff ff66 	bl	800b3b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4ec:	f7ff f854 	bl	800a598 <vTaskSwitchContext>
	prvTaskExitError();
 800b4f0:	f7ff ff20 	bl	800b334 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3718      	adds	r7, #24
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	e000ed00 	.word	0xe000ed00
 800b504:	410fc271 	.word	0x410fc271
 800b508:	410fc270 	.word	0x410fc270
 800b50c:	e000e400 	.word	0xe000e400
 800b510:	20001628 	.word	0x20001628
 800b514:	2000162c 	.word	0x2000162c
 800b518:	e000ed20 	.word	0xe000ed20
 800b51c:	20000014 	.word	0x20000014
 800b520:	e000ef34 	.word	0xe000ef34

0800b524 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
	__asm volatile
 800b52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52e:	f383 8811 	msr	BASEPRI, r3
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	f3bf 8f4f 	dsb	sy
 800b53a:	607b      	str	r3, [r7, #4]
}
 800b53c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b53e:	4b0f      	ldr	r3, [pc, #60]	; (800b57c <vPortEnterCritical+0x58>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3301      	adds	r3, #1
 800b544:	4a0d      	ldr	r2, [pc, #52]	; (800b57c <vPortEnterCritical+0x58>)
 800b546:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b548:	4b0c      	ldr	r3, [pc, #48]	; (800b57c <vPortEnterCritical+0x58>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d10f      	bne.n	800b570 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b550:	4b0b      	ldr	r3, [pc, #44]	; (800b580 <vPortEnterCritical+0x5c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00a      	beq.n	800b570 <vPortEnterCritical+0x4c>
	__asm volatile
 800b55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	603b      	str	r3, [r7, #0]
}
 800b56c:	bf00      	nop
 800b56e:	e7fe      	b.n	800b56e <vPortEnterCritical+0x4a>
	}
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	20000014 	.word	0x20000014
 800b580:	e000ed04 	.word	0xe000ed04

0800b584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b58a:	4b12      	ldr	r3, [pc, #72]	; (800b5d4 <vPortExitCritical+0x50>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10a      	bne.n	800b5a8 <vPortExitCritical+0x24>
	__asm volatile
 800b592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	607b      	str	r3, [r7, #4]
}
 800b5a4:	bf00      	nop
 800b5a6:	e7fe      	b.n	800b5a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b5a8:	4b0a      	ldr	r3, [pc, #40]	; (800b5d4 <vPortExitCritical+0x50>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	4a09      	ldr	r2, [pc, #36]	; (800b5d4 <vPortExitCritical+0x50>)
 800b5b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5b2:	4b08      	ldr	r3, [pc, #32]	; (800b5d4 <vPortExitCritical+0x50>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d105      	bne.n	800b5c6 <vPortExitCritical+0x42>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	f383 8811 	msr	BASEPRI, r3
}
 800b5c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5c6:	bf00      	nop
 800b5c8:	370c      	adds	r7, #12
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	20000014 	.word	0x20000014
	...

0800b5e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5e0:	f3ef 8009 	mrs	r0, PSP
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	4b15      	ldr	r3, [pc, #84]	; (800b640 <pxCurrentTCBConst>)
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	f01e 0f10 	tst.w	lr, #16
 800b5f0:	bf08      	it	eq
 800b5f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fa:	6010      	str	r0, [r2, #0]
 800b5fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b600:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b604:	f380 8811 	msr	BASEPRI, r0
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f7fe ffc2 	bl	800a598 <vTaskSwitchContext>
 800b614:	f04f 0000 	mov.w	r0, #0
 800b618:	f380 8811 	msr	BASEPRI, r0
 800b61c:	bc09      	pop	{r0, r3}
 800b61e:	6819      	ldr	r1, [r3, #0]
 800b620:	6808      	ldr	r0, [r1, #0]
 800b622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b626:	f01e 0f10 	tst.w	lr, #16
 800b62a:	bf08      	it	eq
 800b62c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b630:	f380 8809 	msr	PSP, r0
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	f3af 8000 	nop.w

0800b640 <pxCurrentTCBConst>:
 800b640:	20000ffc 	.word	0x20000ffc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b644:	bf00      	nop
 800b646:	bf00      	nop

0800b648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	607b      	str	r3, [r7, #4]
}
 800b660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b662:	f7fe fedf 	bl	800a424 <xTaskIncrementTick>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d003      	beq.n	800b674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b66c:	4b06      	ldr	r3, [pc, #24]	; (800b688 <xPortSysTickHandler+0x40>)
 800b66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b672:	601a      	str	r2, [r3, #0]
 800b674:	2300      	movs	r3, #0
 800b676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	f383 8811 	msr	BASEPRI, r3
}
 800b67e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b680:	bf00      	nop
 800b682:	3708      	adds	r7, #8
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	e000ed04 	.word	0xe000ed04

0800b68c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b68c:	b480      	push	{r7}
 800b68e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b690:	4b0b      	ldr	r3, [pc, #44]	; (800b6c0 <vPortSetupTimerInterrupt+0x34>)
 800b692:	2200      	movs	r2, #0
 800b694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b696:	4b0b      	ldr	r3, [pc, #44]	; (800b6c4 <vPortSetupTimerInterrupt+0x38>)
 800b698:	2200      	movs	r2, #0
 800b69a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b69c:	4b0a      	ldr	r3, [pc, #40]	; (800b6c8 <vPortSetupTimerInterrupt+0x3c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a0a      	ldr	r2, [pc, #40]	; (800b6cc <vPortSetupTimerInterrupt+0x40>)
 800b6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6a6:	099b      	lsrs	r3, r3, #6
 800b6a8:	4a09      	ldr	r2, [pc, #36]	; (800b6d0 <vPortSetupTimerInterrupt+0x44>)
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b6ae:	4b04      	ldr	r3, [pc, #16]	; (800b6c0 <vPortSetupTimerInterrupt+0x34>)
 800b6b0:	2207      	movs	r2, #7
 800b6b2:	601a      	str	r2, [r3, #0]
}
 800b6b4:	bf00      	nop
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	e000e010 	.word	0xe000e010
 800b6c4:	e000e018 	.word	0xe000e018
 800b6c8:	20000008 	.word	0x20000008
 800b6cc:	10624dd3 	.word	0x10624dd3
 800b6d0:	e000e014 	.word	0xe000e014

0800b6d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b6e4 <vPortEnableVFP+0x10>
 800b6d8:	6801      	ldr	r1, [r0, #0]
 800b6da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b6de:	6001      	str	r1, [r0, #0]
 800b6e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6e2:	bf00      	nop
 800b6e4:	e000ed88 	.word	0xe000ed88

0800b6e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6ee:	f3ef 8305 	mrs	r3, IPSR
 800b6f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2b0f      	cmp	r3, #15
 800b6f8:	d914      	bls.n	800b724 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6fa:	4a17      	ldr	r2, [pc, #92]	; (800b758 <vPortValidateInterruptPriority+0x70>)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	4413      	add	r3, r2
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b704:	4b15      	ldr	r3, [pc, #84]	; (800b75c <vPortValidateInterruptPriority+0x74>)
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	7afa      	ldrb	r2, [r7, #11]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d20a      	bcs.n	800b724 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b712:	f383 8811 	msr	BASEPRI, r3
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	607b      	str	r3, [r7, #4]
}
 800b720:	bf00      	nop
 800b722:	e7fe      	b.n	800b722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b724:	4b0e      	ldr	r3, [pc, #56]	; (800b760 <vPortValidateInterruptPriority+0x78>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b72c:	4b0d      	ldr	r3, [pc, #52]	; (800b764 <vPortValidateInterruptPriority+0x7c>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	429a      	cmp	r2, r3
 800b732:	d90a      	bls.n	800b74a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	603b      	str	r3, [r7, #0]
}
 800b746:	bf00      	nop
 800b748:	e7fe      	b.n	800b748 <vPortValidateInterruptPriority+0x60>
	}
 800b74a:	bf00      	nop
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	e000e3f0 	.word	0xe000e3f0
 800b75c:	20001628 	.word	0x20001628
 800b760:	e000ed0c 	.word	0xe000ed0c
 800b764:	2000162c 	.word	0x2000162c

0800b768 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08a      	sub	sp, #40	; 0x28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b770:	2300      	movs	r3, #0
 800b772:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b774:	f7fe fd9a 	bl	800a2ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b778:	4b5b      	ldr	r3, [pc, #364]	; (800b8e8 <pvPortMalloc+0x180>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d101      	bne.n	800b784 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b780:	f000 f920 	bl	800b9c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b784:	4b59      	ldr	r3, [pc, #356]	; (800b8ec <pvPortMalloc+0x184>)
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4013      	ands	r3, r2
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f040 8093 	bne.w	800b8b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d01d      	beq.n	800b7d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b798:	2208      	movs	r2, #8
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4413      	add	r3, r2
 800b79e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f003 0307 	and.w	r3, r3, #7
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d014      	beq.n	800b7d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f023 0307 	bic.w	r3, r3, #7
 800b7b0:	3308      	adds	r3, #8
 800b7b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f003 0307 	and.w	r3, r3, #7
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00a      	beq.n	800b7d4 <pvPortMalloc+0x6c>
	__asm volatile
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	617b      	str	r3, [r7, #20]
}
 800b7d0:	bf00      	nop
 800b7d2:	e7fe      	b.n	800b7d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d06e      	beq.n	800b8b8 <pvPortMalloc+0x150>
 800b7da:	4b45      	ldr	r3, [pc, #276]	; (800b8f0 <pvPortMalloc+0x188>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d869      	bhi.n	800b8b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7e4:	4b43      	ldr	r3, [pc, #268]	; (800b8f4 <pvPortMalloc+0x18c>)
 800b7e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7e8:	4b42      	ldr	r3, [pc, #264]	; (800b8f4 <pvPortMalloc+0x18c>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7ee:	e004      	b.n	800b7fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	429a      	cmp	r2, r3
 800b802:	d903      	bls.n	800b80c <pvPortMalloc+0xa4>
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1f1      	bne.n	800b7f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b80c:	4b36      	ldr	r3, [pc, #216]	; (800b8e8 <pvPortMalloc+0x180>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b812:	429a      	cmp	r2, r3
 800b814:	d050      	beq.n	800b8b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b816:	6a3b      	ldr	r3, [r7, #32]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2208      	movs	r2, #8
 800b81c:	4413      	add	r3, r2
 800b81e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	6a3b      	ldr	r3, [r7, #32]
 800b826:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82a:	685a      	ldr	r2, [r3, #4]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	1ad2      	subs	r2, r2, r3
 800b830:	2308      	movs	r3, #8
 800b832:	005b      	lsls	r3, r3, #1
 800b834:	429a      	cmp	r2, r3
 800b836:	d91f      	bls.n	800b878 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4413      	add	r3, r2
 800b83e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	f003 0307 	and.w	r3, r3, #7
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <pvPortMalloc+0xf8>
	__asm volatile
 800b84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84e:	f383 8811 	msr	BASEPRI, r3
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	613b      	str	r3, [r7, #16]
}
 800b85c:	bf00      	nop
 800b85e:	e7fe      	b.n	800b85e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	685a      	ldr	r2, [r3, #4]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	1ad2      	subs	r2, r2, r3
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b872:	69b8      	ldr	r0, [r7, #24]
 800b874:	f000 f908 	bl	800ba88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b878:	4b1d      	ldr	r3, [pc, #116]	; (800b8f0 <pvPortMalloc+0x188>)
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	4a1b      	ldr	r2, [pc, #108]	; (800b8f0 <pvPortMalloc+0x188>)
 800b884:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b886:	4b1a      	ldr	r3, [pc, #104]	; (800b8f0 <pvPortMalloc+0x188>)
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	4b1b      	ldr	r3, [pc, #108]	; (800b8f8 <pvPortMalloc+0x190>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d203      	bcs.n	800b89a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b892:	4b17      	ldr	r3, [pc, #92]	; (800b8f0 <pvPortMalloc+0x188>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a18      	ldr	r2, [pc, #96]	; (800b8f8 <pvPortMalloc+0x190>)
 800b898:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89c:	685a      	ldr	r2, [r3, #4]
 800b89e:	4b13      	ldr	r3, [pc, #76]	; (800b8ec <pvPortMalloc+0x184>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	431a      	orrs	r2, r3
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b8ae:	4b13      	ldr	r3, [pc, #76]	; (800b8fc <pvPortMalloc+0x194>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	4a11      	ldr	r2, [pc, #68]	; (800b8fc <pvPortMalloc+0x194>)
 800b8b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8b8:	f7fe fd06 	bl	800a2c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	f003 0307 	and.w	r3, r3, #7
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00a      	beq.n	800b8dc <pvPortMalloc+0x174>
	__asm volatile
 800b8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ca:	f383 8811 	msr	BASEPRI, r3
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	60fb      	str	r3, [r7, #12]
}
 800b8d8:	bf00      	nop
 800b8da:	e7fe      	b.n	800b8da <pvPortMalloc+0x172>
	return pvReturn;
 800b8dc:	69fb      	ldr	r3, [r7, #28]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3728      	adds	r7, #40	; 0x28
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	20005238 	.word	0x20005238
 800b8ec:	2000524c 	.word	0x2000524c
 800b8f0:	2000523c 	.word	0x2000523c
 800b8f4:	20005230 	.word	0x20005230
 800b8f8:	20005240 	.word	0x20005240
 800b8fc:	20005244 	.word	0x20005244

0800b900 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d04d      	beq.n	800b9ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b912:	2308      	movs	r3, #8
 800b914:	425b      	negs	r3, r3
 800b916:	697a      	ldr	r2, [r7, #20]
 800b918:	4413      	add	r3, r2
 800b91a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	685a      	ldr	r2, [r3, #4]
 800b924:	4b24      	ldr	r3, [pc, #144]	; (800b9b8 <vPortFree+0xb8>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4013      	ands	r3, r2
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d10a      	bne.n	800b944 <vPortFree+0x44>
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	60fb      	str	r3, [r7, #12]
}
 800b940:	bf00      	nop
 800b942:	e7fe      	b.n	800b942 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00a      	beq.n	800b962 <vPortFree+0x62>
	__asm volatile
 800b94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b950:	f383 8811 	msr	BASEPRI, r3
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	60bb      	str	r3, [r7, #8]
}
 800b95e:	bf00      	nop
 800b960:	e7fe      	b.n	800b960 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	4b14      	ldr	r3, [pc, #80]	; (800b9b8 <vPortFree+0xb8>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4013      	ands	r3, r2
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d01e      	beq.n	800b9ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d11a      	bne.n	800b9ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	685a      	ldr	r2, [r3, #4]
 800b97c:	4b0e      	ldr	r3, [pc, #56]	; (800b9b8 <vPortFree+0xb8>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	43db      	mvns	r3, r3
 800b982:	401a      	ands	r2, r3
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b988:	f7fe fc90 	bl	800a2ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	685a      	ldr	r2, [r3, #4]
 800b990:	4b0a      	ldr	r3, [pc, #40]	; (800b9bc <vPortFree+0xbc>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4413      	add	r3, r2
 800b996:	4a09      	ldr	r2, [pc, #36]	; (800b9bc <vPortFree+0xbc>)
 800b998:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b99a:	6938      	ldr	r0, [r7, #16]
 800b99c:	f000 f874 	bl	800ba88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b9a0:	4b07      	ldr	r3, [pc, #28]	; (800b9c0 <vPortFree+0xc0>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	4a06      	ldr	r2, [pc, #24]	; (800b9c0 <vPortFree+0xc0>)
 800b9a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b9aa:	f7fe fc8d 	bl	800a2c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9ae:	bf00      	nop
 800b9b0:	3718      	adds	r7, #24
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	2000524c 	.word	0x2000524c
 800b9bc:	2000523c 	.word	0x2000523c
 800b9c0:	20005248 	.word	0x20005248

0800b9c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b9ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9d0:	4b27      	ldr	r3, [pc, #156]	; (800ba70 <prvHeapInit+0xac>)
 800b9d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f003 0307 	and.w	r3, r3, #7
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00c      	beq.n	800b9f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3307      	adds	r3, #7
 800b9e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f023 0307 	bic.w	r3, r3, #7
 800b9ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	4a1f      	ldr	r2, [pc, #124]	; (800ba70 <prvHeapInit+0xac>)
 800b9f4:	4413      	add	r3, r2
 800b9f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9fc:	4a1d      	ldr	r2, [pc, #116]	; (800ba74 <prvHeapInit+0xb0>)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba02:	4b1c      	ldr	r3, [pc, #112]	; (800ba74 <prvHeapInit+0xb0>)
 800ba04:	2200      	movs	r2, #0
 800ba06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba10:	2208      	movs	r2, #8
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	1a9b      	subs	r3, r3, r2
 800ba16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f023 0307 	bic.w	r3, r3, #7
 800ba1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	4a15      	ldr	r2, [pc, #84]	; (800ba78 <prvHeapInit+0xb4>)
 800ba24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba26:	4b14      	ldr	r3, [pc, #80]	; (800ba78 <prvHeapInit+0xb4>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba2e:	4b12      	ldr	r3, [pc, #72]	; (800ba78 <prvHeapInit+0xb4>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2200      	movs	r2, #0
 800ba34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	1ad2      	subs	r2, r2, r3
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba44:	4b0c      	ldr	r3, [pc, #48]	; (800ba78 <prvHeapInit+0xb4>)
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	4a0a      	ldr	r2, [pc, #40]	; (800ba7c <prvHeapInit+0xb8>)
 800ba52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	4a09      	ldr	r2, [pc, #36]	; (800ba80 <prvHeapInit+0xbc>)
 800ba5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba5c:	4b09      	ldr	r3, [pc, #36]	; (800ba84 <prvHeapInit+0xc0>)
 800ba5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba62:	601a      	str	r2, [r3, #0]
}
 800ba64:	bf00      	nop
 800ba66:	3714      	adds	r7, #20
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	20001630 	.word	0x20001630
 800ba74:	20005230 	.word	0x20005230
 800ba78:	20005238 	.word	0x20005238
 800ba7c:	20005240 	.word	0x20005240
 800ba80:	2000523c 	.word	0x2000523c
 800ba84:	2000524c 	.word	0x2000524c

0800ba88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba90:	4b28      	ldr	r3, [pc, #160]	; (800bb34 <prvInsertBlockIntoFreeList+0xac>)
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	e002      	b.n	800ba9c <prvInsertBlockIntoFreeList+0x14>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	60fb      	str	r3, [r7, #12]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d8f7      	bhi.n	800ba96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	4413      	add	r3, r2
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d108      	bne.n	800baca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	441a      	add	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	441a      	add	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	429a      	cmp	r2, r3
 800badc:	d118      	bne.n	800bb10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	4b15      	ldr	r3, [pc, #84]	; (800bb38 <prvInsertBlockIntoFreeList+0xb0>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d00d      	beq.n	800bb06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	685a      	ldr	r2, [r3, #4]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	441a      	add	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	601a      	str	r2, [r3, #0]
 800bb04:	e008      	b.n	800bb18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb06:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <prvInsertBlockIntoFreeList+0xb0>)
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	601a      	str	r2, [r3, #0]
 800bb0e:	e003      	b.n	800bb18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d002      	beq.n	800bb26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb26:	bf00      	nop
 800bb28:	3714      	adds	r7, #20
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	20005230 	.word	0x20005230
 800bb38:	20005238 	.word	0x20005238

0800bb3c <__cvt>:
 800bb3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb40:	ec55 4b10 	vmov	r4, r5, d0
 800bb44:	2d00      	cmp	r5, #0
 800bb46:	460e      	mov	r6, r1
 800bb48:	4619      	mov	r1, r3
 800bb4a:	462b      	mov	r3, r5
 800bb4c:	bfbb      	ittet	lt
 800bb4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bb52:	461d      	movlt	r5, r3
 800bb54:	2300      	movge	r3, #0
 800bb56:	232d      	movlt	r3, #45	; 0x2d
 800bb58:	700b      	strb	r3, [r1, #0]
 800bb5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bb60:	4691      	mov	r9, r2
 800bb62:	f023 0820 	bic.w	r8, r3, #32
 800bb66:	bfbc      	itt	lt
 800bb68:	4622      	movlt	r2, r4
 800bb6a:	4614      	movlt	r4, r2
 800bb6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb70:	d005      	beq.n	800bb7e <__cvt+0x42>
 800bb72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bb76:	d100      	bne.n	800bb7a <__cvt+0x3e>
 800bb78:	3601      	adds	r6, #1
 800bb7a:	2102      	movs	r1, #2
 800bb7c:	e000      	b.n	800bb80 <__cvt+0x44>
 800bb7e:	2103      	movs	r1, #3
 800bb80:	ab03      	add	r3, sp, #12
 800bb82:	9301      	str	r3, [sp, #4]
 800bb84:	ab02      	add	r3, sp, #8
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	ec45 4b10 	vmov	d0, r4, r5
 800bb8c:	4653      	mov	r3, sl
 800bb8e:	4632      	mov	r2, r6
 800bb90:	f000 fdda 	bl	800c748 <_dtoa_r>
 800bb94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bb98:	4607      	mov	r7, r0
 800bb9a:	d102      	bne.n	800bba2 <__cvt+0x66>
 800bb9c:	f019 0f01 	tst.w	r9, #1
 800bba0:	d022      	beq.n	800bbe8 <__cvt+0xac>
 800bba2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bba6:	eb07 0906 	add.w	r9, r7, r6
 800bbaa:	d110      	bne.n	800bbce <__cvt+0x92>
 800bbac:	783b      	ldrb	r3, [r7, #0]
 800bbae:	2b30      	cmp	r3, #48	; 0x30
 800bbb0:	d10a      	bne.n	800bbc8 <__cvt+0x8c>
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	4629      	mov	r1, r5
 800bbba:	f7f4 ff85 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbbe:	b918      	cbnz	r0, 800bbc8 <__cvt+0x8c>
 800bbc0:	f1c6 0601 	rsb	r6, r6, #1
 800bbc4:	f8ca 6000 	str.w	r6, [sl]
 800bbc8:	f8da 3000 	ldr.w	r3, [sl]
 800bbcc:	4499      	add	r9, r3
 800bbce:	2200      	movs	r2, #0
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	f7f4 ff77 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbda:	b108      	cbz	r0, 800bbe0 <__cvt+0xa4>
 800bbdc:	f8cd 900c 	str.w	r9, [sp, #12]
 800bbe0:	2230      	movs	r2, #48	; 0x30
 800bbe2:	9b03      	ldr	r3, [sp, #12]
 800bbe4:	454b      	cmp	r3, r9
 800bbe6:	d307      	bcc.n	800bbf8 <__cvt+0xbc>
 800bbe8:	9b03      	ldr	r3, [sp, #12]
 800bbea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbec:	1bdb      	subs	r3, r3, r7
 800bbee:	4638      	mov	r0, r7
 800bbf0:	6013      	str	r3, [r2, #0]
 800bbf2:	b004      	add	sp, #16
 800bbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbf8:	1c59      	adds	r1, r3, #1
 800bbfa:	9103      	str	r1, [sp, #12]
 800bbfc:	701a      	strb	r2, [r3, #0]
 800bbfe:	e7f0      	b.n	800bbe2 <__cvt+0xa6>

0800bc00 <__exponent>:
 800bc00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc02:	4603      	mov	r3, r0
 800bc04:	2900      	cmp	r1, #0
 800bc06:	bfb8      	it	lt
 800bc08:	4249      	neglt	r1, r1
 800bc0a:	f803 2b02 	strb.w	r2, [r3], #2
 800bc0e:	bfb4      	ite	lt
 800bc10:	222d      	movlt	r2, #45	; 0x2d
 800bc12:	222b      	movge	r2, #43	; 0x2b
 800bc14:	2909      	cmp	r1, #9
 800bc16:	7042      	strb	r2, [r0, #1]
 800bc18:	dd2a      	ble.n	800bc70 <__exponent+0x70>
 800bc1a:	f10d 0207 	add.w	r2, sp, #7
 800bc1e:	4617      	mov	r7, r2
 800bc20:	260a      	movs	r6, #10
 800bc22:	4694      	mov	ip, r2
 800bc24:	fb91 f5f6 	sdiv	r5, r1, r6
 800bc28:	fb06 1415 	mls	r4, r6, r5, r1
 800bc2c:	3430      	adds	r4, #48	; 0x30
 800bc2e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bc32:	460c      	mov	r4, r1
 800bc34:	2c63      	cmp	r4, #99	; 0x63
 800bc36:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	dcf1      	bgt.n	800bc22 <__exponent+0x22>
 800bc3e:	3130      	adds	r1, #48	; 0x30
 800bc40:	f1ac 0402 	sub.w	r4, ip, #2
 800bc44:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bc48:	1c41      	adds	r1, r0, #1
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	42ba      	cmp	r2, r7
 800bc4e:	d30a      	bcc.n	800bc66 <__exponent+0x66>
 800bc50:	f10d 0209 	add.w	r2, sp, #9
 800bc54:	eba2 020c 	sub.w	r2, r2, ip
 800bc58:	42bc      	cmp	r4, r7
 800bc5a:	bf88      	it	hi
 800bc5c:	2200      	movhi	r2, #0
 800bc5e:	4413      	add	r3, r2
 800bc60:	1a18      	subs	r0, r3, r0
 800bc62:	b003      	add	sp, #12
 800bc64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc66:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bc6a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bc6e:	e7ed      	b.n	800bc4c <__exponent+0x4c>
 800bc70:	2330      	movs	r3, #48	; 0x30
 800bc72:	3130      	adds	r1, #48	; 0x30
 800bc74:	7083      	strb	r3, [r0, #2]
 800bc76:	70c1      	strb	r1, [r0, #3]
 800bc78:	1d03      	adds	r3, r0, #4
 800bc7a:	e7f1      	b.n	800bc60 <__exponent+0x60>

0800bc7c <_printf_float>:
 800bc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc80:	ed2d 8b02 	vpush	{d8}
 800bc84:	b08d      	sub	sp, #52	; 0x34
 800bc86:	460c      	mov	r4, r1
 800bc88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc8c:	4616      	mov	r6, r2
 800bc8e:	461f      	mov	r7, r3
 800bc90:	4605      	mov	r5, r0
 800bc92:	f000 fc91 	bl	800c5b8 <_localeconv_r>
 800bc96:	f8d0 a000 	ldr.w	sl, [r0]
 800bc9a:	4650      	mov	r0, sl
 800bc9c:	f7f4 fae8 	bl	8000270 <strlen>
 800bca0:	2300      	movs	r3, #0
 800bca2:	930a      	str	r3, [sp, #40]	; 0x28
 800bca4:	6823      	ldr	r3, [r4, #0]
 800bca6:	9305      	str	r3, [sp, #20]
 800bca8:	f8d8 3000 	ldr.w	r3, [r8]
 800bcac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bcb0:	3307      	adds	r3, #7
 800bcb2:	f023 0307 	bic.w	r3, r3, #7
 800bcb6:	f103 0208 	add.w	r2, r3, #8
 800bcba:	f8c8 2000 	str.w	r2, [r8]
 800bcbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bcc6:	9307      	str	r3, [sp, #28]
 800bcc8:	f8cd 8018 	str.w	r8, [sp, #24]
 800bccc:	ee08 0a10 	vmov	s16, r0
 800bcd0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bcd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcd8:	4b9e      	ldr	r3, [pc, #632]	; (800bf54 <_printf_float+0x2d8>)
 800bcda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcde:	f7f4 ff25 	bl	8000b2c <__aeabi_dcmpun>
 800bce2:	bb88      	cbnz	r0, 800bd48 <_printf_float+0xcc>
 800bce4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bce8:	4b9a      	ldr	r3, [pc, #616]	; (800bf54 <_printf_float+0x2d8>)
 800bcea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcee:	f7f4 feff 	bl	8000af0 <__aeabi_dcmple>
 800bcf2:	bb48      	cbnz	r0, 800bd48 <_printf_float+0xcc>
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	4640      	mov	r0, r8
 800bcfa:	4649      	mov	r1, r9
 800bcfc:	f7f4 feee 	bl	8000adc <__aeabi_dcmplt>
 800bd00:	b110      	cbz	r0, 800bd08 <_printf_float+0x8c>
 800bd02:	232d      	movs	r3, #45	; 0x2d
 800bd04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd08:	4a93      	ldr	r2, [pc, #588]	; (800bf58 <_printf_float+0x2dc>)
 800bd0a:	4b94      	ldr	r3, [pc, #592]	; (800bf5c <_printf_float+0x2e0>)
 800bd0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bd10:	bf94      	ite	ls
 800bd12:	4690      	movls	r8, r2
 800bd14:	4698      	movhi	r8, r3
 800bd16:	2303      	movs	r3, #3
 800bd18:	6123      	str	r3, [r4, #16]
 800bd1a:	9b05      	ldr	r3, [sp, #20]
 800bd1c:	f023 0304 	bic.w	r3, r3, #4
 800bd20:	6023      	str	r3, [r4, #0]
 800bd22:	f04f 0900 	mov.w	r9, #0
 800bd26:	9700      	str	r7, [sp, #0]
 800bd28:	4633      	mov	r3, r6
 800bd2a:	aa0b      	add	r2, sp, #44	; 0x2c
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f000 f9da 	bl	800c0e8 <_printf_common>
 800bd34:	3001      	adds	r0, #1
 800bd36:	f040 8090 	bne.w	800be5a <_printf_float+0x1de>
 800bd3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd3e:	b00d      	add	sp, #52	; 0x34
 800bd40:	ecbd 8b02 	vpop	{d8}
 800bd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd48:	4642      	mov	r2, r8
 800bd4a:	464b      	mov	r3, r9
 800bd4c:	4640      	mov	r0, r8
 800bd4e:	4649      	mov	r1, r9
 800bd50:	f7f4 feec 	bl	8000b2c <__aeabi_dcmpun>
 800bd54:	b140      	cbz	r0, 800bd68 <_printf_float+0xec>
 800bd56:	464b      	mov	r3, r9
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	bfbc      	itt	lt
 800bd5c:	232d      	movlt	r3, #45	; 0x2d
 800bd5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bd62:	4a7f      	ldr	r2, [pc, #508]	; (800bf60 <_printf_float+0x2e4>)
 800bd64:	4b7f      	ldr	r3, [pc, #508]	; (800bf64 <_printf_float+0x2e8>)
 800bd66:	e7d1      	b.n	800bd0c <_printf_float+0x90>
 800bd68:	6863      	ldr	r3, [r4, #4]
 800bd6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bd6e:	9206      	str	r2, [sp, #24]
 800bd70:	1c5a      	adds	r2, r3, #1
 800bd72:	d13f      	bne.n	800bdf4 <_printf_float+0x178>
 800bd74:	2306      	movs	r3, #6
 800bd76:	6063      	str	r3, [r4, #4]
 800bd78:	9b05      	ldr	r3, [sp, #20]
 800bd7a:	6861      	ldr	r1, [r4, #4]
 800bd7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bd80:	2300      	movs	r3, #0
 800bd82:	9303      	str	r3, [sp, #12]
 800bd84:	ab0a      	add	r3, sp, #40	; 0x28
 800bd86:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bd8a:	ab09      	add	r3, sp, #36	; 0x24
 800bd8c:	ec49 8b10 	vmov	d0, r8, r9
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	6022      	str	r2, [r4, #0]
 800bd94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd98:	4628      	mov	r0, r5
 800bd9a:	f7ff fecf 	bl	800bb3c <__cvt>
 800bd9e:	9b06      	ldr	r3, [sp, #24]
 800bda0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bda2:	2b47      	cmp	r3, #71	; 0x47
 800bda4:	4680      	mov	r8, r0
 800bda6:	d108      	bne.n	800bdba <_printf_float+0x13e>
 800bda8:	1cc8      	adds	r0, r1, #3
 800bdaa:	db02      	blt.n	800bdb2 <_printf_float+0x136>
 800bdac:	6863      	ldr	r3, [r4, #4]
 800bdae:	4299      	cmp	r1, r3
 800bdb0:	dd41      	ble.n	800be36 <_printf_float+0x1ba>
 800bdb2:	f1ab 0302 	sub.w	r3, fp, #2
 800bdb6:	fa5f fb83 	uxtb.w	fp, r3
 800bdba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bdbe:	d820      	bhi.n	800be02 <_printf_float+0x186>
 800bdc0:	3901      	subs	r1, #1
 800bdc2:	465a      	mov	r2, fp
 800bdc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bdc8:	9109      	str	r1, [sp, #36]	; 0x24
 800bdca:	f7ff ff19 	bl	800bc00 <__exponent>
 800bdce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdd0:	1813      	adds	r3, r2, r0
 800bdd2:	2a01      	cmp	r2, #1
 800bdd4:	4681      	mov	r9, r0
 800bdd6:	6123      	str	r3, [r4, #16]
 800bdd8:	dc02      	bgt.n	800bde0 <_printf_float+0x164>
 800bdda:	6822      	ldr	r2, [r4, #0]
 800bddc:	07d2      	lsls	r2, r2, #31
 800bdde:	d501      	bpl.n	800bde4 <_printf_float+0x168>
 800bde0:	3301      	adds	r3, #1
 800bde2:	6123      	str	r3, [r4, #16]
 800bde4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d09c      	beq.n	800bd26 <_printf_float+0xaa>
 800bdec:	232d      	movs	r3, #45	; 0x2d
 800bdee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdf2:	e798      	b.n	800bd26 <_printf_float+0xaa>
 800bdf4:	9a06      	ldr	r2, [sp, #24]
 800bdf6:	2a47      	cmp	r2, #71	; 0x47
 800bdf8:	d1be      	bne.n	800bd78 <_printf_float+0xfc>
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d1bc      	bne.n	800bd78 <_printf_float+0xfc>
 800bdfe:	2301      	movs	r3, #1
 800be00:	e7b9      	b.n	800bd76 <_printf_float+0xfa>
 800be02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800be06:	d118      	bne.n	800be3a <_printf_float+0x1be>
 800be08:	2900      	cmp	r1, #0
 800be0a:	6863      	ldr	r3, [r4, #4]
 800be0c:	dd0b      	ble.n	800be26 <_printf_float+0x1aa>
 800be0e:	6121      	str	r1, [r4, #16]
 800be10:	b913      	cbnz	r3, 800be18 <_printf_float+0x19c>
 800be12:	6822      	ldr	r2, [r4, #0]
 800be14:	07d0      	lsls	r0, r2, #31
 800be16:	d502      	bpl.n	800be1e <_printf_float+0x1a2>
 800be18:	3301      	adds	r3, #1
 800be1a:	440b      	add	r3, r1
 800be1c:	6123      	str	r3, [r4, #16]
 800be1e:	65a1      	str	r1, [r4, #88]	; 0x58
 800be20:	f04f 0900 	mov.w	r9, #0
 800be24:	e7de      	b.n	800bde4 <_printf_float+0x168>
 800be26:	b913      	cbnz	r3, 800be2e <_printf_float+0x1b2>
 800be28:	6822      	ldr	r2, [r4, #0]
 800be2a:	07d2      	lsls	r2, r2, #31
 800be2c:	d501      	bpl.n	800be32 <_printf_float+0x1b6>
 800be2e:	3302      	adds	r3, #2
 800be30:	e7f4      	b.n	800be1c <_printf_float+0x1a0>
 800be32:	2301      	movs	r3, #1
 800be34:	e7f2      	b.n	800be1c <_printf_float+0x1a0>
 800be36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800be3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be3c:	4299      	cmp	r1, r3
 800be3e:	db05      	blt.n	800be4c <_printf_float+0x1d0>
 800be40:	6823      	ldr	r3, [r4, #0]
 800be42:	6121      	str	r1, [r4, #16]
 800be44:	07d8      	lsls	r0, r3, #31
 800be46:	d5ea      	bpl.n	800be1e <_printf_float+0x1a2>
 800be48:	1c4b      	adds	r3, r1, #1
 800be4a:	e7e7      	b.n	800be1c <_printf_float+0x1a0>
 800be4c:	2900      	cmp	r1, #0
 800be4e:	bfd4      	ite	le
 800be50:	f1c1 0202 	rsble	r2, r1, #2
 800be54:	2201      	movgt	r2, #1
 800be56:	4413      	add	r3, r2
 800be58:	e7e0      	b.n	800be1c <_printf_float+0x1a0>
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	055a      	lsls	r2, r3, #21
 800be5e:	d407      	bmi.n	800be70 <_printf_float+0x1f4>
 800be60:	6923      	ldr	r3, [r4, #16]
 800be62:	4642      	mov	r2, r8
 800be64:	4631      	mov	r1, r6
 800be66:	4628      	mov	r0, r5
 800be68:	47b8      	blx	r7
 800be6a:	3001      	adds	r0, #1
 800be6c:	d12c      	bne.n	800bec8 <_printf_float+0x24c>
 800be6e:	e764      	b.n	800bd3a <_printf_float+0xbe>
 800be70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be74:	f240 80e0 	bls.w	800c038 <_printf_float+0x3bc>
 800be78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be7c:	2200      	movs	r2, #0
 800be7e:	2300      	movs	r3, #0
 800be80:	f7f4 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 800be84:	2800      	cmp	r0, #0
 800be86:	d034      	beq.n	800bef2 <_printf_float+0x276>
 800be88:	4a37      	ldr	r2, [pc, #220]	; (800bf68 <_printf_float+0x2ec>)
 800be8a:	2301      	movs	r3, #1
 800be8c:	4631      	mov	r1, r6
 800be8e:	4628      	mov	r0, r5
 800be90:	47b8      	blx	r7
 800be92:	3001      	adds	r0, #1
 800be94:	f43f af51 	beq.w	800bd3a <_printf_float+0xbe>
 800be98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be9c:	429a      	cmp	r2, r3
 800be9e:	db02      	blt.n	800bea6 <_printf_float+0x22a>
 800bea0:	6823      	ldr	r3, [r4, #0]
 800bea2:	07d8      	lsls	r0, r3, #31
 800bea4:	d510      	bpl.n	800bec8 <_printf_float+0x24c>
 800bea6:	ee18 3a10 	vmov	r3, s16
 800beaa:	4652      	mov	r2, sl
 800beac:	4631      	mov	r1, r6
 800beae:	4628      	mov	r0, r5
 800beb0:	47b8      	blx	r7
 800beb2:	3001      	adds	r0, #1
 800beb4:	f43f af41 	beq.w	800bd3a <_printf_float+0xbe>
 800beb8:	f04f 0800 	mov.w	r8, #0
 800bebc:	f104 091a 	add.w	r9, r4, #26
 800bec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bec2:	3b01      	subs	r3, #1
 800bec4:	4543      	cmp	r3, r8
 800bec6:	dc09      	bgt.n	800bedc <_printf_float+0x260>
 800bec8:	6823      	ldr	r3, [r4, #0]
 800beca:	079b      	lsls	r3, r3, #30
 800becc:	f100 8107 	bmi.w	800c0de <_printf_float+0x462>
 800bed0:	68e0      	ldr	r0, [r4, #12]
 800bed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bed4:	4298      	cmp	r0, r3
 800bed6:	bfb8      	it	lt
 800bed8:	4618      	movlt	r0, r3
 800beda:	e730      	b.n	800bd3e <_printf_float+0xc2>
 800bedc:	2301      	movs	r3, #1
 800bede:	464a      	mov	r2, r9
 800bee0:	4631      	mov	r1, r6
 800bee2:	4628      	mov	r0, r5
 800bee4:	47b8      	blx	r7
 800bee6:	3001      	adds	r0, #1
 800bee8:	f43f af27 	beq.w	800bd3a <_printf_float+0xbe>
 800beec:	f108 0801 	add.w	r8, r8, #1
 800bef0:	e7e6      	b.n	800bec0 <_printf_float+0x244>
 800bef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	dc39      	bgt.n	800bf6c <_printf_float+0x2f0>
 800bef8:	4a1b      	ldr	r2, [pc, #108]	; (800bf68 <_printf_float+0x2ec>)
 800befa:	2301      	movs	r3, #1
 800befc:	4631      	mov	r1, r6
 800befe:	4628      	mov	r0, r5
 800bf00:	47b8      	blx	r7
 800bf02:	3001      	adds	r0, #1
 800bf04:	f43f af19 	beq.w	800bd3a <_printf_float+0xbe>
 800bf08:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	d102      	bne.n	800bf16 <_printf_float+0x29a>
 800bf10:	6823      	ldr	r3, [r4, #0]
 800bf12:	07d9      	lsls	r1, r3, #31
 800bf14:	d5d8      	bpl.n	800bec8 <_printf_float+0x24c>
 800bf16:	ee18 3a10 	vmov	r3, s16
 800bf1a:	4652      	mov	r2, sl
 800bf1c:	4631      	mov	r1, r6
 800bf1e:	4628      	mov	r0, r5
 800bf20:	47b8      	blx	r7
 800bf22:	3001      	adds	r0, #1
 800bf24:	f43f af09 	beq.w	800bd3a <_printf_float+0xbe>
 800bf28:	f04f 0900 	mov.w	r9, #0
 800bf2c:	f104 0a1a 	add.w	sl, r4, #26
 800bf30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf32:	425b      	negs	r3, r3
 800bf34:	454b      	cmp	r3, r9
 800bf36:	dc01      	bgt.n	800bf3c <_printf_float+0x2c0>
 800bf38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf3a:	e792      	b.n	800be62 <_printf_float+0x1e6>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	4652      	mov	r2, sl
 800bf40:	4631      	mov	r1, r6
 800bf42:	4628      	mov	r0, r5
 800bf44:	47b8      	blx	r7
 800bf46:	3001      	adds	r0, #1
 800bf48:	f43f aef7 	beq.w	800bd3a <_printf_float+0xbe>
 800bf4c:	f109 0901 	add.w	r9, r9, #1
 800bf50:	e7ee      	b.n	800bf30 <_printf_float+0x2b4>
 800bf52:	bf00      	nop
 800bf54:	7fefffff 	.word	0x7fefffff
 800bf58:	08010514 	.word	0x08010514
 800bf5c:	08010518 	.word	0x08010518
 800bf60:	0801051c 	.word	0x0801051c
 800bf64:	08010520 	.word	0x08010520
 800bf68:	08010524 	.word	0x08010524
 800bf6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf70:	429a      	cmp	r2, r3
 800bf72:	bfa8      	it	ge
 800bf74:	461a      	movge	r2, r3
 800bf76:	2a00      	cmp	r2, #0
 800bf78:	4691      	mov	r9, r2
 800bf7a:	dc37      	bgt.n	800bfec <_printf_float+0x370>
 800bf7c:	f04f 0b00 	mov.w	fp, #0
 800bf80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf84:	f104 021a 	add.w	r2, r4, #26
 800bf88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf8a:	9305      	str	r3, [sp, #20]
 800bf8c:	eba3 0309 	sub.w	r3, r3, r9
 800bf90:	455b      	cmp	r3, fp
 800bf92:	dc33      	bgt.n	800bffc <_printf_float+0x380>
 800bf94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	db3b      	blt.n	800c014 <_printf_float+0x398>
 800bf9c:	6823      	ldr	r3, [r4, #0]
 800bf9e:	07da      	lsls	r2, r3, #31
 800bfa0:	d438      	bmi.n	800c014 <_printf_float+0x398>
 800bfa2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bfa6:	eba2 0903 	sub.w	r9, r2, r3
 800bfaa:	9b05      	ldr	r3, [sp, #20]
 800bfac:	1ad2      	subs	r2, r2, r3
 800bfae:	4591      	cmp	r9, r2
 800bfb0:	bfa8      	it	ge
 800bfb2:	4691      	movge	r9, r2
 800bfb4:	f1b9 0f00 	cmp.w	r9, #0
 800bfb8:	dc35      	bgt.n	800c026 <_printf_float+0x3aa>
 800bfba:	f04f 0800 	mov.w	r8, #0
 800bfbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfc2:	f104 0a1a 	add.w	sl, r4, #26
 800bfc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfca:	1a9b      	subs	r3, r3, r2
 800bfcc:	eba3 0309 	sub.w	r3, r3, r9
 800bfd0:	4543      	cmp	r3, r8
 800bfd2:	f77f af79 	ble.w	800bec8 <_printf_float+0x24c>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	4652      	mov	r2, sl
 800bfda:	4631      	mov	r1, r6
 800bfdc:	4628      	mov	r0, r5
 800bfde:	47b8      	blx	r7
 800bfe0:	3001      	adds	r0, #1
 800bfe2:	f43f aeaa 	beq.w	800bd3a <_printf_float+0xbe>
 800bfe6:	f108 0801 	add.w	r8, r8, #1
 800bfea:	e7ec      	b.n	800bfc6 <_printf_float+0x34a>
 800bfec:	4613      	mov	r3, r2
 800bfee:	4631      	mov	r1, r6
 800bff0:	4642      	mov	r2, r8
 800bff2:	4628      	mov	r0, r5
 800bff4:	47b8      	blx	r7
 800bff6:	3001      	adds	r0, #1
 800bff8:	d1c0      	bne.n	800bf7c <_printf_float+0x300>
 800bffa:	e69e      	b.n	800bd3a <_printf_float+0xbe>
 800bffc:	2301      	movs	r3, #1
 800bffe:	4631      	mov	r1, r6
 800c000:	4628      	mov	r0, r5
 800c002:	9205      	str	r2, [sp, #20]
 800c004:	47b8      	blx	r7
 800c006:	3001      	adds	r0, #1
 800c008:	f43f ae97 	beq.w	800bd3a <_printf_float+0xbe>
 800c00c:	9a05      	ldr	r2, [sp, #20]
 800c00e:	f10b 0b01 	add.w	fp, fp, #1
 800c012:	e7b9      	b.n	800bf88 <_printf_float+0x30c>
 800c014:	ee18 3a10 	vmov	r3, s16
 800c018:	4652      	mov	r2, sl
 800c01a:	4631      	mov	r1, r6
 800c01c:	4628      	mov	r0, r5
 800c01e:	47b8      	blx	r7
 800c020:	3001      	adds	r0, #1
 800c022:	d1be      	bne.n	800bfa2 <_printf_float+0x326>
 800c024:	e689      	b.n	800bd3a <_printf_float+0xbe>
 800c026:	9a05      	ldr	r2, [sp, #20]
 800c028:	464b      	mov	r3, r9
 800c02a:	4442      	add	r2, r8
 800c02c:	4631      	mov	r1, r6
 800c02e:	4628      	mov	r0, r5
 800c030:	47b8      	blx	r7
 800c032:	3001      	adds	r0, #1
 800c034:	d1c1      	bne.n	800bfba <_printf_float+0x33e>
 800c036:	e680      	b.n	800bd3a <_printf_float+0xbe>
 800c038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c03a:	2a01      	cmp	r2, #1
 800c03c:	dc01      	bgt.n	800c042 <_printf_float+0x3c6>
 800c03e:	07db      	lsls	r3, r3, #31
 800c040:	d53a      	bpl.n	800c0b8 <_printf_float+0x43c>
 800c042:	2301      	movs	r3, #1
 800c044:	4642      	mov	r2, r8
 800c046:	4631      	mov	r1, r6
 800c048:	4628      	mov	r0, r5
 800c04a:	47b8      	blx	r7
 800c04c:	3001      	adds	r0, #1
 800c04e:	f43f ae74 	beq.w	800bd3a <_printf_float+0xbe>
 800c052:	ee18 3a10 	vmov	r3, s16
 800c056:	4652      	mov	r2, sl
 800c058:	4631      	mov	r1, r6
 800c05a:	4628      	mov	r0, r5
 800c05c:	47b8      	blx	r7
 800c05e:	3001      	adds	r0, #1
 800c060:	f43f ae6b 	beq.w	800bd3a <_printf_float+0xbe>
 800c064:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c068:	2200      	movs	r2, #0
 800c06a:	2300      	movs	r3, #0
 800c06c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c070:	f7f4 fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c074:	b9d8      	cbnz	r0, 800c0ae <_printf_float+0x432>
 800c076:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c07a:	f108 0201 	add.w	r2, r8, #1
 800c07e:	4631      	mov	r1, r6
 800c080:	4628      	mov	r0, r5
 800c082:	47b8      	blx	r7
 800c084:	3001      	adds	r0, #1
 800c086:	d10e      	bne.n	800c0a6 <_printf_float+0x42a>
 800c088:	e657      	b.n	800bd3a <_printf_float+0xbe>
 800c08a:	2301      	movs	r3, #1
 800c08c:	4652      	mov	r2, sl
 800c08e:	4631      	mov	r1, r6
 800c090:	4628      	mov	r0, r5
 800c092:	47b8      	blx	r7
 800c094:	3001      	adds	r0, #1
 800c096:	f43f ae50 	beq.w	800bd3a <_printf_float+0xbe>
 800c09a:	f108 0801 	add.w	r8, r8, #1
 800c09e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	4543      	cmp	r3, r8
 800c0a4:	dcf1      	bgt.n	800c08a <_printf_float+0x40e>
 800c0a6:	464b      	mov	r3, r9
 800c0a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c0ac:	e6da      	b.n	800be64 <_printf_float+0x1e8>
 800c0ae:	f04f 0800 	mov.w	r8, #0
 800c0b2:	f104 0a1a 	add.w	sl, r4, #26
 800c0b6:	e7f2      	b.n	800c09e <_printf_float+0x422>
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	4642      	mov	r2, r8
 800c0bc:	e7df      	b.n	800c07e <_printf_float+0x402>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	464a      	mov	r2, r9
 800c0c2:	4631      	mov	r1, r6
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	47b8      	blx	r7
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	f43f ae36 	beq.w	800bd3a <_printf_float+0xbe>
 800c0ce:	f108 0801 	add.w	r8, r8, #1
 800c0d2:	68e3      	ldr	r3, [r4, #12]
 800c0d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c0d6:	1a5b      	subs	r3, r3, r1
 800c0d8:	4543      	cmp	r3, r8
 800c0da:	dcf0      	bgt.n	800c0be <_printf_float+0x442>
 800c0dc:	e6f8      	b.n	800bed0 <_printf_float+0x254>
 800c0de:	f04f 0800 	mov.w	r8, #0
 800c0e2:	f104 0919 	add.w	r9, r4, #25
 800c0e6:	e7f4      	b.n	800c0d2 <_printf_float+0x456>

0800c0e8 <_printf_common>:
 800c0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0ec:	4616      	mov	r6, r2
 800c0ee:	4699      	mov	r9, r3
 800c0f0:	688a      	ldr	r2, [r1, #8]
 800c0f2:	690b      	ldr	r3, [r1, #16]
 800c0f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	bfb8      	it	lt
 800c0fc:	4613      	movlt	r3, r2
 800c0fe:	6033      	str	r3, [r6, #0]
 800c100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c104:	4607      	mov	r7, r0
 800c106:	460c      	mov	r4, r1
 800c108:	b10a      	cbz	r2, 800c10e <_printf_common+0x26>
 800c10a:	3301      	adds	r3, #1
 800c10c:	6033      	str	r3, [r6, #0]
 800c10e:	6823      	ldr	r3, [r4, #0]
 800c110:	0699      	lsls	r1, r3, #26
 800c112:	bf42      	ittt	mi
 800c114:	6833      	ldrmi	r3, [r6, #0]
 800c116:	3302      	addmi	r3, #2
 800c118:	6033      	strmi	r3, [r6, #0]
 800c11a:	6825      	ldr	r5, [r4, #0]
 800c11c:	f015 0506 	ands.w	r5, r5, #6
 800c120:	d106      	bne.n	800c130 <_printf_common+0x48>
 800c122:	f104 0a19 	add.w	sl, r4, #25
 800c126:	68e3      	ldr	r3, [r4, #12]
 800c128:	6832      	ldr	r2, [r6, #0]
 800c12a:	1a9b      	subs	r3, r3, r2
 800c12c:	42ab      	cmp	r3, r5
 800c12e:	dc26      	bgt.n	800c17e <_printf_common+0x96>
 800c130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c134:	1e13      	subs	r3, r2, #0
 800c136:	6822      	ldr	r2, [r4, #0]
 800c138:	bf18      	it	ne
 800c13a:	2301      	movne	r3, #1
 800c13c:	0692      	lsls	r2, r2, #26
 800c13e:	d42b      	bmi.n	800c198 <_printf_common+0xb0>
 800c140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c144:	4649      	mov	r1, r9
 800c146:	4638      	mov	r0, r7
 800c148:	47c0      	blx	r8
 800c14a:	3001      	adds	r0, #1
 800c14c:	d01e      	beq.n	800c18c <_printf_common+0xa4>
 800c14e:	6823      	ldr	r3, [r4, #0]
 800c150:	6922      	ldr	r2, [r4, #16]
 800c152:	f003 0306 	and.w	r3, r3, #6
 800c156:	2b04      	cmp	r3, #4
 800c158:	bf02      	ittt	eq
 800c15a:	68e5      	ldreq	r5, [r4, #12]
 800c15c:	6833      	ldreq	r3, [r6, #0]
 800c15e:	1aed      	subeq	r5, r5, r3
 800c160:	68a3      	ldr	r3, [r4, #8]
 800c162:	bf0c      	ite	eq
 800c164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c168:	2500      	movne	r5, #0
 800c16a:	4293      	cmp	r3, r2
 800c16c:	bfc4      	itt	gt
 800c16e:	1a9b      	subgt	r3, r3, r2
 800c170:	18ed      	addgt	r5, r5, r3
 800c172:	2600      	movs	r6, #0
 800c174:	341a      	adds	r4, #26
 800c176:	42b5      	cmp	r5, r6
 800c178:	d11a      	bne.n	800c1b0 <_printf_common+0xc8>
 800c17a:	2000      	movs	r0, #0
 800c17c:	e008      	b.n	800c190 <_printf_common+0xa8>
 800c17e:	2301      	movs	r3, #1
 800c180:	4652      	mov	r2, sl
 800c182:	4649      	mov	r1, r9
 800c184:	4638      	mov	r0, r7
 800c186:	47c0      	blx	r8
 800c188:	3001      	adds	r0, #1
 800c18a:	d103      	bne.n	800c194 <_printf_common+0xac>
 800c18c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c194:	3501      	adds	r5, #1
 800c196:	e7c6      	b.n	800c126 <_printf_common+0x3e>
 800c198:	18e1      	adds	r1, r4, r3
 800c19a:	1c5a      	adds	r2, r3, #1
 800c19c:	2030      	movs	r0, #48	; 0x30
 800c19e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1a2:	4422      	add	r2, r4
 800c1a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1ac:	3302      	adds	r3, #2
 800c1ae:	e7c7      	b.n	800c140 <_printf_common+0x58>
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	4622      	mov	r2, r4
 800c1b4:	4649      	mov	r1, r9
 800c1b6:	4638      	mov	r0, r7
 800c1b8:	47c0      	blx	r8
 800c1ba:	3001      	adds	r0, #1
 800c1bc:	d0e6      	beq.n	800c18c <_printf_common+0xa4>
 800c1be:	3601      	adds	r6, #1
 800c1c0:	e7d9      	b.n	800c176 <_printf_common+0x8e>
	...

0800c1c4 <_printf_i>:
 800c1c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c8:	7e0f      	ldrb	r7, [r1, #24]
 800c1ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c1cc:	2f78      	cmp	r7, #120	; 0x78
 800c1ce:	4691      	mov	r9, r2
 800c1d0:	4680      	mov	r8, r0
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	469a      	mov	sl, r3
 800c1d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c1da:	d807      	bhi.n	800c1ec <_printf_i+0x28>
 800c1dc:	2f62      	cmp	r7, #98	; 0x62
 800c1de:	d80a      	bhi.n	800c1f6 <_printf_i+0x32>
 800c1e0:	2f00      	cmp	r7, #0
 800c1e2:	f000 80d4 	beq.w	800c38e <_printf_i+0x1ca>
 800c1e6:	2f58      	cmp	r7, #88	; 0x58
 800c1e8:	f000 80c0 	beq.w	800c36c <_printf_i+0x1a8>
 800c1ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1f4:	e03a      	b.n	800c26c <_printf_i+0xa8>
 800c1f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1fa:	2b15      	cmp	r3, #21
 800c1fc:	d8f6      	bhi.n	800c1ec <_printf_i+0x28>
 800c1fe:	a101      	add	r1, pc, #4	; (adr r1, 800c204 <_printf_i+0x40>)
 800c200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c204:	0800c25d 	.word	0x0800c25d
 800c208:	0800c271 	.word	0x0800c271
 800c20c:	0800c1ed 	.word	0x0800c1ed
 800c210:	0800c1ed 	.word	0x0800c1ed
 800c214:	0800c1ed 	.word	0x0800c1ed
 800c218:	0800c1ed 	.word	0x0800c1ed
 800c21c:	0800c271 	.word	0x0800c271
 800c220:	0800c1ed 	.word	0x0800c1ed
 800c224:	0800c1ed 	.word	0x0800c1ed
 800c228:	0800c1ed 	.word	0x0800c1ed
 800c22c:	0800c1ed 	.word	0x0800c1ed
 800c230:	0800c375 	.word	0x0800c375
 800c234:	0800c29d 	.word	0x0800c29d
 800c238:	0800c32f 	.word	0x0800c32f
 800c23c:	0800c1ed 	.word	0x0800c1ed
 800c240:	0800c1ed 	.word	0x0800c1ed
 800c244:	0800c397 	.word	0x0800c397
 800c248:	0800c1ed 	.word	0x0800c1ed
 800c24c:	0800c29d 	.word	0x0800c29d
 800c250:	0800c1ed 	.word	0x0800c1ed
 800c254:	0800c1ed 	.word	0x0800c1ed
 800c258:	0800c337 	.word	0x0800c337
 800c25c:	682b      	ldr	r3, [r5, #0]
 800c25e:	1d1a      	adds	r2, r3, #4
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	602a      	str	r2, [r5, #0]
 800c264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c26c:	2301      	movs	r3, #1
 800c26e:	e09f      	b.n	800c3b0 <_printf_i+0x1ec>
 800c270:	6820      	ldr	r0, [r4, #0]
 800c272:	682b      	ldr	r3, [r5, #0]
 800c274:	0607      	lsls	r7, r0, #24
 800c276:	f103 0104 	add.w	r1, r3, #4
 800c27a:	6029      	str	r1, [r5, #0]
 800c27c:	d501      	bpl.n	800c282 <_printf_i+0xbe>
 800c27e:	681e      	ldr	r6, [r3, #0]
 800c280:	e003      	b.n	800c28a <_printf_i+0xc6>
 800c282:	0646      	lsls	r6, r0, #25
 800c284:	d5fb      	bpl.n	800c27e <_printf_i+0xba>
 800c286:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c28a:	2e00      	cmp	r6, #0
 800c28c:	da03      	bge.n	800c296 <_printf_i+0xd2>
 800c28e:	232d      	movs	r3, #45	; 0x2d
 800c290:	4276      	negs	r6, r6
 800c292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c296:	485a      	ldr	r0, [pc, #360]	; (800c400 <_printf_i+0x23c>)
 800c298:	230a      	movs	r3, #10
 800c29a:	e012      	b.n	800c2c2 <_printf_i+0xfe>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	6820      	ldr	r0, [r4, #0]
 800c2a0:	1d19      	adds	r1, r3, #4
 800c2a2:	6029      	str	r1, [r5, #0]
 800c2a4:	0605      	lsls	r5, r0, #24
 800c2a6:	d501      	bpl.n	800c2ac <_printf_i+0xe8>
 800c2a8:	681e      	ldr	r6, [r3, #0]
 800c2aa:	e002      	b.n	800c2b2 <_printf_i+0xee>
 800c2ac:	0641      	lsls	r1, r0, #25
 800c2ae:	d5fb      	bpl.n	800c2a8 <_printf_i+0xe4>
 800c2b0:	881e      	ldrh	r6, [r3, #0]
 800c2b2:	4853      	ldr	r0, [pc, #332]	; (800c400 <_printf_i+0x23c>)
 800c2b4:	2f6f      	cmp	r7, #111	; 0x6f
 800c2b6:	bf0c      	ite	eq
 800c2b8:	2308      	moveq	r3, #8
 800c2ba:	230a      	movne	r3, #10
 800c2bc:	2100      	movs	r1, #0
 800c2be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2c2:	6865      	ldr	r5, [r4, #4]
 800c2c4:	60a5      	str	r5, [r4, #8]
 800c2c6:	2d00      	cmp	r5, #0
 800c2c8:	bfa2      	ittt	ge
 800c2ca:	6821      	ldrge	r1, [r4, #0]
 800c2cc:	f021 0104 	bicge.w	r1, r1, #4
 800c2d0:	6021      	strge	r1, [r4, #0]
 800c2d2:	b90e      	cbnz	r6, 800c2d8 <_printf_i+0x114>
 800c2d4:	2d00      	cmp	r5, #0
 800c2d6:	d04b      	beq.n	800c370 <_printf_i+0x1ac>
 800c2d8:	4615      	mov	r5, r2
 800c2da:	fbb6 f1f3 	udiv	r1, r6, r3
 800c2de:	fb03 6711 	mls	r7, r3, r1, r6
 800c2e2:	5dc7      	ldrb	r7, [r0, r7]
 800c2e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c2e8:	4637      	mov	r7, r6
 800c2ea:	42bb      	cmp	r3, r7
 800c2ec:	460e      	mov	r6, r1
 800c2ee:	d9f4      	bls.n	800c2da <_printf_i+0x116>
 800c2f0:	2b08      	cmp	r3, #8
 800c2f2:	d10b      	bne.n	800c30c <_printf_i+0x148>
 800c2f4:	6823      	ldr	r3, [r4, #0]
 800c2f6:	07de      	lsls	r6, r3, #31
 800c2f8:	d508      	bpl.n	800c30c <_printf_i+0x148>
 800c2fa:	6923      	ldr	r3, [r4, #16]
 800c2fc:	6861      	ldr	r1, [r4, #4]
 800c2fe:	4299      	cmp	r1, r3
 800c300:	bfde      	ittt	le
 800c302:	2330      	movle	r3, #48	; 0x30
 800c304:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c308:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c30c:	1b52      	subs	r2, r2, r5
 800c30e:	6122      	str	r2, [r4, #16]
 800c310:	f8cd a000 	str.w	sl, [sp]
 800c314:	464b      	mov	r3, r9
 800c316:	aa03      	add	r2, sp, #12
 800c318:	4621      	mov	r1, r4
 800c31a:	4640      	mov	r0, r8
 800c31c:	f7ff fee4 	bl	800c0e8 <_printf_common>
 800c320:	3001      	adds	r0, #1
 800c322:	d14a      	bne.n	800c3ba <_printf_i+0x1f6>
 800c324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c328:	b004      	add	sp, #16
 800c32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	f043 0320 	orr.w	r3, r3, #32
 800c334:	6023      	str	r3, [r4, #0]
 800c336:	4833      	ldr	r0, [pc, #204]	; (800c404 <_printf_i+0x240>)
 800c338:	2778      	movs	r7, #120	; 0x78
 800c33a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	6829      	ldr	r1, [r5, #0]
 800c342:	061f      	lsls	r7, r3, #24
 800c344:	f851 6b04 	ldr.w	r6, [r1], #4
 800c348:	d402      	bmi.n	800c350 <_printf_i+0x18c>
 800c34a:	065f      	lsls	r7, r3, #25
 800c34c:	bf48      	it	mi
 800c34e:	b2b6      	uxthmi	r6, r6
 800c350:	07df      	lsls	r7, r3, #31
 800c352:	bf48      	it	mi
 800c354:	f043 0320 	orrmi.w	r3, r3, #32
 800c358:	6029      	str	r1, [r5, #0]
 800c35a:	bf48      	it	mi
 800c35c:	6023      	strmi	r3, [r4, #0]
 800c35e:	b91e      	cbnz	r6, 800c368 <_printf_i+0x1a4>
 800c360:	6823      	ldr	r3, [r4, #0]
 800c362:	f023 0320 	bic.w	r3, r3, #32
 800c366:	6023      	str	r3, [r4, #0]
 800c368:	2310      	movs	r3, #16
 800c36a:	e7a7      	b.n	800c2bc <_printf_i+0xf8>
 800c36c:	4824      	ldr	r0, [pc, #144]	; (800c400 <_printf_i+0x23c>)
 800c36e:	e7e4      	b.n	800c33a <_printf_i+0x176>
 800c370:	4615      	mov	r5, r2
 800c372:	e7bd      	b.n	800c2f0 <_printf_i+0x12c>
 800c374:	682b      	ldr	r3, [r5, #0]
 800c376:	6826      	ldr	r6, [r4, #0]
 800c378:	6961      	ldr	r1, [r4, #20]
 800c37a:	1d18      	adds	r0, r3, #4
 800c37c:	6028      	str	r0, [r5, #0]
 800c37e:	0635      	lsls	r5, r6, #24
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	d501      	bpl.n	800c388 <_printf_i+0x1c4>
 800c384:	6019      	str	r1, [r3, #0]
 800c386:	e002      	b.n	800c38e <_printf_i+0x1ca>
 800c388:	0670      	lsls	r0, r6, #25
 800c38a:	d5fb      	bpl.n	800c384 <_printf_i+0x1c0>
 800c38c:	8019      	strh	r1, [r3, #0]
 800c38e:	2300      	movs	r3, #0
 800c390:	6123      	str	r3, [r4, #16]
 800c392:	4615      	mov	r5, r2
 800c394:	e7bc      	b.n	800c310 <_printf_i+0x14c>
 800c396:	682b      	ldr	r3, [r5, #0]
 800c398:	1d1a      	adds	r2, r3, #4
 800c39a:	602a      	str	r2, [r5, #0]
 800c39c:	681d      	ldr	r5, [r3, #0]
 800c39e:	6862      	ldr	r2, [r4, #4]
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f7f3 ff14 	bl	80001d0 <memchr>
 800c3a8:	b108      	cbz	r0, 800c3ae <_printf_i+0x1ea>
 800c3aa:	1b40      	subs	r0, r0, r5
 800c3ac:	6060      	str	r0, [r4, #4]
 800c3ae:	6863      	ldr	r3, [r4, #4]
 800c3b0:	6123      	str	r3, [r4, #16]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3b8:	e7aa      	b.n	800c310 <_printf_i+0x14c>
 800c3ba:	6923      	ldr	r3, [r4, #16]
 800c3bc:	462a      	mov	r2, r5
 800c3be:	4649      	mov	r1, r9
 800c3c0:	4640      	mov	r0, r8
 800c3c2:	47d0      	blx	sl
 800c3c4:	3001      	adds	r0, #1
 800c3c6:	d0ad      	beq.n	800c324 <_printf_i+0x160>
 800c3c8:	6823      	ldr	r3, [r4, #0]
 800c3ca:	079b      	lsls	r3, r3, #30
 800c3cc:	d413      	bmi.n	800c3f6 <_printf_i+0x232>
 800c3ce:	68e0      	ldr	r0, [r4, #12]
 800c3d0:	9b03      	ldr	r3, [sp, #12]
 800c3d2:	4298      	cmp	r0, r3
 800c3d4:	bfb8      	it	lt
 800c3d6:	4618      	movlt	r0, r3
 800c3d8:	e7a6      	b.n	800c328 <_printf_i+0x164>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	4632      	mov	r2, r6
 800c3de:	4649      	mov	r1, r9
 800c3e0:	4640      	mov	r0, r8
 800c3e2:	47d0      	blx	sl
 800c3e4:	3001      	adds	r0, #1
 800c3e6:	d09d      	beq.n	800c324 <_printf_i+0x160>
 800c3e8:	3501      	adds	r5, #1
 800c3ea:	68e3      	ldr	r3, [r4, #12]
 800c3ec:	9903      	ldr	r1, [sp, #12]
 800c3ee:	1a5b      	subs	r3, r3, r1
 800c3f0:	42ab      	cmp	r3, r5
 800c3f2:	dcf2      	bgt.n	800c3da <_printf_i+0x216>
 800c3f4:	e7eb      	b.n	800c3ce <_printf_i+0x20a>
 800c3f6:	2500      	movs	r5, #0
 800c3f8:	f104 0619 	add.w	r6, r4, #25
 800c3fc:	e7f5      	b.n	800c3ea <_printf_i+0x226>
 800c3fe:	bf00      	nop
 800c400:	08010526 	.word	0x08010526
 800c404:	08010537 	.word	0x08010537

0800c408 <siprintf>:
 800c408:	b40e      	push	{r1, r2, r3}
 800c40a:	b500      	push	{lr}
 800c40c:	b09c      	sub	sp, #112	; 0x70
 800c40e:	ab1d      	add	r3, sp, #116	; 0x74
 800c410:	9002      	str	r0, [sp, #8]
 800c412:	9006      	str	r0, [sp, #24]
 800c414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c418:	4809      	ldr	r0, [pc, #36]	; (800c440 <siprintf+0x38>)
 800c41a:	9107      	str	r1, [sp, #28]
 800c41c:	9104      	str	r1, [sp, #16]
 800c41e:	4909      	ldr	r1, [pc, #36]	; (800c444 <siprintf+0x3c>)
 800c420:	f853 2b04 	ldr.w	r2, [r3], #4
 800c424:	9105      	str	r1, [sp, #20]
 800c426:	6800      	ldr	r0, [r0, #0]
 800c428:	9301      	str	r3, [sp, #4]
 800c42a:	a902      	add	r1, sp, #8
 800c42c:	f000 ffd8 	bl	800d3e0 <_svfiprintf_r>
 800c430:	9b02      	ldr	r3, [sp, #8]
 800c432:	2200      	movs	r2, #0
 800c434:	701a      	strb	r2, [r3, #0]
 800c436:	b01c      	add	sp, #112	; 0x70
 800c438:	f85d eb04 	ldr.w	lr, [sp], #4
 800c43c:	b003      	add	sp, #12
 800c43e:	4770      	bx	lr
 800c440:	20000070 	.word	0x20000070
 800c444:	ffff0208 	.word	0xffff0208

0800c448 <std>:
 800c448:	2300      	movs	r3, #0
 800c44a:	b510      	push	{r4, lr}
 800c44c:	4604      	mov	r4, r0
 800c44e:	e9c0 3300 	strd	r3, r3, [r0]
 800c452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c456:	6083      	str	r3, [r0, #8]
 800c458:	8181      	strh	r1, [r0, #12]
 800c45a:	6643      	str	r3, [r0, #100]	; 0x64
 800c45c:	81c2      	strh	r2, [r0, #14]
 800c45e:	6183      	str	r3, [r0, #24]
 800c460:	4619      	mov	r1, r3
 800c462:	2208      	movs	r2, #8
 800c464:	305c      	adds	r0, #92	; 0x5c
 800c466:	f000 f89f 	bl	800c5a8 <memset>
 800c46a:	4b05      	ldr	r3, [pc, #20]	; (800c480 <std+0x38>)
 800c46c:	6263      	str	r3, [r4, #36]	; 0x24
 800c46e:	4b05      	ldr	r3, [pc, #20]	; (800c484 <std+0x3c>)
 800c470:	62a3      	str	r3, [r4, #40]	; 0x28
 800c472:	4b05      	ldr	r3, [pc, #20]	; (800c488 <std+0x40>)
 800c474:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c476:	4b05      	ldr	r3, [pc, #20]	; (800c48c <std+0x44>)
 800c478:	6224      	str	r4, [r4, #32]
 800c47a:	6323      	str	r3, [r4, #48]	; 0x30
 800c47c:	bd10      	pop	{r4, pc}
 800c47e:	bf00      	nop
 800c480:	0800df99 	.word	0x0800df99
 800c484:	0800dfbb 	.word	0x0800dfbb
 800c488:	0800dff3 	.word	0x0800dff3
 800c48c:	0800e017 	.word	0x0800e017

0800c490 <stdio_exit_handler>:
 800c490:	4a02      	ldr	r2, [pc, #8]	; (800c49c <stdio_exit_handler+0xc>)
 800c492:	4903      	ldr	r1, [pc, #12]	; (800c4a0 <stdio_exit_handler+0x10>)
 800c494:	4803      	ldr	r0, [pc, #12]	; (800c4a4 <stdio_exit_handler+0x14>)
 800c496:	f000 b869 	b.w	800c56c <_fwalk_sglue>
 800c49a:	bf00      	nop
 800c49c:	20000018 	.word	0x20000018
 800c4a0:	0800d839 	.word	0x0800d839
 800c4a4:	20000024 	.word	0x20000024

0800c4a8 <cleanup_stdio>:
 800c4a8:	6841      	ldr	r1, [r0, #4]
 800c4aa:	4b0c      	ldr	r3, [pc, #48]	; (800c4dc <cleanup_stdio+0x34>)
 800c4ac:	4299      	cmp	r1, r3
 800c4ae:	b510      	push	{r4, lr}
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	d001      	beq.n	800c4b8 <cleanup_stdio+0x10>
 800c4b4:	f001 f9c0 	bl	800d838 <_fflush_r>
 800c4b8:	68a1      	ldr	r1, [r4, #8]
 800c4ba:	4b09      	ldr	r3, [pc, #36]	; (800c4e0 <cleanup_stdio+0x38>)
 800c4bc:	4299      	cmp	r1, r3
 800c4be:	d002      	beq.n	800c4c6 <cleanup_stdio+0x1e>
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f001 f9b9 	bl	800d838 <_fflush_r>
 800c4c6:	68e1      	ldr	r1, [r4, #12]
 800c4c8:	4b06      	ldr	r3, [pc, #24]	; (800c4e4 <cleanup_stdio+0x3c>)
 800c4ca:	4299      	cmp	r1, r3
 800c4cc:	d004      	beq.n	800c4d8 <cleanup_stdio+0x30>
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4d4:	f001 b9b0 	b.w	800d838 <_fflush_r>
 800c4d8:	bd10      	pop	{r4, pc}
 800c4da:	bf00      	nop
 800c4dc:	20005250 	.word	0x20005250
 800c4e0:	200052b8 	.word	0x200052b8
 800c4e4:	20005320 	.word	0x20005320

0800c4e8 <global_stdio_init.part.0>:
 800c4e8:	b510      	push	{r4, lr}
 800c4ea:	4b0b      	ldr	r3, [pc, #44]	; (800c518 <global_stdio_init.part.0+0x30>)
 800c4ec:	4c0b      	ldr	r4, [pc, #44]	; (800c51c <global_stdio_init.part.0+0x34>)
 800c4ee:	4a0c      	ldr	r2, [pc, #48]	; (800c520 <global_stdio_init.part.0+0x38>)
 800c4f0:	601a      	str	r2, [r3, #0]
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	2104      	movs	r1, #4
 800c4f8:	f7ff ffa6 	bl	800c448 <std>
 800c4fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c500:	2201      	movs	r2, #1
 800c502:	2109      	movs	r1, #9
 800c504:	f7ff ffa0 	bl	800c448 <std>
 800c508:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c50c:	2202      	movs	r2, #2
 800c50e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c512:	2112      	movs	r1, #18
 800c514:	f7ff bf98 	b.w	800c448 <std>
 800c518:	20005388 	.word	0x20005388
 800c51c:	20005250 	.word	0x20005250
 800c520:	0800c491 	.word	0x0800c491

0800c524 <__sfp_lock_acquire>:
 800c524:	4801      	ldr	r0, [pc, #4]	; (800c52c <__sfp_lock_acquire+0x8>)
 800c526:	f000 b875 	b.w	800c614 <__retarget_lock_acquire_recursive>
 800c52a:	bf00      	nop
 800c52c:	2000538d 	.word	0x2000538d

0800c530 <__sfp_lock_release>:
 800c530:	4801      	ldr	r0, [pc, #4]	; (800c538 <__sfp_lock_release+0x8>)
 800c532:	f000 b870 	b.w	800c616 <__retarget_lock_release_recursive>
 800c536:	bf00      	nop
 800c538:	2000538d 	.word	0x2000538d

0800c53c <__sinit>:
 800c53c:	b510      	push	{r4, lr}
 800c53e:	4604      	mov	r4, r0
 800c540:	f7ff fff0 	bl	800c524 <__sfp_lock_acquire>
 800c544:	6a23      	ldr	r3, [r4, #32]
 800c546:	b11b      	cbz	r3, 800c550 <__sinit+0x14>
 800c548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c54c:	f7ff bff0 	b.w	800c530 <__sfp_lock_release>
 800c550:	4b04      	ldr	r3, [pc, #16]	; (800c564 <__sinit+0x28>)
 800c552:	6223      	str	r3, [r4, #32]
 800c554:	4b04      	ldr	r3, [pc, #16]	; (800c568 <__sinit+0x2c>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1f5      	bne.n	800c548 <__sinit+0xc>
 800c55c:	f7ff ffc4 	bl	800c4e8 <global_stdio_init.part.0>
 800c560:	e7f2      	b.n	800c548 <__sinit+0xc>
 800c562:	bf00      	nop
 800c564:	0800c4a9 	.word	0x0800c4a9
 800c568:	20005388 	.word	0x20005388

0800c56c <_fwalk_sglue>:
 800c56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c570:	4607      	mov	r7, r0
 800c572:	4688      	mov	r8, r1
 800c574:	4614      	mov	r4, r2
 800c576:	2600      	movs	r6, #0
 800c578:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c57c:	f1b9 0901 	subs.w	r9, r9, #1
 800c580:	d505      	bpl.n	800c58e <_fwalk_sglue+0x22>
 800c582:	6824      	ldr	r4, [r4, #0]
 800c584:	2c00      	cmp	r4, #0
 800c586:	d1f7      	bne.n	800c578 <_fwalk_sglue+0xc>
 800c588:	4630      	mov	r0, r6
 800c58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c58e:	89ab      	ldrh	r3, [r5, #12]
 800c590:	2b01      	cmp	r3, #1
 800c592:	d907      	bls.n	800c5a4 <_fwalk_sglue+0x38>
 800c594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c598:	3301      	adds	r3, #1
 800c59a:	d003      	beq.n	800c5a4 <_fwalk_sglue+0x38>
 800c59c:	4629      	mov	r1, r5
 800c59e:	4638      	mov	r0, r7
 800c5a0:	47c0      	blx	r8
 800c5a2:	4306      	orrs	r6, r0
 800c5a4:	3568      	adds	r5, #104	; 0x68
 800c5a6:	e7e9      	b.n	800c57c <_fwalk_sglue+0x10>

0800c5a8 <memset>:
 800c5a8:	4402      	add	r2, r0
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d100      	bne.n	800c5b2 <memset+0xa>
 800c5b0:	4770      	bx	lr
 800c5b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c5b6:	e7f9      	b.n	800c5ac <memset+0x4>

0800c5b8 <_localeconv_r>:
 800c5b8:	4800      	ldr	r0, [pc, #0]	; (800c5bc <_localeconv_r+0x4>)
 800c5ba:	4770      	bx	lr
 800c5bc:	20000164 	.word	0x20000164

0800c5c0 <__errno>:
 800c5c0:	4b01      	ldr	r3, [pc, #4]	; (800c5c8 <__errno+0x8>)
 800c5c2:	6818      	ldr	r0, [r3, #0]
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	20000070 	.word	0x20000070

0800c5cc <__libc_init_array>:
 800c5cc:	b570      	push	{r4, r5, r6, lr}
 800c5ce:	4d0d      	ldr	r5, [pc, #52]	; (800c604 <__libc_init_array+0x38>)
 800c5d0:	4c0d      	ldr	r4, [pc, #52]	; (800c608 <__libc_init_array+0x3c>)
 800c5d2:	1b64      	subs	r4, r4, r5
 800c5d4:	10a4      	asrs	r4, r4, #2
 800c5d6:	2600      	movs	r6, #0
 800c5d8:	42a6      	cmp	r6, r4
 800c5da:	d109      	bne.n	800c5f0 <__libc_init_array+0x24>
 800c5dc:	4d0b      	ldr	r5, [pc, #44]	; (800c60c <__libc_init_array+0x40>)
 800c5de:	4c0c      	ldr	r4, [pc, #48]	; (800c610 <__libc_init_array+0x44>)
 800c5e0:	f003 f9b2 	bl	800f948 <_init>
 800c5e4:	1b64      	subs	r4, r4, r5
 800c5e6:	10a4      	asrs	r4, r4, #2
 800c5e8:	2600      	movs	r6, #0
 800c5ea:	42a6      	cmp	r6, r4
 800c5ec:	d105      	bne.n	800c5fa <__libc_init_array+0x2e>
 800c5ee:	bd70      	pop	{r4, r5, r6, pc}
 800c5f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5f4:	4798      	blx	r3
 800c5f6:	3601      	adds	r6, #1
 800c5f8:	e7ee      	b.n	800c5d8 <__libc_init_array+0xc>
 800c5fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5fe:	4798      	blx	r3
 800c600:	3601      	adds	r6, #1
 800c602:	e7f2      	b.n	800c5ea <__libc_init_array+0x1e>
 800c604:	08010a68 	.word	0x08010a68
 800c608:	08010a68 	.word	0x08010a68
 800c60c:	08010a68 	.word	0x08010a68
 800c610:	08010a6c 	.word	0x08010a6c

0800c614 <__retarget_lock_acquire_recursive>:
 800c614:	4770      	bx	lr

0800c616 <__retarget_lock_release_recursive>:
 800c616:	4770      	bx	lr

0800c618 <memcpy>:
 800c618:	440a      	add	r2, r1
 800c61a:	4291      	cmp	r1, r2
 800c61c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c620:	d100      	bne.n	800c624 <memcpy+0xc>
 800c622:	4770      	bx	lr
 800c624:	b510      	push	{r4, lr}
 800c626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c62a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c62e:	4291      	cmp	r1, r2
 800c630:	d1f9      	bne.n	800c626 <memcpy+0xe>
 800c632:	bd10      	pop	{r4, pc}

0800c634 <quorem>:
 800c634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	6903      	ldr	r3, [r0, #16]
 800c63a:	690c      	ldr	r4, [r1, #16]
 800c63c:	42a3      	cmp	r3, r4
 800c63e:	4607      	mov	r7, r0
 800c640:	db7e      	blt.n	800c740 <quorem+0x10c>
 800c642:	3c01      	subs	r4, #1
 800c644:	f101 0814 	add.w	r8, r1, #20
 800c648:	f100 0514 	add.w	r5, r0, #20
 800c64c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c650:	9301      	str	r3, [sp, #4]
 800c652:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c656:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c65a:	3301      	adds	r3, #1
 800c65c:	429a      	cmp	r2, r3
 800c65e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c662:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c666:	fbb2 f6f3 	udiv	r6, r2, r3
 800c66a:	d331      	bcc.n	800c6d0 <quorem+0x9c>
 800c66c:	f04f 0e00 	mov.w	lr, #0
 800c670:	4640      	mov	r0, r8
 800c672:	46ac      	mov	ip, r5
 800c674:	46f2      	mov	sl, lr
 800c676:	f850 2b04 	ldr.w	r2, [r0], #4
 800c67a:	b293      	uxth	r3, r2
 800c67c:	fb06 e303 	mla	r3, r6, r3, lr
 800c680:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c684:	0c1a      	lsrs	r2, r3, #16
 800c686:	b29b      	uxth	r3, r3
 800c688:	ebaa 0303 	sub.w	r3, sl, r3
 800c68c:	f8dc a000 	ldr.w	sl, [ip]
 800c690:	fa13 f38a 	uxtah	r3, r3, sl
 800c694:	fb06 220e 	mla	r2, r6, lr, r2
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	9b00      	ldr	r3, [sp, #0]
 800c69c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c6a0:	b292      	uxth	r2, r2
 800c6a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c6a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6aa:	f8bd 3000 	ldrh.w	r3, [sp]
 800c6ae:	4581      	cmp	r9, r0
 800c6b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6b4:	f84c 3b04 	str.w	r3, [ip], #4
 800c6b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c6bc:	d2db      	bcs.n	800c676 <quorem+0x42>
 800c6be:	f855 300b 	ldr.w	r3, [r5, fp]
 800c6c2:	b92b      	cbnz	r3, 800c6d0 <quorem+0x9c>
 800c6c4:	9b01      	ldr	r3, [sp, #4]
 800c6c6:	3b04      	subs	r3, #4
 800c6c8:	429d      	cmp	r5, r3
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	d32c      	bcc.n	800c728 <quorem+0xf4>
 800c6ce:	613c      	str	r4, [r7, #16]
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	f001 fb61 	bl	800dd98 <__mcmp>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	db22      	blt.n	800c720 <quorem+0xec>
 800c6da:	3601      	adds	r6, #1
 800c6dc:	4629      	mov	r1, r5
 800c6de:	2000      	movs	r0, #0
 800c6e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c6e4:	f8d1 c000 	ldr.w	ip, [r1]
 800c6e8:	b293      	uxth	r3, r2
 800c6ea:	1ac3      	subs	r3, r0, r3
 800c6ec:	0c12      	lsrs	r2, r2, #16
 800c6ee:	fa13 f38c 	uxtah	r3, r3, ip
 800c6f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c6f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c700:	45c1      	cmp	r9, r8
 800c702:	f841 3b04 	str.w	r3, [r1], #4
 800c706:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c70a:	d2e9      	bcs.n	800c6e0 <quorem+0xac>
 800c70c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c710:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c714:	b922      	cbnz	r2, 800c720 <quorem+0xec>
 800c716:	3b04      	subs	r3, #4
 800c718:	429d      	cmp	r5, r3
 800c71a:	461a      	mov	r2, r3
 800c71c:	d30a      	bcc.n	800c734 <quorem+0x100>
 800c71e:	613c      	str	r4, [r7, #16]
 800c720:	4630      	mov	r0, r6
 800c722:	b003      	add	sp, #12
 800c724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c728:	6812      	ldr	r2, [r2, #0]
 800c72a:	3b04      	subs	r3, #4
 800c72c:	2a00      	cmp	r2, #0
 800c72e:	d1ce      	bne.n	800c6ce <quorem+0x9a>
 800c730:	3c01      	subs	r4, #1
 800c732:	e7c9      	b.n	800c6c8 <quorem+0x94>
 800c734:	6812      	ldr	r2, [r2, #0]
 800c736:	3b04      	subs	r3, #4
 800c738:	2a00      	cmp	r2, #0
 800c73a:	d1f0      	bne.n	800c71e <quorem+0xea>
 800c73c:	3c01      	subs	r4, #1
 800c73e:	e7eb      	b.n	800c718 <quorem+0xe4>
 800c740:	2000      	movs	r0, #0
 800c742:	e7ee      	b.n	800c722 <quorem+0xee>
 800c744:	0000      	movs	r0, r0
	...

0800c748 <_dtoa_r>:
 800c748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74c:	ed2d 8b04 	vpush	{d8-d9}
 800c750:	69c5      	ldr	r5, [r0, #28]
 800c752:	b093      	sub	sp, #76	; 0x4c
 800c754:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c758:	ec57 6b10 	vmov	r6, r7, d0
 800c75c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c760:	9107      	str	r1, [sp, #28]
 800c762:	4604      	mov	r4, r0
 800c764:	920a      	str	r2, [sp, #40]	; 0x28
 800c766:	930d      	str	r3, [sp, #52]	; 0x34
 800c768:	b975      	cbnz	r5, 800c788 <_dtoa_r+0x40>
 800c76a:	2010      	movs	r0, #16
 800c76c:	f000 ff36 	bl	800d5dc <malloc>
 800c770:	4602      	mov	r2, r0
 800c772:	61e0      	str	r0, [r4, #28]
 800c774:	b920      	cbnz	r0, 800c780 <_dtoa_r+0x38>
 800c776:	4bae      	ldr	r3, [pc, #696]	; (800ca30 <_dtoa_r+0x2e8>)
 800c778:	21ef      	movs	r1, #239	; 0xef
 800c77a:	48ae      	ldr	r0, [pc, #696]	; (800ca34 <_dtoa_r+0x2ec>)
 800c77c:	f001 fcee 	bl	800e15c <__assert_func>
 800c780:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c784:	6005      	str	r5, [r0, #0]
 800c786:	60c5      	str	r5, [r0, #12]
 800c788:	69e3      	ldr	r3, [r4, #28]
 800c78a:	6819      	ldr	r1, [r3, #0]
 800c78c:	b151      	cbz	r1, 800c7a4 <_dtoa_r+0x5c>
 800c78e:	685a      	ldr	r2, [r3, #4]
 800c790:	604a      	str	r2, [r1, #4]
 800c792:	2301      	movs	r3, #1
 800c794:	4093      	lsls	r3, r2
 800c796:	608b      	str	r3, [r1, #8]
 800c798:	4620      	mov	r0, r4
 800c79a:	f001 f8c1 	bl	800d920 <_Bfree>
 800c79e:	69e3      	ldr	r3, [r4, #28]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	601a      	str	r2, [r3, #0]
 800c7a4:	1e3b      	subs	r3, r7, #0
 800c7a6:	bfbb      	ittet	lt
 800c7a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c7ac:	9303      	strlt	r3, [sp, #12]
 800c7ae:	2300      	movge	r3, #0
 800c7b0:	2201      	movlt	r2, #1
 800c7b2:	bfac      	ite	ge
 800c7b4:	f8c8 3000 	strge.w	r3, [r8]
 800c7b8:	f8c8 2000 	strlt.w	r2, [r8]
 800c7bc:	4b9e      	ldr	r3, [pc, #632]	; (800ca38 <_dtoa_r+0x2f0>)
 800c7be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c7c2:	ea33 0308 	bics.w	r3, r3, r8
 800c7c6:	d11b      	bne.n	800c800 <_dtoa_r+0xb8>
 800c7c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7ca:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7ce:	6013      	str	r3, [r2, #0]
 800c7d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c7d4:	4333      	orrs	r3, r6
 800c7d6:	f000 8593 	beq.w	800d300 <_dtoa_r+0xbb8>
 800c7da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7dc:	b963      	cbnz	r3, 800c7f8 <_dtoa_r+0xb0>
 800c7de:	4b97      	ldr	r3, [pc, #604]	; (800ca3c <_dtoa_r+0x2f4>)
 800c7e0:	e027      	b.n	800c832 <_dtoa_r+0xea>
 800c7e2:	4b97      	ldr	r3, [pc, #604]	; (800ca40 <_dtoa_r+0x2f8>)
 800c7e4:	9300      	str	r3, [sp, #0]
 800c7e6:	3308      	adds	r3, #8
 800c7e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7ea:	6013      	str	r3, [r2, #0]
 800c7ec:	9800      	ldr	r0, [sp, #0]
 800c7ee:	b013      	add	sp, #76	; 0x4c
 800c7f0:	ecbd 8b04 	vpop	{d8-d9}
 800c7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f8:	4b90      	ldr	r3, [pc, #576]	; (800ca3c <_dtoa_r+0x2f4>)
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	3303      	adds	r3, #3
 800c7fe:	e7f3      	b.n	800c7e8 <_dtoa_r+0xa0>
 800c800:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c804:	2200      	movs	r2, #0
 800c806:	ec51 0b17 	vmov	r0, r1, d7
 800c80a:	eeb0 8a47 	vmov.f32	s16, s14
 800c80e:	eef0 8a67 	vmov.f32	s17, s15
 800c812:	2300      	movs	r3, #0
 800c814:	f7f4 f958 	bl	8000ac8 <__aeabi_dcmpeq>
 800c818:	4681      	mov	r9, r0
 800c81a:	b160      	cbz	r0, 800c836 <_dtoa_r+0xee>
 800c81c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c81e:	2301      	movs	r3, #1
 800c820:	6013      	str	r3, [r2, #0]
 800c822:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c824:	2b00      	cmp	r3, #0
 800c826:	f000 8568 	beq.w	800d2fa <_dtoa_r+0xbb2>
 800c82a:	4b86      	ldr	r3, [pc, #536]	; (800ca44 <_dtoa_r+0x2fc>)
 800c82c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c82e:	6013      	str	r3, [r2, #0]
 800c830:	3b01      	subs	r3, #1
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	e7da      	b.n	800c7ec <_dtoa_r+0xa4>
 800c836:	aa10      	add	r2, sp, #64	; 0x40
 800c838:	a911      	add	r1, sp, #68	; 0x44
 800c83a:	4620      	mov	r0, r4
 800c83c:	eeb0 0a48 	vmov.f32	s0, s16
 800c840:	eef0 0a68 	vmov.f32	s1, s17
 800c844:	f001 fb4e 	bl	800dee4 <__d2b>
 800c848:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c84c:	4682      	mov	sl, r0
 800c84e:	2d00      	cmp	r5, #0
 800c850:	d07f      	beq.n	800c952 <_dtoa_r+0x20a>
 800c852:	ee18 3a90 	vmov	r3, s17
 800c856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c85a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c85e:	ec51 0b18 	vmov	r0, r1, d8
 800c862:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c866:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c86a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c86e:	4619      	mov	r1, r3
 800c870:	2200      	movs	r2, #0
 800c872:	4b75      	ldr	r3, [pc, #468]	; (800ca48 <_dtoa_r+0x300>)
 800c874:	f7f3 fd08 	bl	8000288 <__aeabi_dsub>
 800c878:	a367      	add	r3, pc, #412	; (adr r3, 800ca18 <_dtoa_r+0x2d0>)
 800c87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87e:	f7f3 febb 	bl	80005f8 <__aeabi_dmul>
 800c882:	a367      	add	r3, pc, #412	; (adr r3, 800ca20 <_dtoa_r+0x2d8>)
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	f7f3 fd00 	bl	800028c <__adddf3>
 800c88c:	4606      	mov	r6, r0
 800c88e:	4628      	mov	r0, r5
 800c890:	460f      	mov	r7, r1
 800c892:	f7f3 fe47 	bl	8000524 <__aeabi_i2d>
 800c896:	a364      	add	r3, pc, #400	; (adr r3, 800ca28 <_dtoa_r+0x2e0>)
 800c898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89c:	f7f3 feac 	bl	80005f8 <__aeabi_dmul>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	4639      	mov	r1, r7
 800c8a8:	f7f3 fcf0 	bl	800028c <__adddf3>
 800c8ac:	4606      	mov	r6, r0
 800c8ae:	460f      	mov	r7, r1
 800c8b0:	f7f4 f952 	bl	8000b58 <__aeabi_d2iz>
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	4683      	mov	fp, r0
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	4639      	mov	r1, r7
 800c8be:	f7f4 f90d 	bl	8000adc <__aeabi_dcmplt>
 800c8c2:	b148      	cbz	r0, 800c8d8 <_dtoa_r+0x190>
 800c8c4:	4658      	mov	r0, fp
 800c8c6:	f7f3 fe2d 	bl	8000524 <__aeabi_i2d>
 800c8ca:	4632      	mov	r2, r6
 800c8cc:	463b      	mov	r3, r7
 800c8ce:	f7f4 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8d2:	b908      	cbnz	r0, 800c8d8 <_dtoa_r+0x190>
 800c8d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c8d8:	f1bb 0f16 	cmp.w	fp, #22
 800c8dc:	d857      	bhi.n	800c98e <_dtoa_r+0x246>
 800c8de:	4b5b      	ldr	r3, [pc, #364]	; (800ca4c <_dtoa_r+0x304>)
 800c8e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e8:	ec51 0b18 	vmov	r0, r1, d8
 800c8ec:	f7f4 f8f6 	bl	8000adc <__aeabi_dcmplt>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d04e      	beq.n	800c992 <_dtoa_r+0x24a>
 800c8f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	930c      	str	r3, [sp, #48]	; 0x30
 800c8fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8fe:	1b5b      	subs	r3, r3, r5
 800c900:	1e5a      	subs	r2, r3, #1
 800c902:	bf45      	ittet	mi
 800c904:	f1c3 0301 	rsbmi	r3, r3, #1
 800c908:	9305      	strmi	r3, [sp, #20]
 800c90a:	2300      	movpl	r3, #0
 800c90c:	2300      	movmi	r3, #0
 800c90e:	9206      	str	r2, [sp, #24]
 800c910:	bf54      	ite	pl
 800c912:	9305      	strpl	r3, [sp, #20]
 800c914:	9306      	strmi	r3, [sp, #24]
 800c916:	f1bb 0f00 	cmp.w	fp, #0
 800c91a:	db3c      	blt.n	800c996 <_dtoa_r+0x24e>
 800c91c:	9b06      	ldr	r3, [sp, #24]
 800c91e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c922:	445b      	add	r3, fp
 800c924:	9306      	str	r3, [sp, #24]
 800c926:	2300      	movs	r3, #0
 800c928:	9308      	str	r3, [sp, #32]
 800c92a:	9b07      	ldr	r3, [sp, #28]
 800c92c:	2b09      	cmp	r3, #9
 800c92e:	d868      	bhi.n	800ca02 <_dtoa_r+0x2ba>
 800c930:	2b05      	cmp	r3, #5
 800c932:	bfc4      	itt	gt
 800c934:	3b04      	subgt	r3, #4
 800c936:	9307      	strgt	r3, [sp, #28]
 800c938:	9b07      	ldr	r3, [sp, #28]
 800c93a:	f1a3 0302 	sub.w	r3, r3, #2
 800c93e:	bfcc      	ite	gt
 800c940:	2500      	movgt	r5, #0
 800c942:	2501      	movle	r5, #1
 800c944:	2b03      	cmp	r3, #3
 800c946:	f200 8085 	bhi.w	800ca54 <_dtoa_r+0x30c>
 800c94a:	e8df f003 	tbb	[pc, r3]
 800c94e:	3b2e      	.short	0x3b2e
 800c950:	5839      	.short	0x5839
 800c952:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c956:	441d      	add	r5, r3
 800c958:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c95c:	2b20      	cmp	r3, #32
 800c95e:	bfc1      	itttt	gt
 800c960:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c964:	fa08 f803 	lslgt.w	r8, r8, r3
 800c968:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c96c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c970:	bfd6      	itet	le
 800c972:	f1c3 0320 	rsble	r3, r3, #32
 800c976:	ea48 0003 	orrgt.w	r0, r8, r3
 800c97a:	fa06 f003 	lslle.w	r0, r6, r3
 800c97e:	f7f3 fdc1 	bl	8000504 <__aeabi_ui2d>
 800c982:	2201      	movs	r2, #1
 800c984:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c988:	3d01      	subs	r5, #1
 800c98a:	920e      	str	r2, [sp, #56]	; 0x38
 800c98c:	e76f      	b.n	800c86e <_dtoa_r+0x126>
 800c98e:	2301      	movs	r3, #1
 800c990:	e7b3      	b.n	800c8fa <_dtoa_r+0x1b2>
 800c992:	900c      	str	r0, [sp, #48]	; 0x30
 800c994:	e7b2      	b.n	800c8fc <_dtoa_r+0x1b4>
 800c996:	9b05      	ldr	r3, [sp, #20]
 800c998:	eba3 030b 	sub.w	r3, r3, fp
 800c99c:	9305      	str	r3, [sp, #20]
 800c99e:	f1cb 0300 	rsb	r3, fp, #0
 800c9a2:	9308      	str	r3, [sp, #32]
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9a8:	e7bf      	b.n	800c92a <_dtoa_r+0x1e2>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	dc52      	bgt.n	800ca5a <_dtoa_r+0x312>
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	9301      	str	r3, [sp, #4]
 800c9b8:	9304      	str	r3, [sp, #16]
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	920a      	str	r2, [sp, #40]	; 0x28
 800c9be:	e00b      	b.n	800c9d8 <_dtoa_r+0x290>
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	e7f3      	b.n	800c9ac <_dtoa_r+0x264>
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ca:	445b      	add	r3, fp
 800c9cc:	9301      	str	r3, [sp, #4]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	9304      	str	r3, [sp, #16]
 800c9d4:	bfb8      	it	lt
 800c9d6:	2301      	movlt	r3, #1
 800c9d8:	69e0      	ldr	r0, [r4, #28]
 800c9da:	2100      	movs	r1, #0
 800c9dc:	2204      	movs	r2, #4
 800c9de:	f102 0614 	add.w	r6, r2, #20
 800c9e2:	429e      	cmp	r6, r3
 800c9e4:	d93d      	bls.n	800ca62 <_dtoa_r+0x31a>
 800c9e6:	6041      	str	r1, [r0, #4]
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	f000 ff59 	bl	800d8a0 <_Balloc>
 800c9ee:	9000      	str	r0, [sp, #0]
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	d139      	bne.n	800ca68 <_dtoa_r+0x320>
 800c9f4:	4b16      	ldr	r3, [pc, #88]	; (800ca50 <_dtoa_r+0x308>)
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	f240 11af 	movw	r1, #431	; 0x1af
 800c9fc:	e6bd      	b.n	800c77a <_dtoa_r+0x32>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e7e1      	b.n	800c9c6 <_dtoa_r+0x27e>
 800ca02:	2501      	movs	r5, #1
 800ca04:	2300      	movs	r3, #0
 800ca06:	9307      	str	r3, [sp, #28]
 800ca08:	9509      	str	r5, [sp, #36]	; 0x24
 800ca0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca0e:	9301      	str	r3, [sp, #4]
 800ca10:	9304      	str	r3, [sp, #16]
 800ca12:	2200      	movs	r2, #0
 800ca14:	2312      	movs	r3, #18
 800ca16:	e7d1      	b.n	800c9bc <_dtoa_r+0x274>
 800ca18:	636f4361 	.word	0x636f4361
 800ca1c:	3fd287a7 	.word	0x3fd287a7
 800ca20:	8b60c8b3 	.word	0x8b60c8b3
 800ca24:	3fc68a28 	.word	0x3fc68a28
 800ca28:	509f79fb 	.word	0x509f79fb
 800ca2c:	3fd34413 	.word	0x3fd34413
 800ca30:	08010555 	.word	0x08010555
 800ca34:	0801056c 	.word	0x0801056c
 800ca38:	7ff00000 	.word	0x7ff00000
 800ca3c:	08010551 	.word	0x08010551
 800ca40:	08010548 	.word	0x08010548
 800ca44:	08010525 	.word	0x08010525
 800ca48:	3ff80000 	.word	0x3ff80000
 800ca4c:	08010668 	.word	0x08010668
 800ca50:	080105c4 	.word	0x080105c4
 800ca54:	2301      	movs	r3, #1
 800ca56:	9309      	str	r3, [sp, #36]	; 0x24
 800ca58:	e7d7      	b.n	800ca0a <_dtoa_r+0x2c2>
 800ca5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca5c:	9301      	str	r3, [sp, #4]
 800ca5e:	9304      	str	r3, [sp, #16]
 800ca60:	e7ba      	b.n	800c9d8 <_dtoa_r+0x290>
 800ca62:	3101      	adds	r1, #1
 800ca64:	0052      	lsls	r2, r2, #1
 800ca66:	e7ba      	b.n	800c9de <_dtoa_r+0x296>
 800ca68:	69e3      	ldr	r3, [r4, #28]
 800ca6a:	9a00      	ldr	r2, [sp, #0]
 800ca6c:	601a      	str	r2, [r3, #0]
 800ca6e:	9b04      	ldr	r3, [sp, #16]
 800ca70:	2b0e      	cmp	r3, #14
 800ca72:	f200 80a8 	bhi.w	800cbc6 <_dtoa_r+0x47e>
 800ca76:	2d00      	cmp	r5, #0
 800ca78:	f000 80a5 	beq.w	800cbc6 <_dtoa_r+0x47e>
 800ca7c:	f1bb 0f00 	cmp.w	fp, #0
 800ca80:	dd38      	ble.n	800caf4 <_dtoa_r+0x3ac>
 800ca82:	4bc0      	ldr	r3, [pc, #768]	; (800cd84 <_dtoa_r+0x63c>)
 800ca84:	f00b 020f 	and.w	r2, fp, #15
 800ca88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ca90:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ca94:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ca98:	d019      	beq.n	800cace <_dtoa_r+0x386>
 800ca9a:	4bbb      	ldr	r3, [pc, #748]	; (800cd88 <_dtoa_r+0x640>)
 800ca9c:	ec51 0b18 	vmov	r0, r1, d8
 800caa0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800caa4:	f7f3 fed2 	bl	800084c <__aeabi_ddiv>
 800caa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800caac:	f008 080f 	and.w	r8, r8, #15
 800cab0:	2503      	movs	r5, #3
 800cab2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cd88 <_dtoa_r+0x640>
 800cab6:	f1b8 0f00 	cmp.w	r8, #0
 800caba:	d10a      	bne.n	800cad2 <_dtoa_r+0x38a>
 800cabc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cac0:	4632      	mov	r2, r6
 800cac2:	463b      	mov	r3, r7
 800cac4:	f7f3 fec2 	bl	800084c <__aeabi_ddiv>
 800cac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cacc:	e02b      	b.n	800cb26 <_dtoa_r+0x3de>
 800cace:	2502      	movs	r5, #2
 800cad0:	e7ef      	b.n	800cab2 <_dtoa_r+0x36a>
 800cad2:	f018 0f01 	tst.w	r8, #1
 800cad6:	d008      	beq.n	800caea <_dtoa_r+0x3a2>
 800cad8:	4630      	mov	r0, r6
 800cada:	4639      	mov	r1, r7
 800cadc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cae0:	f7f3 fd8a 	bl	80005f8 <__aeabi_dmul>
 800cae4:	3501      	adds	r5, #1
 800cae6:	4606      	mov	r6, r0
 800cae8:	460f      	mov	r7, r1
 800caea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800caee:	f109 0908 	add.w	r9, r9, #8
 800caf2:	e7e0      	b.n	800cab6 <_dtoa_r+0x36e>
 800caf4:	f000 809f 	beq.w	800cc36 <_dtoa_r+0x4ee>
 800caf8:	f1cb 0600 	rsb	r6, fp, #0
 800cafc:	4ba1      	ldr	r3, [pc, #644]	; (800cd84 <_dtoa_r+0x63c>)
 800cafe:	4fa2      	ldr	r7, [pc, #648]	; (800cd88 <_dtoa_r+0x640>)
 800cb00:	f006 020f 	and.w	r2, r6, #15
 800cb04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0c:	ec51 0b18 	vmov	r0, r1, d8
 800cb10:	f7f3 fd72 	bl	80005f8 <__aeabi_dmul>
 800cb14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb18:	1136      	asrs	r6, r6, #4
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	2502      	movs	r5, #2
 800cb1e:	2e00      	cmp	r6, #0
 800cb20:	d17e      	bne.n	800cc20 <_dtoa_r+0x4d8>
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1d0      	bne.n	800cac8 <_dtoa_r+0x380>
 800cb26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f000 8084 	beq.w	800cc3a <_dtoa_r+0x4f2>
 800cb32:	4b96      	ldr	r3, [pc, #600]	; (800cd8c <_dtoa_r+0x644>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	4640      	mov	r0, r8
 800cb38:	4649      	mov	r1, r9
 800cb3a:	f7f3 ffcf 	bl	8000adc <__aeabi_dcmplt>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d07b      	beq.n	800cc3a <_dtoa_r+0x4f2>
 800cb42:	9b04      	ldr	r3, [sp, #16]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d078      	beq.n	800cc3a <_dtoa_r+0x4f2>
 800cb48:	9b01      	ldr	r3, [sp, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	dd39      	ble.n	800cbc2 <_dtoa_r+0x47a>
 800cb4e:	4b90      	ldr	r3, [pc, #576]	; (800cd90 <_dtoa_r+0x648>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	4640      	mov	r0, r8
 800cb54:	4649      	mov	r1, r9
 800cb56:	f7f3 fd4f 	bl	80005f8 <__aeabi_dmul>
 800cb5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb5e:	9e01      	ldr	r6, [sp, #4]
 800cb60:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800cb64:	3501      	adds	r5, #1
 800cb66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f7f3 fcda 	bl	8000524 <__aeabi_i2d>
 800cb70:	4642      	mov	r2, r8
 800cb72:	464b      	mov	r3, r9
 800cb74:	f7f3 fd40 	bl	80005f8 <__aeabi_dmul>
 800cb78:	4b86      	ldr	r3, [pc, #536]	; (800cd94 <_dtoa_r+0x64c>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f7f3 fb86 	bl	800028c <__adddf3>
 800cb80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cb84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb88:	9303      	str	r3, [sp, #12]
 800cb8a:	2e00      	cmp	r6, #0
 800cb8c:	d158      	bne.n	800cc40 <_dtoa_r+0x4f8>
 800cb8e:	4b82      	ldr	r3, [pc, #520]	; (800cd98 <_dtoa_r+0x650>)
 800cb90:	2200      	movs	r2, #0
 800cb92:	4640      	mov	r0, r8
 800cb94:	4649      	mov	r1, r9
 800cb96:	f7f3 fb77 	bl	8000288 <__aeabi_dsub>
 800cb9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb9e:	4680      	mov	r8, r0
 800cba0:	4689      	mov	r9, r1
 800cba2:	f7f3 ffb9 	bl	8000b18 <__aeabi_dcmpgt>
 800cba6:	2800      	cmp	r0, #0
 800cba8:	f040 8296 	bne.w	800d0d8 <_dtoa_r+0x990>
 800cbac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cbb0:	4640      	mov	r0, r8
 800cbb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cbb6:	4649      	mov	r1, r9
 800cbb8:	f7f3 ff90 	bl	8000adc <__aeabi_dcmplt>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	f040 8289 	bne.w	800d0d4 <_dtoa_r+0x98c>
 800cbc2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cbc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f2c0 814e 	blt.w	800ce6a <_dtoa_r+0x722>
 800cbce:	f1bb 0f0e 	cmp.w	fp, #14
 800cbd2:	f300 814a 	bgt.w	800ce6a <_dtoa_r+0x722>
 800cbd6:	4b6b      	ldr	r3, [pc, #428]	; (800cd84 <_dtoa_r+0x63c>)
 800cbd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cbdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f280 80dc 	bge.w	800cda0 <_dtoa_r+0x658>
 800cbe8:	9b04      	ldr	r3, [sp, #16]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f300 80d8 	bgt.w	800cda0 <_dtoa_r+0x658>
 800cbf0:	f040 826f 	bne.w	800d0d2 <_dtoa_r+0x98a>
 800cbf4:	4b68      	ldr	r3, [pc, #416]	; (800cd98 <_dtoa_r+0x650>)
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	4640      	mov	r0, r8
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	f7f3 fcfc 	bl	80005f8 <__aeabi_dmul>
 800cc00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc04:	f7f3 ff7e 	bl	8000b04 <__aeabi_dcmpge>
 800cc08:	9e04      	ldr	r6, [sp, #16]
 800cc0a:	4637      	mov	r7, r6
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	f040 8245 	bne.w	800d09c <_dtoa_r+0x954>
 800cc12:	9d00      	ldr	r5, [sp, #0]
 800cc14:	2331      	movs	r3, #49	; 0x31
 800cc16:	f805 3b01 	strb.w	r3, [r5], #1
 800cc1a:	f10b 0b01 	add.w	fp, fp, #1
 800cc1e:	e241      	b.n	800d0a4 <_dtoa_r+0x95c>
 800cc20:	07f2      	lsls	r2, r6, #31
 800cc22:	d505      	bpl.n	800cc30 <_dtoa_r+0x4e8>
 800cc24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc28:	f7f3 fce6 	bl	80005f8 <__aeabi_dmul>
 800cc2c:	3501      	adds	r5, #1
 800cc2e:	2301      	movs	r3, #1
 800cc30:	1076      	asrs	r6, r6, #1
 800cc32:	3708      	adds	r7, #8
 800cc34:	e773      	b.n	800cb1e <_dtoa_r+0x3d6>
 800cc36:	2502      	movs	r5, #2
 800cc38:	e775      	b.n	800cb26 <_dtoa_r+0x3de>
 800cc3a:	9e04      	ldr	r6, [sp, #16]
 800cc3c:	465f      	mov	r7, fp
 800cc3e:	e792      	b.n	800cb66 <_dtoa_r+0x41e>
 800cc40:	9900      	ldr	r1, [sp, #0]
 800cc42:	4b50      	ldr	r3, [pc, #320]	; (800cd84 <_dtoa_r+0x63c>)
 800cc44:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc48:	4431      	add	r1, r6
 800cc4a:	9102      	str	r1, [sp, #8]
 800cc4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc4e:	eeb0 9a47 	vmov.f32	s18, s14
 800cc52:	eef0 9a67 	vmov.f32	s19, s15
 800cc56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cc5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc5e:	2900      	cmp	r1, #0
 800cc60:	d044      	beq.n	800ccec <_dtoa_r+0x5a4>
 800cc62:	494e      	ldr	r1, [pc, #312]	; (800cd9c <_dtoa_r+0x654>)
 800cc64:	2000      	movs	r0, #0
 800cc66:	f7f3 fdf1 	bl	800084c <__aeabi_ddiv>
 800cc6a:	ec53 2b19 	vmov	r2, r3, d9
 800cc6e:	f7f3 fb0b 	bl	8000288 <__aeabi_dsub>
 800cc72:	9d00      	ldr	r5, [sp, #0]
 800cc74:	ec41 0b19 	vmov	d9, r0, r1
 800cc78:	4649      	mov	r1, r9
 800cc7a:	4640      	mov	r0, r8
 800cc7c:	f7f3 ff6c 	bl	8000b58 <__aeabi_d2iz>
 800cc80:	4606      	mov	r6, r0
 800cc82:	f7f3 fc4f 	bl	8000524 <__aeabi_i2d>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	4640      	mov	r0, r8
 800cc8c:	4649      	mov	r1, r9
 800cc8e:	f7f3 fafb 	bl	8000288 <__aeabi_dsub>
 800cc92:	3630      	adds	r6, #48	; 0x30
 800cc94:	f805 6b01 	strb.w	r6, [r5], #1
 800cc98:	ec53 2b19 	vmov	r2, r3, d9
 800cc9c:	4680      	mov	r8, r0
 800cc9e:	4689      	mov	r9, r1
 800cca0:	f7f3 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800cca4:	2800      	cmp	r0, #0
 800cca6:	d164      	bne.n	800cd72 <_dtoa_r+0x62a>
 800cca8:	4642      	mov	r2, r8
 800ccaa:	464b      	mov	r3, r9
 800ccac:	4937      	ldr	r1, [pc, #220]	; (800cd8c <_dtoa_r+0x644>)
 800ccae:	2000      	movs	r0, #0
 800ccb0:	f7f3 faea 	bl	8000288 <__aeabi_dsub>
 800ccb4:	ec53 2b19 	vmov	r2, r3, d9
 800ccb8:	f7f3 ff10 	bl	8000adc <__aeabi_dcmplt>
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	f040 80b6 	bne.w	800ce2e <_dtoa_r+0x6e6>
 800ccc2:	9b02      	ldr	r3, [sp, #8]
 800ccc4:	429d      	cmp	r5, r3
 800ccc6:	f43f af7c 	beq.w	800cbc2 <_dtoa_r+0x47a>
 800ccca:	4b31      	ldr	r3, [pc, #196]	; (800cd90 <_dtoa_r+0x648>)
 800cccc:	ec51 0b19 	vmov	r0, r1, d9
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f7f3 fc91 	bl	80005f8 <__aeabi_dmul>
 800ccd6:	4b2e      	ldr	r3, [pc, #184]	; (800cd90 <_dtoa_r+0x648>)
 800ccd8:	ec41 0b19 	vmov	d9, r0, r1
 800ccdc:	2200      	movs	r2, #0
 800ccde:	4640      	mov	r0, r8
 800cce0:	4649      	mov	r1, r9
 800cce2:	f7f3 fc89 	bl	80005f8 <__aeabi_dmul>
 800cce6:	4680      	mov	r8, r0
 800cce8:	4689      	mov	r9, r1
 800ccea:	e7c5      	b.n	800cc78 <_dtoa_r+0x530>
 800ccec:	ec51 0b17 	vmov	r0, r1, d7
 800ccf0:	f7f3 fc82 	bl	80005f8 <__aeabi_dmul>
 800ccf4:	9b02      	ldr	r3, [sp, #8]
 800ccf6:	9d00      	ldr	r5, [sp, #0]
 800ccf8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccfa:	ec41 0b19 	vmov	d9, r0, r1
 800ccfe:	4649      	mov	r1, r9
 800cd00:	4640      	mov	r0, r8
 800cd02:	f7f3 ff29 	bl	8000b58 <__aeabi_d2iz>
 800cd06:	4606      	mov	r6, r0
 800cd08:	f7f3 fc0c 	bl	8000524 <__aeabi_i2d>
 800cd0c:	3630      	adds	r6, #48	; 0x30
 800cd0e:	4602      	mov	r2, r0
 800cd10:	460b      	mov	r3, r1
 800cd12:	4640      	mov	r0, r8
 800cd14:	4649      	mov	r1, r9
 800cd16:	f7f3 fab7 	bl	8000288 <__aeabi_dsub>
 800cd1a:	f805 6b01 	strb.w	r6, [r5], #1
 800cd1e:	9b02      	ldr	r3, [sp, #8]
 800cd20:	429d      	cmp	r5, r3
 800cd22:	4680      	mov	r8, r0
 800cd24:	4689      	mov	r9, r1
 800cd26:	f04f 0200 	mov.w	r2, #0
 800cd2a:	d124      	bne.n	800cd76 <_dtoa_r+0x62e>
 800cd2c:	4b1b      	ldr	r3, [pc, #108]	; (800cd9c <_dtoa_r+0x654>)
 800cd2e:	ec51 0b19 	vmov	r0, r1, d9
 800cd32:	f7f3 faab 	bl	800028c <__adddf3>
 800cd36:	4602      	mov	r2, r0
 800cd38:	460b      	mov	r3, r1
 800cd3a:	4640      	mov	r0, r8
 800cd3c:	4649      	mov	r1, r9
 800cd3e:	f7f3 feeb 	bl	8000b18 <__aeabi_dcmpgt>
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d173      	bne.n	800ce2e <_dtoa_r+0x6e6>
 800cd46:	ec53 2b19 	vmov	r2, r3, d9
 800cd4a:	4914      	ldr	r1, [pc, #80]	; (800cd9c <_dtoa_r+0x654>)
 800cd4c:	2000      	movs	r0, #0
 800cd4e:	f7f3 fa9b 	bl	8000288 <__aeabi_dsub>
 800cd52:	4602      	mov	r2, r0
 800cd54:	460b      	mov	r3, r1
 800cd56:	4640      	mov	r0, r8
 800cd58:	4649      	mov	r1, r9
 800cd5a:	f7f3 febf 	bl	8000adc <__aeabi_dcmplt>
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	f43f af2f 	beq.w	800cbc2 <_dtoa_r+0x47a>
 800cd64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cd66:	1e6b      	subs	r3, r5, #1
 800cd68:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd6e:	2b30      	cmp	r3, #48	; 0x30
 800cd70:	d0f8      	beq.n	800cd64 <_dtoa_r+0x61c>
 800cd72:	46bb      	mov	fp, r7
 800cd74:	e04a      	b.n	800ce0c <_dtoa_r+0x6c4>
 800cd76:	4b06      	ldr	r3, [pc, #24]	; (800cd90 <_dtoa_r+0x648>)
 800cd78:	f7f3 fc3e 	bl	80005f8 <__aeabi_dmul>
 800cd7c:	4680      	mov	r8, r0
 800cd7e:	4689      	mov	r9, r1
 800cd80:	e7bd      	b.n	800ccfe <_dtoa_r+0x5b6>
 800cd82:	bf00      	nop
 800cd84:	08010668 	.word	0x08010668
 800cd88:	08010640 	.word	0x08010640
 800cd8c:	3ff00000 	.word	0x3ff00000
 800cd90:	40240000 	.word	0x40240000
 800cd94:	401c0000 	.word	0x401c0000
 800cd98:	40140000 	.word	0x40140000
 800cd9c:	3fe00000 	.word	0x3fe00000
 800cda0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cda4:	9d00      	ldr	r5, [sp, #0]
 800cda6:	4642      	mov	r2, r8
 800cda8:	464b      	mov	r3, r9
 800cdaa:	4630      	mov	r0, r6
 800cdac:	4639      	mov	r1, r7
 800cdae:	f7f3 fd4d 	bl	800084c <__aeabi_ddiv>
 800cdb2:	f7f3 fed1 	bl	8000b58 <__aeabi_d2iz>
 800cdb6:	9001      	str	r0, [sp, #4]
 800cdb8:	f7f3 fbb4 	bl	8000524 <__aeabi_i2d>
 800cdbc:	4642      	mov	r2, r8
 800cdbe:	464b      	mov	r3, r9
 800cdc0:	f7f3 fc1a 	bl	80005f8 <__aeabi_dmul>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	4630      	mov	r0, r6
 800cdca:	4639      	mov	r1, r7
 800cdcc:	f7f3 fa5c 	bl	8000288 <__aeabi_dsub>
 800cdd0:	9e01      	ldr	r6, [sp, #4]
 800cdd2:	9f04      	ldr	r7, [sp, #16]
 800cdd4:	3630      	adds	r6, #48	; 0x30
 800cdd6:	f805 6b01 	strb.w	r6, [r5], #1
 800cdda:	9e00      	ldr	r6, [sp, #0]
 800cddc:	1bae      	subs	r6, r5, r6
 800cdde:	42b7      	cmp	r7, r6
 800cde0:	4602      	mov	r2, r0
 800cde2:	460b      	mov	r3, r1
 800cde4:	d134      	bne.n	800ce50 <_dtoa_r+0x708>
 800cde6:	f7f3 fa51 	bl	800028c <__adddf3>
 800cdea:	4642      	mov	r2, r8
 800cdec:	464b      	mov	r3, r9
 800cdee:	4606      	mov	r6, r0
 800cdf0:	460f      	mov	r7, r1
 800cdf2:	f7f3 fe91 	bl	8000b18 <__aeabi_dcmpgt>
 800cdf6:	b9c8      	cbnz	r0, 800ce2c <_dtoa_r+0x6e4>
 800cdf8:	4642      	mov	r2, r8
 800cdfa:	464b      	mov	r3, r9
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	4639      	mov	r1, r7
 800ce00:	f7f3 fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce04:	b110      	cbz	r0, 800ce0c <_dtoa_r+0x6c4>
 800ce06:	9b01      	ldr	r3, [sp, #4]
 800ce08:	07db      	lsls	r3, r3, #31
 800ce0a:	d40f      	bmi.n	800ce2c <_dtoa_r+0x6e4>
 800ce0c:	4651      	mov	r1, sl
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f000 fd86 	bl	800d920 <_Bfree>
 800ce14:	2300      	movs	r3, #0
 800ce16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce18:	702b      	strb	r3, [r5, #0]
 800ce1a:	f10b 0301 	add.w	r3, fp, #1
 800ce1e:	6013      	str	r3, [r2, #0]
 800ce20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f43f ace2 	beq.w	800c7ec <_dtoa_r+0xa4>
 800ce28:	601d      	str	r5, [r3, #0]
 800ce2a:	e4df      	b.n	800c7ec <_dtoa_r+0xa4>
 800ce2c:	465f      	mov	r7, fp
 800ce2e:	462b      	mov	r3, r5
 800ce30:	461d      	mov	r5, r3
 800ce32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce36:	2a39      	cmp	r2, #57	; 0x39
 800ce38:	d106      	bne.n	800ce48 <_dtoa_r+0x700>
 800ce3a:	9a00      	ldr	r2, [sp, #0]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d1f7      	bne.n	800ce30 <_dtoa_r+0x6e8>
 800ce40:	9900      	ldr	r1, [sp, #0]
 800ce42:	2230      	movs	r2, #48	; 0x30
 800ce44:	3701      	adds	r7, #1
 800ce46:	700a      	strb	r2, [r1, #0]
 800ce48:	781a      	ldrb	r2, [r3, #0]
 800ce4a:	3201      	adds	r2, #1
 800ce4c:	701a      	strb	r2, [r3, #0]
 800ce4e:	e790      	b.n	800cd72 <_dtoa_r+0x62a>
 800ce50:	4ba3      	ldr	r3, [pc, #652]	; (800d0e0 <_dtoa_r+0x998>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	f7f3 fbd0 	bl	80005f8 <__aeabi_dmul>
 800ce58:	2200      	movs	r2, #0
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	4606      	mov	r6, r0
 800ce5e:	460f      	mov	r7, r1
 800ce60:	f7f3 fe32 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d09e      	beq.n	800cda6 <_dtoa_r+0x65e>
 800ce68:	e7d0      	b.n	800ce0c <_dtoa_r+0x6c4>
 800ce6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce6c:	2a00      	cmp	r2, #0
 800ce6e:	f000 80ca 	beq.w	800d006 <_dtoa_r+0x8be>
 800ce72:	9a07      	ldr	r2, [sp, #28]
 800ce74:	2a01      	cmp	r2, #1
 800ce76:	f300 80ad 	bgt.w	800cfd4 <_dtoa_r+0x88c>
 800ce7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce7c:	2a00      	cmp	r2, #0
 800ce7e:	f000 80a5 	beq.w	800cfcc <_dtoa_r+0x884>
 800ce82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce86:	9e08      	ldr	r6, [sp, #32]
 800ce88:	9d05      	ldr	r5, [sp, #20]
 800ce8a:	9a05      	ldr	r2, [sp, #20]
 800ce8c:	441a      	add	r2, r3
 800ce8e:	9205      	str	r2, [sp, #20]
 800ce90:	9a06      	ldr	r2, [sp, #24]
 800ce92:	2101      	movs	r1, #1
 800ce94:	441a      	add	r2, r3
 800ce96:	4620      	mov	r0, r4
 800ce98:	9206      	str	r2, [sp, #24]
 800ce9a:	f000 fdf7 	bl	800da8c <__i2b>
 800ce9e:	4607      	mov	r7, r0
 800cea0:	b165      	cbz	r5, 800cebc <_dtoa_r+0x774>
 800cea2:	9b06      	ldr	r3, [sp, #24]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	dd09      	ble.n	800cebc <_dtoa_r+0x774>
 800cea8:	42ab      	cmp	r3, r5
 800ceaa:	9a05      	ldr	r2, [sp, #20]
 800ceac:	bfa8      	it	ge
 800ceae:	462b      	movge	r3, r5
 800ceb0:	1ad2      	subs	r2, r2, r3
 800ceb2:	9205      	str	r2, [sp, #20]
 800ceb4:	9a06      	ldr	r2, [sp, #24]
 800ceb6:	1aed      	subs	r5, r5, r3
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	9306      	str	r3, [sp, #24]
 800cebc:	9b08      	ldr	r3, [sp, #32]
 800cebe:	b1f3      	cbz	r3, 800cefe <_dtoa_r+0x7b6>
 800cec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f000 80a3 	beq.w	800d00e <_dtoa_r+0x8c6>
 800cec8:	2e00      	cmp	r6, #0
 800ceca:	dd10      	ble.n	800ceee <_dtoa_r+0x7a6>
 800cecc:	4639      	mov	r1, r7
 800cece:	4632      	mov	r2, r6
 800ced0:	4620      	mov	r0, r4
 800ced2:	f000 fe9b 	bl	800dc0c <__pow5mult>
 800ced6:	4652      	mov	r2, sl
 800ced8:	4601      	mov	r1, r0
 800ceda:	4607      	mov	r7, r0
 800cedc:	4620      	mov	r0, r4
 800cede:	f000 fdeb 	bl	800dab8 <__multiply>
 800cee2:	4651      	mov	r1, sl
 800cee4:	4680      	mov	r8, r0
 800cee6:	4620      	mov	r0, r4
 800cee8:	f000 fd1a 	bl	800d920 <_Bfree>
 800ceec:	46c2      	mov	sl, r8
 800ceee:	9b08      	ldr	r3, [sp, #32]
 800cef0:	1b9a      	subs	r2, r3, r6
 800cef2:	d004      	beq.n	800cefe <_dtoa_r+0x7b6>
 800cef4:	4651      	mov	r1, sl
 800cef6:	4620      	mov	r0, r4
 800cef8:	f000 fe88 	bl	800dc0c <__pow5mult>
 800cefc:	4682      	mov	sl, r0
 800cefe:	2101      	movs	r1, #1
 800cf00:	4620      	mov	r0, r4
 800cf02:	f000 fdc3 	bl	800da8c <__i2b>
 800cf06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	4606      	mov	r6, r0
 800cf0c:	f340 8081 	ble.w	800d012 <_dtoa_r+0x8ca>
 800cf10:	461a      	mov	r2, r3
 800cf12:	4601      	mov	r1, r0
 800cf14:	4620      	mov	r0, r4
 800cf16:	f000 fe79 	bl	800dc0c <__pow5mult>
 800cf1a:	9b07      	ldr	r3, [sp, #28]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	4606      	mov	r6, r0
 800cf20:	dd7a      	ble.n	800d018 <_dtoa_r+0x8d0>
 800cf22:	f04f 0800 	mov.w	r8, #0
 800cf26:	6933      	ldr	r3, [r6, #16]
 800cf28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cf2c:	6918      	ldr	r0, [r3, #16]
 800cf2e:	f000 fd5f 	bl	800d9f0 <__hi0bits>
 800cf32:	f1c0 0020 	rsb	r0, r0, #32
 800cf36:	9b06      	ldr	r3, [sp, #24]
 800cf38:	4418      	add	r0, r3
 800cf3a:	f010 001f 	ands.w	r0, r0, #31
 800cf3e:	f000 8094 	beq.w	800d06a <_dtoa_r+0x922>
 800cf42:	f1c0 0320 	rsb	r3, r0, #32
 800cf46:	2b04      	cmp	r3, #4
 800cf48:	f340 8085 	ble.w	800d056 <_dtoa_r+0x90e>
 800cf4c:	9b05      	ldr	r3, [sp, #20]
 800cf4e:	f1c0 001c 	rsb	r0, r0, #28
 800cf52:	4403      	add	r3, r0
 800cf54:	9305      	str	r3, [sp, #20]
 800cf56:	9b06      	ldr	r3, [sp, #24]
 800cf58:	4403      	add	r3, r0
 800cf5a:	4405      	add	r5, r0
 800cf5c:	9306      	str	r3, [sp, #24]
 800cf5e:	9b05      	ldr	r3, [sp, #20]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	dd05      	ble.n	800cf70 <_dtoa_r+0x828>
 800cf64:	4651      	mov	r1, sl
 800cf66:	461a      	mov	r2, r3
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f000 fea9 	bl	800dcc0 <__lshift>
 800cf6e:	4682      	mov	sl, r0
 800cf70:	9b06      	ldr	r3, [sp, #24]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	dd05      	ble.n	800cf82 <_dtoa_r+0x83a>
 800cf76:	4631      	mov	r1, r6
 800cf78:	461a      	mov	r2, r3
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f000 fea0 	bl	800dcc0 <__lshift>
 800cf80:	4606      	mov	r6, r0
 800cf82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d072      	beq.n	800d06e <_dtoa_r+0x926>
 800cf88:	4631      	mov	r1, r6
 800cf8a:	4650      	mov	r0, sl
 800cf8c:	f000 ff04 	bl	800dd98 <__mcmp>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	da6c      	bge.n	800d06e <_dtoa_r+0x926>
 800cf94:	2300      	movs	r3, #0
 800cf96:	4651      	mov	r1, sl
 800cf98:	220a      	movs	r2, #10
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f000 fce2 	bl	800d964 <__multadd>
 800cfa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfa2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cfa6:	4682      	mov	sl, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f000 81b0 	beq.w	800d30e <_dtoa_r+0xbc6>
 800cfae:	2300      	movs	r3, #0
 800cfb0:	4639      	mov	r1, r7
 800cfb2:	220a      	movs	r2, #10
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f000 fcd5 	bl	800d964 <__multadd>
 800cfba:	9b01      	ldr	r3, [sp, #4]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	4607      	mov	r7, r0
 800cfc0:	f300 8096 	bgt.w	800d0f0 <_dtoa_r+0x9a8>
 800cfc4:	9b07      	ldr	r3, [sp, #28]
 800cfc6:	2b02      	cmp	r3, #2
 800cfc8:	dc59      	bgt.n	800d07e <_dtoa_r+0x936>
 800cfca:	e091      	b.n	800d0f0 <_dtoa_r+0x9a8>
 800cfcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cfd2:	e758      	b.n	800ce86 <_dtoa_r+0x73e>
 800cfd4:	9b04      	ldr	r3, [sp, #16]
 800cfd6:	1e5e      	subs	r6, r3, #1
 800cfd8:	9b08      	ldr	r3, [sp, #32]
 800cfda:	42b3      	cmp	r3, r6
 800cfdc:	bfbf      	itttt	lt
 800cfde:	9b08      	ldrlt	r3, [sp, #32]
 800cfe0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cfe2:	9608      	strlt	r6, [sp, #32]
 800cfe4:	1af3      	sublt	r3, r6, r3
 800cfe6:	bfb4      	ite	lt
 800cfe8:	18d2      	addlt	r2, r2, r3
 800cfea:	1b9e      	subge	r6, r3, r6
 800cfec:	9b04      	ldr	r3, [sp, #16]
 800cfee:	bfbc      	itt	lt
 800cff0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cff2:	2600      	movlt	r6, #0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	bfb7      	itett	lt
 800cff8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cffc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d000:	1a9d      	sublt	r5, r3, r2
 800d002:	2300      	movlt	r3, #0
 800d004:	e741      	b.n	800ce8a <_dtoa_r+0x742>
 800d006:	9e08      	ldr	r6, [sp, #32]
 800d008:	9d05      	ldr	r5, [sp, #20]
 800d00a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d00c:	e748      	b.n	800cea0 <_dtoa_r+0x758>
 800d00e:	9a08      	ldr	r2, [sp, #32]
 800d010:	e770      	b.n	800cef4 <_dtoa_r+0x7ac>
 800d012:	9b07      	ldr	r3, [sp, #28]
 800d014:	2b01      	cmp	r3, #1
 800d016:	dc19      	bgt.n	800d04c <_dtoa_r+0x904>
 800d018:	9b02      	ldr	r3, [sp, #8]
 800d01a:	b9bb      	cbnz	r3, 800d04c <_dtoa_r+0x904>
 800d01c:	9b03      	ldr	r3, [sp, #12]
 800d01e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d022:	b99b      	cbnz	r3, 800d04c <_dtoa_r+0x904>
 800d024:	9b03      	ldr	r3, [sp, #12]
 800d026:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d02a:	0d1b      	lsrs	r3, r3, #20
 800d02c:	051b      	lsls	r3, r3, #20
 800d02e:	b183      	cbz	r3, 800d052 <_dtoa_r+0x90a>
 800d030:	9b05      	ldr	r3, [sp, #20]
 800d032:	3301      	adds	r3, #1
 800d034:	9305      	str	r3, [sp, #20]
 800d036:	9b06      	ldr	r3, [sp, #24]
 800d038:	3301      	adds	r3, #1
 800d03a:	9306      	str	r3, [sp, #24]
 800d03c:	f04f 0801 	mov.w	r8, #1
 800d040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d042:	2b00      	cmp	r3, #0
 800d044:	f47f af6f 	bne.w	800cf26 <_dtoa_r+0x7de>
 800d048:	2001      	movs	r0, #1
 800d04a:	e774      	b.n	800cf36 <_dtoa_r+0x7ee>
 800d04c:	f04f 0800 	mov.w	r8, #0
 800d050:	e7f6      	b.n	800d040 <_dtoa_r+0x8f8>
 800d052:	4698      	mov	r8, r3
 800d054:	e7f4      	b.n	800d040 <_dtoa_r+0x8f8>
 800d056:	d082      	beq.n	800cf5e <_dtoa_r+0x816>
 800d058:	9a05      	ldr	r2, [sp, #20]
 800d05a:	331c      	adds	r3, #28
 800d05c:	441a      	add	r2, r3
 800d05e:	9205      	str	r2, [sp, #20]
 800d060:	9a06      	ldr	r2, [sp, #24]
 800d062:	441a      	add	r2, r3
 800d064:	441d      	add	r5, r3
 800d066:	9206      	str	r2, [sp, #24]
 800d068:	e779      	b.n	800cf5e <_dtoa_r+0x816>
 800d06a:	4603      	mov	r3, r0
 800d06c:	e7f4      	b.n	800d058 <_dtoa_r+0x910>
 800d06e:	9b04      	ldr	r3, [sp, #16]
 800d070:	2b00      	cmp	r3, #0
 800d072:	dc37      	bgt.n	800d0e4 <_dtoa_r+0x99c>
 800d074:	9b07      	ldr	r3, [sp, #28]
 800d076:	2b02      	cmp	r3, #2
 800d078:	dd34      	ble.n	800d0e4 <_dtoa_r+0x99c>
 800d07a:	9b04      	ldr	r3, [sp, #16]
 800d07c:	9301      	str	r3, [sp, #4]
 800d07e:	9b01      	ldr	r3, [sp, #4]
 800d080:	b963      	cbnz	r3, 800d09c <_dtoa_r+0x954>
 800d082:	4631      	mov	r1, r6
 800d084:	2205      	movs	r2, #5
 800d086:	4620      	mov	r0, r4
 800d088:	f000 fc6c 	bl	800d964 <__multadd>
 800d08c:	4601      	mov	r1, r0
 800d08e:	4606      	mov	r6, r0
 800d090:	4650      	mov	r0, sl
 800d092:	f000 fe81 	bl	800dd98 <__mcmp>
 800d096:	2800      	cmp	r0, #0
 800d098:	f73f adbb 	bgt.w	800cc12 <_dtoa_r+0x4ca>
 800d09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d09e:	9d00      	ldr	r5, [sp, #0]
 800d0a0:	ea6f 0b03 	mvn.w	fp, r3
 800d0a4:	f04f 0800 	mov.w	r8, #0
 800d0a8:	4631      	mov	r1, r6
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	f000 fc38 	bl	800d920 <_Bfree>
 800d0b0:	2f00      	cmp	r7, #0
 800d0b2:	f43f aeab 	beq.w	800ce0c <_dtoa_r+0x6c4>
 800d0b6:	f1b8 0f00 	cmp.w	r8, #0
 800d0ba:	d005      	beq.n	800d0c8 <_dtoa_r+0x980>
 800d0bc:	45b8      	cmp	r8, r7
 800d0be:	d003      	beq.n	800d0c8 <_dtoa_r+0x980>
 800d0c0:	4641      	mov	r1, r8
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f000 fc2c 	bl	800d920 <_Bfree>
 800d0c8:	4639      	mov	r1, r7
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f000 fc28 	bl	800d920 <_Bfree>
 800d0d0:	e69c      	b.n	800ce0c <_dtoa_r+0x6c4>
 800d0d2:	2600      	movs	r6, #0
 800d0d4:	4637      	mov	r7, r6
 800d0d6:	e7e1      	b.n	800d09c <_dtoa_r+0x954>
 800d0d8:	46bb      	mov	fp, r7
 800d0da:	4637      	mov	r7, r6
 800d0dc:	e599      	b.n	800cc12 <_dtoa_r+0x4ca>
 800d0de:	bf00      	nop
 800d0e0:	40240000 	.word	0x40240000
 800d0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f000 80c8 	beq.w	800d27c <_dtoa_r+0xb34>
 800d0ec:	9b04      	ldr	r3, [sp, #16]
 800d0ee:	9301      	str	r3, [sp, #4]
 800d0f0:	2d00      	cmp	r5, #0
 800d0f2:	dd05      	ble.n	800d100 <_dtoa_r+0x9b8>
 800d0f4:	4639      	mov	r1, r7
 800d0f6:	462a      	mov	r2, r5
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f000 fde1 	bl	800dcc0 <__lshift>
 800d0fe:	4607      	mov	r7, r0
 800d100:	f1b8 0f00 	cmp.w	r8, #0
 800d104:	d05b      	beq.n	800d1be <_dtoa_r+0xa76>
 800d106:	6879      	ldr	r1, [r7, #4]
 800d108:	4620      	mov	r0, r4
 800d10a:	f000 fbc9 	bl	800d8a0 <_Balloc>
 800d10e:	4605      	mov	r5, r0
 800d110:	b928      	cbnz	r0, 800d11e <_dtoa_r+0x9d6>
 800d112:	4b83      	ldr	r3, [pc, #524]	; (800d320 <_dtoa_r+0xbd8>)
 800d114:	4602      	mov	r2, r0
 800d116:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d11a:	f7ff bb2e 	b.w	800c77a <_dtoa_r+0x32>
 800d11e:	693a      	ldr	r2, [r7, #16]
 800d120:	3202      	adds	r2, #2
 800d122:	0092      	lsls	r2, r2, #2
 800d124:	f107 010c 	add.w	r1, r7, #12
 800d128:	300c      	adds	r0, #12
 800d12a:	f7ff fa75 	bl	800c618 <memcpy>
 800d12e:	2201      	movs	r2, #1
 800d130:	4629      	mov	r1, r5
 800d132:	4620      	mov	r0, r4
 800d134:	f000 fdc4 	bl	800dcc0 <__lshift>
 800d138:	9b00      	ldr	r3, [sp, #0]
 800d13a:	3301      	adds	r3, #1
 800d13c:	9304      	str	r3, [sp, #16]
 800d13e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d142:	4413      	add	r3, r2
 800d144:	9308      	str	r3, [sp, #32]
 800d146:	9b02      	ldr	r3, [sp, #8]
 800d148:	f003 0301 	and.w	r3, r3, #1
 800d14c:	46b8      	mov	r8, r7
 800d14e:	9306      	str	r3, [sp, #24]
 800d150:	4607      	mov	r7, r0
 800d152:	9b04      	ldr	r3, [sp, #16]
 800d154:	4631      	mov	r1, r6
 800d156:	3b01      	subs	r3, #1
 800d158:	4650      	mov	r0, sl
 800d15a:	9301      	str	r3, [sp, #4]
 800d15c:	f7ff fa6a 	bl	800c634 <quorem>
 800d160:	4641      	mov	r1, r8
 800d162:	9002      	str	r0, [sp, #8]
 800d164:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d168:	4650      	mov	r0, sl
 800d16a:	f000 fe15 	bl	800dd98 <__mcmp>
 800d16e:	463a      	mov	r2, r7
 800d170:	9005      	str	r0, [sp, #20]
 800d172:	4631      	mov	r1, r6
 800d174:	4620      	mov	r0, r4
 800d176:	f000 fe2b 	bl	800ddd0 <__mdiff>
 800d17a:	68c2      	ldr	r2, [r0, #12]
 800d17c:	4605      	mov	r5, r0
 800d17e:	bb02      	cbnz	r2, 800d1c2 <_dtoa_r+0xa7a>
 800d180:	4601      	mov	r1, r0
 800d182:	4650      	mov	r0, sl
 800d184:	f000 fe08 	bl	800dd98 <__mcmp>
 800d188:	4602      	mov	r2, r0
 800d18a:	4629      	mov	r1, r5
 800d18c:	4620      	mov	r0, r4
 800d18e:	9209      	str	r2, [sp, #36]	; 0x24
 800d190:	f000 fbc6 	bl	800d920 <_Bfree>
 800d194:	9b07      	ldr	r3, [sp, #28]
 800d196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d198:	9d04      	ldr	r5, [sp, #16]
 800d19a:	ea43 0102 	orr.w	r1, r3, r2
 800d19e:	9b06      	ldr	r3, [sp, #24]
 800d1a0:	4319      	orrs	r1, r3
 800d1a2:	d110      	bne.n	800d1c6 <_dtoa_r+0xa7e>
 800d1a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d1a8:	d029      	beq.n	800d1fe <_dtoa_r+0xab6>
 800d1aa:	9b05      	ldr	r3, [sp, #20]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	dd02      	ble.n	800d1b6 <_dtoa_r+0xa6e>
 800d1b0:	9b02      	ldr	r3, [sp, #8]
 800d1b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d1b6:	9b01      	ldr	r3, [sp, #4]
 800d1b8:	f883 9000 	strb.w	r9, [r3]
 800d1bc:	e774      	b.n	800d0a8 <_dtoa_r+0x960>
 800d1be:	4638      	mov	r0, r7
 800d1c0:	e7ba      	b.n	800d138 <_dtoa_r+0x9f0>
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	e7e1      	b.n	800d18a <_dtoa_r+0xa42>
 800d1c6:	9b05      	ldr	r3, [sp, #20]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	db04      	blt.n	800d1d6 <_dtoa_r+0xa8e>
 800d1cc:	9907      	ldr	r1, [sp, #28]
 800d1ce:	430b      	orrs	r3, r1
 800d1d0:	9906      	ldr	r1, [sp, #24]
 800d1d2:	430b      	orrs	r3, r1
 800d1d4:	d120      	bne.n	800d218 <_dtoa_r+0xad0>
 800d1d6:	2a00      	cmp	r2, #0
 800d1d8:	dded      	ble.n	800d1b6 <_dtoa_r+0xa6e>
 800d1da:	4651      	mov	r1, sl
 800d1dc:	2201      	movs	r2, #1
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f000 fd6e 	bl	800dcc0 <__lshift>
 800d1e4:	4631      	mov	r1, r6
 800d1e6:	4682      	mov	sl, r0
 800d1e8:	f000 fdd6 	bl	800dd98 <__mcmp>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	dc03      	bgt.n	800d1f8 <_dtoa_r+0xab0>
 800d1f0:	d1e1      	bne.n	800d1b6 <_dtoa_r+0xa6e>
 800d1f2:	f019 0f01 	tst.w	r9, #1
 800d1f6:	d0de      	beq.n	800d1b6 <_dtoa_r+0xa6e>
 800d1f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d1fc:	d1d8      	bne.n	800d1b0 <_dtoa_r+0xa68>
 800d1fe:	9a01      	ldr	r2, [sp, #4]
 800d200:	2339      	movs	r3, #57	; 0x39
 800d202:	7013      	strb	r3, [r2, #0]
 800d204:	462b      	mov	r3, r5
 800d206:	461d      	mov	r5, r3
 800d208:	3b01      	subs	r3, #1
 800d20a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d20e:	2a39      	cmp	r2, #57	; 0x39
 800d210:	d06c      	beq.n	800d2ec <_dtoa_r+0xba4>
 800d212:	3201      	adds	r2, #1
 800d214:	701a      	strb	r2, [r3, #0]
 800d216:	e747      	b.n	800d0a8 <_dtoa_r+0x960>
 800d218:	2a00      	cmp	r2, #0
 800d21a:	dd07      	ble.n	800d22c <_dtoa_r+0xae4>
 800d21c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d220:	d0ed      	beq.n	800d1fe <_dtoa_r+0xab6>
 800d222:	9a01      	ldr	r2, [sp, #4]
 800d224:	f109 0301 	add.w	r3, r9, #1
 800d228:	7013      	strb	r3, [r2, #0]
 800d22a:	e73d      	b.n	800d0a8 <_dtoa_r+0x960>
 800d22c:	9b04      	ldr	r3, [sp, #16]
 800d22e:	9a08      	ldr	r2, [sp, #32]
 800d230:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d234:	4293      	cmp	r3, r2
 800d236:	d043      	beq.n	800d2c0 <_dtoa_r+0xb78>
 800d238:	4651      	mov	r1, sl
 800d23a:	2300      	movs	r3, #0
 800d23c:	220a      	movs	r2, #10
 800d23e:	4620      	mov	r0, r4
 800d240:	f000 fb90 	bl	800d964 <__multadd>
 800d244:	45b8      	cmp	r8, r7
 800d246:	4682      	mov	sl, r0
 800d248:	f04f 0300 	mov.w	r3, #0
 800d24c:	f04f 020a 	mov.w	r2, #10
 800d250:	4641      	mov	r1, r8
 800d252:	4620      	mov	r0, r4
 800d254:	d107      	bne.n	800d266 <_dtoa_r+0xb1e>
 800d256:	f000 fb85 	bl	800d964 <__multadd>
 800d25a:	4680      	mov	r8, r0
 800d25c:	4607      	mov	r7, r0
 800d25e:	9b04      	ldr	r3, [sp, #16]
 800d260:	3301      	adds	r3, #1
 800d262:	9304      	str	r3, [sp, #16]
 800d264:	e775      	b.n	800d152 <_dtoa_r+0xa0a>
 800d266:	f000 fb7d 	bl	800d964 <__multadd>
 800d26a:	4639      	mov	r1, r7
 800d26c:	4680      	mov	r8, r0
 800d26e:	2300      	movs	r3, #0
 800d270:	220a      	movs	r2, #10
 800d272:	4620      	mov	r0, r4
 800d274:	f000 fb76 	bl	800d964 <__multadd>
 800d278:	4607      	mov	r7, r0
 800d27a:	e7f0      	b.n	800d25e <_dtoa_r+0xb16>
 800d27c:	9b04      	ldr	r3, [sp, #16]
 800d27e:	9301      	str	r3, [sp, #4]
 800d280:	9d00      	ldr	r5, [sp, #0]
 800d282:	4631      	mov	r1, r6
 800d284:	4650      	mov	r0, sl
 800d286:	f7ff f9d5 	bl	800c634 <quorem>
 800d28a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d28e:	9b00      	ldr	r3, [sp, #0]
 800d290:	f805 9b01 	strb.w	r9, [r5], #1
 800d294:	1aea      	subs	r2, r5, r3
 800d296:	9b01      	ldr	r3, [sp, #4]
 800d298:	4293      	cmp	r3, r2
 800d29a:	dd07      	ble.n	800d2ac <_dtoa_r+0xb64>
 800d29c:	4651      	mov	r1, sl
 800d29e:	2300      	movs	r3, #0
 800d2a0:	220a      	movs	r2, #10
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f000 fb5e 	bl	800d964 <__multadd>
 800d2a8:	4682      	mov	sl, r0
 800d2aa:	e7ea      	b.n	800d282 <_dtoa_r+0xb3a>
 800d2ac:	9b01      	ldr	r3, [sp, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	bfc8      	it	gt
 800d2b2:	461d      	movgt	r5, r3
 800d2b4:	9b00      	ldr	r3, [sp, #0]
 800d2b6:	bfd8      	it	le
 800d2b8:	2501      	movle	r5, #1
 800d2ba:	441d      	add	r5, r3
 800d2bc:	f04f 0800 	mov.w	r8, #0
 800d2c0:	4651      	mov	r1, sl
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	f000 fcfb 	bl	800dcc0 <__lshift>
 800d2ca:	4631      	mov	r1, r6
 800d2cc:	4682      	mov	sl, r0
 800d2ce:	f000 fd63 	bl	800dd98 <__mcmp>
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	dc96      	bgt.n	800d204 <_dtoa_r+0xabc>
 800d2d6:	d102      	bne.n	800d2de <_dtoa_r+0xb96>
 800d2d8:	f019 0f01 	tst.w	r9, #1
 800d2dc:	d192      	bne.n	800d204 <_dtoa_r+0xabc>
 800d2de:	462b      	mov	r3, r5
 800d2e0:	461d      	mov	r5, r3
 800d2e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2e6:	2a30      	cmp	r2, #48	; 0x30
 800d2e8:	d0fa      	beq.n	800d2e0 <_dtoa_r+0xb98>
 800d2ea:	e6dd      	b.n	800d0a8 <_dtoa_r+0x960>
 800d2ec:	9a00      	ldr	r2, [sp, #0]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d189      	bne.n	800d206 <_dtoa_r+0xabe>
 800d2f2:	f10b 0b01 	add.w	fp, fp, #1
 800d2f6:	2331      	movs	r3, #49	; 0x31
 800d2f8:	e796      	b.n	800d228 <_dtoa_r+0xae0>
 800d2fa:	4b0a      	ldr	r3, [pc, #40]	; (800d324 <_dtoa_r+0xbdc>)
 800d2fc:	f7ff ba99 	b.w	800c832 <_dtoa_r+0xea>
 800d300:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d302:	2b00      	cmp	r3, #0
 800d304:	f47f aa6d 	bne.w	800c7e2 <_dtoa_r+0x9a>
 800d308:	4b07      	ldr	r3, [pc, #28]	; (800d328 <_dtoa_r+0xbe0>)
 800d30a:	f7ff ba92 	b.w	800c832 <_dtoa_r+0xea>
 800d30e:	9b01      	ldr	r3, [sp, #4]
 800d310:	2b00      	cmp	r3, #0
 800d312:	dcb5      	bgt.n	800d280 <_dtoa_r+0xb38>
 800d314:	9b07      	ldr	r3, [sp, #28]
 800d316:	2b02      	cmp	r3, #2
 800d318:	f73f aeb1 	bgt.w	800d07e <_dtoa_r+0x936>
 800d31c:	e7b0      	b.n	800d280 <_dtoa_r+0xb38>
 800d31e:	bf00      	nop
 800d320:	080105c4 	.word	0x080105c4
 800d324:	08010524 	.word	0x08010524
 800d328:	08010548 	.word	0x08010548

0800d32c <__ssputs_r>:
 800d32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d330:	688e      	ldr	r6, [r1, #8]
 800d332:	461f      	mov	r7, r3
 800d334:	42be      	cmp	r6, r7
 800d336:	680b      	ldr	r3, [r1, #0]
 800d338:	4682      	mov	sl, r0
 800d33a:	460c      	mov	r4, r1
 800d33c:	4690      	mov	r8, r2
 800d33e:	d82c      	bhi.n	800d39a <__ssputs_r+0x6e>
 800d340:	898a      	ldrh	r2, [r1, #12]
 800d342:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d346:	d026      	beq.n	800d396 <__ssputs_r+0x6a>
 800d348:	6965      	ldr	r5, [r4, #20]
 800d34a:	6909      	ldr	r1, [r1, #16]
 800d34c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d350:	eba3 0901 	sub.w	r9, r3, r1
 800d354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d358:	1c7b      	adds	r3, r7, #1
 800d35a:	444b      	add	r3, r9
 800d35c:	106d      	asrs	r5, r5, #1
 800d35e:	429d      	cmp	r5, r3
 800d360:	bf38      	it	cc
 800d362:	461d      	movcc	r5, r3
 800d364:	0553      	lsls	r3, r2, #21
 800d366:	d527      	bpl.n	800d3b8 <__ssputs_r+0x8c>
 800d368:	4629      	mov	r1, r5
 800d36a:	f000 f95f 	bl	800d62c <_malloc_r>
 800d36e:	4606      	mov	r6, r0
 800d370:	b360      	cbz	r0, 800d3cc <__ssputs_r+0xa0>
 800d372:	6921      	ldr	r1, [r4, #16]
 800d374:	464a      	mov	r2, r9
 800d376:	f7ff f94f 	bl	800c618 <memcpy>
 800d37a:	89a3      	ldrh	r3, [r4, #12]
 800d37c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d384:	81a3      	strh	r3, [r4, #12]
 800d386:	6126      	str	r6, [r4, #16]
 800d388:	6165      	str	r5, [r4, #20]
 800d38a:	444e      	add	r6, r9
 800d38c:	eba5 0509 	sub.w	r5, r5, r9
 800d390:	6026      	str	r6, [r4, #0]
 800d392:	60a5      	str	r5, [r4, #8]
 800d394:	463e      	mov	r6, r7
 800d396:	42be      	cmp	r6, r7
 800d398:	d900      	bls.n	800d39c <__ssputs_r+0x70>
 800d39a:	463e      	mov	r6, r7
 800d39c:	6820      	ldr	r0, [r4, #0]
 800d39e:	4632      	mov	r2, r6
 800d3a0:	4641      	mov	r1, r8
 800d3a2:	f000 fe6b 	bl	800e07c <memmove>
 800d3a6:	68a3      	ldr	r3, [r4, #8]
 800d3a8:	1b9b      	subs	r3, r3, r6
 800d3aa:	60a3      	str	r3, [r4, #8]
 800d3ac:	6823      	ldr	r3, [r4, #0]
 800d3ae:	4433      	add	r3, r6
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	2000      	movs	r0, #0
 800d3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3b8:	462a      	mov	r2, r5
 800d3ba:	f000 fe30 	bl	800e01e <_realloc_r>
 800d3be:	4606      	mov	r6, r0
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d1e0      	bne.n	800d386 <__ssputs_r+0x5a>
 800d3c4:	6921      	ldr	r1, [r4, #16]
 800d3c6:	4650      	mov	r0, sl
 800d3c8:	f000 fefc 	bl	800e1c4 <_free_r>
 800d3cc:	230c      	movs	r3, #12
 800d3ce:	f8ca 3000 	str.w	r3, [sl]
 800d3d2:	89a3      	ldrh	r3, [r4, #12]
 800d3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3d8:	81a3      	strh	r3, [r4, #12]
 800d3da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3de:	e7e9      	b.n	800d3b4 <__ssputs_r+0x88>

0800d3e0 <_svfiprintf_r>:
 800d3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e4:	4698      	mov	r8, r3
 800d3e6:	898b      	ldrh	r3, [r1, #12]
 800d3e8:	061b      	lsls	r3, r3, #24
 800d3ea:	b09d      	sub	sp, #116	; 0x74
 800d3ec:	4607      	mov	r7, r0
 800d3ee:	460d      	mov	r5, r1
 800d3f0:	4614      	mov	r4, r2
 800d3f2:	d50e      	bpl.n	800d412 <_svfiprintf_r+0x32>
 800d3f4:	690b      	ldr	r3, [r1, #16]
 800d3f6:	b963      	cbnz	r3, 800d412 <_svfiprintf_r+0x32>
 800d3f8:	2140      	movs	r1, #64	; 0x40
 800d3fa:	f000 f917 	bl	800d62c <_malloc_r>
 800d3fe:	6028      	str	r0, [r5, #0]
 800d400:	6128      	str	r0, [r5, #16]
 800d402:	b920      	cbnz	r0, 800d40e <_svfiprintf_r+0x2e>
 800d404:	230c      	movs	r3, #12
 800d406:	603b      	str	r3, [r7, #0]
 800d408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d40c:	e0d0      	b.n	800d5b0 <_svfiprintf_r+0x1d0>
 800d40e:	2340      	movs	r3, #64	; 0x40
 800d410:	616b      	str	r3, [r5, #20]
 800d412:	2300      	movs	r3, #0
 800d414:	9309      	str	r3, [sp, #36]	; 0x24
 800d416:	2320      	movs	r3, #32
 800d418:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d41c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d420:	2330      	movs	r3, #48	; 0x30
 800d422:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d5c8 <_svfiprintf_r+0x1e8>
 800d426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d42a:	f04f 0901 	mov.w	r9, #1
 800d42e:	4623      	mov	r3, r4
 800d430:	469a      	mov	sl, r3
 800d432:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d436:	b10a      	cbz	r2, 800d43c <_svfiprintf_r+0x5c>
 800d438:	2a25      	cmp	r2, #37	; 0x25
 800d43a:	d1f9      	bne.n	800d430 <_svfiprintf_r+0x50>
 800d43c:	ebba 0b04 	subs.w	fp, sl, r4
 800d440:	d00b      	beq.n	800d45a <_svfiprintf_r+0x7a>
 800d442:	465b      	mov	r3, fp
 800d444:	4622      	mov	r2, r4
 800d446:	4629      	mov	r1, r5
 800d448:	4638      	mov	r0, r7
 800d44a:	f7ff ff6f 	bl	800d32c <__ssputs_r>
 800d44e:	3001      	adds	r0, #1
 800d450:	f000 80a9 	beq.w	800d5a6 <_svfiprintf_r+0x1c6>
 800d454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d456:	445a      	add	r2, fp
 800d458:	9209      	str	r2, [sp, #36]	; 0x24
 800d45a:	f89a 3000 	ldrb.w	r3, [sl]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	f000 80a1 	beq.w	800d5a6 <_svfiprintf_r+0x1c6>
 800d464:	2300      	movs	r3, #0
 800d466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d46a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d46e:	f10a 0a01 	add.w	sl, sl, #1
 800d472:	9304      	str	r3, [sp, #16]
 800d474:	9307      	str	r3, [sp, #28]
 800d476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d47a:	931a      	str	r3, [sp, #104]	; 0x68
 800d47c:	4654      	mov	r4, sl
 800d47e:	2205      	movs	r2, #5
 800d480:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d484:	4850      	ldr	r0, [pc, #320]	; (800d5c8 <_svfiprintf_r+0x1e8>)
 800d486:	f7f2 fea3 	bl	80001d0 <memchr>
 800d48a:	9a04      	ldr	r2, [sp, #16]
 800d48c:	b9d8      	cbnz	r0, 800d4c6 <_svfiprintf_r+0xe6>
 800d48e:	06d0      	lsls	r0, r2, #27
 800d490:	bf44      	itt	mi
 800d492:	2320      	movmi	r3, #32
 800d494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d498:	0711      	lsls	r1, r2, #28
 800d49a:	bf44      	itt	mi
 800d49c:	232b      	movmi	r3, #43	; 0x2b
 800d49e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d4a6:	2b2a      	cmp	r3, #42	; 0x2a
 800d4a8:	d015      	beq.n	800d4d6 <_svfiprintf_r+0xf6>
 800d4aa:	9a07      	ldr	r2, [sp, #28]
 800d4ac:	4654      	mov	r4, sl
 800d4ae:	2000      	movs	r0, #0
 800d4b0:	f04f 0c0a 	mov.w	ip, #10
 800d4b4:	4621      	mov	r1, r4
 800d4b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4ba:	3b30      	subs	r3, #48	; 0x30
 800d4bc:	2b09      	cmp	r3, #9
 800d4be:	d94d      	bls.n	800d55c <_svfiprintf_r+0x17c>
 800d4c0:	b1b0      	cbz	r0, 800d4f0 <_svfiprintf_r+0x110>
 800d4c2:	9207      	str	r2, [sp, #28]
 800d4c4:	e014      	b.n	800d4f0 <_svfiprintf_r+0x110>
 800d4c6:	eba0 0308 	sub.w	r3, r0, r8
 800d4ca:	fa09 f303 	lsl.w	r3, r9, r3
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	9304      	str	r3, [sp, #16]
 800d4d2:	46a2      	mov	sl, r4
 800d4d4:	e7d2      	b.n	800d47c <_svfiprintf_r+0x9c>
 800d4d6:	9b03      	ldr	r3, [sp, #12]
 800d4d8:	1d19      	adds	r1, r3, #4
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	9103      	str	r1, [sp, #12]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	bfbb      	ittet	lt
 800d4e2:	425b      	neglt	r3, r3
 800d4e4:	f042 0202 	orrlt.w	r2, r2, #2
 800d4e8:	9307      	strge	r3, [sp, #28]
 800d4ea:	9307      	strlt	r3, [sp, #28]
 800d4ec:	bfb8      	it	lt
 800d4ee:	9204      	strlt	r2, [sp, #16]
 800d4f0:	7823      	ldrb	r3, [r4, #0]
 800d4f2:	2b2e      	cmp	r3, #46	; 0x2e
 800d4f4:	d10c      	bne.n	800d510 <_svfiprintf_r+0x130>
 800d4f6:	7863      	ldrb	r3, [r4, #1]
 800d4f8:	2b2a      	cmp	r3, #42	; 0x2a
 800d4fa:	d134      	bne.n	800d566 <_svfiprintf_r+0x186>
 800d4fc:	9b03      	ldr	r3, [sp, #12]
 800d4fe:	1d1a      	adds	r2, r3, #4
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	9203      	str	r2, [sp, #12]
 800d504:	2b00      	cmp	r3, #0
 800d506:	bfb8      	it	lt
 800d508:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d50c:	3402      	adds	r4, #2
 800d50e:	9305      	str	r3, [sp, #20]
 800d510:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d5d8 <_svfiprintf_r+0x1f8>
 800d514:	7821      	ldrb	r1, [r4, #0]
 800d516:	2203      	movs	r2, #3
 800d518:	4650      	mov	r0, sl
 800d51a:	f7f2 fe59 	bl	80001d0 <memchr>
 800d51e:	b138      	cbz	r0, 800d530 <_svfiprintf_r+0x150>
 800d520:	9b04      	ldr	r3, [sp, #16]
 800d522:	eba0 000a 	sub.w	r0, r0, sl
 800d526:	2240      	movs	r2, #64	; 0x40
 800d528:	4082      	lsls	r2, r0
 800d52a:	4313      	orrs	r3, r2
 800d52c:	3401      	adds	r4, #1
 800d52e:	9304      	str	r3, [sp, #16]
 800d530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d534:	4825      	ldr	r0, [pc, #148]	; (800d5cc <_svfiprintf_r+0x1ec>)
 800d536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d53a:	2206      	movs	r2, #6
 800d53c:	f7f2 fe48 	bl	80001d0 <memchr>
 800d540:	2800      	cmp	r0, #0
 800d542:	d038      	beq.n	800d5b6 <_svfiprintf_r+0x1d6>
 800d544:	4b22      	ldr	r3, [pc, #136]	; (800d5d0 <_svfiprintf_r+0x1f0>)
 800d546:	bb1b      	cbnz	r3, 800d590 <_svfiprintf_r+0x1b0>
 800d548:	9b03      	ldr	r3, [sp, #12]
 800d54a:	3307      	adds	r3, #7
 800d54c:	f023 0307 	bic.w	r3, r3, #7
 800d550:	3308      	adds	r3, #8
 800d552:	9303      	str	r3, [sp, #12]
 800d554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d556:	4433      	add	r3, r6
 800d558:	9309      	str	r3, [sp, #36]	; 0x24
 800d55a:	e768      	b.n	800d42e <_svfiprintf_r+0x4e>
 800d55c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d560:	460c      	mov	r4, r1
 800d562:	2001      	movs	r0, #1
 800d564:	e7a6      	b.n	800d4b4 <_svfiprintf_r+0xd4>
 800d566:	2300      	movs	r3, #0
 800d568:	3401      	adds	r4, #1
 800d56a:	9305      	str	r3, [sp, #20]
 800d56c:	4619      	mov	r1, r3
 800d56e:	f04f 0c0a 	mov.w	ip, #10
 800d572:	4620      	mov	r0, r4
 800d574:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d578:	3a30      	subs	r2, #48	; 0x30
 800d57a:	2a09      	cmp	r2, #9
 800d57c:	d903      	bls.n	800d586 <_svfiprintf_r+0x1a6>
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d0c6      	beq.n	800d510 <_svfiprintf_r+0x130>
 800d582:	9105      	str	r1, [sp, #20]
 800d584:	e7c4      	b.n	800d510 <_svfiprintf_r+0x130>
 800d586:	fb0c 2101 	mla	r1, ip, r1, r2
 800d58a:	4604      	mov	r4, r0
 800d58c:	2301      	movs	r3, #1
 800d58e:	e7f0      	b.n	800d572 <_svfiprintf_r+0x192>
 800d590:	ab03      	add	r3, sp, #12
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	462a      	mov	r2, r5
 800d596:	4b0f      	ldr	r3, [pc, #60]	; (800d5d4 <_svfiprintf_r+0x1f4>)
 800d598:	a904      	add	r1, sp, #16
 800d59a:	4638      	mov	r0, r7
 800d59c:	f7fe fb6e 	bl	800bc7c <_printf_float>
 800d5a0:	1c42      	adds	r2, r0, #1
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	d1d6      	bne.n	800d554 <_svfiprintf_r+0x174>
 800d5a6:	89ab      	ldrh	r3, [r5, #12]
 800d5a8:	065b      	lsls	r3, r3, #25
 800d5aa:	f53f af2d 	bmi.w	800d408 <_svfiprintf_r+0x28>
 800d5ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5b0:	b01d      	add	sp, #116	; 0x74
 800d5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b6:	ab03      	add	r3, sp, #12
 800d5b8:	9300      	str	r3, [sp, #0]
 800d5ba:	462a      	mov	r2, r5
 800d5bc:	4b05      	ldr	r3, [pc, #20]	; (800d5d4 <_svfiprintf_r+0x1f4>)
 800d5be:	a904      	add	r1, sp, #16
 800d5c0:	4638      	mov	r0, r7
 800d5c2:	f7fe fdff 	bl	800c1c4 <_printf_i>
 800d5c6:	e7eb      	b.n	800d5a0 <_svfiprintf_r+0x1c0>
 800d5c8:	080105d5 	.word	0x080105d5
 800d5cc:	080105df 	.word	0x080105df
 800d5d0:	0800bc7d 	.word	0x0800bc7d
 800d5d4:	0800d32d 	.word	0x0800d32d
 800d5d8:	080105db 	.word	0x080105db

0800d5dc <malloc>:
 800d5dc:	4b02      	ldr	r3, [pc, #8]	; (800d5e8 <malloc+0xc>)
 800d5de:	4601      	mov	r1, r0
 800d5e0:	6818      	ldr	r0, [r3, #0]
 800d5e2:	f000 b823 	b.w	800d62c <_malloc_r>
 800d5e6:	bf00      	nop
 800d5e8:	20000070 	.word	0x20000070

0800d5ec <sbrk_aligned>:
 800d5ec:	b570      	push	{r4, r5, r6, lr}
 800d5ee:	4e0e      	ldr	r6, [pc, #56]	; (800d628 <sbrk_aligned+0x3c>)
 800d5f0:	460c      	mov	r4, r1
 800d5f2:	6831      	ldr	r1, [r6, #0]
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	b911      	cbnz	r1, 800d5fe <sbrk_aligned+0x12>
 800d5f8:	f000 fd8e 	bl	800e118 <_sbrk_r>
 800d5fc:	6030      	str	r0, [r6, #0]
 800d5fe:	4621      	mov	r1, r4
 800d600:	4628      	mov	r0, r5
 800d602:	f000 fd89 	bl	800e118 <_sbrk_r>
 800d606:	1c43      	adds	r3, r0, #1
 800d608:	d00a      	beq.n	800d620 <sbrk_aligned+0x34>
 800d60a:	1cc4      	adds	r4, r0, #3
 800d60c:	f024 0403 	bic.w	r4, r4, #3
 800d610:	42a0      	cmp	r0, r4
 800d612:	d007      	beq.n	800d624 <sbrk_aligned+0x38>
 800d614:	1a21      	subs	r1, r4, r0
 800d616:	4628      	mov	r0, r5
 800d618:	f000 fd7e 	bl	800e118 <_sbrk_r>
 800d61c:	3001      	adds	r0, #1
 800d61e:	d101      	bne.n	800d624 <sbrk_aligned+0x38>
 800d620:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d624:	4620      	mov	r0, r4
 800d626:	bd70      	pop	{r4, r5, r6, pc}
 800d628:	20005394 	.word	0x20005394

0800d62c <_malloc_r>:
 800d62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d630:	1ccd      	adds	r5, r1, #3
 800d632:	f025 0503 	bic.w	r5, r5, #3
 800d636:	3508      	adds	r5, #8
 800d638:	2d0c      	cmp	r5, #12
 800d63a:	bf38      	it	cc
 800d63c:	250c      	movcc	r5, #12
 800d63e:	2d00      	cmp	r5, #0
 800d640:	4607      	mov	r7, r0
 800d642:	db01      	blt.n	800d648 <_malloc_r+0x1c>
 800d644:	42a9      	cmp	r1, r5
 800d646:	d905      	bls.n	800d654 <_malloc_r+0x28>
 800d648:	230c      	movs	r3, #12
 800d64a:	603b      	str	r3, [r7, #0]
 800d64c:	2600      	movs	r6, #0
 800d64e:	4630      	mov	r0, r6
 800d650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d654:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d728 <_malloc_r+0xfc>
 800d658:	f000 f916 	bl	800d888 <__malloc_lock>
 800d65c:	f8d8 3000 	ldr.w	r3, [r8]
 800d660:	461c      	mov	r4, r3
 800d662:	bb5c      	cbnz	r4, 800d6bc <_malloc_r+0x90>
 800d664:	4629      	mov	r1, r5
 800d666:	4638      	mov	r0, r7
 800d668:	f7ff ffc0 	bl	800d5ec <sbrk_aligned>
 800d66c:	1c43      	adds	r3, r0, #1
 800d66e:	4604      	mov	r4, r0
 800d670:	d155      	bne.n	800d71e <_malloc_r+0xf2>
 800d672:	f8d8 4000 	ldr.w	r4, [r8]
 800d676:	4626      	mov	r6, r4
 800d678:	2e00      	cmp	r6, #0
 800d67a:	d145      	bne.n	800d708 <_malloc_r+0xdc>
 800d67c:	2c00      	cmp	r4, #0
 800d67e:	d048      	beq.n	800d712 <_malloc_r+0xe6>
 800d680:	6823      	ldr	r3, [r4, #0]
 800d682:	4631      	mov	r1, r6
 800d684:	4638      	mov	r0, r7
 800d686:	eb04 0903 	add.w	r9, r4, r3
 800d68a:	f000 fd45 	bl	800e118 <_sbrk_r>
 800d68e:	4581      	cmp	r9, r0
 800d690:	d13f      	bne.n	800d712 <_malloc_r+0xe6>
 800d692:	6821      	ldr	r1, [r4, #0]
 800d694:	1a6d      	subs	r5, r5, r1
 800d696:	4629      	mov	r1, r5
 800d698:	4638      	mov	r0, r7
 800d69a:	f7ff ffa7 	bl	800d5ec <sbrk_aligned>
 800d69e:	3001      	adds	r0, #1
 800d6a0:	d037      	beq.n	800d712 <_malloc_r+0xe6>
 800d6a2:	6823      	ldr	r3, [r4, #0]
 800d6a4:	442b      	add	r3, r5
 800d6a6:	6023      	str	r3, [r4, #0]
 800d6a8:	f8d8 3000 	ldr.w	r3, [r8]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d038      	beq.n	800d722 <_malloc_r+0xf6>
 800d6b0:	685a      	ldr	r2, [r3, #4]
 800d6b2:	42a2      	cmp	r2, r4
 800d6b4:	d12b      	bne.n	800d70e <_malloc_r+0xe2>
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	605a      	str	r2, [r3, #4]
 800d6ba:	e00f      	b.n	800d6dc <_malloc_r+0xb0>
 800d6bc:	6822      	ldr	r2, [r4, #0]
 800d6be:	1b52      	subs	r2, r2, r5
 800d6c0:	d41f      	bmi.n	800d702 <_malloc_r+0xd6>
 800d6c2:	2a0b      	cmp	r2, #11
 800d6c4:	d917      	bls.n	800d6f6 <_malloc_r+0xca>
 800d6c6:	1961      	adds	r1, r4, r5
 800d6c8:	42a3      	cmp	r3, r4
 800d6ca:	6025      	str	r5, [r4, #0]
 800d6cc:	bf18      	it	ne
 800d6ce:	6059      	strne	r1, [r3, #4]
 800d6d0:	6863      	ldr	r3, [r4, #4]
 800d6d2:	bf08      	it	eq
 800d6d4:	f8c8 1000 	streq.w	r1, [r8]
 800d6d8:	5162      	str	r2, [r4, r5]
 800d6da:	604b      	str	r3, [r1, #4]
 800d6dc:	4638      	mov	r0, r7
 800d6de:	f104 060b 	add.w	r6, r4, #11
 800d6e2:	f000 f8d7 	bl	800d894 <__malloc_unlock>
 800d6e6:	f026 0607 	bic.w	r6, r6, #7
 800d6ea:	1d23      	adds	r3, r4, #4
 800d6ec:	1af2      	subs	r2, r6, r3
 800d6ee:	d0ae      	beq.n	800d64e <_malloc_r+0x22>
 800d6f0:	1b9b      	subs	r3, r3, r6
 800d6f2:	50a3      	str	r3, [r4, r2]
 800d6f4:	e7ab      	b.n	800d64e <_malloc_r+0x22>
 800d6f6:	42a3      	cmp	r3, r4
 800d6f8:	6862      	ldr	r2, [r4, #4]
 800d6fa:	d1dd      	bne.n	800d6b8 <_malloc_r+0x8c>
 800d6fc:	f8c8 2000 	str.w	r2, [r8]
 800d700:	e7ec      	b.n	800d6dc <_malloc_r+0xb0>
 800d702:	4623      	mov	r3, r4
 800d704:	6864      	ldr	r4, [r4, #4]
 800d706:	e7ac      	b.n	800d662 <_malloc_r+0x36>
 800d708:	4634      	mov	r4, r6
 800d70a:	6876      	ldr	r6, [r6, #4]
 800d70c:	e7b4      	b.n	800d678 <_malloc_r+0x4c>
 800d70e:	4613      	mov	r3, r2
 800d710:	e7cc      	b.n	800d6ac <_malloc_r+0x80>
 800d712:	230c      	movs	r3, #12
 800d714:	603b      	str	r3, [r7, #0]
 800d716:	4638      	mov	r0, r7
 800d718:	f000 f8bc 	bl	800d894 <__malloc_unlock>
 800d71c:	e797      	b.n	800d64e <_malloc_r+0x22>
 800d71e:	6025      	str	r5, [r4, #0]
 800d720:	e7dc      	b.n	800d6dc <_malloc_r+0xb0>
 800d722:	605b      	str	r3, [r3, #4]
 800d724:	deff      	udf	#255	; 0xff
 800d726:	bf00      	nop
 800d728:	20005390 	.word	0x20005390

0800d72c <__sflush_r>:
 800d72c:	898a      	ldrh	r2, [r1, #12]
 800d72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d732:	4605      	mov	r5, r0
 800d734:	0710      	lsls	r0, r2, #28
 800d736:	460c      	mov	r4, r1
 800d738:	d458      	bmi.n	800d7ec <__sflush_r+0xc0>
 800d73a:	684b      	ldr	r3, [r1, #4]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	dc05      	bgt.n	800d74c <__sflush_r+0x20>
 800d740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d742:	2b00      	cmp	r3, #0
 800d744:	dc02      	bgt.n	800d74c <__sflush_r+0x20>
 800d746:	2000      	movs	r0, #0
 800d748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d74c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d74e:	2e00      	cmp	r6, #0
 800d750:	d0f9      	beq.n	800d746 <__sflush_r+0x1a>
 800d752:	2300      	movs	r3, #0
 800d754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d758:	682f      	ldr	r7, [r5, #0]
 800d75a:	6a21      	ldr	r1, [r4, #32]
 800d75c:	602b      	str	r3, [r5, #0]
 800d75e:	d032      	beq.n	800d7c6 <__sflush_r+0x9a>
 800d760:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d762:	89a3      	ldrh	r3, [r4, #12]
 800d764:	075a      	lsls	r2, r3, #29
 800d766:	d505      	bpl.n	800d774 <__sflush_r+0x48>
 800d768:	6863      	ldr	r3, [r4, #4]
 800d76a:	1ac0      	subs	r0, r0, r3
 800d76c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d76e:	b10b      	cbz	r3, 800d774 <__sflush_r+0x48>
 800d770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d772:	1ac0      	subs	r0, r0, r3
 800d774:	2300      	movs	r3, #0
 800d776:	4602      	mov	r2, r0
 800d778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d77a:	6a21      	ldr	r1, [r4, #32]
 800d77c:	4628      	mov	r0, r5
 800d77e:	47b0      	blx	r6
 800d780:	1c43      	adds	r3, r0, #1
 800d782:	89a3      	ldrh	r3, [r4, #12]
 800d784:	d106      	bne.n	800d794 <__sflush_r+0x68>
 800d786:	6829      	ldr	r1, [r5, #0]
 800d788:	291d      	cmp	r1, #29
 800d78a:	d82b      	bhi.n	800d7e4 <__sflush_r+0xb8>
 800d78c:	4a29      	ldr	r2, [pc, #164]	; (800d834 <__sflush_r+0x108>)
 800d78e:	410a      	asrs	r2, r1
 800d790:	07d6      	lsls	r6, r2, #31
 800d792:	d427      	bmi.n	800d7e4 <__sflush_r+0xb8>
 800d794:	2200      	movs	r2, #0
 800d796:	6062      	str	r2, [r4, #4]
 800d798:	04d9      	lsls	r1, r3, #19
 800d79a:	6922      	ldr	r2, [r4, #16]
 800d79c:	6022      	str	r2, [r4, #0]
 800d79e:	d504      	bpl.n	800d7aa <__sflush_r+0x7e>
 800d7a0:	1c42      	adds	r2, r0, #1
 800d7a2:	d101      	bne.n	800d7a8 <__sflush_r+0x7c>
 800d7a4:	682b      	ldr	r3, [r5, #0]
 800d7a6:	b903      	cbnz	r3, 800d7aa <__sflush_r+0x7e>
 800d7a8:	6560      	str	r0, [r4, #84]	; 0x54
 800d7aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7ac:	602f      	str	r7, [r5, #0]
 800d7ae:	2900      	cmp	r1, #0
 800d7b0:	d0c9      	beq.n	800d746 <__sflush_r+0x1a>
 800d7b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7b6:	4299      	cmp	r1, r3
 800d7b8:	d002      	beq.n	800d7c0 <__sflush_r+0x94>
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	f000 fd02 	bl	800e1c4 <_free_r>
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	6360      	str	r0, [r4, #52]	; 0x34
 800d7c4:	e7c0      	b.n	800d748 <__sflush_r+0x1c>
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	47b0      	blx	r6
 800d7cc:	1c41      	adds	r1, r0, #1
 800d7ce:	d1c8      	bne.n	800d762 <__sflush_r+0x36>
 800d7d0:	682b      	ldr	r3, [r5, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d0c5      	beq.n	800d762 <__sflush_r+0x36>
 800d7d6:	2b1d      	cmp	r3, #29
 800d7d8:	d001      	beq.n	800d7de <__sflush_r+0xb2>
 800d7da:	2b16      	cmp	r3, #22
 800d7dc:	d101      	bne.n	800d7e2 <__sflush_r+0xb6>
 800d7de:	602f      	str	r7, [r5, #0]
 800d7e0:	e7b1      	b.n	800d746 <__sflush_r+0x1a>
 800d7e2:	89a3      	ldrh	r3, [r4, #12]
 800d7e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7e8:	81a3      	strh	r3, [r4, #12]
 800d7ea:	e7ad      	b.n	800d748 <__sflush_r+0x1c>
 800d7ec:	690f      	ldr	r7, [r1, #16]
 800d7ee:	2f00      	cmp	r7, #0
 800d7f0:	d0a9      	beq.n	800d746 <__sflush_r+0x1a>
 800d7f2:	0793      	lsls	r3, r2, #30
 800d7f4:	680e      	ldr	r6, [r1, #0]
 800d7f6:	bf08      	it	eq
 800d7f8:	694b      	ldreq	r3, [r1, #20]
 800d7fa:	600f      	str	r7, [r1, #0]
 800d7fc:	bf18      	it	ne
 800d7fe:	2300      	movne	r3, #0
 800d800:	eba6 0807 	sub.w	r8, r6, r7
 800d804:	608b      	str	r3, [r1, #8]
 800d806:	f1b8 0f00 	cmp.w	r8, #0
 800d80a:	dd9c      	ble.n	800d746 <__sflush_r+0x1a>
 800d80c:	6a21      	ldr	r1, [r4, #32]
 800d80e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d810:	4643      	mov	r3, r8
 800d812:	463a      	mov	r2, r7
 800d814:	4628      	mov	r0, r5
 800d816:	47b0      	blx	r6
 800d818:	2800      	cmp	r0, #0
 800d81a:	dc06      	bgt.n	800d82a <__sflush_r+0xfe>
 800d81c:	89a3      	ldrh	r3, [r4, #12]
 800d81e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d822:	81a3      	strh	r3, [r4, #12]
 800d824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d828:	e78e      	b.n	800d748 <__sflush_r+0x1c>
 800d82a:	4407      	add	r7, r0
 800d82c:	eba8 0800 	sub.w	r8, r8, r0
 800d830:	e7e9      	b.n	800d806 <__sflush_r+0xda>
 800d832:	bf00      	nop
 800d834:	dfbffffe 	.word	0xdfbffffe

0800d838 <_fflush_r>:
 800d838:	b538      	push	{r3, r4, r5, lr}
 800d83a:	690b      	ldr	r3, [r1, #16]
 800d83c:	4605      	mov	r5, r0
 800d83e:	460c      	mov	r4, r1
 800d840:	b913      	cbnz	r3, 800d848 <_fflush_r+0x10>
 800d842:	2500      	movs	r5, #0
 800d844:	4628      	mov	r0, r5
 800d846:	bd38      	pop	{r3, r4, r5, pc}
 800d848:	b118      	cbz	r0, 800d852 <_fflush_r+0x1a>
 800d84a:	6a03      	ldr	r3, [r0, #32]
 800d84c:	b90b      	cbnz	r3, 800d852 <_fflush_r+0x1a>
 800d84e:	f7fe fe75 	bl	800c53c <__sinit>
 800d852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d0f3      	beq.n	800d842 <_fflush_r+0xa>
 800d85a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d85c:	07d0      	lsls	r0, r2, #31
 800d85e:	d404      	bmi.n	800d86a <_fflush_r+0x32>
 800d860:	0599      	lsls	r1, r3, #22
 800d862:	d402      	bmi.n	800d86a <_fflush_r+0x32>
 800d864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d866:	f7fe fed5 	bl	800c614 <__retarget_lock_acquire_recursive>
 800d86a:	4628      	mov	r0, r5
 800d86c:	4621      	mov	r1, r4
 800d86e:	f7ff ff5d 	bl	800d72c <__sflush_r>
 800d872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d874:	07da      	lsls	r2, r3, #31
 800d876:	4605      	mov	r5, r0
 800d878:	d4e4      	bmi.n	800d844 <_fflush_r+0xc>
 800d87a:	89a3      	ldrh	r3, [r4, #12]
 800d87c:	059b      	lsls	r3, r3, #22
 800d87e:	d4e1      	bmi.n	800d844 <_fflush_r+0xc>
 800d880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d882:	f7fe fec8 	bl	800c616 <__retarget_lock_release_recursive>
 800d886:	e7dd      	b.n	800d844 <_fflush_r+0xc>

0800d888 <__malloc_lock>:
 800d888:	4801      	ldr	r0, [pc, #4]	; (800d890 <__malloc_lock+0x8>)
 800d88a:	f7fe bec3 	b.w	800c614 <__retarget_lock_acquire_recursive>
 800d88e:	bf00      	nop
 800d890:	2000538c 	.word	0x2000538c

0800d894 <__malloc_unlock>:
 800d894:	4801      	ldr	r0, [pc, #4]	; (800d89c <__malloc_unlock+0x8>)
 800d896:	f7fe bebe 	b.w	800c616 <__retarget_lock_release_recursive>
 800d89a:	bf00      	nop
 800d89c:	2000538c 	.word	0x2000538c

0800d8a0 <_Balloc>:
 800d8a0:	b570      	push	{r4, r5, r6, lr}
 800d8a2:	69c6      	ldr	r6, [r0, #28]
 800d8a4:	4604      	mov	r4, r0
 800d8a6:	460d      	mov	r5, r1
 800d8a8:	b976      	cbnz	r6, 800d8c8 <_Balloc+0x28>
 800d8aa:	2010      	movs	r0, #16
 800d8ac:	f7ff fe96 	bl	800d5dc <malloc>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	61e0      	str	r0, [r4, #28]
 800d8b4:	b920      	cbnz	r0, 800d8c0 <_Balloc+0x20>
 800d8b6:	4b18      	ldr	r3, [pc, #96]	; (800d918 <_Balloc+0x78>)
 800d8b8:	4818      	ldr	r0, [pc, #96]	; (800d91c <_Balloc+0x7c>)
 800d8ba:	216b      	movs	r1, #107	; 0x6b
 800d8bc:	f000 fc4e 	bl	800e15c <__assert_func>
 800d8c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8c4:	6006      	str	r6, [r0, #0]
 800d8c6:	60c6      	str	r6, [r0, #12]
 800d8c8:	69e6      	ldr	r6, [r4, #28]
 800d8ca:	68f3      	ldr	r3, [r6, #12]
 800d8cc:	b183      	cbz	r3, 800d8f0 <_Balloc+0x50>
 800d8ce:	69e3      	ldr	r3, [r4, #28]
 800d8d0:	68db      	ldr	r3, [r3, #12]
 800d8d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8d6:	b9b8      	cbnz	r0, 800d908 <_Balloc+0x68>
 800d8d8:	2101      	movs	r1, #1
 800d8da:	fa01 f605 	lsl.w	r6, r1, r5
 800d8de:	1d72      	adds	r2, r6, #5
 800d8e0:	0092      	lsls	r2, r2, #2
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	f000 fc58 	bl	800e198 <_calloc_r>
 800d8e8:	b160      	cbz	r0, 800d904 <_Balloc+0x64>
 800d8ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d8ee:	e00e      	b.n	800d90e <_Balloc+0x6e>
 800d8f0:	2221      	movs	r2, #33	; 0x21
 800d8f2:	2104      	movs	r1, #4
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f000 fc4f 	bl	800e198 <_calloc_r>
 800d8fa:	69e3      	ldr	r3, [r4, #28]
 800d8fc:	60f0      	str	r0, [r6, #12]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d1e4      	bne.n	800d8ce <_Balloc+0x2e>
 800d904:	2000      	movs	r0, #0
 800d906:	bd70      	pop	{r4, r5, r6, pc}
 800d908:	6802      	ldr	r2, [r0, #0]
 800d90a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d90e:	2300      	movs	r3, #0
 800d910:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d914:	e7f7      	b.n	800d906 <_Balloc+0x66>
 800d916:	bf00      	nop
 800d918:	08010555 	.word	0x08010555
 800d91c:	080105e6 	.word	0x080105e6

0800d920 <_Bfree>:
 800d920:	b570      	push	{r4, r5, r6, lr}
 800d922:	69c6      	ldr	r6, [r0, #28]
 800d924:	4605      	mov	r5, r0
 800d926:	460c      	mov	r4, r1
 800d928:	b976      	cbnz	r6, 800d948 <_Bfree+0x28>
 800d92a:	2010      	movs	r0, #16
 800d92c:	f7ff fe56 	bl	800d5dc <malloc>
 800d930:	4602      	mov	r2, r0
 800d932:	61e8      	str	r0, [r5, #28]
 800d934:	b920      	cbnz	r0, 800d940 <_Bfree+0x20>
 800d936:	4b09      	ldr	r3, [pc, #36]	; (800d95c <_Bfree+0x3c>)
 800d938:	4809      	ldr	r0, [pc, #36]	; (800d960 <_Bfree+0x40>)
 800d93a:	218f      	movs	r1, #143	; 0x8f
 800d93c:	f000 fc0e 	bl	800e15c <__assert_func>
 800d940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d944:	6006      	str	r6, [r0, #0]
 800d946:	60c6      	str	r6, [r0, #12]
 800d948:	b13c      	cbz	r4, 800d95a <_Bfree+0x3a>
 800d94a:	69eb      	ldr	r3, [r5, #28]
 800d94c:	6862      	ldr	r2, [r4, #4]
 800d94e:	68db      	ldr	r3, [r3, #12]
 800d950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d954:	6021      	str	r1, [r4, #0]
 800d956:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d95a:	bd70      	pop	{r4, r5, r6, pc}
 800d95c:	08010555 	.word	0x08010555
 800d960:	080105e6 	.word	0x080105e6

0800d964 <__multadd>:
 800d964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d968:	690d      	ldr	r5, [r1, #16]
 800d96a:	4607      	mov	r7, r0
 800d96c:	460c      	mov	r4, r1
 800d96e:	461e      	mov	r6, r3
 800d970:	f101 0c14 	add.w	ip, r1, #20
 800d974:	2000      	movs	r0, #0
 800d976:	f8dc 3000 	ldr.w	r3, [ip]
 800d97a:	b299      	uxth	r1, r3
 800d97c:	fb02 6101 	mla	r1, r2, r1, r6
 800d980:	0c1e      	lsrs	r6, r3, #16
 800d982:	0c0b      	lsrs	r3, r1, #16
 800d984:	fb02 3306 	mla	r3, r2, r6, r3
 800d988:	b289      	uxth	r1, r1
 800d98a:	3001      	adds	r0, #1
 800d98c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d990:	4285      	cmp	r5, r0
 800d992:	f84c 1b04 	str.w	r1, [ip], #4
 800d996:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d99a:	dcec      	bgt.n	800d976 <__multadd+0x12>
 800d99c:	b30e      	cbz	r6, 800d9e2 <__multadd+0x7e>
 800d99e:	68a3      	ldr	r3, [r4, #8]
 800d9a0:	42ab      	cmp	r3, r5
 800d9a2:	dc19      	bgt.n	800d9d8 <__multadd+0x74>
 800d9a4:	6861      	ldr	r1, [r4, #4]
 800d9a6:	4638      	mov	r0, r7
 800d9a8:	3101      	adds	r1, #1
 800d9aa:	f7ff ff79 	bl	800d8a0 <_Balloc>
 800d9ae:	4680      	mov	r8, r0
 800d9b0:	b928      	cbnz	r0, 800d9be <__multadd+0x5a>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	4b0c      	ldr	r3, [pc, #48]	; (800d9e8 <__multadd+0x84>)
 800d9b6:	480d      	ldr	r0, [pc, #52]	; (800d9ec <__multadd+0x88>)
 800d9b8:	21ba      	movs	r1, #186	; 0xba
 800d9ba:	f000 fbcf 	bl	800e15c <__assert_func>
 800d9be:	6922      	ldr	r2, [r4, #16]
 800d9c0:	3202      	adds	r2, #2
 800d9c2:	f104 010c 	add.w	r1, r4, #12
 800d9c6:	0092      	lsls	r2, r2, #2
 800d9c8:	300c      	adds	r0, #12
 800d9ca:	f7fe fe25 	bl	800c618 <memcpy>
 800d9ce:	4621      	mov	r1, r4
 800d9d0:	4638      	mov	r0, r7
 800d9d2:	f7ff ffa5 	bl	800d920 <_Bfree>
 800d9d6:	4644      	mov	r4, r8
 800d9d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d9dc:	3501      	adds	r5, #1
 800d9de:	615e      	str	r6, [r3, #20]
 800d9e0:	6125      	str	r5, [r4, #16]
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9e8:	080105c4 	.word	0x080105c4
 800d9ec:	080105e6 	.word	0x080105e6

0800d9f0 <__hi0bits>:
 800d9f0:	0c03      	lsrs	r3, r0, #16
 800d9f2:	041b      	lsls	r3, r3, #16
 800d9f4:	b9d3      	cbnz	r3, 800da2c <__hi0bits+0x3c>
 800d9f6:	0400      	lsls	r0, r0, #16
 800d9f8:	2310      	movs	r3, #16
 800d9fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d9fe:	bf04      	itt	eq
 800da00:	0200      	lsleq	r0, r0, #8
 800da02:	3308      	addeq	r3, #8
 800da04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800da08:	bf04      	itt	eq
 800da0a:	0100      	lsleq	r0, r0, #4
 800da0c:	3304      	addeq	r3, #4
 800da0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800da12:	bf04      	itt	eq
 800da14:	0080      	lsleq	r0, r0, #2
 800da16:	3302      	addeq	r3, #2
 800da18:	2800      	cmp	r0, #0
 800da1a:	db05      	blt.n	800da28 <__hi0bits+0x38>
 800da1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800da20:	f103 0301 	add.w	r3, r3, #1
 800da24:	bf08      	it	eq
 800da26:	2320      	moveq	r3, #32
 800da28:	4618      	mov	r0, r3
 800da2a:	4770      	bx	lr
 800da2c:	2300      	movs	r3, #0
 800da2e:	e7e4      	b.n	800d9fa <__hi0bits+0xa>

0800da30 <__lo0bits>:
 800da30:	6803      	ldr	r3, [r0, #0]
 800da32:	f013 0207 	ands.w	r2, r3, #7
 800da36:	d00c      	beq.n	800da52 <__lo0bits+0x22>
 800da38:	07d9      	lsls	r1, r3, #31
 800da3a:	d422      	bmi.n	800da82 <__lo0bits+0x52>
 800da3c:	079a      	lsls	r2, r3, #30
 800da3e:	bf49      	itett	mi
 800da40:	085b      	lsrmi	r3, r3, #1
 800da42:	089b      	lsrpl	r3, r3, #2
 800da44:	6003      	strmi	r3, [r0, #0]
 800da46:	2201      	movmi	r2, #1
 800da48:	bf5c      	itt	pl
 800da4a:	6003      	strpl	r3, [r0, #0]
 800da4c:	2202      	movpl	r2, #2
 800da4e:	4610      	mov	r0, r2
 800da50:	4770      	bx	lr
 800da52:	b299      	uxth	r1, r3
 800da54:	b909      	cbnz	r1, 800da5a <__lo0bits+0x2a>
 800da56:	0c1b      	lsrs	r3, r3, #16
 800da58:	2210      	movs	r2, #16
 800da5a:	b2d9      	uxtb	r1, r3
 800da5c:	b909      	cbnz	r1, 800da62 <__lo0bits+0x32>
 800da5e:	3208      	adds	r2, #8
 800da60:	0a1b      	lsrs	r3, r3, #8
 800da62:	0719      	lsls	r1, r3, #28
 800da64:	bf04      	itt	eq
 800da66:	091b      	lsreq	r3, r3, #4
 800da68:	3204      	addeq	r2, #4
 800da6a:	0799      	lsls	r1, r3, #30
 800da6c:	bf04      	itt	eq
 800da6e:	089b      	lsreq	r3, r3, #2
 800da70:	3202      	addeq	r2, #2
 800da72:	07d9      	lsls	r1, r3, #31
 800da74:	d403      	bmi.n	800da7e <__lo0bits+0x4e>
 800da76:	085b      	lsrs	r3, r3, #1
 800da78:	f102 0201 	add.w	r2, r2, #1
 800da7c:	d003      	beq.n	800da86 <__lo0bits+0x56>
 800da7e:	6003      	str	r3, [r0, #0]
 800da80:	e7e5      	b.n	800da4e <__lo0bits+0x1e>
 800da82:	2200      	movs	r2, #0
 800da84:	e7e3      	b.n	800da4e <__lo0bits+0x1e>
 800da86:	2220      	movs	r2, #32
 800da88:	e7e1      	b.n	800da4e <__lo0bits+0x1e>
	...

0800da8c <__i2b>:
 800da8c:	b510      	push	{r4, lr}
 800da8e:	460c      	mov	r4, r1
 800da90:	2101      	movs	r1, #1
 800da92:	f7ff ff05 	bl	800d8a0 <_Balloc>
 800da96:	4602      	mov	r2, r0
 800da98:	b928      	cbnz	r0, 800daa6 <__i2b+0x1a>
 800da9a:	4b05      	ldr	r3, [pc, #20]	; (800dab0 <__i2b+0x24>)
 800da9c:	4805      	ldr	r0, [pc, #20]	; (800dab4 <__i2b+0x28>)
 800da9e:	f240 1145 	movw	r1, #325	; 0x145
 800daa2:	f000 fb5b 	bl	800e15c <__assert_func>
 800daa6:	2301      	movs	r3, #1
 800daa8:	6144      	str	r4, [r0, #20]
 800daaa:	6103      	str	r3, [r0, #16]
 800daac:	bd10      	pop	{r4, pc}
 800daae:	bf00      	nop
 800dab0:	080105c4 	.word	0x080105c4
 800dab4:	080105e6 	.word	0x080105e6

0800dab8 <__multiply>:
 800dab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dabc:	4691      	mov	r9, r2
 800dabe:	690a      	ldr	r2, [r1, #16]
 800dac0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	bfb8      	it	lt
 800dac8:	460b      	movlt	r3, r1
 800daca:	460c      	mov	r4, r1
 800dacc:	bfbc      	itt	lt
 800dace:	464c      	movlt	r4, r9
 800dad0:	4699      	movlt	r9, r3
 800dad2:	6927      	ldr	r7, [r4, #16]
 800dad4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dad8:	68a3      	ldr	r3, [r4, #8]
 800dada:	6861      	ldr	r1, [r4, #4]
 800dadc:	eb07 060a 	add.w	r6, r7, sl
 800dae0:	42b3      	cmp	r3, r6
 800dae2:	b085      	sub	sp, #20
 800dae4:	bfb8      	it	lt
 800dae6:	3101      	addlt	r1, #1
 800dae8:	f7ff feda 	bl	800d8a0 <_Balloc>
 800daec:	b930      	cbnz	r0, 800dafc <__multiply+0x44>
 800daee:	4602      	mov	r2, r0
 800daf0:	4b44      	ldr	r3, [pc, #272]	; (800dc04 <__multiply+0x14c>)
 800daf2:	4845      	ldr	r0, [pc, #276]	; (800dc08 <__multiply+0x150>)
 800daf4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800daf8:	f000 fb30 	bl	800e15c <__assert_func>
 800dafc:	f100 0514 	add.w	r5, r0, #20
 800db00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800db04:	462b      	mov	r3, r5
 800db06:	2200      	movs	r2, #0
 800db08:	4543      	cmp	r3, r8
 800db0a:	d321      	bcc.n	800db50 <__multiply+0x98>
 800db0c:	f104 0314 	add.w	r3, r4, #20
 800db10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800db14:	f109 0314 	add.w	r3, r9, #20
 800db18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800db1c:	9202      	str	r2, [sp, #8]
 800db1e:	1b3a      	subs	r2, r7, r4
 800db20:	3a15      	subs	r2, #21
 800db22:	f022 0203 	bic.w	r2, r2, #3
 800db26:	3204      	adds	r2, #4
 800db28:	f104 0115 	add.w	r1, r4, #21
 800db2c:	428f      	cmp	r7, r1
 800db2e:	bf38      	it	cc
 800db30:	2204      	movcc	r2, #4
 800db32:	9201      	str	r2, [sp, #4]
 800db34:	9a02      	ldr	r2, [sp, #8]
 800db36:	9303      	str	r3, [sp, #12]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d80c      	bhi.n	800db56 <__multiply+0x9e>
 800db3c:	2e00      	cmp	r6, #0
 800db3e:	dd03      	ble.n	800db48 <__multiply+0x90>
 800db40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800db44:	2b00      	cmp	r3, #0
 800db46:	d05b      	beq.n	800dc00 <__multiply+0x148>
 800db48:	6106      	str	r6, [r0, #16]
 800db4a:	b005      	add	sp, #20
 800db4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db50:	f843 2b04 	str.w	r2, [r3], #4
 800db54:	e7d8      	b.n	800db08 <__multiply+0x50>
 800db56:	f8b3 a000 	ldrh.w	sl, [r3]
 800db5a:	f1ba 0f00 	cmp.w	sl, #0
 800db5e:	d024      	beq.n	800dbaa <__multiply+0xf2>
 800db60:	f104 0e14 	add.w	lr, r4, #20
 800db64:	46a9      	mov	r9, r5
 800db66:	f04f 0c00 	mov.w	ip, #0
 800db6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800db6e:	f8d9 1000 	ldr.w	r1, [r9]
 800db72:	fa1f fb82 	uxth.w	fp, r2
 800db76:	b289      	uxth	r1, r1
 800db78:	fb0a 110b 	mla	r1, sl, fp, r1
 800db7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800db80:	f8d9 2000 	ldr.w	r2, [r9]
 800db84:	4461      	add	r1, ip
 800db86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800db8a:	fb0a c20b 	mla	r2, sl, fp, ip
 800db8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800db92:	b289      	uxth	r1, r1
 800db94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800db98:	4577      	cmp	r7, lr
 800db9a:	f849 1b04 	str.w	r1, [r9], #4
 800db9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dba2:	d8e2      	bhi.n	800db6a <__multiply+0xb2>
 800dba4:	9a01      	ldr	r2, [sp, #4]
 800dba6:	f845 c002 	str.w	ip, [r5, r2]
 800dbaa:	9a03      	ldr	r2, [sp, #12]
 800dbac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dbb0:	3304      	adds	r3, #4
 800dbb2:	f1b9 0f00 	cmp.w	r9, #0
 800dbb6:	d021      	beq.n	800dbfc <__multiply+0x144>
 800dbb8:	6829      	ldr	r1, [r5, #0]
 800dbba:	f104 0c14 	add.w	ip, r4, #20
 800dbbe:	46ae      	mov	lr, r5
 800dbc0:	f04f 0a00 	mov.w	sl, #0
 800dbc4:	f8bc b000 	ldrh.w	fp, [ip]
 800dbc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dbcc:	fb09 220b 	mla	r2, r9, fp, r2
 800dbd0:	4452      	add	r2, sl
 800dbd2:	b289      	uxth	r1, r1
 800dbd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dbd8:	f84e 1b04 	str.w	r1, [lr], #4
 800dbdc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dbe0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dbe4:	f8be 1000 	ldrh.w	r1, [lr]
 800dbe8:	fb09 110a 	mla	r1, r9, sl, r1
 800dbec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dbf0:	4567      	cmp	r7, ip
 800dbf2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dbf6:	d8e5      	bhi.n	800dbc4 <__multiply+0x10c>
 800dbf8:	9a01      	ldr	r2, [sp, #4]
 800dbfa:	50a9      	str	r1, [r5, r2]
 800dbfc:	3504      	adds	r5, #4
 800dbfe:	e799      	b.n	800db34 <__multiply+0x7c>
 800dc00:	3e01      	subs	r6, #1
 800dc02:	e79b      	b.n	800db3c <__multiply+0x84>
 800dc04:	080105c4 	.word	0x080105c4
 800dc08:	080105e6 	.word	0x080105e6

0800dc0c <__pow5mult>:
 800dc0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc10:	4615      	mov	r5, r2
 800dc12:	f012 0203 	ands.w	r2, r2, #3
 800dc16:	4606      	mov	r6, r0
 800dc18:	460f      	mov	r7, r1
 800dc1a:	d007      	beq.n	800dc2c <__pow5mult+0x20>
 800dc1c:	4c25      	ldr	r4, [pc, #148]	; (800dcb4 <__pow5mult+0xa8>)
 800dc1e:	3a01      	subs	r2, #1
 800dc20:	2300      	movs	r3, #0
 800dc22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc26:	f7ff fe9d 	bl	800d964 <__multadd>
 800dc2a:	4607      	mov	r7, r0
 800dc2c:	10ad      	asrs	r5, r5, #2
 800dc2e:	d03d      	beq.n	800dcac <__pow5mult+0xa0>
 800dc30:	69f4      	ldr	r4, [r6, #28]
 800dc32:	b97c      	cbnz	r4, 800dc54 <__pow5mult+0x48>
 800dc34:	2010      	movs	r0, #16
 800dc36:	f7ff fcd1 	bl	800d5dc <malloc>
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	61f0      	str	r0, [r6, #28]
 800dc3e:	b928      	cbnz	r0, 800dc4c <__pow5mult+0x40>
 800dc40:	4b1d      	ldr	r3, [pc, #116]	; (800dcb8 <__pow5mult+0xac>)
 800dc42:	481e      	ldr	r0, [pc, #120]	; (800dcbc <__pow5mult+0xb0>)
 800dc44:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dc48:	f000 fa88 	bl	800e15c <__assert_func>
 800dc4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc50:	6004      	str	r4, [r0, #0]
 800dc52:	60c4      	str	r4, [r0, #12]
 800dc54:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dc58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc5c:	b94c      	cbnz	r4, 800dc72 <__pow5mult+0x66>
 800dc5e:	f240 2171 	movw	r1, #625	; 0x271
 800dc62:	4630      	mov	r0, r6
 800dc64:	f7ff ff12 	bl	800da8c <__i2b>
 800dc68:	2300      	movs	r3, #0
 800dc6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc6e:	4604      	mov	r4, r0
 800dc70:	6003      	str	r3, [r0, #0]
 800dc72:	f04f 0900 	mov.w	r9, #0
 800dc76:	07eb      	lsls	r3, r5, #31
 800dc78:	d50a      	bpl.n	800dc90 <__pow5mult+0x84>
 800dc7a:	4639      	mov	r1, r7
 800dc7c:	4622      	mov	r2, r4
 800dc7e:	4630      	mov	r0, r6
 800dc80:	f7ff ff1a 	bl	800dab8 <__multiply>
 800dc84:	4639      	mov	r1, r7
 800dc86:	4680      	mov	r8, r0
 800dc88:	4630      	mov	r0, r6
 800dc8a:	f7ff fe49 	bl	800d920 <_Bfree>
 800dc8e:	4647      	mov	r7, r8
 800dc90:	106d      	asrs	r5, r5, #1
 800dc92:	d00b      	beq.n	800dcac <__pow5mult+0xa0>
 800dc94:	6820      	ldr	r0, [r4, #0]
 800dc96:	b938      	cbnz	r0, 800dca8 <__pow5mult+0x9c>
 800dc98:	4622      	mov	r2, r4
 800dc9a:	4621      	mov	r1, r4
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	f7ff ff0b 	bl	800dab8 <__multiply>
 800dca2:	6020      	str	r0, [r4, #0]
 800dca4:	f8c0 9000 	str.w	r9, [r0]
 800dca8:	4604      	mov	r4, r0
 800dcaa:	e7e4      	b.n	800dc76 <__pow5mult+0x6a>
 800dcac:	4638      	mov	r0, r7
 800dcae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcb2:	bf00      	nop
 800dcb4:	08010730 	.word	0x08010730
 800dcb8:	08010555 	.word	0x08010555
 800dcbc:	080105e6 	.word	0x080105e6

0800dcc0 <__lshift>:
 800dcc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcc4:	460c      	mov	r4, r1
 800dcc6:	6849      	ldr	r1, [r1, #4]
 800dcc8:	6923      	ldr	r3, [r4, #16]
 800dcca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dcce:	68a3      	ldr	r3, [r4, #8]
 800dcd0:	4607      	mov	r7, r0
 800dcd2:	4691      	mov	r9, r2
 800dcd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dcd8:	f108 0601 	add.w	r6, r8, #1
 800dcdc:	42b3      	cmp	r3, r6
 800dcde:	db0b      	blt.n	800dcf8 <__lshift+0x38>
 800dce0:	4638      	mov	r0, r7
 800dce2:	f7ff fddd 	bl	800d8a0 <_Balloc>
 800dce6:	4605      	mov	r5, r0
 800dce8:	b948      	cbnz	r0, 800dcfe <__lshift+0x3e>
 800dcea:	4602      	mov	r2, r0
 800dcec:	4b28      	ldr	r3, [pc, #160]	; (800dd90 <__lshift+0xd0>)
 800dcee:	4829      	ldr	r0, [pc, #164]	; (800dd94 <__lshift+0xd4>)
 800dcf0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dcf4:	f000 fa32 	bl	800e15c <__assert_func>
 800dcf8:	3101      	adds	r1, #1
 800dcfa:	005b      	lsls	r3, r3, #1
 800dcfc:	e7ee      	b.n	800dcdc <__lshift+0x1c>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	f100 0114 	add.w	r1, r0, #20
 800dd04:	f100 0210 	add.w	r2, r0, #16
 800dd08:	4618      	mov	r0, r3
 800dd0a:	4553      	cmp	r3, sl
 800dd0c:	db33      	blt.n	800dd76 <__lshift+0xb6>
 800dd0e:	6920      	ldr	r0, [r4, #16]
 800dd10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd14:	f104 0314 	add.w	r3, r4, #20
 800dd18:	f019 091f 	ands.w	r9, r9, #31
 800dd1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd24:	d02b      	beq.n	800dd7e <__lshift+0xbe>
 800dd26:	f1c9 0e20 	rsb	lr, r9, #32
 800dd2a:	468a      	mov	sl, r1
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	6818      	ldr	r0, [r3, #0]
 800dd30:	fa00 f009 	lsl.w	r0, r0, r9
 800dd34:	4310      	orrs	r0, r2
 800dd36:	f84a 0b04 	str.w	r0, [sl], #4
 800dd3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd3e:	459c      	cmp	ip, r3
 800dd40:	fa22 f20e 	lsr.w	r2, r2, lr
 800dd44:	d8f3      	bhi.n	800dd2e <__lshift+0x6e>
 800dd46:	ebac 0304 	sub.w	r3, ip, r4
 800dd4a:	3b15      	subs	r3, #21
 800dd4c:	f023 0303 	bic.w	r3, r3, #3
 800dd50:	3304      	adds	r3, #4
 800dd52:	f104 0015 	add.w	r0, r4, #21
 800dd56:	4584      	cmp	ip, r0
 800dd58:	bf38      	it	cc
 800dd5a:	2304      	movcc	r3, #4
 800dd5c:	50ca      	str	r2, [r1, r3]
 800dd5e:	b10a      	cbz	r2, 800dd64 <__lshift+0xa4>
 800dd60:	f108 0602 	add.w	r6, r8, #2
 800dd64:	3e01      	subs	r6, #1
 800dd66:	4638      	mov	r0, r7
 800dd68:	612e      	str	r6, [r5, #16]
 800dd6a:	4621      	mov	r1, r4
 800dd6c:	f7ff fdd8 	bl	800d920 <_Bfree>
 800dd70:	4628      	mov	r0, r5
 800dd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd76:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	e7c5      	b.n	800dd0a <__lshift+0x4a>
 800dd7e:	3904      	subs	r1, #4
 800dd80:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd84:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd88:	459c      	cmp	ip, r3
 800dd8a:	d8f9      	bhi.n	800dd80 <__lshift+0xc0>
 800dd8c:	e7ea      	b.n	800dd64 <__lshift+0xa4>
 800dd8e:	bf00      	nop
 800dd90:	080105c4 	.word	0x080105c4
 800dd94:	080105e6 	.word	0x080105e6

0800dd98 <__mcmp>:
 800dd98:	b530      	push	{r4, r5, lr}
 800dd9a:	6902      	ldr	r2, [r0, #16]
 800dd9c:	690c      	ldr	r4, [r1, #16]
 800dd9e:	1b12      	subs	r2, r2, r4
 800dda0:	d10e      	bne.n	800ddc0 <__mcmp+0x28>
 800dda2:	f100 0314 	add.w	r3, r0, #20
 800dda6:	3114      	adds	r1, #20
 800dda8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ddac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ddb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ddb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ddb8:	42a5      	cmp	r5, r4
 800ddba:	d003      	beq.n	800ddc4 <__mcmp+0x2c>
 800ddbc:	d305      	bcc.n	800ddca <__mcmp+0x32>
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	4610      	mov	r0, r2
 800ddc2:	bd30      	pop	{r4, r5, pc}
 800ddc4:	4283      	cmp	r3, r0
 800ddc6:	d3f3      	bcc.n	800ddb0 <__mcmp+0x18>
 800ddc8:	e7fa      	b.n	800ddc0 <__mcmp+0x28>
 800ddca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddce:	e7f7      	b.n	800ddc0 <__mcmp+0x28>

0800ddd0 <__mdiff>:
 800ddd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd4:	460c      	mov	r4, r1
 800ddd6:	4606      	mov	r6, r0
 800ddd8:	4611      	mov	r1, r2
 800ddda:	4620      	mov	r0, r4
 800dddc:	4690      	mov	r8, r2
 800ddde:	f7ff ffdb 	bl	800dd98 <__mcmp>
 800dde2:	1e05      	subs	r5, r0, #0
 800dde4:	d110      	bne.n	800de08 <__mdiff+0x38>
 800dde6:	4629      	mov	r1, r5
 800dde8:	4630      	mov	r0, r6
 800ddea:	f7ff fd59 	bl	800d8a0 <_Balloc>
 800ddee:	b930      	cbnz	r0, 800ddfe <__mdiff+0x2e>
 800ddf0:	4b3a      	ldr	r3, [pc, #232]	; (800dedc <__mdiff+0x10c>)
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	f240 2137 	movw	r1, #567	; 0x237
 800ddf8:	4839      	ldr	r0, [pc, #228]	; (800dee0 <__mdiff+0x110>)
 800ddfa:	f000 f9af 	bl	800e15c <__assert_func>
 800ddfe:	2301      	movs	r3, #1
 800de00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de08:	bfa4      	itt	ge
 800de0a:	4643      	movge	r3, r8
 800de0c:	46a0      	movge	r8, r4
 800de0e:	4630      	mov	r0, r6
 800de10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800de14:	bfa6      	itte	ge
 800de16:	461c      	movge	r4, r3
 800de18:	2500      	movge	r5, #0
 800de1a:	2501      	movlt	r5, #1
 800de1c:	f7ff fd40 	bl	800d8a0 <_Balloc>
 800de20:	b920      	cbnz	r0, 800de2c <__mdiff+0x5c>
 800de22:	4b2e      	ldr	r3, [pc, #184]	; (800dedc <__mdiff+0x10c>)
 800de24:	4602      	mov	r2, r0
 800de26:	f240 2145 	movw	r1, #581	; 0x245
 800de2a:	e7e5      	b.n	800ddf8 <__mdiff+0x28>
 800de2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800de30:	6926      	ldr	r6, [r4, #16]
 800de32:	60c5      	str	r5, [r0, #12]
 800de34:	f104 0914 	add.w	r9, r4, #20
 800de38:	f108 0514 	add.w	r5, r8, #20
 800de3c:	f100 0e14 	add.w	lr, r0, #20
 800de40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800de44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800de48:	f108 0210 	add.w	r2, r8, #16
 800de4c:	46f2      	mov	sl, lr
 800de4e:	2100      	movs	r1, #0
 800de50:	f859 3b04 	ldr.w	r3, [r9], #4
 800de54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800de58:	fa11 f88b 	uxtah	r8, r1, fp
 800de5c:	b299      	uxth	r1, r3
 800de5e:	0c1b      	lsrs	r3, r3, #16
 800de60:	eba8 0801 	sub.w	r8, r8, r1
 800de64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800de68:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800de6c:	fa1f f888 	uxth.w	r8, r8
 800de70:	1419      	asrs	r1, r3, #16
 800de72:	454e      	cmp	r6, r9
 800de74:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800de78:	f84a 3b04 	str.w	r3, [sl], #4
 800de7c:	d8e8      	bhi.n	800de50 <__mdiff+0x80>
 800de7e:	1b33      	subs	r3, r6, r4
 800de80:	3b15      	subs	r3, #21
 800de82:	f023 0303 	bic.w	r3, r3, #3
 800de86:	3304      	adds	r3, #4
 800de88:	3415      	adds	r4, #21
 800de8a:	42a6      	cmp	r6, r4
 800de8c:	bf38      	it	cc
 800de8e:	2304      	movcc	r3, #4
 800de90:	441d      	add	r5, r3
 800de92:	4473      	add	r3, lr
 800de94:	469e      	mov	lr, r3
 800de96:	462e      	mov	r6, r5
 800de98:	4566      	cmp	r6, ip
 800de9a:	d30e      	bcc.n	800deba <__mdiff+0xea>
 800de9c:	f10c 0203 	add.w	r2, ip, #3
 800dea0:	1b52      	subs	r2, r2, r5
 800dea2:	f022 0203 	bic.w	r2, r2, #3
 800dea6:	3d03      	subs	r5, #3
 800dea8:	45ac      	cmp	ip, r5
 800deaa:	bf38      	it	cc
 800deac:	2200      	movcc	r2, #0
 800deae:	4413      	add	r3, r2
 800deb0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800deb4:	b17a      	cbz	r2, 800ded6 <__mdiff+0x106>
 800deb6:	6107      	str	r7, [r0, #16]
 800deb8:	e7a4      	b.n	800de04 <__mdiff+0x34>
 800deba:	f856 8b04 	ldr.w	r8, [r6], #4
 800debe:	fa11 f288 	uxtah	r2, r1, r8
 800dec2:	1414      	asrs	r4, r2, #16
 800dec4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dec8:	b292      	uxth	r2, r2
 800deca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dece:	f84e 2b04 	str.w	r2, [lr], #4
 800ded2:	1421      	asrs	r1, r4, #16
 800ded4:	e7e0      	b.n	800de98 <__mdiff+0xc8>
 800ded6:	3f01      	subs	r7, #1
 800ded8:	e7ea      	b.n	800deb0 <__mdiff+0xe0>
 800deda:	bf00      	nop
 800dedc:	080105c4 	.word	0x080105c4
 800dee0:	080105e6 	.word	0x080105e6

0800dee4 <__d2b>:
 800dee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dee8:	460f      	mov	r7, r1
 800deea:	2101      	movs	r1, #1
 800deec:	ec59 8b10 	vmov	r8, r9, d0
 800def0:	4616      	mov	r6, r2
 800def2:	f7ff fcd5 	bl	800d8a0 <_Balloc>
 800def6:	4604      	mov	r4, r0
 800def8:	b930      	cbnz	r0, 800df08 <__d2b+0x24>
 800defa:	4602      	mov	r2, r0
 800defc:	4b24      	ldr	r3, [pc, #144]	; (800df90 <__d2b+0xac>)
 800defe:	4825      	ldr	r0, [pc, #148]	; (800df94 <__d2b+0xb0>)
 800df00:	f240 310f 	movw	r1, #783	; 0x30f
 800df04:	f000 f92a 	bl	800e15c <__assert_func>
 800df08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800df0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df10:	bb2d      	cbnz	r5, 800df5e <__d2b+0x7a>
 800df12:	9301      	str	r3, [sp, #4]
 800df14:	f1b8 0300 	subs.w	r3, r8, #0
 800df18:	d026      	beq.n	800df68 <__d2b+0x84>
 800df1a:	4668      	mov	r0, sp
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	f7ff fd87 	bl	800da30 <__lo0bits>
 800df22:	e9dd 1200 	ldrd	r1, r2, [sp]
 800df26:	b1e8      	cbz	r0, 800df64 <__d2b+0x80>
 800df28:	f1c0 0320 	rsb	r3, r0, #32
 800df2c:	fa02 f303 	lsl.w	r3, r2, r3
 800df30:	430b      	orrs	r3, r1
 800df32:	40c2      	lsrs	r2, r0
 800df34:	6163      	str	r3, [r4, #20]
 800df36:	9201      	str	r2, [sp, #4]
 800df38:	9b01      	ldr	r3, [sp, #4]
 800df3a:	61a3      	str	r3, [r4, #24]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	bf14      	ite	ne
 800df40:	2202      	movne	r2, #2
 800df42:	2201      	moveq	r2, #1
 800df44:	6122      	str	r2, [r4, #16]
 800df46:	b1bd      	cbz	r5, 800df78 <__d2b+0x94>
 800df48:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800df4c:	4405      	add	r5, r0
 800df4e:	603d      	str	r5, [r7, #0]
 800df50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df54:	6030      	str	r0, [r6, #0]
 800df56:	4620      	mov	r0, r4
 800df58:	b003      	add	sp, #12
 800df5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df62:	e7d6      	b.n	800df12 <__d2b+0x2e>
 800df64:	6161      	str	r1, [r4, #20]
 800df66:	e7e7      	b.n	800df38 <__d2b+0x54>
 800df68:	a801      	add	r0, sp, #4
 800df6a:	f7ff fd61 	bl	800da30 <__lo0bits>
 800df6e:	9b01      	ldr	r3, [sp, #4]
 800df70:	6163      	str	r3, [r4, #20]
 800df72:	3020      	adds	r0, #32
 800df74:	2201      	movs	r2, #1
 800df76:	e7e5      	b.n	800df44 <__d2b+0x60>
 800df78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df80:	6038      	str	r0, [r7, #0]
 800df82:	6918      	ldr	r0, [r3, #16]
 800df84:	f7ff fd34 	bl	800d9f0 <__hi0bits>
 800df88:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df8c:	e7e2      	b.n	800df54 <__d2b+0x70>
 800df8e:	bf00      	nop
 800df90:	080105c4 	.word	0x080105c4
 800df94:	080105e6 	.word	0x080105e6

0800df98 <__sread>:
 800df98:	b510      	push	{r4, lr}
 800df9a:	460c      	mov	r4, r1
 800df9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfa0:	f000 f8a8 	bl	800e0f4 <_read_r>
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	bfab      	itete	ge
 800dfa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dfaa:	89a3      	ldrhlt	r3, [r4, #12]
 800dfac:	181b      	addge	r3, r3, r0
 800dfae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dfb2:	bfac      	ite	ge
 800dfb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dfb6:	81a3      	strhlt	r3, [r4, #12]
 800dfb8:	bd10      	pop	{r4, pc}

0800dfba <__swrite>:
 800dfba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfbe:	461f      	mov	r7, r3
 800dfc0:	898b      	ldrh	r3, [r1, #12]
 800dfc2:	05db      	lsls	r3, r3, #23
 800dfc4:	4605      	mov	r5, r0
 800dfc6:	460c      	mov	r4, r1
 800dfc8:	4616      	mov	r6, r2
 800dfca:	d505      	bpl.n	800dfd8 <__swrite+0x1e>
 800dfcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfd0:	2302      	movs	r3, #2
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f000 f87c 	bl	800e0d0 <_lseek_r>
 800dfd8:	89a3      	ldrh	r3, [r4, #12]
 800dfda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dfe2:	81a3      	strh	r3, [r4, #12]
 800dfe4:	4632      	mov	r2, r6
 800dfe6:	463b      	mov	r3, r7
 800dfe8:	4628      	mov	r0, r5
 800dfea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfee:	f000 b8a3 	b.w	800e138 <_write_r>

0800dff2 <__sseek>:
 800dff2:	b510      	push	{r4, lr}
 800dff4:	460c      	mov	r4, r1
 800dff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dffa:	f000 f869 	bl	800e0d0 <_lseek_r>
 800dffe:	1c43      	adds	r3, r0, #1
 800e000:	89a3      	ldrh	r3, [r4, #12]
 800e002:	bf15      	itete	ne
 800e004:	6560      	strne	r0, [r4, #84]	; 0x54
 800e006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e00a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e00e:	81a3      	strheq	r3, [r4, #12]
 800e010:	bf18      	it	ne
 800e012:	81a3      	strhne	r3, [r4, #12]
 800e014:	bd10      	pop	{r4, pc}

0800e016 <__sclose>:
 800e016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e01a:	f000 b849 	b.w	800e0b0 <_close_r>

0800e01e <_realloc_r>:
 800e01e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e022:	4680      	mov	r8, r0
 800e024:	4614      	mov	r4, r2
 800e026:	460e      	mov	r6, r1
 800e028:	b921      	cbnz	r1, 800e034 <_realloc_r+0x16>
 800e02a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e02e:	4611      	mov	r1, r2
 800e030:	f7ff bafc 	b.w	800d62c <_malloc_r>
 800e034:	b92a      	cbnz	r2, 800e042 <_realloc_r+0x24>
 800e036:	f000 f8c5 	bl	800e1c4 <_free_r>
 800e03a:	4625      	mov	r5, r4
 800e03c:	4628      	mov	r0, r5
 800e03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e042:	f000 f91d 	bl	800e280 <_malloc_usable_size_r>
 800e046:	4284      	cmp	r4, r0
 800e048:	4607      	mov	r7, r0
 800e04a:	d802      	bhi.n	800e052 <_realloc_r+0x34>
 800e04c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e050:	d812      	bhi.n	800e078 <_realloc_r+0x5a>
 800e052:	4621      	mov	r1, r4
 800e054:	4640      	mov	r0, r8
 800e056:	f7ff fae9 	bl	800d62c <_malloc_r>
 800e05a:	4605      	mov	r5, r0
 800e05c:	2800      	cmp	r0, #0
 800e05e:	d0ed      	beq.n	800e03c <_realloc_r+0x1e>
 800e060:	42bc      	cmp	r4, r7
 800e062:	4622      	mov	r2, r4
 800e064:	4631      	mov	r1, r6
 800e066:	bf28      	it	cs
 800e068:	463a      	movcs	r2, r7
 800e06a:	f7fe fad5 	bl	800c618 <memcpy>
 800e06e:	4631      	mov	r1, r6
 800e070:	4640      	mov	r0, r8
 800e072:	f000 f8a7 	bl	800e1c4 <_free_r>
 800e076:	e7e1      	b.n	800e03c <_realloc_r+0x1e>
 800e078:	4635      	mov	r5, r6
 800e07a:	e7df      	b.n	800e03c <_realloc_r+0x1e>

0800e07c <memmove>:
 800e07c:	4288      	cmp	r0, r1
 800e07e:	b510      	push	{r4, lr}
 800e080:	eb01 0402 	add.w	r4, r1, r2
 800e084:	d902      	bls.n	800e08c <memmove+0x10>
 800e086:	4284      	cmp	r4, r0
 800e088:	4623      	mov	r3, r4
 800e08a:	d807      	bhi.n	800e09c <memmove+0x20>
 800e08c:	1e43      	subs	r3, r0, #1
 800e08e:	42a1      	cmp	r1, r4
 800e090:	d008      	beq.n	800e0a4 <memmove+0x28>
 800e092:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e09a:	e7f8      	b.n	800e08e <memmove+0x12>
 800e09c:	4402      	add	r2, r0
 800e09e:	4601      	mov	r1, r0
 800e0a0:	428a      	cmp	r2, r1
 800e0a2:	d100      	bne.n	800e0a6 <memmove+0x2a>
 800e0a4:	bd10      	pop	{r4, pc}
 800e0a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0ae:	e7f7      	b.n	800e0a0 <memmove+0x24>

0800e0b0 <_close_r>:
 800e0b0:	b538      	push	{r3, r4, r5, lr}
 800e0b2:	4d06      	ldr	r5, [pc, #24]	; (800e0cc <_close_r+0x1c>)
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	4604      	mov	r4, r0
 800e0b8:	4608      	mov	r0, r1
 800e0ba:	602b      	str	r3, [r5, #0]
 800e0bc:	f7f5 ffb5 	bl	800402a <_close>
 800e0c0:	1c43      	adds	r3, r0, #1
 800e0c2:	d102      	bne.n	800e0ca <_close_r+0x1a>
 800e0c4:	682b      	ldr	r3, [r5, #0]
 800e0c6:	b103      	cbz	r3, 800e0ca <_close_r+0x1a>
 800e0c8:	6023      	str	r3, [r4, #0]
 800e0ca:	bd38      	pop	{r3, r4, r5, pc}
 800e0cc:	20005398 	.word	0x20005398

0800e0d0 <_lseek_r>:
 800e0d0:	b538      	push	{r3, r4, r5, lr}
 800e0d2:	4d07      	ldr	r5, [pc, #28]	; (800e0f0 <_lseek_r+0x20>)
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	4608      	mov	r0, r1
 800e0d8:	4611      	mov	r1, r2
 800e0da:	2200      	movs	r2, #0
 800e0dc:	602a      	str	r2, [r5, #0]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	f7f5 ffca 	bl	8004078 <_lseek>
 800e0e4:	1c43      	adds	r3, r0, #1
 800e0e6:	d102      	bne.n	800e0ee <_lseek_r+0x1e>
 800e0e8:	682b      	ldr	r3, [r5, #0]
 800e0ea:	b103      	cbz	r3, 800e0ee <_lseek_r+0x1e>
 800e0ec:	6023      	str	r3, [r4, #0]
 800e0ee:	bd38      	pop	{r3, r4, r5, pc}
 800e0f0:	20005398 	.word	0x20005398

0800e0f4 <_read_r>:
 800e0f4:	b538      	push	{r3, r4, r5, lr}
 800e0f6:	4d07      	ldr	r5, [pc, #28]	; (800e114 <_read_r+0x20>)
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	4608      	mov	r0, r1
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	2200      	movs	r2, #0
 800e100:	602a      	str	r2, [r5, #0]
 800e102:	461a      	mov	r2, r3
 800e104:	f7f5 ff58 	bl	8003fb8 <_read>
 800e108:	1c43      	adds	r3, r0, #1
 800e10a:	d102      	bne.n	800e112 <_read_r+0x1e>
 800e10c:	682b      	ldr	r3, [r5, #0]
 800e10e:	b103      	cbz	r3, 800e112 <_read_r+0x1e>
 800e110:	6023      	str	r3, [r4, #0]
 800e112:	bd38      	pop	{r3, r4, r5, pc}
 800e114:	20005398 	.word	0x20005398

0800e118 <_sbrk_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	4d06      	ldr	r5, [pc, #24]	; (800e134 <_sbrk_r+0x1c>)
 800e11c:	2300      	movs	r3, #0
 800e11e:	4604      	mov	r4, r0
 800e120:	4608      	mov	r0, r1
 800e122:	602b      	str	r3, [r5, #0]
 800e124:	f7f5 ffb6 	bl	8004094 <_sbrk>
 800e128:	1c43      	adds	r3, r0, #1
 800e12a:	d102      	bne.n	800e132 <_sbrk_r+0x1a>
 800e12c:	682b      	ldr	r3, [r5, #0]
 800e12e:	b103      	cbz	r3, 800e132 <_sbrk_r+0x1a>
 800e130:	6023      	str	r3, [r4, #0]
 800e132:	bd38      	pop	{r3, r4, r5, pc}
 800e134:	20005398 	.word	0x20005398

0800e138 <_write_r>:
 800e138:	b538      	push	{r3, r4, r5, lr}
 800e13a:	4d07      	ldr	r5, [pc, #28]	; (800e158 <_write_r+0x20>)
 800e13c:	4604      	mov	r4, r0
 800e13e:	4608      	mov	r0, r1
 800e140:	4611      	mov	r1, r2
 800e142:	2200      	movs	r2, #0
 800e144:	602a      	str	r2, [r5, #0]
 800e146:	461a      	mov	r2, r3
 800e148:	f7f5 ff53 	bl	8003ff2 <_write>
 800e14c:	1c43      	adds	r3, r0, #1
 800e14e:	d102      	bne.n	800e156 <_write_r+0x1e>
 800e150:	682b      	ldr	r3, [r5, #0]
 800e152:	b103      	cbz	r3, 800e156 <_write_r+0x1e>
 800e154:	6023      	str	r3, [r4, #0]
 800e156:	bd38      	pop	{r3, r4, r5, pc}
 800e158:	20005398 	.word	0x20005398

0800e15c <__assert_func>:
 800e15c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e15e:	4614      	mov	r4, r2
 800e160:	461a      	mov	r2, r3
 800e162:	4b09      	ldr	r3, [pc, #36]	; (800e188 <__assert_func+0x2c>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4605      	mov	r5, r0
 800e168:	68d8      	ldr	r0, [r3, #12]
 800e16a:	b14c      	cbz	r4, 800e180 <__assert_func+0x24>
 800e16c:	4b07      	ldr	r3, [pc, #28]	; (800e18c <__assert_func+0x30>)
 800e16e:	9100      	str	r1, [sp, #0]
 800e170:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e174:	4906      	ldr	r1, [pc, #24]	; (800e190 <__assert_func+0x34>)
 800e176:	462b      	mov	r3, r5
 800e178:	f000 f88a 	bl	800e290 <fiprintf>
 800e17c:	f000 f8a7 	bl	800e2ce <abort>
 800e180:	4b04      	ldr	r3, [pc, #16]	; (800e194 <__assert_func+0x38>)
 800e182:	461c      	mov	r4, r3
 800e184:	e7f3      	b.n	800e16e <__assert_func+0x12>
 800e186:	bf00      	nop
 800e188:	20000070 	.word	0x20000070
 800e18c:	08010847 	.word	0x08010847
 800e190:	08010854 	.word	0x08010854
 800e194:	08010882 	.word	0x08010882

0800e198 <_calloc_r>:
 800e198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e19a:	fba1 2402 	umull	r2, r4, r1, r2
 800e19e:	b94c      	cbnz	r4, 800e1b4 <_calloc_r+0x1c>
 800e1a0:	4611      	mov	r1, r2
 800e1a2:	9201      	str	r2, [sp, #4]
 800e1a4:	f7ff fa42 	bl	800d62c <_malloc_r>
 800e1a8:	9a01      	ldr	r2, [sp, #4]
 800e1aa:	4605      	mov	r5, r0
 800e1ac:	b930      	cbnz	r0, 800e1bc <_calloc_r+0x24>
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	b003      	add	sp, #12
 800e1b2:	bd30      	pop	{r4, r5, pc}
 800e1b4:	220c      	movs	r2, #12
 800e1b6:	6002      	str	r2, [r0, #0]
 800e1b8:	2500      	movs	r5, #0
 800e1ba:	e7f8      	b.n	800e1ae <_calloc_r+0x16>
 800e1bc:	4621      	mov	r1, r4
 800e1be:	f7fe f9f3 	bl	800c5a8 <memset>
 800e1c2:	e7f4      	b.n	800e1ae <_calloc_r+0x16>

0800e1c4 <_free_r>:
 800e1c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1c6:	2900      	cmp	r1, #0
 800e1c8:	d044      	beq.n	800e254 <_free_r+0x90>
 800e1ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1ce:	9001      	str	r0, [sp, #4]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	f1a1 0404 	sub.w	r4, r1, #4
 800e1d6:	bfb8      	it	lt
 800e1d8:	18e4      	addlt	r4, r4, r3
 800e1da:	f7ff fb55 	bl	800d888 <__malloc_lock>
 800e1de:	4a1e      	ldr	r2, [pc, #120]	; (800e258 <_free_r+0x94>)
 800e1e0:	9801      	ldr	r0, [sp, #4]
 800e1e2:	6813      	ldr	r3, [r2, #0]
 800e1e4:	b933      	cbnz	r3, 800e1f4 <_free_r+0x30>
 800e1e6:	6063      	str	r3, [r4, #4]
 800e1e8:	6014      	str	r4, [r2, #0]
 800e1ea:	b003      	add	sp, #12
 800e1ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1f0:	f7ff bb50 	b.w	800d894 <__malloc_unlock>
 800e1f4:	42a3      	cmp	r3, r4
 800e1f6:	d908      	bls.n	800e20a <_free_r+0x46>
 800e1f8:	6825      	ldr	r5, [r4, #0]
 800e1fa:	1961      	adds	r1, r4, r5
 800e1fc:	428b      	cmp	r3, r1
 800e1fe:	bf01      	itttt	eq
 800e200:	6819      	ldreq	r1, [r3, #0]
 800e202:	685b      	ldreq	r3, [r3, #4]
 800e204:	1949      	addeq	r1, r1, r5
 800e206:	6021      	streq	r1, [r4, #0]
 800e208:	e7ed      	b.n	800e1e6 <_free_r+0x22>
 800e20a:	461a      	mov	r2, r3
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	b10b      	cbz	r3, 800e214 <_free_r+0x50>
 800e210:	42a3      	cmp	r3, r4
 800e212:	d9fa      	bls.n	800e20a <_free_r+0x46>
 800e214:	6811      	ldr	r1, [r2, #0]
 800e216:	1855      	adds	r5, r2, r1
 800e218:	42a5      	cmp	r5, r4
 800e21a:	d10b      	bne.n	800e234 <_free_r+0x70>
 800e21c:	6824      	ldr	r4, [r4, #0]
 800e21e:	4421      	add	r1, r4
 800e220:	1854      	adds	r4, r2, r1
 800e222:	42a3      	cmp	r3, r4
 800e224:	6011      	str	r1, [r2, #0]
 800e226:	d1e0      	bne.n	800e1ea <_free_r+0x26>
 800e228:	681c      	ldr	r4, [r3, #0]
 800e22a:	685b      	ldr	r3, [r3, #4]
 800e22c:	6053      	str	r3, [r2, #4]
 800e22e:	440c      	add	r4, r1
 800e230:	6014      	str	r4, [r2, #0]
 800e232:	e7da      	b.n	800e1ea <_free_r+0x26>
 800e234:	d902      	bls.n	800e23c <_free_r+0x78>
 800e236:	230c      	movs	r3, #12
 800e238:	6003      	str	r3, [r0, #0]
 800e23a:	e7d6      	b.n	800e1ea <_free_r+0x26>
 800e23c:	6825      	ldr	r5, [r4, #0]
 800e23e:	1961      	adds	r1, r4, r5
 800e240:	428b      	cmp	r3, r1
 800e242:	bf04      	itt	eq
 800e244:	6819      	ldreq	r1, [r3, #0]
 800e246:	685b      	ldreq	r3, [r3, #4]
 800e248:	6063      	str	r3, [r4, #4]
 800e24a:	bf04      	itt	eq
 800e24c:	1949      	addeq	r1, r1, r5
 800e24e:	6021      	streq	r1, [r4, #0]
 800e250:	6054      	str	r4, [r2, #4]
 800e252:	e7ca      	b.n	800e1ea <_free_r+0x26>
 800e254:	b003      	add	sp, #12
 800e256:	bd30      	pop	{r4, r5, pc}
 800e258:	20005390 	.word	0x20005390

0800e25c <__ascii_mbtowc>:
 800e25c:	b082      	sub	sp, #8
 800e25e:	b901      	cbnz	r1, 800e262 <__ascii_mbtowc+0x6>
 800e260:	a901      	add	r1, sp, #4
 800e262:	b142      	cbz	r2, 800e276 <__ascii_mbtowc+0x1a>
 800e264:	b14b      	cbz	r3, 800e27a <__ascii_mbtowc+0x1e>
 800e266:	7813      	ldrb	r3, [r2, #0]
 800e268:	600b      	str	r3, [r1, #0]
 800e26a:	7812      	ldrb	r2, [r2, #0]
 800e26c:	1e10      	subs	r0, r2, #0
 800e26e:	bf18      	it	ne
 800e270:	2001      	movne	r0, #1
 800e272:	b002      	add	sp, #8
 800e274:	4770      	bx	lr
 800e276:	4610      	mov	r0, r2
 800e278:	e7fb      	b.n	800e272 <__ascii_mbtowc+0x16>
 800e27a:	f06f 0001 	mvn.w	r0, #1
 800e27e:	e7f8      	b.n	800e272 <__ascii_mbtowc+0x16>

0800e280 <_malloc_usable_size_r>:
 800e280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e284:	1f18      	subs	r0, r3, #4
 800e286:	2b00      	cmp	r3, #0
 800e288:	bfbc      	itt	lt
 800e28a:	580b      	ldrlt	r3, [r1, r0]
 800e28c:	18c0      	addlt	r0, r0, r3
 800e28e:	4770      	bx	lr

0800e290 <fiprintf>:
 800e290:	b40e      	push	{r1, r2, r3}
 800e292:	b503      	push	{r0, r1, lr}
 800e294:	4601      	mov	r1, r0
 800e296:	ab03      	add	r3, sp, #12
 800e298:	4805      	ldr	r0, [pc, #20]	; (800e2b0 <fiprintf+0x20>)
 800e29a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e29e:	6800      	ldr	r0, [r0, #0]
 800e2a0:	9301      	str	r3, [sp, #4]
 800e2a2:	f000 f845 	bl	800e330 <_vfiprintf_r>
 800e2a6:	b002      	add	sp, #8
 800e2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2ac:	b003      	add	sp, #12
 800e2ae:	4770      	bx	lr
 800e2b0:	20000070 	.word	0x20000070

0800e2b4 <__ascii_wctomb>:
 800e2b4:	b149      	cbz	r1, 800e2ca <__ascii_wctomb+0x16>
 800e2b6:	2aff      	cmp	r2, #255	; 0xff
 800e2b8:	bf85      	ittet	hi
 800e2ba:	238a      	movhi	r3, #138	; 0x8a
 800e2bc:	6003      	strhi	r3, [r0, #0]
 800e2be:	700a      	strbls	r2, [r1, #0]
 800e2c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e2c4:	bf98      	it	ls
 800e2c6:	2001      	movls	r0, #1
 800e2c8:	4770      	bx	lr
 800e2ca:	4608      	mov	r0, r1
 800e2cc:	4770      	bx	lr

0800e2ce <abort>:
 800e2ce:	b508      	push	{r3, lr}
 800e2d0:	2006      	movs	r0, #6
 800e2d2:	f000 fa89 	bl	800e7e8 <raise>
 800e2d6:	2001      	movs	r0, #1
 800e2d8:	f7f5 fe64 	bl	8003fa4 <_exit>

0800e2dc <__sfputc_r>:
 800e2dc:	6893      	ldr	r3, [r2, #8]
 800e2de:	3b01      	subs	r3, #1
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	b410      	push	{r4}
 800e2e4:	6093      	str	r3, [r2, #8]
 800e2e6:	da08      	bge.n	800e2fa <__sfputc_r+0x1e>
 800e2e8:	6994      	ldr	r4, [r2, #24]
 800e2ea:	42a3      	cmp	r3, r4
 800e2ec:	db01      	blt.n	800e2f2 <__sfputc_r+0x16>
 800e2ee:	290a      	cmp	r1, #10
 800e2f0:	d103      	bne.n	800e2fa <__sfputc_r+0x1e>
 800e2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2f6:	f000 b935 	b.w	800e564 <__swbuf_r>
 800e2fa:	6813      	ldr	r3, [r2, #0]
 800e2fc:	1c58      	adds	r0, r3, #1
 800e2fe:	6010      	str	r0, [r2, #0]
 800e300:	7019      	strb	r1, [r3, #0]
 800e302:	4608      	mov	r0, r1
 800e304:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e308:	4770      	bx	lr

0800e30a <__sfputs_r>:
 800e30a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e30c:	4606      	mov	r6, r0
 800e30e:	460f      	mov	r7, r1
 800e310:	4614      	mov	r4, r2
 800e312:	18d5      	adds	r5, r2, r3
 800e314:	42ac      	cmp	r4, r5
 800e316:	d101      	bne.n	800e31c <__sfputs_r+0x12>
 800e318:	2000      	movs	r0, #0
 800e31a:	e007      	b.n	800e32c <__sfputs_r+0x22>
 800e31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e320:	463a      	mov	r2, r7
 800e322:	4630      	mov	r0, r6
 800e324:	f7ff ffda 	bl	800e2dc <__sfputc_r>
 800e328:	1c43      	adds	r3, r0, #1
 800e32a:	d1f3      	bne.n	800e314 <__sfputs_r+0xa>
 800e32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e330 <_vfiprintf_r>:
 800e330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e334:	460d      	mov	r5, r1
 800e336:	b09d      	sub	sp, #116	; 0x74
 800e338:	4614      	mov	r4, r2
 800e33a:	4698      	mov	r8, r3
 800e33c:	4606      	mov	r6, r0
 800e33e:	b118      	cbz	r0, 800e348 <_vfiprintf_r+0x18>
 800e340:	6a03      	ldr	r3, [r0, #32]
 800e342:	b90b      	cbnz	r3, 800e348 <_vfiprintf_r+0x18>
 800e344:	f7fe f8fa 	bl	800c53c <__sinit>
 800e348:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e34a:	07d9      	lsls	r1, r3, #31
 800e34c:	d405      	bmi.n	800e35a <_vfiprintf_r+0x2a>
 800e34e:	89ab      	ldrh	r3, [r5, #12]
 800e350:	059a      	lsls	r2, r3, #22
 800e352:	d402      	bmi.n	800e35a <_vfiprintf_r+0x2a>
 800e354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e356:	f7fe f95d 	bl	800c614 <__retarget_lock_acquire_recursive>
 800e35a:	89ab      	ldrh	r3, [r5, #12]
 800e35c:	071b      	lsls	r3, r3, #28
 800e35e:	d501      	bpl.n	800e364 <_vfiprintf_r+0x34>
 800e360:	692b      	ldr	r3, [r5, #16]
 800e362:	b99b      	cbnz	r3, 800e38c <_vfiprintf_r+0x5c>
 800e364:	4629      	mov	r1, r5
 800e366:	4630      	mov	r0, r6
 800e368:	f000 f93a 	bl	800e5e0 <__swsetup_r>
 800e36c:	b170      	cbz	r0, 800e38c <_vfiprintf_r+0x5c>
 800e36e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e370:	07dc      	lsls	r4, r3, #31
 800e372:	d504      	bpl.n	800e37e <_vfiprintf_r+0x4e>
 800e374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e378:	b01d      	add	sp, #116	; 0x74
 800e37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e37e:	89ab      	ldrh	r3, [r5, #12]
 800e380:	0598      	lsls	r0, r3, #22
 800e382:	d4f7      	bmi.n	800e374 <_vfiprintf_r+0x44>
 800e384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e386:	f7fe f946 	bl	800c616 <__retarget_lock_release_recursive>
 800e38a:	e7f3      	b.n	800e374 <_vfiprintf_r+0x44>
 800e38c:	2300      	movs	r3, #0
 800e38e:	9309      	str	r3, [sp, #36]	; 0x24
 800e390:	2320      	movs	r3, #32
 800e392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e396:	f8cd 800c 	str.w	r8, [sp, #12]
 800e39a:	2330      	movs	r3, #48	; 0x30
 800e39c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e550 <_vfiprintf_r+0x220>
 800e3a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3a4:	f04f 0901 	mov.w	r9, #1
 800e3a8:	4623      	mov	r3, r4
 800e3aa:	469a      	mov	sl, r3
 800e3ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3b0:	b10a      	cbz	r2, 800e3b6 <_vfiprintf_r+0x86>
 800e3b2:	2a25      	cmp	r2, #37	; 0x25
 800e3b4:	d1f9      	bne.n	800e3aa <_vfiprintf_r+0x7a>
 800e3b6:	ebba 0b04 	subs.w	fp, sl, r4
 800e3ba:	d00b      	beq.n	800e3d4 <_vfiprintf_r+0xa4>
 800e3bc:	465b      	mov	r3, fp
 800e3be:	4622      	mov	r2, r4
 800e3c0:	4629      	mov	r1, r5
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	f7ff ffa1 	bl	800e30a <__sfputs_r>
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	f000 80a9 	beq.w	800e520 <_vfiprintf_r+0x1f0>
 800e3ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3d0:	445a      	add	r2, fp
 800e3d2:	9209      	str	r2, [sp, #36]	; 0x24
 800e3d4:	f89a 3000 	ldrb.w	r3, [sl]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	f000 80a1 	beq.w	800e520 <_vfiprintf_r+0x1f0>
 800e3de:	2300      	movs	r3, #0
 800e3e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3e8:	f10a 0a01 	add.w	sl, sl, #1
 800e3ec:	9304      	str	r3, [sp, #16]
 800e3ee:	9307      	str	r3, [sp, #28]
 800e3f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3f4:	931a      	str	r3, [sp, #104]	; 0x68
 800e3f6:	4654      	mov	r4, sl
 800e3f8:	2205      	movs	r2, #5
 800e3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3fe:	4854      	ldr	r0, [pc, #336]	; (800e550 <_vfiprintf_r+0x220>)
 800e400:	f7f1 fee6 	bl	80001d0 <memchr>
 800e404:	9a04      	ldr	r2, [sp, #16]
 800e406:	b9d8      	cbnz	r0, 800e440 <_vfiprintf_r+0x110>
 800e408:	06d1      	lsls	r1, r2, #27
 800e40a:	bf44      	itt	mi
 800e40c:	2320      	movmi	r3, #32
 800e40e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e412:	0713      	lsls	r3, r2, #28
 800e414:	bf44      	itt	mi
 800e416:	232b      	movmi	r3, #43	; 0x2b
 800e418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e41c:	f89a 3000 	ldrb.w	r3, [sl]
 800e420:	2b2a      	cmp	r3, #42	; 0x2a
 800e422:	d015      	beq.n	800e450 <_vfiprintf_r+0x120>
 800e424:	9a07      	ldr	r2, [sp, #28]
 800e426:	4654      	mov	r4, sl
 800e428:	2000      	movs	r0, #0
 800e42a:	f04f 0c0a 	mov.w	ip, #10
 800e42e:	4621      	mov	r1, r4
 800e430:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e434:	3b30      	subs	r3, #48	; 0x30
 800e436:	2b09      	cmp	r3, #9
 800e438:	d94d      	bls.n	800e4d6 <_vfiprintf_r+0x1a6>
 800e43a:	b1b0      	cbz	r0, 800e46a <_vfiprintf_r+0x13a>
 800e43c:	9207      	str	r2, [sp, #28]
 800e43e:	e014      	b.n	800e46a <_vfiprintf_r+0x13a>
 800e440:	eba0 0308 	sub.w	r3, r0, r8
 800e444:	fa09 f303 	lsl.w	r3, r9, r3
 800e448:	4313      	orrs	r3, r2
 800e44a:	9304      	str	r3, [sp, #16]
 800e44c:	46a2      	mov	sl, r4
 800e44e:	e7d2      	b.n	800e3f6 <_vfiprintf_r+0xc6>
 800e450:	9b03      	ldr	r3, [sp, #12]
 800e452:	1d19      	adds	r1, r3, #4
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	9103      	str	r1, [sp, #12]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	bfbb      	ittet	lt
 800e45c:	425b      	neglt	r3, r3
 800e45e:	f042 0202 	orrlt.w	r2, r2, #2
 800e462:	9307      	strge	r3, [sp, #28]
 800e464:	9307      	strlt	r3, [sp, #28]
 800e466:	bfb8      	it	lt
 800e468:	9204      	strlt	r2, [sp, #16]
 800e46a:	7823      	ldrb	r3, [r4, #0]
 800e46c:	2b2e      	cmp	r3, #46	; 0x2e
 800e46e:	d10c      	bne.n	800e48a <_vfiprintf_r+0x15a>
 800e470:	7863      	ldrb	r3, [r4, #1]
 800e472:	2b2a      	cmp	r3, #42	; 0x2a
 800e474:	d134      	bne.n	800e4e0 <_vfiprintf_r+0x1b0>
 800e476:	9b03      	ldr	r3, [sp, #12]
 800e478:	1d1a      	adds	r2, r3, #4
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	9203      	str	r2, [sp, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	bfb8      	it	lt
 800e482:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e486:	3402      	adds	r4, #2
 800e488:	9305      	str	r3, [sp, #20]
 800e48a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e560 <_vfiprintf_r+0x230>
 800e48e:	7821      	ldrb	r1, [r4, #0]
 800e490:	2203      	movs	r2, #3
 800e492:	4650      	mov	r0, sl
 800e494:	f7f1 fe9c 	bl	80001d0 <memchr>
 800e498:	b138      	cbz	r0, 800e4aa <_vfiprintf_r+0x17a>
 800e49a:	9b04      	ldr	r3, [sp, #16]
 800e49c:	eba0 000a 	sub.w	r0, r0, sl
 800e4a0:	2240      	movs	r2, #64	; 0x40
 800e4a2:	4082      	lsls	r2, r0
 800e4a4:	4313      	orrs	r3, r2
 800e4a6:	3401      	adds	r4, #1
 800e4a8:	9304      	str	r3, [sp, #16]
 800e4aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ae:	4829      	ldr	r0, [pc, #164]	; (800e554 <_vfiprintf_r+0x224>)
 800e4b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4b4:	2206      	movs	r2, #6
 800e4b6:	f7f1 fe8b 	bl	80001d0 <memchr>
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	d03f      	beq.n	800e53e <_vfiprintf_r+0x20e>
 800e4be:	4b26      	ldr	r3, [pc, #152]	; (800e558 <_vfiprintf_r+0x228>)
 800e4c0:	bb1b      	cbnz	r3, 800e50a <_vfiprintf_r+0x1da>
 800e4c2:	9b03      	ldr	r3, [sp, #12]
 800e4c4:	3307      	adds	r3, #7
 800e4c6:	f023 0307 	bic.w	r3, r3, #7
 800e4ca:	3308      	adds	r3, #8
 800e4cc:	9303      	str	r3, [sp, #12]
 800e4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4d0:	443b      	add	r3, r7
 800e4d2:	9309      	str	r3, [sp, #36]	; 0x24
 800e4d4:	e768      	b.n	800e3a8 <_vfiprintf_r+0x78>
 800e4d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4da:	460c      	mov	r4, r1
 800e4dc:	2001      	movs	r0, #1
 800e4de:	e7a6      	b.n	800e42e <_vfiprintf_r+0xfe>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	3401      	adds	r4, #1
 800e4e4:	9305      	str	r3, [sp, #20]
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	f04f 0c0a 	mov.w	ip, #10
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4f2:	3a30      	subs	r2, #48	; 0x30
 800e4f4:	2a09      	cmp	r2, #9
 800e4f6:	d903      	bls.n	800e500 <_vfiprintf_r+0x1d0>
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d0c6      	beq.n	800e48a <_vfiprintf_r+0x15a>
 800e4fc:	9105      	str	r1, [sp, #20]
 800e4fe:	e7c4      	b.n	800e48a <_vfiprintf_r+0x15a>
 800e500:	fb0c 2101 	mla	r1, ip, r1, r2
 800e504:	4604      	mov	r4, r0
 800e506:	2301      	movs	r3, #1
 800e508:	e7f0      	b.n	800e4ec <_vfiprintf_r+0x1bc>
 800e50a:	ab03      	add	r3, sp, #12
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	462a      	mov	r2, r5
 800e510:	4b12      	ldr	r3, [pc, #72]	; (800e55c <_vfiprintf_r+0x22c>)
 800e512:	a904      	add	r1, sp, #16
 800e514:	4630      	mov	r0, r6
 800e516:	f7fd fbb1 	bl	800bc7c <_printf_float>
 800e51a:	4607      	mov	r7, r0
 800e51c:	1c78      	adds	r0, r7, #1
 800e51e:	d1d6      	bne.n	800e4ce <_vfiprintf_r+0x19e>
 800e520:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e522:	07d9      	lsls	r1, r3, #31
 800e524:	d405      	bmi.n	800e532 <_vfiprintf_r+0x202>
 800e526:	89ab      	ldrh	r3, [r5, #12]
 800e528:	059a      	lsls	r2, r3, #22
 800e52a:	d402      	bmi.n	800e532 <_vfiprintf_r+0x202>
 800e52c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e52e:	f7fe f872 	bl	800c616 <__retarget_lock_release_recursive>
 800e532:	89ab      	ldrh	r3, [r5, #12]
 800e534:	065b      	lsls	r3, r3, #25
 800e536:	f53f af1d 	bmi.w	800e374 <_vfiprintf_r+0x44>
 800e53a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e53c:	e71c      	b.n	800e378 <_vfiprintf_r+0x48>
 800e53e:	ab03      	add	r3, sp, #12
 800e540:	9300      	str	r3, [sp, #0]
 800e542:	462a      	mov	r2, r5
 800e544:	4b05      	ldr	r3, [pc, #20]	; (800e55c <_vfiprintf_r+0x22c>)
 800e546:	a904      	add	r1, sp, #16
 800e548:	4630      	mov	r0, r6
 800e54a:	f7fd fe3b 	bl	800c1c4 <_printf_i>
 800e54e:	e7e4      	b.n	800e51a <_vfiprintf_r+0x1ea>
 800e550:	080105d5 	.word	0x080105d5
 800e554:	080105df 	.word	0x080105df
 800e558:	0800bc7d 	.word	0x0800bc7d
 800e55c:	0800e30b 	.word	0x0800e30b
 800e560:	080105db 	.word	0x080105db

0800e564 <__swbuf_r>:
 800e564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e566:	460e      	mov	r6, r1
 800e568:	4614      	mov	r4, r2
 800e56a:	4605      	mov	r5, r0
 800e56c:	b118      	cbz	r0, 800e576 <__swbuf_r+0x12>
 800e56e:	6a03      	ldr	r3, [r0, #32]
 800e570:	b90b      	cbnz	r3, 800e576 <__swbuf_r+0x12>
 800e572:	f7fd ffe3 	bl	800c53c <__sinit>
 800e576:	69a3      	ldr	r3, [r4, #24]
 800e578:	60a3      	str	r3, [r4, #8]
 800e57a:	89a3      	ldrh	r3, [r4, #12]
 800e57c:	071a      	lsls	r2, r3, #28
 800e57e:	d525      	bpl.n	800e5cc <__swbuf_r+0x68>
 800e580:	6923      	ldr	r3, [r4, #16]
 800e582:	b31b      	cbz	r3, 800e5cc <__swbuf_r+0x68>
 800e584:	6823      	ldr	r3, [r4, #0]
 800e586:	6922      	ldr	r2, [r4, #16]
 800e588:	1a98      	subs	r0, r3, r2
 800e58a:	6963      	ldr	r3, [r4, #20]
 800e58c:	b2f6      	uxtb	r6, r6
 800e58e:	4283      	cmp	r3, r0
 800e590:	4637      	mov	r7, r6
 800e592:	dc04      	bgt.n	800e59e <__swbuf_r+0x3a>
 800e594:	4621      	mov	r1, r4
 800e596:	4628      	mov	r0, r5
 800e598:	f7ff f94e 	bl	800d838 <_fflush_r>
 800e59c:	b9e0      	cbnz	r0, 800e5d8 <__swbuf_r+0x74>
 800e59e:	68a3      	ldr	r3, [r4, #8]
 800e5a0:	3b01      	subs	r3, #1
 800e5a2:	60a3      	str	r3, [r4, #8]
 800e5a4:	6823      	ldr	r3, [r4, #0]
 800e5a6:	1c5a      	adds	r2, r3, #1
 800e5a8:	6022      	str	r2, [r4, #0]
 800e5aa:	701e      	strb	r6, [r3, #0]
 800e5ac:	6962      	ldr	r2, [r4, #20]
 800e5ae:	1c43      	adds	r3, r0, #1
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d004      	beq.n	800e5be <__swbuf_r+0x5a>
 800e5b4:	89a3      	ldrh	r3, [r4, #12]
 800e5b6:	07db      	lsls	r3, r3, #31
 800e5b8:	d506      	bpl.n	800e5c8 <__swbuf_r+0x64>
 800e5ba:	2e0a      	cmp	r6, #10
 800e5bc:	d104      	bne.n	800e5c8 <__swbuf_r+0x64>
 800e5be:	4621      	mov	r1, r4
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	f7ff f939 	bl	800d838 <_fflush_r>
 800e5c6:	b938      	cbnz	r0, 800e5d8 <__swbuf_r+0x74>
 800e5c8:	4638      	mov	r0, r7
 800e5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5cc:	4621      	mov	r1, r4
 800e5ce:	4628      	mov	r0, r5
 800e5d0:	f000 f806 	bl	800e5e0 <__swsetup_r>
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	d0d5      	beq.n	800e584 <__swbuf_r+0x20>
 800e5d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e5dc:	e7f4      	b.n	800e5c8 <__swbuf_r+0x64>
	...

0800e5e0 <__swsetup_r>:
 800e5e0:	b538      	push	{r3, r4, r5, lr}
 800e5e2:	4b2a      	ldr	r3, [pc, #168]	; (800e68c <__swsetup_r+0xac>)
 800e5e4:	4605      	mov	r5, r0
 800e5e6:	6818      	ldr	r0, [r3, #0]
 800e5e8:	460c      	mov	r4, r1
 800e5ea:	b118      	cbz	r0, 800e5f4 <__swsetup_r+0x14>
 800e5ec:	6a03      	ldr	r3, [r0, #32]
 800e5ee:	b90b      	cbnz	r3, 800e5f4 <__swsetup_r+0x14>
 800e5f0:	f7fd ffa4 	bl	800c53c <__sinit>
 800e5f4:	89a3      	ldrh	r3, [r4, #12]
 800e5f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5fa:	0718      	lsls	r0, r3, #28
 800e5fc:	d422      	bmi.n	800e644 <__swsetup_r+0x64>
 800e5fe:	06d9      	lsls	r1, r3, #27
 800e600:	d407      	bmi.n	800e612 <__swsetup_r+0x32>
 800e602:	2309      	movs	r3, #9
 800e604:	602b      	str	r3, [r5, #0]
 800e606:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e60a:	81a3      	strh	r3, [r4, #12]
 800e60c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e610:	e034      	b.n	800e67c <__swsetup_r+0x9c>
 800e612:	0758      	lsls	r0, r3, #29
 800e614:	d512      	bpl.n	800e63c <__swsetup_r+0x5c>
 800e616:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e618:	b141      	cbz	r1, 800e62c <__swsetup_r+0x4c>
 800e61a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e61e:	4299      	cmp	r1, r3
 800e620:	d002      	beq.n	800e628 <__swsetup_r+0x48>
 800e622:	4628      	mov	r0, r5
 800e624:	f7ff fdce 	bl	800e1c4 <_free_r>
 800e628:	2300      	movs	r3, #0
 800e62a:	6363      	str	r3, [r4, #52]	; 0x34
 800e62c:	89a3      	ldrh	r3, [r4, #12]
 800e62e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e632:	81a3      	strh	r3, [r4, #12]
 800e634:	2300      	movs	r3, #0
 800e636:	6063      	str	r3, [r4, #4]
 800e638:	6923      	ldr	r3, [r4, #16]
 800e63a:	6023      	str	r3, [r4, #0]
 800e63c:	89a3      	ldrh	r3, [r4, #12]
 800e63e:	f043 0308 	orr.w	r3, r3, #8
 800e642:	81a3      	strh	r3, [r4, #12]
 800e644:	6923      	ldr	r3, [r4, #16]
 800e646:	b94b      	cbnz	r3, 800e65c <__swsetup_r+0x7c>
 800e648:	89a3      	ldrh	r3, [r4, #12]
 800e64a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e64e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e652:	d003      	beq.n	800e65c <__swsetup_r+0x7c>
 800e654:	4621      	mov	r1, r4
 800e656:	4628      	mov	r0, r5
 800e658:	f000 f840 	bl	800e6dc <__smakebuf_r>
 800e65c:	89a0      	ldrh	r0, [r4, #12]
 800e65e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e662:	f010 0301 	ands.w	r3, r0, #1
 800e666:	d00a      	beq.n	800e67e <__swsetup_r+0x9e>
 800e668:	2300      	movs	r3, #0
 800e66a:	60a3      	str	r3, [r4, #8]
 800e66c:	6963      	ldr	r3, [r4, #20]
 800e66e:	425b      	negs	r3, r3
 800e670:	61a3      	str	r3, [r4, #24]
 800e672:	6923      	ldr	r3, [r4, #16]
 800e674:	b943      	cbnz	r3, 800e688 <__swsetup_r+0xa8>
 800e676:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e67a:	d1c4      	bne.n	800e606 <__swsetup_r+0x26>
 800e67c:	bd38      	pop	{r3, r4, r5, pc}
 800e67e:	0781      	lsls	r1, r0, #30
 800e680:	bf58      	it	pl
 800e682:	6963      	ldrpl	r3, [r4, #20]
 800e684:	60a3      	str	r3, [r4, #8]
 800e686:	e7f4      	b.n	800e672 <__swsetup_r+0x92>
 800e688:	2000      	movs	r0, #0
 800e68a:	e7f7      	b.n	800e67c <__swsetup_r+0x9c>
 800e68c:	20000070 	.word	0x20000070

0800e690 <__swhatbuf_r>:
 800e690:	b570      	push	{r4, r5, r6, lr}
 800e692:	460c      	mov	r4, r1
 800e694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e698:	2900      	cmp	r1, #0
 800e69a:	b096      	sub	sp, #88	; 0x58
 800e69c:	4615      	mov	r5, r2
 800e69e:	461e      	mov	r6, r3
 800e6a0:	da0d      	bge.n	800e6be <__swhatbuf_r+0x2e>
 800e6a2:	89a3      	ldrh	r3, [r4, #12]
 800e6a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e6a8:	f04f 0100 	mov.w	r1, #0
 800e6ac:	bf0c      	ite	eq
 800e6ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e6b2:	2340      	movne	r3, #64	; 0x40
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	6031      	str	r1, [r6, #0]
 800e6b8:	602b      	str	r3, [r5, #0]
 800e6ba:	b016      	add	sp, #88	; 0x58
 800e6bc:	bd70      	pop	{r4, r5, r6, pc}
 800e6be:	466a      	mov	r2, sp
 800e6c0:	f000 f848 	bl	800e754 <_fstat_r>
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	dbec      	blt.n	800e6a2 <__swhatbuf_r+0x12>
 800e6c8:	9901      	ldr	r1, [sp, #4]
 800e6ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e6ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e6d2:	4259      	negs	r1, r3
 800e6d4:	4159      	adcs	r1, r3
 800e6d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6da:	e7eb      	b.n	800e6b4 <__swhatbuf_r+0x24>

0800e6dc <__smakebuf_r>:
 800e6dc:	898b      	ldrh	r3, [r1, #12]
 800e6de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6e0:	079d      	lsls	r5, r3, #30
 800e6e2:	4606      	mov	r6, r0
 800e6e4:	460c      	mov	r4, r1
 800e6e6:	d507      	bpl.n	800e6f8 <__smakebuf_r+0x1c>
 800e6e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e6ec:	6023      	str	r3, [r4, #0]
 800e6ee:	6123      	str	r3, [r4, #16]
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	6163      	str	r3, [r4, #20]
 800e6f4:	b002      	add	sp, #8
 800e6f6:	bd70      	pop	{r4, r5, r6, pc}
 800e6f8:	ab01      	add	r3, sp, #4
 800e6fa:	466a      	mov	r2, sp
 800e6fc:	f7ff ffc8 	bl	800e690 <__swhatbuf_r>
 800e700:	9900      	ldr	r1, [sp, #0]
 800e702:	4605      	mov	r5, r0
 800e704:	4630      	mov	r0, r6
 800e706:	f7fe ff91 	bl	800d62c <_malloc_r>
 800e70a:	b948      	cbnz	r0, 800e720 <__smakebuf_r+0x44>
 800e70c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e710:	059a      	lsls	r2, r3, #22
 800e712:	d4ef      	bmi.n	800e6f4 <__smakebuf_r+0x18>
 800e714:	f023 0303 	bic.w	r3, r3, #3
 800e718:	f043 0302 	orr.w	r3, r3, #2
 800e71c:	81a3      	strh	r3, [r4, #12]
 800e71e:	e7e3      	b.n	800e6e8 <__smakebuf_r+0xc>
 800e720:	89a3      	ldrh	r3, [r4, #12]
 800e722:	6020      	str	r0, [r4, #0]
 800e724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e728:	81a3      	strh	r3, [r4, #12]
 800e72a:	9b00      	ldr	r3, [sp, #0]
 800e72c:	6163      	str	r3, [r4, #20]
 800e72e:	9b01      	ldr	r3, [sp, #4]
 800e730:	6120      	str	r0, [r4, #16]
 800e732:	b15b      	cbz	r3, 800e74c <__smakebuf_r+0x70>
 800e734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e738:	4630      	mov	r0, r6
 800e73a:	f000 f81d 	bl	800e778 <_isatty_r>
 800e73e:	b128      	cbz	r0, 800e74c <__smakebuf_r+0x70>
 800e740:	89a3      	ldrh	r3, [r4, #12]
 800e742:	f023 0303 	bic.w	r3, r3, #3
 800e746:	f043 0301 	orr.w	r3, r3, #1
 800e74a:	81a3      	strh	r3, [r4, #12]
 800e74c:	89a3      	ldrh	r3, [r4, #12]
 800e74e:	431d      	orrs	r5, r3
 800e750:	81a5      	strh	r5, [r4, #12]
 800e752:	e7cf      	b.n	800e6f4 <__smakebuf_r+0x18>

0800e754 <_fstat_r>:
 800e754:	b538      	push	{r3, r4, r5, lr}
 800e756:	4d07      	ldr	r5, [pc, #28]	; (800e774 <_fstat_r+0x20>)
 800e758:	2300      	movs	r3, #0
 800e75a:	4604      	mov	r4, r0
 800e75c:	4608      	mov	r0, r1
 800e75e:	4611      	mov	r1, r2
 800e760:	602b      	str	r3, [r5, #0]
 800e762:	f7f5 fc6e 	bl	8004042 <_fstat>
 800e766:	1c43      	adds	r3, r0, #1
 800e768:	d102      	bne.n	800e770 <_fstat_r+0x1c>
 800e76a:	682b      	ldr	r3, [r5, #0]
 800e76c:	b103      	cbz	r3, 800e770 <_fstat_r+0x1c>
 800e76e:	6023      	str	r3, [r4, #0]
 800e770:	bd38      	pop	{r3, r4, r5, pc}
 800e772:	bf00      	nop
 800e774:	20005398 	.word	0x20005398

0800e778 <_isatty_r>:
 800e778:	b538      	push	{r3, r4, r5, lr}
 800e77a:	4d06      	ldr	r5, [pc, #24]	; (800e794 <_isatty_r+0x1c>)
 800e77c:	2300      	movs	r3, #0
 800e77e:	4604      	mov	r4, r0
 800e780:	4608      	mov	r0, r1
 800e782:	602b      	str	r3, [r5, #0]
 800e784:	f7f5 fc6d 	bl	8004062 <_isatty>
 800e788:	1c43      	adds	r3, r0, #1
 800e78a:	d102      	bne.n	800e792 <_isatty_r+0x1a>
 800e78c:	682b      	ldr	r3, [r5, #0]
 800e78e:	b103      	cbz	r3, 800e792 <_isatty_r+0x1a>
 800e790:	6023      	str	r3, [r4, #0]
 800e792:	bd38      	pop	{r3, r4, r5, pc}
 800e794:	20005398 	.word	0x20005398

0800e798 <_raise_r>:
 800e798:	291f      	cmp	r1, #31
 800e79a:	b538      	push	{r3, r4, r5, lr}
 800e79c:	4604      	mov	r4, r0
 800e79e:	460d      	mov	r5, r1
 800e7a0:	d904      	bls.n	800e7ac <_raise_r+0x14>
 800e7a2:	2316      	movs	r3, #22
 800e7a4:	6003      	str	r3, [r0, #0]
 800e7a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7aa:	bd38      	pop	{r3, r4, r5, pc}
 800e7ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e7ae:	b112      	cbz	r2, 800e7b6 <_raise_r+0x1e>
 800e7b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e7b4:	b94b      	cbnz	r3, 800e7ca <_raise_r+0x32>
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	f000 f830 	bl	800e81c <_getpid_r>
 800e7bc:	462a      	mov	r2, r5
 800e7be:	4601      	mov	r1, r0
 800e7c0:	4620      	mov	r0, r4
 800e7c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7c6:	f000 b817 	b.w	800e7f8 <_kill_r>
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d00a      	beq.n	800e7e4 <_raise_r+0x4c>
 800e7ce:	1c59      	adds	r1, r3, #1
 800e7d0:	d103      	bne.n	800e7da <_raise_r+0x42>
 800e7d2:	2316      	movs	r3, #22
 800e7d4:	6003      	str	r3, [r0, #0]
 800e7d6:	2001      	movs	r0, #1
 800e7d8:	e7e7      	b.n	800e7aa <_raise_r+0x12>
 800e7da:	2400      	movs	r4, #0
 800e7dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e7e0:	4628      	mov	r0, r5
 800e7e2:	4798      	blx	r3
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	e7e0      	b.n	800e7aa <_raise_r+0x12>

0800e7e8 <raise>:
 800e7e8:	4b02      	ldr	r3, [pc, #8]	; (800e7f4 <raise+0xc>)
 800e7ea:	4601      	mov	r1, r0
 800e7ec:	6818      	ldr	r0, [r3, #0]
 800e7ee:	f7ff bfd3 	b.w	800e798 <_raise_r>
 800e7f2:	bf00      	nop
 800e7f4:	20000070 	.word	0x20000070

0800e7f8 <_kill_r>:
 800e7f8:	b538      	push	{r3, r4, r5, lr}
 800e7fa:	4d07      	ldr	r5, [pc, #28]	; (800e818 <_kill_r+0x20>)
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	4604      	mov	r4, r0
 800e800:	4608      	mov	r0, r1
 800e802:	4611      	mov	r1, r2
 800e804:	602b      	str	r3, [r5, #0]
 800e806:	f7f5 fbbd 	bl	8003f84 <_kill>
 800e80a:	1c43      	adds	r3, r0, #1
 800e80c:	d102      	bne.n	800e814 <_kill_r+0x1c>
 800e80e:	682b      	ldr	r3, [r5, #0]
 800e810:	b103      	cbz	r3, 800e814 <_kill_r+0x1c>
 800e812:	6023      	str	r3, [r4, #0]
 800e814:	bd38      	pop	{r3, r4, r5, pc}
 800e816:	bf00      	nop
 800e818:	20005398 	.word	0x20005398

0800e81c <_getpid_r>:
 800e81c:	f7f5 bbaa 	b.w	8003f74 <_getpid>

0800e820 <cos>:
 800e820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e822:	ec53 2b10 	vmov	r2, r3, d0
 800e826:	4826      	ldr	r0, [pc, #152]	; (800e8c0 <cos+0xa0>)
 800e828:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e82c:	4281      	cmp	r1, r0
 800e82e:	dc06      	bgt.n	800e83e <cos+0x1e>
 800e830:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800e8b8 <cos+0x98>
 800e834:	b005      	add	sp, #20
 800e836:	f85d eb04 	ldr.w	lr, [sp], #4
 800e83a:	f000 bdf5 	b.w	800f428 <__kernel_cos>
 800e83e:	4821      	ldr	r0, [pc, #132]	; (800e8c4 <cos+0xa4>)
 800e840:	4281      	cmp	r1, r0
 800e842:	dd09      	ble.n	800e858 <cos+0x38>
 800e844:	ee10 0a10 	vmov	r0, s0
 800e848:	4619      	mov	r1, r3
 800e84a:	f7f1 fd1d 	bl	8000288 <__aeabi_dsub>
 800e84e:	ec41 0b10 	vmov	d0, r0, r1
 800e852:	b005      	add	sp, #20
 800e854:	f85d fb04 	ldr.w	pc, [sp], #4
 800e858:	4668      	mov	r0, sp
 800e85a:	f000 f88d 	bl	800e978 <__ieee754_rem_pio2>
 800e85e:	f000 0003 	and.w	r0, r0, #3
 800e862:	2801      	cmp	r0, #1
 800e864:	d00b      	beq.n	800e87e <cos+0x5e>
 800e866:	2802      	cmp	r0, #2
 800e868:	d016      	beq.n	800e898 <cos+0x78>
 800e86a:	b9e0      	cbnz	r0, 800e8a6 <cos+0x86>
 800e86c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e870:	ed9d 0b00 	vldr	d0, [sp]
 800e874:	f000 fdd8 	bl	800f428 <__kernel_cos>
 800e878:	ec51 0b10 	vmov	r0, r1, d0
 800e87c:	e7e7      	b.n	800e84e <cos+0x2e>
 800e87e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e882:	ed9d 0b00 	vldr	d0, [sp]
 800e886:	f000 fe97 	bl	800f5b8 <__kernel_sin>
 800e88a:	ec53 2b10 	vmov	r2, r3, d0
 800e88e:	ee10 0a10 	vmov	r0, s0
 800e892:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e896:	e7da      	b.n	800e84e <cos+0x2e>
 800e898:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e89c:	ed9d 0b00 	vldr	d0, [sp]
 800e8a0:	f000 fdc2 	bl	800f428 <__kernel_cos>
 800e8a4:	e7f1      	b.n	800e88a <cos+0x6a>
 800e8a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e8aa:	ed9d 0b00 	vldr	d0, [sp]
 800e8ae:	2001      	movs	r0, #1
 800e8b0:	f000 fe82 	bl	800f5b8 <__kernel_sin>
 800e8b4:	e7e0      	b.n	800e878 <cos+0x58>
 800e8b6:	bf00      	nop
	...
 800e8c0:	3fe921fb 	.word	0x3fe921fb
 800e8c4:	7fefffff 	.word	0x7fefffff

0800e8c8 <sin>:
 800e8c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8ca:	ec53 2b10 	vmov	r2, r3, d0
 800e8ce:	4828      	ldr	r0, [pc, #160]	; (800e970 <sin+0xa8>)
 800e8d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e8d4:	4281      	cmp	r1, r0
 800e8d6:	dc07      	bgt.n	800e8e8 <sin+0x20>
 800e8d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e968 <sin+0xa0>
 800e8dc:	2000      	movs	r0, #0
 800e8de:	b005      	add	sp, #20
 800e8e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8e4:	f000 be68 	b.w	800f5b8 <__kernel_sin>
 800e8e8:	4822      	ldr	r0, [pc, #136]	; (800e974 <sin+0xac>)
 800e8ea:	4281      	cmp	r1, r0
 800e8ec:	dd09      	ble.n	800e902 <sin+0x3a>
 800e8ee:	ee10 0a10 	vmov	r0, s0
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	f7f1 fcc8 	bl	8000288 <__aeabi_dsub>
 800e8f8:	ec41 0b10 	vmov	d0, r0, r1
 800e8fc:	b005      	add	sp, #20
 800e8fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800e902:	4668      	mov	r0, sp
 800e904:	f000 f838 	bl	800e978 <__ieee754_rem_pio2>
 800e908:	f000 0003 	and.w	r0, r0, #3
 800e90c:	2801      	cmp	r0, #1
 800e90e:	d00c      	beq.n	800e92a <sin+0x62>
 800e910:	2802      	cmp	r0, #2
 800e912:	d011      	beq.n	800e938 <sin+0x70>
 800e914:	b9f0      	cbnz	r0, 800e954 <sin+0x8c>
 800e916:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e91a:	ed9d 0b00 	vldr	d0, [sp]
 800e91e:	2001      	movs	r0, #1
 800e920:	f000 fe4a 	bl	800f5b8 <__kernel_sin>
 800e924:	ec51 0b10 	vmov	r0, r1, d0
 800e928:	e7e6      	b.n	800e8f8 <sin+0x30>
 800e92a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e92e:	ed9d 0b00 	vldr	d0, [sp]
 800e932:	f000 fd79 	bl	800f428 <__kernel_cos>
 800e936:	e7f5      	b.n	800e924 <sin+0x5c>
 800e938:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e93c:	ed9d 0b00 	vldr	d0, [sp]
 800e940:	2001      	movs	r0, #1
 800e942:	f000 fe39 	bl	800f5b8 <__kernel_sin>
 800e946:	ec53 2b10 	vmov	r2, r3, d0
 800e94a:	ee10 0a10 	vmov	r0, s0
 800e94e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e952:	e7d1      	b.n	800e8f8 <sin+0x30>
 800e954:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e958:	ed9d 0b00 	vldr	d0, [sp]
 800e95c:	f000 fd64 	bl	800f428 <__kernel_cos>
 800e960:	e7f1      	b.n	800e946 <sin+0x7e>
 800e962:	bf00      	nop
 800e964:	f3af 8000 	nop.w
	...
 800e970:	3fe921fb 	.word	0x3fe921fb
 800e974:	7fefffff 	.word	0x7fefffff

0800e978 <__ieee754_rem_pio2>:
 800e978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e97c:	ed2d 8b02 	vpush	{d8}
 800e980:	ec55 4b10 	vmov	r4, r5, d0
 800e984:	4bca      	ldr	r3, [pc, #808]	; (800ecb0 <__ieee754_rem_pio2+0x338>)
 800e986:	b08b      	sub	sp, #44	; 0x2c
 800e988:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e98c:	4598      	cmp	r8, r3
 800e98e:	4682      	mov	sl, r0
 800e990:	9502      	str	r5, [sp, #8]
 800e992:	dc08      	bgt.n	800e9a6 <__ieee754_rem_pio2+0x2e>
 800e994:	2200      	movs	r2, #0
 800e996:	2300      	movs	r3, #0
 800e998:	ed80 0b00 	vstr	d0, [r0]
 800e99c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e9a0:	f04f 0b00 	mov.w	fp, #0
 800e9a4:	e028      	b.n	800e9f8 <__ieee754_rem_pio2+0x80>
 800e9a6:	4bc3      	ldr	r3, [pc, #780]	; (800ecb4 <__ieee754_rem_pio2+0x33c>)
 800e9a8:	4598      	cmp	r8, r3
 800e9aa:	dc78      	bgt.n	800ea9e <__ieee754_rem_pio2+0x126>
 800e9ac:	9b02      	ldr	r3, [sp, #8]
 800e9ae:	4ec2      	ldr	r6, [pc, #776]	; (800ecb8 <__ieee754_rem_pio2+0x340>)
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	ee10 0a10 	vmov	r0, s0
 800e9b6:	a3b0      	add	r3, pc, #704	; (adr r3, 800ec78 <__ieee754_rem_pio2+0x300>)
 800e9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9bc:	4629      	mov	r1, r5
 800e9be:	dd39      	ble.n	800ea34 <__ieee754_rem_pio2+0xbc>
 800e9c0:	f7f1 fc62 	bl	8000288 <__aeabi_dsub>
 800e9c4:	45b0      	cmp	r8, r6
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	460d      	mov	r5, r1
 800e9ca:	d01b      	beq.n	800ea04 <__ieee754_rem_pio2+0x8c>
 800e9cc:	a3ac      	add	r3, pc, #688	; (adr r3, 800ec80 <__ieee754_rem_pio2+0x308>)
 800e9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d2:	f7f1 fc59 	bl	8000288 <__aeabi_dsub>
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	460b      	mov	r3, r1
 800e9da:	e9ca 2300 	strd	r2, r3, [sl]
 800e9de:	4620      	mov	r0, r4
 800e9e0:	4629      	mov	r1, r5
 800e9e2:	f7f1 fc51 	bl	8000288 <__aeabi_dsub>
 800e9e6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ec80 <__ieee754_rem_pio2+0x308>)
 800e9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ec:	f7f1 fc4c 	bl	8000288 <__aeabi_dsub>
 800e9f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e9f4:	f04f 0b01 	mov.w	fp, #1
 800e9f8:	4658      	mov	r0, fp
 800e9fa:	b00b      	add	sp, #44	; 0x2c
 800e9fc:	ecbd 8b02 	vpop	{d8}
 800ea00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea04:	a3a0      	add	r3, pc, #640	; (adr r3, 800ec88 <__ieee754_rem_pio2+0x310>)
 800ea06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0a:	f7f1 fc3d 	bl	8000288 <__aeabi_dsub>
 800ea0e:	a3a0      	add	r3, pc, #640	; (adr r3, 800ec90 <__ieee754_rem_pio2+0x318>)
 800ea10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea14:	4604      	mov	r4, r0
 800ea16:	460d      	mov	r5, r1
 800ea18:	f7f1 fc36 	bl	8000288 <__aeabi_dsub>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	460b      	mov	r3, r1
 800ea20:	e9ca 2300 	strd	r2, r3, [sl]
 800ea24:	4620      	mov	r0, r4
 800ea26:	4629      	mov	r1, r5
 800ea28:	f7f1 fc2e 	bl	8000288 <__aeabi_dsub>
 800ea2c:	a398      	add	r3, pc, #608	; (adr r3, 800ec90 <__ieee754_rem_pio2+0x318>)
 800ea2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea32:	e7db      	b.n	800e9ec <__ieee754_rem_pio2+0x74>
 800ea34:	f7f1 fc2a 	bl	800028c <__adddf3>
 800ea38:	45b0      	cmp	r8, r6
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	460d      	mov	r5, r1
 800ea3e:	d016      	beq.n	800ea6e <__ieee754_rem_pio2+0xf6>
 800ea40:	a38f      	add	r3, pc, #572	; (adr r3, 800ec80 <__ieee754_rem_pio2+0x308>)
 800ea42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea46:	f7f1 fc21 	bl	800028c <__adddf3>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	e9ca 2300 	strd	r2, r3, [sl]
 800ea52:	4620      	mov	r0, r4
 800ea54:	4629      	mov	r1, r5
 800ea56:	f7f1 fc17 	bl	8000288 <__aeabi_dsub>
 800ea5a:	a389      	add	r3, pc, #548	; (adr r3, 800ec80 <__ieee754_rem_pio2+0x308>)
 800ea5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea60:	f7f1 fc14 	bl	800028c <__adddf3>
 800ea64:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800ea68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ea6c:	e7c4      	b.n	800e9f8 <__ieee754_rem_pio2+0x80>
 800ea6e:	a386      	add	r3, pc, #536	; (adr r3, 800ec88 <__ieee754_rem_pio2+0x310>)
 800ea70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea74:	f7f1 fc0a 	bl	800028c <__adddf3>
 800ea78:	a385      	add	r3, pc, #532	; (adr r3, 800ec90 <__ieee754_rem_pio2+0x318>)
 800ea7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7e:	4604      	mov	r4, r0
 800ea80:	460d      	mov	r5, r1
 800ea82:	f7f1 fc03 	bl	800028c <__adddf3>
 800ea86:	4602      	mov	r2, r0
 800ea88:	460b      	mov	r3, r1
 800ea8a:	e9ca 2300 	strd	r2, r3, [sl]
 800ea8e:	4620      	mov	r0, r4
 800ea90:	4629      	mov	r1, r5
 800ea92:	f7f1 fbf9 	bl	8000288 <__aeabi_dsub>
 800ea96:	a37e      	add	r3, pc, #504	; (adr r3, 800ec90 <__ieee754_rem_pio2+0x318>)
 800ea98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9c:	e7e0      	b.n	800ea60 <__ieee754_rem_pio2+0xe8>
 800ea9e:	4b87      	ldr	r3, [pc, #540]	; (800ecbc <__ieee754_rem_pio2+0x344>)
 800eaa0:	4598      	cmp	r8, r3
 800eaa2:	f300 80d8 	bgt.w	800ec56 <__ieee754_rem_pio2+0x2de>
 800eaa6:	f000 fe45 	bl	800f734 <fabs>
 800eaaa:	ec55 4b10 	vmov	r4, r5, d0
 800eaae:	ee10 0a10 	vmov	r0, s0
 800eab2:	a379      	add	r3, pc, #484	; (adr r3, 800ec98 <__ieee754_rem_pio2+0x320>)
 800eab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab8:	4629      	mov	r1, r5
 800eaba:	f7f1 fd9d 	bl	80005f8 <__aeabi_dmul>
 800eabe:	4b80      	ldr	r3, [pc, #512]	; (800ecc0 <__ieee754_rem_pio2+0x348>)
 800eac0:	2200      	movs	r2, #0
 800eac2:	f7f1 fbe3 	bl	800028c <__adddf3>
 800eac6:	f7f2 f847 	bl	8000b58 <__aeabi_d2iz>
 800eaca:	4683      	mov	fp, r0
 800eacc:	f7f1 fd2a 	bl	8000524 <__aeabi_i2d>
 800ead0:	4602      	mov	r2, r0
 800ead2:	460b      	mov	r3, r1
 800ead4:	ec43 2b18 	vmov	d8, r2, r3
 800ead8:	a367      	add	r3, pc, #412	; (adr r3, 800ec78 <__ieee754_rem_pio2+0x300>)
 800eada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eade:	f7f1 fd8b 	bl	80005f8 <__aeabi_dmul>
 800eae2:	4602      	mov	r2, r0
 800eae4:	460b      	mov	r3, r1
 800eae6:	4620      	mov	r0, r4
 800eae8:	4629      	mov	r1, r5
 800eaea:	f7f1 fbcd 	bl	8000288 <__aeabi_dsub>
 800eaee:	a364      	add	r3, pc, #400	; (adr r3, 800ec80 <__ieee754_rem_pio2+0x308>)
 800eaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf4:	4606      	mov	r6, r0
 800eaf6:	460f      	mov	r7, r1
 800eaf8:	ec51 0b18 	vmov	r0, r1, d8
 800eafc:	f7f1 fd7c 	bl	80005f8 <__aeabi_dmul>
 800eb00:	f1bb 0f1f 	cmp.w	fp, #31
 800eb04:	4604      	mov	r4, r0
 800eb06:	460d      	mov	r5, r1
 800eb08:	dc0d      	bgt.n	800eb26 <__ieee754_rem_pio2+0x1ae>
 800eb0a:	4b6e      	ldr	r3, [pc, #440]	; (800ecc4 <__ieee754_rem_pio2+0x34c>)
 800eb0c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800eb10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb14:	4543      	cmp	r3, r8
 800eb16:	d006      	beq.n	800eb26 <__ieee754_rem_pio2+0x1ae>
 800eb18:	4622      	mov	r2, r4
 800eb1a:	462b      	mov	r3, r5
 800eb1c:	4630      	mov	r0, r6
 800eb1e:	4639      	mov	r1, r7
 800eb20:	f7f1 fbb2 	bl	8000288 <__aeabi_dsub>
 800eb24:	e00e      	b.n	800eb44 <__ieee754_rem_pio2+0x1cc>
 800eb26:	462b      	mov	r3, r5
 800eb28:	4622      	mov	r2, r4
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	4639      	mov	r1, r7
 800eb2e:	f7f1 fbab 	bl	8000288 <__aeabi_dsub>
 800eb32:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eb36:	9303      	str	r3, [sp, #12]
 800eb38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eb3c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800eb40:	2b10      	cmp	r3, #16
 800eb42:	dc02      	bgt.n	800eb4a <__ieee754_rem_pio2+0x1d2>
 800eb44:	e9ca 0100 	strd	r0, r1, [sl]
 800eb48:	e039      	b.n	800ebbe <__ieee754_rem_pio2+0x246>
 800eb4a:	a34f      	add	r3, pc, #316	; (adr r3, 800ec88 <__ieee754_rem_pio2+0x310>)
 800eb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb50:	ec51 0b18 	vmov	r0, r1, d8
 800eb54:	f7f1 fd50 	bl	80005f8 <__aeabi_dmul>
 800eb58:	4604      	mov	r4, r0
 800eb5a:	460d      	mov	r5, r1
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	460b      	mov	r3, r1
 800eb60:	4630      	mov	r0, r6
 800eb62:	4639      	mov	r1, r7
 800eb64:	f7f1 fb90 	bl	8000288 <__aeabi_dsub>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	4680      	mov	r8, r0
 800eb6e:	4689      	mov	r9, r1
 800eb70:	4630      	mov	r0, r6
 800eb72:	4639      	mov	r1, r7
 800eb74:	f7f1 fb88 	bl	8000288 <__aeabi_dsub>
 800eb78:	4622      	mov	r2, r4
 800eb7a:	462b      	mov	r3, r5
 800eb7c:	f7f1 fb84 	bl	8000288 <__aeabi_dsub>
 800eb80:	a343      	add	r3, pc, #268	; (adr r3, 800ec90 <__ieee754_rem_pio2+0x318>)
 800eb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb86:	4604      	mov	r4, r0
 800eb88:	460d      	mov	r5, r1
 800eb8a:	ec51 0b18 	vmov	r0, r1, d8
 800eb8e:	f7f1 fd33 	bl	80005f8 <__aeabi_dmul>
 800eb92:	4622      	mov	r2, r4
 800eb94:	462b      	mov	r3, r5
 800eb96:	f7f1 fb77 	bl	8000288 <__aeabi_dsub>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	4604      	mov	r4, r0
 800eba0:	460d      	mov	r5, r1
 800eba2:	4640      	mov	r0, r8
 800eba4:	4649      	mov	r1, r9
 800eba6:	f7f1 fb6f 	bl	8000288 <__aeabi_dsub>
 800ebaa:	9a03      	ldr	r2, [sp, #12]
 800ebac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ebb0:	1ad3      	subs	r3, r2, r3
 800ebb2:	2b31      	cmp	r3, #49	; 0x31
 800ebb4:	dc24      	bgt.n	800ec00 <__ieee754_rem_pio2+0x288>
 800ebb6:	e9ca 0100 	strd	r0, r1, [sl]
 800ebba:	4646      	mov	r6, r8
 800ebbc:	464f      	mov	r7, r9
 800ebbe:	e9da 8900 	ldrd	r8, r9, [sl]
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	4642      	mov	r2, r8
 800ebc6:	464b      	mov	r3, r9
 800ebc8:	4639      	mov	r1, r7
 800ebca:	f7f1 fb5d 	bl	8000288 <__aeabi_dsub>
 800ebce:	462b      	mov	r3, r5
 800ebd0:	4622      	mov	r2, r4
 800ebd2:	f7f1 fb59 	bl	8000288 <__aeabi_dsub>
 800ebd6:	9b02      	ldr	r3, [sp, #8]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ebde:	f6bf af0b 	bge.w	800e9f8 <__ieee754_rem_pio2+0x80>
 800ebe2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ebe6:	f8ca 3004 	str.w	r3, [sl, #4]
 800ebea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebee:	f8ca 8000 	str.w	r8, [sl]
 800ebf2:	f8ca 0008 	str.w	r0, [sl, #8]
 800ebf6:	f8ca 300c 	str.w	r3, [sl, #12]
 800ebfa:	f1cb 0b00 	rsb	fp, fp, #0
 800ebfe:	e6fb      	b.n	800e9f8 <__ieee754_rem_pio2+0x80>
 800ec00:	a327      	add	r3, pc, #156	; (adr r3, 800eca0 <__ieee754_rem_pio2+0x328>)
 800ec02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec06:	ec51 0b18 	vmov	r0, r1, d8
 800ec0a:	f7f1 fcf5 	bl	80005f8 <__aeabi_dmul>
 800ec0e:	4604      	mov	r4, r0
 800ec10:	460d      	mov	r5, r1
 800ec12:	4602      	mov	r2, r0
 800ec14:	460b      	mov	r3, r1
 800ec16:	4640      	mov	r0, r8
 800ec18:	4649      	mov	r1, r9
 800ec1a:	f7f1 fb35 	bl	8000288 <__aeabi_dsub>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	460b      	mov	r3, r1
 800ec22:	4606      	mov	r6, r0
 800ec24:	460f      	mov	r7, r1
 800ec26:	4640      	mov	r0, r8
 800ec28:	4649      	mov	r1, r9
 800ec2a:	f7f1 fb2d 	bl	8000288 <__aeabi_dsub>
 800ec2e:	4622      	mov	r2, r4
 800ec30:	462b      	mov	r3, r5
 800ec32:	f7f1 fb29 	bl	8000288 <__aeabi_dsub>
 800ec36:	a31c      	add	r3, pc, #112	; (adr r3, 800eca8 <__ieee754_rem_pio2+0x330>)
 800ec38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	460d      	mov	r5, r1
 800ec40:	ec51 0b18 	vmov	r0, r1, d8
 800ec44:	f7f1 fcd8 	bl	80005f8 <__aeabi_dmul>
 800ec48:	4622      	mov	r2, r4
 800ec4a:	462b      	mov	r3, r5
 800ec4c:	f7f1 fb1c 	bl	8000288 <__aeabi_dsub>
 800ec50:	4604      	mov	r4, r0
 800ec52:	460d      	mov	r5, r1
 800ec54:	e760      	b.n	800eb18 <__ieee754_rem_pio2+0x1a0>
 800ec56:	4b1c      	ldr	r3, [pc, #112]	; (800ecc8 <__ieee754_rem_pio2+0x350>)
 800ec58:	4598      	cmp	r8, r3
 800ec5a:	dd37      	ble.n	800eccc <__ieee754_rem_pio2+0x354>
 800ec5c:	ee10 2a10 	vmov	r2, s0
 800ec60:	462b      	mov	r3, r5
 800ec62:	4620      	mov	r0, r4
 800ec64:	4629      	mov	r1, r5
 800ec66:	f7f1 fb0f 	bl	8000288 <__aeabi_dsub>
 800ec6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec6e:	e9ca 0100 	strd	r0, r1, [sl]
 800ec72:	e695      	b.n	800e9a0 <__ieee754_rem_pio2+0x28>
 800ec74:	f3af 8000 	nop.w
 800ec78:	54400000 	.word	0x54400000
 800ec7c:	3ff921fb 	.word	0x3ff921fb
 800ec80:	1a626331 	.word	0x1a626331
 800ec84:	3dd0b461 	.word	0x3dd0b461
 800ec88:	1a600000 	.word	0x1a600000
 800ec8c:	3dd0b461 	.word	0x3dd0b461
 800ec90:	2e037073 	.word	0x2e037073
 800ec94:	3ba3198a 	.word	0x3ba3198a
 800ec98:	6dc9c883 	.word	0x6dc9c883
 800ec9c:	3fe45f30 	.word	0x3fe45f30
 800eca0:	2e000000 	.word	0x2e000000
 800eca4:	3ba3198a 	.word	0x3ba3198a
 800eca8:	252049c1 	.word	0x252049c1
 800ecac:	397b839a 	.word	0x397b839a
 800ecb0:	3fe921fb 	.word	0x3fe921fb
 800ecb4:	4002d97b 	.word	0x4002d97b
 800ecb8:	3ff921fb 	.word	0x3ff921fb
 800ecbc:	413921fb 	.word	0x413921fb
 800ecc0:	3fe00000 	.word	0x3fe00000
 800ecc4:	08010884 	.word	0x08010884
 800ecc8:	7fefffff 	.word	0x7fefffff
 800eccc:	ea4f 5628 	mov.w	r6, r8, asr #20
 800ecd0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800ecd4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800ecd8:	4620      	mov	r0, r4
 800ecda:	460d      	mov	r5, r1
 800ecdc:	f7f1 ff3c 	bl	8000b58 <__aeabi_d2iz>
 800ece0:	f7f1 fc20 	bl	8000524 <__aeabi_i2d>
 800ece4:	4602      	mov	r2, r0
 800ece6:	460b      	mov	r3, r1
 800ece8:	4620      	mov	r0, r4
 800ecea:	4629      	mov	r1, r5
 800ecec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ecf0:	f7f1 faca 	bl	8000288 <__aeabi_dsub>
 800ecf4:	4b21      	ldr	r3, [pc, #132]	; (800ed7c <__ieee754_rem_pio2+0x404>)
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f7f1 fc7e 	bl	80005f8 <__aeabi_dmul>
 800ecfc:	460d      	mov	r5, r1
 800ecfe:	4604      	mov	r4, r0
 800ed00:	f7f1 ff2a 	bl	8000b58 <__aeabi_d2iz>
 800ed04:	f7f1 fc0e 	bl	8000524 <__aeabi_i2d>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	4629      	mov	r1, r5
 800ed10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ed14:	f7f1 fab8 	bl	8000288 <__aeabi_dsub>
 800ed18:	4b18      	ldr	r3, [pc, #96]	; (800ed7c <__ieee754_rem_pio2+0x404>)
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f7f1 fc6c 	bl	80005f8 <__aeabi_dmul>
 800ed20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ed24:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800ed28:	2703      	movs	r7, #3
 800ed2a:	2400      	movs	r4, #0
 800ed2c:	2500      	movs	r5, #0
 800ed2e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800ed32:	4622      	mov	r2, r4
 800ed34:	462b      	mov	r3, r5
 800ed36:	46b9      	mov	r9, r7
 800ed38:	3f01      	subs	r7, #1
 800ed3a:	f7f1 fec5 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	d1f5      	bne.n	800ed2e <__ieee754_rem_pio2+0x3b6>
 800ed42:	4b0f      	ldr	r3, [pc, #60]	; (800ed80 <__ieee754_rem_pio2+0x408>)
 800ed44:	9301      	str	r3, [sp, #4]
 800ed46:	2302      	movs	r3, #2
 800ed48:	9300      	str	r3, [sp, #0]
 800ed4a:	4632      	mov	r2, r6
 800ed4c:	464b      	mov	r3, r9
 800ed4e:	4651      	mov	r1, sl
 800ed50:	a804      	add	r0, sp, #16
 800ed52:	f000 f819 	bl	800ed88 <__kernel_rem_pio2>
 800ed56:	9b02      	ldr	r3, [sp, #8]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	4683      	mov	fp, r0
 800ed5c:	f6bf ae4c 	bge.w	800e9f8 <__ieee754_rem_pio2+0x80>
 800ed60:	e9da 2100 	ldrd	r2, r1, [sl]
 800ed64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed68:	e9ca 2300 	strd	r2, r3, [sl]
 800ed6c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ed70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed74:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ed78:	e73f      	b.n	800ebfa <__ieee754_rem_pio2+0x282>
 800ed7a:	bf00      	nop
 800ed7c:	41700000 	.word	0x41700000
 800ed80:	08010904 	.word	0x08010904
 800ed84:	00000000 	.word	0x00000000

0800ed88 <__kernel_rem_pio2>:
 800ed88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed8c:	ed2d 8b02 	vpush	{d8}
 800ed90:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ed94:	f112 0f14 	cmn.w	r2, #20
 800ed98:	9306      	str	r3, [sp, #24]
 800ed9a:	9104      	str	r1, [sp, #16]
 800ed9c:	4bc2      	ldr	r3, [pc, #776]	; (800f0a8 <__kernel_rem_pio2+0x320>)
 800ed9e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800eda0:	9009      	str	r0, [sp, #36]	; 0x24
 800eda2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eda6:	9300      	str	r3, [sp, #0]
 800eda8:	9b06      	ldr	r3, [sp, #24]
 800edaa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800edae:	bfa8      	it	ge
 800edb0:	1ed4      	subge	r4, r2, #3
 800edb2:	9305      	str	r3, [sp, #20]
 800edb4:	bfb2      	itee	lt
 800edb6:	2400      	movlt	r4, #0
 800edb8:	2318      	movge	r3, #24
 800edba:	fb94 f4f3 	sdivge	r4, r4, r3
 800edbe:	f06f 0317 	mvn.w	r3, #23
 800edc2:	fb04 3303 	mla	r3, r4, r3, r3
 800edc6:	eb03 0a02 	add.w	sl, r3, r2
 800edca:	9b00      	ldr	r3, [sp, #0]
 800edcc:	9a05      	ldr	r2, [sp, #20]
 800edce:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800f098 <__kernel_rem_pio2+0x310>
 800edd2:	eb03 0802 	add.w	r8, r3, r2
 800edd6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800edd8:	1aa7      	subs	r7, r4, r2
 800edda:	ae20      	add	r6, sp, #128	; 0x80
 800eddc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ede0:	2500      	movs	r5, #0
 800ede2:	4545      	cmp	r5, r8
 800ede4:	dd13      	ble.n	800ee0e <__kernel_rem_pio2+0x86>
 800ede6:	9b06      	ldr	r3, [sp, #24]
 800ede8:	aa20      	add	r2, sp, #128	; 0x80
 800edea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800edee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800edf2:	f04f 0800 	mov.w	r8, #0
 800edf6:	9b00      	ldr	r3, [sp, #0]
 800edf8:	4598      	cmp	r8, r3
 800edfa:	dc31      	bgt.n	800ee60 <__kernel_rem_pio2+0xd8>
 800edfc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800f098 <__kernel_rem_pio2+0x310>
 800ee00:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ee04:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ee08:	462f      	mov	r7, r5
 800ee0a:	2600      	movs	r6, #0
 800ee0c:	e01b      	b.n	800ee46 <__kernel_rem_pio2+0xbe>
 800ee0e:	42ef      	cmn	r7, r5
 800ee10:	d407      	bmi.n	800ee22 <__kernel_rem_pio2+0x9a>
 800ee12:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ee16:	f7f1 fb85 	bl	8000524 <__aeabi_i2d>
 800ee1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ee1e:	3501      	adds	r5, #1
 800ee20:	e7df      	b.n	800ede2 <__kernel_rem_pio2+0x5a>
 800ee22:	ec51 0b18 	vmov	r0, r1, d8
 800ee26:	e7f8      	b.n	800ee1a <__kernel_rem_pio2+0x92>
 800ee28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ee30:	f7f1 fbe2 	bl	80005f8 <__aeabi_dmul>
 800ee34:	4602      	mov	r2, r0
 800ee36:	460b      	mov	r3, r1
 800ee38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee3c:	f7f1 fa26 	bl	800028c <__adddf3>
 800ee40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee44:	3601      	adds	r6, #1
 800ee46:	9b05      	ldr	r3, [sp, #20]
 800ee48:	429e      	cmp	r6, r3
 800ee4a:	f1a7 0708 	sub.w	r7, r7, #8
 800ee4e:	ddeb      	ble.n	800ee28 <__kernel_rem_pio2+0xa0>
 800ee50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee54:	f108 0801 	add.w	r8, r8, #1
 800ee58:	ecab 7b02 	vstmia	fp!, {d7}
 800ee5c:	3508      	adds	r5, #8
 800ee5e:	e7ca      	b.n	800edf6 <__kernel_rem_pio2+0x6e>
 800ee60:	9b00      	ldr	r3, [sp, #0]
 800ee62:	aa0c      	add	r2, sp, #48	; 0x30
 800ee64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee68:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee6a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ee6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ee70:	9c00      	ldr	r4, [sp, #0]
 800ee72:	930a      	str	r3, [sp, #40]	; 0x28
 800ee74:	00e3      	lsls	r3, r4, #3
 800ee76:	9308      	str	r3, [sp, #32]
 800ee78:	ab98      	add	r3, sp, #608	; 0x260
 800ee7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ee7e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ee82:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ee86:	ab70      	add	r3, sp, #448	; 0x1c0
 800ee88:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ee8c:	46c3      	mov	fp, r8
 800ee8e:	46a1      	mov	r9, r4
 800ee90:	f1b9 0f00 	cmp.w	r9, #0
 800ee94:	f1a5 0508 	sub.w	r5, r5, #8
 800ee98:	dc77      	bgt.n	800ef8a <__kernel_rem_pio2+0x202>
 800ee9a:	ec47 6b10 	vmov	d0, r6, r7
 800ee9e:	4650      	mov	r0, sl
 800eea0:	f000 fc52 	bl	800f748 <scalbn>
 800eea4:	ec57 6b10 	vmov	r6, r7, d0
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800eeae:	ee10 0a10 	vmov	r0, s0
 800eeb2:	4639      	mov	r1, r7
 800eeb4:	f7f1 fba0 	bl	80005f8 <__aeabi_dmul>
 800eeb8:	ec41 0b10 	vmov	d0, r0, r1
 800eebc:	f000 fcc4 	bl	800f848 <floor>
 800eec0:	4b7a      	ldr	r3, [pc, #488]	; (800f0ac <__kernel_rem_pio2+0x324>)
 800eec2:	ec51 0b10 	vmov	r0, r1, d0
 800eec6:	2200      	movs	r2, #0
 800eec8:	f7f1 fb96 	bl	80005f8 <__aeabi_dmul>
 800eecc:	4602      	mov	r2, r0
 800eece:	460b      	mov	r3, r1
 800eed0:	4630      	mov	r0, r6
 800eed2:	4639      	mov	r1, r7
 800eed4:	f7f1 f9d8 	bl	8000288 <__aeabi_dsub>
 800eed8:	460f      	mov	r7, r1
 800eeda:	4606      	mov	r6, r0
 800eedc:	f7f1 fe3c 	bl	8000b58 <__aeabi_d2iz>
 800eee0:	9002      	str	r0, [sp, #8]
 800eee2:	f7f1 fb1f 	bl	8000524 <__aeabi_i2d>
 800eee6:	4602      	mov	r2, r0
 800eee8:	460b      	mov	r3, r1
 800eeea:	4630      	mov	r0, r6
 800eeec:	4639      	mov	r1, r7
 800eeee:	f7f1 f9cb 	bl	8000288 <__aeabi_dsub>
 800eef2:	f1ba 0f00 	cmp.w	sl, #0
 800eef6:	4606      	mov	r6, r0
 800eef8:	460f      	mov	r7, r1
 800eefa:	dd6d      	ble.n	800efd8 <__kernel_rem_pio2+0x250>
 800eefc:	1e61      	subs	r1, r4, #1
 800eefe:	ab0c      	add	r3, sp, #48	; 0x30
 800ef00:	9d02      	ldr	r5, [sp, #8]
 800ef02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef06:	f1ca 0018 	rsb	r0, sl, #24
 800ef0a:	fa43 f200 	asr.w	r2, r3, r0
 800ef0e:	4415      	add	r5, r2
 800ef10:	4082      	lsls	r2, r0
 800ef12:	1a9b      	subs	r3, r3, r2
 800ef14:	aa0c      	add	r2, sp, #48	; 0x30
 800ef16:	9502      	str	r5, [sp, #8]
 800ef18:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ef1c:	f1ca 0217 	rsb	r2, sl, #23
 800ef20:	fa43 fb02 	asr.w	fp, r3, r2
 800ef24:	f1bb 0f00 	cmp.w	fp, #0
 800ef28:	dd65      	ble.n	800eff6 <__kernel_rem_pio2+0x26e>
 800ef2a:	9b02      	ldr	r3, [sp, #8]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	3301      	adds	r3, #1
 800ef30:	9302      	str	r3, [sp, #8]
 800ef32:	4615      	mov	r5, r2
 800ef34:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ef38:	4294      	cmp	r4, r2
 800ef3a:	f300 809f 	bgt.w	800f07c <__kernel_rem_pio2+0x2f4>
 800ef3e:	f1ba 0f00 	cmp.w	sl, #0
 800ef42:	dd07      	ble.n	800ef54 <__kernel_rem_pio2+0x1cc>
 800ef44:	f1ba 0f01 	cmp.w	sl, #1
 800ef48:	f000 80c1 	beq.w	800f0ce <__kernel_rem_pio2+0x346>
 800ef4c:	f1ba 0f02 	cmp.w	sl, #2
 800ef50:	f000 80c7 	beq.w	800f0e2 <__kernel_rem_pio2+0x35a>
 800ef54:	f1bb 0f02 	cmp.w	fp, #2
 800ef58:	d14d      	bne.n	800eff6 <__kernel_rem_pio2+0x26e>
 800ef5a:	4632      	mov	r2, r6
 800ef5c:	463b      	mov	r3, r7
 800ef5e:	4954      	ldr	r1, [pc, #336]	; (800f0b0 <__kernel_rem_pio2+0x328>)
 800ef60:	2000      	movs	r0, #0
 800ef62:	f7f1 f991 	bl	8000288 <__aeabi_dsub>
 800ef66:	4606      	mov	r6, r0
 800ef68:	460f      	mov	r7, r1
 800ef6a:	2d00      	cmp	r5, #0
 800ef6c:	d043      	beq.n	800eff6 <__kernel_rem_pio2+0x26e>
 800ef6e:	4650      	mov	r0, sl
 800ef70:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800f0a0 <__kernel_rem_pio2+0x318>
 800ef74:	f000 fbe8 	bl	800f748 <scalbn>
 800ef78:	4630      	mov	r0, r6
 800ef7a:	4639      	mov	r1, r7
 800ef7c:	ec53 2b10 	vmov	r2, r3, d0
 800ef80:	f7f1 f982 	bl	8000288 <__aeabi_dsub>
 800ef84:	4606      	mov	r6, r0
 800ef86:	460f      	mov	r7, r1
 800ef88:	e035      	b.n	800eff6 <__kernel_rem_pio2+0x26e>
 800ef8a:	4b4a      	ldr	r3, [pc, #296]	; (800f0b4 <__kernel_rem_pio2+0x32c>)
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	4630      	mov	r0, r6
 800ef90:	4639      	mov	r1, r7
 800ef92:	f7f1 fb31 	bl	80005f8 <__aeabi_dmul>
 800ef96:	f7f1 fddf 	bl	8000b58 <__aeabi_d2iz>
 800ef9a:	f7f1 fac3 	bl	8000524 <__aeabi_i2d>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	460b      	mov	r3, r1
 800efa2:	ec43 2b18 	vmov	d8, r2, r3
 800efa6:	4b44      	ldr	r3, [pc, #272]	; (800f0b8 <__kernel_rem_pio2+0x330>)
 800efa8:	2200      	movs	r2, #0
 800efaa:	f7f1 fb25 	bl	80005f8 <__aeabi_dmul>
 800efae:	4602      	mov	r2, r0
 800efb0:	460b      	mov	r3, r1
 800efb2:	4630      	mov	r0, r6
 800efb4:	4639      	mov	r1, r7
 800efb6:	f7f1 f967 	bl	8000288 <__aeabi_dsub>
 800efba:	f7f1 fdcd 	bl	8000b58 <__aeabi_d2iz>
 800efbe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800efc2:	f84b 0b04 	str.w	r0, [fp], #4
 800efc6:	ec51 0b18 	vmov	r0, r1, d8
 800efca:	f7f1 f95f 	bl	800028c <__adddf3>
 800efce:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800efd2:	4606      	mov	r6, r0
 800efd4:	460f      	mov	r7, r1
 800efd6:	e75b      	b.n	800ee90 <__kernel_rem_pio2+0x108>
 800efd8:	d106      	bne.n	800efe8 <__kernel_rem_pio2+0x260>
 800efda:	1e63      	subs	r3, r4, #1
 800efdc:	aa0c      	add	r2, sp, #48	; 0x30
 800efde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efe2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800efe6:	e79d      	b.n	800ef24 <__kernel_rem_pio2+0x19c>
 800efe8:	4b34      	ldr	r3, [pc, #208]	; (800f0bc <__kernel_rem_pio2+0x334>)
 800efea:	2200      	movs	r2, #0
 800efec:	f7f1 fd8a 	bl	8000b04 <__aeabi_dcmpge>
 800eff0:	2800      	cmp	r0, #0
 800eff2:	d140      	bne.n	800f076 <__kernel_rem_pio2+0x2ee>
 800eff4:	4683      	mov	fp, r0
 800eff6:	2200      	movs	r2, #0
 800eff8:	2300      	movs	r3, #0
 800effa:	4630      	mov	r0, r6
 800effc:	4639      	mov	r1, r7
 800effe:	f7f1 fd63 	bl	8000ac8 <__aeabi_dcmpeq>
 800f002:	2800      	cmp	r0, #0
 800f004:	f000 80c1 	beq.w	800f18a <__kernel_rem_pio2+0x402>
 800f008:	1e65      	subs	r5, r4, #1
 800f00a:	462b      	mov	r3, r5
 800f00c:	2200      	movs	r2, #0
 800f00e:	9900      	ldr	r1, [sp, #0]
 800f010:	428b      	cmp	r3, r1
 800f012:	da6d      	bge.n	800f0f0 <__kernel_rem_pio2+0x368>
 800f014:	2a00      	cmp	r2, #0
 800f016:	f000 808a 	beq.w	800f12e <__kernel_rem_pio2+0x3a6>
 800f01a:	ab0c      	add	r3, sp, #48	; 0x30
 800f01c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f020:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f024:	2b00      	cmp	r3, #0
 800f026:	f000 80ae 	beq.w	800f186 <__kernel_rem_pio2+0x3fe>
 800f02a:	4650      	mov	r0, sl
 800f02c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800f0a0 <__kernel_rem_pio2+0x318>
 800f030:	f000 fb8a 	bl	800f748 <scalbn>
 800f034:	1c6b      	adds	r3, r5, #1
 800f036:	00da      	lsls	r2, r3, #3
 800f038:	9205      	str	r2, [sp, #20]
 800f03a:	ec57 6b10 	vmov	r6, r7, d0
 800f03e:	aa70      	add	r2, sp, #448	; 0x1c0
 800f040:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800f0b4 <__kernel_rem_pio2+0x32c>
 800f044:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800f048:	462c      	mov	r4, r5
 800f04a:	f04f 0800 	mov.w	r8, #0
 800f04e:	2c00      	cmp	r4, #0
 800f050:	f280 80d4 	bge.w	800f1fc <__kernel_rem_pio2+0x474>
 800f054:	462c      	mov	r4, r5
 800f056:	2c00      	cmp	r4, #0
 800f058:	f2c0 8102 	blt.w	800f260 <__kernel_rem_pio2+0x4d8>
 800f05c:	4b18      	ldr	r3, [pc, #96]	; (800f0c0 <__kernel_rem_pio2+0x338>)
 800f05e:	461e      	mov	r6, r3
 800f060:	ab70      	add	r3, sp, #448	; 0x1c0
 800f062:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800f066:	1b2b      	subs	r3, r5, r4
 800f068:	f04f 0900 	mov.w	r9, #0
 800f06c:	f04f 0a00 	mov.w	sl, #0
 800f070:	2700      	movs	r7, #0
 800f072:	9306      	str	r3, [sp, #24]
 800f074:	e0e6      	b.n	800f244 <__kernel_rem_pio2+0x4bc>
 800f076:	f04f 0b02 	mov.w	fp, #2
 800f07a:	e756      	b.n	800ef2a <__kernel_rem_pio2+0x1a2>
 800f07c:	f8d8 3000 	ldr.w	r3, [r8]
 800f080:	bb05      	cbnz	r5, 800f0c4 <__kernel_rem_pio2+0x33c>
 800f082:	b123      	cbz	r3, 800f08e <__kernel_rem_pio2+0x306>
 800f084:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f088:	f8c8 3000 	str.w	r3, [r8]
 800f08c:	2301      	movs	r3, #1
 800f08e:	3201      	adds	r2, #1
 800f090:	f108 0804 	add.w	r8, r8, #4
 800f094:	461d      	mov	r5, r3
 800f096:	e74f      	b.n	800ef38 <__kernel_rem_pio2+0x1b0>
	...
 800f0a4:	3ff00000 	.word	0x3ff00000
 800f0a8:	08010a50 	.word	0x08010a50
 800f0ac:	40200000 	.word	0x40200000
 800f0b0:	3ff00000 	.word	0x3ff00000
 800f0b4:	3e700000 	.word	0x3e700000
 800f0b8:	41700000 	.word	0x41700000
 800f0bc:	3fe00000 	.word	0x3fe00000
 800f0c0:	08010a10 	.word	0x08010a10
 800f0c4:	1acb      	subs	r3, r1, r3
 800f0c6:	f8c8 3000 	str.w	r3, [r8]
 800f0ca:	462b      	mov	r3, r5
 800f0cc:	e7df      	b.n	800f08e <__kernel_rem_pio2+0x306>
 800f0ce:	1e62      	subs	r2, r4, #1
 800f0d0:	ab0c      	add	r3, sp, #48	; 0x30
 800f0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f0da:	a90c      	add	r1, sp, #48	; 0x30
 800f0dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f0e0:	e738      	b.n	800ef54 <__kernel_rem_pio2+0x1cc>
 800f0e2:	1e62      	subs	r2, r4, #1
 800f0e4:	ab0c      	add	r3, sp, #48	; 0x30
 800f0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0ea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f0ee:	e7f4      	b.n	800f0da <__kernel_rem_pio2+0x352>
 800f0f0:	a90c      	add	r1, sp, #48	; 0x30
 800f0f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f0f6:	3b01      	subs	r3, #1
 800f0f8:	430a      	orrs	r2, r1
 800f0fa:	e788      	b.n	800f00e <__kernel_rem_pio2+0x286>
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f102:	2900      	cmp	r1, #0
 800f104:	d0fa      	beq.n	800f0fc <__kernel_rem_pio2+0x374>
 800f106:	9a08      	ldr	r2, [sp, #32]
 800f108:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800f10c:	446a      	add	r2, sp
 800f10e:	3a98      	subs	r2, #152	; 0x98
 800f110:	9208      	str	r2, [sp, #32]
 800f112:	9a06      	ldr	r2, [sp, #24]
 800f114:	a920      	add	r1, sp, #128	; 0x80
 800f116:	18a2      	adds	r2, r4, r2
 800f118:	18e3      	adds	r3, r4, r3
 800f11a:	f104 0801 	add.w	r8, r4, #1
 800f11e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800f122:	9302      	str	r3, [sp, #8]
 800f124:	9b02      	ldr	r3, [sp, #8]
 800f126:	4543      	cmp	r3, r8
 800f128:	da04      	bge.n	800f134 <__kernel_rem_pio2+0x3ac>
 800f12a:	461c      	mov	r4, r3
 800f12c:	e6a2      	b.n	800ee74 <__kernel_rem_pio2+0xec>
 800f12e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f130:	2301      	movs	r3, #1
 800f132:	e7e4      	b.n	800f0fe <__kernel_rem_pio2+0x376>
 800f134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f136:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f13a:	f7f1 f9f3 	bl	8000524 <__aeabi_i2d>
 800f13e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f144:	46ab      	mov	fp, r5
 800f146:	461c      	mov	r4, r3
 800f148:	f04f 0900 	mov.w	r9, #0
 800f14c:	2600      	movs	r6, #0
 800f14e:	2700      	movs	r7, #0
 800f150:	9b05      	ldr	r3, [sp, #20]
 800f152:	4599      	cmp	r9, r3
 800f154:	dd06      	ble.n	800f164 <__kernel_rem_pio2+0x3dc>
 800f156:	9b08      	ldr	r3, [sp, #32]
 800f158:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f15c:	f108 0801 	add.w	r8, r8, #1
 800f160:	9308      	str	r3, [sp, #32]
 800f162:	e7df      	b.n	800f124 <__kernel_rem_pio2+0x39c>
 800f164:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f168:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f16c:	f7f1 fa44 	bl	80005f8 <__aeabi_dmul>
 800f170:	4602      	mov	r2, r0
 800f172:	460b      	mov	r3, r1
 800f174:	4630      	mov	r0, r6
 800f176:	4639      	mov	r1, r7
 800f178:	f7f1 f888 	bl	800028c <__adddf3>
 800f17c:	f109 0901 	add.w	r9, r9, #1
 800f180:	4606      	mov	r6, r0
 800f182:	460f      	mov	r7, r1
 800f184:	e7e4      	b.n	800f150 <__kernel_rem_pio2+0x3c8>
 800f186:	3d01      	subs	r5, #1
 800f188:	e747      	b.n	800f01a <__kernel_rem_pio2+0x292>
 800f18a:	ec47 6b10 	vmov	d0, r6, r7
 800f18e:	f1ca 0000 	rsb	r0, sl, #0
 800f192:	f000 fad9 	bl	800f748 <scalbn>
 800f196:	ec57 6b10 	vmov	r6, r7, d0
 800f19a:	4ba0      	ldr	r3, [pc, #640]	; (800f41c <__kernel_rem_pio2+0x694>)
 800f19c:	ee10 0a10 	vmov	r0, s0
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	4639      	mov	r1, r7
 800f1a4:	f7f1 fcae 	bl	8000b04 <__aeabi_dcmpge>
 800f1a8:	b1f8      	cbz	r0, 800f1ea <__kernel_rem_pio2+0x462>
 800f1aa:	4b9d      	ldr	r3, [pc, #628]	; (800f420 <__kernel_rem_pio2+0x698>)
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	4639      	mov	r1, r7
 800f1b2:	f7f1 fa21 	bl	80005f8 <__aeabi_dmul>
 800f1b6:	f7f1 fccf 	bl	8000b58 <__aeabi_d2iz>
 800f1ba:	4680      	mov	r8, r0
 800f1bc:	f7f1 f9b2 	bl	8000524 <__aeabi_i2d>
 800f1c0:	4b96      	ldr	r3, [pc, #600]	; (800f41c <__kernel_rem_pio2+0x694>)
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	f7f1 fa18 	bl	80005f8 <__aeabi_dmul>
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	4639      	mov	r1, r7
 800f1ce:	4630      	mov	r0, r6
 800f1d0:	f7f1 f85a 	bl	8000288 <__aeabi_dsub>
 800f1d4:	f7f1 fcc0 	bl	8000b58 <__aeabi_d2iz>
 800f1d8:	1c65      	adds	r5, r4, #1
 800f1da:	ab0c      	add	r3, sp, #48	; 0x30
 800f1dc:	f10a 0a18 	add.w	sl, sl, #24
 800f1e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f1e4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f1e8:	e71f      	b.n	800f02a <__kernel_rem_pio2+0x2a2>
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	4639      	mov	r1, r7
 800f1ee:	f7f1 fcb3 	bl	8000b58 <__aeabi_d2iz>
 800f1f2:	ab0c      	add	r3, sp, #48	; 0x30
 800f1f4:	4625      	mov	r5, r4
 800f1f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f1fa:	e716      	b.n	800f02a <__kernel_rem_pio2+0x2a2>
 800f1fc:	ab0c      	add	r3, sp, #48	; 0x30
 800f1fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f202:	f7f1 f98f 	bl	8000524 <__aeabi_i2d>
 800f206:	4632      	mov	r2, r6
 800f208:	463b      	mov	r3, r7
 800f20a:	f7f1 f9f5 	bl	80005f8 <__aeabi_dmul>
 800f20e:	4642      	mov	r2, r8
 800f210:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f214:	464b      	mov	r3, r9
 800f216:	4630      	mov	r0, r6
 800f218:	4639      	mov	r1, r7
 800f21a:	f7f1 f9ed 	bl	80005f8 <__aeabi_dmul>
 800f21e:	3c01      	subs	r4, #1
 800f220:	4606      	mov	r6, r0
 800f222:	460f      	mov	r7, r1
 800f224:	e713      	b.n	800f04e <__kernel_rem_pio2+0x2c6>
 800f226:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800f22a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800f22e:	f7f1 f9e3 	bl	80005f8 <__aeabi_dmul>
 800f232:	4602      	mov	r2, r0
 800f234:	460b      	mov	r3, r1
 800f236:	4648      	mov	r0, r9
 800f238:	4651      	mov	r1, sl
 800f23a:	f7f1 f827 	bl	800028c <__adddf3>
 800f23e:	3701      	adds	r7, #1
 800f240:	4681      	mov	r9, r0
 800f242:	468a      	mov	sl, r1
 800f244:	9b00      	ldr	r3, [sp, #0]
 800f246:	429f      	cmp	r7, r3
 800f248:	dc02      	bgt.n	800f250 <__kernel_rem_pio2+0x4c8>
 800f24a:	9b06      	ldr	r3, [sp, #24]
 800f24c:	429f      	cmp	r7, r3
 800f24e:	ddea      	ble.n	800f226 <__kernel_rem_pio2+0x49e>
 800f250:	9a06      	ldr	r2, [sp, #24]
 800f252:	ab48      	add	r3, sp, #288	; 0x120
 800f254:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800f258:	e9c6 9a00 	strd	r9, sl, [r6]
 800f25c:	3c01      	subs	r4, #1
 800f25e:	e6fa      	b.n	800f056 <__kernel_rem_pio2+0x2ce>
 800f260:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f262:	2b02      	cmp	r3, #2
 800f264:	dc0b      	bgt.n	800f27e <__kernel_rem_pio2+0x4f6>
 800f266:	2b00      	cmp	r3, #0
 800f268:	dc39      	bgt.n	800f2de <__kernel_rem_pio2+0x556>
 800f26a:	d05d      	beq.n	800f328 <__kernel_rem_pio2+0x5a0>
 800f26c:	9b02      	ldr	r3, [sp, #8]
 800f26e:	f003 0007 	and.w	r0, r3, #7
 800f272:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f276:	ecbd 8b02 	vpop	{d8}
 800f27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f27e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f280:	2b03      	cmp	r3, #3
 800f282:	d1f3      	bne.n	800f26c <__kernel_rem_pio2+0x4e4>
 800f284:	9b05      	ldr	r3, [sp, #20]
 800f286:	9500      	str	r5, [sp, #0]
 800f288:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f28c:	eb0d 0403 	add.w	r4, sp, r3
 800f290:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800f294:	46a2      	mov	sl, r4
 800f296:	9b00      	ldr	r3, [sp, #0]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	f1aa 0a08 	sub.w	sl, sl, #8
 800f29e:	dc69      	bgt.n	800f374 <__kernel_rem_pio2+0x5ec>
 800f2a0:	46aa      	mov	sl, r5
 800f2a2:	f1ba 0f01 	cmp.w	sl, #1
 800f2a6:	f1a4 0408 	sub.w	r4, r4, #8
 800f2aa:	f300 8083 	bgt.w	800f3b4 <__kernel_rem_pio2+0x62c>
 800f2ae:	9c05      	ldr	r4, [sp, #20]
 800f2b0:	ab48      	add	r3, sp, #288	; 0x120
 800f2b2:	441c      	add	r4, r3
 800f2b4:	2000      	movs	r0, #0
 800f2b6:	2100      	movs	r1, #0
 800f2b8:	2d01      	cmp	r5, #1
 800f2ba:	f300 809a 	bgt.w	800f3f2 <__kernel_rem_pio2+0x66a>
 800f2be:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800f2c2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f2c6:	f1bb 0f00 	cmp.w	fp, #0
 800f2ca:	f040 8098 	bne.w	800f3fe <__kernel_rem_pio2+0x676>
 800f2ce:	9b04      	ldr	r3, [sp, #16]
 800f2d0:	e9c3 7800 	strd	r7, r8, [r3]
 800f2d4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f2d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f2dc:	e7c6      	b.n	800f26c <__kernel_rem_pio2+0x4e4>
 800f2de:	9e05      	ldr	r6, [sp, #20]
 800f2e0:	ab48      	add	r3, sp, #288	; 0x120
 800f2e2:	441e      	add	r6, r3
 800f2e4:	462c      	mov	r4, r5
 800f2e6:	2000      	movs	r0, #0
 800f2e8:	2100      	movs	r1, #0
 800f2ea:	2c00      	cmp	r4, #0
 800f2ec:	da33      	bge.n	800f356 <__kernel_rem_pio2+0x5ce>
 800f2ee:	f1bb 0f00 	cmp.w	fp, #0
 800f2f2:	d036      	beq.n	800f362 <__kernel_rem_pio2+0x5da>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f2fa:	9c04      	ldr	r4, [sp, #16]
 800f2fc:	e9c4 2300 	strd	r2, r3, [r4]
 800f300:	4602      	mov	r2, r0
 800f302:	460b      	mov	r3, r1
 800f304:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f308:	f7f0 ffbe 	bl	8000288 <__aeabi_dsub>
 800f30c:	ae4a      	add	r6, sp, #296	; 0x128
 800f30e:	2401      	movs	r4, #1
 800f310:	42a5      	cmp	r5, r4
 800f312:	da29      	bge.n	800f368 <__kernel_rem_pio2+0x5e0>
 800f314:	f1bb 0f00 	cmp.w	fp, #0
 800f318:	d002      	beq.n	800f320 <__kernel_rem_pio2+0x598>
 800f31a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f31e:	4619      	mov	r1, r3
 800f320:	9b04      	ldr	r3, [sp, #16]
 800f322:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f326:	e7a1      	b.n	800f26c <__kernel_rem_pio2+0x4e4>
 800f328:	9c05      	ldr	r4, [sp, #20]
 800f32a:	ab48      	add	r3, sp, #288	; 0x120
 800f32c:	441c      	add	r4, r3
 800f32e:	2000      	movs	r0, #0
 800f330:	2100      	movs	r1, #0
 800f332:	2d00      	cmp	r5, #0
 800f334:	da09      	bge.n	800f34a <__kernel_rem_pio2+0x5c2>
 800f336:	f1bb 0f00 	cmp.w	fp, #0
 800f33a:	d002      	beq.n	800f342 <__kernel_rem_pio2+0x5ba>
 800f33c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f340:	4619      	mov	r1, r3
 800f342:	9b04      	ldr	r3, [sp, #16]
 800f344:	e9c3 0100 	strd	r0, r1, [r3]
 800f348:	e790      	b.n	800f26c <__kernel_rem_pio2+0x4e4>
 800f34a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f34e:	f7f0 ff9d 	bl	800028c <__adddf3>
 800f352:	3d01      	subs	r5, #1
 800f354:	e7ed      	b.n	800f332 <__kernel_rem_pio2+0x5aa>
 800f356:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f35a:	f7f0 ff97 	bl	800028c <__adddf3>
 800f35e:	3c01      	subs	r4, #1
 800f360:	e7c3      	b.n	800f2ea <__kernel_rem_pio2+0x562>
 800f362:	4602      	mov	r2, r0
 800f364:	460b      	mov	r3, r1
 800f366:	e7c8      	b.n	800f2fa <__kernel_rem_pio2+0x572>
 800f368:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f36c:	f7f0 ff8e 	bl	800028c <__adddf3>
 800f370:	3401      	adds	r4, #1
 800f372:	e7cd      	b.n	800f310 <__kernel_rem_pio2+0x588>
 800f374:	e9da 8900 	ldrd	r8, r9, [sl]
 800f378:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f37c:	9b00      	ldr	r3, [sp, #0]
 800f37e:	3b01      	subs	r3, #1
 800f380:	9300      	str	r3, [sp, #0]
 800f382:	4632      	mov	r2, r6
 800f384:	463b      	mov	r3, r7
 800f386:	4640      	mov	r0, r8
 800f388:	4649      	mov	r1, r9
 800f38a:	f7f0 ff7f 	bl	800028c <__adddf3>
 800f38e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f392:	4602      	mov	r2, r0
 800f394:	460b      	mov	r3, r1
 800f396:	4640      	mov	r0, r8
 800f398:	4649      	mov	r1, r9
 800f39a:	f7f0 ff75 	bl	8000288 <__aeabi_dsub>
 800f39e:	4632      	mov	r2, r6
 800f3a0:	463b      	mov	r3, r7
 800f3a2:	f7f0 ff73 	bl	800028c <__adddf3>
 800f3a6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f3aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f3ae:	ed8a 7b00 	vstr	d7, [sl]
 800f3b2:	e770      	b.n	800f296 <__kernel_rem_pio2+0x50e>
 800f3b4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f3b8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f3bc:	4640      	mov	r0, r8
 800f3be:	4632      	mov	r2, r6
 800f3c0:	463b      	mov	r3, r7
 800f3c2:	4649      	mov	r1, r9
 800f3c4:	f7f0 ff62 	bl	800028c <__adddf3>
 800f3c8:	e9cd 0100 	strd	r0, r1, [sp]
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	460b      	mov	r3, r1
 800f3d0:	4640      	mov	r0, r8
 800f3d2:	4649      	mov	r1, r9
 800f3d4:	f7f0 ff58 	bl	8000288 <__aeabi_dsub>
 800f3d8:	4632      	mov	r2, r6
 800f3da:	463b      	mov	r3, r7
 800f3dc:	f7f0 ff56 	bl	800028c <__adddf3>
 800f3e0:	ed9d 7b00 	vldr	d7, [sp]
 800f3e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f3e8:	ed84 7b00 	vstr	d7, [r4]
 800f3ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f3f0:	e757      	b.n	800f2a2 <__kernel_rem_pio2+0x51a>
 800f3f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f3f6:	f7f0 ff49 	bl	800028c <__adddf3>
 800f3fa:	3d01      	subs	r5, #1
 800f3fc:	e75c      	b.n	800f2b8 <__kernel_rem_pio2+0x530>
 800f3fe:	9b04      	ldr	r3, [sp, #16]
 800f400:	9a04      	ldr	r2, [sp, #16]
 800f402:	601f      	str	r7, [r3, #0]
 800f404:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f408:	605c      	str	r4, [r3, #4]
 800f40a:	609d      	str	r5, [r3, #8]
 800f40c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f410:	60d3      	str	r3, [r2, #12]
 800f412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f416:	6110      	str	r0, [r2, #16]
 800f418:	6153      	str	r3, [r2, #20]
 800f41a:	e727      	b.n	800f26c <__kernel_rem_pio2+0x4e4>
 800f41c:	41700000 	.word	0x41700000
 800f420:	3e700000 	.word	0x3e700000
 800f424:	00000000 	.word	0x00000000

0800f428 <__kernel_cos>:
 800f428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f42c:	ec57 6b10 	vmov	r6, r7, d0
 800f430:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f434:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f438:	ed8d 1b00 	vstr	d1, [sp]
 800f43c:	da07      	bge.n	800f44e <__kernel_cos+0x26>
 800f43e:	ee10 0a10 	vmov	r0, s0
 800f442:	4639      	mov	r1, r7
 800f444:	f7f1 fb88 	bl	8000b58 <__aeabi_d2iz>
 800f448:	2800      	cmp	r0, #0
 800f44a:	f000 8088 	beq.w	800f55e <__kernel_cos+0x136>
 800f44e:	4632      	mov	r2, r6
 800f450:	463b      	mov	r3, r7
 800f452:	4630      	mov	r0, r6
 800f454:	4639      	mov	r1, r7
 800f456:	f7f1 f8cf 	bl	80005f8 <__aeabi_dmul>
 800f45a:	4b51      	ldr	r3, [pc, #324]	; (800f5a0 <__kernel_cos+0x178>)
 800f45c:	2200      	movs	r2, #0
 800f45e:	4604      	mov	r4, r0
 800f460:	460d      	mov	r5, r1
 800f462:	f7f1 f8c9 	bl	80005f8 <__aeabi_dmul>
 800f466:	a340      	add	r3, pc, #256	; (adr r3, 800f568 <__kernel_cos+0x140>)
 800f468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46c:	4682      	mov	sl, r0
 800f46e:	468b      	mov	fp, r1
 800f470:	4620      	mov	r0, r4
 800f472:	4629      	mov	r1, r5
 800f474:	f7f1 f8c0 	bl	80005f8 <__aeabi_dmul>
 800f478:	a33d      	add	r3, pc, #244	; (adr r3, 800f570 <__kernel_cos+0x148>)
 800f47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f47e:	f7f0 ff05 	bl	800028c <__adddf3>
 800f482:	4622      	mov	r2, r4
 800f484:	462b      	mov	r3, r5
 800f486:	f7f1 f8b7 	bl	80005f8 <__aeabi_dmul>
 800f48a:	a33b      	add	r3, pc, #236	; (adr r3, 800f578 <__kernel_cos+0x150>)
 800f48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f490:	f7f0 fefa 	bl	8000288 <__aeabi_dsub>
 800f494:	4622      	mov	r2, r4
 800f496:	462b      	mov	r3, r5
 800f498:	f7f1 f8ae 	bl	80005f8 <__aeabi_dmul>
 800f49c:	a338      	add	r3, pc, #224	; (adr r3, 800f580 <__kernel_cos+0x158>)
 800f49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a2:	f7f0 fef3 	bl	800028c <__adddf3>
 800f4a6:	4622      	mov	r2, r4
 800f4a8:	462b      	mov	r3, r5
 800f4aa:	f7f1 f8a5 	bl	80005f8 <__aeabi_dmul>
 800f4ae:	a336      	add	r3, pc, #216	; (adr r3, 800f588 <__kernel_cos+0x160>)
 800f4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b4:	f7f0 fee8 	bl	8000288 <__aeabi_dsub>
 800f4b8:	4622      	mov	r2, r4
 800f4ba:	462b      	mov	r3, r5
 800f4bc:	f7f1 f89c 	bl	80005f8 <__aeabi_dmul>
 800f4c0:	a333      	add	r3, pc, #204	; (adr r3, 800f590 <__kernel_cos+0x168>)
 800f4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c6:	f7f0 fee1 	bl	800028c <__adddf3>
 800f4ca:	4622      	mov	r2, r4
 800f4cc:	462b      	mov	r3, r5
 800f4ce:	f7f1 f893 	bl	80005f8 <__aeabi_dmul>
 800f4d2:	4622      	mov	r2, r4
 800f4d4:	462b      	mov	r3, r5
 800f4d6:	f7f1 f88f 	bl	80005f8 <__aeabi_dmul>
 800f4da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4de:	4604      	mov	r4, r0
 800f4e0:	460d      	mov	r5, r1
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	4639      	mov	r1, r7
 800f4e6:	f7f1 f887 	bl	80005f8 <__aeabi_dmul>
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	4602      	mov	r2, r0
 800f4ee:	4629      	mov	r1, r5
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f7f0 fec9 	bl	8000288 <__aeabi_dsub>
 800f4f6:	4b2b      	ldr	r3, [pc, #172]	; (800f5a4 <__kernel_cos+0x17c>)
 800f4f8:	4598      	cmp	r8, r3
 800f4fa:	4606      	mov	r6, r0
 800f4fc:	460f      	mov	r7, r1
 800f4fe:	dc10      	bgt.n	800f522 <__kernel_cos+0xfa>
 800f500:	4602      	mov	r2, r0
 800f502:	460b      	mov	r3, r1
 800f504:	4650      	mov	r0, sl
 800f506:	4659      	mov	r1, fp
 800f508:	f7f0 febe 	bl	8000288 <__aeabi_dsub>
 800f50c:	460b      	mov	r3, r1
 800f50e:	4926      	ldr	r1, [pc, #152]	; (800f5a8 <__kernel_cos+0x180>)
 800f510:	4602      	mov	r2, r0
 800f512:	2000      	movs	r0, #0
 800f514:	f7f0 feb8 	bl	8000288 <__aeabi_dsub>
 800f518:	ec41 0b10 	vmov	d0, r0, r1
 800f51c:	b003      	add	sp, #12
 800f51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f522:	4b22      	ldr	r3, [pc, #136]	; (800f5ac <__kernel_cos+0x184>)
 800f524:	4920      	ldr	r1, [pc, #128]	; (800f5a8 <__kernel_cos+0x180>)
 800f526:	4598      	cmp	r8, r3
 800f528:	bfcc      	ite	gt
 800f52a:	4d21      	ldrgt	r5, [pc, #132]	; (800f5b0 <__kernel_cos+0x188>)
 800f52c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f530:	2400      	movs	r4, #0
 800f532:	4622      	mov	r2, r4
 800f534:	462b      	mov	r3, r5
 800f536:	2000      	movs	r0, #0
 800f538:	f7f0 fea6 	bl	8000288 <__aeabi_dsub>
 800f53c:	4622      	mov	r2, r4
 800f53e:	4680      	mov	r8, r0
 800f540:	4689      	mov	r9, r1
 800f542:	462b      	mov	r3, r5
 800f544:	4650      	mov	r0, sl
 800f546:	4659      	mov	r1, fp
 800f548:	f7f0 fe9e 	bl	8000288 <__aeabi_dsub>
 800f54c:	4632      	mov	r2, r6
 800f54e:	463b      	mov	r3, r7
 800f550:	f7f0 fe9a 	bl	8000288 <__aeabi_dsub>
 800f554:	4602      	mov	r2, r0
 800f556:	460b      	mov	r3, r1
 800f558:	4640      	mov	r0, r8
 800f55a:	4649      	mov	r1, r9
 800f55c:	e7da      	b.n	800f514 <__kernel_cos+0xec>
 800f55e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f598 <__kernel_cos+0x170>
 800f562:	e7db      	b.n	800f51c <__kernel_cos+0xf4>
 800f564:	f3af 8000 	nop.w
 800f568:	be8838d4 	.word	0xbe8838d4
 800f56c:	bda8fae9 	.word	0xbda8fae9
 800f570:	bdb4b1c4 	.word	0xbdb4b1c4
 800f574:	3e21ee9e 	.word	0x3e21ee9e
 800f578:	809c52ad 	.word	0x809c52ad
 800f57c:	3e927e4f 	.word	0x3e927e4f
 800f580:	19cb1590 	.word	0x19cb1590
 800f584:	3efa01a0 	.word	0x3efa01a0
 800f588:	16c15177 	.word	0x16c15177
 800f58c:	3f56c16c 	.word	0x3f56c16c
 800f590:	5555554c 	.word	0x5555554c
 800f594:	3fa55555 	.word	0x3fa55555
 800f598:	00000000 	.word	0x00000000
 800f59c:	3ff00000 	.word	0x3ff00000
 800f5a0:	3fe00000 	.word	0x3fe00000
 800f5a4:	3fd33332 	.word	0x3fd33332
 800f5a8:	3ff00000 	.word	0x3ff00000
 800f5ac:	3fe90000 	.word	0x3fe90000
 800f5b0:	3fd20000 	.word	0x3fd20000
 800f5b4:	00000000 	.word	0x00000000

0800f5b8 <__kernel_sin>:
 800f5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5bc:	ed2d 8b04 	vpush	{d8-d9}
 800f5c0:	eeb0 8a41 	vmov.f32	s16, s2
 800f5c4:	eef0 8a61 	vmov.f32	s17, s3
 800f5c8:	ec55 4b10 	vmov	r4, r5, d0
 800f5cc:	b083      	sub	sp, #12
 800f5ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f5d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f5d6:	9001      	str	r0, [sp, #4]
 800f5d8:	da06      	bge.n	800f5e8 <__kernel_sin+0x30>
 800f5da:	ee10 0a10 	vmov	r0, s0
 800f5de:	4629      	mov	r1, r5
 800f5e0:	f7f1 faba 	bl	8000b58 <__aeabi_d2iz>
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	d051      	beq.n	800f68c <__kernel_sin+0xd4>
 800f5e8:	4622      	mov	r2, r4
 800f5ea:	462b      	mov	r3, r5
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	4629      	mov	r1, r5
 800f5f0:	f7f1 f802 	bl	80005f8 <__aeabi_dmul>
 800f5f4:	4682      	mov	sl, r0
 800f5f6:	468b      	mov	fp, r1
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	460b      	mov	r3, r1
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	4629      	mov	r1, r5
 800f600:	f7f0 fffa 	bl	80005f8 <__aeabi_dmul>
 800f604:	a341      	add	r3, pc, #260	; (adr r3, 800f70c <__kernel_sin+0x154>)
 800f606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60a:	4680      	mov	r8, r0
 800f60c:	4689      	mov	r9, r1
 800f60e:	4650      	mov	r0, sl
 800f610:	4659      	mov	r1, fp
 800f612:	f7f0 fff1 	bl	80005f8 <__aeabi_dmul>
 800f616:	a33f      	add	r3, pc, #252	; (adr r3, 800f714 <__kernel_sin+0x15c>)
 800f618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61c:	f7f0 fe34 	bl	8000288 <__aeabi_dsub>
 800f620:	4652      	mov	r2, sl
 800f622:	465b      	mov	r3, fp
 800f624:	f7f0 ffe8 	bl	80005f8 <__aeabi_dmul>
 800f628:	a33c      	add	r3, pc, #240	; (adr r3, 800f71c <__kernel_sin+0x164>)
 800f62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62e:	f7f0 fe2d 	bl	800028c <__adddf3>
 800f632:	4652      	mov	r2, sl
 800f634:	465b      	mov	r3, fp
 800f636:	f7f0 ffdf 	bl	80005f8 <__aeabi_dmul>
 800f63a:	a33a      	add	r3, pc, #232	; (adr r3, 800f724 <__kernel_sin+0x16c>)
 800f63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f640:	f7f0 fe22 	bl	8000288 <__aeabi_dsub>
 800f644:	4652      	mov	r2, sl
 800f646:	465b      	mov	r3, fp
 800f648:	f7f0 ffd6 	bl	80005f8 <__aeabi_dmul>
 800f64c:	a337      	add	r3, pc, #220	; (adr r3, 800f72c <__kernel_sin+0x174>)
 800f64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f652:	f7f0 fe1b 	bl	800028c <__adddf3>
 800f656:	9b01      	ldr	r3, [sp, #4]
 800f658:	4606      	mov	r6, r0
 800f65a:	460f      	mov	r7, r1
 800f65c:	b9eb      	cbnz	r3, 800f69a <__kernel_sin+0xe2>
 800f65e:	4602      	mov	r2, r0
 800f660:	460b      	mov	r3, r1
 800f662:	4650      	mov	r0, sl
 800f664:	4659      	mov	r1, fp
 800f666:	f7f0 ffc7 	bl	80005f8 <__aeabi_dmul>
 800f66a:	a325      	add	r3, pc, #148	; (adr r3, 800f700 <__kernel_sin+0x148>)
 800f66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f670:	f7f0 fe0a 	bl	8000288 <__aeabi_dsub>
 800f674:	4642      	mov	r2, r8
 800f676:	464b      	mov	r3, r9
 800f678:	f7f0 ffbe 	bl	80005f8 <__aeabi_dmul>
 800f67c:	4602      	mov	r2, r0
 800f67e:	460b      	mov	r3, r1
 800f680:	4620      	mov	r0, r4
 800f682:	4629      	mov	r1, r5
 800f684:	f7f0 fe02 	bl	800028c <__adddf3>
 800f688:	4604      	mov	r4, r0
 800f68a:	460d      	mov	r5, r1
 800f68c:	ec45 4b10 	vmov	d0, r4, r5
 800f690:	b003      	add	sp, #12
 800f692:	ecbd 8b04 	vpop	{d8-d9}
 800f696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f69a:	4b1b      	ldr	r3, [pc, #108]	; (800f708 <__kernel_sin+0x150>)
 800f69c:	ec51 0b18 	vmov	r0, r1, d8
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	f7f0 ffa9 	bl	80005f8 <__aeabi_dmul>
 800f6a6:	4632      	mov	r2, r6
 800f6a8:	ec41 0b19 	vmov	d9, r0, r1
 800f6ac:	463b      	mov	r3, r7
 800f6ae:	4640      	mov	r0, r8
 800f6b0:	4649      	mov	r1, r9
 800f6b2:	f7f0 ffa1 	bl	80005f8 <__aeabi_dmul>
 800f6b6:	4602      	mov	r2, r0
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	ec51 0b19 	vmov	r0, r1, d9
 800f6be:	f7f0 fde3 	bl	8000288 <__aeabi_dsub>
 800f6c2:	4652      	mov	r2, sl
 800f6c4:	465b      	mov	r3, fp
 800f6c6:	f7f0 ff97 	bl	80005f8 <__aeabi_dmul>
 800f6ca:	ec53 2b18 	vmov	r2, r3, d8
 800f6ce:	f7f0 fddb 	bl	8000288 <__aeabi_dsub>
 800f6d2:	a30b      	add	r3, pc, #44	; (adr r3, 800f700 <__kernel_sin+0x148>)
 800f6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d8:	4606      	mov	r6, r0
 800f6da:	460f      	mov	r7, r1
 800f6dc:	4640      	mov	r0, r8
 800f6de:	4649      	mov	r1, r9
 800f6e0:	f7f0 ff8a 	bl	80005f8 <__aeabi_dmul>
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	460b      	mov	r3, r1
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	4639      	mov	r1, r7
 800f6ec:	f7f0 fdce 	bl	800028c <__adddf3>
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	4629      	mov	r1, r5
 800f6f8:	f7f0 fdc6 	bl	8000288 <__aeabi_dsub>
 800f6fc:	e7c4      	b.n	800f688 <__kernel_sin+0xd0>
 800f6fe:	bf00      	nop
 800f700:	55555549 	.word	0x55555549
 800f704:	3fc55555 	.word	0x3fc55555
 800f708:	3fe00000 	.word	0x3fe00000
 800f70c:	5acfd57c 	.word	0x5acfd57c
 800f710:	3de5d93a 	.word	0x3de5d93a
 800f714:	8a2b9ceb 	.word	0x8a2b9ceb
 800f718:	3e5ae5e6 	.word	0x3e5ae5e6
 800f71c:	57b1fe7d 	.word	0x57b1fe7d
 800f720:	3ec71de3 	.word	0x3ec71de3
 800f724:	19c161d5 	.word	0x19c161d5
 800f728:	3f2a01a0 	.word	0x3f2a01a0
 800f72c:	1110f8a6 	.word	0x1110f8a6
 800f730:	3f811111 	.word	0x3f811111

0800f734 <fabs>:
 800f734:	ec51 0b10 	vmov	r0, r1, d0
 800f738:	ee10 2a10 	vmov	r2, s0
 800f73c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f740:	ec43 2b10 	vmov	d0, r2, r3
 800f744:	4770      	bx	lr
	...

0800f748 <scalbn>:
 800f748:	b570      	push	{r4, r5, r6, lr}
 800f74a:	ec55 4b10 	vmov	r4, r5, d0
 800f74e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f752:	4606      	mov	r6, r0
 800f754:	462b      	mov	r3, r5
 800f756:	b999      	cbnz	r1, 800f780 <scalbn+0x38>
 800f758:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f75c:	4323      	orrs	r3, r4
 800f75e:	d03f      	beq.n	800f7e0 <scalbn+0x98>
 800f760:	4b35      	ldr	r3, [pc, #212]	; (800f838 <scalbn+0xf0>)
 800f762:	4629      	mov	r1, r5
 800f764:	ee10 0a10 	vmov	r0, s0
 800f768:	2200      	movs	r2, #0
 800f76a:	f7f0 ff45 	bl	80005f8 <__aeabi_dmul>
 800f76e:	4b33      	ldr	r3, [pc, #204]	; (800f83c <scalbn+0xf4>)
 800f770:	429e      	cmp	r6, r3
 800f772:	4604      	mov	r4, r0
 800f774:	460d      	mov	r5, r1
 800f776:	da10      	bge.n	800f79a <scalbn+0x52>
 800f778:	a327      	add	r3, pc, #156	; (adr r3, 800f818 <scalbn+0xd0>)
 800f77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77e:	e01f      	b.n	800f7c0 <scalbn+0x78>
 800f780:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f784:	4291      	cmp	r1, r2
 800f786:	d10c      	bne.n	800f7a2 <scalbn+0x5a>
 800f788:	ee10 2a10 	vmov	r2, s0
 800f78c:	4620      	mov	r0, r4
 800f78e:	4629      	mov	r1, r5
 800f790:	f7f0 fd7c 	bl	800028c <__adddf3>
 800f794:	4604      	mov	r4, r0
 800f796:	460d      	mov	r5, r1
 800f798:	e022      	b.n	800f7e0 <scalbn+0x98>
 800f79a:	460b      	mov	r3, r1
 800f79c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f7a0:	3936      	subs	r1, #54	; 0x36
 800f7a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f7a6:	4296      	cmp	r6, r2
 800f7a8:	dd0d      	ble.n	800f7c6 <scalbn+0x7e>
 800f7aa:	2d00      	cmp	r5, #0
 800f7ac:	a11c      	add	r1, pc, #112	; (adr r1, 800f820 <scalbn+0xd8>)
 800f7ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7b2:	da02      	bge.n	800f7ba <scalbn+0x72>
 800f7b4:	a11c      	add	r1, pc, #112	; (adr r1, 800f828 <scalbn+0xe0>)
 800f7b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7ba:	a319      	add	r3, pc, #100	; (adr r3, 800f820 <scalbn+0xd8>)
 800f7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c0:	f7f0 ff1a 	bl	80005f8 <__aeabi_dmul>
 800f7c4:	e7e6      	b.n	800f794 <scalbn+0x4c>
 800f7c6:	1872      	adds	r2, r6, r1
 800f7c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f7cc:	428a      	cmp	r2, r1
 800f7ce:	dcec      	bgt.n	800f7aa <scalbn+0x62>
 800f7d0:	2a00      	cmp	r2, #0
 800f7d2:	dd08      	ble.n	800f7e6 <scalbn+0x9e>
 800f7d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f7d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f7dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f7e0:	ec45 4b10 	vmov	d0, r4, r5
 800f7e4:	bd70      	pop	{r4, r5, r6, pc}
 800f7e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f7ea:	da08      	bge.n	800f7fe <scalbn+0xb6>
 800f7ec:	2d00      	cmp	r5, #0
 800f7ee:	a10a      	add	r1, pc, #40	; (adr r1, 800f818 <scalbn+0xd0>)
 800f7f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7f4:	dac0      	bge.n	800f778 <scalbn+0x30>
 800f7f6:	a10e      	add	r1, pc, #56	; (adr r1, 800f830 <scalbn+0xe8>)
 800f7f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7fc:	e7bc      	b.n	800f778 <scalbn+0x30>
 800f7fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f802:	3236      	adds	r2, #54	; 0x36
 800f804:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f808:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f80c:	4620      	mov	r0, r4
 800f80e:	4b0c      	ldr	r3, [pc, #48]	; (800f840 <scalbn+0xf8>)
 800f810:	2200      	movs	r2, #0
 800f812:	e7d5      	b.n	800f7c0 <scalbn+0x78>
 800f814:	f3af 8000 	nop.w
 800f818:	c2f8f359 	.word	0xc2f8f359
 800f81c:	01a56e1f 	.word	0x01a56e1f
 800f820:	8800759c 	.word	0x8800759c
 800f824:	7e37e43c 	.word	0x7e37e43c
 800f828:	8800759c 	.word	0x8800759c
 800f82c:	fe37e43c 	.word	0xfe37e43c
 800f830:	c2f8f359 	.word	0xc2f8f359
 800f834:	81a56e1f 	.word	0x81a56e1f
 800f838:	43500000 	.word	0x43500000
 800f83c:	ffff3cb0 	.word	0xffff3cb0
 800f840:	3c900000 	.word	0x3c900000
 800f844:	00000000 	.word	0x00000000

0800f848 <floor>:
 800f848:	ec51 0b10 	vmov	r0, r1, d0
 800f84c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f854:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f858:	2e13      	cmp	r6, #19
 800f85a:	ee10 5a10 	vmov	r5, s0
 800f85e:	ee10 8a10 	vmov	r8, s0
 800f862:	460c      	mov	r4, r1
 800f864:	dc31      	bgt.n	800f8ca <floor+0x82>
 800f866:	2e00      	cmp	r6, #0
 800f868:	da14      	bge.n	800f894 <floor+0x4c>
 800f86a:	a333      	add	r3, pc, #204	; (adr r3, 800f938 <floor+0xf0>)
 800f86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f870:	f7f0 fd0c 	bl	800028c <__adddf3>
 800f874:	2200      	movs	r2, #0
 800f876:	2300      	movs	r3, #0
 800f878:	f7f1 f94e 	bl	8000b18 <__aeabi_dcmpgt>
 800f87c:	b138      	cbz	r0, 800f88e <floor+0x46>
 800f87e:	2c00      	cmp	r4, #0
 800f880:	da53      	bge.n	800f92a <floor+0xe2>
 800f882:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f886:	4325      	orrs	r5, r4
 800f888:	d052      	beq.n	800f930 <floor+0xe8>
 800f88a:	4c2d      	ldr	r4, [pc, #180]	; (800f940 <floor+0xf8>)
 800f88c:	2500      	movs	r5, #0
 800f88e:	4621      	mov	r1, r4
 800f890:	4628      	mov	r0, r5
 800f892:	e024      	b.n	800f8de <floor+0x96>
 800f894:	4f2b      	ldr	r7, [pc, #172]	; (800f944 <floor+0xfc>)
 800f896:	4137      	asrs	r7, r6
 800f898:	ea01 0307 	and.w	r3, r1, r7
 800f89c:	4303      	orrs	r3, r0
 800f89e:	d01e      	beq.n	800f8de <floor+0x96>
 800f8a0:	a325      	add	r3, pc, #148	; (adr r3, 800f938 <floor+0xf0>)
 800f8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a6:	f7f0 fcf1 	bl	800028c <__adddf3>
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	f7f1 f933 	bl	8000b18 <__aeabi_dcmpgt>
 800f8b2:	2800      	cmp	r0, #0
 800f8b4:	d0eb      	beq.n	800f88e <floor+0x46>
 800f8b6:	2c00      	cmp	r4, #0
 800f8b8:	bfbe      	ittt	lt
 800f8ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f8be:	4133      	asrlt	r3, r6
 800f8c0:	18e4      	addlt	r4, r4, r3
 800f8c2:	ea24 0407 	bic.w	r4, r4, r7
 800f8c6:	2500      	movs	r5, #0
 800f8c8:	e7e1      	b.n	800f88e <floor+0x46>
 800f8ca:	2e33      	cmp	r6, #51	; 0x33
 800f8cc:	dd0b      	ble.n	800f8e6 <floor+0x9e>
 800f8ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f8d2:	d104      	bne.n	800f8de <floor+0x96>
 800f8d4:	ee10 2a10 	vmov	r2, s0
 800f8d8:	460b      	mov	r3, r1
 800f8da:	f7f0 fcd7 	bl	800028c <__adddf3>
 800f8de:	ec41 0b10 	vmov	d0, r0, r1
 800f8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f8ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f8ee:	40df      	lsrs	r7, r3
 800f8f0:	4238      	tst	r0, r7
 800f8f2:	d0f4      	beq.n	800f8de <floor+0x96>
 800f8f4:	a310      	add	r3, pc, #64	; (adr r3, 800f938 <floor+0xf0>)
 800f8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fa:	f7f0 fcc7 	bl	800028c <__adddf3>
 800f8fe:	2200      	movs	r2, #0
 800f900:	2300      	movs	r3, #0
 800f902:	f7f1 f909 	bl	8000b18 <__aeabi_dcmpgt>
 800f906:	2800      	cmp	r0, #0
 800f908:	d0c1      	beq.n	800f88e <floor+0x46>
 800f90a:	2c00      	cmp	r4, #0
 800f90c:	da0a      	bge.n	800f924 <floor+0xdc>
 800f90e:	2e14      	cmp	r6, #20
 800f910:	d101      	bne.n	800f916 <floor+0xce>
 800f912:	3401      	adds	r4, #1
 800f914:	e006      	b.n	800f924 <floor+0xdc>
 800f916:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f91a:	2301      	movs	r3, #1
 800f91c:	40b3      	lsls	r3, r6
 800f91e:	441d      	add	r5, r3
 800f920:	45a8      	cmp	r8, r5
 800f922:	d8f6      	bhi.n	800f912 <floor+0xca>
 800f924:	ea25 0507 	bic.w	r5, r5, r7
 800f928:	e7b1      	b.n	800f88e <floor+0x46>
 800f92a:	2500      	movs	r5, #0
 800f92c:	462c      	mov	r4, r5
 800f92e:	e7ae      	b.n	800f88e <floor+0x46>
 800f930:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f934:	e7ab      	b.n	800f88e <floor+0x46>
 800f936:	bf00      	nop
 800f938:	8800759c 	.word	0x8800759c
 800f93c:	7e37e43c 	.word	0x7e37e43c
 800f940:	bff00000 	.word	0xbff00000
 800f944:	000fffff 	.word	0x000fffff

0800f948 <_init>:
 800f948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f94a:	bf00      	nop
 800f94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f94e:	bc08      	pop	{r3}
 800f950:	469e      	mov	lr, r3
 800f952:	4770      	bx	lr

0800f954 <_fini>:
 800f954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f956:	bf00      	nop
 800f958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f95a:	bc08      	pop	{r3}
 800f95c:	469e      	mov	lr, r3
 800f95e:	4770      	bx	lr
