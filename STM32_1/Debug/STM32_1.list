
STM32_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f218  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010d0  0800f3a8  0800f3a8  0001f3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010478  08010478  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010478  08010478  00020478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010480  08010480  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010480  08010480  00020480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010484  08010484  00020484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08010488  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301dc  2**0
                  CONTENTS
 10 .bss          00005214  200001dc  200001dc  000301dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200053f0  200053f0  000301dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e049  00000000  00000000  00030292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000043ca  00000000  00000000  0004e2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b28  00000000  00000000  000526a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000152e  00000000  00000000  000541d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002589e  00000000  00000000  000556fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f076  00000000  00000000  0007af9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000db7ab  00000000  00000000  0009a012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008634  00000000  00000000  001757c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0017ddf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f390 	.word	0x0800f390

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800f390 	.word	0x0800f390

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <comm_init>:

void uart_ack(uint8_t id);

/* Functions */

void comm_init(UART_HandleTypeDef* uart, Instruction* curInstObjRef, CompleteError* cpltErrObjRef) {
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
	instructionId = 0;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <comm_init+0x78>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
	ack_tx = 0;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <comm_init+0x7c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]

	huart3Ptr = uart;
 8000f5c:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <comm_init+0x80>)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6013      	str	r3, [r2, #0]
	curInstPtr = curInstObjRef;
 8000f62:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <comm_init+0x84>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	6013      	str	r3, [r2, #0]
	cpltErrPtr = cpltErrObjRef;
 8000f68:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <comm_init+0x88>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]

	curInstPtr->id = 0;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <comm_init+0x84>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
	curInstPtr->type = INST_TYPE_UNDEFINED;
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <comm_init+0x84>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	705a      	strb	r2, [r3, #1]
	curInstPtr->val = 0;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <comm_init+0x84>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2200      	movs	r2, #0
 8000f84:	805a      	strh	r2, [r3, #2]

	cpltErrPtr->id = 0;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <comm_init+0x88>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
	cpltErrPtr->type = CPLTERR_TYPE_UNDEFINED;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <comm_init+0x88>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2202      	movs	r2, #2
 8000f94:	705a      	strb	r2, [r3, #1]
	cpltErrPtr->pos_x = 0;
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <comm_init+0x88>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	805a      	strh	r2, [r3, #2]
	cpltErrPtr->pos_y = 0;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <comm_init+0x88>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	809a      	strh	r2, [r3, #4]
	cpltErrPtr->finished = 1;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <comm_init+0x88>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2201      	movs	r2, #1
 8000fac:	719a      	strb	r2, [r3, #6]

	return;
 8000fae:	bf00      	nop
}
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	200001f8 	.word	0x200001f8
 8000fc0:	200001f9 	.word	0x200001f9
 8000fc4:	2000020c 	.word	0x2000020c
 8000fc8:	20000210 	.word	0x20000210
 8000fcc:	20000214 	.word	0x20000214

08000fd0 <uart_send>:

HAL_StatusTypeDef uart_send() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	if (cpltErrPtr->id == 0) {
 8000fd4:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <uart_send+0xd4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <uart_send+0x12>
		return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e05e      	b.n	80010a0 <uart_send+0xd0>
	}
	if (ack_tx != cpltErrPtr->id - 1) {	// RPI is not expecting CompleteError with this id
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <uart_send+0xd8>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <uart_send+0xd4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d001      	beq.n	8000ff8 <uart_send+0x28>
		return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e053      	b.n	80010a0 <uart_send+0xd0>
	}
	uartbuf[0] = (((0x01 << 1) | (cpltErrPtr->type & 0x01)) << 6) | (uint8_t)((cpltErrPtr->pos_x >> 5) & 0x003F);
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <uart_send+0xd4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	019b      	lsls	r3, r3, #6
 8001000:	b25b      	sxtb	r3, r3
 8001002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001006:	b25b      	sxtb	r3, r3
 8001008:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800100c:	b25a      	sxtb	r2, r3
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <uart_send+0xd4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001016:	115b      	asrs	r3, r3, #5
 8001018:	b21b      	sxth	r3, r3
 800101a:	b25b      	sxtb	r3, r3
 800101c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001020:	b25b      	sxtb	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b25b      	sxtb	r3, r3
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <uart_send+0xdc>)
 800102a:	701a      	strb	r2, [r3, #0]
	uartbuf[1] = (uint8_t)((cpltErrPtr->pos_x & 0x1F) << 3) | (uint8_t)((cpltErrPtr->pos_y >> 8) & 0x0007);
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <uart_send+0xd4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	b25a      	sxtb	r2, r3
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <uart_send+0xd4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001044:	121b      	asrs	r3, r3, #8
 8001046:	b21b      	sxth	r3, r3
 8001048:	b25b      	sxtb	r3, r3
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b25b      	sxtb	r3, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <uart_send+0xdc>)
 8001058:	705a      	strb	r2, [r3, #1]
	uartbuf[2] = (uint8_t)(cpltErrPtr->pos_y & 0xFF);
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <uart_send+0xd4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <uart_send+0xdc>)
 8001066:	709a      	strb	r2, [r3, #2]
	uartbuf[3] = cpltErrPtr->id;
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <uart_send+0xd4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	781a      	ldrb	r2, [r3, #0]
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <uart_send+0xdc>)
 8001070:	70da      	strb	r2, [r3, #3]
	while (ack_tx < cpltErrPtr->id) {
 8001072:	e00d      	b.n	8001090 <uart_send+0xc0>
		/*while (HAL_UART_Transmit(huart3Ptr, (uint8_t*)uartbuf, 4, UART_ACK_MAX_DELAY) != HAL_OK) {
			osDelay(500);
		}*/
		HAL_UART_Transmit(huart3Ptr, (uint8_t*)uartbuf, 4, UART_ACK_MAX_DELAY);
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <uart_send+0xe0>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	f241 3388 	movw	r3, #5000	; 0x1388
 800107c:	2204      	movs	r2, #4
 800107e:	490b      	ldr	r1, [pc, #44]	; (80010ac <uart_send+0xdc>)
 8001080:	f006 fb41 	bl	8007706 <HAL_UART_Transmit>
		// Waiting for ACK
		// Disable ack from rpi
		ack_tx++;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <uart_send+0xd8>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <uart_send+0xd8>)
 800108e:	701a      	strb	r2, [r3, #0]
	while (ack_tx < cpltErrPtr->id) {
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <uart_send+0xd4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <uart_send+0xd8>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d8ea      	bhi.n	8001074 <uart_send+0xa4>
			else {
				return HAL_ERROR;
			}
		}*/
	}
	return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000214 	.word	0x20000214
 80010a8:	200001f9 	.word	0x200001f9
 80010ac:	200001fc 	.word	0x200001fc
 80010b0:	2000020c 	.word	0x2000020c

080010b4 <uart_receive>:
	uartbuf[3] = id;
	HAL_UART_Transmit(huart3Ptr, (uint8_t*)uartbuf, 4, UART_ACK_MAX_DELAY);
	return;
}

HAL_StatusTypeDef uart_receive(const uint8_t* buf) {
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	uint8_t id = buf[3];
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3303      	adds	r3, #3
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	73fb      	strb	r3, [r7, #15]
		if ((cpltErrPtr->id == id) && (cpltErrPtr->finished)) {	// Check if the ACK id is replying to CpltErr STM is sending
			ack_tx = id;
			return HAL_OK;
		}
	}*/
	if (id == instructionId + 1) {		// Received instruction is correct in order
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <uart_receive+0x8c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d12f      	bne.n	8001130 <uart_receive+0x7c>
		if ((cpltErrPtr->id == instructionId) && (cpltErrPtr->finished)) {	// Current instruction finished
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <uart_receive+0x90>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <uart_receive+0x8c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d128      	bne.n	8001130 <uart_receive+0x7c>
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <uart_receive+0x90>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	799b      	ldrb	r3, [r3, #6]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d023      	beq.n	8001130 <uart_receive+0x7c>
			curInstPtr->id = id;
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <uart_receive+0x94>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	701a      	strb	r2, [r3, #0]
			curInstPtr->type = (buf[0] >> 6) & 0x01;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	099b      	lsrs	r3, r3, #6
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <uart_receive+0x94>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f002 0201 	and.w	r2, r2, #1
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	705a      	strb	r2, [r3, #1]
			curInstPtr->val = ((int16_t)buf[1] << 8) | buf[2];
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3301      	adds	r3, #1
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b219      	sxth	r1, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3302      	adds	r3, #2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b21a      	sxth	r2, r3
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <uart_receive+0x94>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	b212      	sxth	r2, r2
 800111e:	805a      	strh	r2, [r3, #2]
			instructionId++;
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <uart_receive+0x8c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <uart_receive+0x8c>)
 800112a:	701a      	strb	r2, [r3, #0]
			//uart_ack(instructionId);
			return HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	e000      	b.n	8001132 <uart_receive+0x7e>
		}
	}
	//uart_ack(instructionId);
	return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200001f8 	.word	0x200001f8
 8001144:	20000214 	.word	0x20000214
 8001148:	20000210 	.word	0x20000210

0800114c <newCpltErr>:

uint8_t getCurInstId() {
	return instructionId;
}

uint8_t newCpltErr(uint8_t id) {
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	if ((id == instructionId) && (ack_tx == id - 1)) {
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <newCpltErr+0x5c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	79fa      	ldrb	r2, [r7, #7]
 800115c:	429a      	cmp	r2, r3
 800115e:	d11c      	bne.n	800119a <newCpltErr+0x4e>
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <newCpltErr+0x60>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	3b01      	subs	r3, #1
 800116a:	429a      	cmp	r2, r3
 800116c:	d115      	bne.n	800119a <newCpltErr+0x4e>
		cpltErrPtr->id = id;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <newCpltErr+0x64>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	701a      	strb	r2, [r3, #0]
		cpltErrPtr->type = CPLTERR_TYPE_UNDEFINED;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <newCpltErr+0x64>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2202      	movs	r2, #2
 800117c:	705a      	strb	r2, [r3, #1]
		cpltErrPtr->pos_x = 0;
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <newCpltErr+0x64>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2200      	movs	r2, #0
 8001184:	805a      	strh	r2, [r3, #2]
		cpltErrPtr->pos_y = 0;
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <newCpltErr+0x64>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2200      	movs	r2, #0
 800118c:	809a      	strh	r2, [r3, #4]
		cpltErrPtr->finished = 0;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <newCpltErr+0x64>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	719a      	strb	r2, [r3, #6]
		return 1;
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <newCpltErr+0x50>
	}
	return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	200001f8 	.word	0x200001f8
 80011ac:	200001f9 	.word	0x200001f9
 80011b0:	20000214 	.word	0x20000214

080011b4 <imu_init>:

/*+++++++++++++++++++++++++++++++++++*/

/*----------------------------------------------------------------*/

uint8_t imu_init(I2C_HandleTypeDef* hi2c_ptr) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	hi2c1_ptr = hi2c_ptr;
 80011bc:	4a37      	ldr	r2, [pc, #220]	; (800129c <imu_init+0xe8>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]

	// Reset chip
	if (!write_one_byte(0, B0_PWR_MGMT_1, 0x80 | 0x41)) return 1;
 80011c2:	22c1      	movs	r2, #193	; 0xc1
 80011c4:	2106      	movs	r1, #6
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 f8ac 	bl	8001324 <write_one_byte>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <imu_init+0x22>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e05d      	b.n	8001292 <imu_init+0xde>

	cur_bank = get_cur_bank();
 80011d6:	f000 f907 	bl	80013e8 <get_cur_bank>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <imu_init+0xec>)
 80011e0:	701a      	strb	r2, [r3, #0]

	HAL_Delay(100);
 80011e2:	2064      	movs	r0, #100	; 0x64
 80011e4:	f002 ff1e 	bl	8004024 <HAL_Delay>
	uint8_t who_am_i = read_one_byte(0, 0);
 80011e8:	2100      	movs	r1, #0
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f862 	bl	80012b4 <read_one_byte>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
	if (who_am_i != 0xEA) { 	// read WHO_AM_I register, should receive 0xEA
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2bea      	cmp	r3, #234	; 0xea
 80011f8:	d001      	beq.n	80011fe <imu_init+0x4a>
		return 2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	e049      	b.n	8001292 <imu_init+0xde>
	}

	// Wake up chip
	if (!write_one_byte(0, B0_PWR_MGMT_1, ~0x40 & 0x41)) return 3;
 80011fe:	2201      	movs	r2, #1
 8001200:	2106      	movs	r1, #6
 8001202:	2000      	movs	r0, #0
 8001204:	f000 f88e 	bl	8001324 <write_one_byte>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <imu_init+0x5e>
 800120e:	2303      	movs	r3, #3
 8001210:	e03f      	b.n	8001292 <imu_init+0xde>
	HAL_Delay(50);
 8001212:	2032      	movs	r0, #50	; 0x32
 8001214:	f002 ff06 	bl	8004024 <HAL_Delay>

	// Enables ODR start-time alignment when any of the following registers is written: GYRO_SMPLRT_DIV,
	// ACCEL_SMPLRT_DIV_1, ACCEL_SMPLRT_DIV_2, I2C_MST_ODR_CONFIG.
	if (!write_one_byte(2, B2_ODR_ALIGN_EN, 0x01)) return 4;
 8001218:	2201      	movs	r2, #1
 800121a:	2109      	movs	r1, #9
 800121c:	2002      	movs	r0, #2
 800121e:	f000 f881 	bl	8001324 <write_one_byte>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <imu_init+0x78>
 8001228:	2304      	movs	r3, #4
 800122a:	e032      	b.n	8001292 <imu_init+0xde>
	HAL_Delay(50);
 800122c:	2032      	movs	r0, #50	; 0x32
 800122e:	f002 fef9 	bl	8004024 <HAL_Delay>

	// Set accel low pass filter
	//if (!write_one_byte(2, B2_ACCEL_CONFIG, (ACCEL_DLPFCFG_val << 3) | ACCEL_FCHOICE_val)) return 5;

	// Set gyro low pass filter and scale
	if (!write_one_byte(2, B2_GYRO_CONFIG_1, (((GYRO_DLPFCFG_val << 2) | GYRO_FS_SEL_val) << 1) | GYRO_FCHOICE_val)) return 6;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <imu_init+0xf0>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <imu_init+0xf4>)
 800123a:	7812      	ldrb	r2, [r2, #0]
 800123c:	4313      	orrs	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	b25a      	sxtb	r2, r3
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <imu_init+0xf8>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b25b      	sxtb	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b25b      	sxtb	r3, r3
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	2101      	movs	r1, #1
 8001252:	2002      	movs	r0, #2
 8001254:	f000 f866 	bl	8001324 <write_one_byte>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <imu_init+0xae>
 800125e:	2306      	movs	r3, #6
 8001260:	e017      	b.n	8001292 <imu_init+0xde>
	HAL_Delay(50);
 8001262:	2032      	movs	r0, #50	; 0x32
 8001264:	f002 fede 	bl	8004024 <HAL_Delay>
	//if (ACCEL_SMPLRT_DIV_val > 0x0FFF) ACCEL_SMPLRT_DIV_val = 0x0FFF;
	//if (!write_one_byte(2, B2_ACCEL_SMPLRT_DIV_1, (uint8_t)(ACCEL_SMPLRT_DIV_val >> 8))) return 7;
	//if (!write_one_byte(2, B2_ACCEL_SMPLRT_DIV_2, (uint8_t)(ACCEL_SMPLRT_DIV_val & 0x00FF))) return 8;

	// Set gyro sample rate divider
	if (!write_one_byte(2, B2_GYRO_SMPLRT_DIV, GYRO_SMPLRT_DIV_val)) return 9;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <imu_init+0xfc>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	2100      	movs	r1, #0
 8001270:	2002      	movs	r0, #2
 8001272:	f000 f857 	bl	8001324 <write_one_byte>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <imu_init+0xcc>
 800127c:	2309      	movs	r3, #9
 800127e:	e008      	b.n	8001292 <imu_init+0xde>
	HAL_Delay(50);
 8001280:	2032      	movs	r0, #50	; 0x32
 8001282:	f002 fecf 	bl	8004024 <HAL_Delay>

	// Caliberate accelerometer (eliminate bias)
	//accel_caliberate();

	// Caliberate gyroscope (eliminate bias)
	gyro_caliberate();
 8001286:	f000 f943 	bl	8001510 <gyro_caliberate>
	HAL_Delay(50);
 800128a:	2032      	movs	r0, #50	; 0x32
 800128c:	f002 feca 	bl	8004024 <HAL_Delay>

	return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000218 	.word	0x20000218
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000002 	.word	0x20000002
 80012a8:	2000021c 	.word	0x2000021c
 80012ac:	20000001 	.word	0x20000001
 80012b0:	2000021d 	.word	0x2000021d

080012b4 <read_one_byte>:

uint8_t read_one_byte(uint8_t bank, uint8_t regAddr) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	4613      	mov	r3, r2
 80012c2:	71bb      	strb	r3, [r7, #6]

	if (!select_bank(bank)) return 0;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f85a 	bl	8001380 <select_bank>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <read_one_byte+0x22>
 80012d2:	2300      	movs	r3, #0
 80012d4:	e020      	b.n	8001318 <read_one_byte+0x64>
	uint8_t buf[1];

	uint8_t reg = regAddr;
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	72fb      	strb	r3, [r7, #11]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <read_one_byte+0x6c>)
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	f107 020b 	add.w	r2, r7, #11
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2301      	movs	r3, #1
 80012ea:	21d0      	movs	r1, #208	; 0xd0
 80012ec:	f003 fb5c 	bl	80049a8 <HAL_I2C_Master_Transmit>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10f      	bne.n	8001316 <read_one_byte+0x62>
		if (HAL_I2C_Master_Receive(hi2c1_ptr, IMU_I2C_ADDR, buf, 1, I2C_MAX_DELAY) == HAL_OK) {
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <read_one_byte+0x6c>)
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	f107 020c 	add.w	r2, r7, #12
 80012fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	21d0      	movs	r1, #208	; 0xd0
 8001308:	f003 fc4c 	bl	8004ba4 <HAL_I2C_Master_Receive>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <read_one_byte+0x62>
			return buf[0];
 8001312:	7b3b      	ldrb	r3, [r7, #12]
 8001314:	e000      	b.n	8001318 <read_one_byte+0x64>
		}
	}
	return 0;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000218 	.word	0x20000218

08001324 <write_one_byte>:

uint8_t write_one_byte(uint8_t bank, uint8_t regAddr, uint8_t data) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af02      	add	r7, sp, #8
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	460b      	mov	r3, r1
 8001330:	71bb      	strb	r3, [r7, #6]
 8001332:	4613      	mov	r3, r2
 8001334:	717b      	strb	r3, [r7, #5]

	if (!select_bank(bank)) return 0;
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f821 	bl	8001380 <select_bank>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <write_one_byte+0x24>
 8001344:	2300      	movs	r3, #0
 8001346:	e014      	b.n	8001372 <write_one_byte+0x4e>
	uint8_t buf[2];
	buf[0] = regAddr;
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 800134c:	797b      	ldrb	r3, [r7, #5]
 800134e:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, buf, 2, HAL_MAX_DELAY) == HAL_OK) {
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <write_one_byte+0x58>)
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	f107 020c 	add.w	r2, r7, #12
 8001358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2302      	movs	r3, #2
 8001360:	21d0      	movs	r1, #208	; 0xd0
 8001362:	f003 fb21 	bl	80049a8 <HAL_I2C_Master_Transmit>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <write_one_byte+0x4c>
		return 1;
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <write_one_byte+0x4e>
	}
	return 0;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000218 	.word	0x20000218

08001380 <select_bank>:

uint8_t select_bank(uint8_t bank) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af02      	add	r7, sp, #8
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]

	if (bank > 3) return 0;
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b03      	cmp	r3, #3
 800138e:	d901      	bls.n	8001394 <select_bank+0x14>
 8001390:	2300      	movs	r3, #0
 8001392:	e020      	b.n	80013d6 <select_bank+0x56>
	if (cur_bank == bank) return 1;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <select_bank+0x60>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	79fa      	ldrb	r2, [r7, #7]
 800139a:	429a      	cmp	r2, r3
 800139c:	d101      	bne.n	80013a2 <select_bank+0x22>
 800139e:	2301      	movs	r3, #1
 80013a0:	e019      	b.n	80013d6 <select_bank+0x56>
	uint8_t buf[2];
	buf[0] = REG_BANK_SEL;
 80013a2:	237f      	movs	r3, #127	; 0x7f
 80013a4:	733b      	strb	r3, [r7, #12]
	buf[1] = bank << 4;
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, buf, 2, HAL_MAX_DELAY) == HAL_OK) {
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <select_bank+0x64>)
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	f107 020c 	add.w	r2, r7, #12
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2302      	movs	r3, #2
 80013be:	21d0      	movs	r1, #208	; 0xd0
 80013c0:	f003 faf2 	bl	80049a8 <HAL_I2C_Master_Transmit>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d104      	bne.n	80013d4 <select_bank+0x54>
		cur_bank = bank;
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <select_bank+0x60>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	7013      	strb	r3, [r2, #0]
		return 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <select_bank+0x56>
	}
	return 0;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000218 	.word	0x20000218

080013e8 <get_cur_bank>:

uint8_t get_cur_bank() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af02      	add	r7, sp, #8
	uint8_t buf[1];

	uint8_t reg = REG_BANK_SEL;
 80013ee:	237f      	movs	r3, #127	; 0x7f
 80013f0:	70fb      	strb	r3, [r7, #3]

	if (HAL_I2C_Master_Transmit(hi2c1_ptr, IMU_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <get_cur_bank+0x58>)
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	1cfa      	adds	r2, r7, #3
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	21d0      	movs	r1, #208	; 0xd0
 8001402:	f003 fad1 	bl	80049a8 <HAL_I2C_Master_Transmit>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d113      	bne.n	8001434 <get_cur_bank+0x4c>
		if (HAL_I2C_Master_Receive(hi2c1_ptr, IMU_I2C_ADDR, buf, 1, HAL_MAX_DELAY) == HAL_OK) {
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <get_cur_bank+0x58>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	1d3a      	adds	r2, r7, #4
 8001412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	21d0      	movs	r1, #208	; 0xd0
 800141c:	f003 fbc2 	bl	8004ba4 <HAL_I2C_Master_Receive>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d106      	bne.n	8001434 <get_cur_bank+0x4c>
			return (buf[0] >> 4) & 0x3;
 8001426:	793b      	ldrb	r3, [r7, #4]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	e000      	b.n	8001436 <get_cur_bank+0x4e>
		}
	}
	return 4;
 8001434:	2304      	movs	r3, #4
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000218 	.word	0x20000218

08001444 <read_raw_gyro_x>:
	write_one_byte(1, B1_YA_OFFS_L, accel_bias_y_l);
	write_one_byte(1, B1_ZA_OFFS_H, accel_bias_z_h);
	write_one_byte(1, B1_ZA_OFFS_L, accel_bias_z_l);
}

int16_t read_raw_gyro_x() {
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_XOUT_H) << 8) | read_one_byte(0, B0_GYRO_XOUT_L));
 800144a:	2133      	movs	r1, #51	; 0x33
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff ff31 	bl	80012b4 <read_one_byte>
 8001452:	4603      	mov	r3, r0
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21c      	sxth	r4, r3
 8001458:	2134      	movs	r1, #52	; 0x34
 800145a:	2000      	movs	r0, #0
 800145c:	f7ff ff2a 	bl	80012b4 <read_one_byte>
 8001460:	4603      	mov	r3, r0
 8001462:	b21b      	sxth	r3, r3
 8001464:	4323      	orrs	r3, r4
 8001466:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}

08001474 <read_raw_gyro_y>:
	int16_t raw = read_raw_gyro_x();
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
	return result;
}

int16_t read_raw_gyro_y() {
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_YOUT_H) << 8) | read_one_byte(0, B0_GYRO_YOUT_L));
 800147a:	2135      	movs	r1, #53	; 0x35
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff ff19 	bl	80012b4 <read_one_byte>
 8001482:	4603      	mov	r3, r0
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b21c      	sxth	r4, r3
 8001488:	2136      	movs	r1, #54	; 0x36
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff ff12 	bl	80012b4 <read_one_byte>
 8001490:	4603      	mov	r3, r0
 8001492:	b21b      	sxth	r3, r3
 8001494:	4323      	orrs	r3, r4
 8001496:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}

080014a4 <read_raw_gyro_z>:
	int16_t raw = read_raw_gyro_y();
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
	return result;
}

int16_t read_raw_gyro_z() {
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
	int16_t raw = (int16_t)((read_one_byte(0, B0_GYRO_ZOUT_H) << 8) | read_one_byte(0, B0_GYRO_ZOUT_L));
 80014aa:	2137      	movs	r1, #55	; 0x37
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff ff01 	bl	80012b4 <read_one_byte>
 80014b2:	4603      	mov	r3, r0
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21c      	sxth	r4, r3
 80014b8:	2138      	movs	r1, #56	; 0x38
 80014ba:	2000      	movs	r0, #0
 80014bc:	f7ff fefa 	bl	80012b4 <read_one_byte>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4323      	orrs	r3, r4
 80014c6:	80fb      	strh	r3, [r7, #6]
	return raw;
 80014c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd90      	pop	{r4, r7, pc}

080014d4 <read_gyro_z>:

float read_gyro_z() {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
	int16_t raw = read_raw_gyro_z();
 80014da:	f7ff ffe3 	bl	80014a4 <read_raw_gyro_z>
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
	float result = (float)raw / GYRO_SENSITIVITY_SCALE;
 80014e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ee:	eddf 6a07 	vldr	s13, [pc, #28]	; 800150c <read_gyro_z+0x38>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	edc7 7a00 	vstr	s15, [r7]
	return result;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	ee07 3a90 	vmov	s15, r3
}
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	43030000 	.word	0x43030000

08001510 <gyro_caliberate>:
	gyro->x = read_gyro_x();
	gyro->y = read_gyro_y();
	gyro->z = read_gyro_z();
}

void gyro_caliberate() {
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
	int32_t gyro_bias_x = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
	int32_t gyro_bias_y = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
	int32_t gyro_bias_z = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	e017      	b.n	8001558 <gyro_caliberate+0x48>
		gyro_bias_x += read_raw_gyro_x();
 8001528:	f7ff ff8c 	bl	8001444 <read_raw_gyro_x>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	4413      	add	r3, r2
 8001534:	617b      	str	r3, [r7, #20]
		gyro_bias_y += read_raw_gyro_y();
 8001536:	f7ff ff9d 	bl	8001474 <read_raw_gyro_y>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4413      	add	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
		gyro_bias_z += read_raw_gyro_z();
 8001544:	f7ff ffae 	bl	80014a4 <read_raw_gyro_z>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; i++) {
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3301      	adds	r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b63      	cmp	r3, #99	; 0x63
 800155c:	dde4      	ble.n	8001528 <gyro_caliberate+0x18>
	}
	gyro_bias_x /= 100;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	4a31      	ldr	r2, [pc, #196]	; (8001628 <gyro_caliberate+0x118>)
 8001562:	fb82 1203 	smull	r1, r2, r2, r3
 8001566:	1152      	asrs	r2, r2, #5
 8001568:	17db      	asrs	r3, r3, #31
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	617b      	str	r3, [r7, #20]
	gyro_bias_y /= 100;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4a2d      	ldr	r2, [pc, #180]	; (8001628 <gyro_caliberate+0x118>)
 8001572:	fb82 1203 	smull	r1, r2, r2, r3
 8001576:	1152      	asrs	r2, r2, #5
 8001578:	17db      	asrs	r3, r3, #31
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	613b      	str	r3, [r7, #16]
	gyro_bias_z /= 100;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4a29      	ldr	r2, [pc, #164]	; (8001628 <gyro_caliberate+0x118>)
 8001582:	fb82 1203 	smull	r1, r2, r2, r3
 8001586:	1152      	asrs	r2, r2, #5
 8001588:	17db      	asrs	r3, r3, #31
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	60fb      	str	r3, [r7, #12]
	// Step size for offset register: 0.0305 dps/LSB; Offset = Measurement / 4;
	gyro_bias_x = -gyro_bias_x / 4;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	425b      	negs	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	da00      	bge.n	8001598 <gyro_caliberate+0x88>
 8001596:	3303      	adds	r3, #3
 8001598:	109b      	asrs	r3, r3, #2
 800159a:	617b      	str	r3, [r7, #20]
	gyro_bias_y = -gyro_bias_y / 4;
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	425b      	negs	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da00      	bge.n	80015a6 <gyro_caliberate+0x96>
 80015a4:	3303      	adds	r3, #3
 80015a6:	109b      	asrs	r3, r3, #2
 80015a8:	613b      	str	r3, [r7, #16]
	gyro_bias_z = -gyro_bias_z / 4;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	425b      	negs	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da00      	bge.n	80015b4 <gyro_caliberate+0xa4>
 80015b2:	3303      	adds	r3, #3
 80015b4:	109b      	asrs	r3, r3, #2
 80015b6:	60fb      	str	r3, [r7, #12]
	/*gyro_bias_x = -gyro_bias_x * 2;
	gyro_bias_y = -gyro_bias_y * 2;
	gyro_bias_z = -gyro_bias_z * 2;*/
	// Separate gyro_bias into 2 parts: [15:8] and [7:0]
	uint8_t gyro_bias_x_h = (uint8_t)(gyro_bias_x >> 8);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	121b      	asrs	r3, r3, #8
 80015bc:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_bias_x_l = (uint8_t)gyro_bias_x;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	71bb      	strb	r3, [r7, #6]
	uint8_t gyro_bias_y_h = (uint8_t)(gyro_bias_y >> 8);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	121b      	asrs	r3, r3, #8
 80015c6:	717b      	strb	r3, [r7, #5]
	uint8_t gyro_bias_y_l = (uint8_t)gyro_bias_y;
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	713b      	strb	r3, [r7, #4]
	uint8_t gyro_bias_z_h = (uint8_t)(gyro_bias_z >> 8);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	121b      	asrs	r3, r3, #8
 80015d0:	70fb      	strb	r3, [r7, #3]
	uint8_t gyro_bias_z_l = (uint8_t)gyro_bias_z;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	70bb      	strb	r3, [r7, #2]
	// Write to registers
	write_one_byte(2, B2_XG_OFFS_USRH, gyro_bias_x_h);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	461a      	mov	r2, r3
 80015da:	2103      	movs	r1, #3
 80015dc:	2002      	movs	r0, #2
 80015de:	f7ff fea1 	bl	8001324 <write_one_byte>
	write_one_byte(2, B2_XG_OFFS_USRL, gyro_bias_x_l);
 80015e2:	79bb      	ldrb	r3, [r7, #6]
 80015e4:	461a      	mov	r2, r3
 80015e6:	2104      	movs	r1, #4
 80015e8:	2002      	movs	r0, #2
 80015ea:	f7ff fe9b 	bl	8001324 <write_one_byte>
	write_one_byte(2, B2_YG_OFFS_USRH, gyro_bias_y_h);
 80015ee:	797b      	ldrb	r3, [r7, #5]
 80015f0:	461a      	mov	r2, r3
 80015f2:	2105      	movs	r1, #5
 80015f4:	2002      	movs	r0, #2
 80015f6:	f7ff fe95 	bl	8001324 <write_one_byte>
	write_one_byte(2, B2_YG_OFFS_USRL, gyro_bias_y_l);
 80015fa:	793b      	ldrb	r3, [r7, #4]
 80015fc:	461a      	mov	r2, r3
 80015fe:	2106      	movs	r1, #6
 8001600:	2002      	movs	r0, #2
 8001602:	f7ff fe8f 	bl	8001324 <write_one_byte>
	write_one_byte(2, B2_ZG_OFFS_USRH, gyro_bias_z_h);
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	461a      	mov	r2, r3
 800160a:	2107      	movs	r1, #7
 800160c:	2002      	movs	r0, #2
 800160e:	f7ff fe89 	bl	8001324 <write_one_byte>
	write_one_byte(2, B2_ZG_OFFS_USRL, gyro_bias_z_l);
 8001612:	78bb      	ldrb	r3, [r7, #2]
 8001614:	461a      	mov	r2, r3
 8001616:	2108      	movs	r1, #8
 8001618:	2002      	movs	r0, #2
 800161a:	f7ff fe83 	bl	8001324 <write_one_byte>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	51eb851f 	.word	0x51eb851f

0800162c <calcOri>:

float calcOri(uint32_t* lastSampleTime, float lastSampleOri) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	ed87 0a00 	vstr	s0, [r7]
	float angular_speed = 0;
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
	angular_speed += read_gyro_z();
 800163e:	f7ff ff49 	bl	80014d4 <read_gyro_z>
 8001642:	eeb0 7a40 	vmov.f32	s14, s0
 8001646:	edd7 7a05 	vldr	s15, [r7, #20]
 800164a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800164e:	edc7 7a05 	vstr	s15, [r7, #20]
	if (abs(angular_speed) < MIN_ANG_SPD)
 8001652:	edd7 7a05 	vldr	s15, [r7, #20]
 8001656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165a:	ee17 3a90 	vmov	r3, s15
 800165e:	2b00      	cmp	r3, #0
 8001660:	bfb8      	it	lt
 8001662:	425b      	neglt	r3, r3
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	d502      	bpl.n	8001680 <calcOri+0x54>
		angular_speed = 0;
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
	uint32_t curTime = HAL_GetTick();
 8001680:	f002 fcc4 	bl	800400c <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]
	uint16_t dt = curTime - (*lastSampleTime);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	b29a      	uxth	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	b29b      	uxth	r3, r3
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	817b      	strh	r3, [r7, #10]
	*lastSampleTime = curTime;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	601a      	str	r2, [r3, #0]
	float result = lastSampleOri + angular_speed * dt / 1000;
 800169a:	897b      	ldrh	r3, [r7, #10]
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ac:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001714 <calcOri+0xe8>
 80016b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b4:	ed97 7a00 	vldr	s14, [r7]
 80016b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016bc:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result >= 360)
 80016c0:	e007      	b.n	80016d2 <calcOri+0xa6>
		result -= 360;
 80016c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001718 <calcOri+0xec>
 80016ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016ce:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result >= 360)
 80016d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001718 <calcOri+0xec>
 80016da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e2:	daee      	bge.n	80016c2 <calcOri+0x96>
	while (result < 0)
 80016e4:	e007      	b.n	80016f6 <calcOri+0xca>
		result += 360;
 80016e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80016ea:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001718 <calcOri+0xec>
 80016ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016f2:	edc7 7a04 	vstr	s15, [r7, #16]
	while (result < 0)
 80016f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80016fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	d4f0      	bmi.n	80016e6 <calcOri+0xba>
	return result;
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	ee07 3a90 	vmov	s15, r3
}
 800170a:	eeb0 0a67 	vmov.f32	s0, s15
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	447a0000 	.word	0x447a0000
 8001718:	43b40000 	.word	0x43b40000

0800171c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001722:	f002 fc0d 	bl	8003f40 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001726:	f000 f8bd 	bl	80018a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800172a:	f000 fbe5 	bl	8001ef8 <MX_GPIO_Init>
  MX_TIM8_Init();
 800172e:	f000 fae5 	bl	8001cfc <MX_TIM8_Init>
  MX_I2C1_Init();
 8001732:	f000 f915 	bl	8001960 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001736:	f000 fa03 	bl	8001b40 <MX_TIM2_Init>
  MX_TIM3_Init();
 800173a:	f000 fa55 	bl	8001be8 <MX_TIM3_Init>
  MX_TIM1_Init();
 800173e:	f000 f93d 	bl	80019bc <MX_TIM1_Init>
  MX_TIM6_Init();
 8001742:	f000 faa5 	bl	8001c90 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001746:	f000 fbad 	bl	8001ea4 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800174a:	f000 fb81 	bl	8001e50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800174e:	f001 feed 	bl	800352c <OLED_Init>
  uint8_t imuerr = imu_init(&hi2c1);
 8001752:	4834      	ldr	r0, [pc, #208]	; (8001824 <main+0x108>)
 8001754:	f7ff fd2e 	bl	80011b4 <imu_init>
 8001758:	4603      	mov	r3, r0
 800175a:	71fb      	strb	r3, [r7, #7]
  if (imuerr != 0) {
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00e      	beq.n	8001780 <main+0x64>
	  OLED_Clear();
 8001762:	f001 fdbf 	bl	80032e4 <OLED_Clear>
		sprintf(oledbuf, "Imu err: %d", imuerr);
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	461a      	mov	r2, r3
 800176a:	492f      	ldr	r1, [pc, #188]	; (8001828 <main+0x10c>)
 800176c:	482f      	ldr	r0, [pc, #188]	; (800182c <main+0x110>)
 800176e:	f00a fb5b 	bl	800be28 <siprintf>
		OLED_ShowString(10, 15, &oledbuf[0]);
 8001772:	4a2e      	ldr	r2, [pc, #184]	; (800182c <main+0x110>)
 8001774:	210f      	movs	r1, #15
 8001776:	200a      	movs	r0, #10
 8001778:	f001 fea6 	bl	80034c8 <OLED_ShowString>
		OLED_Refresh_Gram();
 800177c:	f001 fd30 	bl	80031e0 <OLED_Refresh_Gram>
  }
  comm_init(&huart3, &curInst, &cpltErr);
 8001780:	4a2b      	ldr	r2, [pc, #172]	; (8001830 <main+0x114>)
 8001782:	492c      	ldr	r1, [pc, #176]	; (8001834 <main+0x118>)
 8001784:	482c      	ldr	r0, [pc, #176]	; (8001838 <main+0x11c>)
 8001786:	f7ff fbdd 	bl	8000f44 <comm_init>
  HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001790:	482a      	ldr	r0, [pc, #168]	; (800183c <main+0x120>)
 8001792:	f002 ffab 	bl	80046ec <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart3, (uint8_t*) buf, UART_PACKET_SIZE);
 8001796:	2204      	movs	r2, #4
 8001798:	4929      	ldr	r1, [pc, #164]	; (8001840 <main+0x124>)
 800179a:	4827      	ldr	r0, [pc, #156]	; (8001838 <main+0x11c>)
 800179c:	f006 f845 	bl	800782a <HAL_UART_Receive_IT>
  mtr_init(&htim8, &htim2, &htim3, &mtrA, &mtrB, &mtrAPID, &mtrBPID, &backupObj, &orientation, &ori_semaphoreHandle);
 80017a0:	4b28      	ldr	r3, [pc, #160]	; (8001844 <main+0x128>)
 80017a2:	9305      	str	r3, [sp, #20]
 80017a4:	4b28      	ldr	r3, [pc, #160]	; (8001848 <main+0x12c>)
 80017a6:	9304      	str	r3, [sp, #16]
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <main+0x130>)
 80017aa:	9303      	str	r3, [sp, #12]
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <main+0x134>)
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <main+0x138>)
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <main+0x13c>)
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	4b28      	ldr	r3, [pc, #160]	; (800185c <main+0x140>)
 80017ba:	4a29      	ldr	r2, [pc, #164]	; (8001860 <main+0x144>)
 80017bc:	4929      	ldr	r1, [pc, #164]	; (8001864 <main+0x148>)
 80017be:	482a      	ldr	r0, [pc, #168]	; (8001868 <main+0x14c>)
 80017c0:	f000 fdda 	bl	8002378 <mtr_init>
  servoInit(&htim1);
 80017c4:	4829      	ldr	r0, [pc, #164]	; (800186c <main+0x150>)
 80017c6:	f001 ffab 	bl	8003720 <servoInit>
  //HAL_UART_Receive_IT(&huart1, (uint8_t*) buf, UART_PACKET_SIZE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017ca:	f006 fffb 	bl	80087c4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ori_semaphore */
  ori_semaphoreHandle = osSemaphoreNew(1, 1, &ori_semaphore_attributes);
 80017ce:	4a28      	ldr	r2, [pc, #160]	; (8001870 <main+0x154>)
 80017d0:	2101      	movs	r1, #1
 80017d2:	2001      	movs	r0, #1
 80017d4:	f007 f8ed 	bl	80089b2 <osSemaphoreNew>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <main+0x128>)
 80017dc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017de:	4a25      	ldr	r2, [pc, #148]	; (8001874 <main+0x158>)
 80017e0:	2100      	movs	r1, #0
 80017e2:	4825      	ldr	r0, [pc, #148]	; (8001878 <main+0x15c>)
 80017e4:	f007 f838 	bl	8008858 <osThreadNew>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4a24      	ldr	r2, [pc, #144]	; (800187c <main+0x160>)
 80017ec:	6013      	str	r3, [r2, #0]

  /* creation of motorServo */
  motorServoHandle = osThreadNew(StartMotorServo, NULL, &motorServo_attributes);
 80017ee:	4a24      	ldr	r2, [pc, #144]	; (8001880 <main+0x164>)
 80017f0:	2100      	movs	r1, #0
 80017f2:	4824      	ldr	r0, [pc, #144]	; (8001884 <main+0x168>)
 80017f4:	f007 f830 	bl	8008858 <osThreadNew>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a23      	ldr	r2, [pc, #140]	; (8001888 <main+0x16c>)
 80017fc:	6013      	str	r3, [r2, #0]

  /* creation of imu */
  imuHandle = osThreadNew(StartIMU, NULL, &imu_attributes);
 80017fe:	4a23      	ldr	r2, [pc, #140]	; (800188c <main+0x170>)
 8001800:	2100      	movs	r1, #0
 8001802:	4823      	ldr	r0, [pc, #140]	; (8001890 <main+0x174>)
 8001804:	f007 f828 	bl	8008858 <osThreadNew>
 8001808:	4603      	mov	r3, r0
 800180a:	4a22      	ldr	r2, [pc, #136]	; (8001894 <main+0x178>)
 800180c:	6013      	str	r3, [r2, #0]

  /* creation of uart */
  uartHandle = osThreadNew(StartUART, NULL, &uart_attributes);
 800180e:	4a22      	ldr	r2, [pc, #136]	; (8001898 <main+0x17c>)
 8001810:	2100      	movs	r1, #0
 8001812:	4822      	ldr	r0, [pc, #136]	; (800189c <main+0x180>)
 8001814:	f007 f820 	bl	8008858 <osThreadNew>
 8001818:	4603      	mov	r3, r0
 800181a:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <main+0x184>)
 800181c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800181e:	f006 fff5 	bl	800880c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001822:	e7fe      	b.n	8001822 <main+0x106>
 8001824:	20000220 	.word	0x20000220
 8001828:	0800f3dc 	.word	0x0800f3dc
 800182c:	2000048c 	.word	0x2000048c
 8001830:	200004b8 	.word	0x200004b8
 8001834:	200004b4 	.word	0x200004b4
 8001838:	20000420 	.word	0x20000420
 800183c:	40021000 	.word	0x40021000
 8001840:	200004a0 	.word	0x200004a0
 8001844:	20000474 	.word	0x20000474
 8001848:	20000478 	.word	0x20000478
 800184c:	20000510 	.word	0x20000510
 8001850:	200004f0 	.word	0x200004f0
 8001854:	200004d0 	.word	0x200004d0
 8001858:	200004c8 	.word	0x200004c8
 800185c:	200004c0 	.word	0x200004c0
 8001860:	20000304 	.word	0x20000304
 8001864:	200002bc 	.word	0x200002bc
 8001868:	20000394 	.word	0x20000394
 800186c:	20000274 	.word	0x20000274
 8001870:	0800f4a0 	.word	0x0800f4a0
 8001874:	0800f410 	.word	0x0800f410
 8001878:	080020d9 	.word	0x080020d9
 800187c:	20000464 	.word	0x20000464
 8001880:	0800f434 	.word	0x0800f434
 8001884:	080020ed 	.word	0x080020ed
 8001888:	20000468 	.word	0x20000468
 800188c:	0800f458 	.word	0x0800f458
 8001890:	080022b1 	.word	0x080022b1
 8001894:	2000046c 	.word	0x2000046c
 8001898:	0800f47c 	.word	0x0800f47c
 800189c:	080022f5 	.word	0x080022f5
 80018a0:	20000470 	.word	0x20000470

080018a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b094      	sub	sp, #80	; 0x50
 80018a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	2230      	movs	r2, #48	; 0x30
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f00a fb9a 	bl	800bfec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <SystemClock_Config+0xb4>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	4a21      	ldr	r2, [pc, #132]	; (8001958 <SystemClock_Config+0xb4>)
 80018d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d6:	6413      	str	r3, [r2, #64]	; 0x40
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <SystemClock_Config+0xb4>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	4b1c      	ldr	r3, [pc, #112]	; (800195c <SystemClock_Config+0xb8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1b      	ldr	r2, [pc, #108]	; (800195c <SystemClock_Config+0xb8>)
 80018ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <SystemClock_Config+0xb8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001900:	2302      	movs	r3, #2
 8001902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001904:	2301      	movs	r3, #1
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001908:	2310      	movs	r3, #16
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800190c:	2300      	movs	r3, #0
 800190e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	4618      	mov	r0, r3
 8001916:	f003 fec1 	bl	800569c <HAL_RCC_OscConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001920:	f000 fd24 	bl	800236c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001924:	230f      	movs	r3, #15
 8001926:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f004 f924 	bl	8005b8c <HAL_RCC_ClockConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800194a:	f000 fd0f 	bl	800236c <Error_Handler>
  }
}
 800194e:	bf00      	nop
 8001950:	3750      	adds	r7, #80	; 0x50
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	40007000 	.word	0x40007000

08001960 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <MX_I2C1_Init+0x50>)
 8001966:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <MX_I2C1_Init+0x54>)
 8001968:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_I2C1_Init+0x50>)
 800196c:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <MX_I2C1_Init+0x58>)
 800196e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_I2C1_Init+0x50>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_I2C1_Init+0x50>)
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_I2C1_Init+0x50>)
 800197e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001982:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <MX_I2C1_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_I2C1_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <MX_I2C1_Init+0x50>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_I2C1_Init+0x50>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800199c:	4804      	ldr	r0, [pc, #16]	; (80019b0 <MX_I2C1_Init+0x50>)
 800199e:	f002 febf 	bl	8004720 <HAL_I2C_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019a8:	f000 fce0 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000220 	.word	0x20000220
 80019b4:	40005400 	.word	0x40005400
 80019b8:	000186a0 	.word	0x000186a0

080019bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b09a      	sub	sp, #104	; 0x68
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
 80019f8:	615a      	str	r2, [r3, #20]
 80019fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	2220      	movs	r2, #32
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00a faf2 	bl	800bfec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a08:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001a0a:	4a4c      	ldr	r2, [pc, #304]	; (8001b3c <MX_TIM1_Init+0x180>)
 8001a0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001a10:	220f      	movs	r2, #15
 8001a12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a14:	4b48      	ldr	r3, [pc, #288]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001a1c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a22:	4b45      	ldr	r3, [pc, #276]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a28:	4b43      	ldr	r3, [pc, #268]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a2e:	4b42      	ldr	r3, [pc, #264]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a34:	4840      	ldr	r0, [pc, #256]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001a36:	f004 fa89 	bl	8005f4c <HAL_TIM_Base_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001a40:	f000 fc94 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a48:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4839      	ldr	r0, [pc, #228]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001a52:	f004 ffff 	bl	8006a54 <HAL_TIM_ConfigClockSource>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a5c:	f000 fc86 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001a60:	4835      	ldr	r0, [pc, #212]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001a62:	f004 fbe3 	bl	800622c <HAL_TIM_IC_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001a6c:	f000 fc7e 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a70:	4831      	ldr	r0, [pc, #196]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001a72:	f004 faba 	bl	8005fea <HAL_TIM_PWM_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a7c:	f000 fc76 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	482a      	ldr	r0, [pc, #168]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001a90:	f005 fd0a 	bl	80074a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8001a9a:	f000 fc67 	bl	800236c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001aae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4820      	ldr	r0, [pc, #128]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001ab8:	f004 fe6d 	bl	8006796 <HAL_TIM_IC_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001ac2:	f000 fc53 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac6:	2360      	movs	r3, #96	; 0x60
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4814      	ldr	r0, [pc, #80]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001ae8:	f004 fef2 	bl	80068d0 <HAL_TIM_PWM_ConfigChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001af2:	f000 fc3b 	bl	800236c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	4619      	mov	r1, r3
 8001b18:	4807      	ldr	r0, [pc, #28]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001b1a:	f005 fd41 	bl	80075a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001b24:	f000 fc22 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b28:	4803      	ldr	r0, [pc, #12]	; (8001b38 <MX_TIM1_Init+0x17c>)
 8001b2a:	f001 ffe7 	bl	8003afc <HAL_TIM_MspPostInit>

}
 8001b2e:	bf00      	nop
 8001b30:	3768      	adds	r7, #104	; 0x68
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000274 	.word	0x20000274
 8001b3c:	40010000 	.word	0x40010000

08001b40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	; 0x30
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	2224      	movs	r2, #36	; 0x24
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00a fa4c 	bl	800bfec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <MX_TIM2_Init+0xa4>)
 8001b5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <MX_TIM2_Init+0xa4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <MX_TIM2_Init+0xa4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b70:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <MX_TIM2_Init+0xa4>)
 8001b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <MX_TIM2_Init+0xa4>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <MX_TIM2_Init+0xa4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b84:	2303      	movs	r3, #3
 8001b86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b94:	230a      	movs	r3, #10
 8001b96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001ba4:	230a      	movs	r3, #10
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	4619      	mov	r1, r3
 8001bae:	480d      	ldr	r0, [pc, #52]	; (8001be4 <MX_TIM2_Init+0xa4>)
 8001bb0:	f004 fb95 	bl	80062de <HAL_TIM_Encoder_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001bba:	f000 fbd7 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4806      	ldr	r0, [pc, #24]	; (8001be4 <MX_TIM2_Init+0xa4>)
 8001bcc:	f005 fc6c 	bl	80074a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001bd6:	f000 fbc9 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	3730      	adds	r7, #48	; 0x30
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200002bc 	.word	0x200002bc

08001be8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	; 0x30
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	2224      	movs	r2, #36	; 0x24
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f00a f9f8 	bl	800bfec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c04:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <MX_TIM3_Init+0xa0>)
 8001c06:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <MX_TIM3_Init+0xa4>)
 8001c08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c0a:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <MX_TIM3_Init+0xa0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <MX_TIM3_Init+0xa0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <MX_TIM3_Init+0xa0>)
 8001c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <MX_TIM3_Init+0xa0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c24:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <MX_TIM3_Init+0xa0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c32:	2301      	movs	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c3a:	230a      	movs	r3, #10
 8001c3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c42:	2301      	movs	r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4619      	mov	r1, r3
 8001c54:	480c      	ldr	r0, [pc, #48]	; (8001c88 <MX_TIM3_Init+0xa0>)
 8001c56:	f004 fb42 	bl	80062de <HAL_TIM_Encoder_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c60:	f000 fb84 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_TIM3_Init+0xa0>)
 8001c72:	f005 fc19 	bl	80074a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c7c:	f000 fb76 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	3730      	adds	r7, #48	; 0x30
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000304 	.word	0x20000304
 8001c8c:	40000400 	.word	0x40000400

08001c90 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c96:	463b      	mov	r3, r7
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <MX_TIM6_Init+0x64>)
 8001ca0:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <MX_TIM6_Init+0x68>)
 8001ca2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <MX_TIM6_Init+0x64>)
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <MX_TIM6_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <MX_TIM6_Init+0x64>)
 8001cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_TIM6_Init+0x64>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cbe:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <MX_TIM6_Init+0x64>)
 8001cc0:	f004 f944 	bl	8005f4c <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001cca:	f000 fb4f 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <MX_TIM6_Init+0x64>)
 8001cdc:	f005 fbe4 	bl	80074a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001ce6:	f000 fb41 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000034c 	.word	0x2000034c
 8001cf8:	40001000 	.word	0x40001000

08001cfc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b096      	sub	sp, #88	; 0x58
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]
 8001d2a:	615a      	str	r2, [r3, #20]
 8001d2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	2220      	movs	r2, #32
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00a f959 	bl	800bfec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d3a:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <MX_TIM8_Init+0x14c>)
 8001d3c:	4a43      	ldr	r2, [pc, #268]	; (8001e4c <MX_TIM8_Init+0x150>)
 8001d3e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d40:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <MX_TIM8_Init+0x14c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d46:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <MX_TIM8_Init+0x14c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001d4c:	4b3e      	ldr	r3, [pc, #248]	; (8001e48 <MX_TIM8_Init+0x14c>)
 8001d4e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001d52:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d54:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <MX_TIM8_Init+0x14c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <MX_TIM8_Init+0x14c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <MX_TIM8_Init+0x14c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d66:	4838      	ldr	r0, [pc, #224]	; (8001e48 <MX_TIM8_Init+0x14c>)
 8001d68:	f004 f8f0 	bl	8005f4c <HAL_TIM_Base_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001d72:	f000 fafb 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d7a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d80:	4619      	mov	r1, r3
 8001d82:	4831      	ldr	r0, [pc, #196]	; (8001e48 <MX_TIM8_Init+0x14c>)
 8001d84:	f004 fe66 	bl	8006a54 <HAL_TIM_ConfigClockSource>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001d8e:	f000 faed 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d92:	482d      	ldr	r0, [pc, #180]	; (8001e48 <MX_TIM8_Init+0x14c>)
 8001d94:	f004 f929 	bl	8005fea <HAL_TIM_PWM_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001d9e:	f000 fae5 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001daa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dae:	4619      	mov	r1, r3
 8001db0:	4825      	ldr	r0, [pc, #148]	; (8001e48 <MX_TIM8_Init+0x14c>)
 8001db2:	f005 fb79 	bl	80074a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001dbc:	f000 fad6 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc0:	2360      	movs	r3, #96	; 0x60
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de0:	2200      	movs	r2, #0
 8001de2:	4619      	mov	r1, r3
 8001de4:	4818      	ldr	r0, [pc, #96]	; (8001e48 <MX_TIM8_Init+0x14c>)
 8001de6:	f004 fd73 	bl	80068d0 <HAL_TIM_PWM_ConfigChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001df0:	f000 fabc 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df8:	2204      	movs	r2, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4812      	ldr	r0, [pc, #72]	; (8001e48 <MX_TIM8_Init+0x14c>)
 8001dfe:	f004 fd67 	bl	80068d0 <HAL_TIM_PWM_ConfigChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001e08:	f000 fab0 	bl	800236c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <MX_TIM8_Init+0x14c>)
 8001e30:	f005 fbb6 	bl	80075a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001e3a:	f000 fa97 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	3758      	adds	r7, #88	; 0x58
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000394 	.word	0x20000394
 8001e4c:	40010400 	.word	0x40010400

08001e50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MX_USART1_UART_Init+0x50>)
 8001e58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e88:	f005 fbf0 	bl	800766c <HAL_UART_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e92:	f000 fa6b 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200003dc 	.word	0x200003dc
 8001ea0:	40011000 	.word	0x40011000

08001ea4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <MX_USART3_UART_Init+0x50>)
 8001eac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001eca:	220c      	movs	r2, #12
 8001ecc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001edc:	f005 fbc6 	bl	800766c <HAL_UART_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ee6:	f000 fa41 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000420 	.word	0x20000420
 8001ef4:	40004800 	.word	0x40004800

08001ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <MX_GPIO_Init+0x104>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a39      	ldr	r2, [pc, #228]	; (8001ffc <MX_GPIO_Init+0x104>)
 8001f18:	f043 0310 	orr.w	r3, r3, #16
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <MX_GPIO_Init+0x104>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <MX_GPIO_Init+0x104>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a32      	ldr	r2, [pc, #200]	; (8001ffc <MX_GPIO_Init+0x104>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <MX_GPIO_Init+0x104>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <MX_GPIO_Init+0x104>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a2b      	ldr	r2, [pc, #172]	; (8001ffc <MX_GPIO_Init+0x104>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <MX_GPIO_Init+0x104>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <MX_GPIO_Init+0x104>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a24      	ldr	r2, [pc, #144]	; (8001ffc <MX_GPIO_Init+0x104>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <MX_GPIO_Init+0x104>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001f84:	481e      	ldr	r0, [pc, #120]	; (8002000 <MX_GPIO_Init+0x108>)
 8001f86:	f002 fbb1 	bl	80046ec <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	213c      	movs	r1, #60	; 0x3c
 8001f8e:	481d      	ldr	r0, [pc, #116]	; (8002004 <MX_GPIO_Init+0x10c>)
 8001f90:	f002 fbac 	bl	80046ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2110      	movs	r1, #16
 8001f98:	481b      	ldr	r0, [pc, #108]	; (8002008 <MX_GPIO_Init+0x110>)
 8001f9a:	f002 fba7 	bl	80046ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 PE7 PE8
                           LED3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001f9e:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001fa2:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4812      	ldr	r0, [pc, #72]	; (8002000 <MX_GPIO_Init+0x108>)
 8001fb8:	f002 f9fc 	bl	80043b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001fbc:	233c      	movs	r3, #60	; 0x3c
 8001fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480c      	ldr	r0, [pc, #48]	; (8002004 <MX_GPIO_Init+0x10c>)
 8001fd4:	f002 f9ee 	bl	80043b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 8001fd8:	2310      	movs	r3, #16
 8001fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4619      	mov	r1, r3
 8001fee:	4806      	ldr	r0, [pc, #24]	; (8002008 <MX_GPIO_Init+0x110>)
 8001ff0:	f002 f9e0 	bl	80043b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	; 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40021000 	.word	0x40021000
 8002004:	40020000 	.word	0x40020000
 8002008:	40020400 	.word	0x40020400

0800200c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
				us_alert = 0;
			}
		}
	}
	*/
	if (htim == &htim2) {		// Motor A's interrupt
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <HAL_TIM_IC_CaptureCallback+0x44>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d108      	bne.n	800202e <HAL_TIM_IC_CaptureCallback+0x22>
		mtrAPID.count = -(int16_t)__HAL_TIM_GET_COUNTER(htim);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	b29b      	uxth	r3, r3
 8002024:	425b      	negs	r3, r3
 8002026:	b29b      	uxth	r3, r3
 8002028:	b21a      	sxth	r2, r3
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_TIM_IC_CaptureCallback+0x48>)
 800202c:	801a      	strh	r2, [r3, #0]
	}
	if (htim == &htim3) {		// Motor B's interrupt
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d105      	bne.n	8002042 <HAL_TIM_IC_CaptureCallback+0x36>
		mtrBPID.count = (int16_t)__HAL_TIM_GET_COUNTER(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	b21a      	sxth	r2, r3
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_TIM_IC_CaptureCallback+0x50>)
 8002040:	801a      	strh	r2, [r3, #0]
	}
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	200002bc 	.word	0x200002bc
 8002054:	200004d0 	.word	0x200004d0
 8002058:	20000304 	.word	0x20000304
 800205c:	200004f0 	.word	0x200004f0

08002060 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af02      	add	r7, sp, #8
 8002066:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	//MX_USART3_UART_Init();
	HAL_StatusTypeDef uart_stt = uart_receive((uint8_t*) buf);
 8002068:	4818      	ldr	r0, [pc, #96]	; (80020cc <HAL_UART_RxCpltCallback+0x6c>)
 800206a:	f7ff f823 	bl	80010b4 <uart_receive>
 800206e:	4603      	mov	r3, r0
 8002070:	73fb      	strb	r3, [r7, #15]
	OLED_Clear();
 8002072:	f001 f937 	bl	80032e4 <OLED_Clear>
	sprintf(oledbuf, "%2x %2x %2x %2x", buf[0], buf[1], buf[2], buf[3]);
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_UART_RxCpltCallback+0x6c>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <HAL_UART_RxCpltCallback+0x6c>)
 800207e:	785b      	ldrb	r3, [r3, #1]
 8002080:	4618      	mov	r0, r3
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_UART_RxCpltCallback+0x6c>)
 8002084:	789b      	ldrb	r3, [r3, #2]
 8002086:	461a      	mov	r2, r3
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_UART_RxCpltCallback+0x6c>)
 800208a:	78db      	ldrb	r3, [r3, #3]
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	4603      	mov	r3, r0
 8002092:	460a      	mov	r2, r1
 8002094:	490e      	ldr	r1, [pc, #56]	; (80020d0 <HAL_UART_RxCpltCallback+0x70>)
 8002096:	480f      	ldr	r0, [pc, #60]	; (80020d4 <HAL_UART_RxCpltCallback+0x74>)
 8002098:	f009 fec6 	bl	800be28 <siprintf>
	OLED_ShowString(10, 15, &oledbuf[0]);
 800209c:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <HAL_UART_RxCpltCallback+0x74>)
 800209e:	210f      	movs	r1, #15
 80020a0:	200a      	movs	r0, #10
 80020a2:	f001 fa11 	bl	80034c8 <OLED_ShowString>
	OLED_Refresh_Gram();
 80020a6:	f001 f89b 	bl	80031e0 <OLED_Refresh_Gram>
	//huart->RxState = HAL_UART_STATE_READY;
	buf[0] = 0;
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_UART_RxCpltCallback+0x6c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
	buf[1] = 0;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_UART_RxCpltCallback+0x6c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	705a      	strb	r2, [r3, #1]
	buf[2] = 0;
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_UART_RxCpltCallback+0x6c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	709a      	strb	r2, [r3, #2]
	buf[3] = 0;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_UART_RxCpltCallback+0x6c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	70da      	strb	r2, [r3, #3]
		sprintf(oledbuf, "Fin: %d", cpltErr.finished);
		OLED_ShowString(10, 45, &oledbuf[0]);
		OLED_Refresh_Gram();
	}
	*/
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200004a0 	.word	0x200004a0
 80020d0:	0800f3e8 	.word	0x0800f3e8
 80020d4:	2000048c 	.word	0x2000048c

080020d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 80020e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80020e4:	f006 fc4a 	bl	800897c <osDelay>
 80020e8:	e7fa      	b.n	80020e0 <StartDefaultTask+0x8>
	...

080020ec <StartMotorServo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorServo */
void StartMotorServo(void *argument)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorServo */
	carTurn(1, 180);
 80020f4:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8002284 <StartMotorServo+0x198>
 80020f8:	2001      	movs	r0, #1
 80020fa:	f000 fecb 	bl	8002e94 <carTurn>
  /* Infinite loop */
  for(;;)
  {
	  if ((cpltErr.id == curInst.id) && (!cpltErr.finished)) {	// If the current instruction is the next one to be executed
 80020fe:	4b62      	ldr	r3, [pc, #392]	; (8002288 <StartMotorServo+0x19c>)
 8002100:	781a      	ldrb	r2, [r3, #0]
 8002102:	4b62      	ldr	r3, [pc, #392]	; (800228c <StartMotorServo+0x1a0>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	f040 80b6 	bne.w	8002278 <StartMotorServo+0x18c>
 800210c:	4b5e      	ldr	r3, [pc, #376]	; (8002288 <StartMotorServo+0x19c>)
 800210e:	799b      	ldrb	r3, [r3, #6]
 8002110:	2b00      	cmp	r3, #0
 8002112:	f040 80b1 	bne.w	8002278 <StartMotorServo+0x18c>
		  float dist = executeInstruction(&curInst, &cpltErr);
 8002116:	495c      	ldr	r1, [pc, #368]	; (8002288 <StartMotorServo+0x19c>)
 8002118:	485c      	ldr	r0, [pc, #368]	; (800228c <StartMotorServo+0x1a0>)
 800211a:	f000 ffcd 	bl	80030b8 <executeInstruction>
 800211e:	ed87 0a03 	vstr	s0, [r7, #12]
		  if ((mtrA.suspend != SUS_OFF) || (mtrB.suspend != SUS_OFF)) {
 8002122:	4b5b      	ldr	r3, [pc, #364]	; (8002290 <StartMotorServo+0x1a4>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <StartMotorServo+0x46>
 800212a:	4b5a      	ldr	r3, [pc, #360]	; (8002294 <StartMotorServo+0x1a8>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <StartMotorServo+0x4e>
			  mtr_continue();
 8002132:	f000 fb51 	bl	80027d8 <mtr_continue>
			  mtr_stop();
 8002136:	f000 fae3 	bl	8002700 <mtr_stop>
		  }
		  /*if (!cpltErr.finished) {	// If instruction did not finish, try again
			  continue;
		  }*/
		  if (dist != 0) {
 800213a:	edd7 7a03 	vldr	s15, [r7, #12]
 800213e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002146:	d052      	beq.n	80021ee <StartMotorServo+0x102>
			  pos_x += dist * (float)sin((orientation / 180) * PI);
 8002148:	4b53      	ldr	r3, [pc, #332]	; (8002298 <StartMotorServo+0x1ac>)
 800214a:	ed93 7a00 	vldr	s14, [r3]
 800214e:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8002284 <StartMotorServo+0x198>
 8002152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002156:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800229c <StartMotorServo+0x1b0>
 800215a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800215e:	ee17 0a90 	vmov	r0, s15
 8002162:	f7fe f9f1 	bl	8000548 <__aeabi_f2d>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	ec43 2b10 	vmov	d0, r2, r3
 800216e:	f00c f8cf 	bl	800e310 <sin>
 8002172:	ec53 2b10 	vmov	r2, r3, d0
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	f7fe fd15 	bl	8000ba8 <__aeabi_d2f>
 800217e:	ee07 0a10 	vmov	s14, r0
 8002182:	edd7 7a03 	vldr	s15, [r7, #12]
 8002186:	ee27 7a27 	vmul.f32	s14, s14, s15
 800218a:	4b45      	ldr	r3, [pc, #276]	; (80022a0 <StartMotorServo+0x1b4>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002194:	4b42      	ldr	r3, [pc, #264]	; (80022a0 <StartMotorServo+0x1b4>)
 8002196:	edc3 7a00 	vstr	s15, [r3]
			  pos_y += dist * (float)cos((orientation / 180) * PI);
 800219a:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <StartMotorServo+0x1ac>)
 800219c:	ed93 7a00 	vldr	s14, [r3]
 80021a0:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002284 <StartMotorServo+0x198>
 80021a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021a8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800229c <StartMotorServo+0x1b0>
 80021ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b0:	ee17 0a90 	vmov	r0, s15
 80021b4:	f7fe f9c8 	bl	8000548 <__aeabi_f2d>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	ec43 2b10 	vmov	d0, r2, r3
 80021c0:	f00c f852 	bl	800e268 <cos>
 80021c4:	ec53 2b10 	vmov	r2, r3, d0
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	f7fe fcec 	bl	8000ba8 <__aeabi_d2f>
 80021d0:	ee07 0a10 	vmov	s14, r0
 80021d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80021d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021dc:	4b31      	ldr	r3, [pc, #196]	; (80022a4 <StartMotorServo+0x1b8>)
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e6:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <StartMotorServo+0x1b8>)
 80021e8:	edc3 7a00 	vstr	s15, [r3]
 80021ec:	e025      	b.n	800223a <StartMotorServo+0x14e>
		  }
		  else {
			  if (us_distchange_x != 0) {		// When the command is turn and there's US course correction
 80021ee:	4b2e      	ldr	r3, [pc, #184]	; (80022a8 <StartMotorServo+0x1bc>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fc:	d00a      	beq.n	8002214 <StartMotorServo+0x128>
				  pos_x += us_distchange_x;
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <StartMotorServo+0x1b4>)
 8002200:	ed93 7a00 	vldr	s14, [r3]
 8002204:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <StartMotorServo+0x1bc>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <StartMotorServo+0x1b4>)
 8002210:	edc3 7a00 	vstr	s15, [r3]
			  }
			  if (us_distchange_y != 0) {
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <StartMotorServo+0x1c0>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800221e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002222:	d00a      	beq.n	800223a <StartMotorServo+0x14e>
				  pos_y += us_distchange_y;
 8002224:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <StartMotorServo+0x1b8>)
 8002226:	ed93 7a00 	vldr	s14, [r3]
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <StartMotorServo+0x1c0>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <StartMotorServo+0x1b8>)
 8002236:	edc3 7a00 	vstr	s15, [r3]
			  }
		  }
		  // Reset us_distchange after each instruction run
		  us_distchange_x = 0;
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <StartMotorServo+0x1bc>)
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
		  us_distchange_y = 0;
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <StartMotorServo+0x1c0>)
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	601a      	str	r2, [r3, #0]

		  cpltErr.pos_x = (int16_t)pos_x;
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <StartMotorServo+0x1b4>)
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002254:	ee17 3a90 	vmov	r3, s15
 8002258:	b21a      	sxth	r2, r3
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <StartMotorServo+0x19c>)
 800225c:	805a      	strh	r2, [r3, #2]
		  cpltErr.pos_y = (int16_t)pos_y;
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <StartMotorServo+0x1b8>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002268:	ee17 3a90 	vmov	r3, s15
 800226c:	b21a      	sxth	r2, r3
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <StartMotorServo+0x19c>)
 8002270:	809a      	strh	r2, [r3, #4]

		  cpltErr.finished = 1;
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <StartMotorServo+0x19c>)
 8002274:	2201      	movs	r2, #1
 8002276:	719a      	strb	r2, [r3, #6]
	  OLED_Refresh_Gram();
	  sprintf(oledbuf, "Ori = %5.1f", orientation);
	  OLED_ShowString(10, 45, &oledbuf[0]);
	  OLED_Refresh_Gram();
	  */
	  osDelay(500);		// Make sure to give time for UART task to transmit instructions
 8002278:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800227c:	f006 fb7e 	bl	800897c <osDelay>
	  if ((cpltErr.id == curInst.id) && (!cpltErr.finished)) {	// If the current instruction is the next one to be executed
 8002280:	e73d      	b.n	80020fe <StartMotorServo+0x12>
 8002282:	bf00      	nop
 8002284:	43340000 	.word	0x43340000
 8002288:	200004b8 	.word	0x200004b8
 800228c:	200004b4 	.word	0x200004b4
 8002290:	200004c0 	.word	0x200004c0
 8002294:	200004c8 	.word	0x200004c8
 8002298:	20000478 	.word	0x20000478
 800229c:	40490fdb 	.word	0x40490fdb
 80022a0:	2000047c 	.word	0x2000047c
 80022a4:	20000480 	.word	0x20000480
 80022a8:	20000484 	.word	0x20000484
 80022ac:	20000488 	.word	0x20000488

080022b0 <StartIMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMU */
void StartIMU(void *argument)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMU */
	uint32_t ori_lastSampleTime = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  orientation = calcOri(&ori_lastSampleTime, orientation);
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <StartIMU+0x3c>)
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	eeb0 0a67 	vmov.f32	s0, s15
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff f9ae 	bl	800162c <calcOri>
 80022d0:	eef0 7a40 	vmov.f32	s15, s0
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <StartIMU+0x3c>)
 80022d6:	edc3 7a00 	vstr	s15, [r3]
	  /*OLED_Clear();
	  sprintf(oledbuf, "Ori = %5.1f", orientation);
	  OLED_ShowString(10, 45, &oledbuf[0]);
	  OLED_Refresh_Gram();*/
	  if (cpltErr.finished) {
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <StartIMU+0x40>)
 80022dc:	799b      	ldrb	r3, [r3, #6]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0ec      	beq.n	80022bc <StartIMU+0xc>
		  osDelay(5);
 80022e2:	2005      	movs	r0, #5
 80022e4:	f006 fb4a 	bl	800897c <osDelay>
	  orientation = calcOri(&ori_lastSampleTime, orientation);
 80022e8:	e7e8      	b.n	80022bc <StartIMU+0xc>
 80022ea:	bf00      	nop
 80022ec:	20000478 	.word	0x20000478
 80022f0:	200004b8 	.word	0x200004b8

080022f4 <StartUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART */
void StartUART(void *argument)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART */
  /* Infinite loop */
  for(;;)
  {
	  if (!cpltErr.finished) {		// If a task is running, put this task to sleep
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <StartUART+0x68>)
 80022fe:	799b      	ldrb	r3, [r3, #6]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d104      	bne.n	800230e <StartUART+0x1a>
		  osDelay(500);
 8002304:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002308:	f006 fb38 	bl	800897c <osDelay>
 800230c:	e7f6      	b.n	80022fc <StartUART+0x8>
	  }
	  else {
		  // Initiate new task
		  if (curInst.id == cpltErr.id + 1) {	// If a new instruction has been received but has not been processed
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <StartUART+0x6c>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <StartUART+0x68>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	429a      	cmp	r2, r3
 800231c:	d111      	bne.n	8002342 <StartUART+0x4e>
			  while (HAL_UART_Receive_IT(&huart3, (uint8_t*) buf, UART_PACKET_SIZE) != HAL_OK) {
 800231e:	e002      	b.n	8002326 <StartUART+0x32>
				  osDelay(10);
 8002320:	200a      	movs	r0, #10
 8002322:	f006 fb2b 	bl	800897c <osDelay>
			  while (HAL_UART_Receive_IT(&huart3, (uint8_t*) buf, UART_PACKET_SIZE) != HAL_OK) {
 8002326:	2204      	movs	r2, #4
 8002328:	490e      	ldr	r1, [pc, #56]	; (8002364 <StartUART+0x70>)
 800232a:	480f      	ldr	r0, [pc, #60]	; (8002368 <StartUART+0x74>)
 800232c:	f005 fa7d 	bl	800782a <HAL_UART_Receive_IT>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f4      	bne.n	8002320 <StartUART+0x2c>
			  }
			  newCpltErr(curInst.id);
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <StartUART+0x6c>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe ff06 	bl	800114c <newCpltErr>
 8002340:	e007      	b.n	8002352 <StartUART+0x5e>
		  }
		  // Send results
		  else if (curInst.id == cpltErr.id) {
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <StartUART+0x6c>)
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <StartUART+0x68>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d101      	bne.n	8002352 <StartUART+0x5e>
			  uart_send();
 800234e:	f7fe fe3f 	bl	8000fd0 <uart_send>
		  }
		  osDelay(100);
 8002352:	2064      	movs	r0, #100	; 0x64
 8002354:	f006 fb12 	bl	800897c <osDelay>
	  if (!cpltErr.finished) {		// If a task is running, put this task to sleep
 8002358:	e7d0      	b.n	80022fc <StartUART+0x8>
 800235a:	bf00      	nop
 800235c:	200004b8 	.word	0x200004b8
 8002360:	200004b4 	.word	0x200004b4
 8002364:	200004a0 	.word	0x200004a0
 8002368:	20000420 	.word	0x20000420

0800236c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002370:	b672      	cpsid	i
}
 8002372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002374:	e7fe      	b.n	8002374 <Error_Handler+0x8>
	...

08002378 <mtr_init>:

/* All functions */

void mtr_init(TIM_HandleTypeDef* pwm_htimPtr, TIM_HandleTypeDef* encodeA_htimPtr, TIM_HandleTypeDef* encodeB_htimPtr,
		MotorData* mtrA, MotorData* mtrB, MotorPIDData* mtrAPID, MotorPIDData* mtrBPID, MotorServoStatus* backupObj,
		float* orientation, osSemaphoreId_t* oriSemHandlePtr) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]

	motorA = mtrA;
 8002386:	4a2b      	ldr	r2, [pc, #172]	; (8002434 <mtr_init+0xbc>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6013      	str	r3, [r2, #0]
	motorB = mtrB;
 800238c:	4a2a      	ldr	r2, [pc, #168]	; (8002438 <mtr_init+0xc0>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	6013      	str	r3, [r2, #0]
	motorA->suspend = 0;
 8002392:	4b28      	ldr	r3, [pc, #160]	; (8002434 <mtr_init+0xbc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
	motorA->suspend = 0;
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <mtr_init+0xbc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]

	motorAPID = mtrAPID;
 80023a2:	4a26      	ldr	r2, [pc, #152]	; (800243c <mtr_init+0xc4>)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	6013      	str	r3, [r2, #0]
	motorBPID = mtrBPID;
 80023a8:	4a25      	ldr	r2, [pc, #148]	; (8002440 <mtr_init+0xc8>)
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	6013      	str	r3, [r2, #0]

	backup = backupObj;
 80023ae:	4a25      	ldr	r2, [pc, #148]	; (8002444 <mtr_init+0xcc>)
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	6013      	str	r3, [r2, #0]
	backup_reset();
 80023b4:	f000 f854 	bl	8002460 <backup_reset>

	ori = orientation;
 80023b8:	4a23      	ldr	r2, [pc, #140]	; (8002448 <mtr_init+0xd0>)
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	6013      	str	r3, [r2, #0]
	ori_semaphoreHandlePtr = oriSemHandlePtr;
 80023be:	4a23      	ldr	r2, [pc, #140]	; (800244c <mtr_init+0xd4>)
 80023c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c2:	6013      	str	r3, [r2, #0]

	htim8Ptr = pwm_htimPtr;
 80023c4:	4a22      	ldr	r2, [pc, #136]	; (8002450 <mtr_init+0xd8>)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6013      	str	r3, [r2, #0]
	htim2Ptr = encodeA_htimPtr;
 80023ca:	4a22      	ldr	r2, [pc, #136]	; (8002454 <mtr_init+0xdc>)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	6013      	str	r3, [r2, #0]
	htim3Ptr = encodeB_htimPtr;
 80023d0:	4a21      	ldr	r2, [pc, #132]	; (8002458 <mtr_init+0xe0>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim8Ptr, PWMA_TIM_CH);
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <mtr_init+0xd8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 fe5d 	bl	800609c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim8Ptr, PWMB_TIM_CH);
 80023e2:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <mtr_init+0xd8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2104      	movs	r1, #4
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 fe57 	bl	800609c <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start_IT(htim2Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <mtr_init+0xdc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	213c      	movs	r1, #60	; 0x3c
 80023f4:	4618      	mov	r0, r3
 80023f6:	f004 f818 	bl	800642a <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(htim3Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
 80023fa:	4b17      	ldr	r3, [pc, #92]	; (8002458 <mtr_init+0xe0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	213c      	movs	r1, #60	; 0x3c
 8002400:	4618      	mov	r0, r3
 8002402:	f004 f812 	bl	800642a <HAL_TIM_Encoder_Start_IT>

	mtrA_init(0, 0, 0, 0, 1);
 8002406:	2201      	movs	r2, #1
 8002408:	eddf 0a14 	vldr	s1, [pc, #80]	; 800245c <mtr_init+0xe4>
 800240c:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800245c <mtr_init+0xe4>
 8002410:	2100      	movs	r1, #0
 8002412:	2000      	movs	r0, #0
 8002414:	f000 f842 	bl	800249c <mtrA_init>
	mtrB_init(0, 0, 0, 0, 1);
 8002418:	2201      	movs	r2, #1
 800241a:	eddf 0a10 	vldr	s1, [pc, #64]	; 800245c <mtr_init+0xe4>
 800241e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800245c <mtr_init+0xe4>
 8002422:	2100      	movs	r1, #0
 8002424:	2000      	movs	r0, #0
 8002426:	f000 f89f 	bl	8002568 <mtrB_init>
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000051c 	.word	0x2000051c
 8002438:	20000520 	.word	0x20000520
 800243c:	20000524 	.word	0x20000524
 8002440:	20000528 	.word	0x20000528
 8002444:	2000052c 	.word	0x2000052c
 8002448:	20000530 	.word	0x20000530
 800244c:	20000540 	.word	0x20000540
 8002450:	20000534 	.word	0x20000534
 8002454:	20000538 	.word	0x20000538
 8002458:	2000053c 	.word	0x2000053c
 800245c:	00000000 	.word	0x00000000

08002460 <backup_reset>:

void backup_reset() {
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
	backup->servoDir = STRAIGHT;
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <backup_reset+0x38>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
	backup->mtrADir = DIR_FWD;
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <backup_reset+0x38>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2201      	movs	r2, #1
 8002472:	705a      	strb	r2, [r3, #1]
	backup->mtrAPWM = 0;
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <backup_reset+0x38>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2200      	movs	r2, #0
 800247a:	605a      	str	r2, [r3, #4]
	backup->mtrBDir = DIR_FWD;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <backup_reset+0x38>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2201      	movs	r2, #1
 8002482:	709a      	strb	r2, [r3, #2]
	backup->mtrBPWM = 0;
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <backup_reset+0x38>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	2000052c 	.word	0x2000052c

0800249c <mtrA_init>:

void mtrA_init(int16_t target, int16_t Kp, float Kd, float Ki, uint8_t reset_timer) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80024a8:	edc7 0a01 	vstr	s1, [r7, #4]
 80024ac:	81fb      	strh	r3, [r7, #14]
 80024ae:	460b      	mov	r3, r1
 80024b0:	81bb      	strh	r3, [r7, #12]
 80024b2:	4613      	mov	r3, r2
 80024b4:	70fb      	strb	r3, [r7, #3]

	if (reset_timer)
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d004      	beq.n	80024c6 <mtrA_init+0x2a>
		__HAL_TIM_SET_COUNTER(htim2Ptr, 0);
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <mtrA_init+0xc0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24

	motorA->dir = DIR_FWD;
 80024c6:	4b26      	ldr	r3, [pc, #152]	; (8002560 <mtrA_init+0xc4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2201      	movs	r2, #1
 80024cc:	705a      	strb	r2, [r3, #1]
	motorA->pwmVal = 0;
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <mtrA_init+0xc4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	605a      	str	r2, [r3, #4]

	motorAPID->count = -(int16_t)__HAL_TIM_GET_COUNTER(htim2Ptr);       		// Counter (signed value)
 80024d6:	4b21      	ldr	r3, [pc, #132]	; (800255c <mtrA_init+0xc0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	b29b      	uxth	r3, r3
 80024e0:	425b      	negs	r3, r3
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <mtrA_init+0xc8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	b212      	sxth	r2, r2
 80024ea:	801a      	strh	r2, [r3, #0]
	motorAPID->target = target;
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <mtrA_init+0xc8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	89fa      	ldrh	r2, [r7, #14]
 80024f2:	805a      	strh	r2, [r3, #2]
	motorAPID->error = motorAPID->target - motorAPID->count;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <mtrA_init+0xc8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	4b19      	ldr	r3, [pc, #100]	; (8002564 <mtrA_init+0xc8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002506:	b29b      	uxth	r3, r3
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	b29a      	uxth	r2, r3
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <mtrA_init+0xc8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	b212      	sxth	r2, r2
 8002512:	809a      	strh	r2, [r3, #4]
	motorAPID->error_area = 0;  		// area under error - to calculate I for PI implementation
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <mtrA_init+0xc8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
	motorAPID->error_old = 0; 			// to calculate D for PID control
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <mtrA_init+0xc8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2200      	movs	r2, #0
 8002522:	60da      	str	r2, [r3, #12]
	motorAPID->millisOld = HAL_GetTick();			// to calculate I and D for PID control
 8002524:	f001 fd72 	bl	800400c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <mtrA_init+0xc8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	611a      	str	r2, [r3, #16]
	motorAPID->Kp = Kp;
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <mtrA_init+0xc8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002538:	ee07 2a90 	vmov	s15, r2
 800253c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002540:	edc3 7a05 	vstr	s15, [r3, #20]
	motorAPID->Kd = Kd;
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <mtrA_init+0xc8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	619a      	str	r2, [r3, #24]
	motorAPID->Ki = Ki;
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <mtrA_init+0xc8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	61da      	str	r2, [r3, #28]
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000538 	.word	0x20000538
 8002560:	2000051c 	.word	0x2000051c
 8002564:	20000524 	.word	0x20000524

08002568 <mtrB_init>:

void mtrB_init(int16_t target, int16_t Kp, float Kd, float Ki, uint8_t reset_timer) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	ed87 0a02 	vstr	s0, [r7, #8]
 8002574:	edc7 0a01 	vstr	s1, [r7, #4]
 8002578:	81fb      	strh	r3, [r7, #14]
 800257a:	460b      	mov	r3, r1
 800257c:	81bb      	strh	r3, [r7, #12]
 800257e:	4613      	mov	r3, r2
 8002580:	70fb      	strb	r3, [r7, #3]

	if (reset_timer)
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d004      	beq.n	8002592 <mtrB_init+0x2a>
		__HAL_TIM_SET_COUNTER(htim3Ptr, 0);
 8002588:	4b26      	ldr	r3, [pc, #152]	; (8002624 <mtrB_init+0xbc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	625a      	str	r2, [r3, #36]	; 0x24

	motorB->dir = DIR_FWD;
 8002592:	4b25      	ldr	r3, [pc, #148]	; (8002628 <mtrB_init+0xc0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2201      	movs	r2, #1
 8002598:	705a      	strb	r2, [r3, #1]
	motorB->pwmVal = 0;
 800259a:	4b23      	ldr	r3, [pc, #140]	; (8002628 <mtrB_init+0xc0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2200      	movs	r2, #0
 80025a0:	605a      	str	r2, [r3, #4]

	motorBPID->count = (int16_t)__HAL_TIM_GET_COUNTER(htim3Ptr);       		// Counter (signed value)
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <mtrB_init+0xbc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <mtrB_init+0xc4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	b212      	sxth	r2, r2
 80025b0:	801a      	strh	r2, [r3, #0]
	motorBPID->target = target;
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <mtrB_init+0xc4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	89fa      	ldrh	r2, [r7, #14]
 80025b8:	805a      	strh	r2, [r3, #2]
	motorBPID->error = motorBPID->target - motorBPID->count;
 80025ba:	4b1c      	ldr	r3, [pc, #112]	; (800262c <mtrB_init+0xc4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <mtrB_init+0xc4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	4b16      	ldr	r3, [pc, #88]	; (800262c <mtrB_init+0xc4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	b212      	sxth	r2, r2
 80025d8:	809a      	strh	r2, [r3, #4]
	motorBPID->error_area = 0;  		// area under error - to calculate I for PI implementation
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <mtrB_init+0xc4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
	motorBPID->error_old = 0; 			// to calculate D for PID control
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <mtrB_init+0xc4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]
	motorBPID->millisOld = HAL_GetTick();			// to calculate I and D for PID control
 80025ea:	f001 fd0f 	bl	800400c <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <mtrB_init+0xc4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	611a      	str	r2, [r3, #16]
	motorBPID->Kp = Kp;
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <mtrB_init+0xc4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80025fe:	ee07 2a90 	vmov	s15, r2
 8002602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002606:	edc3 7a05 	vstr	s15, [r3, #20]
	motorBPID->Kd = Kd;
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <mtrB_init+0xc4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	619a      	str	r2, [r3, #24]
	motorBPID->Ki = Ki;
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <mtrB_init+0xc4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	61da      	str	r2, [r3, #28]
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000053c 	.word	0x2000053c
 8002628:	20000520 	.word	0x20000520
 800262c:	20000528 	.word	0x20000528

08002630 <mtrA_mov>:

void mtrA_mov(uint8_t direction, uint16_t speed) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	460a      	mov	r2, r1
 800263a:	71fb      	strb	r3, [r7, #7]
 800263c:	4613      	mov	r3, r2
 800263e:	80bb      	strh	r3, [r7, #4]

	// Backward
	if (direction == DIR_BCK) {
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10a      	bne.n	800265c <mtrA_mov+0x2c>
		MOTOR_AIN1_Clr();
 8002646:	2200      	movs	r2, #0
 8002648:	2108      	movs	r1, #8
 800264a:	4811      	ldr	r0, [pc, #68]	; (8002690 <mtrA_mov+0x60>)
 800264c:	f002 f84e 	bl	80046ec <HAL_GPIO_WritePin>
		MOTOR_AIN2_Set();
 8002650:	2201      	movs	r2, #1
 8002652:	2104      	movs	r1, #4
 8002654:	480e      	ldr	r0, [pc, #56]	; (8002690 <mtrA_mov+0x60>)
 8002656:	f002 f849 	bl	80046ec <HAL_GPIO_WritePin>
 800265a:	e009      	b.n	8002670 <mtrA_mov+0x40>
	}
	// Forward
	else {
		MOTOR_AIN1_Set();
 800265c:	2201      	movs	r2, #1
 800265e:	2108      	movs	r1, #8
 8002660:	480b      	ldr	r0, [pc, #44]	; (8002690 <mtrA_mov+0x60>)
 8002662:	f002 f843 	bl	80046ec <HAL_GPIO_WritePin>
		MOTOR_AIN2_Clr();
 8002666:	2200      	movs	r2, #0
 8002668:	2104      	movs	r1, #4
 800266a:	4809      	ldr	r0, [pc, #36]	; (8002690 <mtrA_mov+0x60>)
 800266c:	f002 f83e 	bl	80046ec <HAL_GPIO_WritePin>
	}

	// Set speed
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 8002670:	88bb      	ldrh	r3, [r7, #4]
 8002672:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8002676:	d302      	bcc.n	800267e <mtrA_mov+0x4e>
 8002678:	f641 431f 	movw	r3, #7199	; 0x1c1f
 800267c:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim8Ptr, PWMA_TIM_CH, speed);
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <mtrA_mov+0x64>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	88ba      	ldrh	r2, [r7, #4]
 8002686:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40020000 	.word	0x40020000
 8002694:	20000534 	.word	0x20000534

08002698 <mtrB_mov>:

void mtrB_mov(uint8_t direction, uint16_t speed) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	460a      	mov	r2, r1
 80026a2:	71fb      	strb	r3, [r7, #7]
 80026a4:	4613      	mov	r3, r2
 80026a6:	80bb      	strh	r3, [r7, #4]

	// Backward
	if (direction == DIR_BCK) {
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <mtrB_mov+0x2c>
		MOTOR_BIN1_Clr();
 80026ae:	2200      	movs	r2, #0
 80026b0:	2110      	movs	r1, #16
 80026b2:	4811      	ldr	r0, [pc, #68]	; (80026f8 <mtrB_mov+0x60>)
 80026b4:	f002 f81a 	bl	80046ec <HAL_GPIO_WritePin>
		MOTOR_BIN2_Set();
 80026b8:	2201      	movs	r2, #1
 80026ba:	2120      	movs	r1, #32
 80026bc:	480e      	ldr	r0, [pc, #56]	; (80026f8 <mtrB_mov+0x60>)
 80026be:	f002 f815 	bl	80046ec <HAL_GPIO_WritePin>
 80026c2:	e009      	b.n	80026d8 <mtrB_mov+0x40>
	}
	// Forward
	else {
		MOTOR_BIN1_Set();
 80026c4:	2201      	movs	r2, #1
 80026c6:	2110      	movs	r1, #16
 80026c8:	480b      	ldr	r0, [pc, #44]	; (80026f8 <mtrB_mov+0x60>)
 80026ca:	f002 f80f 	bl	80046ec <HAL_GPIO_WritePin>
		MOTOR_BIN2_Clr();
 80026ce:	2200      	movs	r2, #0
 80026d0:	2120      	movs	r1, #32
 80026d2:	4809      	ldr	r0, [pc, #36]	; (80026f8 <mtrB_mov+0x60>)
 80026d4:	f002 f80a 	bl	80046ec <HAL_GPIO_WritePin>
	}

	// Set speed
	if (speed > MAX_SPEED) speed = MAX_SPEED;
 80026d8:	88bb      	ldrh	r3, [r7, #4]
 80026da:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80026de:	d302      	bcc.n	80026e6 <mtrB_mov+0x4e>
 80026e0:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80026e4:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim8Ptr, PWMB_TIM_CH, speed);
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <mtrB_mov+0x64>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	88ba      	ldrh	r2, [r7, #4]
 80026ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40020000 	.word	0x40020000
 80026fc:	20000534 	.word	0x20000534

08002700 <mtr_stop>:

/* Set params and stop both motors */
void mtr_stop() {
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	motorA->dir = DIR_FWD;
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <mtr_stop+0x44>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2201      	movs	r2, #1
 800270a:	705a      	strb	r2, [r3, #1]
	motorA->pwmVal = 0;
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <mtr_stop+0x44>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2200      	movs	r2, #0
 8002712:	605a      	str	r2, [r3, #4]
	motorB->dir = DIR_FWD;
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <mtr_stop+0x48>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	705a      	strb	r2, [r3, #1]
	motorB->pwmVal = 0;
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <mtr_stop+0x48>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2200      	movs	r2, #0
 8002722:	605a      	str	r2, [r3, #4]
	mtrA_mov(DIR_FWD, 0);
 8002724:	2100      	movs	r1, #0
 8002726:	2001      	movs	r0, #1
 8002728:	f7ff ff82 	bl	8002630 <mtrA_mov>
	mtrB_mov(DIR_FWD, 0);
 800272c:	2100      	movs	r1, #0
 800272e:	2001      	movs	r0, #1
 8002730:	f7ff ffb2 	bl	8002698 <mtrB_mov>
	turnServo(STRAIGHT);
 8002734:	2001      	movs	r0, #1
 8002736:	f000 ffdb 	bl	80036f0 <turnServo>
	osDelay(100);
 800273a:	2064      	movs	r0, #100	; 0x64
 800273c:	f006 f91e 	bl	800897c <osDelay>
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	2000051c 	.word	0x2000051c
 8002748:	20000520 	.word	0x20000520

0800274c <mtr_mov>:

void mtr_mov(MotorData* motor) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	if (motor->suspend > 0) {
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <mtr_mov+0x1a>
		mtr_stop();
 800275c:	f7ff ffd0 	bl	8002700 <mtr_stop>
		mtr_continue();
 8002760:	f000 f83a 	bl	80027d8 <mtr_continue>
		return;
 8002764:	e01c      	b.n	80027a0 <mtr_mov+0x54>
	}
	if (motor == motorA)  {
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <mtr_mov+0x5c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d109      	bne.n	8002784 <mtr_mov+0x38>
		mtrA_mov(motor->dir, motor->pwmVal);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	785a      	ldrb	r2, [r3, #1]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	b29b      	uxth	r3, r3
 800277a:	4619      	mov	r1, r3
 800277c:	4610      	mov	r0, r2
 800277e:	f7ff ff57 	bl	8002630 <mtrA_mov>
 8002782:	e00d      	b.n	80027a0 <mtr_mov+0x54>
	}
	else if (motor == motorB) {
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <mtr_mov+0x60>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d108      	bne.n	80027a0 <mtr_mov+0x54>
		mtrB_mov(motor->dir, motor->pwmVal);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	785a      	ldrb	r2, [r3, #1]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	b29b      	uxth	r3, r3
 8002798:	4619      	mov	r1, r3
 800279a:	4610      	mov	r0, r2
 800279c:	f7ff ff7c 	bl	8002698 <mtrB_mov>
	}
}
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000051c 	.word	0x2000051c
 80027ac:	20000520 	.word	0x20000520

080027b0 <mtr_SetParamAndMove>:

void mtr_SetParamAndMove(MotorData* motor, uint8_t param_dir, uint32_t param_pwmVal) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	460b      	mov	r3, r1
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	72fb      	strb	r3, [r7, #11]
	motor->dir = param_dir;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	7afa      	ldrb	r2, [r7, #11]
 80027c2:	705a      	strb	r2, [r3, #1]
	motor->pwmVal = param_pwmVal;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	605a      	str	r2, [r3, #4]
	mtr_mov(motor);
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f7ff ffbe 	bl	800274c <mtr_mov>
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <mtr_continue>:
}

/*
 * Restore movement, is called in mtr_mov() if the suspend status is on
 */
void mtr_continue() {
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
	if (!motorA->suspend) return;	// Not suspended or likely an error
 80027dc:	4b2f      	ldr	r3, [pc, #188]	; (800289c <mtr_continue+0xc4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d058      	beq.n	8002898 <mtr_continue+0xc0>

	if ((motorA->suspend == SUS_BACK) || (motorA->suspend == SUS_STOPPID)) {	// Needs SOSBack
 80027e6:	4b2d      	ldr	r3, [pc, #180]	; (800289c <mtr_continue+0xc4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d004      	beq.n	80027fa <mtr_continue+0x22>
 80027f0:	4b2a      	ldr	r3, [pc, #168]	; (800289c <mtr_continue+0xc4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d101      	bne.n	80027fe <mtr_continue+0x26>
		mtr_SOSBack();
 80027fa:	f000 f857 	bl	80028ac <mtr_SOSBack>
		//HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
	}
	if (motorA->suspend == SUS_STOPPID) {	// Stop PID, do not restore movement
 80027fe:	4b27      	ldr	r3, [pc, #156]	; (800289c <mtr_continue+0xc4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b03      	cmp	r3, #3
 8002806:	d102      	bne.n	800280e <mtr_continue+0x36>
		stopPID();
 8002808:	f000 f996 	bl	8002b38 <stopPID>
 800280c:	e033      	b.n	8002876 <mtr_continue+0x9e>
	}
	else {									// Restore movement, in case of SUS_BACK
		turnServo(backup->servoDir);
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <mtr_continue+0xc8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f000 ff6b 	bl	80036f0 <turnServo>
		motorA->dir = backup->mtrADir;
 800281a:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <mtr_continue+0xc8>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4b1f      	ldr	r3, [pc, #124]	; (800289c <mtr_continue+0xc4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	7852      	ldrb	r2, [r2, #1]
 8002824:	705a      	strb	r2, [r3, #1]
		motorA->pwmVal = backup->mtrAPWM;
 8002826:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <mtr_continue+0xc8>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <mtr_continue+0xc4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6852      	ldr	r2, [r2, #4]
 8002830:	605a      	str	r2, [r3, #4]
		motorB->dir = backup->mtrBDir;
 8002832:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <mtr_continue+0xc8>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <mtr_continue+0xcc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	7892      	ldrb	r2, [r2, #2]
 800283c:	705a      	strb	r2, [r3, #1]
		motorB->pwmVal = backup->mtrBPWM;
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <mtr_continue+0xc8>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <mtr_continue+0xcc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6892      	ldr	r2, [r2, #8]
 8002848:	605a      	str	r2, [r3, #4]
		mtrA_mov(motorA->dir, motorA->pwmVal);
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <mtr_continue+0xc4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	785a      	ldrb	r2, [r3, #1]
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <mtr_continue+0xc4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	b29b      	uxth	r3, r3
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f7ff fee8 	bl	8002630 <mtrA_mov>
		mtrB_mov(motorB->dir, motorB->pwmVal);
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <mtr_continue+0xcc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	785a      	ldrb	r2, [r3, #1]
 8002866:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <mtr_continue+0xcc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	b29b      	uxth	r3, r3
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f7ff ff11 	bl	8002698 <mtrB_mov>
	}
	backup_reset();
 8002876:	f7ff fdf3 	bl	8002460 <backup_reset>
	motorA->suspend = 0;
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <mtr_continue+0xc4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
	motorB->suspend = 0;
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <mtr_continue+0xcc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_SET);
 800288a:	2201      	movs	r2, #1
 800288c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002890:	4805      	ldr	r0, [pc, #20]	; (80028a8 <mtr_continue+0xd0>)
 8002892:	f001 ff2b 	bl	80046ec <HAL_GPIO_WritePin>
 8002896:	e000      	b.n	800289a <mtr_continue+0xc2>
	if (!motorA->suspend) return;	// Not suspended or likely an error
 8002898:	bf00      	nop
}
 800289a:	bd80      	pop	{r7, pc}
 800289c:	2000051c 	.word	0x2000051c
 80028a0:	2000052c 	.word	0x2000052c
 80028a4:	20000520 	.word	0x20000520
 80028a8:	40021000 	.word	0x40021000

080028ac <mtr_SOSBack>:

/* Used in emergency cases when car is too close to obstacles only */
float mtr_SOSBack() {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
	mtrA_mov(DIR_BCK, 1800);
 80028b0:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7ff febb 	bl	8002630 <mtrA_mov>
	mtrB_mov(DIR_BCK, 1800);
 80028ba:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80028be:	2000      	movs	r0, #0
 80028c0:	f7ff feea 	bl	8002698 <mtrB_mov>
	osDelay(500);
 80028c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028c8:	f006 f858 	bl	800897c <osDelay>
	mtr_stop();
 80028cc:	f7ff ff18 	bl	8002700 <mtr_stop>
	return SOSBACK_DIST_CNT / CNT_PER_CM;
 80028d0:	4b02      	ldr	r3, [pc, #8]	; (80028dc <mtr_SOSBack+0x30>)
 80028d2:	ee07 3a90 	vmov	s15, r3
}
 80028d6:	eeb0 0a67 	vmov.f32	s0, s15
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	c12eb4b4 	.word	0xc12eb4b4

080028e0 <mtr_mov_cnt>:

void mtr_mov_cnt(int target_A, int target_B) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
	mtrA_init((int16_t)target_A, 1.2, 0.05, 0.0001, 1);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	b21b      	sxth	r3, r3
 80028ee:	2201      	movs	r2, #1
 80028f0:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002980 <mtr_mov_cnt+0xa0>
 80028f4:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8002984 <mtr_mov_cnt+0xa4>
 80028f8:	2101      	movs	r1, #1
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fdce 	bl	800249c <mtrA_init>
	mtrB_init((int16_t)target_B, 1.2, 0.05, 0.0001, 1);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b21b      	sxth	r3, r3
 8002904:	2201      	movs	r2, #1
 8002906:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8002980 <mtr_mov_cnt+0xa0>
 800290a:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8002984 <mtr_mov_cnt+0xa4>
 800290e:	2101      	movs	r1, #1
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fe29 	bl	8002568 <mtrB_init>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 8002916:	e019      	b.n	800294c <mtr_mov_cnt+0x6c>
		PID_Control(motorA, motorAPID);
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <mtr_mov_cnt+0xa8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1b      	ldr	r2, [pc, #108]	; (800298c <mtr_mov_cnt+0xac>)
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f85c 	bl	80029e0 <PID_Control>
		PID_Control(motorB, motorBPID);
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <mtr_mov_cnt+0xb0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <mtr_mov_cnt+0xb4>)
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f854 	bl	80029e0 <PID_Control>
		mtr_mov(motorA);
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <mtr_mov_cnt+0xa8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff05 	bl	800274c <mtr_mov>
		mtr_mov(motorB);
 8002942:	4b13      	ldr	r3, [pc, #76]	; (8002990 <mtr_mov_cnt+0xb0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ff00 	bl	800274c <mtr_mov>
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <mtr_mov_cnt+0xac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	bfb8      	it	lt
 8002958:	425b      	neglt	r3, r3
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b32      	cmp	r3, #50	; 0x32
 800295e:	d8db      	bhi.n	8002918 <mtr_mov_cnt+0x38>
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <mtr_mov_cnt+0xb4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	bfb8      	it	lt
 800296c:	425b      	neglt	r3, r3
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b32      	cmp	r3, #50	; 0x32
 8002972:	d8d1      	bhi.n	8002918 <mtr_mov_cnt+0x38>
	}
	mtr_stop();
 8002974:	f7ff fec4 	bl	8002700 <mtr_stop>
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	38d1b717 	.word	0x38d1b717
 8002984:	3d4ccccd 	.word	0x3d4ccccd
 8002988:	2000051c 	.word	0x2000051c
 800298c:	20000524 	.word	0x20000524
 8002990:	20000520 	.word	0x20000520
 8002994:	20000528 	.word	0x20000528

08002998 <mtr_mov_cm>:
	}
	mtr_stop();
}


void mtr_mov_cm(float cm_A, float cm_B) {
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	ed87 0a01 	vstr	s0, [r7, #4]
 80029a2:	edc7 0a00 	vstr	s1, [r7]
	mtr_mov_cnt((int)(cm_A * CNT_PER_CM), (int)(cm_B * CNT_PER_CM));
 80029a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80029aa:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80029dc <mtr_mov_cm+0x44>
 80029ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80029b6:	edd7 7a00 	vldr	s15, [r7]
 80029ba:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80029dc <mtr_mov_cm+0x44>
 80029be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029c6:	ee17 1a90 	vmov	r1, s15
 80029ca:	ee16 0a90 	vmov	r0, s13
 80029ce:	f7ff ff87 	bl	80028e0 <mtr_mov_cnt>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	42928831 	.word	0x42928831

080029e0 <PID_Control>:

void PID_Control(MotorData* motor, MotorPIDData* motorPID) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
	  //Control Loop
	if (abs(motorPID->error)>MAX_PID_ERR) { //more than 100  difference
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bfb8      	it	lt
 80029f4:	425b      	neglt	r3, r3
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b32      	cmp	r3, #50	; 0x32
 80029fa:	f240 8092 	bls.w	8002b22 <PID_Control+0x142>
  	    motorPID->error = motorPID->target - motorPID->count;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	b21a      	sxth	r2, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	809a      	strh	r2, [r3, #4]

  	    if (motorPID->error > 0)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	dd03      	ble.n	8002a2a <PID_Control+0x4a>
        	motor->dir = DIR_FWD;	// Forward
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	705a      	strb	r2, [r3, #1]
 8002a28:	e002      	b.n	8002a30 <PID_Control+0x50>
        else
        	motor->dir = DIR_BCK;	// Backward
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	705a      	strb	r2, [r3, #1]

        int32_t millisNow = HAL_GetTick();
 8002a30:	f001 faec 	bl	800400c <HAL_GetTick>
 8002a34:	4603      	mov	r3, r0
 8002a36:	617b      	str	r3, [r7, #20]
        int32_t dt = (millisNow - motorPID->millisOld); // time elapsed in millisecond
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	613b      	str	r3, [r7, #16]
        motorPID->millisOld = millisNow; // store the current time for next round
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	611a      	str	r2, [r3, #16]

        motorPID->error_area = motorPID->error_area + motorPID->error * dt; // area under error for Ki
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a52:	4619      	mov	r1, r3
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	441a      	add	r2, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	609a      	str	r2, [r3, #8]

        int32_t error_change = motorPID->error - motorPID->error_old; // change in error
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a66:	461a      	mov	r2, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	60fb      	str	r3, [r7, #12]
        motorPID->error_old = motorPID->error; //store the error for next round
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a76:	461a      	mov	r2, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	60da      	str	r2, [r3, #12]
        float error_rate = (float)error_change / dt; // for Kd
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a94:	edc7 7a02 	vstr	s15, [r7, #8]

        motor->pwmVal = abs((int32_t)(motorPID->error * motorPID->Kp + motorPID->error_area * motorPID->Ki + error_rate * motorPID->Kd)) / 2;  // PID
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a9e:	ee07 3a90 	vmov	s15, r3
 8002aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	edd3 7a05 	vldr	s15, [r3, #20]
 8002aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	ee07 3a90 	vmov	s15, r3
 8002ab8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	edd3 6a06 	vldr	s13, [r3, #24]
 8002ad0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ae0:	ee17 3a90 	vmov	r3, s15
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bfb8      	it	lt
 8002ae8:	425b      	neglt	r3, r3
 8002aea:	0fda      	lsrs	r2, r3, #31
 8002aec:	4413      	add	r3, r2
 8002aee:	105b      	asrs	r3, r3, #1
 8002af0:	461a      	mov	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	605a      	str	r2, [r3, #4]
        osDelay(10);
 8002af6:	200a      	movs	r0, #10
 8002af8:	f005 ff40 	bl	800897c <osDelay>
        if (motor->pwmVal > MAX_SPEED)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8002b04:	d303      	bcc.n	8002b0e <PID_Control+0x12e>
        	motor->pwmVal = MAX_SPEED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002b0c:	605a      	str	r2, [r3, #4]
        if (motor->pwmVal < MIN_SPEED)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002b16:	d20a      	bcs.n	8002b2e <PID_Control+0x14e>
        	motor-> pwmVal = MIN_SPEED;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002b1e:	605a      	str	r2, [r3, #4]
	} // if loop
	else {
		motor->dir = DIR_FWD;
		motor->pwmVal = 0;
	}
}
 8002b20:	e005      	b.n	8002b2e <PID_Control+0x14e>
		motor->dir = DIR_FWD;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	705a      	strb	r2, [r3, #1]
		motor->pwmVal = 0;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	605a      	str	r2, [r3, #4]
}
 8002b2e:	bf00      	nop
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <stopPID>:

void stopPID() {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
	motorAPID->error = 0;
 8002b3c:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <stopPID+0x60>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2200      	movs	r2, #0
 8002b42:	809a      	strh	r2, [r3, #4]
	motorBPID->error = 0;
 8002b44:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <stopPID+0x64>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	809a      	strh	r2, [r3, #4]
	motorAPID->target = motorAPID->count;
 8002b4c:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <stopPID+0x60>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <stopPID+0x60>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002b58:	805a      	strh	r2, [r3, #2]
	motorBPID->target = motorBPID->count;
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <stopPID+0x64>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <stopPID+0x64>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002b66:	805a      	strh	r2, [r3, #2]
	mtr_stop();
 8002b68:	f7ff fdca 	bl	8002700 <mtr_stop>
	// Also clear backup
	backup->mtrADir = DIR_FWD;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <stopPID+0x68>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	705a      	strb	r2, [r3, #1]
	backup->mtrBDir = DIR_FWD;
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <stopPID+0x68>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	709a      	strb	r2, [r3, #2]
	backup->mtrAPWM = 0;
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <stopPID+0x68>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2200      	movs	r2, #0
 8002b82:	605a      	str	r2, [r3, #4]
	backup->mtrBPWM = 0;
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <stopPID+0x68>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	609a      	str	r2, [r3, #8]
	backup->servoDir = STRAIGHT;
 8002b8c:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <stopPID+0x68>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000524 	.word	0x20000524
 8002b9c:	20000528 	.word	0x20000528
 8002ba0:	2000052c 	.word	0x2000052c

08002ba4 <turn>:

void turn(float turning_angle) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	ed87 0a01 	vstr	s0, [r7, #4]
	if (abs(turning_angle) < MAX_ORI_ERR)		// Too small, turn may not be accurate
 8002bae:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb6:	ee17 3a90 	vmov	r3, s15
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bfb8      	it	lt
 8002bbe:	425b      	neglt	r3, r3
 8002bc0:	ee07 3a90 	vmov	s15, r3
 8002bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd4:	f100 814a 	bmi.w	8002e6c <turn+0x2c8>
		return;
	if ((turning_angle < 0) || (turning_angle >= 360))	// Invalid turning angle
 8002bd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	f100 8144 	bmi.w	8002e70 <turn+0x2cc>
 8002be8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bec:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8002e78 <turn+0x2d4>
 8002bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	f280 813a 	bge.w	8002e70 <turn+0x2cc>
		return;

	float target_ori = (*ori) + turning_angle;
 8002bfc:	4b9f      	ldr	r3, [pc, #636]	; (8002e7c <turn+0x2d8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	edd3 7a00 	vldr	s15, [r3]
 8002c04:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0c:	edc7 7a07 	vstr	s15, [r7, #28]
	while (target_ori >= 360) target_ori -= 360;
 8002c10:	e007      	b.n	8002c22 <turn+0x7e>
 8002c12:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c16:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8002e78 <turn+0x2d4>
 8002c1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c1e:	edc7 7a07 	vstr	s15, [r7, #28]
 8002c22:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c26:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8002e78 <turn+0x2d4>
 8002c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c32:	daee      	bge.n	8002c12 <turn+0x6e>
	while (target_ori < 0) target_ori += 360;
 8002c34:	e007      	b.n	8002c46 <turn+0xa2>
 8002c36:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c3a:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8002e78 <turn+0x2d4>
 8002c3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c42:	edc7 7a07 	vstr	s15, [r7, #28]
 8002c46:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c52:	d4f0      	bmi.n	8002c36 <turn+0x92>

	uint8_t near_0 = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	76fb      	strb	r3, [r7, #27]
	if ((target_ori < MAX_ORI_ERR) || (target_ori > 360 - MAX_ORI_ERR)) {
 8002c58:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c5c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c68:	d408      	bmi.n	8002c7c <turn+0xd8>
 8002c6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c6e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002e80 <turn+0x2dc>
 8002c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7a:	dd01      	ble.n	8002c80 <turn+0xdc>
		near_0 = 1;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	76fb      	strb	r3, [r7, #27]
	}

	uint8_t mtr_dir = 1;	// 0: stop, 1: fwd, 2: bck
 8002c80:	2301      	movs	r3, #1
 8002c82:	76bb      	strb	r3, [r7, #26]

	while (mtr_dir) {
 8002c84:	e0eb      	b.n	8002e5e <turn+0x2ba>
		if (turning_angle <= 180) {	// Turn left
 8002c86:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c8a:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002e84 <turn+0x2e0>
 8002c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c96:	d82e      	bhi.n	8002cf6 <turn+0x152>
			if (mtr_dir == 1) {
 8002c98:	7ebb      	ldrb	r3, [r7, #26]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d115      	bne.n	8002cca <turn+0x126>
				turnServo(LEFT);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f000 fd26 	bl	80036f0 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_FWD, 1500);
 8002ca4:	4b78      	ldr	r3, [pc, #480]	; (8002e88 <turn+0x2e4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002cac:	2101      	movs	r1, #1
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fd7e 	bl	80027b0 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_FWD, 1500);
 8002cb4:	4b75      	ldr	r3, [pc, #468]	; (8002e8c <turn+0x2e8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fd76 	bl	80027b0 <mtr_SetParamAndMove>
				mtr_dir = 2;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	76bb      	strb	r3, [r7, #26]
 8002cc8:	e043      	b.n	8002d52 <turn+0x1ae>
			}
			else {
				turnServo(RIGHT);
 8002cca:	2002      	movs	r0, #2
 8002ccc:	f000 fd10 	bl	80036f0 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_BCK, 1500);
 8002cd0:	4b6d      	ldr	r3, [pc, #436]	; (8002e88 <turn+0x2e4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fd68 	bl	80027b0 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_BCK, 1500);
 8002ce0:	4b6a      	ldr	r3, [pc, #424]	; (8002e8c <turn+0x2e8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fd60 	bl	80027b0 <mtr_SetParamAndMove>
				mtr_dir = 1;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	76bb      	strb	r3, [r7, #26]
 8002cf4:	e02d      	b.n	8002d52 <turn+0x1ae>
			}
		}
		else {						// Turn right
			if (mtr_dir == 1) {
 8002cf6:	7ebb      	ldrb	r3, [r7, #26]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d115      	bne.n	8002d28 <turn+0x184>
				turnServo(RIGHT);
 8002cfc:	2002      	movs	r0, #2
 8002cfe:	f000 fcf7 	bl	80036f0 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_FWD, 1500);
 8002d02:	4b61      	ldr	r3, [pc, #388]	; (8002e88 <turn+0x2e4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fd4f 	bl	80027b0 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_FWD, 1500);
 8002d12:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <turn+0x2e8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fd47 	bl	80027b0 <mtr_SetParamAndMove>
				mtr_dir = 2;
 8002d22:	2302      	movs	r3, #2
 8002d24:	76bb      	strb	r3, [r7, #26]
 8002d26:	e014      	b.n	8002d52 <turn+0x1ae>
			}
			else {
				turnServo(LEFT);
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f000 fce1 	bl	80036f0 <turnServo>
				mtr_SetParamAndMove(motorA, DIR_BCK, 1500);
 8002d2e:	4b56      	ldr	r3, [pc, #344]	; (8002e88 <turn+0x2e4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002d36:	2100      	movs	r1, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fd39 	bl	80027b0 <mtr_SetParamAndMove>
				mtr_SetParamAndMove(motorB, DIR_BCK, 1500);
 8002d3e:	4b53      	ldr	r3, [pc, #332]	; (8002e8c <turn+0x2e8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fd31 	bl	80027b0 <mtr_SetParamAndMove>
				mtr_dir = 1;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	76bb      	strb	r3, [r7, #26]
			}
		}

		// Poll orientation value and break if needed
		if (!near_0) {
 8002d52:	7efb      	ldrb	r3, [r7, #27]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d129      	bne.n	8002dac <turn+0x208>
			for (int i = 0; i < 250; i++) {
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	e022      	b.n	8002da4 <turn+0x200>
				if (abs((*ori) - target_ori) < MAX_ORI_ERR) {
 8002d5e:	4b47      	ldr	r3, [pc, #284]	; (8002e7c <turn+0x2d8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	ed93 7a00 	vldr	s14, [r3]
 8002d66:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d72:	ee17 3a90 	vmov	r3, s15
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bfb8      	it	lt
 8002d7a:	425b      	neglt	r3, r3
 8002d7c:	ee07 3a90 	vmov	s15, r3
 8002d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d84:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d90:	d502      	bpl.n	8002d98 <turn+0x1f4>
					mtr_dir = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	76bb      	strb	r3, [r7, #26]
					break;
 8002d96:	e060      	b.n	8002e5a <turn+0x2b6>
				}
				osDelay(2);
 8002d98:	2002      	movs	r0, #2
 8002d9a:	f005 fdef 	bl	800897c <osDelay>
			for (int i = 0; i < 250; i++) {
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	3301      	adds	r3, #1
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2bf9      	cmp	r3, #249	; 0xf9
 8002da8:	ddd9      	ble.n	8002d5e <turn+0x1ba>
 8002daa:	e056      	b.n	8002e5a <turn+0x2b6>
			}
		}
		else {
			float bound_lo, bound_hi;
			if (target_ori > 350) {
 8002dac:	edd7 7a07 	vldr	s15, [r7, #28]
 8002db0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002e90 <turn+0x2ec>
 8002db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dbc:	dd14      	ble.n	8002de8 <turn+0x244>
				bound_lo = target_ori - MAX_ORI_ERR;
 8002dbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dc2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002dc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dca:	edc7 7a04 	vstr	s15, [r7, #16]
				bound_hi = target_ori + MAX_ORI_ERR - 360;
 8002dce:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dd2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002dd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dda:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002e78 <turn+0x2d4>
 8002dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002de2:	edc7 7a03 	vstr	s15, [r7, #12]
 8002de6:	e013      	b.n	8002e10 <turn+0x26c>
			}
			else {
				bound_lo = target_ori - MAX_ORI_ERR + 360;
 8002de8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dec:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002df0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002df4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002e78 <turn+0x2d4>
 8002df8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dfc:	edc7 7a04 	vstr	s15, [r7, #16]
				bound_hi = target_ori + MAX_ORI_ERR;
 8002e00:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e04:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002e08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e0c:	edc7 7a03 	vstr	s15, [r7, #12]
			}
			for (int i = 0; i < 250; i++) {
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	e01e      	b.n	8002e54 <turn+0x2b0>
				if (((*ori) > bound_lo) || ((*ori) < bound_hi)) {
 8002e16:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <turn+0x2d8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	edd3 7a00 	vldr	s15, [r3]
 8002e1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2a:	d40a      	bmi.n	8002e42 <turn+0x29e>
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <turn+0x2d8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	edd3 7a00 	vldr	s15, [r3]
 8002e34:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e40:	dd02      	ble.n	8002e48 <turn+0x2a4>
					mtr_dir = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	76bb      	strb	r3, [r7, #26]
					break;
 8002e46:	e008      	b.n	8002e5a <turn+0x2b6>
				}
				osDelay(2);
 8002e48:	2002      	movs	r0, #2
 8002e4a:	f005 fd97 	bl	800897c <osDelay>
			for (int i = 0; i < 250; i++) {
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3301      	adds	r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2bf9      	cmp	r3, #249	; 0xf9
 8002e58:	dddd      	ble.n	8002e16 <turn+0x272>
			}
		}
		mtr_stop();
 8002e5a:	f7ff fc51 	bl	8002700 <mtr_stop>
	while (mtr_dir) {
 8002e5e:	7ebb      	ldrb	r3, [r7, #26]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f47f af10 	bne.w	8002c86 <turn+0xe2>
	}
	mtr_stop();
 8002e66:	f7ff fc4b 	bl	8002700 <mtr_stop>
 8002e6a:	e002      	b.n	8002e72 <turn+0x2ce>
		return;
 8002e6c:	bf00      	nop
 8002e6e:	e000      	b.n	8002e72 <turn+0x2ce>
		return;
 8002e70:	bf00      	nop
}
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	43b40000 	.word	0x43b40000
 8002e7c:	20000530 	.word	0x20000530
 8002e80:	43b34000 	.word	0x43b34000
 8002e84:	43340000 	.word	0x43340000
 8002e88:	2000051c 	.word	0x2000051c
 8002e8c:	20000520 	.word	0x20000520
 8002e90:	43af0000 	.word	0x43af0000

08002e94 <carTurn>:
/*
 * mtr_dir = { 0: stop, 1: fwd, 2: bck }
 * turning_angle only accept 90 (left) or 270 (right)
 */
void carTurn(uint8_t mtr_dir, float turning_angle) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	ed87 0a00 	vstr	s0, [r7]
 8002ea0:	71fb      	strb	r3, [r7, #7]
	// Check validity of parameters
	if ((mtr_dir < 1) || (mtr_dir > 2))
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80f7 	beq.w	8003098 <carTurn+0x204>
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	f200 80f3 	bhi.w	8003098 <carTurn+0x204>
	/*if ((turning_angle != 90) && (turning_angle != 270))
		return;
	*/

	// Calculate target orientation
	float target_ori = (*ori) + turning_angle;
 8002eb2:	4b7b      	ldr	r3, [pc, #492]	; (80030a0 <carTurn+0x20c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	edd3 7a00 	vldr	s15, [r3]
 8002eba:	ed97 7a00 	vldr	s14, [r7]
 8002ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec2:	edc7 7a07 	vstr	s15, [r7, #28]
	while (target_ori >= 360) target_ori -= 360;
 8002ec6:	e007      	b.n	8002ed8 <carTurn+0x44>
 8002ec8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ecc:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80030a4 <carTurn+0x210>
 8002ed0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ed4:	edc7 7a07 	vstr	s15, [r7, #28]
 8002ed8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002edc:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80030a4 <carTurn+0x210>
 8002ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee8:	daee      	bge.n	8002ec8 <carTurn+0x34>
	while (target_ori < 0) target_ori += 360;
 8002eea:	e007      	b.n	8002efc <carTurn+0x68>
 8002eec:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ef0:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80030a4 <carTurn+0x210>
 8002ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ef8:	edc7 7a07 	vstr	s15, [r7, #28]
 8002efc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f08:	d4f0      	bmi.n	8002eec <carTurn+0x58>

	// Adjustments for near 0 degree target orientation
	uint8_t near_0 = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	76fb      	strb	r3, [r7, #27]
	float bound_lo, bound_hi;
	if ((target_ori < MAX_ORI_ERR) || (target_ori > 360 - MAX_ORI_ERR)) {
 8002f0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f12:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	d408      	bmi.n	8002f32 <carTurn+0x9e>
 8002f20:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f24:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80030a8 <carTurn+0x214>
 8002f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f30:	dd33      	ble.n	8002f9a <carTurn+0x106>
		near_0 = 1;
 8002f32:	2301      	movs	r3, #1
 8002f34:	76fb      	strb	r3, [r7, #27]
		if (target_ori > 350) {
 8002f36:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f3a:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80030ac <carTurn+0x218>
 8002f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f46:	dd14      	ble.n	8002f72 <carTurn+0xde>
			bound_lo = target_ori - MAX_ORI_ERR;
 8002f48:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f4c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002f50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f54:	edc7 7a05 	vstr	s15, [r7, #20]
			bound_hi = target_ori + MAX_ORI_ERR - 360;
 8002f58:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f5c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002f60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f64:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80030a4 <carTurn+0x210>
 8002f68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f6c:	edc7 7a04 	vstr	s15, [r7, #16]
 8002f70:	e013      	b.n	8002f9a <carTurn+0x106>
		}
		else {
			bound_lo = target_ori - MAX_ORI_ERR + 360;
 8002f72:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f76:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002f7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f7e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80030a4 <carTurn+0x210>
 8002f82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f86:	edc7 7a05 	vstr	s15, [r7, #20]
			bound_hi = target_ori + MAX_ORI_ERR;
 8002f8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f8e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002f92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f96:	edc7 7a04 	vstr	s15, [r7, #16]
		turnServo(LEFT);
	}
	else {
		turnServo(RIGHT);
	}*/
	turnServo(RIGHT);
 8002f9a:	2002      	movs	r0, #2
 8002f9c:	f000 fba8 	bl	80036f0 <turnServo>
	osDelay(200);
 8002fa0:	20c8      	movs	r0, #200	; 0xc8
 8002fa2:	f005 fceb 	bl	800897c <osDelay>

	int mtrSpeed = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
	if (mtr_dir == 1) {
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d111      	bne.n	8002fd4 <carTurn+0x140>
		mtrSpeed = 3800;
 8002fb0:	f640 63d8 	movw	r3, #3800	; 0xed8
 8002fb4:	60fb      	str	r3, [r7, #12]
		mtr_SetParamAndMove(motorA, DIR_FWD, mtrSpeed);
 8002fb6:	4b3e      	ldr	r3, [pc, #248]	; (80030b0 <carTurn+0x21c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fbf6 	bl	80027b0 <mtr_SetParamAndMove>
		mtr_SetParamAndMove(motorB, DIR_FWD, mtrSpeed);
 8002fc4:	4b3b      	ldr	r3, [pc, #236]	; (80030b4 <carTurn+0x220>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	2101      	movs	r1, #1
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff fbef 	bl	80027b0 <mtr_SetParamAndMove>
 8002fd2:	e010      	b.n	8002ff6 <carTurn+0x162>
	}
	else {
		mtrSpeed = 4000;
 8002fd4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002fd8:	60fb      	str	r3, [r7, #12]
		mtr_SetParamAndMove(motorA, DIR_BCK, mtrSpeed);
 8002fda:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <carTurn+0x21c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fbe4 	bl	80027b0 <mtr_SetParamAndMove>
		mtr_SetParamAndMove(motorB, DIR_BCK, mtrSpeed);
 8002fe8:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <carTurn+0x220>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fbdd 	bl	80027b0 <mtr_SetParamAndMove>
	}

	// Polling orientation and break when target reached
	while (1) {
		if (!near_0) {
 8002ff6:	7efb      	ldrb	r3, [r7, #27]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11a      	bne.n	8003032 <carTurn+0x19e>
			if (abs((*ori) - target_ori) < MAX_ORI_ERR) {
 8002ffc:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <carTurn+0x20c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	ed93 7a00 	vldr	s14, [r3]
 8003004:	edd7 7a07 	vldr	s15, [r7, #28]
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003010:	ee17 3a90 	vmov	r3, s15
 8003014:	2b00      	cmp	r3, #0
 8003016:	bfb8      	it	lt
 8003018:	425b      	neglt	r3, r3
 800301a:	ee07 3a90 	vmov	s15, r3
 800301e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003022:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800302a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302e:	d42f      	bmi.n	8003090 <carTurn+0x1fc>
 8003030:	e015      	b.n	800305e <carTurn+0x1ca>
				break;
			}
		}
		else {
			if (((*ori) > bound_lo) || ((*ori) < bound_hi)) {
 8003032:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <carTurn+0x20c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	ed97 7a05 	vldr	s14, [r7, #20]
 800303e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003046:	d424      	bmi.n	8003092 <carTurn+0x1fe>
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <carTurn+0x20c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	edd3 7a00 	vldr	s15, [r3]
 8003050:	ed97 7a04 	vldr	s14, [r7, #16]
 8003054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305c:	dc19      	bgt.n	8003092 <carTurn+0x1fe>
				break;
			}
		}
		if (mtrSpeed > 1800) {
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003064:	dd02      	ble.n	800306c <carTurn+0x1d8>
			mtrSpeed -= 5;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3b05      	subs	r3, #5
 800306a:	60fb      	str	r3, [r7, #12]
		}
		mtr_SetParamAndMove(motorA, DIR_FWD, mtrSpeed);
 800306c:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <carTurn+0x21c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	2101      	movs	r1, #1
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fb9b 	bl	80027b0 <mtr_SetParamAndMove>
		mtr_SetParamAndMove(motorB, DIR_FWD, mtrSpeed);
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <carTurn+0x220>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	2101      	movs	r1, #1
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fb94 	bl	80027b0 <mtr_SetParamAndMove>
		osDelay(2);
 8003088:	2002      	movs	r0, #2
 800308a:	f005 fc77 	bl	800897c <osDelay>
		if (!near_0) {
 800308e:	e7b2      	b.n	8002ff6 <carTurn+0x162>
				break;
 8003090:	bf00      	nop
	}
	mtr_stop();
 8003092:	f7ff fb35 	bl	8002700 <mtr_stop>
 8003096:	e000      	b.n	800309a <carTurn+0x206>
		return;
 8003098:	bf00      	nop
	}
	else if ((turning_angle == 90) && (mtr_dir == 2)) {
		mtr_mov_cm(-8.2, -8.2);
	}
	*/
}
 800309a:	3720      	adds	r7, #32
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000530 	.word	0x20000530
 80030a4:	43b40000 	.word	0x43b40000
 80030a8:	43b34000 	.word	0x43b34000
 80030ac:	43af0000 	.word	0x43af0000
 80030b0:	2000051c 	.word	0x2000051c
 80030b4:	20000520 	.word	0x20000520

080030b8 <executeInstruction>:

/*
 * @brief Run instruction inst
 * @retval Distance moved in cm (linear). If execute turn, always return 0 even if SOSBack is called.
 */
float executeInstruction(Instruction* inst, CompleteError* cpltErr) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
	float retval;
	if (inst->type == INST_TYPE_GOSTRAIGHT) {
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	785b      	ldrb	r3, [r3, #1]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d12c      	bne.n	8003124 <executeInstruction+0x6c>
		mtr_mov_cm((float)inst->val, (float)inst->val);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030d0:	ee07 3a90 	vmov	s15, r3
 80030d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030de:	ee07 3a10 	vmov	s14, r3
 80030e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80030e6:	eef0 0a47 	vmov.f32	s1, s14
 80030ea:	eeb0 0a67 	vmov.f32	s0, s15
 80030ee:	f7ff fc53 	bl	8002998 <mtr_mov_cm>
		retval = ((float)(motorAPID->count + motorBPID->count) / 2) / CNT_PER_CM;
 80030f2:	4b37      	ldr	r3, [pc, #220]	; (80031d0 <executeInstruction+0x118>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b35      	ldr	r3, [pc, #212]	; (80031d4 <executeInstruction+0x11c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003104:	4413      	add	r3, r2
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800310e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003112:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003116:	eddf 6a30 	vldr	s13, [pc, #192]	; 80031d8 <executeInstruction+0x120>
 800311a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800311e:	edc7 7a03 	vstr	s15, [r7, #12]
 8003122:	e046      	b.n	80031b2 <executeInstruction+0xfa>
	}
	else if (inst->type == INST_TYPE_TURN) {
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	785b      	ldrb	r3, [r3, #1]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d13f      	bne.n	80031ac <executeInstruction+0xf4>
		float turning_angle = (float)inst->val;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800313a:	edc7 7a02 	vstr	s15, [r7, #8]
		if ((turning_angle >= 0) && (turning_angle < 360)) {
 800313e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003142:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314a:	db0d      	blt.n	8003168 <executeInstruction+0xb0>
 800314c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003150:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80031dc <executeInstruction+0x124>
 8003154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315c:	d504      	bpl.n	8003168 <executeInstruction+0xb0>
			turn(turning_angle);
 800315e:	ed97 0a02 	vldr	s0, [r7, #8]
 8003162:	f7ff fd1f 	bl	8002ba4 <turn>
 8003166:	e01d      	b.n	80031a4 <executeInstruction+0xec>
		}
		else if (turning_angle < 0) {
 8003168:	edd7 7a02 	vldr	s15, [r7, #8]
 800316c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	d50b      	bpl.n	800318e <executeInstruction+0xd6>
			carTurn(2, turning_angle + 360);
 8003176:	edd7 7a02 	vldr	s15, [r7, #8]
 800317a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80031dc <executeInstruction+0x124>
 800317e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003182:	eeb0 0a67 	vmov.f32	s0, s15
 8003186:	2002      	movs	r0, #2
 8003188:	f7ff fe84 	bl	8002e94 <carTurn>
 800318c:	e00a      	b.n	80031a4 <executeInstruction+0xec>
		}
		else {
			carTurn(1, turning_angle - 360);
 800318e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003192:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80031dc <executeInstruction+0x124>
 8003196:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800319a:	eeb0 0a67 	vmov.f32	s0, s15
 800319e:	2001      	movs	r0, #1
 80031a0:	f7ff fe78 	bl	8002e94 <carTurn>
		}
		retval = 0;
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	e002      	b.n	80031b2 <executeInstruction+0xfa>
	}
	else {
		return 0;
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e007      	b.n	80031c2 <executeInstruction+0x10a>
	}
	//cpltErr->finished = 1;
	if (cpltErr->type == CPLTERR_TYPE_UNDEFINED) {
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	785b      	ldrb	r3, [r3, #1]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d102      	bne.n	80031c0 <executeInstruction+0x108>
		cpltErr->type = CPLTERR_TYPE_CPLT;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2200      	movs	r2, #0
 80031be:	705a      	strb	r2, [r3, #1]
	}
	return retval;
 80031c0:	68fb      	ldr	r3, [r7, #12]
}
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20000524 	.word	0x20000524
 80031d4:	20000528 	.word	0x20000528
 80031d8:	42928831 	.word	0x42928831
 80031dc:	43b40000 	.word	0x43b40000

080031e0 <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80031e6:	2300      	movs	r3, #0
 80031e8:	71fb      	strb	r3, [r7, #7]
 80031ea:	e026      	b.n	800323a <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	3b50      	subs	r3, #80	; 0x50
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 f82b 	bl	8003250 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80031fa:	2100      	movs	r1, #0
 80031fc:	2000      	movs	r0, #0
 80031fe:	f000 f827 	bl	8003250 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8003202:	2100      	movs	r1, #0
 8003204:	2010      	movs	r0, #16
 8003206:	f000 f823 	bl	8003250 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800320a:	2300      	movs	r3, #0
 800320c:	71bb      	strb	r3, [r7, #6]
 800320e:	e00d      	b.n	800322c <OLED_Refresh_Gram+0x4c>
 8003210:	79ba      	ldrb	r2, [r7, #6]
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	490d      	ldr	r1, [pc, #52]	; (800324c <OLED_Refresh_Gram+0x6c>)
 8003216:	00d2      	lsls	r2, r2, #3
 8003218:	440a      	add	r2, r1
 800321a:	4413      	add	r3, r2
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f815 	bl	8003250 <OLED_WR_Byte>
 8003226:	79bb      	ldrb	r3, [r7, #6]
 8003228:	3301      	adds	r3, #1
 800322a:	71bb      	strb	r3, [r7, #6]
 800322c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003230:	2b00      	cmp	r3, #0
 8003232:	daed      	bge.n	8003210 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	3301      	adds	r3, #1
 8003238:	71fb      	strb	r3, [r7, #7]
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	2b07      	cmp	r3, #7
 800323e:	d9d5      	bls.n	80031ec <OLED_Refresh_Gram+0xc>
	}   
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000544 	.word	0x20000544

08003250 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	460a      	mov	r2, r1
 800325a:	71fb      	strb	r3, [r7, #7]
 800325c:	4613      	mov	r3, r2
 800325e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8003260:	79bb      	ldrb	r3, [r7, #6]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d006      	beq.n	8003274 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8003266:	2201      	movs	r2, #1
 8003268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800326c:	481c      	ldr	r0, [pc, #112]	; (80032e0 <OLED_WR_Byte+0x90>)
 800326e:	f001 fa3d 	bl	80046ec <HAL_GPIO_WritePin>
 8003272:	e005      	b.n	8003280 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8003274:	2200      	movs	r2, #0
 8003276:	f44f 7180 	mov.w	r1, #256	; 0x100
 800327a:	4819      	ldr	r0, [pc, #100]	; (80032e0 <OLED_WR_Byte+0x90>)
 800327c:	f001 fa36 	bl	80046ec <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	e01e      	b.n	80032c4 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8003286:	2200      	movs	r2, #0
 8003288:	2120      	movs	r1, #32
 800328a:	4815      	ldr	r0, [pc, #84]	; (80032e0 <OLED_WR_Byte+0x90>)
 800328c:	f001 fa2e 	bl	80046ec <HAL_GPIO_WritePin>
		if(dat&0x80)
 8003290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003294:	2b00      	cmp	r3, #0
 8003296:	da05      	bge.n	80032a4 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8003298:	2201      	movs	r2, #1
 800329a:	2140      	movs	r1, #64	; 0x40
 800329c:	4810      	ldr	r0, [pc, #64]	; (80032e0 <OLED_WR_Byte+0x90>)
 800329e:	f001 fa25 	bl	80046ec <HAL_GPIO_WritePin>
 80032a2:	e004      	b.n	80032ae <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80032a4:	2200      	movs	r2, #0
 80032a6:	2140      	movs	r1, #64	; 0x40
 80032a8:	480d      	ldr	r0, [pc, #52]	; (80032e0 <OLED_WR_Byte+0x90>)
 80032aa:	f001 fa1f 	bl	80046ec <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80032ae:	2201      	movs	r2, #1
 80032b0:	2120      	movs	r1, #32
 80032b2:	480b      	ldr	r0, [pc, #44]	; (80032e0 <OLED_WR_Byte+0x90>)
 80032b4:	f001 fa1a 	bl	80046ec <HAL_GPIO_WritePin>
		dat<<=1;   
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	3301      	adds	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b07      	cmp	r3, #7
 80032c8:	d9dd      	bls.n	8003286 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80032ca:	2201      	movs	r2, #1
 80032cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032d0:	4803      	ldr	r0, [pc, #12]	; (80032e0 <OLED_WR_Byte+0x90>)
 80032d2:	f001 fa0b 	bl	80046ec <HAL_GPIO_WritePin>
} 
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000

080032e4 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80032ea:	2300      	movs	r3, #0
 80032ec:	71fb      	strb	r3, [r7, #7]
 80032ee:	e014      	b.n	800331a <OLED_Clear+0x36>
 80032f0:	2300      	movs	r3, #0
 80032f2:	71bb      	strb	r3, [r7, #6]
 80032f4:	e00a      	b.n	800330c <OLED_Clear+0x28>
 80032f6:	79ba      	ldrb	r2, [r7, #6]
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	490c      	ldr	r1, [pc, #48]	; (800332c <OLED_Clear+0x48>)
 80032fc:	00d2      	lsls	r2, r2, #3
 80032fe:	440a      	add	r2, r1
 8003300:	4413      	add	r3, r2
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	79bb      	ldrb	r3, [r7, #6]
 8003308:	3301      	adds	r3, #1
 800330a:	71bb      	strb	r3, [r7, #6]
 800330c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003310:	2b00      	cmp	r3, #0
 8003312:	daf0      	bge.n	80032f6 <OLED_Clear+0x12>
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	3301      	adds	r3, #1
 8003318:	71fb      	strb	r3, [r7, #7]
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	2b07      	cmp	r3, #7
 800331e:	d9e7      	bls.n	80032f0 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8003320:	f7ff ff5e 	bl	80031e0 <OLED_Refresh_Gram>
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000544 	.word	0x20000544

08003330 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
 800333a:	460b      	mov	r3, r1
 800333c:	71bb      	strb	r3, [r7, #6]
 800333e:	4613      	mov	r3, r2
 8003340:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	2b00      	cmp	r3, #0
 800334c:	db41      	blt.n	80033d2 <OLED_DrawPoint+0xa2>
 800334e:	79bb      	ldrb	r3, [r7, #6]
 8003350:	2b3f      	cmp	r3, #63	; 0x3f
 8003352:	d83e      	bhi.n	80033d2 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003354:	79bb      	ldrb	r3, [r7, #6]
 8003356:	08db      	lsrs	r3, r3, #3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f1c3 0307 	rsb	r3, r3, #7
 800335e:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003360:	79bb      	ldrb	r3, [r7, #6]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8003368:	7b7b      	ldrb	r3, [r7, #13]
 800336a:	f1c3 0307 	rsb	r3, r3, #7
 800336e:	2201      	movs	r2, #1
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8003376:	797b      	ldrb	r3, [r7, #5]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d012      	beq.n	80033a2 <OLED_DrawPoint+0x72>
 800337c:	79fa      	ldrb	r2, [r7, #7]
 800337e:	7bbb      	ldrb	r3, [r7, #14]
 8003380:	4917      	ldr	r1, [pc, #92]	; (80033e0 <OLED_DrawPoint+0xb0>)
 8003382:	00d2      	lsls	r2, r2, #3
 8003384:	440a      	add	r2, r1
 8003386:	4413      	add	r3, r2
 8003388:	7818      	ldrb	r0, [r3, #0]
 800338a:	79fa      	ldrb	r2, [r7, #7]
 800338c:	7bbb      	ldrb	r3, [r7, #14]
 800338e:	7bf9      	ldrb	r1, [r7, #15]
 8003390:	4301      	orrs	r1, r0
 8003392:	b2c8      	uxtb	r0, r1
 8003394:	4912      	ldr	r1, [pc, #72]	; (80033e0 <OLED_DrawPoint+0xb0>)
 8003396:	00d2      	lsls	r2, r2, #3
 8003398:	440a      	add	r2, r1
 800339a:	4413      	add	r3, r2
 800339c:	4602      	mov	r2, r0
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e018      	b.n	80033d4 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80033a2:	79fa      	ldrb	r2, [r7, #7]
 80033a4:	7bbb      	ldrb	r3, [r7, #14]
 80033a6:	490e      	ldr	r1, [pc, #56]	; (80033e0 <OLED_DrawPoint+0xb0>)
 80033a8:	00d2      	lsls	r2, r2, #3
 80033aa:	440a      	add	r2, r1
 80033ac:	4413      	add	r3, r2
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	b25a      	sxtb	r2, r3
 80033b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	b25b      	sxtb	r3, r3
 80033ba:	4013      	ands	r3, r2
 80033bc:	b259      	sxtb	r1, r3
 80033be:	79fa      	ldrb	r2, [r7, #7]
 80033c0:	7bbb      	ldrb	r3, [r7, #14]
 80033c2:	b2c8      	uxtb	r0, r1
 80033c4:	4906      	ldr	r1, [pc, #24]	; (80033e0 <OLED_DrawPoint+0xb0>)
 80033c6:	00d2      	lsls	r2, r2, #3
 80033c8:	440a      	add	r2, r1
 80033ca:	4413      	add	r3, r2
 80033cc:	4602      	mov	r2, r0
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e000      	b.n	80033d4 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80033d2:	bf00      	nop
}
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000544 	.word	0x20000544

080033e4 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4604      	mov	r4, r0
 80033ec:	4608      	mov	r0, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	461a      	mov	r2, r3
 80033f2:	4623      	mov	r3, r4
 80033f4:	71fb      	strb	r3, [r7, #7]
 80033f6:	4603      	mov	r3, r0
 80033f8:	71bb      	strb	r3, [r7, #6]
 80033fa:	460b      	mov	r3, r1
 80033fc:	717b      	strb	r3, [r7, #5]
 80033fe:	4613      	mov	r3, r2
 8003400:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8003402:	79bb      	ldrb	r3, [r7, #6]
 8003404:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8003406:	797b      	ldrb	r3, [r7, #5]
 8003408:	3b20      	subs	r3, #32
 800340a:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800340c:	2300      	movs	r3, #0
 800340e:	73bb      	strb	r3, [r7, #14]
 8003410:	e04d      	b.n	80034ae <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8003412:	793b      	ldrb	r3, [r7, #4]
 8003414:	2b0c      	cmp	r3, #12
 8003416:	d10b      	bne.n	8003430 <OLED_ShowChar+0x4c>
 8003418:	797a      	ldrb	r2, [r7, #5]
 800341a:	7bb9      	ldrb	r1, [r7, #14]
 800341c:	4828      	ldr	r0, [pc, #160]	; (80034c0 <OLED_ShowChar+0xdc>)
 800341e:	4613      	mov	r3, r2
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4403      	add	r3, r0
 8003428:	440b      	add	r3, r1
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	73fb      	strb	r3, [r7, #15]
 800342e:	e007      	b.n	8003440 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8003430:	797a      	ldrb	r2, [r7, #5]
 8003432:	7bbb      	ldrb	r3, [r7, #14]
 8003434:	4923      	ldr	r1, [pc, #140]	; (80034c4 <OLED_ShowChar+0xe0>)
 8003436:	0112      	lsls	r2, r2, #4
 8003438:	440a      	add	r2, r1
 800343a:	4413      	add	r3, r2
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8003440:	2300      	movs	r3, #0
 8003442:	737b      	strb	r3, [r7, #13]
 8003444:	e02d      	b.n	80034a2 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8003446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	da07      	bge.n	800345e <OLED_ShowChar+0x7a>
 800344e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003452:	79b9      	ldrb	r1, [r7, #6]
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff6a 	bl	8003330 <OLED_DrawPoint>
 800345c:	e00c      	b.n	8003478 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800345e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	79b9      	ldrb	r1, [r7, #6]
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ff5c 	bl	8003330 <OLED_DrawPoint>
			temp<<=1;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
			y++;
 800347e:	79bb      	ldrb	r3, [r7, #6]
 8003480:	3301      	adds	r3, #1
 8003482:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003484:	79ba      	ldrb	r2, [r7, #6]
 8003486:	7b3b      	ldrb	r3, [r7, #12]
 8003488:	1ad2      	subs	r2, r2, r3
 800348a:	793b      	ldrb	r3, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	d105      	bne.n	800349c <OLED_ShowChar+0xb8>
			{
				y=y0;
 8003490:	7b3b      	ldrb	r3, [r7, #12]
 8003492:	71bb      	strb	r3, [r7, #6]
				x++;
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	3301      	adds	r3, #1
 8003498:	71fb      	strb	r3, [r7, #7]
				break;
 800349a:	e005      	b.n	80034a8 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800349c:	7b7b      	ldrb	r3, [r7, #13]
 800349e:	3301      	adds	r3, #1
 80034a0:	737b      	strb	r3, [r7, #13]
 80034a2:	7b7b      	ldrb	r3, [r7, #13]
 80034a4:	2b07      	cmp	r3, #7
 80034a6:	d9ce      	bls.n	8003446 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80034a8:	7bbb      	ldrb	r3, [r7, #14]
 80034aa:	3301      	adds	r3, #1
 80034ac:	73bb      	strb	r3, [r7, #14]
 80034ae:	7bba      	ldrb	r2, [r7, #14]
 80034b0:	793b      	ldrb	r3, [r7, #4]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d3ad      	bcc.n	8003412 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd90      	pop	{r4, r7, pc}
 80034c0:	0800f4b0 	.word	0x0800f4b0
 80034c4:	0800f924 	.word	0x0800f924

080034c8 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	4603      	mov	r3, r0
 80034d0:	603a      	str	r2, [r7, #0]
 80034d2:	71fb      	strb	r3, [r7, #7]
 80034d4:	460b      	mov	r3, r1
 80034d6:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80034d8:	e01f      	b.n	800351a <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	2b7a      	cmp	r3, #122	; 0x7a
 80034de:	d904      	bls.n	80034ea <OLED_ShowString+0x22>
 80034e0:	2300      	movs	r3, #0
 80034e2:	71fb      	strb	r3, [r7, #7]
 80034e4:	79bb      	ldrb	r3, [r7, #6]
 80034e6:	3310      	adds	r3, #16
 80034e8:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80034ea:	79bb      	ldrb	r3, [r7, #6]
 80034ec:	2b3a      	cmp	r3, #58	; 0x3a
 80034ee:	d905      	bls.n	80034fc <OLED_ShowString+0x34>
 80034f0:	2300      	movs	r3, #0
 80034f2:	71fb      	strb	r3, [r7, #7]
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	71bb      	strb	r3, [r7, #6]
 80034f8:	f7ff fef4 	bl	80032e4 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	781a      	ldrb	r2, [r3, #0]
 8003500:	79b9      	ldrb	r1, [r7, #6]
 8003502:	79f8      	ldrb	r0, [r7, #7]
 8003504:	2301      	movs	r3, #1
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	230c      	movs	r3, #12
 800350a:	f7ff ff6b 	bl	80033e4 <OLED_ShowChar>
        x+=8;
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	3308      	adds	r3, #8
 8003512:	71fb      	strb	r3, [r7, #7]
        p++;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1db      	bne.n	80034da <OLED_ShowString+0x12>
    }  
}	 
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <OLED_Init>:

void OLED_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8003530:	f002 f88c 	bl	800564c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8003534:	4b41      	ldr	r3, [pc, #260]	; (800363c <OLED_Init+0x110>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a40      	ldr	r2, [pc, #256]	; (800363c <OLED_Init+0x110>)
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
 8003540:	4b3e      	ldr	r3, [pc, #248]	; (800363c <OLED_Init+0x110>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a3d      	ldr	r2, [pc, #244]	; (800363c <OLED_Init+0x110>)
 8003546:	f023 0304 	bic.w	r3, r3, #4
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800354c:	f002 f892 	bl	8005674 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8003550:	2200      	movs	r2, #0
 8003552:	2180      	movs	r1, #128	; 0x80
 8003554:	483a      	ldr	r0, [pc, #232]	; (8003640 <OLED_Init+0x114>)
 8003556:	f001 f8c9 	bl	80046ec <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800355a:	2064      	movs	r0, #100	; 0x64
 800355c:	f000 fd62 	bl	8004024 <HAL_Delay>
	OLED_RST_Set();
 8003560:	2201      	movs	r2, #1
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	4836      	ldr	r0, [pc, #216]	; (8003640 <OLED_Init+0x114>)
 8003566:	f001 f8c1 	bl	80046ec <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800356a:	2100      	movs	r1, #0
 800356c:	20ae      	movs	r0, #174	; 0xae
 800356e:	f7ff fe6f 	bl	8003250 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8003572:	2100      	movs	r1, #0
 8003574:	20d5      	movs	r0, #213	; 0xd5
 8003576:	f7ff fe6b 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800357a:	2100      	movs	r1, #0
 800357c:	2050      	movs	r0, #80	; 0x50
 800357e:	f7ff fe67 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8003582:	2100      	movs	r1, #0
 8003584:	20a8      	movs	r0, #168	; 0xa8
 8003586:	f7ff fe63 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800358a:	2100      	movs	r1, #0
 800358c:	203f      	movs	r0, #63	; 0x3f
 800358e:	f7ff fe5f 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8003592:	2100      	movs	r1, #0
 8003594:	20d3      	movs	r0, #211	; 0xd3
 8003596:	f7ff fe5b 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800359a:	2100      	movs	r1, #0
 800359c:	2000      	movs	r0, #0
 800359e:	f7ff fe57 	bl	8003250 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80035a2:	2100      	movs	r1, #0
 80035a4:	2040      	movs	r0, #64	; 0x40
 80035a6:	f7ff fe53 	bl	8003250 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80035aa:	2100      	movs	r1, #0
 80035ac:	208d      	movs	r0, #141	; 0x8d
 80035ae:	f7ff fe4f 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80035b2:	2100      	movs	r1, #0
 80035b4:	2014      	movs	r0, #20
 80035b6:	f7ff fe4b 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80035ba:	2100      	movs	r1, #0
 80035bc:	2020      	movs	r0, #32
 80035be:	f7ff fe47 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80035c2:	2100      	movs	r1, #0
 80035c4:	2002      	movs	r0, #2
 80035c6:	f7ff fe43 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80035ca:	2100      	movs	r1, #0
 80035cc:	20a1      	movs	r0, #161	; 0xa1
 80035ce:	f7ff fe3f 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80035d2:	2100      	movs	r1, #0
 80035d4:	20c0      	movs	r0, #192	; 0xc0
 80035d6:	f7ff fe3b 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80035da:	2100      	movs	r1, #0
 80035dc:	20da      	movs	r0, #218	; 0xda
 80035de:	f7ff fe37 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80035e2:	2100      	movs	r1, #0
 80035e4:	2012      	movs	r0, #18
 80035e6:	f7ff fe33 	bl	8003250 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80035ea:	2100      	movs	r1, #0
 80035ec:	2081      	movs	r0, #129	; 0x81
 80035ee:	f7ff fe2f 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80035f2:	2100      	movs	r1, #0
 80035f4:	20ef      	movs	r0, #239	; 0xef
 80035f6:	f7ff fe2b 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80035fa:	2100      	movs	r1, #0
 80035fc:	20d9      	movs	r0, #217	; 0xd9
 80035fe:	f7ff fe27 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8003602:	2100      	movs	r1, #0
 8003604:	20f1      	movs	r0, #241	; 0xf1
 8003606:	f7ff fe23 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800360a:	2100      	movs	r1, #0
 800360c:	20db      	movs	r0, #219	; 0xdb
 800360e:	f7ff fe1f 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8003612:	2100      	movs	r1, #0
 8003614:	2030      	movs	r0, #48	; 0x30
 8003616:	f7ff fe1b 	bl	8003250 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800361a:	2100      	movs	r1, #0
 800361c:	20a4      	movs	r0, #164	; 0xa4
 800361e:	f7ff fe17 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8003622:	2100      	movs	r1, #0
 8003624:	20a6      	movs	r0, #166	; 0xa6
 8003626:	f7ff fe13 	bl	8003250 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800362a:	2100      	movs	r1, #0
 800362c:	20af      	movs	r0, #175	; 0xaf
 800362e:	f7ff fe0f 	bl	8003250 <OLED_WR_Byte>
	OLED_Clear(); 
 8003632:	f7ff fe57 	bl	80032e4 <OLED_Clear>
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800
 8003640:	40021000 	.word	0x40021000

08003644 <turnLeft>:
#include "cmsis_os.h"

uint8_t cur_direction; // 0 as left, 1 as straight, 2 as right
TIM_HandleTypeDef* htim1Ptr;

void turnLeft(){
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
	htim1Ptr->Instance->CCR4=962;
 8003648:	4b07      	ldr	r3, [pc, #28]	; (8003668 <turnLeft+0x24>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f240 32c2 	movw	r2, #962	; 0x3c2
 8003652:	641a      	str	r2, [r3, #64]	; 0x40
	cur_direction = LEFT;
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <turnLeft+0x28>)
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
	osDelay(700);
 800365a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800365e:	f005 f98d 	bl	800897c <osDelay>
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000948 	.word	0x20000948
 800366c:	20000944 	.word	0x20000944

08003670 <turnRight>:
void turnRight(){
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
	htim1Ptr->Instance->CCR4=2200;
 8003674:	4b07      	ldr	r3, [pc, #28]	; (8003694 <turnRight+0x24>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f640 0298 	movw	r2, #2200	; 0x898
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
	cur_direction = RIGHT;
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <turnRight+0x28>)
 8003682:	2202      	movs	r2, #2
 8003684:	701a      	strb	r2, [r3, #0]
	osDelay(700);
 8003686:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800368a:	f005 f977 	bl	800897c <osDelay>
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000948 	.word	0x20000948
 8003698:	20000944 	.word	0x20000944

0800369c <turnStraight>:
void turnStraight(){
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
	if(cur_direction == LEFT){
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <turnStraight+0x4c>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <turnStraight+0x22>
		htim1Ptr->Instance->CCR4=1548;
 80036a8:	4b10      	ldr	r3, [pc, #64]	; (80036ec <turnStraight+0x50>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f240 620c 	movw	r2, #1548	; 0x60c
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(700);
 80036b4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80036b8:	f005 f960 	bl	800897c <osDelay>
 80036bc:	e00d      	b.n	80036da <turnStraight+0x3e>
	}else if(cur_direction == RIGHT){
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <turnStraight+0x4c>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d10d      	bne.n	80036e2 <turnStraight+0x46>
		htim1Ptr->Instance->CCR4=1457;
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <turnStraight+0x50>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f240 52b1 	movw	r2, #1457	; 0x5b1
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(700);
 80036d2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80036d6:	f005 f951 	bl	800897c <osDelay>
	}else{
		return;
	}
	cur_direction = STRAIGHT;
 80036da:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <turnStraight+0x4c>)
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
 80036e0:	e000      	b.n	80036e4 <turnStraight+0x48>
		return;
 80036e2:	bf00      	nop
}
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000944 	.word	0x20000944
 80036ec:	20000948 	.word	0x20000948

080036f0 <turnServo>:
void turnServo(uint8_t target){
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
	if(target == LEFT){
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <turnServo+0x16>
		turnLeft();
 8003700:	f7ff ffa0 	bl	8003644 <turnLeft>
	}else if(target == STRAIGHT){
		turnStraight();
	}else{
		turnRight();
	}
}
 8003704:	e007      	b.n	8003716 <turnServo+0x26>
	}else if(target == STRAIGHT){
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d102      	bne.n	8003712 <turnServo+0x22>
		turnStraight();
 800370c:	f7ff ffc6 	bl	800369c <turnStraight>
}
 8003710:	e001      	b.n	8003716 <turnServo+0x26>
		turnRight();
 8003712:	f7ff ffad 	bl	8003670 <turnRight>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <servoInit>:
uint8_t getServoDir() {
	return cur_direction;
}
void servoInit(TIM_HandleTypeDef* htim){
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	htim1Ptr = htim;
 8003728:	4a15      	ldr	r2, [pc, #84]	; (8003780 <servoInit+0x60>)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 800372e:	210c      	movs	r1, #12
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f002 fcb3 	bl	800609c <HAL_TIM_PWM_Start>
	cur_direction = 1;
 8003736:	4b13      	ldr	r3, [pc, #76]	; (8003784 <servoInit+0x64>)
 8003738:	2201      	movs	r2, #1
 800373a:	701a      	strb	r2, [r3, #0]
	htim1Ptr->Instance->CCR4=2200;
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <servoInit+0x60>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f640 0298 	movw	r2, #2200	; 0x898
 8003746:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(700);
 8003748:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800374c:	f000 fc6a 	bl	8004024 <HAL_Delay>
	htim1Ptr->Instance->CCR4=1000;
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <servoInit+0x60>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800375a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(700);
 800375c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003760:	f000 fc60 	bl	8004024 <HAL_Delay>
	htim1Ptr->Instance->CCR4=1548;
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <servoInit+0x60>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f240 620c 	movw	r2, #1548	; 0x60c
 800376e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(700);
 8003770:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003774:	f000 fc56 	bl	8004024 <HAL_Delay>

}
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000948 	.word	0x20000948
 8003784:	20000944 	.word	0x20000944

08003788 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	4b12      	ldr	r3, [pc, #72]	; (80037dc <HAL_MspInit+0x54>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	4a11      	ldr	r2, [pc, #68]	; (80037dc <HAL_MspInit+0x54>)
 8003798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800379c:	6453      	str	r3, [r2, #68]	; 0x44
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <HAL_MspInit+0x54>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	603b      	str	r3, [r7, #0]
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_MspInit+0x54>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <HAL_MspInit+0x54>)
 80037b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <HAL_MspInit+0x54>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037c6:	2200      	movs	r2, #0
 80037c8:	210f      	movs	r1, #15
 80037ca:	f06f 0001 	mvn.w	r0, #1
 80037ce:	f000 fd28 	bl	8004222 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800

080037e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e8:	f107 0314 	add.w	r3, r7, #20
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	60da      	str	r2, [r3, #12]
 80037f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a19      	ldr	r2, [pc, #100]	; (8003864 <HAL_I2C_MspInit+0x84>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d12c      	bne.n	800385c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	4b18      	ldr	r3, [pc, #96]	; (8003868 <HAL_I2C_MspInit+0x88>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a17      	ldr	r2, [pc, #92]	; (8003868 <HAL_I2C_MspInit+0x88>)
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_I2C_MspInit+0x88>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 800381e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003824:	2312      	movs	r3, #18
 8003826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800382c:	2303      	movs	r3, #3
 800382e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003830:	2304      	movs	r3, #4
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003834:	f107 0314 	add.w	r3, r7, #20
 8003838:	4619      	mov	r1, r3
 800383a:	480c      	ldr	r0, [pc, #48]	; (800386c <HAL_I2C_MspInit+0x8c>)
 800383c:	f000 fdba 	bl	80043b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <HAL_I2C_MspInit+0x88>)
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	4a07      	ldr	r2, [pc, #28]	; (8003868 <HAL_I2C_MspInit+0x88>)
 800384a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800384e:	6413      	str	r3, [r2, #64]	; 0x40
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_I2C_MspInit+0x88>)
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800385c:	bf00      	nop
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40005400 	.word	0x40005400
 8003868:	40023800 	.word	0x40023800
 800386c:	40020400 	.word	0x40020400

08003870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08c      	sub	sp, #48	; 0x30
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003878:	f107 031c 	add.w	r3, r7, #28
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a40      	ldr	r2, [pc, #256]	; (8003990 <HAL_TIM_Base_MspInit+0x120>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d135      	bne.n	80038fe <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	4b3f      	ldr	r3, [pc, #252]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	4a3e      	ldr	r2, [pc, #248]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6453      	str	r3, [r2, #68]	; 0x44
 80038a2:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	4b38      	ldr	r3, [pc, #224]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a37      	ldr	r2, [pc, #220]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 80038b8:	f043 0310 	orr.w	r3, r3, #16
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b35      	ldr	r3, [pc, #212]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = US_ECHO_Pin;
 80038ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d0:	2302      	movs	r3, #2
 80038d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d8:	2300      	movs	r3, #0
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038dc:	2301      	movs	r3, #1
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(US_ECHO_GPIO_Port, &GPIO_InitStruct);
 80038e0:	f107 031c 	add.w	r3, r7, #28
 80038e4:	4619      	mov	r1, r3
 80038e6:	482c      	ldr	r0, [pc, #176]	; (8003998 <HAL_TIM_Base_MspInit+0x128>)
 80038e8:	f000 fd64 	bl	80043b4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80038ec:	2200      	movs	r2, #0
 80038ee:	2105      	movs	r1, #5
 80038f0:	201b      	movs	r0, #27
 80038f2:	f000 fc96 	bl	8004222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80038f6:	201b      	movs	r0, #27
 80038f8:	f000 fcaf 	bl	800425a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80038fc:	e044      	b.n	8003988 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM6)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a26      	ldr	r2, [pc, #152]	; (800399c <HAL_TIM_Base_MspInit+0x12c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d10e      	bne.n	8003926 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003908:	2300      	movs	r3, #0
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	4b21      	ldr	r3, [pc, #132]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	4a20      	ldr	r2, [pc, #128]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 8003912:	f043 0310 	orr.w	r3, r3, #16
 8003916:	6413      	str	r3, [r2, #64]	; 0x40
 8003918:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	693b      	ldr	r3, [r7, #16]
}
 8003924:	e030      	b.n	8003988 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM8)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <HAL_TIM_Base_MspInit+0x130>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d12b      	bne.n	8003988 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	4b17      	ldr	r3, [pc, #92]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	4a16      	ldr	r2, [pc, #88]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 800393a:	f043 0302 	orr.w	r3, r3, #2
 800393e:	6453      	str	r3, [r2, #68]	; 0x44
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800394c:	2300      	movs	r3, #0
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	4b10      	ldr	r3, [pc, #64]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	4a0f      	ldr	r2, [pc, #60]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 8003956:	f043 0304 	orr.w	r3, r3, #4
 800395a:	6313      	str	r3, [r2, #48]	; 0x30
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <HAL_TIM_Base_MspInit+0x124>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003968:	23c0      	movs	r3, #192	; 0xc0
 800396a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396c:	2302      	movs	r3, #2
 800396e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003974:	2300      	movs	r3, #0
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003978:	2303      	movs	r3, #3
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800397c:	f107 031c 	add.w	r3, r7, #28
 8003980:	4619      	mov	r1, r3
 8003982:	4808      	ldr	r0, [pc, #32]	; (80039a4 <HAL_TIM_Base_MspInit+0x134>)
 8003984:	f000 fd16 	bl	80043b4 <HAL_GPIO_Init>
}
 8003988:	bf00      	nop
 800398a:	3730      	adds	r7, #48	; 0x30
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40010000 	.word	0x40010000
 8003994:	40023800 	.word	0x40023800
 8003998:	40021000 	.word	0x40021000
 800399c:	40001000 	.word	0x40001000
 80039a0:	40010400 	.word	0x40010400
 80039a4:	40020800 	.word	0x40020800

080039a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08c      	sub	sp, #48	; 0x30
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b0:	f107 031c 	add.w	r3, r7, #28
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	609a      	str	r2, [r3, #8]
 80039bc:	60da      	str	r2, [r3, #12]
 80039be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c8:	d153      	bne.n	8003a72 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	4b47      	ldr	r3, [pc, #284]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	4a46      	ldr	r2, [pc, #280]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	6413      	str	r3, [r2, #64]	; 0x40
 80039da:	4b44      	ldr	r3, [pc, #272]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	4b40      	ldr	r3, [pc, #256]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	4a3f      	ldr	r2, [pc, #252]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	6313      	str	r3, [r2, #48]	; 0x30
 80039f6:	4b3d      	ldr	r3, [pc, #244]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	4b39      	ldr	r3, [pc, #228]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	4a38      	ldr	r2, [pc, #224]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	6313      	str	r3, [r2, #48]	; 0x30
 8003a12:	4b36      	ldr	r3, [pc, #216]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a24:	2302      	movs	r3, #2
 8003a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a30:	2301      	movs	r3, #1
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a34:	f107 031c 	add.w	r3, r7, #28
 8003a38:	4619      	mov	r1, r3
 8003a3a:	482d      	ldr	r0, [pc, #180]	; (8003af0 <HAL_TIM_Encoder_MspInit+0x148>)
 8003a3c:	f000 fcba 	bl	80043b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a40:	2308      	movs	r3, #8
 8003a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a44:	2302      	movs	r3, #2
 8003a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a50:	2301      	movs	r3, #1
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a54:	f107 031c 	add.w	r3, r7, #28
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4826      	ldr	r0, [pc, #152]	; (8003af4 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003a5c:	f000 fcaa 	bl	80043b4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003a60:	2200      	movs	r2, #0
 8003a62:	2105      	movs	r1, #5
 8003a64:	201c      	movs	r0, #28
 8003a66:	f000 fbdc 	bl	8004222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a6a:	201c      	movs	r0, #28
 8003a6c:	f000 fbf5 	bl	800425a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a70:	e038      	b.n	8003ae4 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM3)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a20      	ldr	r2, [pc, #128]	; (8003af8 <HAL_TIM_Encoder_MspInit+0x150>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d133      	bne.n	8003ae4 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	4a19      	ldr	r2, [pc, #100]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 8003a86:	f043 0302 	orr.w	r3, r3, #2
 8003a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8c:	4b17      	ldr	r3, [pc, #92]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	4b13      	ldr	r3, [pc, #76]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	4a12      	ldr	r2, [pc, #72]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa8:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_TIM_Encoder_MspInit+0x144>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ab4:	23c0      	movs	r3, #192	; 0xc0
 8003ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac8:	f107 031c 	add.w	r3, r7, #28
 8003acc:	4619      	mov	r1, r3
 8003ace:	4808      	ldr	r0, [pc, #32]	; (8003af0 <HAL_TIM_Encoder_MspInit+0x148>)
 8003ad0:	f000 fc70 	bl	80043b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2105      	movs	r1, #5
 8003ad8:	201d      	movs	r0, #29
 8003ada:	f000 fba2 	bl	8004222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003ade:	201d      	movs	r0, #29
 8003ae0:	f000 fbbb 	bl	800425a <HAL_NVIC_EnableIRQ>
}
 8003ae4:	bf00      	nop
 8003ae6:	3730      	adds	r7, #48	; 0x30
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40020000 	.word	0x40020000
 8003af4:	40020400 	.word	0x40020400
 8003af8:	40000400 	.word	0x40000400

08003afc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b04:	f107 030c 	add.w	r3, r7, #12
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	60da      	str	r2, [r3, #12]
 8003b12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <HAL_TIM_MspPostInit+0x68>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d11e      	bne.n	8003b5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <HAL_TIM_MspPostInit+0x6c>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	4a10      	ldr	r2, [pc, #64]	; (8003b68 <HAL_TIM_MspPostInit+0x6c>)
 8003b28:	f043 0310 	orr.w	r3, r3, #16
 8003b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <HAL_TIM_MspPostInit+0x6c>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003b3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b40:	2302      	movs	r3, #2
 8003b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b50:	f107 030c 	add.w	r3, r7, #12
 8003b54:	4619      	mov	r1, r3
 8003b56:	4805      	ldr	r0, [pc, #20]	; (8003b6c <HAL_TIM_MspPostInit+0x70>)
 8003b58:	f000 fc2c 	bl	80043b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003b5c:	bf00      	nop
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40021000 	.word	0x40021000

08003b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	; 0x30
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b78:	f107 031c 	add.w	r3, r7, #28
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	60da      	str	r2, [r3, #12]
 8003b86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a3b      	ldr	r2, [pc, #236]	; (8003c7c <HAL_UART_MspInit+0x10c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d135      	bne.n	8003bfe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	4b3a      	ldr	r3, [pc, #232]	; (8003c80 <HAL_UART_MspInit+0x110>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	4a39      	ldr	r2, [pc, #228]	; (8003c80 <HAL_UART_MspInit+0x110>)
 8003b9c:	f043 0310 	orr.w	r3, r3, #16
 8003ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba2:	4b37      	ldr	r3, [pc, #220]	; (8003c80 <HAL_UART_MspInit+0x110>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	4b33      	ldr	r3, [pc, #204]	; (8003c80 <HAL_UART_MspInit+0x110>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	4a32      	ldr	r2, [pc, #200]	; (8003c80 <HAL_UART_MspInit+0x110>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bbe:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <HAL_UART_MspInit+0x110>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003bca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bdc:	2307      	movs	r3, #7
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be0:	f107 031c 	add.w	r3, r7, #28
 8003be4:	4619      	mov	r1, r3
 8003be6:	4827      	ldr	r0, [pc, #156]	; (8003c84 <HAL_UART_MspInit+0x114>)
 8003be8:	f000 fbe4 	bl	80043b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003bec:	2200      	movs	r2, #0
 8003bee:	2105      	movs	r1, #5
 8003bf0:	2025      	movs	r0, #37	; 0x25
 8003bf2:	f000 fb16 	bl	8004222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bf6:	2025      	movs	r0, #37	; 0x25
 8003bf8:	f000 fb2f 	bl	800425a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003bfc:	e039      	b.n	8003c72 <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a21      	ldr	r2, [pc, #132]	; (8003c88 <HAL_UART_MspInit+0x118>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d134      	bne.n	8003c72 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <HAL_UART_MspInit+0x110>)
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	4a1b      	ldr	r2, [pc, #108]	; (8003c80 <HAL_UART_MspInit+0x110>)
 8003c12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c16:	6413      	str	r3, [r2, #64]	; 0x40
 8003c18:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <HAL_UART_MspInit+0x110>)
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <HAL_UART_MspInit+0x110>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <HAL_UART_MspInit+0x110>)
 8003c2e:	f043 0304 	orr.w	r3, r3, #4
 8003c32:	6313      	str	r3, [r2, #48]	; 0x30
 8003c34:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <HAL_UART_MspInit+0x110>)
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c46:	2302      	movs	r3, #2
 8003c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c52:	2307      	movs	r3, #7
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c56:	f107 031c 	add.w	r3, r7, #28
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	480b      	ldr	r0, [pc, #44]	; (8003c8c <HAL_UART_MspInit+0x11c>)
 8003c5e:	f000 fba9 	bl	80043b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2105      	movs	r1, #5
 8003c66:	2027      	movs	r0, #39	; 0x27
 8003c68:	f000 fadb 	bl	8004222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c6c:	2027      	movs	r0, #39	; 0x27
 8003c6e:	f000 faf4 	bl	800425a <HAL_NVIC_EnableIRQ>
}
 8003c72:	bf00      	nop
 8003c74:	3730      	adds	r7, #48	; 0x30
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40011000 	.word	0x40011000
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40020000 	.word	0x40020000
 8003c88:	40004800 	.word	0x40004800
 8003c8c:	40020800 	.word	0x40020800

08003c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c94:	e7fe      	b.n	8003c94 <NMI_Handler+0x4>

08003c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c96:	b480      	push	{r7}
 8003c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c9a:	e7fe      	b.n	8003c9a <HardFault_Handler+0x4>

08003c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ca0:	e7fe      	b.n	8003ca0 <MemManage_Handler+0x4>

08003ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ca6:	e7fe      	b.n	8003ca6 <BusFault_Handler+0x4>

08003ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cac:	e7fe      	b.n	8003cac <UsageFault_Handler+0x4>

08003cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cb2:	bf00      	nop
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cc0:	f000 f990 	bl	8003fe4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003cc4:	f006 fbe2 	bl	800a48c <xTaskGetSchedulerState>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d001      	beq.n	8003cd2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003cce:	f007 f9cb 	bl	800b068 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cdc:	4802      	ldr	r0, [pc, #8]	; (8003ce8 <TIM1_CC_IRQHandler+0x10>)
 8003cde:	f002 fc52 	bl	8006586 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000274 	.word	0x20000274

08003cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cf0:	4802      	ldr	r0, [pc, #8]	; (8003cfc <TIM2_IRQHandler+0x10>)
 8003cf2:	f002 fc48 	bl	8006586 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cf6:	bf00      	nop
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	200002bc 	.word	0x200002bc

08003d00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d04:	4802      	ldr	r0, [pc, #8]	; (8003d10 <TIM3_IRQHandler+0x10>)
 8003d06:	f002 fc3e 	bl	8006586 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000304 	.word	0x20000304

08003d14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d18:	4802      	ldr	r0, [pc, #8]	; (8003d24 <USART1_IRQHandler+0x10>)
 8003d1a:	f003 fdb7 	bl	800788c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	200003dc 	.word	0x200003dc

08003d28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d2c:	4802      	ldr	r0, [pc, #8]	; (8003d38 <USART3_IRQHandler+0x10>)
 8003d2e:	f003 fdad 	bl	800788c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000420 	.word	0x20000420

08003d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return 1;
 8003d40:	2301      	movs	r3, #1
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <_kill>:

int _kill(int pid, int sig)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d56:	f008 f955 	bl	800c004 <__errno>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2216      	movs	r2, #22
 8003d5e:	601a      	str	r2, [r3, #0]
  return -1;
 8003d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <_exit>:

void _exit (int status)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ffe7 	bl	8003d4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d7e:	e7fe      	b.n	8003d7e <_exit+0x12>

08003d80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e00a      	b.n	8003da8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d92:	f3af 8000 	nop.w
 8003d96:	4601      	mov	r1, r0
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	60ba      	str	r2, [r7, #8]
 8003d9e:	b2ca      	uxtb	r2, r1
 8003da0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	3301      	adds	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	dbf0      	blt.n	8003d92 <_read+0x12>
  }

  return len;
 8003db0:	687b      	ldr	r3, [r7, #4]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	e009      	b.n	8003de0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	60ba      	str	r2, [r7, #8]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	dbf1      	blt.n	8003dcc <_write+0x12>
  }
  return len;
 8003de8:	687b      	ldr	r3, [r7, #4]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <_close>:

int _close(int file)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e1a:	605a      	str	r2, [r3, #4]
  return 0;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <_isatty>:

int _isatty(int file)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e32:	2301      	movs	r3, #1
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e64:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <_sbrk+0x5c>)
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <_sbrk+0x60>)
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e70:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <_sbrk+0x64>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e78:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <_sbrk+0x64>)
 8003e7a:	4a12      	ldr	r2, [pc, #72]	; (8003ec4 <_sbrk+0x68>)
 8003e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <_sbrk+0x64>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d207      	bcs.n	8003e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e8c:	f008 f8ba 	bl	800c004 <__errno>
 8003e90:	4603      	mov	r3, r0
 8003e92:	220c      	movs	r2, #12
 8003e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e9a:	e009      	b.n	8003eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e9c:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <_sbrk+0x64>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ea2:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <_sbrk+0x64>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	4a05      	ldr	r2, [pc, #20]	; (8003ec0 <_sbrk+0x64>)
 8003eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eae:	68fb      	ldr	r3, [r7, #12]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20020000 	.word	0x20020000
 8003ebc:	00000400 	.word	0x00000400
 8003ec0:	2000094c 	.word	0x2000094c
 8003ec4:	200053f0 	.word	0x200053f0

08003ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <SystemInit+0x20>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	4a05      	ldr	r2, [pc, #20]	; (8003ee8 <SystemInit+0x20>)
 8003ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ef0:	480d      	ldr	r0, [pc, #52]	; (8003f28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ef2:	490e      	ldr	r1, [pc, #56]	; (8003f2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ef4:	4a0e      	ldr	r2, [pc, #56]	; (8003f30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ef8:	e002      	b.n	8003f00 <LoopCopyDataInit>

08003efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003efe:	3304      	adds	r3, #4

08003f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f04:	d3f9      	bcc.n	8003efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f06:	4a0b      	ldr	r2, [pc, #44]	; (8003f34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f08:	4c0b      	ldr	r4, [pc, #44]	; (8003f38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f0c:	e001      	b.n	8003f12 <LoopFillZerobss>

08003f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f10:	3204      	adds	r2, #4

08003f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f14:	d3fb      	bcc.n	8003f0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f16:	f7ff ffd7 	bl	8003ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f1a:	f008 f879 	bl	800c010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f1e:	f7fd fbfd 	bl	800171c <main>
  bx  lr    
 8003f22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003f24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f2c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003f30:	08010488 	.word	0x08010488
  ldr r2, =_sbss
 8003f34:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003f38:	200053f0 	.word	0x200053f0

08003f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f3c:	e7fe      	b.n	8003f3c <ADC_IRQHandler>
	...

08003f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f44:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <HAL_Init+0x40>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a0d      	ldr	r2, [pc, #52]	; (8003f80 <HAL_Init+0x40>)
 8003f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_Init+0x40>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <HAL_Init+0x40>)
 8003f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f5c:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <HAL_Init+0x40>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a07      	ldr	r2, [pc, #28]	; (8003f80 <HAL_Init+0x40>)
 8003f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f68:	2003      	movs	r0, #3
 8003f6a:	f000 f94f 	bl	800420c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f6e:	200f      	movs	r0, #15
 8003f70:	f000 f808 	bl	8003f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f74:	f7ff fc08 	bl	8003788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023c00 	.word	0x40023c00

08003f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <HAL_InitTick+0x54>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <HAL_InitTick+0x58>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	4619      	mov	r1, r3
 8003f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 f967 	bl	8004276 <HAL_SYSTICK_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e00e      	b.n	8003fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b0f      	cmp	r3, #15
 8003fb6:	d80a      	bhi.n	8003fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fb8:	2200      	movs	r2, #0
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fc0:	f000 f92f 	bl	8004222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fc4:	4a06      	ldr	r2, [pc, #24]	; (8003fe0 <HAL_InitTick+0x5c>)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e000      	b.n	8003fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000004 	.word	0x20000004
 8003fdc:	2000000c 	.word	0x2000000c
 8003fe0:	20000008 	.word	0x20000008

08003fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <HAL_IncTick+0x20>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_IncTick+0x24>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	4a04      	ldr	r2, [pc, #16]	; (8004008 <HAL_IncTick+0x24>)
 8003ff6:	6013      	str	r3, [r2, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	2000000c 	.word	0x2000000c
 8004008:	20000950 	.word	0x20000950

0800400c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return uwTick;
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <HAL_GetTick+0x14>)
 8004012:	681b      	ldr	r3, [r3, #0]
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000950 	.word	0x20000950

08004024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800402c:	f7ff ffee 	bl	800400c <HAL_GetTick>
 8004030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800403c:	d005      	beq.n	800404a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <HAL_Delay+0x44>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800404a:	bf00      	nop
 800404c:	f7ff ffde 	bl	800400c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	429a      	cmp	r2, r3
 800405a:	d8f7      	bhi.n	800404c <HAL_Delay+0x28>
  {
  }
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	2000000c 	.word	0x2000000c

0800406c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800407c:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <__NVIC_SetPriorityGrouping+0x44>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004088:	4013      	ands	r3, r2
 800408a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800409c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800409e:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <__NVIC_SetPriorityGrouping+0x44>)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	60d3      	str	r3, [r2, #12]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040b8:	4b04      	ldr	r3, [pc, #16]	; (80040cc <__NVIC_GetPriorityGrouping+0x18>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	0a1b      	lsrs	r3, r3, #8
 80040be:	f003 0307 	and.w	r3, r3, #7
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	e000ed00 	.word	0xe000ed00

080040d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	db0b      	blt.n	80040fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	f003 021f 	and.w	r2, r3, #31
 80040e8:	4907      	ldr	r1, [pc, #28]	; (8004108 <__NVIC_EnableIRQ+0x38>)
 80040ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	2001      	movs	r0, #1
 80040f2:	fa00 f202 	lsl.w	r2, r0, r2
 80040f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	e000e100 	.word	0xe000e100

0800410c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	6039      	str	r1, [r7, #0]
 8004116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411c:	2b00      	cmp	r3, #0
 800411e:	db0a      	blt.n	8004136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	b2da      	uxtb	r2, r3
 8004124:	490c      	ldr	r1, [pc, #48]	; (8004158 <__NVIC_SetPriority+0x4c>)
 8004126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412a:	0112      	lsls	r2, r2, #4
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	440b      	add	r3, r1
 8004130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004134:	e00a      	b.n	800414c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	b2da      	uxtb	r2, r3
 800413a:	4908      	ldr	r1, [pc, #32]	; (800415c <__NVIC_SetPriority+0x50>)
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	3b04      	subs	r3, #4
 8004144:	0112      	lsls	r2, r2, #4
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	440b      	add	r3, r1
 800414a:	761a      	strb	r2, [r3, #24]
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	e000e100 	.word	0xe000e100
 800415c:	e000ed00 	.word	0xe000ed00

08004160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004160:	b480      	push	{r7}
 8004162:	b089      	sub	sp, #36	; 0x24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f1c3 0307 	rsb	r3, r3, #7
 800417a:	2b04      	cmp	r3, #4
 800417c:	bf28      	it	cs
 800417e:	2304      	movcs	r3, #4
 8004180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3304      	adds	r3, #4
 8004186:	2b06      	cmp	r3, #6
 8004188:	d902      	bls.n	8004190 <NVIC_EncodePriority+0x30>
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	3b03      	subs	r3, #3
 800418e:	e000      	b.n	8004192 <NVIC_EncodePriority+0x32>
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	43da      	mvns	r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	401a      	ands	r2, r3
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	fa01 f303 	lsl.w	r3, r1, r3
 80041b2:	43d9      	mvns	r1, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b8:	4313      	orrs	r3, r2
         );
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3724      	adds	r7, #36	; 0x24
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041d8:	d301      	bcc.n	80041de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041da:	2301      	movs	r3, #1
 80041dc:	e00f      	b.n	80041fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041de:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <SysTick_Config+0x40>)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041e6:	210f      	movs	r1, #15
 80041e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041ec:	f7ff ff8e 	bl	800410c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <SysTick_Config+0x40>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041f6:	4b04      	ldr	r3, [pc, #16]	; (8004208 <SysTick_Config+0x40>)
 80041f8:	2207      	movs	r2, #7
 80041fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	e000e010 	.word	0xe000e010

0800420c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff ff29 	bl	800406c <__NVIC_SetPriorityGrouping>
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004222:	b580      	push	{r7, lr}
 8004224:	b086      	sub	sp, #24
 8004226:	af00      	add	r7, sp, #0
 8004228:	4603      	mov	r3, r0
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
 800422e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004234:	f7ff ff3e 	bl	80040b4 <__NVIC_GetPriorityGrouping>
 8004238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	6978      	ldr	r0, [r7, #20]
 8004240:	f7ff ff8e 	bl	8004160 <NVIC_EncodePriority>
 8004244:	4602      	mov	r2, r0
 8004246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800424a:	4611      	mov	r1, r2
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff ff5d 	bl	800410c <__NVIC_SetPriority>
}
 8004252:	bf00      	nop
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	4603      	mov	r3, r0
 8004262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff ff31 	bl	80040d0 <__NVIC_EnableIRQ>
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff ffa2 	bl	80041c8 <SysTick_Config>
 8004284:	4603      	mov	r3, r0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800429c:	f7ff feb6 	bl	800400c <HAL_GetTick>
 80042a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d008      	beq.n	80042c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2280      	movs	r2, #128	; 0x80
 80042b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e052      	b.n	8004366 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0216 	bic.w	r2, r2, #22
 80042ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d103      	bne.n	80042f0 <HAL_DMA_Abort+0x62>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0208 	bic.w	r2, r2, #8
 80042fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004310:	e013      	b.n	800433a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004312:	f7ff fe7b 	bl	800400c <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b05      	cmp	r3, #5
 800431e:	d90c      	bls.n	800433a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2203      	movs	r2, #3
 800432a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e015      	b.n	8004366 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e4      	bne.n	8004312 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	223f      	movs	r2, #63	; 0x3f
 800434e:	409a      	lsls	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d004      	beq.n	800438c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2280      	movs	r2, #128	; 0x80
 8004386:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e00c      	b.n	80043a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2205      	movs	r2, #5
 8004390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0201 	bic.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b089      	sub	sp, #36	; 0x24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043be:	2300      	movs	r3, #0
 80043c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	e16b      	b.n	80046a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043d0:	2201      	movs	r2, #1
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4013      	ands	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	f040 815a 	bne.w	80046a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d005      	beq.n	8004406 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004402:	2b02      	cmp	r3, #2
 8004404:	d130      	bne.n	8004468 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	2203      	movs	r2, #3
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	43db      	mvns	r3, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4013      	ands	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4313      	orrs	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800443c:	2201      	movs	r2, #1
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	43db      	mvns	r3, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4013      	ands	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 0201 	and.w	r2, r3, #1
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b03      	cmp	r3, #3
 8004472:	d017      	beq.n	80044a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	2203      	movs	r2, #3
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d123      	bne.n	80044f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	08da      	lsrs	r2, r3, #3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3208      	adds	r2, #8
 80044b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	220f      	movs	r2, #15
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	08da      	lsrs	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3208      	adds	r2, #8
 80044f2:	69b9      	ldr	r1, [r7, #24]
 80044f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	2203      	movs	r2, #3
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4013      	ands	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 0203 	and.w	r2, r3, #3
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80b4 	beq.w	80046a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	4b60      	ldr	r3, [pc, #384]	; (80046c0 <HAL_GPIO_Init+0x30c>)
 8004540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004542:	4a5f      	ldr	r2, [pc, #380]	; (80046c0 <HAL_GPIO_Init+0x30c>)
 8004544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004548:	6453      	str	r3, [r2, #68]	; 0x44
 800454a:	4b5d      	ldr	r3, [pc, #372]	; (80046c0 <HAL_GPIO_Init+0x30c>)
 800454c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004556:	4a5b      	ldr	r2, [pc, #364]	; (80046c4 <HAL_GPIO_Init+0x310>)
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	089b      	lsrs	r3, r3, #2
 800455c:	3302      	adds	r3, #2
 800455e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	220f      	movs	r2, #15
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43db      	mvns	r3, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4013      	ands	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a52      	ldr	r2, [pc, #328]	; (80046c8 <HAL_GPIO_Init+0x314>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d02b      	beq.n	80045da <HAL_GPIO_Init+0x226>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a51      	ldr	r2, [pc, #324]	; (80046cc <HAL_GPIO_Init+0x318>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d025      	beq.n	80045d6 <HAL_GPIO_Init+0x222>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a50      	ldr	r2, [pc, #320]	; (80046d0 <HAL_GPIO_Init+0x31c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01f      	beq.n	80045d2 <HAL_GPIO_Init+0x21e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a4f      	ldr	r2, [pc, #316]	; (80046d4 <HAL_GPIO_Init+0x320>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d019      	beq.n	80045ce <HAL_GPIO_Init+0x21a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a4e      	ldr	r2, [pc, #312]	; (80046d8 <HAL_GPIO_Init+0x324>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <HAL_GPIO_Init+0x216>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a4d      	ldr	r2, [pc, #308]	; (80046dc <HAL_GPIO_Init+0x328>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00d      	beq.n	80045c6 <HAL_GPIO_Init+0x212>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a4c      	ldr	r2, [pc, #304]	; (80046e0 <HAL_GPIO_Init+0x32c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d007      	beq.n	80045c2 <HAL_GPIO_Init+0x20e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a4b      	ldr	r2, [pc, #300]	; (80046e4 <HAL_GPIO_Init+0x330>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d101      	bne.n	80045be <HAL_GPIO_Init+0x20a>
 80045ba:	2307      	movs	r3, #7
 80045bc:	e00e      	b.n	80045dc <HAL_GPIO_Init+0x228>
 80045be:	2308      	movs	r3, #8
 80045c0:	e00c      	b.n	80045dc <HAL_GPIO_Init+0x228>
 80045c2:	2306      	movs	r3, #6
 80045c4:	e00a      	b.n	80045dc <HAL_GPIO_Init+0x228>
 80045c6:	2305      	movs	r3, #5
 80045c8:	e008      	b.n	80045dc <HAL_GPIO_Init+0x228>
 80045ca:	2304      	movs	r3, #4
 80045cc:	e006      	b.n	80045dc <HAL_GPIO_Init+0x228>
 80045ce:	2303      	movs	r3, #3
 80045d0:	e004      	b.n	80045dc <HAL_GPIO_Init+0x228>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e002      	b.n	80045dc <HAL_GPIO_Init+0x228>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <HAL_GPIO_Init+0x228>
 80045da:	2300      	movs	r3, #0
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	f002 0203 	and.w	r2, r2, #3
 80045e2:	0092      	lsls	r2, r2, #2
 80045e4:	4093      	lsls	r3, r2
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045ec:	4935      	ldr	r1, [pc, #212]	; (80046c4 <HAL_GPIO_Init+0x310>)
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	089b      	lsrs	r3, r3, #2
 80045f2:	3302      	adds	r3, #2
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045fa:	4b3b      	ldr	r3, [pc, #236]	; (80046e8 <HAL_GPIO_Init+0x334>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	43db      	mvns	r3, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4013      	ands	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800461e:	4a32      	ldr	r2, [pc, #200]	; (80046e8 <HAL_GPIO_Init+0x334>)
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004624:	4b30      	ldr	r3, [pc, #192]	; (80046e8 <HAL_GPIO_Init+0x334>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	43db      	mvns	r3, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004648:	4a27      	ldr	r2, [pc, #156]	; (80046e8 <HAL_GPIO_Init+0x334>)
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800464e:	4b26      	ldr	r3, [pc, #152]	; (80046e8 <HAL_GPIO_Init+0x334>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004672:	4a1d      	ldr	r2, [pc, #116]	; (80046e8 <HAL_GPIO_Init+0x334>)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004678:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <HAL_GPIO_Init+0x334>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	43db      	mvns	r3, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4013      	ands	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800469c:	4a12      	ldr	r2, [pc, #72]	; (80046e8 <HAL_GPIO_Init+0x334>)
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	3301      	adds	r3, #1
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	2b0f      	cmp	r3, #15
 80046ac:	f67f ae90 	bls.w	80043d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	3724      	adds	r7, #36	; 0x24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40023800 	.word	0x40023800
 80046c4:	40013800 	.word	0x40013800
 80046c8:	40020000 	.word	0x40020000
 80046cc:	40020400 	.word	0x40020400
 80046d0:	40020800 	.word	0x40020800
 80046d4:	40020c00 	.word	0x40020c00
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40021400 	.word	0x40021400
 80046e0:	40021800 	.word	0x40021800
 80046e4:	40021c00 	.word	0x40021c00
 80046e8:	40013c00 	.word	0x40013c00

080046ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	807b      	strh	r3, [r7, #2]
 80046f8:	4613      	mov	r3, r2
 80046fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046fc:	787b      	ldrb	r3, [r7, #1]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004702:	887a      	ldrh	r2, [r7, #2]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004708:	e003      	b.n	8004712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800470a:	887b      	ldrh	r3, [r7, #2]
 800470c:	041a      	lsls	r2, r3, #16
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	619a      	str	r2, [r3, #24]
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
	...

08004720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e12b      	b.n	800498a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff f84a 	bl	80037e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2224      	movs	r2, #36	; 0x24
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0201 	bic.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004772:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004782:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004784:	f001 fbba 	bl	8005efc <HAL_RCC_GetPCLK1Freq>
 8004788:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4a81      	ldr	r2, [pc, #516]	; (8004994 <HAL_I2C_Init+0x274>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d807      	bhi.n	80047a4 <HAL_I2C_Init+0x84>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a80      	ldr	r2, [pc, #512]	; (8004998 <HAL_I2C_Init+0x278>)
 8004798:	4293      	cmp	r3, r2
 800479a:	bf94      	ite	ls
 800479c:	2301      	movls	r3, #1
 800479e:	2300      	movhi	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e006      	b.n	80047b2 <HAL_I2C_Init+0x92>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4a7d      	ldr	r2, [pc, #500]	; (800499c <HAL_I2C_Init+0x27c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	bf94      	ite	ls
 80047ac:	2301      	movls	r3, #1
 80047ae:	2300      	movhi	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e0e7      	b.n	800498a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4a78      	ldr	r2, [pc, #480]	; (80049a0 <HAL_I2C_Init+0x280>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	0c9b      	lsrs	r3, r3, #18
 80047c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a6a      	ldr	r2, [pc, #424]	; (8004994 <HAL_I2C_Init+0x274>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d802      	bhi.n	80047f4 <HAL_I2C_Init+0xd4>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3301      	adds	r3, #1
 80047f2:	e009      	b.n	8004808 <HAL_I2C_Init+0xe8>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	4a69      	ldr	r2, [pc, #420]	; (80049a4 <HAL_I2C_Init+0x284>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	099b      	lsrs	r3, r3, #6
 8004806:	3301      	adds	r3, #1
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	430b      	orrs	r3, r1
 800480e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800481a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	495c      	ldr	r1, [pc, #368]	; (8004994 <HAL_I2C_Init+0x274>)
 8004824:	428b      	cmp	r3, r1
 8004826:	d819      	bhi.n	800485c <HAL_I2C_Init+0x13c>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1e59      	subs	r1, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	fbb1 f3f3 	udiv	r3, r1, r3
 8004836:	1c59      	adds	r1, r3, #1
 8004838:	f640 73fc 	movw	r3, #4092	; 0xffc
 800483c:	400b      	ands	r3, r1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_I2C_Init+0x138>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1e59      	subs	r1, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004850:	3301      	adds	r3, #1
 8004852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004856:	e051      	b.n	80048fc <HAL_I2C_Init+0x1dc>
 8004858:	2304      	movs	r3, #4
 800485a:	e04f      	b.n	80048fc <HAL_I2C_Init+0x1dc>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d111      	bne.n	8004888 <HAL_I2C_Init+0x168>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	1e58      	subs	r0, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6859      	ldr	r1, [r3, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	440b      	add	r3, r1
 8004872:	fbb0 f3f3 	udiv	r3, r0, r3
 8004876:	3301      	adds	r3, #1
 8004878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e012      	b.n	80048ae <HAL_I2C_Init+0x18e>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1e58      	subs	r0, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	0099      	lsls	r1, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	fbb0 f3f3 	udiv	r3, r0, r3
 800489e:	3301      	adds	r3, #1
 80048a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_I2C_Init+0x196>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e022      	b.n	80048fc <HAL_I2C_Init+0x1dc>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10e      	bne.n	80048dc <HAL_I2C_Init+0x1bc>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1e58      	subs	r0, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6859      	ldr	r1, [r3, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	440b      	add	r3, r1
 80048cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d0:	3301      	adds	r3, #1
 80048d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048da:	e00f      	b.n	80048fc <HAL_I2C_Init+0x1dc>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1e58      	subs	r0, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6859      	ldr	r1, [r3, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	0099      	lsls	r1, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80048f2:	3301      	adds	r3, #1
 80048f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	6809      	ldr	r1, [r1, #0]
 8004900:	4313      	orrs	r3, r2
 8004902:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800492a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6911      	ldr	r1, [r2, #16]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68d2      	ldr	r2, [r2, #12]
 8004936:	4311      	orrs	r1, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	430b      	orrs	r3, r1
 800493e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	000186a0 	.word	0x000186a0
 8004998:	001e847f 	.word	0x001e847f
 800499c:	003d08ff 	.word	0x003d08ff
 80049a0:	431bde83 	.word	0x431bde83
 80049a4:	10624dd3 	.word	0x10624dd3

080049a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	461a      	mov	r2, r3
 80049b4:	460b      	mov	r3, r1
 80049b6:	817b      	strh	r3, [r7, #10]
 80049b8:	4613      	mov	r3, r2
 80049ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049bc:	f7ff fb26 	bl	800400c <HAL_GetTick>
 80049c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	f040 80e0 	bne.w	8004b90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	2319      	movs	r3, #25
 80049d6:	2201      	movs	r2, #1
 80049d8:	4970      	ldr	r1, [pc, #448]	; (8004b9c <HAL_I2C_Master_Transmit+0x1f4>)
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 fc58 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
 80049e8:	e0d3      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_I2C_Master_Transmit+0x50>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e0cc      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d007      	beq.n	8004a1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0201 	orr.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2221      	movs	r2, #33	; 0x21
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2210      	movs	r2, #16
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	893a      	ldrh	r2, [r7, #8]
 8004a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a50      	ldr	r2, [pc, #320]	; (8004ba0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004a5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a60:	8979      	ldrh	r1, [r7, #10]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	6a3a      	ldr	r2, [r7, #32]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 fac2 	bl	8004ff0 <I2C_MasterRequestWrite>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e08d      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a76:	2300      	movs	r3, #0
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a8c:	e066      	b.n	8004b5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	6a39      	ldr	r1, [r7, #32]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fcd2 	bl	800543c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00d      	beq.n	8004aba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d107      	bne.n	8004ab6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e06b      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	781a      	ldrb	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d11b      	bne.n	8004b30 <HAL_I2C_Master_Transmit+0x188>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d017      	beq.n	8004b30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	781a      	ldrb	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	6a39      	ldr	r1, [r7, #32]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fcc2 	bl	80054be <I2C_WaitOnBTFFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00d      	beq.n	8004b5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d107      	bne.n	8004b58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e01a      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d194      	bne.n	8004a8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e000      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b90:	2302      	movs	r3, #2
  }
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	00100002 	.word	0x00100002
 8004ba0:	ffff0000 	.word	0xffff0000

08004ba4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08c      	sub	sp, #48	; 0x30
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	817b      	strh	r3, [r7, #10]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bb8:	f7ff fa28 	bl	800400c <HAL_GetTick>
 8004bbc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	f040 820b 	bne.w	8004fe2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	2319      	movs	r3, #25
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	497c      	ldr	r1, [pc, #496]	; (8004dc8 <HAL_I2C_Master_Receive+0x224>)
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 fb5a 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004be2:	2302      	movs	r3, #2
 8004be4:	e1fe      	b.n	8004fe4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_I2C_Master_Receive+0x50>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e1f7      	b.n	8004fe4 <HAL_I2C_Master_Receive+0x440>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d007      	beq.n	8004c1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0201 	orr.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2222      	movs	r2, #34	; 0x22
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2210      	movs	r2, #16
 8004c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	893a      	ldrh	r2, [r7, #8]
 8004c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a5c      	ldr	r2, [pc, #368]	; (8004dcc <HAL_I2C_Master_Receive+0x228>)
 8004c5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c5c:	8979      	ldrh	r1, [r7, #10]
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 fa46 	bl	80050f4 <I2C_MasterRequestRead>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e1b8      	b.n	8004fe4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d113      	bne.n	8004ca2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	623b      	str	r3, [r7, #32]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	623b      	str	r3, [r7, #32]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	623b      	str	r3, [r7, #32]
 8004c8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	e18c      	b.n	8004fbc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d11b      	bne.n	8004ce2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	61fb      	str	r3, [r7, #28]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	e16c      	b.n	8004fbc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d11b      	bne.n	8004d22 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	e14c      	b.n	8004fbc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d48:	e138      	b.n	8004fbc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	f200 80f1 	bhi.w	8004f36 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d123      	bne.n	8004da4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fbed 	bl	8005540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e139      	b.n	8004fe4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004da2:	e10b      	b.n	8004fbc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d14e      	bne.n	8004e4a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	2200      	movs	r2, #0
 8004db4:	4906      	ldr	r1, [pc, #24]	; (8004dd0 <HAL_I2C_Master_Receive+0x22c>)
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fa6a 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d008      	beq.n	8004dd4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e10e      	b.n	8004fe4 <HAL_I2C_Master_Receive+0x440>
 8004dc6:	bf00      	nop
 8004dc8:	00100002 	.word	0x00100002
 8004dcc:	ffff0000 	.word	0xffff0000
 8004dd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e48:	e0b8      	b.n	8004fbc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e50:	2200      	movs	r2, #0
 8004e52:	4966      	ldr	r1, [pc, #408]	; (8004fec <HAL_I2C_Master_Receive+0x448>)
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 fa1b 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0bf      	b.n	8004fe4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	2200      	movs	r2, #0
 8004eae:	494f      	ldr	r1, [pc, #316]	; (8004fec <HAL_I2C_Master_Receive+0x448>)
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f9ed 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e091      	b.n	8004fe4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ece:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f34:	e042      	b.n	8004fbc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fb00 	bl	8005540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e04c      	b.n	8004fe4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d118      	bne.n	8004fbc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f47f aec2 	bne.w	8004d4a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e000      	b.n	8004fe4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
  }
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3728      	adds	r7, #40	; 0x28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	00010004 	.word	0x00010004

08004ff0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d006      	beq.n	800501a <I2C_MasterRequestWrite+0x2a>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d003      	beq.n	800501a <I2C_MasterRequestWrite+0x2a>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005018:	d108      	bne.n	800502c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	e00b      	b.n	8005044 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	2b12      	cmp	r3, #18
 8005032:	d107      	bne.n	8005044 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005042:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 f91d 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00d      	beq.n	8005078 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800506a:	d103      	bne.n	8005074 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005072:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e035      	b.n	80050e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005080:	d108      	bne.n	8005094 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005082:	897b      	ldrh	r3, [r7, #10]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	461a      	mov	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005090:	611a      	str	r2, [r3, #16]
 8005092:	e01b      	b.n	80050cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005094:	897b      	ldrh	r3, [r7, #10]
 8005096:	11db      	asrs	r3, r3, #7
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f003 0306 	and.w	r3, r3, #6
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f063 030f 	orn	r3, r3, #15
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	490e      	ldr	r1, [pc, #56]	; (80050ec <I2C_MasterRequestWrite+0xfc>)
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f943 	bl	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e010      	b.n	80050e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050c2:	897b      	ldrh	r3, [r7, #10]
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	4907      	ldr	r1, [pc, #28]	; (80050f0 <I2C_MasterRequestWrite+0x100>)
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f933 	bl	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	00010008 	.word	0x00010008
 80050f0:	00010002 	.word	0x00010002

080050f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	460b      	mov	r3, r1
 8005102:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005118:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b08      	cmp	r3, #8
 800511e:	d006      	beq.n	800512e <I2C_MasterRequestRead+0x3a>
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d003      	beq.n	800512e <I2C_MasterRequestRead+0x3a>
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800512c:	d108      	bne.n	8005140 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	e00b      	b.n	8005158 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	2b11      	cmp	r3, #17
 8005146:	d107      	bne.n	8005158 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005156:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f893 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00d      	beq.n	800518c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800517e:	d103      	bne.n	8005188 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005186:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e079      	b.n	8005280 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005194:	d108      	bne.n	80051a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005196:	897b      	ldrh	r3, [r7, #10]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	611a      	str	r2, [r3, #16]
 80051a6:	e05f      	b.n	8005268 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051a8:	897b      	ldrh	r3, [r7, #10]
 80051aa:	11db      	asrs	r3, r3, #7
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f003 0306 	and.w	r3, r3, #6
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f063 030f 	orn	r3, r3, #15
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	4930      	ldr	r1, [pc, #192]	; (8005288 <I2C_MasterRequestRead+0x194>)
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f8b9 	bl	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e054      	b.n	8005280 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051d6:	897b      	ldrh	r3, [r7, #10]
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4929      	ldr	r1, [pc, #164]	; (800528c <I2C_MasterRequestRead+0x198>)
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 f8a9 	bl	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e044      	b.n	8005280 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800521a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f831 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00d      	beq.n	8005250 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005242:	d103      	bne.n	800524c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800524a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e017      	b.n	8005280 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005250:	897b      	ldrh	r3, [r7, #10]
 8005252:	11db      	asrs	r3, r3, #7
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f003 0306 	and.w	r3, r3, #6
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f063 030e 	orn	r3, r3, #14
 8005260:	b2da      	uxtb	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	4907      	ldr	r1, [pc, #28]	; (800528c <I2C_MasterRequestRead+0x198>)
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f865 	bl	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	00010008 	.word	0x00010008
 800528c:	00010002 	.word	0x00010002

08005290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	4613      	mov	r3, r2
 800529e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052a0:	e025      	b.n	80052ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052a8:	d021      	beq.n	80052ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052aa:	f7fe feaf 	bl	800400c <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d302      	bcc.n	80052c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d116      	bne.n	80052ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f043 0220 	orr.w	r2, r3, #32
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e023      	b.n	8005336 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	0c1b      	lsrs	r3, r3, #16
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d10d      	bne.n	8005314 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	43da      	mvns	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4013      	ands	r3, r2
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	bf0c      	ite	eq
 800530a:	2301      	moveq	r3, #1
 800530c:	2300      	movne	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	e00c      	b.n	800532e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	43da      	mvns	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4013      	ands	r3, r2
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	bf0c      	ite	eq
 8005326:	2301      	moveq	r3, #1
 8005328:	2300      	movne	r3, #0
 800532a:	b2db      	uxtb	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	429a      	cmp	r2, r3
 8005332:	d0b6      	beq.n	80052a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
 800534a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800534c:	e051      	b.n	80053f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535c:	d123      	bne.n	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005376:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f043 0204 	orr.w	r2, r3, #4
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e046      	b.n	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ac:	d021      	beq.n	80053f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ae:	f7fe fe2d 	bl	800400c <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d302      	bcc.n	80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d116      	bne.n	80053f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f043 0220 	orr.w	r2, r3, #32
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e020      	b.n	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	0c1b      	lsrs	r3, r3, #16
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d10c      	bne.n	8005416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	43da      	mvns	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4013      	ands	r3, r2
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf14      	ite	ne
 800540e:	2301      	movne	r3, #1
 8005410:	2300      	moveq	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	e00b      	b.n	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	43da      	mvns	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4013      	ands	r3, r2
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf14      	ite	ne
 8005428:	2301      	movne	r3, #1
 800542a:	2300      	moveq	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d18d      	bne.n	800534e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005448:	e02d      	b.n	80054a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 f8ce 	bl	80055ec <I2C_IsAcknowledgeFailed>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e02d      	b.n	80054b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005460:	d021      	beq.n	80054a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005462:	f7fe fdd3 	bl	800400c <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d116      	bne.n	80054a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e007      	b.n	80054b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b0:	2b80      	cmp	r3, #128	; 0x80
 80054b2:	d1ca      	bne.n	800544a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054ca:	e02d      	b.n	8005528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f88d 	bl	80055ec <I2C_IsAcknowledgeFailed>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e02d      	b.n	8005538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e2:	d021      	beq.n	8005528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e4:	f7fe fd92 	bl	800400c <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d302      	bcc.n	80054fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d116      	bne.n	8005528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	f043 0220 	orr.w	r2, r3, #32
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e007      	b.n	8005538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b04      	cmp	r3, #4
 8005534:	d1ca      	bne.n	80054cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800554c:	e042      	b.n	80055d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b10      	cmp	r3, #16
 800555a:	d119      	bne.n	8005590 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0210 	mvn.w	r2, #16
 8005564:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e029      	b.n	80055e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005590:	f7fe fd3c 	bl	800400c <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	429a      	cmp	r2, r3
 800559e:	d302      	bcc.n	80055a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d116      	bne.n	80055d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	f043 0220 	orr.w	r2, r3, #32
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e007      	b.n	80055e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d1b5      	bne.n	800554e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005602:	d11b      	bne.n	800563c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800560c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	f043 0204 	orr.w	r2, r3, #4
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005652:	4b06      	ldr	r3, [pc, #24]	; (800566c <HAL_PWR_EnableBkUpAccess+0x20>)
 8005654:	2201      	movs	r2, #1
 8005656:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <HAL_PWR_EnableBkUpAccess+0x24>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800565e:	687b      	ldr	r3, [r7, #4]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	420e0020 	.word	0x420e0020
 8005670:	40007000 	.word	0x40007000

08005674 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800567a:	4b06      	ldr	r3, [pc, #24]	; (8005694 <HAL_PWR_DisableBkUpAccess+0x20>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005680:	4b05      	ldr	r3, [pc, #20]	; (8005698 <HAL_PWR_DisableBkUpAccess+0x24>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005686:	687b      	ldr	r3, [r7, #4]
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	420e0020 	.word	0x420e0020
 8005698:	40007000 	.word	0x40007000

0800569c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e267      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d075      	beq.n	80057a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ba:	4b88      	ldr	r3, [pc, #544]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 030c 	and.w	r3, r3, #12
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d00c      	beq.n	80056e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056c6:	4b85      	ldr	r3, [pc, #532]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d112      	bne.n	80056f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056d2:	4b82      	ldr	r3, [pc, #520]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056de:	d10b      	bne.n	80056f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e0:	4b7e      	ldr	r3, [pc, #504]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d05b      	beq.n	80057a4 <HAL_RCC_OscConfig+0x108>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d157      	bne.n	80057a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e242      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005700:	d106      	bne.n	8005710 <HAL_RCC_OscConfig+0x74>
 8005702:	4b76      	ldr	r3, [pc, #472]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a75      	ldr	r2, [pc, #468]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 8005708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e01d      	b.n	800574c <HAL_RCC_OscConfig+0xb0>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005718:	d10c      	bne.n	8005734 <HAL_RCC_OscConfig+0x98>
 800571a:	4b70      	ldr	r3, [pc, #448]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a6f      	ldr	r2, [pc, #444]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 8005720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	4b6d      	ldr	r3, [pc, #436]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a6c      	ldr	r2, [pc, #432]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 800572c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e00b      	b.n	800574c <HAL_RCC_OscConfig+0xb0>
 8005734:	4b69      	ldr	r3, [pc, #420]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a68      	ldr	r2, [pc, #416]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 800573a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	4b66      	ldr	r3, [pc, #408]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a65      	ldr	r2, [pc, #404]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 8005746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d013      	beq.n	800577c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005754:	f7fe fc5a 	bl	800400c <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800575c:	f7fe fc56 	bl	800400c <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b64      	cmp	r3, #100	; 0x64
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e207      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576e:	4b5b      	ldr	r3, [pc, #364]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f0      	beq.n	800575c <HAL_RCC_OscConfig+0xc0>
 800577a:	e014      	b.n	80057a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577c:	f7fe fc46 	bl	800400c <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005784:	f7fe fc42 	bl	800400c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	; 0x64
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e1f3      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005796:	4b51      	ldr	r3, [pc, #324]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0xe8>
 80057a2:	e000      	b.n	80057a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d063      	beq.n	800587a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057b2:	4b4a      	ldr	r3, [pc, #296]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 030c 	and.w	r3, r3, #12
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057be:	4b47      	ldr	r3, [pc, #284]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d11c      	bne.n	8005804 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ca:	4b44      	ldr	r3, [pc, #272]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d116      	bne.n	8005804 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057d6:	4b41      	ldr	r3, [pc, #260]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <HAL_RCC_OscConfig+0x152>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d001      	beq.n	80057ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e1c7      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ee:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4937      	ldr	r1, [pc, #220]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005802:	e03a      	b.n	800587a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d020      	beq.n	800584e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800580c:	4b34      	ldr	r3, [pc, #208]	; (80058e0 <HAL_RCC_OscConfig+0x244>)
 800580e:	2201      	movs	r2, #1
 8005810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005812:	f7fe fbfb 	bl	800400c <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800581a:	f7fe fbf7 	bl	800400c <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e1a8      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582c:	4b2b      	ldr	r3, [pc, #172]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005838:	4b28      	ldr	r3, [pc, #160]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4925      	ldr	r1, [pc, #148]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 8005848:	4313      	orrs	r3, r2
 800584a:	600b      	str	r3, [r1, #0]
 800584c:	e015      	b.n	800587a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800584e:	4b24      	ldr	r3, [pc, #144]	; (80058e0 <HAL_RCC_OscConfig+0x244>)
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005854:	f7fe fbda 	bl	800400c <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800585c:	f7fe fbd6 	bl	800400c <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e187      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800586e:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f0      	bne.n	800585c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d036      	beq.n	80058f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800588e:	4b15      	ldr	r3, [pc, #84]	; (80058e4 <HAL_RCC_OscConfig+0x248>)
 8005890:	2201      	movs	r2, #1
 8005892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005894:	f7fe fbba 	bl	800400c <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800589c:	f7fe fbb6 	bl	800400c <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e167      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ae:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <HAL_RCC_OscConfig+0x240>)
 80058b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0f0      	beq.n	800589c <HAL_RCC_OscConfig+0x200>
 80058ba:	e01b      	b.n	80058f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058bc:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <HAL_RCC_OscConfig+0x248>)
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058c2:	f7fe fba3 	bl	800400c <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058c8:	e00e      	b.n	80058e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058ca:	f7fe fb9f 	bl	800400c <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d907      	bls.n	80058e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e150      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
 80058dc:	40023800 	.word	0x40023800
 80058e0:	42470000 	.word	0x42470000
 80058e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e8:	4b88      	ldr	r3, [pc, #544]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 80058ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1ea      	bne.n	80058ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 8097 	beq.w	8005a30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005902:	2300      	movs	r3, #0
 8005904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005906:	4b81      	ldr	r3, [pc, #516]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10f      	bne.n	8005932 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005912:	2300      	movs	r3, #0
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	4b7d      	ldr	r3, [pc, #500]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	4a7c      	ldr	r2, [pc, #496]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 800591c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005920:	6413      	str	r3, [r2, #64]	; 0x40
 8005922:	4b7a      	ldr	r3, [pc, #488]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592a:	60bb      	str	r3, [r7, #8]
 800592c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800592e:	2301      	movs	r3, #1
 8005930:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005932:	4b77      	ldr	r3, [pc, #476]	; (8005b10 <HAL_RCC_OscConfig+0x474>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d118      	bne.n	8005970 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800593e:	4b74      	ldr	r3, [pc, #464]	; (8005b10 <HAL_RCC_OscConfig+0x474>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a73      	ldr	r2, [pc, #460]	; (8005b10 <HAL_RCC_OscConfig+0x474>)
 8005944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800594a:	f7fe fb5f 	bl	800400c <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005952:	f7fe fb5b 	bl	800400c <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e10c      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005964:	4b6a      	ldr	r3, [pc, #424]	; (8005b10 <HAL_RCC_OscConfig+0x474>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f0      	beq.n	8005952 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d106      	bne.n	8005986 <HAL_RCC_OscConfig+0x2ea>
 8005978:	4b64      	ldr	r3, [pc, #400]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 800597a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597c:	4a63      	ldr	r2, [pc, #396]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	6713      	str	r3, [r2, #112]	; 0x70
 8005984:	e01c      	b.n	80059c0 <HAL_RCC_OscConfig+0x324>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b05      	cmp	r3, #5
 800598c:	d10c      	bne.n	80059a8 <HAL_RCC_OscConfig+0x30c>
 800598e:	4b5f      	ldr	r3, [pc, #380]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 8005990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005992:	4a5e      	ldr	r2, [pc, #376]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 8005994:	f043 0304 	orr.w	r3, r3, #4
 8005998:	6713      	str	r3, [r2, #112]	; 0x70
 800599a:	4b5c      	ldr	r3, [pc, #368]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599e:	4a5b      	ldr	r2, [pc, #364]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 80059a0:	f043 0301 	orr.w	r3, r3, #1
 80059a4:	6713      	str	r3, [r2, #112]	; 0x70
 80059a6:	e00b      	b.n	80059c0 <HAL_RCC_OscConfig+0x324>
 80059a8:	4b58      	ldr	r3, [pc, #352]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 80059aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ac:	4a57      	ldr	r2, [pc, #348]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 80059ae:	f023 0301 	bic.w	r3, r3, #1
 80059b2:	6713      	str	r3, [r2, #112]	; 0x70
 80059b4:	4b55      	ldr	r3, [pc, #340]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 80059b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b8:	4a54      	ldr	r2, [pc, #336]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 80059ba:	f023 0304 	bic.w	r3, r3, #4
 80059be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d015      	beq.n	80059f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c8:	f7fe fb20 	bl	800400c <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ce:	e00a      	b.n	80059e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d0:	f7fe fb1c 	bl	800400c <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	f241 3288 	movw	r2, #5000	; 0x1388
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e0cb      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e6:	4b49      	ldr	r3, [pc, #292]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 80059e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0ee      	beq.n	80059d0 <HAL_RCC_OscConfig+0x334>
 80059f2:	e014      	b.n	8005a1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059f4:	f7fe fb0a 	bl	800400c <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059fa:	e00a      	b.n	8005a12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059fc:	f7fe fb06 	bl	800400c <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e0b5      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a12:	4b3e      	ldr	r3, [pc, #248]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 8005a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1ee      	bne.n	80059fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d105      	bne.n	8005a30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a24:	4b39      	ldr	r3, [pc, #228]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	4a38      	ldr	r2, [pc, #224]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 8005a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80a1 	beq.w	8005b7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a3a:	4b34      	ldr	r3, [pc, #208]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d05c      	beq.n	8005b00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d141      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a4e:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <HAL_RCC_OscConfig+0x478>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a54:	f7fe fada 	bl	800400c <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a5c:	f7fe fad6 	bl	800400c <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e087      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6e:	4b27      	ldr	r3, [pc, #156]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f0      	bne.n	8005a5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69da      	ldr	r2, [r3, #28]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	019b      	lsls	r3, r3, #6
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	3b01      	subs	r3, #1
 8005a94:	041b      	lsls	r3, r3, #16
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	061b      	lsls	r3, r3, #24
 8005a9e:	491b      	ldr	r1, [pc, #108]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aa4:	4b1b      	ldr	r3, [pc, #108]	; (8005b14 <HAL_RCC_OscConfig+0x478>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aaa:	f7fe faaf 	bl	800400c <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab2:	f7fe faab 	bl	800400c <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e05c      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac4:	4b11      	ldr	r3, [pc, #68]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0f0      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x416>
 8005ad0:	e054      	b.n	8005b7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad2:	4b10      	ldr	r3, [pc, #64]	; (8005b14 <HAL_RCC_OscConfig+0x478>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad8:	f7fe fa98 	bl	800400c <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae0:	f7fe fa94 	bl	800400c <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e045      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af2:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <HAL_RCC_OscConfig+0x470>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f0      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x444>
 8005afe:	e03d      	b.n	8005b7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d107      	bne.n	8005b18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e038      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	40007000 	.word	0x40007000
 8005b14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b18:	4b1b      	ldr	r3, [pc, #108]	; (8005b88 <HAL_RCC_OscConfig+0x4ec>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d028      	beq.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d121      	bne.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d11a      	bne.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b48:	4013      	ands	r3, r2
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d111      	bne.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5e:	085b      	lsrs	r3, r3, #1
 8005b60:	3b01      	subs	r3, #1
 8005b62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d107      	bne.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d001      	beq.n	8005b7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e000      	b.n	8005b7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40023800 	.word	0x40023800

08005b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0cc      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ba0:	4b68      	ldr	r3, [pc, #416]	; (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d90c      	bls.n	8005bc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bae:	4b65      	ldr	r3, [pc, #404]	; (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb6:	4b63      	ldr	r3, [pc, #396]	; (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d001      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0b8      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d020      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005be0:	4b59      	ldr	r3, [pc, #356]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	4a58      	ldr	r2, [pc, #352]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005be6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bf8:	4b53      	ldr	r3, [pc, #332]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	4a52      	ldr	r2, [pc, #328]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c04:	4b50      	ldr	r3, [pc, #320]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	494d      	ldr	r1, [pc, #308]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d044      	beq.n	8005cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d107      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2a:	4b47      	ldr	r3, [pc, #284]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d119      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e07f      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d003      	beq.n	8005c4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d107      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4a:	4b3f      	ldr	r3, [pc, #252]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e06f      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c5a:	4b3b      	ldr	r3, [pc, #236]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e067      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c6a:	4b37      	ldr	r3, [pc, #220]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f023 0203 	bic.w	r2, r3, #3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	4934      	ldr	r1, [pc, #208]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c7c:	f7fe f9c6 	bl	800400c <HAL_GetTick>
 8005c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c82:	e00a      	b.n	8005c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c84:	f7fe f9c2 	bl	800400c <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e04f      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9a:	4b2b      	ldr	r3, [pc, #172]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 020c 	and.w	r2, r3, #12
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d1eb      	bne.n	8005c84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cac:	4b25      	ldr	r3, [pc, #148]	; (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d20c      	bcs.n	8005cd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cba:	4b22      	ldr	r3, [pc, #136]	; (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc2:	4b20      	ldr	r3, [pc, #128]	; (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e032      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ce0:	4b19      	ldr	r3, [pc, #100]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4916      	ldr	r1, [pc, #88]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d009      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cfe:	4b12      	ldr	r3, [pc, #72]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	490e      	ldr	r1, [pc, #56]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d12:	f000 f821 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 8005d16:	4602      	mov	r2, r0
 8005d18:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	490a      	ldr	r1, [pc, #40]	; (8005d4c <HAL_RCC_ClockConfig+0x1c0>)
 8005d24:	5ccb      	ldrb	r3, [r1, r3]
 8005d26:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2a:	4a09      	ldr	r2, [pc, #36]	; (8005d50 <HAL_RCC_ClockConfig+0x1c4>)
 8005d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d2e:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <HAL_RCC_ClockConfig+0x1c8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe f926 	bl	8003f84 <HAL_InitTick>

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40023c00 	.word	0x40023c00
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	0800ff14 	.word	0x0800ff14
 8005d50:	20000004 	.word	0x20000004
 8005d54:	20000008 	.word	0x20000008

08005d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d5c:	b090      	sub	sp, #64	; 0x40
 8005d5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
 8005d64:	2300      	movs	r3, #0
 8005d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d68:	2300      	movs	r3, #0
 8005d6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d70:	4b59      	ldr	r3, [pc, #356]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f003 030c 	and.w	r3, r3, #12
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d00d      	beq.n	8005d98 <HAL_RCC_GetSysClockFreq+0x40>
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	f200 80a1 	bhi.w	8005ec4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <HAL_RCC_GetSysClockFreq+0x34>
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d003      	beq.n	8005d92 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d8a:	e09b      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d8c:	4b53      	ldr	r3, [pc, #332]	; (8005edc <HAL_RCC_GetSysClockFreq+0x184>)
 8005d8e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005d90:	e09b      	b.n	8005eca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d92:	4b53      	ldr	r3, [pc, #332]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d96:	e098      	b.n	8005eca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d98:	4b4f      	ldr	r3, [pc, #316]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005da0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005da2:	4b4d      	ldr	r3, [pc, #308]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d028      	beq.n	8005e00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dae:	4b4a      	ldr	r3, [pc, #296]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	099b      	lsrs	r3, r3, #6
 8005db4:	2200      	movs	r2, #0
 8005db6:	623b      	str	r3, [r7, #32]
 8005db8:	627a      	str	r2, [r7, #36]	; 0x24
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	4b47      	ldr	r3, [pc, #284]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005dc4:	fb03 f201 	mul.w	r2, r3, r1
 8005dc8:	2300      	movs	r3, #0
 8005dca:	fb00 f303 	mul.w	r3, r0, r3
 8005dce:	4413      	add	r3, r2
 8005dd0:	4a43      	ldr	r2, [pc, #268]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005dd2:	fba0 1202 	umull	r1, r2, r0, r2
 8005dd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dd8:	460a      	mov	r2, r1
 8005dda:	62ba      	str	r2, [r7, #40]	; 0x28
 8005ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dde:	4413      	add	r3, r2
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de4:	2200      	movs	r2, #0
 8005de6:	61bb      	str	r3, [r7, #24]
 8005de8:	61fa      	str	r2, [r7, #28]
 8005dea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005df2:	f7fa ff29 	bl	8000c48 <__aeabi_uldivmod>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dfe:	e053      	b.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e00:	4b35      	ldr	r3, [pc, #212]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	099b      	lsrs	r3, r3, #6
 8005e06:	2200      	movs	r2, #0
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	617a      	str	r2, [r7, #20]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005e12:	f04f 0b00 	mov.w	fp, #0
 8005e16:	4652      	mov	r2, sl
 8005e18:	465b      	mov	r3, fp
 8005e1a:	f04f 0000 	mov.w	r0, #0
 8005e1e:	f04f 0100 	mov.w	r1, #0
 8005e22:	0159      	lsls	r1, r3, #5
 8005e24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e28:	0150      	lsls	r0, r2, #5
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	ebb2 080a 	subs.w	r8, r2, sl
 8005e32:	eb63 090b 	sbc.w	r9, r3, fp
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	f04f 0300 	mov.w	r3, #0
 8005e3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005e42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005e46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005e4a:	ebb2 0408 	subs.w	r4, r2, r8
 8005e4e:	eb63 0509 	sbc.w	r5, r3, r9
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	00eb      	lsls	r3, r5, #3
 8005e5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e60:	00e2      	lsls	r2, r4, #3
 8005e62:	4614      	mov	r4, r2
 8005e64:	461d      	mov	r5, r3
 8005e66:	eb14 030a 	adds.w	r3, r4, sl
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	eb45 030b 	adc.w	r3, r5, fp
 8005e70:	607b      	str	r3, [r7, #4]
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e7e:	4629      	mov	r1, r5
 8005e80:	028b      	lsls	r3, r1, #10
 8005e82:	4621      	mov	r1, r4
 8005e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e88:	4621      	mov	r1, r4
 8005e8a:	028a      	lsls	r2, r1, #10
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e92:	2200      	movs	r2, #0
 8005e94:	60bb      	str	r3, [r7, #8]
 8005e96:	60fa      	str	r2, [r7, #12]
 8005e98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e9c:	f7fa fed4 	bl	8000c48 <__aeabi_uldivmod>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ea8:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	0c1b      	lsrs	r3, r3, #16
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005eb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ec2:	e002      	b.n	8005eca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <HAL_RCC_GetSysClockFreq+0x184>)
 8005ec6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3740      	adds	r7, #64	; 0x40
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ed6:	bf00      	nop
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	00f42400 	.word	0x00f42400
 8005ee0:	017d7840 	.word	0x017d7840

08005ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ee8:	4b03      	ldr	r3, [pc, #12]	; (8005ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005eea:	681b      	ldr	r3, [r3, #0]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	20000004 	.word	0x20000004

08005efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f00:	f7ff fff0 	bl	8005ee4 <HAL_RCC_GetHCLKFreq>
 8005f04:	4602      	mov	r2, r0
 8005f06:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	0a9b      	lsrs	r3, r3, #10
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	4903      	ldr	r1, [pc, #12]	; (8005f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f12:	5ccb      	ldrb	r3, [r1, r3]
 8005f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	0800ff24 	.word	0x0800ff24

08005f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f28:	f7ff ffdc 	bl	8005ee4 <HAL_RCC_GetHCLKFreq>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	0b5b      	lsrs	r3, r3, #13
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	4903      	ldr	r1, [pc, #12]	; (8005f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f3a:	5ccb      	ldrb	r3, [r1, r3]
 8005f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40023800 	.word	0x40023800
 8005f48:	0800ff24 	.word	0x0800ff24

08005f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e041      	b.n	8005fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fd fc7c 	bl	8003870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3304      	adds	r3, #4
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	f000 fe52 	bl	8006c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e041      	b.n	8006080 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d106      	bne.n	8006016 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f839 	bl	8006088 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	3304      	adds	r3, #4
 8006026:	4619      	mov	r1, r3
 8006028:	4610      	mov	r0, r2
 800602a:	f000 fe03 	bl	8006c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d109      	bne.n	80060c0 <HAL_TIM_PWM_Start+0x24>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	bf14      	ite	ne
 80060b8:	2301      	movne	r3, #1
 80060ba:	2300      	moveq	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	e022      	b.n	8006106 <HAL_TIM_PWM_Start+0x6a>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d109      	bne.n	80060da <HAL_TIM_PWM_Start+0x3e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	bf14      	ite	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	2300      	moveq	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	e015      	b.n	8006106 <HAL_TIM_PWM_Start+0x6a>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d109      	bne.n	80060f4 <HAL_TIM_PWM_Start+0x58>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	bf14      	ite	ne
 80060ec:	2301      	movne	r3, #1
 80060ee:	2300      	moveq	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	e008      	b.n	8006106 <HAL_TIM_PWM_Start+0x6a>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	bf14      	ite	ne
 8006100:	2301      	movne	r3, #1
 8006102:	2300      	moveq	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e07c      	b.n	8006208 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <HAL_TIM_PWM_Start+0x82>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800611c:	e013      	b.n	8006146 <HAL_TIM_PWM_Start+0xaa>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b04      	cmp	r3, #4
 8006122:	d104      	bne.n	800612e <HAL_TIM_PWM_Start+0x92>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800612c:	e00b      	b.n	8006146 <HAL_TIM_PWM_Start+0xaa>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b08      	cmp	r3, #8
 8006132:	d104      	bne.n	800613e <HAL_TIM_PWM_Start+0xa2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800613c:	e003      	b.n	8006146 <HAL_TIM_PWM_Start+0xaa>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2201      	movs	r2, #1
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f001 f984 	bl	800745c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a2d      	ldr	r2, [pc, #180]	; (8006210 <HAL_TIM_PWM_Start+0x174>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d004      	beq.n	8006168 <HAL_TIM_PWM_Start+0xcc>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a2c      	ldr	r2, [pc, #176]	; (8006214 <HAL_TIM_PWM_Start+0x178>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d101      	bne.n	800616c <HAL_TIM_PWM_Start+0xd0>
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <HAL_TIM_PWM_Start+0xd2>
 800616c:	2300      	movs	r3, #0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006180:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a22      	ldr	r2, [pc, #136]	; (8006210 <HAL_TIM_PWM_Start+0x174>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d022      	beq.n	80061d2 <HAL_TIM_PWM_Start+0x136>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006194:	d01d      	beq.n	80061d2 <HAL_TIM_PWM_Start+0x136>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1f      	ldr	r2, [pc, #124]	; (8006218 <HAL_TIM_PWM_Start+0x17c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d018      	beq.n	80061d2 <HAL_TIM_PWM_Start+0x136>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a1d      	ldr	r2, [pc, #116]	; (800621c <HAL_TIM_PWM_Start+0x180>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d013      	beq.n	80061d2 <HAL_TIM_PWM_Start+0x136>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a1c      	ldr	r2, [pc, #112]	; (8006220 <HAL_TIM_PWM_Start+0x184>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00e      	beq.n	80061d2 <HAL_TIM_PWM_Start+0x136>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a16      	ldr	r2, [pc, #88]	; (8006214 <HAL_TIM_PWM_Start+0x178>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d009      	beq.n	80061d2 <HAL_TIM_PWM_Start+0x136>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a18      	ldr	r2, [pc, #96]	; (8006224 <HAL_TIM_PWM_Start+0x188>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d004      	beq.n	80061d2 <HAL_TIM_PWM_Start+0x136>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a16      	ldr	r2, [pc, #88]	; (8006228 <HAL_TIM_PWM_Start+0x18c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d111      	bne.n	80061f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b06      	cmp	r3, #6
 80061e2:	d010      	beq.n	8006206 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0201 	orr.w	r2, r2, #1
 80061f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f4:	e007      	b.n	8006206 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0201 	orr.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	40010000 	.word	0x40010000
 8006214:	40010400 	.word	0x40010400
 8006218:	40000400 	.word	0x40000400
 800621c:	40000800 	.word	0x40000800
 8006220:	40000c00 	.word	0x40000c00
 8006224:	40014000 	.word	0x40014000
 8006228:	40001800 	.word	0x40001800

0800622c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e041      	b.n	80062c2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f839 	bl	80062ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3304      	adds	r3, #4
 8006268:	4619      	mov	r1, r3
 800626a:	4610      	mov	r0, r2
 800626c:	f000 fce2 	bl	8006c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b086      	sub	sp, #24
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e097      	b.n	8006422 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fd fb4e 	bl	80039a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006322:	f023 0307 	bic.w	r3, r3, #7
 8006326:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3304      	adds	r3, #4
 8006330:	4619      	mov	r1, r3
 8006332:	4610      	mov	r0, r2
 8006334:	f000 fc7e 	bl	8006c34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006360:	f023 0303 	bic.w	r3, r3, #3
 8006364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	021b      	lsls	r3, r3, #8
 8006370:	4313      	orrs	r3, r2
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800637e:	f023 030c 	bic.w	r3, r3, #12
 8006382:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800638a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800638e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	4313      	orrs	r3, r2
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	011a      	lsls	r2, r3, #4
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	031b      	lsls	r3, r3, #12
 80063ae:	4313      	orrs	r3, r2
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80063bc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80063c4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	011b      	lsls	r3, r3, #4
 80063d0:	4313      	orrs	r3, r2
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800643a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006442:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800644a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006452:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d110      	bne.n	800647c <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d102      	bne.n	8006466 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006460:	7b7b      	ldrb	r3, [r7, #13]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d001      	beq.n	800646a <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e089      	b.n	800657e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2202      	movs	r2, #2
 8006476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800647a:	e031      	b.n	80064e0 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2b04      	cmp	r3, #4
 8006480:	d110      	bne.n	80064a4 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006482:	7bbb      	ldrb	r3, [r7, #14]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d102      	bne.n	800648e <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006488:	7b3b      	ldrb	r3, [r7, #12]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d001      	beq.n	8006492 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e075      	b.n	800657e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2202      	movs	r2, #2
 8006496:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064a2:	e01d      	b.n	80064e0 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d108      	bne.n	80064bc <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064aa:	7bbb      	ldrb	r3, [r7, #14]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d105      	bne.n	80064bc <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064b0:	7b7b      	ldrb	r3, [r7, #13]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d102      	bne.n	80064bc <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064b6:	7b3b      	ldrb	r3, [r7, #12]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d001      	beq.n	80064c0 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e05e      	b.n	800657e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_TIM_Encoder_Start_IT+0xc4>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d010      	beq.n	800650e <HAL_TIM_Encoder_Start_IT+0xe4>
 80064ec:	e01f      	b.n	800652e <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2201      	movs	r2, #1
 80064f4:	2100      	movs	r1, #0
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 ffb0 	bl	800745c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0202 	orr.w	r2, r2, #2
 800650a:	60da      	str	r2, [r3, #12]
      break;
 800650c:	e02e      	b.n	800656c <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2201      	movs	r2, #1
 8006514:	2104      	movs	r1, #4
 8006516:	4618      	mov	r0, r3
 8006518:	f000 ffa0 	bl	800745c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0204 	orr.w	r2, r2, #4
 800652a:	60da      	str	r2, [r3, #12]
      break;
 800652c:	e01e      	b.n	800656c <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2201      	movs	r2, #1
 8006534:	2100      	movs	r1, #0
 8006536:	4618      	mov	r0, r3
 8006538:	f000 ff90 	bl	800745c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2201      	movs	r2, #1
 8006542:	2104      	movs	r1, #4
 8006544:	4618      	mov	r0, r3
 8006546:	f000 ff89 	bl	800745c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0202 	orr.w	r2, r2, #2
 8006558:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0204 	orr.w	r2, r2, #4
 8006568:	60da      	str	r2, [r3, #12]
      break;
 800656a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b02      	cmp	r3, #2
 800659a:	d122      	bne.n	80065e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d11b      	bne.n	80065e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f06f 0202 	mvn.w	r2, #2
 80065b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7fb fd1f 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 80065ce:	e005      	b.n	80065dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fb10 	bl	8006bf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fb17 	bl	8006c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d122      	bne.n	8006636 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d11b      	bne.n	8006636 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f06f 0204 	mvn.w	r2, #4
 8006606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7fb fcf5 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8006622:	e005      	b.n	8006630 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fae6 	bl	8006bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 faed 	bl	8006c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b08      	cmp	r3, #8
 8006642:	d122      	bne.n	800668a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b08      	cmp	r3, #8
 8006650:	d11b      	bne.n	800668a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f06f 0208 	mvn.w	r2, #8
 800665a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2204      	movs	r2, #4
 8006660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7fb fccb 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8006676:	e005      	b.n	8006684 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fabc 	bl	8006bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fac3 	bl	8006c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f003 0310 	and.w	r3, r3, #16
 8006694:	2b10      	cmp	r3, #16
 8006696:	d122      	bne.n	80066de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b10      	cmp	r3, #16
 80066a4:	d11b      	bne.n	80066de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f06f 0210 	mvn.w	r2, #16
 80066ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2208      	movs	r2, #8
 80066b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7fb fca1 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 80066ca:	e005      	b.n	80066d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fa92 	bl	8006bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa99 	bl	8006c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d10e      	bne.n	800670a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d107      	bne.n	800670a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f06f 0201 	mvn.w	r2, #1
 8006702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fa6c 	bl	8006be2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006714:	2b80      	cmp	r3, #128	; 0x80
 8006716:	d10e      	bne.n	8006736 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	d107      	bne.n	8006736 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800672e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 ff91 	bl	8007658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	d10e      	bne.n	8006762 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674e:	2b40      	cmp	r3, #64	; 0x40
 8006750:	d107      	bne.n	8006762 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800675a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fa5e 	bl	8006c1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b20      	cmp	r3, #32
 800676e:	d10e      	bne.n	800678e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b20      	cmp	r3, #32
 800677c:	d107      	bne.n	800678e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f06f 0220 	mvn.w	r2, #32
 8006786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 ff5b 	bl	8007644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b086      	sub	sp, #24
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e088      	b.n	80068c6 <HAL_TIM_IC_ConfigChannel+0x130>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d11b      	bne.n	80067fa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	6819      	ldr	r1, [r3, #0]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f000 fc7f 	bl	80070d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	699a      	ldr	r2, [r3, #24]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 020c 	bic.w	r2, r2, #12
 80067e4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6999      	ldr	r1, [r3, #24]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	619a      	str	r2, [r3, #24]
 80067f8:	e060      	b.n	80068bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d11c      	bne.n	800683a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	6819      	ldr	r1, [r3, #0]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f000 fd03 	bl	800721a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006822:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6999      	ldr	r1, [r3, #24]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	021a      	lsls	r2, r3, #8
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	619a      	str	r2, [r3, #24]
 8006838:	e040      	b.n	80068bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b08      	cmp	r3, #8
 800683e:	d11b      	bne.n	8006878 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	6819      	ldr	r1, [r3, #0]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f000 fd50 	bl	80072f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69da      	ldr	r2, [r3, #28]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 020c 	bic.w	r2, r2, #12
 8006862:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	69d9      	ldr	r1, [r3, #28]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	689a      	ldr	r2, [r3, #8]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	61da      	str	r2, [r3, #28]
 8006876:	e021      	b.n	80068bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b0c      	cmp	r3, #12
 800687c:	d11c      	bne.n	80068b8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6818      	ldr	r0, [r3, #0]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	6819      	ldr	r1, [r3, #0]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f000 fd6d 	bl	800736c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69da      	ldr	r2, [r3, #28]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068a0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69d9      	ldr	r1, [r3, #28]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	021a      	lsls	r2, r3, #8
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	61da      	str	r2, [r3, #28]
 80068b6:	e001      	b.n	80068bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e0ae      	b.n	8006a4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b0c      	cmp	r3, #12
 80068fa:	f200 809f 	bhi.w	8006a3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068fe:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	08006939 	.word	0x08006939
 8006908:	08006a3d 	.word	0x08006a3d
 800690c:	08006a3d 	.word	0x08006a3d
 8006910:	08006a3d 	.word	0x08006a3d
 8006914:	08006979 	.word	0x08006979
 8006918:	08006a3d 	.word	0x08006a3d
 800691c:	08006a3d 	.word	0x08006a3d
 8006920:	08006a3d 	.word	0x08006a3d
 8006924:	080069bb 	.word	0x080069bb
 8006928:	08006a3d 	.word	0x08006a3d
 800692c:	08006a3d 	.word	0x08006a3d
 8006930:	08006a3d 	.word	0x08006a3d
 8006934:	080069fb 	.word	0x080069fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fa18 	bl	8006d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699a      	ldr	r2, [r3, #24]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0208 	orr.w	r2, r2, #8
 8006952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0204 	bic.w	r2, r2, #4
 8006962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6999      	ldr	r1, [r3, #24]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	691a      	ldr	r2, [r3, #16]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	619a      	str	r2, [r3, #24]
      break;
 8006976:	e064      	b.n	8006a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fa68 	bl	8006e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699a      	ldr	r2, [r3, #24]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6999      	ldr	r1, [r3, #24]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	021a      	lsls	r2, r3, #8
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	619a      	str	r2, [r3, #24]
      break;
 80069b8:	e043      	b.n	8006a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fabd 	bl	8006f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f042 0208 	orr.w	r2, r2, #8
 80069d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69da      	ldr	r2, [r3, #28]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0204 	bic.w	r2, r2, #4
 80069e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69d9      	ldr	r1, [r3, #28]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	61da      	str	r2, [r3, #28]
      break;
 80069f8:	e023      	b.n	8006a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fb11 	bl	8007028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69da      	ldr	r2, [r3, #28]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69da      	ldr	r2, [r3, #28]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69d9      	ldr	r1, [r3, #28]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	021a      	lsls	r2, r3, #8
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	61da      	str	r2, [r3, #28]
      break;
 8006a3a:	e002      	b.n	8006a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_TIM_ConfigClockSource+0x1c>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e0b4      	b.n	8006bda <HAL_TIM_ConfigClockSource+0x186>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aa8:	d03e      	beq.n	8006b28 <HAL_TIM_ConfigClockSource+0xd4>
 8006aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aae:	f200 8087 	bhi.w	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab6:	f000 8086 	beq.w	8006bc6 <HAL_TIM_ConfigClockSource+0x172>
 8006aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006abe:	d87f      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac0:	2b70      	cmp	r3, #112	; 0x70
 8006ac2:	d01a      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0xa6>
 8006ac4:	2b70      	cmp	r3, #112	; 0x70
 8006ac6:	d87b      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac8:	2b60      	cmp	r3, #96	; 0x60
 8006aca:	d050      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0x11a>
 8006acc:	2b60      	cmp	r3, #96	; 0x60
 8006ace:	d877      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad0:	2b50      	cmp	r3, #80	; 0x50
 8006ad2:	d03c      	beq.n	8006b4e <HAL_TIM_ConfigClockSource+0xfa>
 8006ad4:	2b50      	cmp	r3, #80	; 0x50
 8006ad6:	d873      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad8:	2b40      	cmp	r3, #64	; 0x40
 8006ada:	d058      	beq.n	8006b8e <HAL_TIM_ConfigClockSource+0x13a>
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	d86f      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae0:	2b30      	cmp	r3, #48	; 0x30
 8006ae2:	d064      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x15a>
 8006ae4:	2b30      	cmp	r3, #48	; 0x30
 8006ae6:	d86b      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	d060      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x15a>
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	d867      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d05c      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x15a>
 8006af4:	2b10      	cmp	r3, #16
 8006af6:	d05a      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x15a>
 8006af8:	e062      	b.n	8006bc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6899      	ldr	r1, [r3, #8]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f000 fc87 	bl	800741c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	609a      	str	r2, [r3, #8]
      break;
 8006b26:	e04f      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	6899      	ldr	r1, [r3, #8]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f000 fc70 	bl	800741c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689a      	ldr	r2, [r3, #8]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b4a:	609a      	str	r2, [r3, #8]
      break;
 8006b4c:	e03c      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6818      	ldr	r0, [r3, #0]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	6859      	ldr	r1, [r3, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f000 fb2e 	bl	80071bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2150      	movs	r1, #80	; 0x50
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fc3d 	bl	80073e6 <TIM_ITRx_SetConfig>
      break;
 8006b6c:	e02c      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	6859      	ldr	r1, [r3, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f000 fb8a 	bl	8007294 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2160      	movs	r1, #96	; 0x60
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fc2d 	bl	80073e6 <TIM_ITRx_SetConfig>
      break;
 8006b8c:	e01c      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6818      	ldr	r0, [r3, #0]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	6859      	ldr	r1, [r3, #4]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f000 fb0e 	bl	80071bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2140      	movs	r1, #64	; 0x40
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 fc1d 	bl	80073e6 <TIM_ITRx_SetConfig>
      break;
 8006bac:	e00c      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f000 fc14 	bl	80073e6 <TIM_ITRx_SetConfig>
      break;
 8006bbe:	e003      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc4:	e000      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c12:	bf00      	nop
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
	...

08006c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a40      	ldr	r2, [pc, #256]	; (8006d48 <TIM_Base_SetConfig+0x114>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d013      	beq.n	8006c74 <TIM_Base_SetConfig+0x40>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c52:	d00f      	beq.n	8006c74 <TIM_Base_SetConfig+0x40>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a3d      	ldr	r2, [pc, #244]	; (8006d4c <TIM_Base_SetConfig+0x118>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d00b      	beq.n	8006c74 <TIM_Base_SetConfig+0x40>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a3c      	ldr	r2, [pc, #240]	; (8006d50 <TIM_Base_SetConfig+0x11c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d007      	beq.n	8006c74 <TIM_Base_SetConfig+0x40>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a3b      	ldr	r2, [pc, #236]	; (8006d54 <TIM_Base_SetConfig+0x120>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d003      	beq.n	8006c74 <TIM_Base_SetConfig+0x40>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a3a      	ldr	r2, [pc, #232]	; (8006d58 <TIM_Base_SetConfig+0x124>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d108      	bne.n	8006c86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a2f      	ldr	r2, [pc, #188]	; (8006d48 <TIM_Base_SetConfig+0x114>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d02b      	beq.n	8006ce6 <TIM_Base_SetConfig+0xb2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c94:	d027      	beq.n	8006ce6 <TIM_Base_SetConfig+0xb2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a2c      	ldr	r2, [pc, #176]	; (8006d4c <TIM_Base_SetConfig+0x118>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d023      	beq.n	8006ce6 <TIM_Base_SetConfig+0xb2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a2b      	ldr	r2, [pc, #172]	; (8006d50 <TIM_Base_SetConfig+0x11c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d01f      	beq.n	8006ce6 <TIM_Base_SetConfig+0xb2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a2a      	ldr	r2, [pc, #168]	; (8006d54 <TIM_Base_SetConfig+0x120>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d01b      	beq.n	8006ce6 <TIM_Base_SetConfig+0xb2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a29      	ldr	r2, [pc, #164]	; (8006d58 <TIM_Base_SetConfig+0x124>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d017      	beq.n	8006ce6 <TIM_Base_SetConfig+0xb2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a28      	ldr	r2, [pc, #160]	; (8006d5c <TIM_Base_SetConfig+0x128>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d013      	beq.n	8006ce6 <TIM_Base_SetConfig+0xb2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a27      	ldr	r2, [pc, #156]	; (8006d60 <TIM_Base_SetConfig+0x12c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00f      	beq.n	8006ce6 <TIM_Base_SetConfig+0xb2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a26      	ldr	r2, [pc, #152]	; (8006d64 <TIM_Base_SetConfig+0x130>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d00b      	beq.n	8006ce6 <TIM_Base_SetConfig+0xb2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a25      	ldr	r2, [pc, #148]	; (8006d68 <TIM_Base_SetConfig+0x134>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d007      	beq.n	8006ce6 <TIM_Base_SetConfig+0xb2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a24      	ldr	r2, [pc, #144]	; (8006d6c <TIM_Base_SetConfig+0x138>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d003      	beq.n	8006ce6 <TIM_Base_SetConfig+0xb2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a23      	ldr	r2, [pc, #140]	; (8006d70 <TIM_Base_SetConfig+0x13c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d108      	bne.n	8006cf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a0a      	ldr	r2, [pc, #40]	; (8006d48 <TIM_Base_SetConfig+0x114>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d003      	beq.n	8006d2c <TIM_Base_SetConfig+0xf8>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a0c      	ldr	r2, [pc, #48]	; (8006d58 <TIM_Base_SetConfig+0x124>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d103      	bne.n	8006d34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	691a      	ldr	r2, [r3, #16]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	615a      	str	r2, [r3, #20]
}
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	40010000 	.word	0x40010000
 8006d4c:	40000400 	.word	0x40000400
 8006d50:	40000800 	.word	0x40000800
 8006d54:	40000c00 	.word	0x40000c00
 8006d58:	40010400 	.word	0x40010400
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40014400 	.word	0x40014400
 8006d64:	40014800 	.word	0x40014800
 8006d68:	40001800 	.word	0x40001800
 8006d6c:	40001c00 	.word	0x40001c00
 8006d70:	40002000 	.word	0x40002000

08006d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	f023 0201 	bic.w	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 0303 	bic.w	r3, r3, #3
 8006daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f023 0302 	bic.w	r3, r3, #2
 8006dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a20      	ldr	r2, [pc, #128]	; (8006e4c <TIM_OC1_SetConfig+0xd8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d003      	beq.n	8006dd8 <TIM_OC1_SetConfig+0x64>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a1f      	ldr	r2, [pc, #124]	; (8006e50 <TIM_OC1_SetConfig+0xdc>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d10c      	bne.n	8006df2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f023 0308 	bic.w	r3, r3, #8
 8006dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f023 0304 	bic.w	r3, r3, #4
 8006df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a15      	ldr	r2, [pc, #84]	; (8006e4c <TIM_OC1_SetConfig+0xd8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d003      	beq.n	8006e02 <TIM_OC1_SetConfig+0x8e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a14      	ldr	r2, [pc, #80]	; (8006e50 <TIM_OC1_SetConfig+0xdc>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d111      	bne.n	8006e26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	621a      	str	r2, [r3, #32]
}
 8006e40:	bf00      	nop
 8006e42:	371c      	adds	r7, #28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40010400 	.word	0x40010400

08006e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	f023 0210 	bic.w	r2, r3, #16
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	021b      	lsls	r3, r3, #8
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f023 0320 	bic.w	r3, r3, #32
 8006e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a22      	ldr	r2, [pc, #136]	; (8006f38 <TIM_OC2_SetConfig+0xe4>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d003      	beq.n	8006ebc <TIM_OC2_SetConfig+0x68>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a21      	ldr	r2, [pc, #132]	; (8006f3c <TIM_OC2_SetConfig+0xe8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d10d      	bne.n	8006ed8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	011b      	lsls	r3, r3, #4
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ed6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a17      	ldr	r2, [pc, #92]	; (8006f38 <TIM_OC2_SetConfig+0xe4>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d003      	beq.n	8006ee8 <TIM_OC2_SetConfig+0x94>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a16      	ldr	r2, [pc, #88]	; (8006f3c <TIM_OC2_SetConfig+0xe8>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d113      	bne.n	8006f10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	621a      	str	r2, [r3, #32]
}
 8006f2a:	bf00      	nop
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	40010000 	.word	0x40010000
 8006f3c:	40010400 	.word	0x40010400

08006f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f023 0303 	bic.w	r3, r3, #3
 8006f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	021b      	lsls	r3, r3, #8
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a21      	ldr	r2, [pc, #132]	; (8007020 <TIM_OC3_SetConfig+0xe0>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_OC3_SetConfig+0x66>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a20      	ldr	r2, [pc, #128]	; (8007024 <TIM_OC3_SetConfig+0xe4>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d10d      	bne.n	8006fc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	021b      	lsls	r3, r3, #8
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a16      	ldr	r2, [pc, #88]	; (8007020 <TIM_OC3_SetConfig+0xe0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d003      	beq.n	8006fd2 <TIM_OC3_SetConfig+0x92>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a15      	ldr	r2, [pc, #84]	; (8007024 <TIM_OC3_SetConfig+0xe4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d113      	bne.n	8006ffa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	621a      	str	r2, [r3, #32]
}
 8007014:	bf00      	nop
 8007016:	371c      	adds	r7, #28
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	40010000 	.word	0x40010000
 8007024:	40010400 	.word	0x40010400

08007028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800705e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	021b      	lsls	r3, r3, #8
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	4313      	orrs	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007072:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	031b      	lsls	r3, r3, #12
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	4313      	orrs	r3, r2
 800707e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a12      	ldr	r2, [pc, #72]	; (80070cc <TIM_OC4_SetConfig+0xa4>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d003      	beq.n	8007090 <TIM_OC4_SetConfig+0x68>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a11      	ldr	r2, [pc, #68]	; (80070d0 <TIM_OC4_SetConfig+0xa8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d109      	bne.n	80070a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007096:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	019b      	lsls	r3, r3, #6
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	621a      	str	r2, [r3, #32]
}
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40010400 	.word	0x40010400

080070d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f023 0201 	bic.w	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4a28      	ldr	r2, [pc, #160]	; (80071a0 <TIM_TI1_SetConfig+0xcc>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d01b      	beq.n	800713a <TIM_TI1_SetConfig+0x66>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007108:	d017      	beq.n	800713a <TIM_TI1_SetConfig+0x66>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4a25      	ldr	r2, [pc, #148]	; (80071a4 <TIM_TI1_SetConfig+0xd0>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d013      	beq.n	800713a <TIM_TI1_SetConfig+0x66>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4a24      	ldr	r2, [pc, #144]	; (80071a8 <TIM_TI1_SetConfig+0xd4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00f      	beq.n	800713a <TIM_TI1_SetConfig+0x66>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4a23      	ldr	r2, [pc, #140]	; (80071ac <TIM_TI1_SetConfig+0xd8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00b      	beq.n	800713a <TIM_TI1_SetConfig+0x66>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	4a22      	ldr	r2, [pc, #136]	; (80071b0 <TIM_TI1_SetConfig+0xdc>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d007      	beq.n	800713a <TIM_TI1_SetConfig+0x66>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	4a21      	ldr	r2, [pc, #132]	; (80071b4 <TIM_TI1_SetConfig+0xe0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d003      	beq.n	800713a <TIM_TI1_SetConfig+0x66>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4a20      	ldr	r2, [pc, #128]	; (80071b8 <TIM_TI1_SetConfig+0xe4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d101      	bne.n	800713e <TIM_TI1_SetConfig+0x6a>
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <TIM_TI1_SetConfig+0x6c>
 800713e:	2300      	movs	r3, #0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d008      	beq.n	8007156 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f023 0303 	bic.w	r3, r3, #3
 800714a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4313      	orrs	r3, r2
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	e003      	b.n	800715e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f043 0301 	orr.w	r3, r3, #1
 800715c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	b2db      	uxtb	r3, r3
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f023 030a 	bic.w	r3, r3, #10
 8007178:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f003 030a 	and.w	r3, r3, #10
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	621a      	str	r2, [r3, #32]
}
 8007192:	bf00      	nop
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40010000 	.word	0x40010000
 80071a4:	40000400 	.word	0x40000400
 80071a8:	40000800 	.word	0x40000800
 80071ac:	40000c00 	.word	0x40000c00
 80071b0:	40010400 	.word	0x40010400
 80071b4:	40014000 	.word	0x40014000
 80071b8:	40001800 	.word	0x40001800

080071bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f023 0201 	bic.w	r2, r3, #1
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f023 030a 	bic.w	r3, r3, #10
 80071f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	4313      	orrs	r3, r2
 8007200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	621a      	str	r2, [r3, #32]
}
 800720e:	bf00      	nop
 8007210:	371c      	adds	r7, #28
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800721a:	b480      	push	{r7}
 800721c:	b087      	sub	sp, #28
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	607a      	str	r2, [r7, #4]
 8007226:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	f023 0210 	bic.w	r2, r3, #16
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007246:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	021b      	lsls	r3, r3, #8
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	4313      	orrs	r3, r2
 8007250:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	031b      	lsls	r3, r3, #12
 800725e:	b29b      	uxth	r3, r3
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	4313      	orrs	r3, r2
 8007264:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800726c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	4313      	orrs	r3, r2
 800727a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	621a      	str	r2, [r3, #32]
}
 8007288:	bf00      	nop
 800728a:	371c      	adds	r7, #28
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	f023 0210 	bic.w	r2, r3, #16
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	031b      	lsls	r3, r3, #12
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	011b      	lsls	r3, r3, #4
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	621a      	str	r2, [r3, #32]
}
 80072e8:	bf00      	nop
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f023 0303 	bic.w	r3, r3, #3
 8007320:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007330:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	011b      	lsls	r3, r3, #4
 8007336:	b2db      	uxtb	r3, r3
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	4313      	orrs	r3, r2
 800733c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007344:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	021b      	lsls	r3, r3, #8
 800734a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	621a      	str	r2, [r3, #32]
}
 8007360:	bf00      	nop
 8007362:	371c      	adds	r7, #28
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007398:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	031b      	lsls	r3, r3, #12
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80073be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	031b      	lsls	r3, r3, #12
 80073c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	621a      	str	r2, [r3, #32]
}
 80073da:	bf00      	nop
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4313      	orrs	r3, r2
 8007404:	f043 0307 	orr.w	r3, r3, #7
 8007408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	609a      	str	r2, [r3, #8]
}
 8007410:	bf00      	nop
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	021a      	lsls	r2, r3, #8
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	431a      	orrs	r2, r3
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	4313      	orrs	r3, r2
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	609a      	str	r2, [r3, #8]
}
 8007450:	bf00      	nop
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f003 031f 	and.w	r3, r3, #31
 800746e:	2201      	movs	r2, #1
 8007470:	fa02 f303 	lsl.w	r3, r2, r3
 8007474:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6a1a      	ldr	r2, [r3, #32]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	43db      	mvns	r3, r3
 800747e:	401a      	ands	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a1a      	ldr	r2, [r3, #32]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f003 031f 	and.w	r3, r3, #31
 800748e:	6879      	ldr	r1, [r7, #4]
 8007490:	fa01 f303 	lsl.w	r3, r1, r3
 8007494:	431a      	orrs	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	621a      	str	r2, [r3, #32]
}
 800749a:	bf00      	nop
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
	...

080074a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074bc:	2302      	movs	r3, #2
 80074be:	e05a      	b.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a21      	ldr	r2, [pc, #132]	; (8007584 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d022      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750c:	d01d      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a1d      	ldr	r2, [pc, #116]	; (8007588 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d018      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a1b      	ldr	r2, [pc, #108]	; (800758c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d013      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a1a      	ldr	r2, [pc, #104]	; (8007590 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d00e      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a18      	ldr	r2, [pc, #96]	; (8007594 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d009      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a17      	ldr	r2, [pc, #92]	; (8007598 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d004      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a15      	ldr	r2, [pc, #84]	; (800759c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d10c      	bne.n	8007564 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	4313      	orrs	r3, r2
 800755a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	40010000 	.word	0x40010000
 8007588:	40000400 	.word	0x40000400
 800758c:	40000800 	.word	0x40000800
 8007590:	40000c00 	.word	0x40000c00
 8007594:	40010400 	.word	0x40010400
 8007598:	40014000 	.word	0x40014000
 800759c:	40001800 	.word	0x40001800

080075a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d101      	bne.n	80075bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075b8:	2302      	movs	r3, #2
 80075ba:	e03d      	b.n	8007638 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	4313      	orrs	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	4313      	orrs	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e03f      	b.n	80076fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d106      	bne.n	8007698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7fc fa6c 	bl	8003b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2224      	movs	r2, #36	; 0x24
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fddf 	bl	8008274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695a      	ldr	r2, [r3, #20]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b08a      	sub	sp, #40	; 0x28
 800770a:	af02      	add	r7, sp, #8
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	603b      	str	r3, [r7, #0]
 8007712:	4613      	mov	r3, r2
 8007714:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b20      	cmp	r3, #32
 8007724:	d17c      	bne.n	8007820 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <HAL_UART_Transmit+0x2c>
 800772c:	88fb      	ldrh	r3, [r7, #6]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e075      	b.n	8007822 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_UART_Transmit+0x3e>
 8007740:	2302      	movs	r3, #2
 8007742:	e06e      	b.n	8007822 <HAL_UART_Transmit+0x11c>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2221      	movs	r2, #33	; 0x21
 8007756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800775a:	f7fc fc57 	bl	800400c <HAL_GetTick>
 800775e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	88fa      	ldrh	r2, [r7, #6]
 8007764:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	88fa      	ldrh	r2, [r7, #6]
 800776a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007774:	d108      	bne.n	8007788 <HAL_UART_Transmit+0x82>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d104      	bne.n	8007788 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800777e:	2300      	movs	r3, #0
 8007780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	61bb      	str	r3, [r7, #24]
 8007786:	e003      	b.n	8007790 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800778c:	2300      	movs	r3, #0
 800778e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007798:	e02a      	b.n	80077f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2200      	movs	r2, #0
 80077a2:	2180      	movs	r1, #128	; 0x80
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 fb1f 	bl	8007de8 <UART_WaitOnFlagUntilTimeout>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e036      	b.n	8007822 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10b      	bne.n	80077d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	3302      	adds	r3, #2
 80077ce:	61bb      	str	r3, [r7, #24]
 80077d0:	e007      	b.n	80077e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	781a      	ldrb	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	3301      	adds	r3, #1
 80077e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	3b01      	subs	r3, #1
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1cf      	bne.n	800779a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2200      	movs	r2, #0
 8007802:	2140      	movs	r1, #64	; 0x40
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 faef 	bl	8007de8 <UART_WaitOnFlagUntilTimeout>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e006      	b.n	8007822 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	e000      	b.n	8007822 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007820:	2302      	movs	r3, #2
  }
}
 8007822:	4618      	mov	r0, r3
 8007824:	3720      	adds	r7, #32
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b084      	sub	sp, #16
 800782e:	af00      	add	r7, sp, #0
 8007830:	60f8      	str	r0, [r7, #12]
 8007832:	60b9      	str	r1, [r7, #8]
 8007834:	4613      	mov	r3, r2
 8007836:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b20      	cmp	r3, #32
 8007842:	d11d      	bne.n	8007880 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <HAL_UART_Receive_IT+0x26>
 800784a:	88fb      	ldrh	r3, [r7, #6]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e016      	b.n	8007882 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800785a:	2b01      	cmp	r3, #1
 800785c:	d101      	bne.n	8007862 <HAL_UART_Receive_IT+0x38>
 800785e:	2302      	movs	r3, #2
 8007860:	e00f      	b.n	8007882 <HAL_UART_Receive_IT+0x58>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007870:	88fb      	ldrh	r3, [r7, #6]
 8007872:	461a      	mov	r2, r3
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 fb24 	bl	8007ec4 <UART_Start_Receive_IT>
 800787c:	4603      	mov	r3, r0
 800787e:	e000      	b.n	8007882 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007880:	2302      	movs	r3, #2
  }
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b0ba      	sub	sp, #232	; 0xe8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80078b8:	2300      	movs	r3, #0
 80078ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80078be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80078ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10f      	bne.n	80078f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d6:	f003 0320 	and.w	r3, r3, #32
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d009      	beq.n	80078f2 <HAL_UART_IRQHandler+0x66>
 80078de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e2:	f003 0320 	and.w	r3, r3, #32
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fc07 	bl	80080fe <UART_Receive_IT>
      return;
 80078f0:	e256      	b.n	8007da0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 80de 	beq.w	8007ab8 <HAL_UART_IRQHandler+0x22c>
 80078fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d106      	bne.n	8007916 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800790c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 80d1 	beq.w	8007ab8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00b      	beq.n	800793a <HAL_UART_IRQHandler+0xae>
 8007922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800792a:	2b00      	cmp	r3, #0
 800792c:	d005      	beq.n	800793a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	f043 0201 	orr.w	r2, r3, #1
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800793a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793e:	f003 0304 	and.w	r3, r3, #4
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00b      	beq.n	800795e <HAL_UART_IRQHandler+0xd2>
 8007946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d005      	beq.n	800795e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	f043 0202 	orr.w	r2, r3, #2
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800795e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00b      	beq.n	8007982 <HAL_UART_IRQHandler+0xf6>
 800796a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d005      	beq.n	8007982 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	f043 0204 	orr.w	r2, r3, #4
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007986:	f003 0308 	and.w	r3, r3, #8
 800798a:	2b00      	cmp	r3, #0
 800798c:	d011      	beq.n	80079b2 <HAL_UART_IRQHandler+0x126>
 800798e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b00      	cmp	r3, #0
 8007998:	d105      	bne.n	80079a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800799a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d005      	beq.n	80079b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	f043 0208 	orr.w	r2, r3, #8
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 81ed 	beq.w	8007d96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d008      	beq.n	80079da <HAL_UART_IRQHandler+0x14e>
 80079c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079cc:	f003 0320 	and.w	r3, r3, #32
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fb92 	bl	80080fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e4:	2b40      	cmp	r3, #64	; 0x40
 80079e6:	bf0c      	ite	eq
 80079e8:	2301      	moveq	r3, #1
 80079ea:	2300      	movne	r3, #0
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	f003 0308 	and.w	r3, r3, #8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d103      	bne.n	8007a06 <HAL_UART_IRQHandler+0x17a>
 80079fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d04f      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fa9a 	bl	8007f40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a16:	2b40      	cmp	r3, #64	; 0x40
 8007a18:	d141      	bne.n	8007a9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3314      	adds	r3, #20
 8007a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3314      	adds	r3, #20
 8007a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1d9      	bne.n	8007a1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d013      	beq.n	8007a96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	4a7d      	ldr	r2, [pc, #500]	; (8007c68 <HAL_UART_IRQHandler+0x3dc>)
 8007a74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fc fc77 	bl	800436e <HAL_DMA_Abort_IT>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d016      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a90:	4610      	mov	r0, r2
 8007a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a94:	e00e      	b.n	8007ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f990 	bl	8007dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a9c:	e00a      	b.n	8007ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f98c 	bl	8007dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa4:	e006      	b.n	8007ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f988 	bl	8007dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007ab2:	e170      	b.n	8007d96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab4:	bf00      	nop
    return;
 8007ab6:	e16e      	b.n	8007d96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	f040 814a 	bne.w	8007d56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac6:	f003 0310 	and.w	r3, r3, #16
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 8143 	beq.w	8007d56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad4:	f003 0310 	and.w	r3, r3, #16
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 813c 	beq.w	8007d56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60bb      	str	r3, [r7, #8]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	60bb      	str	r3, [r7, #8]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	60bb      	str	r3, [r7, #8]
 8007af2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afe:	2b40      	cmp	r3, #64	; 0x40
 8007b00:	f040 80b4 	bne.w	8007c6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 8140 	beq.w	8007d9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b22:	429a      	cmp	r2, r3
 8007b24:	f080 8139 	bcs.w	8007d9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b3a:	f000 8088 	beq.w	8007c4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	330c      	adds	r3, #12
 8007b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	330c      	adds	r3, #12
 8007b66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007b6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1d9      	bne.n	8007b3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3314      	adds	r3, #20
 8007b90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b9c:	f023 0301 	bic.w	r3, r3, #1
 8007ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3314      	adds	r3, #20
 8007baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007bae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e1      	bne.n	8007b8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3314      	adds	r3, #20
 8007bcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bd0:	e853 3f00 	ldrex	r3, [r3]
 8007bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3314      	adds	r3, #20
 8007be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007bea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007bf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007bf2:	e841 2300 	strex	r3, r2, [r1]
 8007bf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1e3      	bne.n	8007bc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	330c      	adds	r3, #12
 8007c12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c1e:	f023 0310 	bic.w	r3, r3, #16
 8007c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	330c      	adds	r3, #12
 8007c2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007c30:	65ba      	str	r2, [r7, #88]	; 0x58
 8007c32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e3      	bne.n	8007c0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fc fb20 	bl	800428e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f8b6 	bl	8007dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c64:	e099      	b.n	8007d9a <HAL_UART_IRQHandler+0x50e>
 8007c66:	bf00      	nop
 8007c68:	08008007 	.word	0x08008007
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 808b 	beq.w	8007d9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 8086 	beq.w	8007d9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	330c      	adds	r3, #12
 8007c98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ca8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	330c      	adds	r3, #12
 8007cb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007cb6:	647a      	str	r2, [r7, #68]	; 0x44
 8007cb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e3      	bne.n	8007c92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3314      	adds	r3, #20
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	f023 0301 	bic.w	r3, r3, #1
 8007ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3314      	adds	r3, #20
 8007cea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007cee:	633a      	str	r2, [r7, #48]	; 0x30
 8007cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e3      	bne.n	8007cca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	330c      	adds	r3, #12
 8007d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0310 	bic.w	r3, r3, #16
 8007d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	330c      	adds	r3, #12
 8007d30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007d34:	61fa      	str	r2, [r7, #28]
 8007d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	69b9      	ldr	r1, [r7, #24]
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	617b      	str	r3, [r7, #20]
   return(result);
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e3      	bne.n	8007d10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f83e 	bl	8007dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d54:	e023      	b.n	8007d9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <HAL_UART_IRQHandler+0x4ea>
 8007d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f95d 	bl	800802e <UART_Transmit_IT>
    return;
 8007d74:	e014      	b.n	8007da0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00e      	beq.n	8007da0 <HAL_UART_IRQHandler+0x514>
 8007d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d008      	beq.n	8007da0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f99d 	bl	80080ce <UART_EndTransmit_IT>
    return;
 8007d94:	e004      	b.n	8007da0 <HAL_UART_IRQHandler+0x514>
    return;
 8007d96:	bf00      	nop
 8007d98:	e002      	b.n	8007da0 <HAL_UART_IRQHandler+0x514>
      return;
 8007d9a:	bf00      	nop
 8007d9c:	e000      	b.n	8007da0 <HAL_UART_IRQHandler+0x514>
      return;
 8007d9e:	bf00      	nop
  }
}
 8007da0:	37e8      	adds	r7, #232	; 0xe8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop

08007da8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b090      	sub	sp, #64	; 0x40
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	4613      	mov	r3, r2
 8007df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df8:	e050      	b.n	8007e9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e00:	d04c      	beq.n	8007e9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d007      	beq.n	8007e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e08:	f7fc f900 	bl	800400c <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d241      	bcs.n	8007e9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	330c      	adds	r3, #12
 8007e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	330c      	adds	r3, #12
 8007e36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e38:	637a      	str	r2, [r7, #52]	; 0x34
 8007e3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e5      	bne.n	8007e18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3314      	adds	r3, #20
 8007e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f023 0301 	bic.w	r3, r3, #1
 8007e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3314      	adds	r3, #20
 8007e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e6c:	623a      	str	r2, [r7, #32]
 8007e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	69f9      	ldr	r1, [r7, #28]
 8007e72:	6a3a      	ldr	r2, [r7, #32]
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e5      	bne.n	8007e4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2220      	movs	r2, #32
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e00f      	b.n	8007ebc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	bf0c      	ite	eq
 8007eac:	2301      	moveq	r3, #1
 8007eae:	2300      	movne	r3, #0
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	79fb      	ldrb	r3, [r7, #7]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d09f      	beq.n	8007dfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3740      	adds	r7, #64	; 0x40
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	88fa      	ldrh	r2, [r7, #6]
 8007edc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	88fa      	ldrh	r2, [r7, #6]
 8007ee2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2222      	movs	r2, #34	; 0x22
 8007eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d007      	beq.n	8007f12 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68da      	ldr	r2, [r3, #12]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f10:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	695a      	ldr	r2, [r3, #20]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f042 0201 	orr.w	r2, r2, #1
 8007f20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68da      	ldr	r2, [r3, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f042 0220 	orr.w	r2, r2, #32
 8007f30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b095      	sub	sp, #84	; 0x54
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	330c      	adds	r3, #12
 8007f4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	330c      	adds	r3, #12
 8007f66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f68:	643a      	str	r2, [r7, #64]	; 0x40
 8007f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e5      	bne.n	8007f48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3314      	adds	r3, #20
 8007f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	e853 3f00 	ldrex	r3, [r3]
 8007f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	f023 0301 	bic.w	r3, r3, #1
 8007f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3314      	adds	r3, #20
 8007f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fa4:	e841 2300 	strex	r3, r2, [r1]
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e5      	bne.n	8007f7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d119      	bne.n	8007fec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	330c      	adds	r3, #12
 8007fbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	e853 3f00 	ldrex	r3, [r3]
 8007fc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f023 0310 	bic.w	r3, r3, #16
 8007fce:	647b      	str	r3, [r7, #68]	; 0x44
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	330c      	adds	r3, #12
 8007fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fd8:	61ba      	str	r2, [r7, #24]
 8007fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fdc:	6979      	ldr	r1, [r7, #20]
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	e841 2300 	strex	r3, r2, [r1]
 8007fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1e5      	bne.n	8007fb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ffa:	bf00      	nop
 8007ffc:	3754      	adds	r7, #84	; 0x54
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008012:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f7ff fecb 	bl	8007dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008026:	bf00      	nop
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800802e:	b480      	push	{r7}
 8008030:	b085      	sub	sp, #20
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b21      	cmp	r3, #33	; 0x21
 8008040:	d13e      	bne.n	80080c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800804a:	d114      	bne.n	8008076 <UART_Transmit_IT+0x48>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d110      	bne.n	8008076 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008068:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	1c9a      	adds	r2, r3, #2
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	621a      	str	r2, [r3, #32]
 8008074:	e008      	b.n	8008088 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	1c59      	adds	r1, r3, #1
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	6211      	str	r1, [r2, #32]
 8008080:	781a      	ldrb	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800808c:	b29b      	uxth	r3, r3
 800808e:	3b01      	subs	r3, #1
 8008090:	b29b      	uxth	r3, r3
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	4619      	mov	r1, r3
 8008096:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10f      	bne.n	80080bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68da      	ldr	r2, [r3, #12]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	e000      	b.n	80080c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080c0:	2302      	movs	r3, #2
  }
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7ff fe5a 	bl	8007da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b08c      	sub	sp, #48	; 0x30
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b22      	cmp	r3, #34	; 0x22
 8008110:	f040 80ab 	bne.w	800826a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800811c:	d117      	bne.n	800814e <UART_Receive_IT+0x50>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d113      	bne.n	800814e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008126:	2300      	movs	r3, #0
 8008128:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	b29b      	uxth	r3, r3
 8008138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800813c:	b29a      	uxth	r2, r3
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	1c9a      	adds	r2, r3, #2
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	629a      	str	r2, [r3, #40]	; 0x28
 800814c:	e026      	b.n	800819c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008154:	2300      	movs	r3, #0
 8008156:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008160:	d007      	beq.n	8008172 <UART_Receive_IT+0x74>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10a      	bne.n	8008180 <UART_Receive_IT+0x82>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d106      	bne.n	8008180 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	b2da      	uxtb	r2, r3
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	701a      	strb	r2, [r3, #0]
 800817e:	e008      	b.n	8008192 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	b2db      	uxtb	r3, r3
 8008188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800818c:	b2da      	uxtb	r2, r3
 800818e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008190:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	4619      	mov	r1, r3
 80081aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d15a      	bne.n	8008266 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0220 	bic.w	r2, r2, #32
 80081be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695a      	ldr	r2, [r3, #20]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 0201 	bic.w	r2, r2, #1
 80081de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2220      	movs	r2, #32
 80081e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d135      	bne.n	800825c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	330c      	adds	r3, #12
 80081fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	e853 3f00 	ldrex	r3, [r3]
 8008204:	613b      	str	r3, [r7, #16]
   return(result);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f023 0310 	bic.w	r3, r3, #16
 800820c:	627b      	str	r3, [r7, #36]	; 0x24
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	330c      	adds	r3, #12
 8008214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008216:	623a      	str	r2, [r7, #32]
 8008218:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	69f9      	ldr	r1, [r7, #28]
 800821c:	6a3a      	ldr	r2, [r7, #32]
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	61bb      	str	r3, [r7, #24]
   return(result);
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e5      	bne.n	80081f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0310 	and.w	r3, r3, #16
 8008234:	2b10      	cmp	r3, #16
 8008236:	d10a      	bne.n	800824e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008238:	2300      	movs	r3, #0
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7ff fdbb 	bl	8007dd0 <HAL_UARTEx_RxEventCallback>
 800825a:	e002      	b.n	8008262 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7f9 feff 	bl	8002060 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	e002      	b.n	800826c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	e000      	b.n	800826c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800826a:	2302      	movs	r3, #2
  }
}
 800826c:	4618      	mov	r0, r3
 800826e:	3730      	adds	r7, #48	; 0x30
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008278:	b0c0      	sub	sp, #256	; 0x100
 800827a:	af00      	add	r7, sp, #0
 800827c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800828c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008290:	68d9      	ldr	r1, [r3, #12]
 8008292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	ea40 0301 	orr.w	r3, r0, r1
 800829c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800829e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	431a      	orrs	r2, r3
 80082ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	431a      	orrs	r2, r3
 80082b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80082c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80082cc:	f021 010c 	bic.w	r1, r1, #12
 80082d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082da:	430b      	orrs	r3, r1
 80082dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80082ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ee:	6999      	ldr	r1, [r3, #24]
 80082f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	ea40 0301 	orr.w	r3, r0, r1
 80082fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b8f      	ldr	r3, [pc, #572]	; (8008540 <UART_SetConfig+0x2cc>)
 8008304:	429a      	cmp	r2, r3
 8008306:	d005      	beq.n	8008314 <UART_SetConfig+0xa0>
 8008308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	4b8d      	ldr	r3, [pc, #564]	; (8008544 <UART_SetConfig+0x2d0>)
 8008310:	429a      	cmp	r2, r3
 8008312:	d104      	bne.n	800831e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008314:	f7fd fe06 	bl	8005f24 <HAL_RCC_GetPCLK2Freq>
 8008318:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800831c:	e003      	b.n	8008326 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800831e:	f7fd fded 	bl	8005efc <HAL_RCC_GetPCLK1Freq>
 8008322:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008330:	f040 810c 	bne.w	800854c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008338:	2200      	movs	r2, #0
 800833a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800833e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008342:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008346:	4622      	mov	r2, r4
 8008348:	462b      	mov	r3, r5
 800834a:	1891      	adds	r1, r2, r2
 800834c:	65b9      	str	r1, [r7, #88]	; 0x58
 800834e:	415b      	adcs	r3, r3
 8008350:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008352:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008356:	4621      	mov	r1, r4
 8008358:	eb12 0801 	adds.w	r8, r2, r1
 800835c:	4629      	mov	r1, r5
 800835e:	eb43 0901 	adc.w	r9, r3, r1
 8008362:	f04f 0200 	mov.w	r2, #0
 8008366:	f04f 0300 	mov.w	r3, #0
 800836a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800836e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008376:	4690      	mov	r8, r2
 8008378:	4699      	mov	r9, r3
 800837a:	4623      	mov	r3, r4
 800837c:	eb18 0303 	adds.w	r3, r8, r3
 8008380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008384:	462b      	mov	r3, r5
 8008386:	eb49 0303 	adc.w	r3, r9, r3
 800838a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800838e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800839a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800839e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80083a2:	460b      	mov	r3, r1
 80083a4:	18db      	adds	r3, r3, r3
 80083a6:	653b      	str	r3, [r7, #80]	; 0x50
 80083a8:	4613      	mov	r3, r2
 80083aa:	eb42 0303 	adc.w	r3, r2, r3
 80083ae:	657b      	str	r3, [r7, #84]	; 0x54
 80083b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80083b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80083b8:	f7f8 fc46 	bl	8000c48 <__aeabi_uldivmod>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	4b61      	ldr	r3, [pc, #388]	; (8008548 <UART_SetConfig+0x2d4>)
 80083c2:	fba3 2302 	umull	r2, r3, r3, r2
 80083c6:	095b      	lsrs	r3, r3, #5
 80083c8:	011c      	lsls	r4, r3, #4
 80083ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80083d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80083dc:	4642      	mov	r2, r8
 80083de:	464b      	mov	r3, r9
 80083e0:	1891      	adds	r1, r2, r2
 80083e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80083e4:	415b      	adcs	r3, r3
 80083e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80083ec:	4641      	mov	r1, r8
 80083ee:	eb12 0a01 	adds.w	sl, r2, r1
 80083f2:	4649      	mov	r1, r9
 80083f4:	eb43 0b01 	adc.w	fp, r3, r1
 80083f8:	f04f 0200 	mov.w	r2, #0
 80083fc:	f04f 0300 	mov.w	r3, #0
 8008400:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008404:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800840c:	4692      	mov	sl, r2
 800840e:	469b      	mov	fp, r3
 8008410:	4643      	mov	r3, r8
 8008412:	eb1a 0303 	adds.w	r3, sl, r3
 8008416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800841a:	464b      	mov	r3, r9
 800841c:	eb4b 0303 	adc.w	r3, fp, r3
 8008420:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008430:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008434:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008438:	460b      	mov	r3, r1
 800843a:	18db      	adds	r3, r3, r3
 800843c:	643b      	str	r3, [r7, #64]	; 0x40
 800843e:	4613      	mov	r3, r2
 8008440:	eb42 0303 	adc.w	r3, r2, r3
 8008444:	647b      	str	r3, [r7, #68]	; 0x44
 8008446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800844a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800844e:	f7f8 fbfb 	bl	8000c48 <__aeabi_uldivmod>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4611      	mov	r1, r2
 8008458:	4b3b      	ldr	r3, [pc, #236]	; (8008548 <UART_SetConfig+0x2d4>)
 800845a:	fba3 2301 	umull	r2, r3, r3, r1
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	2264      	movs	r2, #100	; 0x64
 8008462:	fb02 f303 	mul.w	r3, r2, r3
 8008466:	1acb      	subs	r3, r1, r3
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800846e:	4b36      	ldr	r3, [pc, #216]	; (8008548 <UART_SetConfig+0x2d4>)
 8008470:	fba3 2302 	umull	r2, r3, r3, r2
 8008474:	095b      	lsrs	r3, r3, #5
 8008476:	005b      	lsls	r3, r3, #1
 8008478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800847c:	441c      	add	r4, r3
 800847e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008482:	2200      	movs	r2, #0
 8008484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008488:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800848c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008490:	4642      	mov	r2, r8
 8008492:	464b      	mov	r3, r9
 8008494:	1891      	adds	r1, r2, r2
 8008496:	63b9      	str	r1, [r7, #56]	; 0x38
 8008498:	415b      	adcs	r3, r3
 800849a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800849c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80084a0:	4641      	mov	r1, r8
 80084a2:	1851      	adds	r1, r2, r1
 80084a4:	6339      	str	r1, [r7, #48]	; 0x30
 80084a6:	4649      	mov	r1, r9
 80084a8:	414b      	adcs	r3, r1
 80084aa:	637b      	str	r3, [r7, #52]	; 0x34
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80084b8:	4659      	mov	r1, fp
 80084ba:	00cb      	lsls	r3, r1, #3
 80084bc:	4651      	mov	r1, sl
 80084be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084c2:	4651      	mov	r1, sl
 80084c4:	00ca      	lsls	r2, r1, #3
 80084c6:	4610      	mov	r0, r2
 80084c8:	4619      	mov	r1, r3
 80084ca:	4603      	mov	r3, r0
 80084cc:	4642      	mov	r2, r8
 80084ce:	189b      	adds	r3, r3, r2
 80084d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084d4:	464b      	mov	r3, r9
 80084d6:	460a      	mov	r2, r1
 80084d8:	eb42 0303 	adc.w	r3, r2, r3
 80084dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80084ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80084f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80084f4:	460b      	mov	r3, r1
 80084f6:	18db      	adds	r3, r3, r3
 80084f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80084fa:	4613      	mov	r3, r2
 80084fc:	eb42 0303 	adc.w	r3, r2, r3
 8008500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008506:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800850a:	f7f8 fb9d 	bl	8000c48 <__aeabi_uldivmod>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	4b0d      	ldr	r3, [pc, #52]	; (8008548 <UART_SetConfig+0x2d4>)
 8008514:	fba3 1302 	umull	r1, r3, r3, r2
 8008518:	095b      	lsrs	r3, r3, #5
 800851a:	2164      	movs	r1, #100	; 0x64
 800851c:	fb01 f303 	mul.w	r3, r1, r3
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	3332      	adds	r3, #50	; 0x32
 8008526:	4a08      	ldr	r2, [pc, #32]	; (8008548 <UART_SetConfig+0x2d4>)
 8008528:	fba2 2303 	umull	r2, r3, r2, r3
 800852c:	095b      	lsrs	r3, r3, #5
 800852e:	f003 0207 	and.w	r2, r3, #7
 8008532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4422      	add	r2, r4
 800853a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800853c:	e106      	b.n	800874c <UART_SetConfig+0x4d8>
 800853e:	bf00      	nop
 8008540:	40011000 	.word	0x40011000
 8008544:	40011400 	.word	0x40011400
 8008548:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800854c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008550:	2200      	movs	r2, #0
 8008552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008556:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800855a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800855e:	4642      	mov	r2, r8
 8008560:	464b      	mov	r3, r9
 8008562:	1891      	adds	r1, r2, r2
 8008564:	6239      	str	r1, [r7, #32]
 8008566:	415b      	adcs	r3, r3
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
 800856a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800856e:	4641      	mov	r1, r8
 8008570:	1854      	adds	r4, r2, r1
 8008572:	4649      	mov	r1, r9
 8008574:	eb43 0501 	adc.w	r5, r3, r1
 8008578:	f04f 0200 	mov.w	r2, #0
 800857c:	f04f 0300 	mov.w	r3, #0
 8008580:	00eb      	lsls	r3, r5, #3
 8008582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008586:	00e2      	lsls	r2, r4, #3
 8008588:	4614      	mov	r4, r2
 800858a:	461d      	mov	r5, r3
 800858c:	4643      	mov	r3, r8
 800858e:	18e3      	adds	r3, r4, r3
 8008590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008594:	464b      	mov	r3, r9
 8008596:	eb45 0303 	adc.w	r3, r5, r3
 800859a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800859e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80085aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085ae:	f04f 0200 	mov.w	r2, #0
 80085b2:	f04f 0300 	mov.w	r3, #0
 80085b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80085ba:	4629      	mov	r1, r5
 80085bc:	008b      	lsls	r3, r1, #2
 80085be:	4621      	mov	r1, r4
 80085c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085c4:	4621      	mov	r1, r4
 80085c6:	008a      	lsls	r2, r1, #2
 80085c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80085cc:	f7f8 fb3c 	bl	8000c48 <__aeabi_uldivmod>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4b60      	ldr	r3, [pc, #384]	; (8008758 <UART_SetConfig+0x4e4>)
 80085d6:	fba3 2302 	umull	r2, r3, r3, r2
 80085da:	095b      	lsrs	r3, r3, #5
 80085dc:	011c      	lsls	r4, r3, #4
 80085de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e2:	2200      	movs	r2, #0
 80085e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80085e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80085ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80085f0:	4642      	mov	r2, r8
 80085f2:	464b      	mov	r3, r9
 80085f4:	1891      	adds	r1, r2, r2
 80085f6:	61b9      	str	r1, [r7, #24]
 80085f8:	415b      	adcs	r3, r3
 80085fa:	61fb      	str	r3, [r7, #28]
 80085fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008600:	4641      	mov	r1, r8
 8008602:	1851      	adds	r1, r2, r1
 8008604:	6139      	str	r1, [r7, #16]
 8008606:	4649      	mov	r1, r9
 8008608:	414b      	adcs	r3, r1
 800860a:	617b      	str	r3, [r7, #20]
 800860c:	f04f 0200 	mov.w	r2, #0
 8008610:	f04f 0300 	mov.w	r3, #0
 8008614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008618:	4659      	mov	r1, fp
 800861a:	00cb      	lsls	r3, r1, #3
 800861c:	4651      	mov	r1, sl
 800861e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008622:	4651      	mov	r1, sl
 8008624:	00ca      	lsls	r2, r1, #3
 8008626:	4610      	mov	r0, r2
 8008628:	4619      	mov	r1, r3
 800862a:	4603      	mov	r3, r0
 800862c:	4642      	mov	r2, r8
 800862e:	189b      	adds	r3, r3, r2
 8008630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008634:	464b      	mov	r3, r9
 8008636:	460a      	mov	r2, r1
 8008638:	eb42 0303 	adc.w	r3, r2, r3
 800863c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	67bb      	str	r3, [r7, #120]	; 0x78
 800864a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	f04f 0300 	mov.w	r3, #0
 8008654:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008658:	4649      	mov	r1, r9
 800865a:	008b      	lsls	r3, r1, #2
 800865c:	4641      	mov	r1, r8
 800865e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008662:	4641      	mov	r1, r8
 8008664:	008a      	lsls	r2, r1, #2
 8008666:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800866a:	f7f8 faed 	bl	8000c48 <__aeabi_uldivmod>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	4611      	mov	r1, r2
 8008674:	4b38      	ldr	r3, [pc, #224]	; (8008758 <UART_SetConfig+0x4e4>)
 8008676:	fba3 2301 	umull	r2, r3, r3, r1
 800867a:	095b      	lsrs	r3, r3, #5
 800867c:	2264      	movs	r2, #100	; 0x64
 800867e:	fb02 f303 	mul.w	r3, r2, r3
 8008682:	1acb      	subs	r3, r1, r3
 8008684:	011b      	lsls	r3, r3, #4
 8008686:	3332      	adds	r3, #50	; 0x32
 8008688:	4a33      	ldr	r2, [pc, #204]	; (8008758 <UART_SetConfig+0x4e4>)
 800868a:	fba2 2303 	umull	r2, r3, r2, r3
 800868e:	095b      	lsrs	r3, r3, #5
 8008690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008694:	441c      	add	r4, r3
 8008696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800869a:	2200      	movs	r2, #0
 800869c:	673b      	str	r3, [r7, #112]	; 0x70
 800869e:	677a      	str	r2, [r7, #116]	; 0x74
 80086a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80086a4:	4642      	mov	r2, r8
 80086a6:	464b      	mov	r3, r9
 80086a8:	1891      	adds	r1, r2, r2
 80086aa:	60b9      	str	r1, [r7, #8]
 80086ac:	415b      	adcs	r3, r3
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086b4:	4641      	mov	r1, r8
 80086b6:	1851      	adds	r1, r2, r1
 80086b8:	6039      	str	r1, [r7, #0]
 80086ba:	4649      	mov	r1, r9
 80086bc:	414b      	adcs	r3, r1
 80086be:	607b      	str	r3, [r7, #4]
 80086c0:	f04f 0200 	mov.w	r2, #0
 80086c4:	f04f 0300 	mov.w	r3, #0
 80086c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80086cc:	4659      	mov	r1, fp
 80086ce:	00cb      	lsls	r3, r1, #3
 80086d0:	4651      	mov	r1, sl
 80086d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086d6:	4651      	mov	r1, sl
 80086d8:	00ca      	lsls	r2, r1, #3
 80086da:	4610      	mov	r0, r2
 80086dc:	4619      	mov	r1, r3
 80086de:	4603      	mov	r3, r0
 80086e0:	4642      	mov	r2, r8
 80086e2:	189b      	adds	r3, r3, r2
 80086e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80086e6:	464b      	mov	r3, r9
 80086e8:	460a      	mov	r2, r1
 80086ea:	eb42 0303 	adc.w	r3, r2, r3
 80086ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	663b      	str	r3, [r7, #96]	; 0x60
 80086fa:	667a      	str	r2, [r7, #100]	; 0x64
 80086fc:	f04f 0200 	mov.w	r2, #0
 8008700:	f04f 0300 	mov.w	r3, #0
 8008704:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008708:	4649      	mov	r1, r9
 800870a:	008b      	lsls	r3, r1, #2
 800870c:	4641      	mov	r1, r8
 800870e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008712:	4641      	mov	r1, r8
 8008714:	008a      	lsls	r2, r1, #2
 8008716:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800871a:	f7f8 fa95 	bl	8000c48 <__aeabi_uldivmod>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	4b0d      	ldr	r3, [pc, #52]	; (8008758 <UART_SetConfig+0x4e4>)
 8008724:	fba3 1302 	umull	r1, r3, r3, r2
 8008728:	095b      	lsrs	r3, r3, #5
 800872a:	2164      	movs	r1, #100	; 0x64
 800872c:	fb01 f303 	mul.w	r3, r1, r3
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	011b      	lsls	r3, r3, #4
 8008734:	3332      	adds	r3, #50	; 0x32
 8008736:	4a08      	ldr	r2, [pc, #32]	; (8008758 <UART_SetConfig+0x4e4>)
 8008738:	fba2 2303 	umull	r2, r3, r2, r3
 800873c:	095b      	lsrs	r3, r3, #5
 800873e:	f003 020f 	and.w	r2, r3, #15
 8008742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4422      	add	r2, r4
 800874a:	609a      	str	r2, [r3, #8]
}
 800874c:	bf00      	nop
 800874e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008752:	46bd      	mov	sp, r7
 8008754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008758:	51eb851f 	.word	0x51eb851f

0800875c <__NVIC_SetPriority>:
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800876c:	2b00      	cmp	r3, #0
 800876e:	db0a      	blt.n	8008786 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	b2da      	uxtb	r2, r3
 8008774:	490c      	ldr	r1, [pc, #48]	; (80087a8 <__NVIC_SetPriority+0x4c>)
 8008776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800877a:	0112      	lsls	r2, r2, #4
 800877c:	b2d2      	uxtb	r2, r2
 800877e:	440b      	add	r3, r1
 8008780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008784:	e00a      	b.n	800879c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	b2da      	uxtb	r2, r3
 800878a:	4908      	ldr	r1, [pc, #32]	; (80087ac <__NVIC_SetPriority+0x50>)
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	f003 030f 	and.w	r3, r3, #15
 8008792:	3b04      	subs	r3, #4
 8008794:	0112      	lsls	r2, r2, #4
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	440b      	add	r3, r1
 800879a:	761a      	strb	r2, [r3, #24]
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	e000e100 	.word	0xe000e100
 80087ac:	e000ed00 	.word	0xe000ed00

080087b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80087b0:	b580      	push	{r7, lr}
 80087b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80087b4:	2100      	movs	r1, #0
 80087b6:	f06f 0004 	mvn.w	r0, #4
 80087ba:	f7ff ffcf 	bl	800875c <__NVIC_SetPriority>
#endif
}
 80087be:	bf00      	nop
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087ca:	f3ef 8305 	mrs	r3, IPSR
 80087ce:	603b      	str	r3, [r7, #0]
  return(result);
 80087d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80087d6:	f06f 0305 	mvn.w	r3, #5
 80087da:	607b      	str	r3, [r7, #4]
 80087dc:	e00c      	b.n	80087f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80087de:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <osKernelInitialize+0x44>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d105      	bne.n	80087f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80087e6:	4b08      	ldr	r3, [pc, #32]	; (8008808 <osKernelInitialize+0x44>)
 80087e8:	2201      	movs	r2, #1
 80087ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	607b      	str	r3, [r7, #4]
 80087f0:	e002      	b.n	80087f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80087f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087f8:	687b      	ldr	r3, [r7, #4]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	20000954 	.word	0x20000954

0800880c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008812:	f3ef 8305 	mrs	r3, IPSR
 8008816:	603b      	str	r3, [r7, #0]
  return(result);
 8008818:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <osKernelStart+0x1a>
    stat = osErrorISR;
 800881e:	f06f 0305 	mvn.w	r3, #5
 8008822:	607b      	str	r3, [r7, #4]
 8008824:	e010      	b.n	8008848 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008826:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <osKernelStart+0x48>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d109      	bne.n	8008842 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800882e:	f7ff ffbf 	bl	80087b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008832:	4b08      	ldr	r3, [pc, #32]	; (8008854 <osKernelStart+0x48>)
 8008834:	2202      	movs	r2, #2
 8008836:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008838:	f001 f9e0 	bl	8009bfc <vTaskStartScheduler>
      stat = osOK;
 800883c:	2300      	movs	r3, #0
 800883e:	607b      	str	r3, [r7, #4]
 8008840:	e002      	b.n	8008848 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008846:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008848:	687b      	ldr	r3, [r7, #4]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000954 	.word	0x20000954

08008858 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008858:	b580      	push	{r7, lr}
 800885a:	b08e      	sub	sp, #56	; 0x38
 800885c:	af04      	add	r7, sp, #16
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008864:	2300      	movs	r3, #0
 8008866:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008868:	f3ef 8305 	mrs	r3, IPSR
 800886c:	617b      	str	r3, [r7, #20]
  return(result);
 800886e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008870:	2b00      	cmp	r3, #0
 8008872:	d17e      	bne.n	8008972 <osThreadNew+0x11a>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d07b      	beq.n	8008972 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800887a:	2380      	movs	r3, #128	; 0x80
 800887c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800887e:	2318      	movs	r3, #24
 8008880:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008882:	2300      	movs	r3, #0
 8008884:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800888a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d045      	beq.n	800891e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <osThreadNew+0x48>
        name = attr->name;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d008      	beq.n	80088c6 <osThreadNew+0x6e>
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	2b38      	cmp	r3, #56	; 0x38
 80088b8:	d805      	bhi.n	80088c6 <osThreadNew+0x6e>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <osThreadNew+0x72>
        return (NULL);
 80088c6:	2300      	movs	r3, #0
 80088c8:	e054      	b.n	8008974 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	089b      	lsrs	r3, r3, #2
 80088d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00e      	beq.n	8008900 <osThreadNew+0xa8>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	2b5b      	cmp	r3, #91	; 0x5b
 80088e8:	d90a      	bls.n	8008900 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d006      	beq.n	8008900 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <osThreadNew+0xa8>
        mem = 1;
 80088fa:	2301      	movs	r3, #1
 80088fc:	61bb      	str	r3, [r7, #24]
 80088fe:	e010      	b.n	8008922 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10c      	bne.n	8008922 <osThreadNew+0xca>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d108      	bne.n	8008922 <osThreadNew+0xca>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d104      	bne.n	8008922 <osThreadNew+0xca>
          mem = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	61bb      	str	r3, [r7, #24]
 800891c:	e001      	b.n	8008922 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d110      	bne.n	800894a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008930:	9202      	str	r2, [sp, #8]
 8008932:	9301      	str	r3, [sp, #4]
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	6a3a      	ldr	r2, [r7, #32]
 800893c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 ff86 	bl	8009850 <xTaskCreateStatic>
 8008944:	4603      	mov	r3, r0
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	e013      	b.n	8008972 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d110      	bne.n	8008972 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	b29a      	uxth	r2, r3
 8008954:	f107 0310 	add.w	r3, r7, #16
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f000 ffd1 	bl	800990a <xTaskCreate>
 8008968:	4603      	mov	r3, r0
 800896a:	2b01      	cmp	r3, #1
 800896c:	d001      	beq.n	8008972 <osThreadNew+0x11a>
            hTask = NULL;
 800896e:	2300      	movs	r3, #0
 8008970:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008972:	693b      	ldr	r3, [r7, #16]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3728      	adds	r7, #40	; 0x28
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008984:	f3ef 8305 	mrs	r3, IPSR
 8008988:	60bb      	str	r3, [r7, #8]
  return(result);
 800898a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800898c:	2b00      	cmp	r3, #0
 800898e:	d003      	beq.n	8008998 <osDelay+0x1c>
    stat = osErrorISR;
 8008990:	f06f 0305 	mvn.w	r3, #5
 8008994:	60fb      	str	r3, [r7, #12]
 8008996:	e007      	b.n	80089a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008998:	2300      	movs	r3, #0
 800899a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d002      	beq.n	80089a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f001 f8f6 	bl	8009b94 <vTaskDelay>
    }
  }

  return (stat);
 80089a8:	68fb      	ldr	r3, [r7, #12]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b08a      	sub	sp, #40	; 0x28
 80089b6:	af02      	add	r7, sp, #8
 80089b8:	60f8      	str	r0, [r7, #12]
 80089ba:	60b9      	str	r1, [r7, #8]
 80089bc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089c2:	f3ef 8305 	mrs	r3, IPSR
 80089c6:	613b      	str	r3, [r7, #16]
  return(result);
 80089c8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d175      	bne.n	8008aba <osSemaphoreNew+0x108>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d072      	beq.n	8008aba <osSemaphoreNew+0x108>
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d86e      	bhi.n	8008aba <osSemaphoreNew+0x108>
    mem = -1;
 80089dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d015      	beq.n	8008a14 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d006      	beq.n	80089fe <osSemaphoreNew+0x4c>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	2b4f      	cmp	r3, #79	; 0x4f
 80089f6:	d902      	bls.n	80089fe <osSemaphoreNew+0x4c>
        mem = 1;
 80089f8:	2301      	movs	r3, #1
 80089fa:	61bb      	str	r3, [r7, #24]
 80089fc:	e00c      	b.n	8008a18 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d108      	bne.n	8008a18 <osSemaphoreNew+0x66>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d104      	bne.n	8008a18 <osSemaphoreNew+0x66>
          mem = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	e001      	b.n	8008a18 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a1e:	d04c      	beq.n	8008aba <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d128      	bne.n	8008a78 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d10a      	bne.n	8008a42 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	2203      	movs	r2, #3
 8008a32:	9200      	str	r2, [sp, #0]
 8008a34:	2200      	movs	r2, #0
 8008a36:	2100      	movs	r1, #0
 8008a38:	2001      	movs	r0, #1
 8008a3a:	f000 f993 	bl	8008d64 <xQueueGenericCreateStatic>
 8008a3e:	61f8      	str	r0, [r7, #28]
 8008a40:	e005      	b.n	8008a4e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008a42:	2203      	movs	r2, #3
 8008a44:	2100      	movs	r1, #0
 8008a46:	2001      	movs	r0, #1
 8008a48:	f000 fa04 	bl	8008e54 <xQueueGenericCreate>
 8008a4c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d022      	beq.n	8008a9a <osSemaphoreNew+0xe8>
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d01f      	beq.n	8008a9a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2100      	movs	r1, #0
 8008a60:	69f8      	ldr	r0, [r7, #28]
 8008a62:	f000 fabf 	bl	8008fe4 <xQueueGenericSend>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d016      	beq.n	8008a9a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008a6c:	69f8      	ldr	r0, [r7, #28]
 8008a6e:	f000 fd33 	bl	80094d8 <vQueueDelete>
            hSemaphore = NULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	e010      	b.n	8008a9a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d108      	bne.n	8008a90 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	461a      	mov	r2, r3
 8008a84:	68b9      	ldr	r1, [r7, #8]
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f000 fa41 	bl	8008f0e <xQueueCreateCountingSemaphoreStatic>
 8008a8c:	61f8      	str	r0, [r7, #28]
 8008a8e:	e004      	b.n	8008a9a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008a90:	68b9      	ldr	r1, [r7, #8]
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f000 fa72 	bl	8008f7c <xQueueCreateCountingSemaphore>
 8008a98:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00c      	beq.n	8008aba <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <osSemaphoreNew+0xfc>
          name = attr->name;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	617b      	str	r3, [r7, #20]
 8008aac:	e001      	b.n	8008ab2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008ab2:	6979      	ldr	r1, [r7, #20]
 8008ab4:	69f8      	ldr	r0, [r7, #28]
 8008ab6:	f000 fe43 	bl	8009740 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008aba:	69fb      	ldr	r3, [r7, #28]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3720      	adds	r7, #32
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4a07      	ldr	r2, [pc, #28]	; (8008af0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ad4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	4a06      	ldr	r2, [pc, #24]	; (8008af4 <vApplicationGetIdleTaskMemory+0x30>)
 8008ada:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2280      	movs	r2, #128	; 0x80
 8008ae0:	601a      	str	r2, [r3, #0]
}
 8008ae2:	bf00      	nop
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	20000958 	.word	0x20000958
 8008af4:	200009b4 	.word	0x200009b4

08008af8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4a07      	ldr	r2, [pc, #28]	; (8008b24 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	4a06      	ldr	r2, [pc, #24]	; (8008b28 <vApplicationGetTimerTaskMemory+0x30>)
 8008b0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b16:	601a      	str	r2, [r3, #0]
}
 8008b18:	bf00      	nop
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	20000bb4 	.word	0x20000bb4
 8008b28:	20000c10 	.word	0x20000c10

08008b2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f103 0208 	add.w	r2, r3, #8
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f103 0208 	add.w	r2, r3, #8
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f103 0208 	add.w	r2, r3, #8
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b7a:	bf00      	nop
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b86:	b480      	push	{r7}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	689a      	ldr	r2, [r3, #8]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	601a      	str	r2, [r3, #0]
}
 8008bc2:	bf00      	nop
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b085      	sub	sp, #20
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008be4:	d103      	bne.n	8008bee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	e00c      	b.n	8008c08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	e002      	b.n	8008bfc <vListInsert+0x2e>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d2f6      	bcs.n	8008bf6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	601a      	str	r2, [r3, #0]
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6892      	ldr	r2, [r2, #8]
 8008c56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	6852      	ldr	r2, [r2, #4]
 8008c60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d103      	bne.n	8008c74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	689a      	ldr	r2, [r3, #8]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	1e5a      	subs	r2, r3, #1
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10a      	bne.n	8008cbe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008cba:	bf00      	nop
 8008cbc:	e7fe      	b.n	8008cbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008cbe:	f002 f941 	bl	800af44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cca:	68f9      	ldr	r1, [r7, #12]
 8008ccc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cce:	fb01 f303 	mul.w	r3, r1, r3
 8008cd2:	441a      	add	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	68f9      	ldr	r1, [r7, #12]
 8008cf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cf4:	fb01 f303 	mul.w	r3, r1, r3
 8008cf8:	441a      	add	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	22ff      	movs	r2, #255	; 0xff
 8008d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	22ff      	movs	r2, #255	; 0xff
 8008d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d114      	bne.n	8008d3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01a      	beq.n	8008d52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3310      	adds	r3, #16
 8008d20:	4618      	mov	r0, r3
 8008d22:	f001 f9f5 	bl	800a110 <xTaskRemoveFromEventList>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d012      	beq.n	8008d52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d2c:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <xQueueGenericReset+0xcc>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	e009      	b.n	8008d52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3310      	adds	r3, #16
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7ff fef2 	bl	8008b2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3324      	adds	r3, #36	; 0x24
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff feed 	bl	8008b2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d52:	f002 f927 	bl	800afa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d56:	2301      	movs	r3, #1
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	e000ed04 	.word	0xe000ed04

08008d64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08e      	sub	sp, #56	; 0x38
 8008d68:	af02      	add	r7, sp, #8
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
 8008d70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10a      	bne.n	8008d8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d8a:	bf00      	nop
 8008d8c:	e7fe      	b.n	8008d8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10a      	bne.n	8008daa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008da6:	bf00      	nop
 8008da8:	e7fe      	b.n	8008da8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <xQueueGenericCreateStatic+0x52>
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <xQueueGenericCreateStatic+0x56>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e000      	b.n	8008dbc <xQueueGenericCreateStatic+0x58>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10a      	bne.n	8008dd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	623b      	str	r3, [r7, #32]
}
 8008dd2:	bf00      	nop
 8008dd4:	e7fe      	b.n	8008dd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d102      	bne.n	8008de2 <xQueueGenericCreateStatic+0x7e>
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <xQueueGenericCreateStatic+0x82>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e000      	b.n	8008de8 <xQueueGenericCreateStatic+0x84>
 8008de6:	2300      	movs	r3, #0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10a      	bne.n	8008e02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	61fb      	str	r3, [r7, #28]
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e02:	2350      	movs	r3, #80	; 0x50
 8008e04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2b50      	cmp	r3, #80	; 0x50
 8008e0a:	d00a      	beq.n	8008e22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	61bb      	str	r3, [r7, #24]
}
 8008e1e:	bf00      	nop
 8008e20:	e7fe      	b.n	8008e20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00d      	beq.n	8008e4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	68b9      	ldr	r1, [r7, #8]
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 f83f 	bl	8008ec8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3730      	adds	r7, #48	; 0x30
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08a      	sub	sp, #40	; 0x28
 8008e58:	af02      	add	r7, sp, #8
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10a      	bne.n	8008e7e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6c:	f383 8811 	msr	BASEPRI, r3
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	613b      	str	r3, [r7, #16]
}
 8008e7a:	bf00      	nop
 8008e7c:	e7fe      	b.n	8008e7c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	fb02 f303 	mul.w	r3, r2, r3
 8008e86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	3350      	adds	r3, #80	; 0x50
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f002 f97b 	bl	800b188 <pvPortMalloc>
 8008e92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d011      	beq.n	8008ebe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	3350      	adds	r3, #80	; 0x50
 8008ea2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008eac:	79fa      	ldrb	r2, [r7, #7]
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	68b9      	ldr	r1, [r7, #8]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 f805 	bl	8008ec8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ebe:	69bb      	ldr	r3, [r7, #24]
	}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3720      	adds	r7, #32
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d103      	bne.n	8008ee4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	601a      	str	r2, [r3, #0]
 8008ee2:	e002      	b.n	8008eea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ef6:	2101      	movs	r1, #1
 8008ef8:	69b8      	ldr	r0, [r7, #24]
 8008efa:	f7ff fecb 	bl	8008c94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	78fa      	ldrb	r2, [r7, #3]
 8008f02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f06:	bf00      	nop
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b08a      	sub	sp, #40	; 0x28
 8008f12:	af02      	add	r7, sp, #8
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	61bb      	str	r3, [r7, #24]
}
 8008f32:	bf00      	nop
 8008f34:	e7fe      	b.n	8008f34 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d90a      	bls.n	8008f54 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	617b      	str	r3, [r7, #20]
}
 8008f50:	bf00      	nop
 8008f52:	e7fe      	b.n	8008f52 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008f54:	2302      	movs	r3, #2
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f7ff ff00 	bl	8008d64 <xQueueGenericCreateStatic>
 8008f64:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008f72:	69fb      	ldr	r3, [r7, #28]
	}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3720      	adds	r7, #32
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10a      	bne.n	8008fa2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	613b      	str	r3, [r7, #16]
}
 8008f9e:	bf00      	nop
 8008fa0:	e7fe      	b.n	8008fa0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d90a      	bls.n	8008fc0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	60fb      	str	r3, [r7, #12]
}
 8008fbc:	bf00      	nop
 8008fbe:	e7fe      	b.n	8008fbe <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7ff ff45 	bl	8008e54 <xQueueGenericCreate>
 8008fca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008fd8:	697b      	ldr	r3, [r7, #20]
	}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
	...

08008fe4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08e      	sub	sp, #56	; 0x38
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <xQueueGenericSend+0x32>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d103      	bne.n	8009024 <xQueueGenericSend+0x40>
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <xQueueGenericSend+0x44>
 8009024:	2301      	movs	r3, #1
 8009026:	e000      	b.n	800902a <xQueueGenericSend+0x46>
 8009028:	2300      	movs	r3, #0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10a      	bne.n	8009044 <xQueueGenericSend+0x60>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2b02      	cmp	r3, #2
 8009048:	d103      	bne.n	8009052 <xQueueGenericSend+0x6e>
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904e:	2b01      	cmp	r3, #1
 8009050:	d101      	bne.n	8009056 <xQueueGenericSend+0x72>
 8009052:	2301      	movs	r3, #1
 8009054:	e000      	b.n	8009058 <xQueueGenericSend+0x74>
 8009056:	2300      	movs	r3, #0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10a      	bne.n	8009072 <xQueueGenericSend+0x8e>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	623b      	str	r3, [r7, #32]
}
 800906e:	bf00      	nop
 8009070:	e7fe      	b.n	8009070 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009072:	f001 fa0b 	bl	800a48c <xTaskGetSchedulerState>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d102      	bne.n	8009082 <xQueueGenericSend+0x9e>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <xQueueGenericSend+0xa2>
 8009082:	2301      	movs	r3, #1
 8009084:	e000      	b.n	8009088 <xQueueGenericSend+0xa4>
 8009086:	2300      	movs	r3, #0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	61fb      	str	r3, [r7, #28]
}
 800909e:	bf00      	nop
 80090a0:	e7fe      	b.n	80090a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090a2:	f001 ff4f 	bl	800af44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d302      	bcc.n	80090b8 <xQueueGenericSend+0xd4>
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d129      	bne.n	800910c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	68b9      	ldr	r1, [r7, #8]
 80090bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090be:	f000 fa2e 	bl	800951e <prvCopyDataToQueue>
 80090c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d010      	beq.n	80090ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ce:	3324      	adds	r3, #36	; 0x24
 80090d0:	4618      	mov	r0, r3
 80090d2:	f001 f81d 	bl	800a110 <xTaskRemoveFromEventList>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d013      	beq.n	8009104 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090dc:	4b3f      	ldr	r3, [pc, #252]	; (80091dc <xQueueGenericSend+0x1f8>)
 80090de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	e00a      	b.n	8009104 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090f4:	4b39      	ldr	r3, [pc, #228]	; (80091dc <xQueueGenericSend+0x1f8>)
 80090f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009104:	f001 ff4e 	bl	800afa4 <vPortExitCritical>
				return pdPASS;
 8009108:	2301      	movs	r3, #1
 800910a:	e063      	b.n	80091d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d103      	bne.n	800911a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009112:	f001 ff47 	bl	800afa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009116:	2300      	movs	r3, #0
 8009118:	e05c      	b.n	80091d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800911a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911c:	2b00      	cmp	r3, #0
 800911e:	d106      	bne.n	800912e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009120:	f107 0314 	add.w	r3, r7, #20
 8009124:	4618      	mov	r0, r3
 8009126:	f001 f857 	bl	800a1d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800912a:	2301      	movs	r3, #1
 800912c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800912e:	f001 ff39 	bl	800afa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009132:	f000 fdc9 	bl	8009cc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009136:	f001 ff05 	bl	800af44 <vPortEnterCritical>
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009140:	b25b      	sxtb	r3, r3
 8009142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009146:	d103      	bne.n	8009150 <xQueueGenericSend+0x16c>
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009156:	b25b      	sxtb	r3, r3
 8009158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800915c:	d103      	bne.n	8009166 <xQueueGenericSend+0x182>
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009166:	f001 ff1d 	bl	800afa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800916a:	1d3a      	adds	r2, r7, #4
 800916c:	f107 0314 	add.w	r3, r7, #20
 8009170:	4611      	mov	r1, r2
 8009172:	4618      	mov	r0, r3
 8009174:	f001 f846 	bl	800a204 <xTaskCheckForTimeOut>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d124      	bne.n	80091c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800917e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009180:	f000 fac5 	bl	800970e <prvIsQueueFull>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d018      	beq.n	80091bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	3310      	adds	r3, #16
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	4611      	mov	r1, r2
 8009192:	4618      	mov	r0, r3
 8009194:	f000 ff6c 	bl	800a070 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800919a:	f000 fa50 	bl	800963e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800919e:	f000 fda1 	bl	8009ce4 <xTaskResumeAll>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f47f af7c 	bne.w	80090a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80091aa:	4b0c      	ldr	r3, [pc, #48]	; (80091dc <xQueueGenericSend+0x1f8>)
 80091ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	e772      	b.n	80090a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091be:	f000 fa3e 	bl	800963e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091c2:	f000 fd8f 	bl	8009ce4 <xTaskResumeAll>
 80091c6:	e76c      	b.n	80090a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ca:	f000 fa38 	bl	800963e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091ce:	f000 fd89 	bl	8009ce4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3738      	adds	r7, #56	; 0x38
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	e000ed04 	.word	0xe000ed04

080091e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b090      	sub	sp, #64	; 0x40
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
 80091ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80091f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10a      	bne.n	800920e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800920a:	bf00      	nop
 800920c:	e7fe      	b.n	800920c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d103      	bne.n	800921c <xQueueGenericSendFromISR+0x3c>
 8009214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <xQueueGenericSendFromISR+0x40>
 800921c:	2301      	movs	r3, #1
 800921e:	e000      	b.n	8009222 <xQueueGenericSendFromISR+0x42>
 8009220:	2300      	movs	r3, #0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10a      	bne.n	800923c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009238:	bf00      	nop
 800923a:	e7fe      	b.n	800923a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b02      	cmp	r3, #2
 8009240:	d103      	bne.n	800924a <xQueueGenericSendFromISR+0x6a>
 8009242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009246:	2b01      	cmp	r3, #1
 8009248:	d101      	bne.n	800924e <xQueueGenericSendFromISR+0x6e>
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <xQueueGenericSendFromISR+0x70>
 800924e:	2300      	movs	r3, #0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	623b      	str	r3, [r7, #32]
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800926a:	f001 ff4d 	bl	800b108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800926e:	f3ef 8211 	mrs	r2, BASEPRI
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	61fa      	str	r2, [r7, #28]
 8009284:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009286:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009288:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800928a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800928e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009292:	429a      	cmp	r2, r3
 8009294:	d302      	bcc.n	800929c <xQueueGenericSendFromISR+0xbc>
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b02      	cmp	r3, #2
 800929a:	d12f      	bne.n	80092fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800929c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	68b9      	ldr	r1, [r7, #8]
 80092b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092b2:	f000 f934 	bl	800951e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80092ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092be:	d112      	bne.n	80092e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d016      	beq.n	80092f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ca:	3324      	adds	r3, #36	; 0x24
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 ff1f 	bl	800a110 <xTaskRemoveFromEventList>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00e      	beq.n	80092f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00b      	beq.n	80092f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	e007      	b.n	80092f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092ea:	3301      	adds	r3, #1
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	b25a      	sxtb	r2, r3
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092f6:	2301      	movs	r3, #1
 80092f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80092fa:	e001      	b.n	8009300 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092fc:	2300      	movs	r3, #0
 80092fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009302:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800930a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800930c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800930e:	4618      	mov	r0, r3
 8009310:	3740      	adds	r7, #64	; 0x40
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b08c      	sub	sp, #48	; 0x30
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009324:	2300      	movs	r3, #0
 8009326:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10a      	bne.n	8009348 <xQueueReceive+0x30>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	623b      	str	r3, [r7, #32]
}
 8009344:	bf00      	nop
 8009346:	e7fe      	b.n	8009346 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d103      	bne.n	8009356 <xQueueReceive+0x3e>
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <xQueueReceive+0x42>
 8009356:	2301      	movs	r3, #1
 8009358:	e000      	b.n	800935c <xQueueReceive+0x44>
 800935a:	2300      	movs	r3, #0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10a      	bne.n	8009376 <xQueueReceive+0x5e>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	61fb      	str	r3, [r7, #28]
}
 8009372:	bf00      	nop
 8009374:	e7fe      	b.n	8009374 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009376:	f001 f889 	bl	800a48c <xTaskGetSchedulerState>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d102      	bne.n	8009386 <xQueueReceive+0x6e>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <xQueueReceive+0x72>
 8009386:	2301      	movs	r3, #1
 8009388:	e000      	b.n	800938c <xQueueReceive+0x74>
 800938a:	2300      	movs	r3, #0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <xQueueReceive+0x8e>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	61bb      	str	r3, [r7, #24]
}
 80093a2:	bf00      	nop
 80093a4:	e7fe      	b.n	80093a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093a6:	f001 fdcd 	bl	800af44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d01f      	beq.n	80093f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093b6:	68b9      	ldr	r1, [r7, #8]
 80093b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ba:	f000 f91a 	bl	80095f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c0:	1e5a      	subs	r2, r3, #1
 80093c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00f      	beq.n	80093ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	3310      	adds	r3, #16
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 fe9c 	bl	800a110 <xTaskRemoveFromEventList>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093de:	4b3d      	ldr	r3, [pc, #244]	; (80094d4 <xQueueReceive+0x1bc>)
 80093e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093ee:	f001 fdd9 	bl	800afa4 <vPortExitCritical>
				return pdPASS;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e069      	b.n	80094ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d103      	bne.n	8009404 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093fc:	f001 fdd2 	bl	800afa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009400:	2300      	movs	r3, #0
 8009402:	e062      	b.n	80094ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009406:	2b00      	cmp	r3, #0
 8009408:	d106      	bne.n	8009418 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800940a:	f107 0310 	add.w	r3, r7, #16
 800940e:	4618      	mov	r0, r3
 8009410:	f000 fee2 	bl	800a1d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009414:	2301      	movs	r3, #1
 8009416:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009418:	f001 fdc4 	bl	800afa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800941c:	f000 fc54 	bl	8009cc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009420:	f001 fd90 	bl	800af44 <vPortEnterCritical>
 8009424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800942a:	b25b      	sxtb	r3, r3
 800942c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009430:	d103      	bne.n	800943a <xQueueReceive+0x122>
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800943a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009440:	b25b      	sxtb	r3, r3
 8009442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009446:	d103      	bne.n	8009450 <xQueueReceive+0x138>
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009450:	f001 fda8 	bl	800afa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009454:	1d3a      	adds	r2, r7, #4
 8009456:	f107 0310 	add.w	r3, r7, #16
 800945a:	4611      	mov	r1, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fed1 	bl	800a204 <xTaskCheckForTimeOut>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d123      	bne.n	80094b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800946a:	f000 f93a 	bl	80096e2 <prvIsQueueEmpty>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d017      	beq.n	80094a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	3324      	adds	r3, #36	; 0x24
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	4611      	mov	r1, r2
 800947c:	4618      	mov	r0, r3
 800947e:	f000 fdf7 	bl	800a070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009484:	f000 f8db 	bl	800963e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009488:	f000 fc2c 	bl	8009ce4 <xTaskResumeAll>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d189      	bne.n	80093a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009492:	4b10      	ldr	r3, [pc, #64]	; (80094d4 <xQueueReceive+0x1bc>)
 8009494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009498:	601a      	str	r2, [r3, #0]
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	e780      	b.n	80093a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094a6:	f000 f8ca 	bl	800963e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094aa:	f000 fc1b 	bl	8009ce4 <xTaskResumeAll>
 80094ae:	e77a      	b.n	80093a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094b2:	f000 f8c4 	bl	800963e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094b6:	f000 fc15 	bl	8009ce4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094bc:	f000 f911 	bl	80096e2 <prvIsQueueEmpty>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f43f af6f 	beq.w	80093a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3730      	adds	r7, #48	; 0x30
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	e000ed04 	.word	0xe000ed04

080094d8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <vQueueDelete+0x28>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	60bb      	str	r3, [r7, #8]
}
 80094fc:	bf00      	nop
 80094fe:	e7fe      	b.n	80094fe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 f947 	bl	8009794 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800950c:	2b00      	cmp	r3, #0
 800950e:	d102      	bne.n	8009516 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f001 ff05 	bl	800b320 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009516:	bf00      	nop
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b086      	sub	sp, #24
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800952a:	2300      	movs	r3, #0
 800952c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009532:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10d      	bne.n	8009558 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d14d      	bne.n	80095e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	4618      	mov	r0, r3
 800954a:	f000 ffbd 	bl	800a4c8 <xTaskPriorityDisinherit>
 800954e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	609a      	str	r2, [r3, #8]
 8009556:	e043      	b.n	80095e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d119      	bne.n	8009592 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6858      	ldr	r0, [r3, #4]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009566:	461a      	mov	r2, r3
 8009568:	68b9      	ldr	r1, [r7, #8]
 800956a:	f002 fd78 	bl	800c05e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	685a      	ldr	r2, [r3, #4]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	441a      	add	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	685a      	ldr	r2, [r3, #4]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	429a      	cmp	r2, r3
 8009586:	d32b      	bcc.n	80095e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	605a      	str	r2, [r3, #4]
 8009590:	e026      	b.n	80095e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	68d8      	ldr	r0, [r3, #12]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959a:	461a      	mov	r2, r3
 800959c:	68b9      	ldr	r1, [r7, #8]
 800959e:	f002 fd5e 	bl	800c05e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	68da      	ldr	r2, [r3, #12]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	425b      	negs	r3, r3
 80095ac:	441a      	add	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	68da      	ldr	r2, [r3, #12]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d207      	bcs.n	80095ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	689a      	ldr	r2, [r3, #8]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	425b      	negs	r3, r3
 80095c8:	441a      	add	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d105      	bne.n	80095e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	3b01      	subs	r3, #1
 80095de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80095e8:	697b      	ldr	r3, [r7, #20]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3718      	adds	r7, #24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b082      	sub	sp, #8
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009600:	2b00      	cmp	r3, #0
 8009602:	d018      	beq.n	8009636 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960c:	441a      	add	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	68da      	ldr	r2, [r3, #12]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	429a      	cmp	r2, r3
 800961c:	d303      	bcc.n	8009626 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68d9      	ldr	r1, [r3, #12]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962e:	461a      	mov	r2, r3
 8009630:	6838      	ldr	r0, [r7, #0]
 8009632:	f002 fd14 	bl	800c05e <memcpy>
	}
}
 8009636:	bf00      	nop
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b084      	sub	sp, #16
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009646:	f001 fc7d 	bl	800af44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009650:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009652:	e011      	b.n	8009678 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009658:	2b00      	cmp	r3, #0
 800965a:	d012      	beq.n	8009682 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	3324      	adds	r3, #36	; 0x24
 8009660:	4618      	mov	r0, r3
 8009662:	f000 fd55 	bl	800a110 <xTaskRemoveFromEventList>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800966c:	f000 fe2c 	bl	800a2c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009670:	7bfb      	ldrb	r3, [r7, #15]
 8009672:	3b01      	subs	r3, #1
 8009674:	b2db      	uxtb	r3, r3
 8009676:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800967c:	2b00      	cmp	r3, #0
 800967e:	dce9      	bgt.n	8009654 <prvUnlockQueue+0x16>
 8009680:	e000      	b.n	8009684 <prvUnlockQueue+0x46>
					break;
 8009682:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	22ff      	movs	r2, #255	; 0xff
 8009688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800968c:	f001 fc8a 	bl	800afa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009690:	f001 fc58 	bl	800af44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800969a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800969c:	e011      	b.n	80096c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d012      	beq.n	80096cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	3310      	adds	r3, #16
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 fd30 	bl	800a110 <xTaskRemoveFromEventList>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d001      	beq.n	80096ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80096b6:	f000 fe07 	bl	800a2c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80096ba:	7bbb      	ldrb	r3, [r7, #14]
 80096bc:	3b01      	subs	r3, #1
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	dce9      	bgt.n	800969e <prvUnlockQueue+0x60>
 80096ca:	e000      	b.n	80096ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80096cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	22ff      	movs	r2, #255	; 0xff
 80096d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80096d6:	f001 fc65 	bl	800afa4 <vPortExitCritical>
}
 80096da:	bf00      	nop
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b084      	sub	sp, #16
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096ea:	f001 fc2b 	bl	800af44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d102      	bne.n	80096fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096f6:	2301      	movs	r3, #1
 80096f8:	60fb      	str	r3, [r7, #12]
 80096fa:	e001      	b.n	8009700 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096fc:	2300      	movs	r3, #0
 80096fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009700:	f001 fc50 	bl	800afa4 <vPortExitCritical>

	return xReturn;
 8009704:	68fb      	ldr	r3, [r7, #12]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009716:	f001 fc15 	bl	800af44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009722:	429a      	cmp	r2, r3
 8009724:	d102      	bne.n	800972c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009726:	2301      	movs	r3, #1
 8009728:	60fb      	str	r3, [r7, #12]
 800972a:	e001      	b.n	8009730 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800972c:	2300      	movs	r3, #0
 800972e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009730:	f001 fc38 	bl	800afa4 <vPortExitCritical>

	return xReturn;
 8009734:	68fb      	ldr	r3, [r7, #12]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800974a:	2300      	movs	r3, #0
 800974c:	60fb      	str	r3, [r7, #12]
 800974e:	e014      	b.n	800977a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009750:	4a0f      	ldr	r2, [pc, #60]	; (8009790 <vQueueAddToRegistry+0x50>)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10b      	bne.n	8009774 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800975c:	490c      	ldr	r1, [pc, #48]	; (8009790 <vQueueAddToRegistry+0x50>)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009766:	4a0a      	ldr	r2, [pc, #40]	; (8009790 <vQueueAddToRegistry+0x50>)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	00db      	lsls	r3, r3, #3
 800976c:	4413      	add	r3, r2
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009772:	e006      	b.n	8009782 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	3301      	adds	r3, #1
 8009778:	60fb      	str	r3, [r7, #12]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b07      	cmp	r3, #7
 800977e:	d9e7      	bls.n	8009750 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009780:	bf00      	nop
 8009782:	bf00      	nop
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	20001010 	.word	0x20001010

08009794 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800979c:	2300      	movs	r3, #0
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	e016      	b.n	80097d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80097a2:	4a10      	ldr	r2, [pc, #64]	; (80097e4 <vQueueUnregisterQueue+0x50>)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	4413      	add	r3, r2
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d10b      	bne.n	80097ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80097b2:	4a0c      	ldr	r2, [pc, #48]	; (80097e4 <vQueueUnregisterQueue+0x50>)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2100      	movs	r1, #0
 80097b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80097bc:	4a09      	ldr	r2, [pc, #36]	; (80097e4 <vQueueUnregisterQueue+0x50>)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	00db      	lsls	r3, r3, #3
 80097c2:	4413      	add	r3, r2
 80097c4:	2200      	movs	r2, #0
 80097c6:	605a      	str	r2, [r3, #4]
				break;
 80097c8:	e006      	b.n	80097d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3301      	adds	r3, #1
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b07      	cmp	r3, #7
 80097d4:	d9e5      	bls.n	80097a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80097d6:	bf00      	nop
 80097d8:	bf00      	nop
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	20001010 	.word	0x20001010

080097e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80097f8:	f001 fba4 	bl	800af44 <vPortEnterCritical>
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009802:	b25b      	sxtb	r3, r3
 8009804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009808:	d103      	bne.n	8009812 <vQueueWaitForMessageRestricted+0x2a>
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009818:	b25b      	sxtb	r3, r3
 800981a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800981e:	d103      	bne.n	8009828 <vQueueWaitForMessageRestricted+0x40>
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009828:	f001 fbbc 	bl	800afa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009830:	2b00      	cmp	r3, #0
 8009832:	d106      	bne.n	8009842 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	3324      	adds	r3, #36	; 0x24
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	68b9      	ldr	r1, [r7, #8]
 800983c:	4618      	mov	r0, r3
 800983e:	f000 fc3b 	bl	800a0b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009842:	6978      	ldr	r0, [r7, #20]
 8009844:	f7ff fefb 	bl	800963e <prvUnlockQueue>
	}
 8009848:	bf00      	nop
 800984a:	3718      	adds	r7, #24
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08e      	sub	sp, #56	; 0x38
 8009854:	af04      	add	r7, sp, #16
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800985e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10a      	bne.n	800987a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	623b      	str	r3, [r7, #32]
}
 8009876:	bf00      	nop
 8009878:	e7fe      	b.n	8009878 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800987a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10a      	bne.n	8009896 <xTaskCreateStatic+0x46>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	61fb      	str	r3, [r7, #28]
}
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009896:	235c      	movs	r3, #92	; 0x5c
 8009898:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	2b5c      	cmp	r3, #92	; 0x5c
 800989e:	d00a      	beq.n	80098b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	61bb      	str	r3, [r7, #24]
}
 80098b2:	bf00      	nop
 80098b4:	e7fe      	b.n	80098b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80098b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d01e      	beq.n	80098fc <xTaskCreateStatic+0xac>
 80098be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d01b      	beq.n	80098fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80098c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80098ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d0:	2202      	movs	r2, #2
 80098d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80098d6:	2300      	movs	r3, #0
 80098d8:	9303      	str	r3, [sp, #12]
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	9302      	str	r3, [sp, #8]
 80098de:	f107 0314 	add.w	r3, r7, #20
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	68b9      	ldr	r1, [r7, #8]
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 f850 	bl	8009994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098f6:	f000 f8dd 	bl	8009ab4 <prvAddNewTaskToReadyList>
 80098fa:	e001      	b.n	8009900 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009900:	697b      	ldr	r3, [r7, #20]
	}
 8009902:	4618      	mov	r0, r3
 8009904:	3728      	adds	r7, #40	; 0x28
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800990a:	b580      	push	{r7, lr}
 800990c:	b08c      	sub	sp, #48	; 0x30
 800990e:	af04      	add	r7, sp, #16
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	603b      	str	r3, [r7, #0]
 8009916:	4613      	mov	r3, r2
 8009918:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800991a:	88fb      	ldrh	r3, [r7, #6]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4618      	mov	r0, r3
 8009920:	f001 fc32 	bl	800b188 <pvPortMalloc>
 8009924:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00e      	beq.n	800994a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800992c:	205c      	movs	r0, #92	; 0x5c
 800992e:	f001 fc2b 	bl	800b188 <pvPortMalloc>
 8009932:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	631a      	str	r2, [r3, #48]	; 0x30
 8009940:	e005      	b.n	800994e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009942:	6978      	ldr	r0, [r7, #20]
 8009944:	f001 fcec 	bl	800b320 <vPortFree>
 8009948:	e001      	b.n	800994e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800994a:	2300      	movs	r3, #0
 800994c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d017      	beq.n	8009984 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800995c:	88fa      	ldrh	r2, [r7, #6]
 800995e:	2300      	movs	r3, #0
 8009960:	9303      	str	r3, [sp, #12]
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	9302      	str	r3, [sp, #8]
 8009966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009968:	9301      	str	r3, [sp, #4]
 800996a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	68b9      	ldr	r1, [r7, #8]
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 f80e 	bl	8009994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009978:	69f8      	ldr	r0, [r7, #28]
 800997a:	f000 f89b 	bl	8009ab4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800997e:	2301      	movs	r3, #1
 8009980:	61bb      	str	r3, [r7, #24]
 8009982:	e002      	b.n	800998a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009988:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800998a:	69bb      	ldr	r3, [r7, #24]
	}
 800998c:	4618      	mov	r0, r3
 800998e:	3720      	adds	r7, #32
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b088      	sub	sp, #32
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
 80099a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	461a      	mov	r2, r3
 80099ac:	21a5      	movs	r1, #165	; 0xa5
 80099ae:	f002 fb1d 	bl	800bfec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80099bc:	3b01      	subs	r3, #1
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	f023 0307 	bic.w	r3, r3, #7
 80099ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	f003 0307 	and.w	r3, r3, #7
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00a      	beq.n	80099ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	617b      	str	r3, [r7, #20]
}
 80099e8:	bf00      	nop
 80099ea:	e7fe      	b.n	80099ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d01f      	beq.n	8009a32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099f2:	2300      	movs	r3, #0
 80099f4:	61fb      	str	r3, [r7, #28]
 80099f6:	e012      	b.n	8009a1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	4413      	add	r3, r2
 80099fe:	7819      	ldrb	r1, [r3, #0]
 8009a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	4413      	add	r3, r2
 8009a06:	3334      	adds	r3, #52	; 0x34
 8009a08:	460a      	mov	r2, r1
 8009a0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	4413      	add	r3, r2
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d006      	beq.n	8009a26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	61fb      	str	r3, [r7, #28]
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	2b0f      	cmp	r3, #15
 8009a22:	d9e9      	bls.n	80099f8 <prvInitialiseNewTask+0x64>
 8009a24:	e000      	b.n	8009a28 <prvInitialiseNewTask+0x94>
			{
				break;
 8009a26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a30:	e003      	b.n	8009a3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3c:	2b37      	cmp	r3, #55	; 0x37
 8009a3e:	d901      	bls.n	8009a44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a40:	2337      	movs	r3, #55	; 0x37
 8009a42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a52:	2200      	movs	r2, #0
 8009a54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a58:	3304      	adds	r3, #4
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7ff f886 	bl	8008b6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a62:	3318      	adds	r3, #24
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7ff f881 	bl	8008b6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a82:	2200      	movs	r2, #0
 8009a84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	68f9      	ldr	r1, [r7, #12]
 8009a92:	69b8      	ldr	r0, [r7, #24]
 8009a94:	f001 f928 	bl	800ace8 <pxPortInitialiseStack>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009aaa:	bf00      	nop
 8009aac:	3720      	adds	r7, #32
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
	...

08009ab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009abc:	f001 fa42 	bl	800af44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ac0:	4b2d      	ldr	r3, [pc, #180]	; (8009b78 <prvAddNewTaskToReadyList+0xc4>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	4a2c      	ldr	r2, [pc, #176]	; (8009b78 <prvAddNewTaskToReadyList+0xc4>)
 8009ac8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009aca:	4b2c      	ldr	r3, [pc, #176]	; (8009b7c <prvAddNewTaskToReadyList+0xc8>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d109      	bne.n	8009ae6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ad2:	4a2a      	ldr	r2, [pc, #168]	; (8009b7c <prvAddNewTaskToReadyList+0xc8>)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ad8:	4b27      	ldr	r3, [pc, #156]	; (8009b78 <prvAddNewTaskToReadyList+0xc4>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d110      	bne.n	8009b02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ae0:	f000 fc16 	bl	800a310 <prvInitialiseTaskLists>
 8009ae4:	e00d      	b.n	8009b02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ae6:	4b26      	ldr	r3, [pc, #152]	; (8009b80 <prvAddNewTaskToReadyList+0xcc>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d109      	bne.n	8009b02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009aee:	4b23      	ldr	r3, [pc, #140]	; (8009b7c <prvAddNewTaskToReadyList+0xc8>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d802      	bhi.n	8009b02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009afc:	4a1f      	ldr	r2, [pc, #124]	; (8009b7c <prvAddNewTaskToReadyList+0xc8>)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b02:	4b20      	ldr	r3, [pc, #128]	; (8009b84 <prvAddNewTaskToReadyList+0xd0>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3301      	adds	r3, #1
 8009b08:	4a1e      	ldr	r2, [pc, #120]	; (8009b84 <prvAddNewTaskToReadyList+0xd0>)
 8009b0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009b0c:	4b1d      	ldr	r3, [pc, #116]	; (8009b84 <prvAddNewTaskToReadyList+0xd0>)
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b18:	4b1b      	ldr	r3, [pc, #108]	; (8009b88 <prvAddNewTaskToReadyList+0xd4>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d903      	bls.n	8009b28 <prvAddNewTaskToReadyList+0x74>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b24:	4a18      	ldr	r2, [pc, #96]	; (8009b88 <prvAddNewTaskToReadyList+0xd4>)
 8009b26:	6013      	str	r3, [r2, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4a15      	ldr	r2, [pc, #84]	; (8009b8c <prvAddNewTaskToReadyList+0xd8>)
 8009b36:	441a      	add	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4610      	mov	r0, r2
 8009b40:	f7ff f821 	bl	8008b86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009b44:	f001 fa2e 	bl	800afa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b48:	4b0d      	ldr	r3, [pc, #52]	; (8009b80 <prvAddNewTaskToReadyList+0xcc>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00e      	beq.n	8009b6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b50:	4b0a      	ldr	r3, [pc, #40]	; (8009b7c <prvAddNewTaskToReadyList+0xc8>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d207      	bcs.n	8009b6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b5e:	4b0c      	ldr	r3, [pc, #48]	; (8009b90 <prvAddNewTaskToReadyList+0xdc>)
 8009b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b6e:	bf00      	nop
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20001524 	.word	0x20001524
 8009b7c:	20001050 	.word	0x20001050
 8009b80:	20001530 	.word	0x20001530
 8009b84:	20001540 	.word	0x20001540
 8009b88:	2000152c 	.word	0x2000152c
 8009b8c:	20001054 	.word	0x20001054
 8009b90:	e000ed04 	.word	0xe000ed04

08009b94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d017      	beq.n	8009bd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ba6:	4b13      	ldr	r3, [pc, #76]	; (8009bf4 <vTaskDelay+0x60>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00a      	beq.n	8009bc4 <vTaskDelay+0x30>
	__asm volatile
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	60bb      	str	r3, [r7, #8]
}
 8009bc0:	bf00      	nop
 8009bc2:	e7fe      	b.n	8009bc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009bc4:	f000 f880 	bl	8009cc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009bc8:	2100      	movs	r1, #0
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fcea 	bl	800a5a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009bd0:	f000 f888 	bl	8009ce4 <xTaskResumeAll>
 8009bd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d107      	bne.n	8009bec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009bdc:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <vTaskDelay+0x64>)
 8009bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009bec:	bf00      	nop
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	2000154c 	.word	0x2000154c
 8009bf8:	e000ed04 	.word	0xe000ed04

08009bfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08a      	sub	sp, #40	; 0x28
 8009c00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c02:	2300      	movs	r3, #0
 8009c04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c0a:	463a      	mov	r2, r7
 8009c0c:	1d39      	adds	r1, r7, #4
 8009c0e:	f107 0308 	add.w	r3, r7, #8
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fe ff56 	bl	8008ac4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	9202      	str	r2, [sp, #8]
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	2300      	movs	r3, #0
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	2300      	movs	r3, #0
 8009c28:	460a      	mov	r2, r1
 8009c2a:	4921      	ldr	r1, [pc, #132]	; (8009cb0 <vTaskStartScheduler+0xb4>)
 8009c2c:	4821      	ldr	r0, [pc, #132]	; (8009cb4 <vTaskStartScheduler+0xb8>)
 8009c2e:	f7ff fe0f 	bl	8009850 <xTaskCreateStatic>
 8009c32:	4603      	mov	r3, r0
 8009c34:	4a20      	ldr	r2, [pc, #128]	; (8009cb8 <vTaskStartScheduler+0xbc>)
 8009c36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c38:	4b1f      	ldr	r3, [pc, #124]	; (8009cb8 <vTaskStartScheduler+0xbc>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d002      	beq.n	8009c46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c40:	2301      	movs	r3, #1
 8009c42:	617b      	str	r3, [r7, #20]
 8009c44:	e001      	b.n	8009c4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d102      	bne.n	8009c56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c50:	f000 fcfc 	bl	800a64c <xTimerCreateTimerTask>
 8009c54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d116      	bne.n	8009c8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	613b      	str	r3, [r7, #16]
}
 8009c6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c70:	4b12      	ldr	r3, [pc, #72]	; (8009cbc <vTaskStartScheduler+0xc0>)
 8009c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c78:	4b11      	ldr	r3, [pc, #68]	; (8009cc0 <vTaskStartScheduler+0xc4>)
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c7e:	4b11      	ldr	r3, [pc, #68]	; (8009cc4 <vTaskStartScheduler+0xc8>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c84:	f001 f8bc 	bl	800ae00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c88:	e00e      	b.n	8009ca8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c90:	d10a      	bne.n	8009ca8 <vTaskStartScheduler+0xac>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	60fb      	str	r3, [r7, #12]
}
 8009ca4:	bf00      	nop
 8009ca6:	e7fe      	b.n	8009ca6 <vTaskStartScheduler+0xaa>
}
 8009ca8:	bf00      	nop
 8009caa:	3718      	adds	r7, #24
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	0800f3f8 	.word	0x0800f3f8
 8009cb4:	0800a2e1 	.word	0x0800a2e1
 8009cb8:	20001548 	.word	0x20001548
 8009cbc:	20001544 	.word	0x20001544
 8009cc0:	20001530 	.word	0x20001530
 8009cc4:	20001528 	.word	0x20001528

08009cc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009cc8:	b480      	push	{r7}
 8009cca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ccc:	4b04      	ldr	r3, [pc, #16]	; (8009ce0 <vTaskSuspendAll+0x18>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	4a03      	ldr	r2, [pc, #12]	; (8009ce0 <vTaskSuspendAll+0x18>)
 8009cd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009cd6:	bf00      	nop
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr
 8009ce0:	2000154c 	.word	0x2000154c

08009ce4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009cea:	2300      	movs	r3, #0
 8009cec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009cf2:	4b42      	ldr	r3, [pc, #264]	; (8009dfc <xTaskResumeAll+0x118>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10a      	bne.n	8009d10 <xTaskResumeAll+0x2c>
	__asm volatile
 8009cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	603b      	str	r3, [r7, #0]
}
 8009d0c:	bf00      	nop
 8009d0e:	e7fe      	b.n	8009d0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d10:	f001 f918 	bl	800af44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d14:	4b39      	ldr	r3, [pc, #228]	; (8009dfc <xTaskResumeAll+0x118>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	4a38      	ldr	r2, [pc, #224]	; (8009dfc <xTaskResumeAll+0x118>)
 8009d1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d1e:	4b37      	ldr	r3, [pc, #220]	; (8009dfc <xTaskResumeAll+0x118>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d162      	bne.n	8009dec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d26:	4b36      	ldr	r3, [pc, #216]	; (8009e00 <xTaskResumeAll+0x11c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d05e      	beq.n	8009dec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d2e:	e02f      	b.n	8009d90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d30:	4b34      	ldr	r3, [pc, #208]	; (8009e04 <xTaskResumeAll+0x120>)
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3318      	adds	r3, #24
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7fe ff7f 	bl	8008c40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	3304      	adds	r3, #4
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fe ff7a 	bl	8008c40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d50:	4b2d      	ldr	r3, [pc, #180]	; (8009e08 <xTaskResumeAll+0x124>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d903      	bls.n	8009d60 <xTaskResumeAll+0x7c>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5c:	4a2a      	ldr	r2, [pc, #168]	; (8009e08 <xTaskResumeAll+0x124>)
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d64:	4613      	mov	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4a27      	ldr	r2, [pc, #156]	; (8009e0c <xTaskResumeAll+0x128>)
 8009d6e:	441a      	add	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	3304      	adds	r3, #4
 8009d74:	4619      	mov	r1, r3
 8009d76:	4610      	mov	r0, r2
 8009d78:	f7fe ff05 	bl	8008b86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d80:	4b23      	ldr	r3, [pc, #140]	; (8009e10 <xTaskResumeAll+0x12c>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d302      	bcc.n	8009d90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009d8a:	4b22      	ldr	r3, [pc, #136]	; (8009e14 <xTaskResumeAll+0x130>)
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d90:	4b1c      	ldr	r3, [pc, #112]	; (8009e04 <xTaskResumeAll+0x120>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1cb      	bne.n	8009d30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d9e:	f000 fb55 	bl	800a44c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009da2:	4b1d      	ldr	r3, [pc, #116]	; (8009e18 <xTaskResumeAll+0x134>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d010      	beq.n	8009dd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009dae:	f000 f847 	bl	8009e40 <xTaskIncrementTick>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009db8:	4b16      	ldr	r3, [pc, #88]	; (8009e14 <xTaskResumeAll+0x130>)
 8009dba:	2201      	movs	r2, #1
 8009dbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1f1      	bne.n	8009dae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009dca:	4b13      	ldr	r3, [pc, #76]	; (8009e18 <xTaskResumeAll+0x134>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009dd0:	4b10      	ldr	r3, [pc, #64]	; (8009e14 <xTaskResumeAll+0x130>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d009      	beq.n	8009dec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ddc:	4b0f      	ldr	r3, [pc, #60]	; (8009e1c <xTaskResumeAll+0x138>)
 8009dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009dec:	f001 f8da 	bl	800afa4 <vPortExitCritical>

	return xAlreadyYielded;
 8009df0:	68bb      	ldr	r3, [r7, #8]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	2000154c 	.word	0x2000154c
 8009e00:	20001524 	.word	0x20001524
 8009e04:	200014e4 	.word	0x200014e4
 8009e08:	2000152c 	.word	0x2000152c
 8009e0c:	20001054 	.word	0x20001054
 8009e10:	20001050 	.word	0x20001050
 8009e14:	20001538 	.word	0x20001538
 8009e18:	20001534 	.word	0x20001534
 8009e1c:	e000ed04 	.word	0xe000ed04

08009e20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009e26:	4b05      	ldr	r3, [pc, #20]	; (8009e3c <xTaskGetTickCount+0x1c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009e2c:	687b      	ldr	r3, [r7, #4]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	370c      	adds	r7, #12
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	20001528 	.word	0x20001528

08009e40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e46:	2300      	movs	r3, #0
 8009e48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e4a:	4b4f      	ldr	r3, [pc, #316]	; (8009f88 <xTaskIncrementTick+0x148>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f040 808f 	bne.w	8009f72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e54:	4b4d      	ldr	r3, [pc, #308]	; (8009f8c <xTaskIncrementTick+0x14c>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e5c:	4a4b      	ldr	r2, [pc, #300]	; (8009f8c <xTaskIncrementTick+0x14c>)
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d120      	bne.n	8009eaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e68:	4b49      	ldr	r3, [pc, #292]	; (8009f90 <xTaskIncrementTick+0x150>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00a      	beq.n	8009e88 <xTaskIncrementTick+0x48>
	__asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	603b      	str	r3, [r7, #0]
}
 8009e84:	bf00      	nop
 8009e86:	e7fe      	b.n	8009e86 <xTaskIncrementTick+0x46>
 8009e88:	4b41      	ldr	r3, [pc, #260]	; (8009f90 <xTaskIncrementTick+0x150>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	60fb      	str	r3, [r7, #12]
 8009e8e:	4b41      	ldr	r3, [pc, #260]	; (8009f94 <xTaskIncrementTick+0x154>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a3f      	ldr	r2, [pc, #252]	; (8009f90 <xTaskIncrementTick+0x150>)
 8009e94:	6013      	str	r3, [r2, #0]
 8009e96:	4a3f      	ldr	r2, [pc, #252]	; (8009f94 <xTaskIncrementTick+0x154>)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6013      	str	r3, [r2, #0]
 8009e9c:	4b3e      	ldr	r3, [pc, #248]	; (8009f98 <xTaskIncrementTick+0x158>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	4a3d      	ldr	r2, [pc, #244]	; (8009f98 <xTaskIncrementTick+0x158>)
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	f000 fad1 	bl	800a44c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009eaa:	4b3c      	ldr	r3, [pc, #240]	; (8009f9c <xTaskIncrementTick+0x15c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d349      	bcc.n	8009f48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eb4:	4b36      	ldr	r3, [pc, #216]	; (8009f90 <xTaskIncrementTick+0x150>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d104      	bne.n	8009ec8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ebe:	4b37      	ldr	r3, [pc, #220]	; (8009f9c <xTaskIncrementTick+0x15c>)
 8009ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ec4:	601a      	str	r2, [r3, #0]
					break;
 8009ec6:	e03f      	b.n	8009f48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ec8:	4b31      	ldr	r3, [pc, #196]	; (8009f90 <xTaskIncrementTick+0x150>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d203      	bcs.n	8009ee8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ee0:	4a2e      	ldr	r2, [pc, #184]	; (8009f9c <xTaskIncrementTick+0x15c>)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ee6:	e02f      	b.n	8009f48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	3304      	adds	r3, #4
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7fe fea7 	bl	8008c40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d004      	beq.n	8009f04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	3318      	adds	r3, #24
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe fe9e 	bl	8008c40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f08:	4b25      	ldr	r3, [pc, #148]	; (8009fa0 <xTaskIncrementTick+0x160>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d903      	bls.n	8009f18 <xTaskIncrementTick+0xd8>
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f14:	4a22      	ldr	r2, [pc, #136]	; (8009fa0 <xTaskIncrementTick+0x160>)
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4a1f      	ldr	r2, [pc, #124]	; (8009fa4 <xTaskIncrementTick+0x164>)
 8009f26:	441a      	add	r2, r3
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	f7fe fe29 	bl	8008b86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f38:	4b1b      	ldr	r3, [pc, #108]	; (8009fa8 <xTaskIncrementTick+0x168>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d3b8      	bcc.n	8009eb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009f42:	2301      	movs	r3, #1
 8009f44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f46:	e7b5      	b.n	8009eb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f48:	4b17      	ldr	r3, [pc, #92]	; (8009fa8 <xTaskIncrementTick+0x168>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4e:	4915      	ldr	r1, [pc, #84]	; (8009fa4 <xTaskIncrementTick+0x164>)
 8009f50:	4613      	mov	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4413      	add	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	440b      	add	r3, r1
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d901      	bls.n	8009f64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009f60:	2301      	movs	r3, #1
 8009f62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f64:	4b11      	ldr	r3, [pc, #68]	; (8009fac <xTaskIncrementTick+0x16c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d007      	beq.n	8009f7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	617b      	str	r3, [r7, #20]
 8009f70:	e004      	b.n	8009f7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f72:	4b0f      	ldr	r3, [pc, #60]	; (8009fb0 <xTaskIncrementTick+0x170>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	3301      	adds	r3, #1
 8009f78:	4a0d      	ldr	r2, [pc, #52]	; (8009fb0 <xTaskIncrementTick+0x170>)
 8009f7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f7c:	697b      	ldr	r3, [r7, #20]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3718      	adds	r7, #24
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	2000154c 	.word	0x2000154c
 8009f8c:	20001528 	.word	0x20001528
 8009f90:	200014dc 	.word	0x200014dc
 8009f94:	200014e0 	.word	0x200014e0
 8009f98:	2000153c 	.word	0x2000153c
 8009f9c:	20001544 	.word	0x20001544
 8009fa0:	2000152c 	.word	0x2000152c
 8009fa4:	20001054 	.word	0x20001054
 8009fa8:	20001050 	.word	0x20001050
 8009fac:	20001538 	.word	0x20001538
 8009fb0:	20001534 	.word	0x20001534

08009fb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009fba:	4b28      	ldr	r3, [pc, #160]	; (800a05c <vTaskSwitchContext+0xa8>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d003      	beq.n	8009fca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009fc2:	4b27      	ldr	r3, [pc, #156]	; (800a060 <vTaskSwitchContext+0xac>)
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009fc8:	e041      	b.n	800a04e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009fca:	4b25      	ldr	r3, [pc, #148]	; (800a060 <vTaskSwitchContext+0xac>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fd0:	4b24      	ldr	r3, [pc, #144]	; (800a064 <vTaskSwitchContext+0xb0>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	60fb      	str	r3, [r7, #12]
 8009fd6:	e010      	b.n	8009ffa <vTaskSwitchContext+0x46>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10a      	bne.n	8009ff4 <vTaskSwitchContext+0x40>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	607b      	str	r3, [r7, #4]
}
 8009ff0:	bf00      	nop
 8009ff2:	e7fe      	b.n	8009ff2 <vTaskSwitchContext+0x3e>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	491b      	ldr	r1, [pc, #108]	; (800a068 <vTaskSwitchContext+0xb4>)
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	4613      	mov	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4413      	add	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	440b      	add	r3, r1
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0e4      	beq.n	8009fd8 <vTaskSwitchContext+0x24>
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	4613      	mov	r3, r2
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	4413      	add	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4a13      	ldr	r2, [pc, #76]	; (800a068 <vTaskSwitchContext+0xb4>)
 800a01a:	4413      	add	r3, r2
 800a01c:	60bb      	str	r3, [r7, #8]
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	685a      	ldr	r2, [r3, #4]
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	605a      	str	r2, [r3, #4]
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	685a      	ldr	r2, [r3, #4]
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	3308      	adds	r3, #8
 800a030:	429a      	cmp	r2, r3
 800a032:	d104      	bne.n	800a03e <vTaskSwitchContext+0x8a>
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	605a      	str	r2, [r3, #4]
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	4a09      	ldr	r2, [pc, #36]	; (800a06c <vTaskSwitchContext+0xb8>)
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	4a06      	ldr	r2, [pc, #24]	; (800a064 <vTaskSwitchContext+0xb0>)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6013      	str	r3, [r2, #0]
}
 800a04e:	bf00      	nop
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	2000154c 	.word	0x2000154c
 800a060:	20001538 	.word	0x20001538
 800a064:	2000152c 	.word	0x2000152c
 800a068:	20001054 	.word	0x20001054
 800a06c:	20001050 	.word	0x20001050

0800a070 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10a      	bne.n	800a096 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	60fb      	str	r3, [r7, #12]
}
 800a092:	bf00      	nop
 800a094:	e7fe      	b.n	800a094 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a096:	4b07      	ldr	r3, [pc, #28]	; (800a0b4 <vTaskPlaceOnEventList+0x44>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3318      	adds	r3, #24
 800a09c:	4619      	mov	r1, r3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f7fe fd95 	bl	8008bce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	6838      	ldr	r0, [r7, #0]
 800a0a8:	f000 fa7c 	bl	800a5a4 <prvAddCurrentTaskToDelayedList>
}
 800a0ac:	bf00      	nop
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20001050 	.word	0x20001050

0800a0b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10a      	bne.n	800a0e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	617b      	str	r3, [r7, #20]
}
 800a0dc:	bf00      	nop
 800a0de:	e7fe      	b.n	800a0de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0e0:	4b0a      	ldr	r3, [pc, #40]	; (800a10c <vTaskPlaceOnEventListRestricted+0x54>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	3318      	adds	r3, #24
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f7fe fd4c 	bl	8008b86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a0f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0fa:	6879      	ldr	r1, [r7, #4]
 800a0fc:	68b8      	ldr	r0, [r7, #8]
 800a0fe:	f000 fa51 	bl	800a5a4 <prvAddCurrentTaskToDelayedList>
	}
 800a102:	bf00      	nop
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	20001050 	.word	0x20001050

0800a110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10a      	bne.n	800a13c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	60fb      	str	r3, [r7, #12]
}
 800a138:	bf00      	nop
 800a13a:	e7fe      	b.n	800a13a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	3318      	adds	r3, #24
 800a140:	4618      	mov	r0, r3
 800a142:	f7fe fd7d 	bl	8008c40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a146:	4b1e      	ldr	r3, [pc, #120]	; (800a1c0 <xTaskRemoveFromEventList+0xb0>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d11d      	bne.n	800a18a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	3304      	adds	r3, #4
 800a152:	4618      	mov	r0, r3
 800a154:	f7fe fd74 	bl	8008c40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a15c:	4b19      	ldr	r3, [pc, #100]	; (800a1c4 <xTaskRemoveFromEventList+0xb4>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	429a      	cmp	r2, r3
 800a162:	d903      	bls.n	800a16c <xTaskRemoveFromEventList+0x5c>
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a168:	4a16      	ldr	r2, [pc, #88]	; (800a1c4 <xTaskRemoveFromEventList+0xb4>)
 800a16a:	6013      	str	r3, [r2, #0]
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4a13      	ldr	r2, [pc, #76]	; (800a1c8 <xTaskRemoveFromEventList+0xb8>)
 800a17a:	441a      	add	r2, r3
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	3304      	adds	r3, #4
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7fe fcff 	bl	8008b86 <vListInsertEnd>
 800a188:	e005      	b.n	800a196 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	3318      	adds	r3, #24
 800a18e:	4619      	mov	r1, r3
 800a190:	480e      	ldr	r0, [pc, #56]	; (800a1cc <xTaskRemoveFromEventList+0xbc>)
 800a192:	f7fe fcf8 	bl	8008b86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19a:	4b0d      	ldr	r3, [pc, #52]	; (800a1d0 <xTaskRemoveFromEventList+0xc0>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d905      	bls.n	800a1b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a1a8:	4b0a      	ldr	r3, [pc, #40]	; (800a1d4 <xTaskRemoveFromEventList+0xc4>)
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	e001      	b.n	800a1b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a1b4:	697b      	ldr	r3, [r7, #20]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	2000154c 	.word	0x2000154c
 800a1c4:	2000152c 	.word	0x2000152c
 800a1c8:	20001054 	.word	0x20001054
 800a1cc:	200014e4 	.word	0x200014e4
 800a1d0:	20001050 	.word	0x20001050
 800a1d4:	20001538 	.word	0x20001538

0800a1d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1e0:	4b06      	ldr	r3, [pc, #24]	; (800a1fc <vTaskInternalSetTimeOutState+0x24>)
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1e8:	4b05      	ldr	r3, [pc, #20]	; (800a200 <vTaskInternalSetTimeOutState+0x28>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	605a      	str	r2, [r3, #4]
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	2000153c 	.word	0x2000153c
 800a200:	20001528 	.word	0x20001528

0800a204 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	613b      	str	r3, [r7, #16]
}
 800a226:	bf00      	nop
 800a228:	e7fe      	b.n	800a228 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10a      	bne.n	800a246 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	60fb      	str	r3, [r7, #12]
}
 800a242:	bf00      	nop
 800a244:	e7fe      	b.n	800a244 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a246:	f000 fe7d 	bl	800af44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a24a:	4b1d      	ldr	r3, [pc, #116]	; (800a2c0 <xTaskCheckForTimeOut+0xbc>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	69ba      	ldr	r2, [r7, #24]
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a262:	d102      	bne.n	800a26a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a264:	2300      	movs	r3, #0
 800a266:	61fb      	str	r3, [r7, #28]
 800a268:	e023      	b.n	800a2b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	4b15      	ldr	r3, [pc, #84]	; (800a2c4 <xTaskCheckForTimeOut+0xc0>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	429a      	cmp	r2, r3
 800a274:	d007      	beq.n	800a286 <xTaskCheckForTimeOut+0x82>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	69ba      	ldr	r2, [r7, #24]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d302      	bcc.n	800a286 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a280:	2301      	movs	r3, #1
 800a282:	61fb      	str	r3, [r7, #28]
 800a284:	e015      	b.n	800a2b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d20b      	bcs.n	800a2a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	1ad2      	subs	r2, r2, r3
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7ff ff9b 	bl	800a1d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	61fb      	str	r3, [r7, #28]
 800a2a6:	e004      	b.n	800a2b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a2b2:	f000 fe77 	bl	800afa4 <vPortExitCritical>

	return xReturn;
 800a2b6:	69fb      	ldr	r3, [r7, #28]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3720      	adds	r7, #32
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	20001528 	.word	0x20001528
 800a2c4:	2000153c 	.word	0x2000153c

0800a2c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a2cc:	4b03      	ldr	r3, [pc, #12]	; (800a2dc <vTaskMissedYield+0x14>)
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	601a      	str	r2, [r3, #0]
}
 800a2d2:	bf00      	nop
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	20001538 	.word	0x20001538

0800a2e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a2e8:	f000 f852 	bl	800a390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a2ec:	4b06      	ldr	r3, [pc, #24]	; (800a308 <prvIdleTask+0x28>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d9f9      	bls.n	800a2e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a2f4:	4b05      	ldr	r3, [pc, #20]	; (800a30c <prvIdleTask+0x2c>)
 800a2f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a304:	e7f0      	b.n	800a2e8 <prvIdleTask+0x8>
 800a306:	bf00      	nop
 800a308:	20001054 	.word	0x20001054
 800a30c:	e000ed04 	.word	0xe000ed04

0800a310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a316:	2300      	movs	r3, #0
 800a318:	607b      	str	r3, [r7, #4]
 800a31a:	e00c      	b.n	800a336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	4613      	mov	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4a12      	ldr	r2, [pc, #72]	; (800a370 <prvInitialiseTaskLists+0x60>)
 800a328:	4413      	add	r3, r2
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe fbfe 	bl	8008b2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3301      	adds	r3, #1
 800a334:	607b      	str	r3, [r7, #4]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b37      	cmp	r3, #55	; 0x37
 800a33a:	d9ef      	bls.n	800a31c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a33c:	480d      	ldr	r0, [pc, #52]	; (800a374 <prvInitialiseTaskLists+0x64>)
 800a33e:	f7fe fbf5 	bl	8008b2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a342:	480d      	ldr	r0, [pc, #52]	; (800a378 <prvInitialiseTaskLists+0x68>)
 800a344:	f7fe fbf2 	bl	8008b2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a348:	480c      	ldr	r0, [pc, #48]	; (800a37c <prvInitialiseTaskLists+0x6c>)
 800a34a:	f7fe fbef 	bl	8008b2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a34e:	480c      	ldr	r0, [pc, #48]	; (800a380 <prvInitialiseTaskLists+0x70>)
 800a350:	f7fe fbec 	bl	8008b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a354:	480b      	ldr	r0, [pc, #44]	; (800a384 <prvInitialiseTaskLists+0x74>)
 800a356:	f7fe fbe9 	bl	8008b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a35a:	4b0b      	ldr	r3, [pc, #44]	; (800a388 <prvInitialiseTaskLists+0x78>)
 800a35c:	4a05      	ldr	r2, [pc, #20]	; (800a374 <prvInitialiseTaskLists+0x64>)
 800a35e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a360:	4b0a      	ldr	r3, [pc, #40]	; (800a38c <prvInitialiseTaskLists+0x7c>)
 800a362:	4a05      	ldr	r2, [pc, #20]	; (800a378 <prvInitialiseTaskLists+0x68>)
 800a364:	601a      	str	r2, [r3, #0]
}
 800a366:	bf00      	nop
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	20001054 	.word	0x20001054
 800a374:	200014b4 	.word	0x200014b4
 800a378:	200014c8 	.word	0x200014c8
 800a37c:	200014e4 	.word	0x200014e4
 800a380:	200014f8 	.word	0x200014f8
 800a384:	20001510 	.word	0x20001510
 800a388:	200014dc 	.word	0x200014dc
 800a38c:	200014e0 	.word	0x200014e0

0800a390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a396:	e019      	b.n	800a3cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a398:	f000 fdd4 	bl	800af44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a39c:	4b10      	ldr	r3, [pc, #64]	; (800a3e0 <prvCheckTasksWaitingTermination+0x50>)
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fe fc49 	bl	8008c40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3ae:	4b0d      	ldr	r3, [pc, #52]	; (800a3e4 <prvCheckTasksWaitingTermination+0x54>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	4a0b      	ldr	r2, [pc, #44]	; (800a3e4 <prvCheckTasksWaitingTermination+0x54>)
 800a3b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a3b8:	4b0b      	ldr	r3, [pc, #44]	; (800a3e8 <prvCheckTasksWaitingTermination+0x58>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	4a0a      	ldr	r2, [pc, #40]	; (800a3e8 <prvCheckTasksWaitingTermination+0x58>)
 800a3c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a3c2:	f000 fdef 	bl	800afa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f810 	bl	800a3ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3cc:	4b06      	ldr	r3, [pc, #24]	; (800a3e8 <prvCheckTasksWaitingTermination+0x58>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1e1      	bne.n	800a398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a3d4:	bf00      	nop
 800a3d6:	bf00      	nop
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	200014f8 	.word	0x200014f8
 800a3e4:	20001524 	.word	0x20001524
 800a3e8:	2000150c 	.word	0x2000150c

0800a3ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d108      	bne.n	800a410 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a402:	4618      	mov	r0, r3
 800a404:	f000 ff8c 	bl	800b320 <vPortFree>
				vPortFree( pxTCB );
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 ff89 	bl	800b320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a40e:	e018      	b.n	800a442 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a416:	2b01      	cmp	r3, #1
 800a418:	d103      	bne.n	800a422 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 ff80 	bl	800b320 <vPortFree>
	}
 800a420:	e00f      	b.n	800a442 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d00a      	beq.n	800a442 <prvDeleteTCB+0x56>
	__asm volatile
 800a42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	60fb      	str	r3, [r7, #12]
}
 800a43e:	bf00      	nop
 800a440:	e7fe      	b.n	800a440 <prvDeleteTCB+0x54>
	}
 800a442:	bf00      	nop
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
	...

0800a44c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a452:	4b0c      	ldr	r3, [pc, #48]	; (800a484 <prvResetNextTaskUnblockTime+0x38>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d104      	bne.n	800a466 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a45c:	4b0a      	ldr	r3, [pc, #40]	; (800a488 <prvResetNextTaskUnblockTime+0x3c>)
 800a45e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a462:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a464:	e008      	b.n	800a478 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a466:	4b07      	ldr	r3, [pc, #28]	; (800a484 <prvResetNextTaskUnblockTime+0x38>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	4a04      	ldr	r2, [pc, #16]	; (800a488 <prvResetNextTaskUnblockTime+0x3c>)
 800a476:	6013      	str	r3, [r2, #0]
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	200014dc 	.word	0x200014dc
 800a488:	20001544 	.word	0x20001544

0800a48c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a492:	4b0b      	ldr	r3, [pc, #44]	; (800a4c0 <xTaskGetSchedulerState+0x34>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d102      	bne.n	800a4a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a49a:	2301      	movs	r3, #1
 800a49c:	607b      	str	r3, [r7, #4]
 800a49e:	e008      	b.n	800a4b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4a0:	4b08      	ldr	r3, [pc, #32]	; (800a4c4 <xTaskGetSchedulerState+0x38>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d102      	bne.n	800a4ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	607b      	str	r3, [r7, #4]
 800a4ac:	e001      	b.n	800a4b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a4b2:	687b      	ldr	r3, [r7, #4]
	}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	20001530 	.word	0x20001530
 800a4c4:	2000154c 	.word	0x2000154c

0800a4c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d056      	beq.n	800a58c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4de:	4b2e      	ldr	r3, [pc, #184]	; (800a598 <xTaskPriorityDisinherit+0xd0>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d00a      	beq.n	800a4fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	60fb      	str	r3, [r7, #12]
}
 800a4fa:	bf00      	nop
 800a4fc:	e7fe      	b.n	800a4fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10a      	bne.n	800a51c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	60bb      	str	r3, [r7, #8]
}
 800a518:	bf00      	nop
 800a51a:	e7fe      	b.n	800a51a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a520:	1e5a      	subs	r2, r3, #1
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a52e:	429a      	cmp	r2, r3
 800a530:	d02c      	beq.n	800a58c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a536:	2b00      	cmp	r3, #0
 800a538:	d128      	bne.n	800a58c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	3304      	adds	r3, #4
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fe fb7e 	bl	8008c40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a550:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a55c:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <xTaskPriorityDisinherit+0xd4>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	429a      	cmp	r2, r3
 800a562:	d903      	bls.n	800a56c <xTaskPriorityDisinherit+0xa4>
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a568:	4a0c      	ldr	r2, [pc, #48]	; (800a59c <xTaskPriorityDisinherit+0xd4>)
 800a56a:	6013      	str	r3, [r2, #0]
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a570:	4613      	mov	r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	4413      	add	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4a09      	ldr	r2, [pc, #36]	; (800a5a0 <xTaskPriorityDisinherit+0xd8>)
 800a57a:	441a      	add	r2, r3
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	3304      	adds	r3, #4
 800a580:	4619      	mov	r1, r3
 800a582:	4610      	mov	r0, r2
 800a584:	f7fe faff 	bl	8008b86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a588:	2301      	movs	r3, #1
 800a58a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a58c:	697b      	ldr	r3, [r7, #20]
	}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	20001050 	.word	0x20001050
 800a59c:	2000152c 	.word	0x2000152c
 800a5a0:	20001054 	.word	0x20001054

0800a5a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a5ae:	4b21      	ldr	r3, [pc, #132]	; (800a634 <prvAddCurrentTaskToDelayedList+0x90>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5b4:	4b20      	ldr	r3, [pc, #128]	; (800a638 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fb40 	bl	8008c40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5c6:	d10a      	bne.n	800a5de <prvAddCurrentTaskToDelayedList+0x3a>
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d007      	beq.n	800a5de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5ce:	4b1a      	ldr	r3, [pc, #104]	; (800a638 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4819      	ldr	r0, [pc, #100]	; (800a63c <prvAddCurrentTaskToDelayedList+0x98>)
 800a5d8:	f7fe fad5 	bl	8008b86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a5dc:	e026      	b.n	800a62c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a5e6:	4b14      	ldr	r3, [pc, #80]	; (800a638 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d209      	bcs.n	800a60a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5f6:	4b12      	ldr	r3, [pc, #72]	; (800a640 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	4b0f      	ldr	r3, [pc, #60]	; (800a638 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	3304      	adds	r3, #4
 800a600:	4619      	mov	r1, r3
 800a602:	4610      	mov	r0, r2
 800a604:	f7fe fae3 	bl	8008bce <vListInsert>
}
 800a608:	e010      	b.n	800a62c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a60a:	4b0e      	ldr	r3, [pc, #56]	; (800a644 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	4b0a      	ldr	r3, [pc, #40]	; (800a638 <prvAddCurrentTaskToDelayedList+0x94>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3304      	adds	r3, #4
 800a614:	4619      	mov	r1, r3
 800a616:	4610      	mov	r0, r2
 800a618:	f7fe fad9 	bl	8008bce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a61c:	4b0a      	ldr	r3, [pc, #40]	; (800a648 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	429a      	cmp	r2, r3
 800a624:	d202      	bcs.n	800a62c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a626:	4a08      	ldr	r2, [pc, #32]	; (800a648 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	6013      	str	r3, [r2, #0]
}
 800a62c:	bf00      	nop
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	20001528 	.word	0x20001528
 800a638:	20001050 	.word	0x20001050
 800a63c:	20001510 	.word	0x20001510
 800a640:	200014e0 	.word	0x200014e0
 800a644:	200014dc 	.word	0x200014dc
 800a648:	20001544 	.word	0x20001544

0800a64c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08a      	sub	sp, #40	; 0x28
 800a650:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a652:	2300      	movs	r3, #0
 800a654:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a656:	f000 fb07 	bl	800ac68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a65a:	4b1c      	ldr	r3, [pc, #112]	; (800a6cc <xTimerCreateTimerTask+0x80>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d021      	beq.n	800a6a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a662:	2300      	movs	r3, #0
 800a664:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a666:	2300      	movs	r3, #0
 800a668:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a66a:	1d3a      	adds	r2, r7, #4
 800a66c:	f107 0108 	add.w	r1, r7, #8
 800a670:	f107 030c 	add.w	r3, r7, #12
 800a674:	4618      	mov	r0, r3
 800a676:	f7fe fa3f 	bl	8008af8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a67a:	6879      	ldr	r1, [r7, #4]
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	9202      	str	r2, [sp, #8]
 800a682:	9301      	str	r3, [sp, #4]
 800a684:	2302      	movs	r3, #2
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	2300      	movs	r3, #0
 800a68a:	460a      	mov	r2, r1
 800a68c:	4910      	ldr	r1, [pc, #64]	; (800a6d0 <xTimerCreateTimerTask+0x84>)
 800a68e:	4811      	ldr	r0, [pc, #68]	; (800a6d4 <xTimerCreateTimerTask+0x88>)
 800a690:	f7ff f8de 	bl	8009850 <xTaskCreateStatic>
 800a694:	4603      	mov	r3, r0
 800a696:	4a10      	ldr	r2, [pc, #64]	; (800a6d8 <xTimerCreateTimerTask+0x8c>)
 800a698:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a69a:	4b0f      	ldr	r3, [pc, #60]	; (800a6d8 <xTimerCreateTimerTask+0x8c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d001      	beq.n	800a6a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10a      	bne.n	800a6c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	613b      	str	r3, [r7, #16]
}
 800a6be:	bf00      	nop
 800a6c0:	e7fe      	b.n	800a6c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a6c2:	697b      	ldr	r3, [r7, #20]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3718      	adds	r7, #24
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	20001580 	.word	0x20001580
 800a6d0:	0800f400 	.word	0x0800f400
 800a6d4:	0800a811 	.word	0x0800a811
 800a6d8:	20001584 	.word	0x20001584

0800a6dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b08a      	sub	sp, #40	; 0x28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10a      	bne.n	800a70a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	623b      	str	r3, [r7, #32]
}
 800a706:	bf00      	nop
 800a708:	e7fe      	b.n	800a708 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a70a:	4b1a      	ldr	r3, [pc, #104]	; (800a774 <xTimerGenericCommand+0x98>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d02a      	beq.n	800a768 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2b05      	cmp	r3, #5
 800a722:	dc18      	bgt.n	800a756 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a724:	f7ff feb2 	bl	800a48c <xTaskGetSchedulerState>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d109      	bne.n	800a742 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a72e:	4b11      	ldr	r3, [pc, #68]	; (800a774 <xTimerGenericCommand+0x98>)
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	f107 0110 	add.w	r1, r7, #16
 800a736:	2300      	movs	r3, #0
 800a738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a73a:	f7fe fc53 	bl	8008fe4 <xQueueGenericSend>
 800a73e:	6278      	str	r0, [r7, #36]	; 0x24
 800a740:	e012      	b.n	800a768 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a742:	4b0c      	ldr	r3, [pc, #48]	; (800a774 <xTimerGenericCommand+0x98>)
 800a744:	6818      	ldr	r0, [r3, #0]
 800a746:	f107 0110 	add.w	r1, r7, #16
 800a74a:	2300      	movs	r3, #0
 800a74c:	2200      	movs	r2, #0
 800a74e:	f7fe fc49 	bl	8008fe4 <xQueueGenericSend>
 800a752:	6278      	str	r0, [r7, #36]	; 0x24
 800a754:	e008      	b.n	800a768 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a756:	4b07      	ldr	r3, [pc, #28]	; (800a774 <xTimerGenericCommand+0x98>)
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	f107 0110 	add.w	r1, r7, #16
 800a75e:	2300      	movs	r3, #0
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	f7fe fd3d 	bl	80091e0 <xQueueGenericSendFromISR>
 800a766:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3728      	adds	r7, #40	; 0x28
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20001580 	.word	0x20001580

0800a778 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b088      	sub	sp, #32
 800a77c:	af02      	add	r7, sp, #8
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a782:	4b22      	ldr	r3, [pc, #136]	; (800a80c <prvProcessExpiredTimer+0x94>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	3304      	adds	r3, #4
 800a790:	4618      	mov	r0, r3
 800a792:	f7fe fa55 	bl	8008c40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a79c:	f003 0304 	and.w	r3, r3, #4
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d022      	beq.n	800a7ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	699a      	ldr	r2, [r3, #24]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	18d1      	adds	r1, r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	683a      	ldr	r2, [r7, #0]
 800a7b0:	6978      	ldr	r0, [r7, #20]
 800a7b2:	f000 f8d1 	bl	800a958 <prvInsertTimerInActiveList>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d01f      	beq.n	800a7fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7bc:	2300      	movs	r3, #0
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	6978      	ldr	r0, [r7, #20]
 800a7c8:	f7ff ff88 	bl	800a6dc <xTimerGenericCommand>
 800a7cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d113      	bne.n	800a7fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d8:	f383 8811 	msr	BASEPRI, r3
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	f3bf 8f4f 	dsb	sy
 800a7e4:	60fb      	str	r3, [r7, #12]
}
 800a7e6:	bf00      	nop
 800a7e8:	e7fe      	b.n	800a7e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7f0:	f023 0301 	bic.w	r3, r3, #1
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	6978      	ldr	r0, [r7, #20]
 800a802:	4798      	blx	r3
}
 800a804:	bf00      	nop
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	20001578 	.word	0x20001578

0800a810 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a818:	f107 0308 	add.w	r3, r7, #8
 800a81c:	4618      	mov	r0, r3
 800a81e:	f000 f857 	bl	800a8d0 <prvGetNextExpireTime>
 800a822:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	4619      	mov	r1, r3
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 f803 	bl	800a834 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a82e:	f000 f8d5 	bl	800a9dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a832:	e7f1      	b.n	800a818 <prvTimerTask+0x8>

0800a834 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a83e:	f7ff fa43 	bl	8009cc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a842:	f107 0308 	add.w	r3, r7, #8
 800a846:	4618      	mov	r0, r3
 800a848:	f000 f866 	bl	800a918 <prvSampleTimeNow>
 800a84c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d130      	bne.n	800a8b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10a      	bne.n	800a870 <prvProcessTimerOrBlockTask+0x3c>
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d806      	bhi.n	800a870 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a862:	f7ff fa3f 	bl	8009ce4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a866:	68f9      	ldr	r1, [r7, #12]
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f7ff ff85 	bl	800a778 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a86e:	e024      	b.n	800a8ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d008      	beq.n	800a888 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a876:	4b13      	ldr	r3, [pc, #76]	; (800a8c4 <prvProcessTimerOrBlockTask+0x90>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <prvProcessTimerOrBlockTask+0x50>
 800a880:	2301      	movs	r3, #1
 800a882:	e000      	b.n	800a886 <prvProcessTimerOrBlockTask+0x52>
 800a884:	2300      	movs	r3, #0
 800a886:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a888:	4b0f      	ldr	r3, [pc, #60]	; (800a8c8 <prvProcessTimerOrBlockTask+0x94>)
 800a88a:	6818      	ldr	r0, [r3, #0]
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	4619      	mov	r1, r3
 800a896:	f7fe ffa7 	bl	80097e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a89a:	f7ff fa23 	bl	8009ce4 <xTaskResumeAll>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10a      	bne.n	800a8ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a8a4:	4b09      	ldr	r3, [pc, #36]	; (800a8cc <prvProcessTimerOrBlockTask+0x98>)
 800a8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	f3bf 8f6f 	isb	sy
}
 800a8b4:	e001      	b.n	800a8ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a8b6:	f7ff fa15 	bl	8009ce4 <xTaskResumeAll>
}
 800a8ba:	bf00      	nop
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	2000157c 	.word	0x2000157c
 800a8c8:	20001580 	.word	0x20001580
 800a8cc:	e000ed04 	.word	0xe000ed04

0800a8d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a8d8:	4b0e      	ldr	r3, [pc, #56]	; (800a914 <prvGetNextExpireTime+0x44>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <prvGetNextExpireTime+0x16>
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	e000      	b.n	800a8e8 <prvGetNextExpireTime+0x18>
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d105      	bne.n	800a900 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8f4:	4b07      	ldr	r3, [pc, #28]	; (800a914 <prvGetNextExpireTime+0x44>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	60fb      	str	r3, [r7, #12]
 800a8fe:	e001      	b.n	800a904 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a900:	2300      	movs	r3, #0
 800a902:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a904:	68fb      	ldr	r3, [r7, #12]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	20001578 	.word	0x20001578

0800a918 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a920:	f7ff fa7e 	bl	8009e20 <xTaskGetTickCount>
 800a924:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a926:	4b0b      	ldr	r3, [pc, #44]	; (800a954 <prvSampleTimeNow+0x3c>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d205      	bcs.n	800a93c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a930:	f000 f936 	bl	800aba0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	e002      	b.n	800a942 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a942:	4a04      	ldr	r2, [pc, #16]	; (800a954 <prvSampleTimeNow+0x3c>)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a948:	68fb      	ldr	r3, [r7, #12]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	20001588 	.word	0x20001588

0800a958 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
 800a964:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a966:	2300      	movs	r3, #0
 800a968:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	68ba      	ldr	r2, [r7, #8]
 800a96e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d812      	bhi.n	800a9a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	1ad2      	subs	r2, r2, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d302      	bcc.n	800a992 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a98c:	2301      	movs	r3, #1
 800a98e:	617b      	str	r3, [r7, #20]
 800a990:	e01b      	b.n	800a9ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a992:	4b10      	ldr	r3, [pc, #64]	; (800a9d4 <prvInsertTimerInActiveList+0x7c>)
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3304      	adds	r3, #4
 800a99a:	4619      	mov	r1, r3
 800a99c:	4610      	mov	r0, r2
 800a99e:	f7fe f916 	bl	8008bce <vListInsert>
 800a9a2:	e012      	b.n	800a9ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d206      	bcs.n	800a9ba <prvInsertTimerInActiveList+0x62>
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d302      	bcc.n	800a9ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	617b      	str	r3, [r7, #20]
 800a9b8:	e007      	b.n	800a9ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9ba:	4b07      	ldr	r3, [pc, #28]	; (800a9d8 <prvInsertTimerInActiveList+0x80>)
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	f7fe f902 	bl	8008bce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a9ca:	697b      	ldr	r3, [r7, #20]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3718      	adds	r7, #24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	2000157c 	.word	0x2000157c
 800a9d8:	20001578 	.word	0x20001578

0800a9dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08e      	sub	sp, #56	; 0x38
 800a9e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9e2:	e0ca      	b.n	800ab7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	da18      	bge.n	800aa1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a9ea:	1d3b      	adds	r3, r7, #4
 800a9ec:	3304      	adds	r3, #4
 800a9ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10a      	bne.n	800aa0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	61fb      	str	r3, [r7, #28]
}
 800aa08:	bf00      	nop
 800aa0a:	e7fe      	b.n	800aa0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa12:	6850      	ldr	r0, [r2, #4]
 800aa14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa16:	6892      	ldr	r2, [r2, #8]
 800aa18:	4611      	mov	r1, r2
 800aa1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f2c0 80ab 	blt.w	800ab7a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d004      	beq.n	800aa3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa32:	3304      	adds	r3, #4
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe f903 	bl	8008c40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa3a:	463b      	mov	r3, r7
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7ff ff6b 	bl	800a918 <prvSampleTimeNow>
 800aa42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b09      	cmp	r3, #9
 800aa48:	f200 8096 	bhi.w	800ab78 <prvProcessReceivedCommands+0x19c>
 800aa4c:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <prvProcessReceivedCommands+0x78>)
 800aa4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa52:	bf00      	nop
 800aa54:	0800aa7d 	.word	0x0800aa7d
 800aa58:	0800aa7d 	.word	0x0800aa7d
 800aa5c:	0800aa7d 	.word	0x0800aa7d
 800aa60:	0800aaf1 	.word	0x0800aaf1
 800aa64:	0800ab05 	.word	0x0800ab05
 800aa68:	0800ab4f 	.word	0x0800ab4f
 800aa6c:	0800aa7d 	.word	0x0800aa7d
 800aa70:	0800aa7d 	.word	0x0800aa7d
 800aa74:	0800aaf1 	.word	0x0800aaf1
 800aa78:	0800ab05 	.word	0x0800ab05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa82:	f043 0301 	orr.w	r3, r3, #1
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	699b      	ldr	r3, [r3, #24]
 800aa94:	18d1      	adds	r1, r2, r3
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa9c:	f7ff ff5c 	bl	800a958 <prvInsertTimerInActiveList>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d069      	beq.n	800ab7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aab4:	f003 0304 	and.w	r3, r3, #4
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d05e      	beq.n	800ab7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	441a      	add	r2, r3
 800aac4:	2300      	movs	r3, #0
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	2300      	movs	r3, #0
 800aaca:	2100      	movs	r1, #0
 800aacc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aace:	f7ff fe05 	bl	800a6dc <xTimerGenericCommand>
 800aad2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aad4:	6a3b      	ldr	r3, [r7, #32]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d14f      	bne.n	800ab7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	61bb      	str	r3, [r7, #24]
}
 800aaec:	bf00      	nop
 800aaee:	e7fe      	b.n	800aaee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaf6:	f023 0301 	bic.w	r3, r3, #1
 800aafa:	b2da      	uxtb	r2, r3
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ab02:	e03a      	b.n	800ab7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab0a:	f043 0301 	orr.w	r3, r3, #1
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10a      	bne.n	800ab3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	617b      	str	r3, [r7, #20]
}
 800ab36:	bf00      	nop
 800ab38:	e7fe      	b.n	800ab38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3c:	699a      	ldr	r2, [r3, #24]
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab40:	18d1      	adds	r1, r2, r3
 800ab42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab48:	f7ff ff06 	bl	800a958 <prvInsertTimerInActiveList>
					break;
 800ab4c:	e015      	b.n	800ab7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab54:	f003 0302 	and.w	r3, r3, #2
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d103      	bne.n	800ab64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ab5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab5e:	f000 fbdf 	bl	800b320 <vPortFree>
 800ab62:	e00a      	b.n	800ab7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab6a:	f023 0301 	bic.w	r3, r3, #1
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab76:	e000      	b.n	800ab7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ab78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab7a:	4b08      	ldr	r3, [pc, #32]	; (800ab9c <prvProcessReceivedCommands+0x1c0>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	1d39      	adds	r1, r7, #4
 800ab80:	2200      	movs	r2, #0
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7fe fbc8 	bl	8009318 <xQueueReceive>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f47f af2a 	bne.w	800a9e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ab90:	bf00      	nop
 800ab92:	bf00      	nop
 800ab94:	3730      	adds	r7, #48	; 0x30
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	20001580 	.word	0x20001580

0800aba0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aba6:	e048      	b.n	800ac3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aba8:	4b2d      	ldr	r3, [pc, #180]	; (800ac60 <prvSwitchTimerLists+0xc0>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb2:	4b2b      	ldr	r3, [pc, #172]	; (800ac60 <prvSwitchTimerLists+0xc0>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	3304      	adds	r3, #4
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7fe f83d 	bl	8008c40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abd4:	f003 0304 	and.w	r3, r3, #4
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d02e      	beq.n	800ac3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	4413      	add	r3, r2
 800abe4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	429a      	cmp	r2, r3
 800abec:	d90e      	bls.n	800ac0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abfa:	4b19      	ldr	r3, [pc, #100]	; (800ac60 <prvSwitchTimerLists+0xc0>)
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	3304      	adds	r3, #4
 800ac02:	4619      	mov	r1, r3
 800ac04:	4610      	mov	r0, r2
 800ac06:	f7fd ffe2 	bl	8008bce <vListInsert>
 800ac0a:	e016      	b.n	800ac3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	2300      	movs	r3, #0
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	2100      	movs	r1, #0
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f7ff fd60 	bl	800a6dc <xTimerGenericCommand>
 800ac1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10a      	bne.n	800ac3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ac24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	603b      	str	r3, [r7, #0]
}
 800ac36:	bf00      	nop
 800ac38:	e7fe      	b.n	800ac38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac3a:	4b09      	ldr	r3, [pc, #36]	; (800ac60 <prvSwitchTimerLists+0xc0>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1b1      	bne.n	800aba8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac44:	4b06      	ldr	r3, [pc, #24]	; (800ac60 <prvSwitchTimerLists+0xc0>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac4a:	4b06      	ldr	r3, [pc, #24]	; (800ac64 <prvSwitchTimerLists+0xc4>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a04      	ldr	r2, [pc, #16]	; (800ac60 <prvSwitchTimerLists+0xc0>)
 800ac50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac52:	4a04      	ldr	r2, [pc, #16]	; (800ac64 <prvSwitchTimerLists+0xc4>)
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	6013      	str	r3, [r2, #0]
}
 800ac58:	bf00      	nop
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	20001578 	.word	0x20001578
 800ac64:	2000157c 	.word	0x2000157c

0800ac68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac6e:	f000 f969 	bl	800af44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac72:	4b15      	ldr	r3, [pc, #84]	; (800acc8 <prvCheckForValidListAndQueue+0x60>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d120      	bne.n	800acbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac7a:	4814      	ldr	r0, [pc, #80]	; (800accc <prvCheckForValidListAndQueue+0x64>)
 800ac7c:	f7fd ff56 	bl	8008b2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac80:	4813      	ldr	r0, [pc, #76]	; (800acd0 <prvCheckForValidListAndQueue+0x68>)
 800ac82:	f7fd ff53 	bl	8008b2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac86:	4b13      	ldr	r3, [pc, #76]	; (800acd4 <prvCheckForValidListAndQueue+0x6c>)
 800ac88:	4a10      	ldr	r2, [pc, #64]	; (800accc <prvCheckForValidListAndQueue+0x64>)
 800ac8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac8c:	4b12      	ldr	r3, [pc, #72]	; (800acd8 <prvCheckForValidListAndQueue+0x70>)
 800ac8e:	4a10      	ldr	r2, [pc, #64]	; (800acd0 <prvCheckForValidListAndQueue+0x68>)
 800ac90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac92:	2300      	movs	r3, #0
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	4b11      	ldr	r3, [pc, #68]	; (800acdc <prvCheckForValidListAndQueue+0x74>)
 800ac98:	4a11      	ldr	r2, [pc, #68]	; (800ace0 <prvCheckForValidListAndQueue+0x78>)
 800ac9a:	2110      	movs	r1, #16
 800ac9c:	200a      	movs	r0, #10
 800ac9e:	f7fe f861 	bl	8008d64 <xQueueGenericCreateStatic>
 800aca2:	4603      	mov	r3, r0
 800aca4:	4a08      	ldr	r2, [pc, #32]	; (800acc8 <prvCheckForValidListAndQueue+0x60>)
 800aca6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aca8:	4b07      	ldr	r3, [pc, #28]	; (800acc8 <prvCheckForValidListAndQueue+0x60>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d005      	beq.n	800acbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800acb0:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <prvCheckForValidListAndQueue+0x60>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	490b      	ldr	r1, [pc, #44]	; (800ace4 <prvCheckForValidListAndQueue+0x7c>)
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe fd42 	bl	8009740 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acbc:	f000 f972 	bl	800afa4 <vPortExitCritical>
}
 800acc0:	bf00      	nop
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	20001580 	.word	0x20001580
 800accc:	20001550 	.word	0x20001550
 800acd0:	20001564 	.word	0x20001564
 800acd4:	20001578 	.word	0x20001578
 800acd8:	2000157c 	.word	0x2000157c
 800acdc:	2000162c 	.word	0x2000162c
 800ace0:	2000158c 	.word	0x2000158c
 800ace4:	0800f408 	.word	0x0800f408

0800ace8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	3b04      	subs	r3, #4
 800acf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	3b04      	subs	r3, #4
 800ad06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	f023 0201 	bic.w	r2, r3, #1
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	3b04      	subs	r3, #4
 800ad16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad18:	4a0c      	ldr	r2, [pc, #48]	; (800ad4c <pxPortInitialiseStack+0x64>)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	3b14      	subs	r3, #20
 800ad22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3b04      	subs	r3, #4
 800ad2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f06f 0202 	mvn.w	r2, #2
 800ad36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	3b20      	subs	r3, #32
 800ad3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	0800ad51 	.word	0x0800ad51

0800ad50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad56:	2300      	movs	r3, #0
 800ad58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad5a:	4b12      	ldr	r3, [pc, #72]	; (800ada4 <prvTaskExitError+0x54>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad62:	d00a      	beq.n	800ad7a <prvTaskExitError+0x2a>
	__asm volatile
 800ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	60fb      	str	r3, [r7, #12]
}
 800ad76:	bf00      	nop
 800ad78:	e7fe      	b.n	800ad78 <prvTaskExitError+0x28>
	__asm volatile
 800ad7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	60bb      	str	r3, [r7, #8]
}
 800ad8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad8e:	bf00      	nop
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d0fc      	beq.n	800ad90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad96:	bf00      	nop
 800ad98:	bf00      	nop
 800ad9a:	3714      	adds	r7, #20
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	20000010 	.word	0x20000010
	...

0800adb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800adb0:	4b07      	ldr	r3, [pc, #28]	; (800add0 <pxCurrentTCBConst2>)
 800adb2:	6819      	ldr	r1, [r3, #0]
 800adb4:	6808      	ldr	r0, [r1, #0]
 800adb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adba:	f380 8809 	msr	PSP, r0
 800adbe:	f3bf 8f6f 	isb	sy
 800adc2:	f04f 0000 	mov.w	r0, #0
 800adc6:	f380 8811 	msr	BASEPRI, r0
 800adca:	4770      	bx	lr
 800adcc:	f3af 8000 	nop.w

0800add0 <pxCurrentTCBConst2>:
 800add0:	20001050 	.word	0x20001050
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800add4:	bf00      	nop
 800add6:	bf00      	nop

0800add8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800add8:	4808      	ldr	r0, [pc, #32]	; (800adfc <prvPortStartFirstTask+0x24>)
 800adda:	6800      	ldr	r0, [r0, #0]
 800addc:	6800      	ldr	r0, [r0, #0]
 800adde:	f380 8808 	msr	MSP, r0
 800ade2:	f04f 0000 	mov.w	r0, #0
 800ade6:	f380 8814 	msr	CONTROL, r0
 800adea:	b662      	cpsie	i
 800adec:	b661      	cpsie	f
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	df00      	svc	0
 800adf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800adfa:	bf00      	nop
 800adfc:	e000ed08 	.word	0xe000ed08

0800ae00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ae06:	4b46      	ldr	r3, [pc, #280]	; (800af20 <xPortStartScheduler+0x120>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a46      	ldr	r2, [pc, #280]	; (800af24 <xPortStartScheduler+0x124>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d10a      	bne.n	800ae26 <xPortStartScheduler+0x26>
	__asm volatile
 800ae10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	613b      	str	r3, [r7, #16]
}
 800ae22:	bf00      	nop
 800ae24:	e7fe      	b.n	800ae24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae26:	4b3e      	ldr	r3, [pc, #248]	; (800af20 <xPortStartScheduler+0x120>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a3f      	ldr	r2, [pc, #252]	; (800af28 <xPortStartScheduler+0x128>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d10a      	bne.n	800ae46 <xPortStartScheduler+0x46>
	__asm volatile
 800ae30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	60fb      	str	r3, [r7, #12]
}
 800ae42:	bf00      	nop
 800ae44:	e7fe      	b.n	800ae44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae46:	4b39      	ldr	r3, [pc, #228]	; (800af2c <xPortStartScheduler+0x12c>)
 800ae48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	22ff      	movs	r2, #255	; 0xff
 800ae56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae60:	78fb      	ldrb	r3, [r7, #3]
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	4b31      	ldr	r3, [pc, #196]	; (800af30 <xPortStartScheduler+0x130>)
 800ae6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae6e:	4b31      	ldr	r3, [pc, #196]	; (800af34 <xPortStartScheduler+0x134>)
 800ae70:	2207      	movs	r2, #7
 800ae72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae74:	e009      	b.n	800ae8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ae76:	4b2f      	ldr	r3, [pc, #188]	; (800af34 <xPortStartScheduler+0x134>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	4a2d      	ldr	r2, [pc, #180]	; (800af34 <xPortStartScheduler+0x134>)
 800ae7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae80:	78fb      	ldrb	r3, [r7, #3]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	005b      	lsls	r3, r3, #1
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae8a:	78fb      	ldrb	r3, [r7, #3]
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae92:	2b80      	cmp	r3, #128	; 0x80
 800ae94:	d0ef      	beq.n	800ae76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae96:	4b27      	ldr	r3, [pc, #156]	; (800af34 <xPortStartScheduler+0x134>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f1c3 0307 	rsb	r3, r3, #7
 800ae9e:	2b04      	cmp	r3, #4
 800aea0:	d00a      	beq.n	800aeb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	60bb      	str	r3, [r7, #8]
}
 800aeb4:	bf00      	nop
 800aeb6:	e7fe      	b.n	800aeb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aeb8:	4b1e      	ldr	r3, [pc, #120]	; (800af34 <xPortStartScheduler+0x134>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	021b      	lsls	r3, r3, #8
 800aebe:	4a1d      	ldr	r2, [pc, #116]	; (800af34 <xPortStartScheduler+0x134>)
 800aec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aec2:	4b1c      	ldr	r3, [pc, #112]	; (800af34 <xPortStartScheduler+0x134>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aeca:	4a1a      	ldr	r2, [pc, #104]	; (800af34 <xPortStartScheduler+0x134>)
 800aecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aed6:	4b18      	ldr	r3, [pc, #96]	; (800af38 <xPortStartScheduler+0x138>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a17      	ldr	r2, [pc, #92]	; (800af38 <xPortStartScheduler+0x138>)
 800aedc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aee2:	4b15      	ldr	r3, [pc, #84]	; (800af38 <xPortStartScheduler+0x138>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a14      	ldr	r2, [pc, #80]	; (800af38 <xPortStartScheduler+0x138>)
 800aee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aeec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aeee:	f000 f8dd 	bl	800b0ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aef2:	4b12      	ldr	r3, [pc, #72]	; (800af3c <xPortStartScheduler+0x13c>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aef8:	f000 f8fc 	bl	800b0f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aefc:	4b10      	ldr	r3, [pc, #64]	; (800af40 <xPortStartScheduler+0x140>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a0f      	ldr	r2, [pc, #60]	; (800af40 <xPortStartScheduler+0x140>)
 800af02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800af06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af08:	f7ff ff66 	bl	800add8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af0c:	f7ff f852 	bl	8009fb4 <vTaskSwitchContext>
	prvTaskExitError();
 800af10:	f7ff ff1e 	bl	800ad50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3718      	adds	r7, #24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	e000ed00 	.word	0xe000ed00
 800af24:	410fc271 	.word	0x410fc271
 800af28:	410fc270 	.word	0x410fc270
 800af2c:	e000e400 	.word	0xe000e400
 800af30:	2000167c 	.word	0x2000167c
 800af34:	20001680 	.word	0x20001680
 800af38:	e000ed20 	.word	0xe000ed20
 800af3c:	20000010 	.word	0x20000010
 800af40:	e000ef34 	.word	0xe000ef34

0800af44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	607b      	str	r3, [r7, #4]
}
 800af5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af5e:	4b0f      	ldr	r3, [pc, #60]	; (800af9c <vPortEnterCritical+0x58>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3301      	adds	r3, #1
 800af64:	4a0d      	ldr	r2, [pc, #52]	; (800af9c <vPortEnterCritical+0x58>)
 800af66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af68:	4b0c      	ldr	r3, [pc, #48]	; (800af9c <vPortEnterCritical+0x58>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d10f      	bne.n	800af90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af70:	4b0b      	ldr	r3, [pc, #44]	; (800afa0 <vPortEnterCritical+0x5c>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00a      	beq.n	800af90 <vPortEnterCritical+0x4c>
	__asm volatile
 800af7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	603b      	str	r3, [r7, #0]
}
 800af8c:	bf00      	nop
 800af8e:	e7fe      	b.n	800af8e <vPortEnterCritical+0x4a>
	}
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	20000010 	.word	0x20000010
 800afa0:	e000ed04 	.word	0xe000ed04

0800afa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800afaa:	4b12      	ldr	r3, [pc, #72]	; (800aff4 <vPortExitCritical+0x50>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10a      	bne.n	800afc8 <vPortExitCritical+0x24>
	__asm volatile
 800afb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb6:	f383 8811 	msr	BASEPRI, r3
 800afba:	f3bf 8f6f 	isb	sy
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	607b      	str	r3, [r7, #4]
}
 800afc4:	bf00      	nop
 800afc6:	e7fe      	b.n	800afc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800afc8:	4b0a      	ldr	r3, [pc, #40]	; (800aff4 <vPortExitCritical+0x50>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	3b01      	subs	r3, #1
 800afce:	4a09      	ldr	r2, [pc, #36]	; (800aff4 <vPortExitCritical+0x50>)
 800afd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800afd2:	4b08      	ldr	r3, [pc, #32]	; (800aff4 <vPortExitCritical+0x50>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d105      	bne.n	800afe6 <vPortExitCritical+0x42>
 800afda:	2300      	movs	r3, #0
 800afdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	f383 8811 	msr	BASEPRI, r3
}
 800afe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800afe6:	bf00      	nop
 800afe8:	370c      	adds	r7, #12
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	20000010 	.word	0x20000010
	...

0800b000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b000:	f3ef 8009 	mrs	r0, PSP
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	4b15      	ldr	r3, [pc, #84]	; (800b060 <pxCurrentTCBConst>)
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	f01e 0f10 	tst.w	lr, #16
 800b010:	bf08      	it	eq
 800b012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01a:	6010      	str	r0, [r2, #0]
 800b01c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b020:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b024:	f380 8811 	msr	BASEPRI, r0
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	f3bf 8f6f 	isb	sy
 800b030:	f7fe ffc0 	bl	8009fb4 <vTaskSwitchContext>
 800b034:	f04f 0000 	mov.w	r0, #0
 800b038:	f380 8811 	msr	BASEPRI, r0
 800b03c:	bc09      	pop	{r0, r3}
 800b03e:	6819      	ldr	r1, [r3, #0]
 800b040:	6808      	ldr	r0, [r1, #0]
 800b042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b046:	f01e 0f10 	tst.w	lr, #16
 800b04a:	bf08      	it	eq
 800b04c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b050:	f380 8809 	msr	PSP, r0
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	f3af 8000 	nop.w

0800b060 <pxCurrentTCBConst>:
 800b060:	20001050 	.word	0x20001050
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b064:	bf00      	nop
 800b066:	bf00      	nop

0800b068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	607b      	str	r3, [r7, #4]
}
 800b080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b082:	f7fe fedd 	bl	8009e40 <xTaskIncrementTick>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d003      	beq.n	800b094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b08c:	4b06      	ldr	r3, [pc, #24]	; (800b0a8 <xPortSysTickHandler+0x40>)
 800b08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b092:	601a      	str	r2, [r3, #0]
 800b094:	2300      	movs	r3, #0
 800b096:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	f383 8811 	msr	BASEPRI, r3
}
 800b09e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b0a0:	bf00      	nop
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	e000ed04 	.word	0xe000ed04

0800b0ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b0b0:	4b0b      	ldr	r3, [pc, #44]	; (800b0e0 <vPortSetupTimerInterrupt+0x34>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b0b6:	4b0b      	ldr	r3, [pc, #44]	; (800b0e4 <vPortSetupTimerInterrupt+0x38>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b0bc:	4b0a      	ldr	r3, [pc, #40]	; (800b0e8 <vPortSetupTimerInterrupt+0x3c>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a0a      	ldr	r2, [pc, #40]	; (800b0ec <vPortSetupTimerInterrupt+0x40>)
 800b0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0c6:	099b      	lsrs	r3, r3, #6
 800b0c8:	4a09      	ldr	r2, [pc, #36]	; (800b0f0 <vPortSetupTimerInterrupt+0x44>)
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b0ce:	4b04      	ldr	r3, [pc, #16]	; (800b0e0 <vPortSetupTimerInterrupt+0x34>)
 800b0d0:	2207      	movs	r2, #7
 800b0d2:	601a      	str	r2, [r3, #0]
}
 800b0d4:	bf00      	nop
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop
 800b0e0:	e000e010 	.word	0xe000e010
 800b0e4:	e000e018 	.word	0xe000e018
 800b0e8:	20000004 	.word	0x20000004
 800b0ec:	10624dd3 	.word	0x10624dd3
 800b0f0:	e000e014 	.word	0xe000e014

0800b0f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b0f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b104 <vPortEnableVFP+0x10>
 800b0f8:	6801      	ldr	r1, [r0, #0]
 800b0fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b0fe:	6001      	str	r1, [r0, #0]
 800b100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b102:	bf00      	nop
 800b104:	e000ed88 	.word	0xe000ed88

0800b108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b10e:	f3ef 8305 	mrs	r3, IPSR
 800b112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2b0f      	cmp	r3, #15
 800b118:	d914      	bls.n	800b144 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b11a:	4a17      	ldr	r2, [pc, #92]	; (800b178 <vPortValidateInterruptPriority+0x70>)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	4413      	add	r3, r2
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b124:	4b15      	ldr	r3, [pc, #84]	; (800b17c <vPortValidateInterruptPriority+0x74>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	7afa      	ldrb	r2, [r7, #11]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d20a      	bcs.n	800b144 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	607b      	str	r3, [r7, #4]
}
 800b140:	bf00      	nop
 800b142:	e7fe      	b.n	800b142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b144:	4b0e      	ldr	r3, [pc, #56]	; (800b180 <vPortValidateInterruptPriority+0x78>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b14c:	4b0d      	ldr	r3, [pc, #52]	; (800b184 <vPortValidateInterruptPriority+0x7c>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d90a      	bls.n	800b16a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b158:	f383 8811 	msr	BASEPRI, r3
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	f3bf 8f4f 	dsb	sy
 800b164:	603b      	str	r3, [r7, #0]
}
 800b166:	bf00      	nop
 800b168:	e7fe      	b.n	800b168 <vPortValidateInterruptPriority+0x60>
	}
 800b16a:	bf00      	nop
 800b16c:	3714      	adds	r7, #20
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	e000e3f0 	.word	0xe000e3f0
 800b17c:	2000167c 	.word	0x2000167c
 800b180:	e000ed0c 	.word	0xe000ed0c
 800b184:	20001680 	.word	0x20001680

0800b188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08a      	sub	sp, #40	; 0x28
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b190:	2300      	movs	r3, #0
 800b192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b194:	f7fe fd98 	bl	8009cc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b198:	4b5b      	ldr	r3, [pc, #364]	; (800b308 <pvPortMalloc+0x180>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d101      	bne.n	800b1a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b1a0:	f000 f920 	bl	800b3e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b1a4:	4b59      	ldr	r3, [pc, #356]	; (800b30c <pvPortMalloc+0x184>)
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4013      	ands	r3, r2
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f040 8093 	bne.w	800b2d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d01d      	beq.n	800b1f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b1b8:	2208      	movs	r2, #8
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4413      	add	r3, r2
 800b1be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f003 0307 	and.w	r3, r3, #7
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d014      	beq.n	800b1f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f023 0307 	bic.w	r3, r3, #7
 800b1d0:	3308      	adds	r3, #8
 800b1d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f003 0307 	and.w	r3, r3, #7
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00a      	beq.n	800b1f4 <pvPortMalloc+0x6c>
	__asm volatile
 800b1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	617b      	str	r3, [r7, #20]
}
 800b1f0:	bf00      	nop
 800b1f2:	e7fe      	b.n	800b1f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d06e      	beq.n	800b2d8 <pvPortMalloc+0x150>
 800b1fa:	4b45      	ldr	r3, [pc, #276]	; (800b310 <pvPortMalloc+0x188>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	429a      	cmp	r2, r3
 800b202:	d869      	bhi.n	800b2d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b204:	4b43      	ldr	r3, [pc, #268]	; (800b314 <pvPortMalloc+0x18c>)
 800b206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b208:	4b42      	ldr	r3, [pc, #264]	; (800b314 <pvPortMalloc+0x18c>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b20e:	e004      	b.n	800b21a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	429a      	cmp	r2, r3
 800b222:	d903      	bls.n	800b22c <pvPortMalloc+0xa4>
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d1f1      	bne.n	800b210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b22c:	4b36      	ldr	r3, [pc, #216]	; (800b308 <pvPortMalloc+0x180>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b232:	429a      	cmp	r2, r3
 800b234:	d050      	beq.n	800b2d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b236:	6a3b      	ldr	r3, [r7, #32]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2208      	movs	r2, #8
 800b23c:	4413      	add	r3, r2
 800b23e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	6a3b      	ldr	r3, [r7, #32]
 800b246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	1ad2      	subs	r2, r2, r3
 800b250:	2308      	movs	r3, #8
 800b252:	005b      	lsls	r3, r3, #1
 800b254:	429a      	cmp	r2, r3
 800b256:	d91f      	bls.n	800b298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4413      	add	r3, r2
 800b25e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	f003 0307 	and.w	r3, r3, #7
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00a      	beq.n	800b280 <pvPortMalloc+0xf8>
	__asm volatile
 800b26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26e:	f383 8811 	msr	BASEPRI, r3
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	613b      	str	r3, [r7, #16]
}
 800b27c:	bf00      	nop
 800b27e:	e7fe      	b.n	800b27e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b282:	685a      	ldr	r2, [r3, #4]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	1ad2      	subs	r2, r2, r3
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b292:	69b8      	ldr	r0, [r7, #24]
 800b294:	f000 f908 	bl	800b4a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b298:	4b1d      	ldr	r3, [pc, #116]	; (800b310 <pvPortMalloc+0x188>)
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	4a1b      	ldr	r2, [pc, #108]	; (800b310 <pvPortMalloc+0x188>)
 800b2a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b2a6:	4b1a      	ldr	r3, [pc, #104]	; (800b310 <pvPortMalloc+0x188>)
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	4b1b      	ldr	r3, [pc, #108]	; (800b318 <pvPortMalloc+0x190>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d203      	bcs.n	800b2ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b2b2:	4b17      	ldr	r3, [pc, #92]	; (800b310 <pvPortMalloc+0x188>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a18      	ldr	r2, [pc, #96]	; (800b318 <pvPortMalloc+0x190>)
 800b2b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2bc:	685a      	ldr	r2, [r3, #4]
 800b2be:	4b13      	ldr	r3, [pc, #76]	; (800b30c <pvPortMalloc+0x184>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	431a      	orrs	r2, r3
 800b2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b2ce:	4b13      	ldr	r3, [pc, #76]	; (800b31c <pvPortMalloc+0x194>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	4a11      	ldr	r2, [pc, #68]	; (800b31c <pvPortMalloc+0x194>)
 800b2d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b2d8:	f7fe fd04 	bl	8009ce4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	f003 0307 	and.w	r3, r3, #7
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00a      	beq.n	800b2fc <pvPortMalloc+0x174>
	__asm volatile
 800b2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	60fb      	str	r3, [r7, #12]
}
 800b2f8:	bf00      	nop
 800b2fa:	e7fe      	b.n	800b2fa <pvPortMalloc+0x172>
	return pvReturn;
 800b2fc:	69fb      	ldr	r3, [r7, #28]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3728      	adds	r7, #40	; 0x28
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	2000528c 	.word	0x2000528c
 800b30c:	200052a0 	.word	0x200052a0
 800b310:	20005290 	.word	0x20005290
 800b314:	20005284 	.word	0x20005284
 800b318:	20005294 	.word	0x20005294
 800b31c:	20005298 	.word	0x20005298

0800b320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d04d      	beq.n	800b3ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b332:	2308      	movs	r3, #8
 800b334:	425b      	negs	r3, r3
 800b336:	697a      	ldr	r2, [r7, #20]
 800b338:	4413      	add	r3, r2
 800b33a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	685a      	ldr	r2, [r3, #4]
 800b344:	4b24      	ldr	r3, [pc, #144]	; (800b3d8 <vPortFree+0xb8>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4013      	ands	r3, r2
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10a      	bne.n	800b364 <vPortFree+0x44>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	60fb      	str	r3, [r7, #12]
}
 800b360:	bf00      	nop
 800b362:	e7fe      	b.n	800b362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00a      	beq.n	800b382 <vPortFree+0x62>
	__asm volatile
 800b36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b370:	f383 8811 	msr	BASEPRI, r3
 800b374:	f3bf 8f6f 	isb	sy
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	60bb      	str	r3, [r7, #8]
}
 800b37e:	bf00      	nop
 800b380:	e7fe      	b.n	800b380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	4b14      	ldr	r3, [pc, #80]	; (800b3d8 <vPortFree+0xb8>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4013      	ands	r3, r2
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d01e      	beq.n	800b3ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d11a      	bne.n	800b3ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	4b0e      	ldr	r3, [pc, #56]	; (800b3d8 <vPortFree+0xb8>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	43db      	mvns	r3, r3
 800b3a2:	401a      	ands	r2, r3
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b3a8:	f7fe fc8e 	bl	8009cc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	685a      	ldr	r2, [r3, #4]
 800b3b0:	4b0a      	ldr	r3, [pc, #40]	; (800b3dc <vPortFree+0xbc>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	4a09      	ldr	r2, [pc, #36]	; (800b3dc <vPortFree+0xbc>)
 800b3b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b3ba:	6938      	ldr	r0, [r7, #16]
 800b3bc:	f000 f874 	bl	800b4a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b3c0:	4b07      	ldr	r3, [pc, #28]	; (800b3e0 <vPortFree+0xc0>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	4a06      	ldr	r2, [pc, #24]	; (800b3e0 <vPortFree+0xc0>)
 800b3c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b3ca:	f7fe fc8b 	bl	8009ce4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b3ce:	bf00      	nop
 800b3d0:	3718      	adds	r7, #24
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	200052a0 	.word	0x200052a0
 800b3dc:	20005290 	.word	0x20005290
 800b3e0:	2000529c 	.word	0x2000529c

0800b3e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b3ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b3ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b3f0:	4b27      	ldr	r3, [pc, #156]	; (800b490 <prvHeapInit+0xac>)
 800b3f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f003 0307 	and.w	r3, r3, #7
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00c      	beq.n	800b418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3307      	adds	r3, #7
 800b402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f023 0307 	bic.w	r3, r3, #7
 800b40a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	4a1f      	ldr	r2, [pc, #124]	; (800b490 <prvHeapInit+0xac>)
 800b414:	4413      	add	r3, r2
 800b416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b41c:	4a1d      	ldr	r2, [pc, #116]	; (800b494 <prvHeapInit+0xb0>)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b422:	4b1c      	ldr	r3, [pc, #112]	; (800b494 <prvHeapInit+0xb0>)
 800b424:	2200      	movs	r2, #0
 800b426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	4413      	add	r3, r2
 800b42e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b430:	2208      	movs	r2, #8
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	1a9b      	subs	r3, r3, r2
 800b436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f023 0307 	bic.w	r3, r3, #7
 800b43e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	4a15      	ldr	r2, [pc, #84]	; (800b498 <prvHeapInit+0xb4>)
 800b444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b446:	4b14      	ldr	r3, [pc, #80]	; (800b498 <prvHeapInit+0xb4>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2200      	movs	r2, #0
 800b44c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b44e:	4b12      	ldr	r3, [pc, #72]	; (800b498 <prvHeapInit+0xb4>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2200      	movs	r2, #0
 800b454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	1ad2      	subs	r2, r2, r3
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b464:	4b0c      	ldr	r3, [pc, #48]	; (800b498 <prvHeapInit+0xb4>)
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	4a0a      	ldr	r2, [pc, #40]	; (800b49c <prvHeapInit+0xb8>)
 800b472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	4a09      	ldr	r2, [pc, #36]	; (800b4a0 <prvHeapInit+0xbc>)
 800b47a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b47c:	4b09      	ldr	r3, [pc, #36]	; (800b4a4 <prvHeapInit+0xc0>)
 800b47e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b482:	601a      	str	r2, [r3, #0]
}
 800b484:	bf00      	nop
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr
 800b490:	20001684 	.word	0x20001684
 800b494:	20005284 	.word	0x20005284
 800b498:	2000528c 	.word	0x2000528c
 800b49c:	20005294 	.word	0x20005294
 800b4a0:	20005290 	.word	0x20005290
 800b4a4:	200052a0 	.word	0x200052a0

0800b4a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4b0:	4b28      	ldr	r3, [pc, #160]	; (800b554 <prvInsertBlockIntoFreeList+0xac>)
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	e002      	b.n	800b4bc <prvInsertBlockIntoFreeList+0x14>
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	60fb      	str	r3, [r7, #12]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d8f7      	bhi.n	800b4b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d108      	bne.n	800b4ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	685a      	ldr	r2, [r3, #4]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	441a      	add	r2, r3
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	441a      	add	r2, r3
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d118      	bne.n	800b530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	4b15      	ldr	r3, [pc, #84]	; (800b558 <prvInsertBlockIntoFreeList+0xb0>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	429a      	cmp	r2, r3
 800b508:	d00d      	beq.n	800b526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	685a      	ldr	r2, [r3, #4]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	441a      	add	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	601a      	str	r2, [r3, #0]
 800b524:	e008      	b.n	800b538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b526:	4b0c      	ldr	r3, [pc, #48]	; (800b558 <prvInsertBlockIntoFreeList+0xb0>)
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	601a      	str	r2, [r3, #0]
 800b52e:	e003      	b.n	800b538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d002      	beq.n	800b546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b546:	bf00      	nop
 800b548:	3714      	adds	r7, #20
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop
 800b554:	20005284 	.word	0x20005284
 800b558:	2000528c 	.word	0x2000528c

0800b55c <__cvt>:
 800b55c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b560:	ec55 4b10 	vmov	r4, r5, d0
 800b564:	2d00      	cmp	r5, #0
 800b566:	460e      	mov	r6, r1
 800b568:	4619      	mov	r1, r3
 800b56a:	462b      	mov	r3, r5
 800b56c:	bfbb      	ittet	lt
 800b56e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b572:	461d      	movlt	r5, r3
 800b574:	2300      	movge	r3, #0
 800b576:	232d      	movlt	r3, #45	; 0x2d
 800b578:	700b      	strb	r3, [r1, #0]
 800b57a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b57c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b580:	4691      	mov	r9, r2
 800b582:	f023 0820 	bic.w	r8, r3, #32
 800b586:	bfbc      	itt	lt
 800b588:	4622      	movlt	r2, r4
 800b58a:	4614      	movlt	r4, r2
 800b58c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b590:	d005      	beq.n	800b59e <__cvt+0x42>
 800b592:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b596:	d100      	bne.n	800b59a <__cvt+0x3e>
 800b598:	3601      	adds	r6, #1
 800b59a:	2102      	movs	r1, #2
 800b59c:	e000      	b.n	800b5a0 <__cvt+0x44>
 800b59e:	2103      	movs	r1, #3
 800b5a0:	ab03      	add	r3, sp, #12
 800b5a2:	9301      	str	r3, [sp, #4]
 800b5a4:	ab02      	add	r3, sp, #8
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	ec45 4b10 	vmov	d0, r4, r5
 800b5ac:	4653      	mov	r3, sl
 800b5ae:	4632      	mov	r2, r6
 800b5b0:	f000 fdee 	bl	800c190 <_dtoa_r>
 800b5b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b5b8:	4607      	mov	r7, r0
 800b5ba:	d102      	bne.n	800b5c2 <__cvt+0x66>
 800b5bc:	f019 0f01 	tst.w	r9, #1
 800b5c0:	d022      	beq.n	800b608 <__cvt+0xac>
 800b5c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b5c6:	eb07 0906 	add.w	r9, r7, r6
 800b5ca:	d110      	bne.n	800b5ee <__cvt+0x92>
 800b5cc:	783b      	ldrb	r3, [r7, #0]
 800b5ce:	2b30      	cmp	r3, #48	; 0x30
 800b5d0:	d10a      	bne.n	800b5e8 <__cvt+0x8c>
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	4629      	mov	r1, r5
 800b5da:	f7f5 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5de:	b918      	cbnz	r0, 800b5e8 <__cvt+0x8c>
 800b5e0:	f1c6 0601 	rsb	r6, r6, #1
 800b5e4:	f8ca 6000 	str.w	r6, [sl]
 800b5e8:	f8da 3000 	ldr.w	r3, [sl]
 800b5ec:	4499      	add	r9, r3
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	f7f5 fa67 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5fa:	b108      	cbz	r0, 800b600 <__cvt+0xa4>
 800b5fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b600:	2230      	movs	r2, #48	; 0x30
 800b602:	9b03      	ldr	r3, [sp, #12]
 800b604:	454b      	cmp	r3, r9
 800b606:	d307      	bcc.n	800b618 <__cvt+0xbc>
 800b608:	9b03      	ldr	r3, [sp, #12]
 800b60a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b60c:	1bdb      	subs	r3, r3, r7
 800b60e:	4638      	mov	r0, r7
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	b004      	add	sp, #16
 800b614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b618:	1c59      	adds	r1, r3, #1
 800b61a:	9103      	str	r1, [sp, #12]
 800b61c:	701a      	strb	r2, [r3, #0]
 800b61e:	e7f0      	b.n	800b602 <__cvt+0xa6>

0800b620 <__exponent>:
 800b620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b622:	4603      	mov	r3, r0
 800b624:	2900      	cmp	r1, #0
 800b626:	bfb8      	it	lt
 800b628:	4249      	neglt	r1, r1
 800b62a:	f803 2b02 	strb.w	r2, [r3], #2
 800b62e:	bfb4      	ite	lt
 800b630:	222d      	movlt	r2, #45	; 0x2d
 800b632:	222b      	movge	r2, #43	; 0x2b
 800b634:	2909      	cmp	r1, #9
 800b636:	7042      	strb	r2, [r0, #1]
 800b638:	dd2a      	ble.n	800b690 <__exponent+0x70>
 800b63a:	f10d 0207 	add.w	r2, sp, #7
 800b63e:	4617      	mov	r7, r2
 800b640:	260a      	movs	r6, #10
 800b642:	4694      	mov	ip, r2
 800b644:	fb91 f5f6 	sdiv	r5, r1, r6
 800b648:	fb06 1415 	mls	r4, r6, r5, r1
 800b64c:	3430      	adds	r4, #48	; 0x30
 800b64e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b652:	460c      	mov	r4, r1
 800b654:	2c63      	cmp	r4, #99	; 0x63
 800b656:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b65a:	4629      	mov	r1, r5
 800b65c:	dcf1      	bgt.n	800b642 <__exponent+0x22>
 800b65e:	3130      	adds	r1, #48	; 0x30
 800b660:	f1ac 0402 	sub.w	r4, ip, #2
 800b664:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b668:	1c41      	adds	r1, r0, #1
 800b66a:	4622      	mov	r2, r4
 800b66c:	42ba      	cmp	r2, r7
 800b66e:	d30a      	bcc.n	800b686 <__exponent+0x66>
 800b670:	f10d 0209 	add.w	r2, sp, #9
 800b674:	eba2 020c 	sub.w	r2, r2, ip
 800b678:	42bc      	cmp	r4, r7
 800b67a:	bf88      	it	hi
 800b67c:	2200      	movhi	r2, #0
 800b67e:	4413      	add	r3, r2
 800b680:	1a18      	subs	r0, r3, r0
 800b682:	b003      	add	sp, #12
 800b684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b686:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b68a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b68e:	e7ed      	b.n	800b66c <__exponent+0x4c>
 800b690:	2330      	movs	r3, #48	; 0x30
 800b692:	3130      	adds	r1, #48	; 0x30
 800b694:	7083      	strb	r3, [r0, #2]
 800b696:	70c1      	strb	r1, [r0, #3]
 800b698:	1d03      	adds	r3, r0, #4
 800b69a:	e7f1      	b.n	800b680 <__exponent+0x60>

0800b69c <_printf_float>:
 800b69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a0:	ed2d 8b02 	vpush	{d8}
 800b6a4:	b08d      	sub	sp, #52	; 0x34
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b6ac:	4616      	mov	r6, r2
 800b6ae:	461f      	mov	r7, r3
 800b6b0:	4605      	mov	r5, r0
 800b6b2:	f000 fca3 	bl	800bffc <_localeconv_r>
 800b6b6:	f8d0 a000 	ldr.w	sl, [r0]
 800b6ba:	4650      	mov	r0, sl
 800b6bc:	f7f4 fdd8 	bl	8000270 <strlen>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	930a      	str	r3, [sp, #40]	; 0x28
 800b6c4:	6823      	ldr	r3, [r4, #0]
 800b6c6:	9305      	str	r3, [sp, #20]
 800b6c8:	f8d8 3000 	ldr.w	r3, [r8]
 800b6cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b6d0:	3307      	adds	r3, #7
 800b6d2:	f023 0307 	bic.w	r3, r3, #7
 800b6d6:	f103 0208 	add.w	r2, r3, #8
 800b6da:	f8c8 2000 	str.w	r2, [r8]
 800b6de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b6e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b6e6:	9307      	str	r3, [sp, #28]
 800b6e8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b6ec:	ee08 0a10 	vmov	s16, r0
 800b6f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b6f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6f8:	4b9e      	ldr	r3, [pc, #632]	; (800b974 <_printf_float+0x2d8>)
 800b6fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6fe:	f7f5 fa15 	bl	8000b2c <__aeabi_dcmpun>
 800b702:	bb88      	cbnz	r0, 800b768 <_printf_float+0xcc>
 800b704:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b708:	4b9a      	ldr	r3, [pc, #616]	; (800b974 <_printf_float+0x2d8>)
 800b70a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b70e:	f7f5 f9ef 	bl	8000af0 <__aeabi_dcmple>
 800b712:	bb48      	cbnz	r0, 800b768 <_printf_float+0xcc>
 800b714:	2200      	movs	r2, #0
 800b716:	2300      	movs	r3, #0
 800b718:	4640      	mov	r0, r8
 800b71a:	4649      	mov	r1, r9
 800b71c:	f7f5 f9de 	bl	8000adc <__aeabi_dcmplt>
 800b720:	b110      	cbz	r0, 800b728 <_printf_float+0x8c>
 800b722:	232d      	movs	r3, #45	; 0x2d
 800b724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b728:	4a93      	ldr	r2, [pc, #588]	; (800b978 <_printf_float+0x2dc>)
 800b72a:	4b94      	ldr	r3, [pc, #592]	; (800b97c <_printf_float+0x2e0>)
 800b72c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b730:	bf94      	ite	ls
 800b732:	4690      	movls	r8, r2
 800b734:	4698      	movhi	r8, r3
 800b736:	2303      	movs	r3, #3
 800b738:	6123      	str	r3, [r4, #16]
 800b73a:	9b05      	ldr	r3, [sp, #20]
 800b73c:	f023 0304 	bic.w	r3, r3, #4
 800b740:	6023      	str	r3, [r4, #0]
 800b742:	f04f 0900 	mov.w	r9, #0
 800b746:	9700      	str	r7, [sp, #0]
 800b748:	4633      	mov	r3, r6
 800b74a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b74c:	4621      	mov	r1, r4
 800b74e:	4628      	mov	r0, r5
 800b750:	f000 f9da 	bl	800bb08 <_printf_common>
 800b754:	3001      	adds	r0, #1
 800b756:	f040 8090 	bne.w	800b87a <_printf_float+0x1de>
 800b75a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b75e:	b00d      	add	sp, #52	; 0x34
 800b760:	ecbd 8b02 	vpop	{d8}
 800b764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b768:	4642      	mov	r2, r8
 800b76a:	464b      	mov	r3, r9
 800b76c:	4640      	mov	r0, r8
 800b76e:	4649      	mov	r1, r9
 800b770:	f7f5 f9dc 	bl	8000b2c <__aeabi_dcmpun>
 800b774:	b140      	cbz	r0, 800b788 <_printf_float+0xec>
 800b776:	464b      	mov	r3, r9
 800b778:	2b00      	cmp	r3, #0
 800b77a:	bfbc      	itt	lt
 800b77c:	232d      	movlt	r3, #45	; 0x2d
 800b77e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b782:	4a7f      	ldr	r2, [pc, #508]	; (800b980 <_printf_float+0x2e4>)
 800b784:	4b7f      	ldr	r3, [pc, #508]	; (800b984 <_printf_float+0x2e8>)
 800b786:	e7d1      	b.n	800b72c <_printf_float+0x90>
 800b788:	6863      	ldr	r3, [r4, #4]
 800b78a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b78e:	9206      	str	r2, [sp, #24]
 800b790:	1c5a      	adds	r2, r3, #1
 800b792:	d13f      	bne.n	800b814 <_printf_float+0x178>
 800b794:	2306      	movs	r3, #6
 800b796:	6063      	str	r3, [r4, #4]
 800b798:	9b05      	ldr	r3, [sp, #20]
 800b79a:	6861      	ldr	r1, [r4, #4]
 800b79c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	9303      	str	r3, [sp, #12]
 800b7a4:	ab0a      	add	r3, sp, #40	; 0x28
 800b7a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b7aa:	ab09      	add	r3, sp, #36	; 0x24
 800b7ac:	ec49 8b10 	vmov	d0, r8, r9
 800b7b0:	9300      	str	r3, [sp, #0]
 800b7b2:	6022      	str	r2, [r4, #0]
 800b7b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	f7ff fecf 	bl	800b55c <__cvt>
 800b7be:	9b06      	ldr	r3, [sp, #24]
 800b7c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7c2:	2b47      	cmp	r3, #71	; 0x47
 800b7c4:	4680      	mov	r8, r0
 800b7c6:	d108      	bne.n	800b7da <_printf_float+0x13e>
 800b7c8:	1cc8      	adds	r0, r1, #3
 800b7ca:	db02      	blt.n	800b7d2 <_printf_float+0x136>
 800b7cc:	6863      	ldr	r3, [r4, #4]
 800b7ce:	4299      	cmp	r1, r3
 800b7d0:	dd41      	ble.n	800b856 <_printf_float+0x1ba>
 800b7d2:	f1ab 0302 	sub.w	r3, fp, #2
 800b7d6:	fa5f fb83 	uxtb.w	fp, r3
 800b7da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b7de:	d820      	bhi.n	800b822 <_printf_float+0x186>
 800b7e0:	3901      	subs	r1, #1
 800b7e2:	465a      	mov	r2, fp
 800b7e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b7e8:	9109      	str	r1, [sp, #36]	; 0x24
 800b7ea:	f7ff ff19 	bl	800b620 <__exponent>
 800b7ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7f0:	1813      	adds	r3, r2, r0
 800b7f2:	2a01      	cmp	r2, #1
 800b7f4:	4681      	mov	r9, r0
 800b7f6:	6123      	str	r3, [r4, #16]
 800b7f8:	dc02      	bgt.n	800b800 <_printf_float+0x164>
 800b7fa:	6822      	ldr	r2, [r4, #0]
 800b7fc:	07d2      	lsls	r2, r2, #31
 800b7fe:	d501      	bpl.n	800b804 <_printf_float+0x168>
 800b800:	3301      	adds	r3, #1
 800b802:	6123      	str	r3, [r4, #16]
 800b804:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d09c      	beq.n	800b746 <_printf_float+0xaa>
 800b80c:	232d      	movs	r3, #45	; 0x2d
 800b80e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b812:	e798      	b.n	800b746 <_printf_float+0xaa>
 800b814:	9a06      	ldr	r2, [sp, #24]
 800b816:	2a47      	cmp	r2, #71	; 0x47
 800b818:	d1be      	bne.n	800b798 <_printf_float+0xfc>
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1bc      	bne.n	800b798 <_printf_float+0xfc>
 800b81e:	2301      	movs	r3, #1
 800b820:	e7b9      	b.n	800b796 <_printf_float+0xfa>
 800b822:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b826:	d118      	bne.n	800b85a <_printf_float+0x1be>
 800b828:	2900      	cmp	r1, #0
 800b82a:	6863      	ldr	r3, [r4, #4]
 800b82c:	dd0b      	ble.n	800b846 <_printf_float+0x1aa>
 800b82e:	6121      	str	r1, [r4, #16]
 800b830:	b913      	cbnz	r3, 800b838 <_printf_float+0x19c>
 800b832:	6822      	ldr	r2, [r4, #0]
 800b834:	07d0      	lsls	r0, r2, #31
 800b836:	d502      	bpl.n	800b83e <_printf_float+0x1a2>
 800b838:	3301      	adds	r3, #1
 800b83a:	440b      	add	r3, r1
 800b83c:	6123      	str	r3, [r4, #16]
 800b83e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b840:	f04f 0900 	mov.w	r9, #0
 800b844:	e7de      	b.n	800b804 <_printf_float+0x168>
 800b846:	b913      	cbnz	r3, 800b84e <_printf_float+0x1b2>
 800b848:	6822      	ldr	r2, [r4, #0]
 800b84a:	07d2      	lsls	r2, r2, #31
 800b84c:	d501      	bpl.n	800b852 <_printf_float+0x1b6>
 800b84e:	3302      	adds	r3, #2
 800b850:	e7f4      	b.n	800b83c <_printf_float+0x1a0>
 800b852:	2301      	movs	r3, #1
 800b854:	e7f2      	b.n	800b83c <_printf_float+0x1a0>
 800b856:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b85a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b85c:	4299      	cmp	r1, r3
 800b85e:	db05      	blt.n	800b86c <_printf_float+0x1d0>
 800b860:	6823      	ldr	r3, [r4, #0]
 800b862:	6121      	str	r1, [r4, #16]
 800b864:	07d8      	lsls	r0, r3, #31
 800b866:	d5ea      	bpl.n	800b83e <_printf_float+0x1a2>
 800b868:	1c4b      	adds	r3, r1, #1
 800b86a:	e7e7      	b.n	800b83c <_printf_float+0x1a0>
 800b86c:	2900      	cmp	r1, #0
 800b86e:	bfd4      	ite	le
 800b870:	f1c1 0202 	rsble	r2, r1, #2
 800b874:	2201      	movgt	r2, #1
 800b876:	4413      	add	r3, r2
 800b878:	e7e0      	b.n	800b83c <_printf_float+0x1a0>
 800b87a:	6823      	ldr	r3, [r4, #0]
 800b87c:	055a      	lsls	r2, r3, #21
 800b87e:	d407      	bmi.n	800b890 <_printf_float+0x1f4>
 800b880:	6923      	ldr	r3, [r4, #16]
 800b882:	4642      	mov	r2, r8
 800b884:	4631      	mov	r1, r6
 800b886:	4628      	mov	r0, r5
 800b888:	47b8      	blx	r7
 800b88a:	3001      	adds	r0, #1
 800b88c:	d12c      	bne.n	800b8e8 <_printf_float+0x24c>
 800b88e:	e764      	b.n	800b75a <_printf_float+0xbe>
 800b890:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b894:	f240 80e0 	bls.w	800ba58 <_printf_float+0x3bc>
 800b898:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b89c:	2200      	movs	r2, #0
 800b89e:	2300      	movs	r3, #0
 800b8a0:	f7f5 f912 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d034      	beq.n	800b912 <_printf_float+0x276>
 800b8a8:	4a37      	ldr	r2, [pc, #220]	; (800b988 <_printf_float+0x2ec>)
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	4631      	mov	r1, r6
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	47b8      	blx	r7
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	f43f af51 	beq.w	800b75a <_printf_float+0xbe>
 800b8b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	db02      	blt.n	800b8c6 <_printf_float+0x22a>
 800b8c0:	6823      	ldr	r3, [r4, #0]
 800b8c2:	07d8      	lsls	r0, r3, #31
 800b8c4:	d510      	bpl.n	800b8e8 <_printf_float+0x24c>
 800b8c6:	ee18 3a10 	vmov	r3, s16
 800b8ca:	4652      	mov	r2, sl
 800b8cc:	4631      	mov	r1, r6
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	47b8      	blx	r7
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	f43f af41 	beq.w	800b75a <_printf_float+0xbe>
 800b8d8:	f04f 0800 	mov.w	r8, #0
 800b8dc:	f104 091a 	add.w	r9, r4, #26
 800b8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	4543      	cmp	r3, r8
 800b8e6:	dc09      	bgt.n	800b8fc <_printf_float+0x260>
 800b8e8:	6823      	ldr	r3, [r4, #0]
 800b8ea:	079b      	lsls	r3, r3, #30
 800b8ec:	f100 8107 	bmi.w	800bafe <_printf_float+0x462>
 800b8f0:	68e0      	ldr	r0, [r4, #12]
 800b8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8f4:	4298      	cmp	r0, r3
 800b8f6:	bfb8      	it	lt
 800b8f8:	4618      	movlt	r0, r3
 800b8fa:	e730      	b.n	800b75e <_printf_float+0xc2>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	464a      	mov	r2, r9
 800b900:	4631      	mov	r1, r6
 800b902:	4628      	mov	r0, r5
 800b904:	47b8      	blx	r7
 800b906:	3001      	adds	r0, #1
 800b908:	f43f af27 	beq.w	800b75a <_printf_float+0xbe>
 800b90c:	f108 0801 	add.w	r8, r8, #1
 800b910:	e7e6      	b.n	800b8e0 <_printf_float+0x244>
 800b912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b914:	2b00      	cmp	r3, #0
 800b916:	dc39      	bgt.n	800b98c <_printf_float+0x2f0>
 800b918:	4a1b      	ldr	r2, [pc, #108]	; (800b988 <_printf_float+0x2ec>)
 800b91a:	2301      	movs	r3, #1
 800b91c:	4631      	mov	r1, r6
 800b91e:	4628      	mov	r0, r5
 800b920:	47b8      	blx	r7
 800b922:	3001      	adds	r0, #1
 800b924:	f43f af19 	beq.w	800b75a <_printf_float+0xbe>
 800b928:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b92c:	4313      	orrs	r3, r2
 800b92e:	d102      	bne.n	800b936 <_printf_float+0x29a>
 800b930:	6823      	ldr	r3, [r4, #0]
 800b932:	07d9      	lsls	r1, r3, #31
 800b934:	d5d8      	bpl.n	800b8e8 <_printf_float+0x24c>
 800b936:	ee18 3a10 	vmov	r3, s16
 800b93a:	4652      	mov	r2, sl
 800b93c:	4631      	mov	r1, r6
 800b93e:	4628      	mov	r0, r5
 800b940:	47b8      	blx	r7
 800b942:	3001      	adds	r0, #1
 800b944:	f43f af09 	beq.w	800b75a <_printf_float+0xbe>
 800b948:	f04f 0900 	mov.w	r9, #0
 800b94c:	f104 0a1a 	add.w	sl, r4, #26
 800b950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b952:	425b      	negs	r3, r3
 800b954:	454b      	cmp	r3, r9
 800b956:	dc01      	bgt.n	800b95c <_printf_float+0x2c0>
 800b958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b95a:	e792      	b.n	800b882 <_printf_float+0x1e6>
 800b95c:	2301      	movs	r3, #1
 800b95e:	4652      	mov	r2, sl
 800b960:	4631      	mov	r1, r6
 800b962:	4628      	mov	r0, r5
 800b964:	47b8      	blx	r7
 800b966:	3001      	adds	r0, #1
 800b968:	f43f aef7 	beq.w	800b75a <_printf_float+0xbe>
 800b96c:	f109 0901 	add.w	r9, r9, #1
 800b970:	e7ee      	b.n	800b950 <_printf_float+0x2b4>
 800b972:	bf00      	nop
 800b974:	7fefffff 	.word	0x7fefffff
 800b978:	0800ff2c 	.word	0x0800ff2c
 800b97c:	0800ff30 	.word	0x0800ff30
 800b980:	0800ff34 	.word	0x0800ff34
 800b984:	0800ff38 	.word	0x0800ff38
 800b988:	0800ff3c 	.word	0x0800ff3c
 800b98c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b98e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b990:	429a      	cmp	r2, r3
 800b992:	bfa8      	it	ge
 800b994:	461a      	movge	r2, r3
 800b996:	2a00      	cmp	r2, #0
 800b998:	4691      	mov	r9, r2
 800b99a:	dc37      	bgt.n	800ba0c <_printf_float+0x370>
 800b99c:	f04f 0b00 	mov.w	fp, #0
 800b9a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9a4:	f104 021a 	add.w	r2, r4, #26
 800b9a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9aa:	9305      	str	r3, [sp, #20]
 800b9ac:	eba3 0309 	sub.w	r3, r3, r9
 800b9b0:	455b      	cmp	r3, fp
 800b9b2:	dc33      	bgt.n	800ba1c <_printf_float+0x380>
 800b9b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	db3b      	blt.n	800ba34 <_printf_float+0x398>
 800b9bc:	6823      	ldr	r3, [r4, #0]
 800b9be:	07da      	lsls	r2, r3, #31
 800b9c0:	d438      	bmi.n	800ba34 <_printf_float+0x398>
 800b9c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b9c6:	eba2 0903 	sub.w	r9, r2, r3
 800b9ca:	9b05      	ldr	r3, [sp, #20]
 800b9cc:	1ad2      	subs	r2, r2, r3
 800b9ce:	4591      	cmp	r9, r2
 800b9d0:	bfa8      	it	ge
 800b9d2:	4691      	movge	r9, r2
 800b9d4:	f1b9 0f00 	cmp.w	r9, #0
 800b9d8:	dc35      	bgt.n	800ba46 <_printf_float+0x3aa>
 800b9da:	f04f 0800 	mov.w	r8, #0
 800b9de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9e2:	f104 0a1a 	add.w	sl, r4, #26
 800b9e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9ea:	1a9b      	subs	r3, r3, r2
 800b9ec:	eba3 0309 	sub.w	r3, r3, r9
 800b9f0:	4543      	cmp	r3, r8
 800b9f2:	f77f af79 	ble.w	800b8e8 <_printf_float+0x24c>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	4652      	mov	r2, sl
 800b9fa:	4631      	mov	r1, r6
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	47b8      	blx	r7
 800ba00:	3001      	adds	r0, #1
 800ba02:	f43f aeaa 	beq.w	800b75a <_printf_float+0xbe>
 800ba06:	f108 0801 	add.w	r8, r8, #1
 800ba0a:	e7ec      	b.n	800b9e6 <_printf_float+0x34a>
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	4631      	mov	r1, r6
 800ba10:	4642      	mov	r2, r8
 800ba12:	4628      	mov	r0, r5
 800ba14:	47b8      	blx	r7
 800ba16:	3001      	adds	r0, #1
 800ba18:	d1c0      	bne.n	800b99c <_printf_float+0x300>
 800ba1a:	e69e      	b.n	800b75a <_printf_float+0xbe>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	4631      	mov	r1, r6
 800ba20:	4628      	mov	r0, r5
 800ba22:	9205      	str	r2, [sp, #20]
 800ba24:	47b8      	blx	r7
 800ba26:	3001      	adds	r0, #1
 800ba28:	f43f ae97 	beq.w	800b75a <_printf_float+0xbe>
 800ba2c:	9a05      	ldr	r2, [sp, #20]
 800ba2e:	f10b 0b01 	add.w	fp, fp, #1
 800ba32:	e7b9      	b.n	800b9a8 <_printf_float+0x30c>
 800ba34:	ee18 3a10 	vmov	r3, s16
 800ba38:	4652      	mov	r2, sl
 800ba3a:	4631      	mov	r1, r6
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	47b8      	blx	r7
 800ba40:	3001      	adds	r0, #1
 800ba42:	d1be      	bne.n	800b9c2 <_printf_float+0x326>
 800ba44:	e689      	b.n	800b75a <_printf_float+0xbe>
 800ba46:	9a05      	ldr	r2, [sp, #20]
 800ba48:	464b      	mov	r3, r9
 800ba4a:	4442      	add	r2, r8
 800ba4c:	4631      	mov	r1, r6
 800ba4e:	4628      	mov	r0, r5
 800ba50:	47b8      	blx	r7
 800ba52:	3001      	adds	r0, #1
 800ba54:	d1c1      	bne.n	800b9da <_printf_float+0x33e>
 800ba56:	e680      	b.n	800b75a <_printf_float+0xbe>
 800ba58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba5a:	2a01      	cmp	r2, #1
 800ba5c:	dc01      	bgt.n	800ba62 <_printf_float+0x3c6>
 800ba5e:	07db      	lsls	r3, r3, #31
 800ba60:	d53a      	bpl.n	800bad8 <_printf_float+0x43c>
 800ba62:	2301      	movs	r3, #1
 800ba64:	4642      	mov	r2, r8
 800ba66:	4631      	mov	r1, r6
 800ba68:	4628      	mov	r0, r5
 800ba6a:	47b8      	blx	r7
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	f43f ae74 	beq.w	800b75a <_printf_float+0xbe>
 800ba72:	ee18 3a10 	vmov	r3, s16
 800ba76:	4652      	mov	r2, sl
 800ba78:	4631      	mov	r1, r6
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	47b8      	blx	r7
 800ba7e:	3001      	adds	r0, #1
 800ba80:	f43f ae6b 	beq.w	800b75a <_printf_float+0xbe>
 800ba84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba88:	2200      	movs	r2, #0
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ba90:	f7f5 f81a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba94:	b9d8      	cbnz	r0, 800bace <_printf_float+0x432>
 800ba96:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800ba9a:	f108 0201 	add.w	r2, r8, #1
 800ba9e:	4631      	mov	r1, r6
 800baa0:	4628      	mov	r0, r5
 800baa2:	47b8      	blx	r7
 800baa4:	3001      	adds	r0, #1
 800baa6:	d10e      	bne.n	800bac6 <_printf_float+0x42a>
 800baa8:	e657      	b.n	800b75a <_printf_float+0xbe>
 800baaa:	2301      	movs	r3, #1
 800baac:	4652      	mov	r2, sl
 800baae:	4631      	mov	r1, r6
 800bab0:	4628      	mov	r0, r5
 800bab2:	47b8      	blx	r7
 800bab4:	3001      	adds	r0, #1
 800bab6:	f43f ae50 	beq.w	800b75a <_printf_float+0xbe>
 800baba:	f108 0801 	add.w	r8, r8, #1
 800babe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bac0:	3b01      	subs	r3, #1
 800bac2:	4543      	cmp	r3, r8
 800bac4:	dcf1      	bgt.n	800baaa <_printf_float+0x40e>
 800bac6:	464b      	mov	r3, r9
 800bac8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bacc:	e6da      	b.n	800b884 <_printf_float+0x1e8>
 800bace:	f04f 0800 	mov.w	r8, #0
 800bad2:	f104 0a1a 	add.w	sl, r4, #26
 800bad6:	e7f2      	b.n	800babe <_printf_float+0x422>
 800bad8:	2301      	movs	r3, #1
 800bada:	4642      	mov	r2, r8
 800badc:	e7df      	b.n	800ba9e <_printf_float+0x402>
 800bade:	2301      	movs	r3, #1
 800bae0:	464a      	mov	r2, r9
 800bae2:	4631      	mov	r1, r6
 800bae4:	4628      	mov	r0, r5
 800bae6:	47b8      	blx	r7
 800bae8:	3001      	adds	r0, #1
 800baea:	f43f ae36 	beq.w	800b75a <_printf_float+0xbe>
 800baee:	f108 0801 	add.w	r8, r8, #1
 800baf2:	68e3      	ldr	r3, [r4, #12]
 800baf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800baf6:	1a5b      	subs	r3, r3, r1
 800baf8:	4543      	cmp	r3, r8
 800bafa:	dcf0      	bgt.n	800bade <_printf_float+0x442>
 800bafc:	e6f8      	b.n	800b8f0 <_printf_float+0x254>
 800bafe:	f04f 0800 	mov.w	r8, #0
 800bb02:	f104 0919 	add.w	r9, r4, #25
 800bb06:	e7f4      	b.n	800baf2 <_printf_float+0x456>

0800bb08 <_printf_common>:
 800bb08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb0c:	4616      	mov	r6, r2
 800bb0e:	4699      	mov	r9, r3
 800bb10:	688a      	ldr	r2, [r1, #8]
 800bb12:	690b      	ldr	r3, [r1, #16]
 800bb14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	bfb8      	it	lt
 800bb1c:	4613      	movlt	r3, r2
 800bb1e:	6033      	str	r3, [r6, #0]
 800bb20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb24:	4607      	mov	r7, r0
 800bb26:	460c      	mov	r4, r1
 800bb28:	b10a      	cbz	r2, 800bb2e <_printf_common+0x26>
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	6033      	str	r3, [r6, #0]
 800bb2e:	6823      	ldr	r3, [r4, #0]
 800bb30:	0699      	lsls	r1, r3, #26
 800bb32:	bf42      	ittt	mi
 800bb34:	6833      	ldrmi	r3, [r6, #0]
 800bb36:	3302      	addmi	r3, #2
 800bb38:	6033      	strmi	r3, [r6, #0]
 800bb3a:	6825      	ldr	r5, [r4, #0]
 800bb3c:	f015 0506 	ands.w	r5, r5, #6
 800bb40:	d106      	bne.n	800bb50 <_printf_common+0x48>
 800bb42:	f104 0a19 	add.w	sl, r4, #25
 800bb46:	68e3      	ldr	r3, [r4, #12]
 800bb48:	6832      	ldr	r2, [r6, #0]
 800bb4a:	1a9b      	subs	r3, r3, r2
 800bb4c:	42ab      	cmp	r3, r5
 800bb4e:	dc26      	bgt.n	800bb9e <_printf_common+0x96>
 800bb50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb54:	1e13      	subs	r3, r2, #0
 800bb56:	6822      	ldr	r2, [r4, #0]
 800bb58:	bf18      	it	ne
 800bb5a:	2301      	movne	r3, #1
 800bb5c:	0692      	lsls	r2, r2, #26
 800bb5e:	d42b      	bmi.n	800bbb8 <_printf_common+0xb0>
 800bb60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb64:	4649      	mov	r1, r9
 800bb66:	4638      	mov	r0, r7
 800bb68:	47c0      	blx	r8
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	d01e      	beq.n	800bbac <_printf_common+0xa4>
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	6922      	ldr	r2, [r4, #16]
 800bb72:	f003 0306 	and.w	r3, r3, #6
 800bb76:	2b04      	cmp	r3, #4
 800bb78:	bf02      	ittt	eq
 800bb7a:	68e5      	ldreq	r5, [r4, #12]
 800bb7c:	6833      	ldreq	r3, [r6, #0]
 800bb7e:	1aed      	subeq	r5, r5, r3
 800bb80:	68a3      	ldr	r3, [r4, #8]
 800bb82:	bf0c      	ite	eq
 800bb84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb88:	2500      	movne	r5, #0
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	bfc4      	itt	gt
 800bb8e:	1a9b      	subgt	r3, r3, r2
 800bb90:	18ed      	addgt	r5, r5, r3
 800bb92:	2600      	movs	r6, #0
 800bb94:	341a      	adds	r4, #26
 800bb96:	42b5      	cmp	r5, r6
 800bb98:	d11a      	bne.n	800bbd0 <_printf_common+0xc8>
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	e008      	b.n	800bbb0 <_printf_common+0xa8>
 800bb9e:	2301      	movs	r3, #1
 800bba0:	4652      	mov	r2, sl
 800bba2:	4649      	mov	r1, r9
 800bba4:	4638      	mov	r0, r7
 800bba6:	47c0      	blx	r8
 800bba8:	3001      	adds	r0, #1
 800bbaa:	d103      	bne.n	800bbb4 <_printf_common+0xac>
 800bbac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbb4:	3501      	adds	r5, #1
 800bbb6:	e7c6      	b.n	800bb46 <_printf_common+0x3e>
 800bbb8:	18e1      	adds	r1, r4, r3
 800bbba:	1c5a      	adds	r2, r3, #1
 800bbbc:	2030      	movs	r0, #48	; 0x30
 800bbbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbc2:	4422      	add	r2, r4
 800bbc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbcc:	3302      	adds	r3, #2
 800bbce:	e7c7      	b.n	800bb60 <_printf_common+0x58>
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	4622      	mov	r2, r4
 800bbd4:	4649      	mov	r1, r9
 800bbd6:	4638      	mov	r0, r7
 800bbd8:	47c0      	blx	r8
 800bbda:	3001      	adds	r0, #1
 800bbdc:	d0e6      	beq.n	800bbac <_printf_common+0xa4>
 800bbde:	3601      	adds	r6, #1
 800bbe0:	e7d9      	b.n	800bb96 <_printf_common+0x8e>
	...

0800bbe4 <_printf_i>:
 800bbe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe8:	7e0f      	ldrb	r7, [r1, #24]
 800bbea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbec:	2f78      	cmp	r7, #120	; 0x78
 800bbee:	4691      	mov	r9, r2
 800bbf0:	4680      	mov	r8, r0
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	469a      	mov	sl, r3
 800bbf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bbfa:	d807      	bhi.n	800bc0c <_printf_i+0x28>
 800bbfc:	2f62      	cmp	r7, #98	; 0x62
 800bbfe:	d80a      	bhi.n	800bc16 <_printf_i+0x32>
 800bc00:	2f00      	cmp	r7, #0
 800bc02:	f000 80d4 	beq.w	800bdae <_printf_i+0x1ca>
 800bc06:	2f58      	cmp	r7, #88	; 0x58
 800bc08:	f000 80c0 	beq.w	800bd8c <_printf_i+0x1a8>
 800bc0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc14:	e03a      	b.n	800bc8c <_printf_i+0xa8>
 800bc16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc1a:	2b15      	cmp	r3, #21
 800bc1c:	d8f6      	bhi.n	800bc0c <_printf_i+0x28>
 800bc1e:	a101      	add	r1, pc, #4	; (adr r1, 800bc24 <_printf_i+0x40>)
 800bc20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc24:	0800bc7d 	.word	0x0800bc7d
 800bc28:	0800bc91 	.word	0x0800bc91
 800bc2c:	0800bc0d 	.word	0x0800bc0d
 800bc30:	0800bc0d 	.word	0x0800bc0d
 800bc34:	0800bc0d 	.word	0x0800bc0d
 800bc38:	0800bc0d 	.word	0x0800bc0d
 800bc3c:	0800bc91 	.word	0x0800bc91
 800bc40:	0800bc0d 	.word	0x0800bc0d
 800bc44:	0800bc0d 	.word	0x0800bc0d
 800bc48:	0800bc0d 	.word	0x0800bc0d
 800bc4c:	0800bc0d 	.word	0x0800bc0d
 800bc50:	0800bd95 	.word	0x0800bd95
 800bc54:	0800bcbd 	.word	0x0800bcbd
 800bc58:	0800bd4f 	.word	0x0800bd4f
 800bc5c:	0800bc0d 	.word	0x0800bc0d
 800bc60:	0800bc0d 	.word	0x0800bc0d
 800bc64:	0800bdb7 	.word	0x0800bdb7
 800bc68:	0800bc0d 	.word	0x0800bc0d
 800bc6c:	0800bcbd 	.word	0x0800bcbd
 800bc70:	0800bc0d 	.word	0x0800bc0d
 800bc74:	0800bc0d 	.word	0x0800bc0d
 800bc78:	0800bd57 	.word	0x0800bd57
 800bc7c:	682b      	ldr	r3, [r5, #0]
 800bc7e:	1d1a      	adds	r2, r3, #4
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	602a      	str	r2, [r5, #0]
 800bc84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e09f      	b.n	800bdd0 <_printf_i+0x1ec>
 800bc90:	6820      	ldr	r0, [r4, #0]
 800bc92:	682b      	ldr	r3, [r5, #0]
 800bc94:	0607      	lsls	r7, r0, #24
 800bc96:	f103 0104 	add.w	r1, r3, #4
 800bc9a:	6029      	str	r1, [r5, #0]
 800bc9c:	d501      	bpl.n	800bca2 <_printf_i+0xbe>
 800bc9e:	681e      	ldr	r6, [r3, #0]
 800bca0:	e003      	b.n	800bcaa <_printf_i+0xc6>
 800bca2:	0646      	lsls	r6, r0, #25
 800bca4:	d5fb      	bpl.n	800bc9e <_printf_i+0xba>
 800bca6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bcaa:	2e00      	cmp	r6, #0
 800bcac:	da03      	bge.n	800bcb6 <_printf_i+0xd2>
 800bcae:	232d      	movs	r3, #45	; 0x2d
 800bcb0:	4276      	negs	r6, r6
 800bcb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcb6:	485a      	ldr	r0, [pc, #360]	; (800be20 <_printf_i+0x23c>)
 800bcb8:	230a      	movs	r3, #10
 800bcba:	e012      	b.n	800bce2 <_printf_i+0xfe>
 800bcbc:	682b      	ldr	r3, [r5, #0]
 800bcbe:	6820      	ldr	r0, [r4, #0]
 800bcc0:	1d19      	adds	r1, r3, #4
 800bcc2:	6029      	str	r1, [r5, #0]
 800bcc4:	0605      	lsls	r5, r0, #24
 800bcc6:	d501      	bpl.n	800bccc <_printf_i+0xe8>
 800bcc8:	681e      	ldr	r6, [r3, #0]
 800bcca:	e002      	b.n	800bcd2 <_printf_i+0xee>
 800bccc:	0641      	lsls	r1, r0, #25
 800bcce:	d5fb      	bpl.n	800bcc8 <_printf_i+0xe4>
 800bcd0:	881e      	ldrh	r6, [r3, #0]
 800bcd2:	4853      	ldr	r0, [pc, #332]	; (800be20 <_printf_i+0x23c>)
 800bcd4:	2f6f      	cmp	r7, #111	; 0x6f
 800bcd6:	bf0c      	ite	eq
 800bcd8:	2308      	moveq	r3, #8
 800bcda:	230a      	movne	r3, #10
 800bcdc:	2100      	movs	r1, #0
 800bcde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bce2:	6865      	ldr	r5, [r4, #4]
 800bce4:	60a5      	str	r5, [r4, #8]
 800bce6:	2d00      	cmp	r5, #0
 800bce8:	bfa2      	ittt	ge
 800bcea:	6821      	ldrge	r1, [r4, #0]
 800bcec:	f021 0104 	bicge.w	r1, r1, #4
 800bcf0:	6021      	strge	r1, [r4, #0]
 800bcf2:	b90e      	cbnz	r6, 800bcf8 <_printf_i+0x114>
 800bcf4:	2d00      	cmp	r5, #0
 800bcf6:	d04b      	beq.n	800bd90 <_printf_i+0x1ac>
 800bcf8:	4615      	mov	r5, r2
 800bcfa:	fbb6 f1f3 	udiv	r1, r6, r3
 800bcfe:	fb03 6711 	mls	r7, r3, r1, r6
 800bd02:	5dc7      	ldrb	r7, [r0, r7]
 800bd04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd08:	4637      	mov	r7, r6
 800bd0a:	42bb      	cmp	r3, r7
 800bd0c:	460e      	mov	r6, r1
 800bd0e:	d9f4      	bls.n	800bcfa <_printf_i+0x116>
 800bd10:	2b08      	cmp	r3, #8
 800bd12:	d10b      	bne.n	800bd2c <_printf_i+0x148>
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	07de      	lsls	r6, r3, #31
 800bd18:	d508      	bpl.n	800bd2c <_printf_i+0x148>
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	6861      	ldr	r1, [r4, #4]
 800bd1e:	4299      	cmp	r1, r3
 800bd20:	bfde      	ittt	le
 800bd22:	2330      	movle	r3, #48	; 0x30
 800bd24:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bd2c:	1b52      	subs	r2, r2, r5
 800bd2e:	6122      	str	r2, [r4, #16]
 800bd30:	f8cd a000 	str.w	sl, [sp]
 800bd34:	464b      	mov	r3, r9
 800bd36:	aa03      	add	r2, sp, #12
 800bd38:	4621      	mov	r1, r4
 800bd3a:	4640      	mov	r0, r8
 800bd3c:	f7ff fee4 	bl	800bb08 <_printf_common>
 800bd40:	3001      	adds	r0, #1
 800bd42:	d14a      	bne.n	800bdda <_printf_i+0x1f6>
 800bd44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd48:	b004      	add	sp, #16
 800bd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	f043 0320 	orr.w	r3, r3, #32
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	4833      	ldr	r0, [pc, #204]	; (800be24 <_printf_i+0x240>)
 800bd58:	2778      	movs	r7, #120	; 0x78
 800bd5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	6829      	ldr	r1, [r5, #0]
 800bd62:	061f      	lsls	r7, r3, #24
 800bd64:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd68:	d402      	bmi.n	800bd70 <_printf_i+0x18c>
 800bd6a:	065f      	lsls	r7, r3, #25
 800bd6c:	bf48      	it	mi
 800bd6e:	b2b6      	uxthmi	r6, r6
 800bd70:	07df      	lsls	r7, r3, #31
 800bd72:	bf48      	it	mi
 800bd74:	f043 0320 	orrmi.w	r3, r3, #32
 800bd78:	6029      	str	r1, [r5, #0]
 800bd7a:	bf48      	it	mi
 800bd7c:	6023      	strmi	r3, [r4, #0]
 800bd7e:	b91e      	cbnz	r6, 800bd88 <_printf_i+0x1a4>
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	f023 0320 	bic.w	r3, r3, #32
 800bd86:	6023      	str	r3, [r4, #0]
 800bd88:	2310      	movs	r3, #16
 800bd8a:	e7a7      	b.n	800bcdc <_printf_i+0xf8>
 800bd8c:	4824      	ldr	r0, [pc, #144]	; (800be20 <_printf_i+0x23c>)
 800bd8e:	e7e4      	b.n	800bd5a <_printf_i+0x176>
 800bd90:	4615      	mov	r5, r2
 800bd92:	e7bd      	b.n	800bd10 <_printf_i+0x12c>
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	6826      	ldr	r6, [r4, #0]
 800bd98:	6961      	ldr	r1, [r4, #20]
 800bd9a:	1d18      	adds	r0, r3, #4
 800bd9c:	6028      	str	r0, [r5, #0]
 800bd9e:	0635      	lsls	r5, r6, #24
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	d501      	bpl.n	800bda8 <_printf_i+0x1c4>
 800bda4:	6019      	str	r1, [r3, #0]
 800bda6:	e002      	b.n	800bdae <_printf_i+0x1ca>
 800bda8:	0670      	lsls	r0, r6, #25
 800bdaa:	d5fb      	bpl.n	800bda4 <_printf_i+0x1c0>
 800bdac:	8019      	strh	r1, [r3, #0]
 800bdae:	2300      	movs	r3, #0
 800bdb0:	6123      	str	r3, [r4, #16]
 800bdb2:	4615      	mov	r5, r2
 800bdb4:	e7bc      	b.n	800bd30 <_printf_i+0x14c>
 800bdb6:	682b      	ldr	r3, [r5, #0]
 800bdb8:	1d1a      	adds	r2, r3, #4
 800bdba:	602a      	str	r2, [r5, #0]
 800bdbc:	681d      	ldr	r5, [r3, #0]
 800bdbe:	6862      	ldr	r2, [r4, #4]
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	f7f4 fa04 	bl	80001d0 <memchr>
 800bdc8:	b108      	cbz	r0, 800bdce <_printf_i+0x1ea>
 800bdca:	1b40      	subs	r0, r0, r5
 800bdcc:	6060      	str	r0, [r4, #4]
 800bdce:	6863      	ldr	r3, [r4, #4]
 800bdd0:	6123      	str	r3, [r4, #16]
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdd8:	e7aa      	b.n	800bd30 <_printf_i+0x14c>
 800bdda:	6923      	ldr	r3, [r4, #16]
 800bddc:	462a      	mov	r2, r5
 800bdde:	4649      	mov	r1, r9
 800bde0:	4640      	mov	r0, r8
 800bde2:	47d0      	blx	sl
 800bde4:	3001      	adds	r0, #1
 800bde6:	d0ad      	beq.n	800bd44 <_printf_i+0x160>
 800bde8:	6823      	ldr	r3, [r4, #0]
 800bdea:	079b      	lsls	r3, r3, #30
 800bdec:	d413      	bmi.n	800be16 <_printf_i+0x232>
 800bdee:	68e0      	ldr	r0, [r4, #12]
 800bdf0:	9b03      	ldr	r3, [sp, #12]
 800bdf2:	4298      	cmp	r0, r3
 800bdf4:	bfb8      	it	lt
 800bdf6:	4618      	movlt	r0, r3
 800bdf8:	e7a6      	b.n	800bd48 <_printf_i+0x164>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	4632      	mov	r2, r6
 800bdfe:	4649      	mov	r1, r9
 800be00:	4640      	mov	r0, r8
 800be02:	47d0      	blx	sl
 800be04:	3001      	adds	r0, #1
 800be06:	d09d      	beq.n	800bd44 <_printf_i+0x160>
 800be08:	3501      	adds	r5, #1
 800be0a:	68e3      	ldr	r3, [r4, #12]
 800be0c:	9903      	ldr	r1, [sp, #12]
 800be0e:	1a5b      	subs	r3, r3, r1
 800be10:	42ab      	cmp	r3, r5
 800be12:	dcf2      	bgt.n	800bdfa <_printf_i+0x216>
 800be14:	e7eb      	b.n	800bdee <_printf_i+0x20a>
 800be16:	2500      	movs	r5, #0
 800be18:	f104 0619 	add.w	r6, r4, #25
 800be1c:	e7f5      	b.n	800be0a <_printf_i+0x226>
 800be1e:	bf00      	nop
 800be20:	0800ff3e 	.word	0x0800ff3e
 800be24:	0800ff4f 	.word	0x0800ff4f

0800be28 <siprintf>:
 800be28:	b40e      	push	{r1, r2, r3}
 800be2a:	b500      	push	{lr}
 800be2c:	b09c      	sub	sp, #112	; 0x70
 800be2e:	ab1d      	add	r3, sp, #116	; 0x74
 800be30:	9002      	str	r0, [sp, #8]
 800be32:	9006      	str	r0, [sp, #24]
 800be34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be38:	4809      	ldr	r0, [pc, #36]	; (800be60 <siprintf+0x38>)
 800be3a:	9107      	str	r1, [sp, #28]
 800be3c:	9104      	str	r1, [sp, #16]
 800be3e:	4909      	ldr	r1, [pc, #36]	; (800be64 <siprintf+0x3c>)
 800be40:	f853 2b04 	ldr.w	r2, [r3], #4
 800be44:	9105      	str	r1, [sp, #20]
 800be46:	6800      	ldr	r0, [r0, #0]
 800be48:	9301      	str	r3, [sp, #4]
 800be4a:	a902      	add	r1, sp, #8
 800be4c:	f000 ffec 	bl	800ce28 <_svfiprintf_r>
 800be50:	9b02      	ldr	r3, [sp, #8]
 800be52:	2200      	movs	r2, #0
 800be54:	701a      	strb	r2, [r3, #0]
 800be56:	b01c      	add	sp, #112	; 0x70
 800be58:	f85d eb04 	ldr.w	lr, [sp], #4
 800be5c:	b003      	add	sp, #12
 800be5e:	4770      	bx	lr
 800be60:	2000006c 	.word	0x2000006c
 800be64:	ffff0208 	.word	0xffff0208

0800be68 <std>:
 800be68:	2300      	movs	r3, #0
 800be6a:	b510      	push	{r4, lr}
 800be6c:	4604      	mov	r4, r0
 800be6e:	e9c0 3300 	strd	r3, r3, [r0]
 800be72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be76:	6083      	str	r3, [r0, #8]
 800be78:	8181      	strh	r1, [r0, #12]
 800be7a:	6643      	str	r3, [r0, #100]	; 0x64
 800be7c:	81c2      	strh	r2, [r0, #14]
 800be7e:	6183      	str	r3, [r0, #24]
 800be80:	4619      	mov	r1, r3
 800be82:	2208      	movs	r2, #8
 800be84:	305c      	adds	r0, #92	; 0x5c
 800be86:	f000 f8b1 	bl	800bfec <memset>
 800be8a:	4b0d      	ldr	r3, [pc, #52]	; (800bec0 <std+0x58>)
 800be8c:	6263      	str	r3, [r4, #36]	; 0x24
 800be8e:	4b0d      	ldr	r3, [pc, #52]	; (800bec4 <std+0x5c>)
 800be90:	62a3      	str	r3, [r4, #40]	; 0x28
 800be92:	4b0d      	ldr	r3, [pc, #52]	; (800bec8 <std+0x60>)
 800be94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be96:	4b0d      	ldr	r3, [pc, #52]	; (800becc <std+0x64>)
 800be98:	6323      	str	r3, [r4, #48]	; 0x30
 800be9a:	4b0d      	ldr	r3, [pc, #52]	; (800bed0 <std+0x68>)
 800be9c:	6224      	str	r4, [r4, #32]
 800be9e:	429c      	cmp	r4, r3
 800bea0:	d006      	beq.n	800beb0 <std+0x48>
 800bea2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bea6:	4294      	cmp	r4, r2
 800bea8:	d002      	beq.n	800beb0 <std+0x48>
 800beaa:	33d0      	adds	r3, #208	; 0xd0
 800beac:	429c      	cmp	r4, r3
 800beae:	d105      	bne.n	800bebc <std+0x54>
 800beb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800beb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beb8:	f000 b8ce 	b.w	800c058 <__retarget_lock_init_recursive>
 800bebc:	bd10      	pop	{r4, pc}
 800bebe:	bf00      	nop
 800bec0:	0800d9e1 	.word	0x0800d9e1
 800bec4:	0800da03 	.word	0x0800da03
 800bec8:	0800da3b 	.word	0x0800da3b
 800becc:	0800da5f 	.word	0x0800da5f
 800bed0:	200052a4 	.word	0x200052a4

0800bed4 <stdio_exit_handler>:
 800bed4:	4a02      	ldr	r2, [pc, #8]	; (800bee0 <stdio_exit_handler+0xc>)
 800bed6:	4903      	ldr	r1, [pc, #12]	; (800bee4 <stdio_exit_handler+0x10>)
 800bed8:	4803      	ldr	r0, [pc, #12]	; (800bee8 <stdio_exit_handler+0x14>)
 800beda:	f000 b869 	b.w	800bfb0 <_fwalk_sglue>
 800bede:	bf00      	nop
 800bee0:	20000014 	.word	0x20000014
 800bee4:	0800d281 	.word	0x0800d281
 800bee8:	20000020 	.word	0x20000020

0800beec <cleanup_stdio>:
 800beec:	6841      	ldr	r1, [r0, #4]
 800beee:	4b0c      	ldr	r3, [pc, #48]	; (800bf20 <cleanup_stdio+0x34>)
 800bef0:	4299      	cmp	r1, r3
 800bef2:	b510      	push	{r4, lr}
 800bef4:	4604      	mov	r4, r0
 800bef6:	d001      	beq.n	800befc <cleanup_stdio+0x10>
 800bef8:	f001 f9c2 	bl	800d280 <_fflush_r>
 800befc:	68a1      	ldr	r1, [r4, #8]
 800befe:	4b09      	ldr	r3, [pc, #36]	; (800bf24 <cleanup_stdio+0x38>)
 800bf00:	4299      	cmp	r1, r3
 800bf02:	d002      	beq.n	800bf0a <cleanup_stdio+0x1e>
 800bf04:	4620      	mov	r0, r4
 800bf06:	f001 f9bb 	bl	800d280 <_fflush_r>
 800bf0a:	68e1      	ldr	r1, [r4, #12]
 800bf0c:	4b06      	ldr	r3, [pc, #24]	; (800bf28 <cleanup_stdio+0x3c>)
 800bf0e:	4299      	cmp	r1, r3
 800bf10:	d004      	beq.n	800bf1c <cleanup_stdio+0x30>
 800bf12:	4620      	mov	r0, r4
 800bf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf18:	f001 b9b2 	b.w	800d280 <_fflush_r>
 800bf1c:	bd10      	pop	{r4, pc}
 800bf1e:	bf00      	nop
 800bf20:	200052a4 	.word	0x200052a4
 800bf24:	2000530c 	.word	0x2000530c
 800bf28:	20005374 	.word	0x20005374

0800bf2c <global_stdio_init.part.0>:
 800bf2c:	b510      	push	{r4, lr}
 800bf2e:	4b0b      	ldr	r3, [pc, #44]	; (800bf5c <global_stdio_init.part.0+0x30>)
 800bf30:	4c0b      	ldr	r4, [pc, #44]	; (800bf60 <global_stdio_init.part.0+0x34>)
 800bf32:	4a0c      	ldr	r2, [pc, #48]	; (800bf64 <global_stdio_init.part.0+0x38>)
 800bf34:	601a      	str	r2, [r3, #0]
 800bf36:	4620      	mov	r0, r4
 800bf38:	2200      	movs	r2, #0
 800bf3a:	2104      	movs	r1, #4
 800bf3c:	f7ff ff94 	bl	800be68 <std>
 800bf40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bf44:	2201      	movs	r2, #1
 800bf46:	2109      	movs	r1, #9
 800bf48:	f7ff ff8e 	bl	800be68 <std>
 800bf4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bf50:	2202      	movs	r2, #2
 800bf52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf56:	2112      	movs	r1, #18
 800bf58:	f7ff bf86 	b.w	800be68 <std>
 800bf5c:	200053dc 	.word	0x200053dc
 800bf60:	200052a4 	.word	0x200052a4
 800bf64:	0800bed5 	.word	0x0800bed5

0800bf68 <__sfp_lock_acquire>:
 800bf68:	4801      	ldr	r0, [pc, #4]	; (800bf70 <__sfp_lock_acquire+0x8>)
 800bf6a:	f000 b876 	b.w	800c05a <__retarget_lock_acquire_recursive>
 800bf6e:	bf00      	nop
 800bf70:	200053e1 	.word	0x200053e1

0800bf74 <__sfp_lock_release>:
 800bf74:	4801      	ldr	r0, [pc, #4]	; (800bf7c <__sfp_lock_release+0x8>)
 800bf76:	f000 b871 	b.w	800c05c <__retarget_lock_release_recursive>
 800bf7a:	bf00      	nop
 800bf7c:	200053e1 	.word	0x200053e1

0800bf80 <__sinit>:
 800bf80:	b510      	push	{r4, lr}
 800bf82:	4604      	mov	r4, r0
 800bf84:	f7ff fff0 	bl	800bf68 <__sfp_lock_acquire>
 800bf88:	6a23      	ldr	r3, [r4, #32]
 800bf8a:	b11b      	cbz	r3, 800bf94 <__sinit+0x14>
 800bf8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf90:	f7ff bff0 	b.w	800bf74 <__sfp_lock_release>
 800bf94:	4b04      	ldr	r3, [pc, #16]	; (800bfa8 <__sinit+0x28>)
 800bf96:	6223      	str	r3, [r4, #32]
 800bf98:	4b04      	ldr	r3, [pc, #16]	; (800bfac <__sinit+0x2c>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1f5      	bne.n	800bf8c <__sinit+0xc>
 800bfa0:	f7ff ffc4 	bl	800bf2c <global_stdio_init.part.0>
 800bfa4:	e7f2      	b.n	800bf8c <__sinit+0xc>
 800bfa6:	bf00      	nop
 800bfa8:	0800beed 	.word	0x0800beed
 800bfac:	200053dc 	.word	0x200053dc

0800bfb0 <_fwalk_sglue>:
 800bfb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfb4:	4607      	mov	r7, r0
 800bfb6:	4688      	mov	r8, r1
 800bfb8:	4614      	mov	r4, r2
 800bfba:	2600      	movs	r6, #0
 800bfbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfc0:	f1b9 0901 	subs.w	r9, r9, #1
 800bfc4:	d505      	bpl.n	800bfd2 <_fwalk_sglue+0x22>
 800bfc6:	6824      	ldr	r4, [r4, #0]
 800bfc8:	2c00      	cmp	r4, #0
 800bfca:	d1f7      	bne.n	800bfbc <_fwalk_sglue+0xc>
 800bfcc:	4630      	mov	r0, r6
 800bfce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfd2:	89ab      	ldrh	r3, [r5, #12]
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d907      	bls.n	800bfe8 <_fwalk_sglue+0x38>
 800bfd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	d003      	beq.n	800bfe8 <_fwalk_sglue+0x38>
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	4638      	mov	r0, r7
 800bfe4:	47c0      	blx	r8
 800bfe6:	4306      	orrs	r6, r0
 800bfe8:	3568      	adds	r5, #104	; 0x68
 800bfea:	e7e9      	b.n	800bfc0 <_fwalk_sglue+0x10>

0800bfec <memset>:
 800bfec:	4402      	add	r2, r0
 800bfee:	4603      	mov	r3, r0
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d100      	bne.n	800bff6 <memset+0xa>
 800bff4:	4770      	bx	lr
 800bff6:	f803 1b01 	strb.w	r1, [r3], #1
 800bffa:	e7f9      	b.n	800bff0 <memset+0x4>

0800bffc <_localeconv_r>:
 800bffc:	4800      	ldr	r0, [pc, #0]	; (800c000 <_localeconv_r+0x4>)
 800bffe:	4770      	bx	lr
 800c000:	20000160 	.word	0x20000160

0800c004 <__errno>:
 800c004:	4b01      	ldr	r3, [pc, #4]	; (800c00c <__errno+0x8>)
 800c006:	6818      	ldr	r0, [r3, #0]
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	2000006c 	.word	0x2000006c

0800c010 <__libc_init_array>:
 800c010:	b570      	push	{r4, r5, r6, lr}
 800c012:	4d0d      	ldr	r5, [pc, #52]	; (800c048 <__libc_init_array+0x38>)
 800c014:	4c0d      	ldr	r4, [pc, #52]	; (800c04c <__libc_init_array+0x3c>)
 800c016:	1b64      	subs	r4, r4, r5
 800c018:	10a4      	asrs	r4, r4, #2
 800c01a:	2600      	movs	r6, #0
 800c01c:	42a6      	cmp	r6, r4
 800c01e:	d109      	bne.n	800c034 <__libc_init_array+0x24>
 800c020:	4d0b      	ldr	r5, [pc, #44]	; (800c050 <__libc_init_array+0x40>)
 800c022:	4c0c      	ldr	r4, [pc, #48]	; (800c054 <__libc_init_array+0x44>)
 800c024:	f003 f9b4 	bl	800f390 <_init>
 800c028:	1b64      	subs	r4, r4, r5
 800c02a:	10a4      	asrs	r4, r4, #2
 800c02c:	2600      	movs	r6, #0
 800c02e:	42a6      	cmp	r6, r4
 800c030:	d105      	bne.n	800c03e <__libc_init_array+0x2e>
 800c032:	bd70      	pop	{r4, r5, r6, pc}
 800c034:	f855 3b04 	ldr.w	r3, [r5], #4
 800c038:	4798      	blx	r3
 800c03a:	3601      	adds	r6, #1
 800c03c:	e7ee      	b.n	800c01c <__libc_init_array+0xc>
 800c03e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c042:	4798      	blx	r3
 800c044:	3601      	adds	r6, #1
 800c046:	e7f2      	b.n	800c02e <__libc_init_array+0x1e>
 800c048:	08010480 	.word	0x08010480
 800c04c:	08010480 	.word	0x08010480
 800c050:	08010480 	.word	0x08010480
 800c054:	08010484 	.word	0x08010484

0800c058 <__retarget_lock_init_recursive>:
 800c058:	4770      	bx	lr

0800c05a <__retarget_lock_acquire_recursive>:
 800c05a:	4770      	bx	lr

0800c05c <__retarget_lock_release_recursive>:
 800c05c:	4770      	bx	lr

0800c05e <memcpy>:
 800c05e:	440a      	add	r2, r1
 800c060:	4291      	cmp	r1, r2
 800c062:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c066:	d100      	bne.n	800c06a <memcpy+0xc>
 800c068:	4770      	bx	lr
 800c06a:	b510      	push	{r4, lr}
 800c06c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c070:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c074:	4291      	cmp	r1, r2
 800c076:	d1f9      	bne.n	800c06c <memcpy+0xe>
 800c078:	bd10      	pop	{r4, pc}

0800c07a <quorem>:
 800c07a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07e:	6903      	ldr	r3, [r0, #16]
 800c080:	690c      	ldr	r4, [r1, #16]
 800c082:	42a3      	cmp	r3, r4
 800c084:	4607      	mov	r7, r0
 800c086:	db7e      	blt.n	800c186 <quorem+0x10c>
 800c088:	3c01      	subs	r4, #1
 800c08a:	f101 0814 	add.w	r8, r1, #20
 800c08e:	f100 0514 	add.w	r5, r0, #20
 800c092:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c096:	9301      	str	r3, [sp, #4]
 800c098:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c09c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c0a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c0ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800c0b0:	d331      	bcc.n	800c116 <quorem+0x9c>
 800c0b2:	f04f 0e00 	mov.w	lr, #0
 800c0b6:	4640      	mov	r0, r8
 800c0b8:	46ac      	mov	ip, r5
 800c0ba:	46f2      	mov	sl, lr
 800c0bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c0c0:	b293      	uxth	r3, r2
 800c0c2:	fb06 e303 	mla	r3, r6, r3, lr
 800c0c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c0ca:	0c1a      	lsrs	r2, r3, #16
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	ebaa 0303 	sub.w	r3, sl, r3
 800c0d2:	f8dc a000 	ldr.w	sl, [ip]
 800c0d6:	fa13 f38a 	uxtah	r3, r3, sl
 800c0da:	fb06 220e 	mla	r2, r6, lr, r2
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	9b00      	ldr	r3, [sp, #0]
 800c0e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c0e6:	b292      	uxth	r2, r2
 800c0e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c0ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0f0:	f8bd 3000 	ldrh.w	r3, [sp]
 800c0f4:	4581      	cmp	r9, r0
 800c0f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0fa:	f84c 3b04 	str.w	r3, [ip], #4
 800c0fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c102:	d2db      	bcs.n	800c0bc <quorem+0x42>
 800c104:	f855 300b 	ldr.w	r3, [r5, fp]
 800c108:	b92b      	cbnz	r3, 800c116 <quorem+0x9c>
 800c10a:	9b01      	ldr	r3, [sp, #4]
 800c10c:	3b04      	subs	r3, #4
 800c10e:	429d      	cmp	r5, r3
 800c110:	461a      	mov	r2, r3
 800c112:	d32c      	bcc.n	800c16e <quorem+0xf4>
 800c114:	613c      	str	r4, [r7, #16]
 800c116:	4638      	mov	r0, r7
 800c118:	f001 fb62 	bl	800d7e0 <__mcmp>
 800c11c:	2800      	cmp	r0, #0
 800c11e:	db22      	blt.n	800c166 <quorem+0xec>
 800c120:	3601      	adds	r6, #1
 800c122:	4629      	mov	r1, r5
 800c124:	2000      	movs	r0, #0
 800c126:	f858 2b04 	ldr.w	r2, [r8], #4
 800c12a:	f8d1 c000 	ldr.w	ip, [r1]
 800c12e:	b293      	uxth	r3, r2
 800c130:	1ac3      	subs	r3, r0, r3
 800c132:	0c12      	lsrs	r2, r2, #16
 800c134:	fa13 f38c 	uxtah	r3, r3, ip
 800c138:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c13c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c140:	b29b      	uxth	r3, r3
 800c142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c146:	45c1      	cmp	r9, r8
 800c148:	f841 3b04 	str.w	r3, [r1], #4
 800c14c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c150:	d2e9      	bcs.n	800c126 <quorem+0xac>
 800c152:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c15a:	b922      	cbnz	r2, 800c166 <quorem+0xec>
 800c15c:	3b04      	subs	r3, #4
 800c15e:	429d      	cmp	r5, r3
 800c160:	461a      	mov	r2, r3
 800c162:	d30a      	bcc.n	800c17a <quorem+0x100>
 800c164:	613c      	str	r4, [r7, #16]
 800c166:	4630      	mov	r0, r6
 800c168:	b003      	add	sp, #12
 800c16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16e:	6812      	ldr	r2, [r2, #0]
 800c170:	3b04      	subs	r3, #4
 800c172:	2a00      	cmp	r2, #0
 800c174:	d1ce      	bne.n	800c114 <quorem+0x9a>
 800c176:	3c01      	subs	r4, #1
 800c178:	e7c9      	b.n	800c10e <quorem+0x94>
 800c17a:	6812      	ldr	r2, [r2, #0]
 800c17c:	3b04      	subs	r3, #4
 800c17e:	2a00      	cmp	r2, #0
 800c180:	d1f0      	bne.n	800c164 <quorem+0xea>
 800c182:	3c01      	subs	r4, #1
 800c184:	e7eb      	b.n	800c15e <quorem+0xe4>
 800c186:	2000      	movs	r0, #0
 800c188:	e7ee      	b.n	800c168 <quorem+0xee>
 800c18a:	0000      	movs	r0, r0
 800c18c:	0000      	movs	r0, r0
	...

0800c190 <_dtoa_r>:
 800c190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c194:	ed2d 8b04 	vpush	{d8-d9}
 800c198:	69c5      	ldr	r5, [r0, #28]
 800c19a:	b093      	sub	sp, #76	; 0x4c
 800c19c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c1a0:	ec57 6b10 	vmov	r6, r7, d0
 800c1a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c1a8:	9107      	str	r1, [sp, #28]
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	920a      	str	r2, [sp, #40]	; 0x28
 800c1ae:	930d      	str	r3, [sp, #52]	; 0x34
 800c1b0:	b975      	cbnz	r5, 800c1d0 <_dtoa_r+0x40>
 800c1b2:	2010      	movs	r0, #16
 800c1b4:	f000 ff36 	bl	800d024 <malloc>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	61e0      	str	r0, [r4, #28]
 800c1bc:	b920      	cbnz	r0, 800c1c8 <_dtoa_r+0x38>
 800c1be:	4bae      	ldr	r3, [pc, #696]	; (800c478 <_dtoa_r+0x2e8>)
 800c1c0:	21ef      	movs	r1, #239	; 0xef
 800c1c2:	48ae      	ldr	r0, [pc, #696]	; (800c47c <_dtoa_r+0x2ec>)
 800c1c4:	f001 fcee 	bl	800dba4 <__assert_func>
 800c1c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c1cc:	6005      	str	r5, [r0, #0]
 800c1ce:	60c5      	str	r5, [r0, #12]
 800c1d0:	69e3      	ldr	r3, [r4, #28]
 800c1d2:	6819      	ldr	r1, [r3, #0]
 800c1d4:	b151      	cbz	r1, 800c1ec <_dtoa_r+0x5c>
 800c1d6:	685a      	ldr	r2, [r3, #4]
 800c1d8:	604a      	str	r2, [r1, #4]
 800c1da:	2301      	movs	r3, #1
 800c1dc:	4093      	lsls	r3, r2
 800c1de:	608b      	str	r3, [r1, #8]
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	f001 f8c1 	bl	800d368 <_Bfree>
 800c1e6:	69e3      	ldr	r3, [r4, #28]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	601a      	str	r2, [r3, #0]
 800c1ec:	1e3b      	subs	r3, r7, #0
 800c1ee:	bfbb      	ittet	lt
 800c1f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c1f4:	9303      	strlt	r3, [sp, #12]
 800c1f6:	2300      	movge	r3, #0
 800c1f8:	2201      	movlt	r2, #1
 800c1fa:	bfac      	ite	ge
 800c1fc:	f8c8 3000 	strge.w	r3, [r8]
 800c200:	f8c8 2000 	strlt.w	r2, [r8]
 800c204:	4b9e      	ldr	r3, [pc, #632]	; (800c480 <_dtoa_r+0x2f0>)
 800c206:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c20a:	ea33 0308 	bics.w	r3, r3, r8
 800c20e:	d11b      	bne.n	800c248 <_dtoa_r+0xb8>
 800c210:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c212:	f242 730f 	movw	r3, #9999	; 0x270f
 800c216:	6013      	str	r3, [r2, #0]
 800c218:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c21c:	4333      	orrs	r3, r6
 800c21e:	f000 8593 	beq.w	800cd48 <_dtoa_r+0xbb8>
 800c222:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c224:	b963      	cbnz	r3, 800c240 <_dtoa_r+0xb0>
 800c226:	4b97      	ldr	r3, [pc, #604]	; (800c484 <_dtoa_r+0x2f4>)
 800c228:	e027      	b.n	800c27a <_dtoa_r+0xea>
 800c22a:	4b97      	ldr	r3, [pc, #604]	; (800c488 <_dtoa_r+0x2f8>)
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	3308      	adds	r3, #8
 800c230:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c232:	6013      	str	r3, [r2, #0]
 800c234:	9800      	ldr	r0, [sp, #0]
 800c236:	b013      	add	sp, #76	; 0x4c
 800c238:	ecbd 8b04 	vpop	{d8-d9}
 800c23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c240:	4b90      	ldr	r3, [pc, #576]	; (800c484 <_dtoa_r+0x2f4>)
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	3303      	adds	r3, #3
 800c246:	e7f3      	b.n	800c230 <_dtoa_r+0xa0>
 800c248:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c24c:	2200      	movs	r2, #0
 800c24e:	ec51 0b17 	vmov	r0, r1, d7
 800c252:	eeb0 8a47 	vmov.f32	s16, s14
 800c256:	eef0 8a67 	vmov.f32	s17, s15
 800c25a:	2300      	movs	r3, #0
 800c25c:	f7f4 fc34 	bl	8000ac8 <__aeabi_dcmpeq>
 800c260:	4681      	mov	r9, r0
 800c262:	b160      	cbz	r0, 800c27e <_dtoa_r+0xee>
 800c264:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c266:	2301      	movs	r3, #1
 800c268:	6013      	str	r3, [r2, #0]
 800c26a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f000 8568 	beq.w	800cd42 <_dtoa_r+0xbb2>
 800c272:	4b86      	ldr	r3, [pc, #536]	; (800c48c <_dtoa_r+0x2fc>)
 800c274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c276:	6013      	str	r3, [r2, #0]
 800c278:	3b01      	subs	r3, #1
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	e7da      	b.n	800c234 <_dtoa_r+0xa4>
 800c27e:	aa10      	add	r2, sp, #64	; 0x40
 800c280:	a911      	add	r1, sp, #68	; 0x44
 800c282:	4620      	mov	r0, r4
 800c284:	eeb0 0a48 	vmov.f32	s0, s16
 800c288:	eef0 0a68 	vmov.f32	s1, s17
 800c28c:	f001 fb4e 	bl	800d92c <__d2b>
 800c290:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c294:	4682      	mov	sl, r0
 800c296:	2d00      	cmp	r5, #0
 800c298:	d07f      	beq.n	800c39a <_dtoa_r+0x20a>
 800c29a:	ee18 3a90 	vmov	r3, s17
 800c29e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c2a6:	ec51 0b18 	vmov	r0, r1, d8
 800c2aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c2ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c2b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	4b75      	ldr	r3, [pc, #468]	; (800c490 <_dtoa_r+0x300>)
 800c2bc:	f7f3 ffe4 	bl	8000288 <__aeabi_dsub>
 800c2c0:	a367      	add	r3, pc, #412	; (adr r3, 800c460 <_dtoa_r+0x2d0>)
 800c2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c6:	f7f4 f997 	bl	80005f8 <__aeabi_dmul>
 800c2ca:	a367      	add	r3, pc, #412	; (adr r3, 800c468 <_dtoa_r+0x2d8>)
 800c2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d0:	f7f3 ffdc 	bl	800028c <__adddf3>
 800c2d4:	4606      	mov	r6, r0
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	460f      	mov	r7, r1
 800c2da:	f7f4 f923 	bl	8000524 <__aeabi_i2d>
 800c2de:	a364      	add	r3, pc, #400	; (adr r3, 800c470 <_dtoa_r+0x2e0>)
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	f7f4 f988 	bl	80005f8 <__aeabi_dmul>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	4639      	mov	r1, r7
 800c2f0:	f7f3 ffcc 	bl	800028c <__adddf3>
 800c2f4:	4606      	mov	r6, r0
 800c2f6:	460f      	mov	r7, r1
 800c2f8:	f7f4 fc2e 	bl	8000b58 <__aeabi_d2iz>
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	4683      	mov	fp, r0
 800c300:	2300      	movs	r3, #0
 800c302:	4630      	mov	r0, r6
 800c304:	4639      	mov	r1, r7
 800c306:	f7f4 fbe9 	bl	8000adc <__aeabi_dcmplt>
 800c30a:	b148      	cbz	r0, 800c320 <_dtoa_r+0x190>
 800c30c:	4658      	mov	r0, fp
 800c30e:	f7f4 f909 	bl	8000524 <__aeabi_i2d>
 800c312:	4632      	mov	r2, r6
 800c314:	463b      	mov	r3, r7
 800c316:	f7f4 fbd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c31a:	b908      	cbnz	r0, 800c320 <_dtoa_r+0x190>
 800c31c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c320:	f1bb 0f16 	cmp.w	fp, #22
 800c324:	d857      	bhi.n	800c3d6 <_dtoa_r+0x246>
 800c326:	4b5b      	ldr	r3, [pc, #364]	; (800c494 <_dtoa_r+0x304>)
 800c328:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c330:	ec51 0b18 	vmov	r0, r1, d8
 800c334:	f7f4 fbd2 	bl	8000adc <__aeabi_dcmplt>
 800c338:	2800      	cmp	r0, #0
 800c33a:	d04e      	beq.n	800c3da <_dtoa_r+0x24a>
 800c33c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c340:	2300      	movs	r3, #0
 800c342:	930c      	str	r3, [sp, #48]	; 0x30
 800c344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c346:	1b5b      	subs	r3, r3, r5
 800c348:	1e5a      	subs	r2, r3, #1
 800c34a:	bf45      	ittet	mi
 800c34c:	f1c3 0301 	rsbmi	r3, r3, #1
 800c350:	9305      	strmi	r3, [sp, #20]
 800c352:	2300      	movpl	r3, #0
 800c354:	2300      	movmi	r3, #0
 800c356:	9206      	str	r2, [sp, #24]
 800c358:	bf54      	ite	pl
 800c35a:	9305      	strpl	r3, [sp, #20]
 800c35c:	9306      	strmi	r3, [sp, #24]
 800c35e:	f1bb 0f00 	cmp.w	fp, #0
 800c362:	db3c      	blt.n	800c3de <_dtoa_r+0x24e>
 800c364:	9b06      	ldr	r3, [sp, #24]
 800c366:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c36a:	445b      	add	r3, fp
 800c36c:	9306      	str	r3, [sp, #24]
 800c36e:	2300      	movs	r3, #0
 800c370:	9308      	str	r3, [sp, #32]
 800c372:	9b07      	ldr	r3, [sp, #28]
 800c374:	2b09      	cmp	r3, #9
 800c376:	d868      	bhi.n	800c44a <_dtoa_r+0x2ba>
 800c378:	2b05      	cmp	r3, #5
 800c37a:	bfc4      	itt	gt
 800c37c:	3b04      	subgt	r3, #4
 800c37e:	9307      	strgt	r3, [sp, #28]
 800c380:	9b07      	ldr	r3, [sp, #28]
 800c382:	f1a3 0302 	sub.w	r3, r3, #2
 800c386:	bfcc      	ite	gt
 800c388:	2500      	movgt	r5, #0
 800c38a:	2501      	movle	r5, #1
 800c38c:	2b03      	cmp	r3, #3
 800c38e:	f200 8085 	bhi.w	800c49c <_dtoa_r+0x30c>
 800c392:	e8df f003 	tbb	[pc, r3]
 800c396:	3b2e      	.short	0x3b2e
 800c398:	5839      	.short	0x5839
 800c39a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c39e:	441d      	add	r5, r3
 800c3a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c3a4:	2b20      	cmp	r3, #32
 800c3a6:	bfc1      	itttt	gt
 800c3a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c3ac:	fa08 f803 	lslgt.w	r8, r8, r3
 800c3b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c3b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c3b8:	bfd6      	itet	le
 800c3ba:	f1c3 0320 	rsble	r3, r3, #32
 800c3be:	ea48 0003 	orrgt.w	r0, r8, r3
 800c3c2:	fa06 f003 	lslle.w	r0, r6, r3
 800c3c6:	f7f4 f89d 	bl	8000504 <__aeabi_ui2d>
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c3d0:	3d01      	subs	r5, #1
 800c3d2:	920e      	str	r2, [sp, #56]	; 0x38
 800c3d4:	e76f      	b.n	800c2b6 <_dtoa_r+0x126>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e7b3      	b.n	800c342 <_dtoa_r+0x1b2>
 800c3da:	900c      	str	r0, [sp, #48]	; 0x30
 800c3dc:	e7b2      	b.n	800c344 <_dtoa_r+0x1b4>
 800c3de:	9b05      	ldr	r3, [sp, #20]
 800c3e0:	eba3 030b 	sub.w	r3, r3, fp
 800c3e4:	9305      	str	r3, [sp, #20]
 800c3e6:	f1cb 0300 	rsb	r3, fp, #0
 800c3ea:	9308      	str	r3, [sp, #32]
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3f0:	e7bf      	b.n	800c372 <_dtoa_r+0x1e2>
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	dc52      	bgt.n	800c4a2 <_dtoa_r+0x312>
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	9301      	str	r3, [sp, #4]
 800c400:	9304      	str	r3, [sp, #16]
 800c402:	461a      	mov	r2, r3
 800c404:	920a      	str	r2, [sp, #40]	; 0x28
 800c406:	e00b      	b.n	800c420 <_dtoa_r+0x290>
 800c408:	2301      	movs	r3, #1
 800c40a:	e7f3      	b.n	800c3f4 <_dtoa_r+0x264>
 800c40c:	2300      	movs	r3, #0
 800c40e:	9309      	str	r3, [sp, #36]	; 0x24
 800c410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c412:	445b      	add	r3, fp
 800c414:	9301      	str	r3, [sp, #4]
 800c416:	3301      	adds	r3, #1
 800c418:	2b01      	cmp	r3, #1
 800c41a:	9304      	str	r3, [sp, #16]
 800c41c:	bfb8      	it	lt
 800c41e:	2301      	movlt	r3, #1
 800c420:	69e0      	ldr	r0, [r4, #28]
 800c422:	2100      	movs	r1, #0
 800c424:	2204      	movs	r2, #4
 800c426:	f102 0614 	add.w	r6, r2, #20
 800c42a:	429e      	cmp	r6, r3
 800c42c:	d93d      	bls.n	800c4aa <_dtoa_r+0x31a>
 800c42e:	6041      	str	r1, [r0, #4]
 800c430:	4620      	mov	r0, r4
 800c432:	f000 ff59 	bl	800d2e8 <_Balloc>
 800c436:	9000      	str	r0, [sp, #0]
 800c438:	2800      	cmp	r0, #0
 800c43a:	d139      	bne.n	800c4b0 <_dtoa_r+0x320>
 800c43c:	4b16      	ldr	r3, [pc, #88]	; (800c498 <_dtoa_r+0x308>)
 800c43e:	4602      	mov	r2, r0
 800c440:	f240 11af 	movw	r1, #431	; 0x1af
 800c444:	e6bd      	b.n	800c1c2 <_dtoa_r+0x32>
 800c446:	2301      	movs	r3, #1
 800c448:	e7e1      	b.n	800c40e <_dtoa_r+0x27e>
 800c44a:	2501      	movs	r5, #1
 800c44c:	2300      	movs	r3, #0
 800c44e:	9307      	str	r3, [sp, #28]
 800c450:	9509      	str	r5, [sp, #36]	; 0x24
 800c452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c456:	9301      	str	r3, [sp, #4]
 800c458:	9304      	str	r3, [sp, #16]
 800c45a:	2200      	movs	r2, #0
 800c45c:	2312      	movs	r3, #18
 800c45e:	e7d1      	b.n	800c404 <_dtoa_r+0x274>
 800c460:	636f4361 	.word	0x636f4361
 800c464:	3fd287a7 	.word	0x3fd287a7
 800c468:	8b60c8b3 	.word	0x8b60c8b3
 800c46c:	3fc68a28 	.word	0x3fc68a28
 800c470:	509f79fb 	.word	0x509f79fb
 800c474:	3fd34413 	.word	0x3fd34413
 800c478:	0800ff6d 	.word	0x0800ff6d
 800c47c:	0800ff84 	.word	0x0800ff84
 800c480:	7ff00000 	.word	0x7ff00000
 800c484:	0800ff69 	.word	0x0800ff69
 800c488:	0800ff60 	.word	0x0800ff60
 800c48c:	0800ff3d 	.word	0x0800ff3d
 800c490:	3ff80000 	.word	0x3ff80000
 800c494:	08010080 	.word	0x08010080
 800c498:	0800ffdc 	.word	0x0800ffdc
 800c49c:	2301      	movs	r3, #1
 800c49e:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a0:	e7d7      	b.n	800c452 <_dtoa_r+0x2c2>
 800c4a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4a4:	9301      	str	r3, [sp, #4]
 800c4a6:	9304      	str	r3, [sp, #16]
 800c4a8:	e7ba      	b.n	800c420 <_dtoa_r+0x290>
 800c4aa:	3101      	adds	r1, #1
 800c4ac:	0052      	lsls	r2, r2, #1
 800c4ae:	e7ba      	b.n	800c426 <_dtoa_r+0x296>
 800c4b0:	69e3      	ldr	r3, [r4, #28]
 800c4b2:	9a00      	ldr	r2, [sp, #0]
 800c4b4:	601a      	str	r2, [r3, #0]
 800c4b6:	9b04      	ldr	r3, [sp, #16]
 800c4b8:	2b0e      	cmp	r3, #14
 800c4ba:	f200 80a8 	bhi.w	800c60e <_dtoa_r+0x47e>
 800c4be:	2d00      	cmp	r5, #0
 800c4c0:	f000 80a5 	beq.w	800c60e <_dtoa_r+0x47e>
 800c4c4:	f1bb 0f00 	cmp.w	fp, #0
 800c4c8:	dd38      	ble.n	800c53c <_dtoa_r+0x3ac>
 800c4ca:	4bc0      	ldr	r3, [pc, #768]	; (800c7cc <_dtoa_r+0x63c>)
 800c4cc:	f00b 020f 	and.w	r2, fp, #15
 800c4d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c4d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c4dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c4e0:	d019      	beq.n	800c516 <_dtoa_r+0x386>
 800c4e2:	4bbb      	ldr	r3, [pc, #748]	; (800c7d0 <_dtoa_r+0x640>)
 800c4e4:	ec51 0b18 	vmov	r0, r1, d8
 800c4e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c4ec:	f7f4 f9ae 	bl	800084c <__aeabi_ddiv>
 800c4f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4f4:	f008 080f 	and.w	r8, r8, #15
 800c4f8:	2503      	movs	r5, #3
 800c4fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c7d0 <_dtoa_r+0x640>
 800c4fe:	f1b8 0f00 	cmp.w	r8, #0
 800c502:	d10a      	bne.n	800c51a <_dtoa_r+0x38a>
 800c504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c508:	4632      	mov	r2, r6
 800c50a:	463b      	mov	r3, r7
 800c50c:	f7f4 f99e 	bl	800084c <__aeabi_ddiv>
 800c510:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c514:	e02b      	b.n	800c56e <_dtoa_r+0x3de>
 800c516:	2502      	movs	r5, #2
 800c518:	e7ef      	b.n	800c4fa <_dtoa_r+0x36a>
 800c51a:	f018 0f01 	tst.w	r8, #1
 800c51e:	d008      	beq.n	800c532 <_dtoa_r+0x3a2>
 800c520:	4630      	mov	r0, r6
 800c522:	4639      	mov	r1, r7
 800c524:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c528:	f7f4 f866 	bl	80005f8 <__aeabi_dmul>
 800c52c:	3501      	adds	r5, #1
 800c52e:	4606      	mov	r6, r0
 800c530:	460f      	mov	r7, r1
 800c532:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c536:	f109 0908 	add.w	r9, r9, #8
 800c53a:	e7e0      	b.n	800c4fe <_dtoa_r+0x36e>
 800c53c:	f000 809f 	beq.w	800c67e <_dtoa_r+0x4ee>
 800c540:	f1cb 0600 	rsb	r6, fp, #0
 800c544:	4ba1      	ldr	r3, [pc, #644]	; (800c7cc <_dtoa_r+0x63c>)
 800c546:	4fa2      	ldr	r7, [pc, #648]	; (800c7d0 <_dtoa_r+0x640>)
 800c548:	f006 020f 	and.w	r2, r6, #15
 800c54c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c554:	ec51 0b18 	vmov	r0, r1, d8
 800c558:	f7f4 f84e 	bl	80005f8 <__aeabi_dmul>
 800c55c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c560:	1136      	asrs	r6, r6, #4
 800c562:	2300      	movs	r3, #0
 800c564:	2502      	movs	r5, #2
 800c566:	2e00      	cmp	r6, #0
 800c568:	d17e      	bne.n	800c668 <_dtoa_r+0x4d8>
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1d0      	bne.n	800c510 <_dtoa_r+0x380>
 800c56e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c570:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c574:	2b00      	cmp	r3, #0
 800c576:	f000 8084 	beq.w	800c682 <_dtoa_r+0x4f2>
 800c57a:	4b96      	ldr	r3, [pc, #600]	; (800c7d4 <_dtoa_r+0x644>)
 800c57c:	2200      	movs	r2, #0
 800c57e:	4640      	mov	r0, r8
 800c580:	4649      	mov	r1, r9
 800c582:	f7f4 faab 	bl	8000adc <__aeabi_dcmplt>
 800c586:	2800      	cmp	r0, #0
 800c588:	d07b      	beq.n	800c682 <_dtoa_r+0x4f2>
 800c58a:	9b04      	ldr	r3, [sp, #16]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d078      	beq.n	800c682 <_dtoa_r+0x4f2>
 800c590:	9b01      	ldr	r3, [sp, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	dd39      	ble.n	800c60a <_dtoa_r+0x47a>
 800c596:	4b90      	ldr	r3, [pc, #576]	; (800c7d8 <_dtoa_r+0x648>)
 800c598:	2200      	movs	r2, #0
 800c59a:	4640      	mov	r0, r8
 800c59c:	4649      	mov	r1, r9
 800c59e:	f7f4 f82b 	bl	80005f8 <__aeabi_dmul>
 800c5a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5a6:	9e01      	ldr	r6, [sp, #4]
 800c5a8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800c5ac:	3501      	adds	r5, #1
 800c5ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f7f3 ffb6 	bl	8000524 <__aeabi_i2d>
 800c5b8:	4642      	mov	r2, r8
 800c5ba:	464b      	mov	r3, r9
 800c5bc:	f7f4 f81c 	bl	80005f8 <__aeabi_dmul>
 800c5c0:	4b86      	ldr	r3, [pc, #536]	; (800c7dc <_dtoa_r+0x64c>)
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f7f3 fe62 	bl	800028c <__adddf3>
 800c5c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c5cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5d0:	9303      	str	r3, [sp, #12]
 800c5d2:	2e00      	cmp	r6, #0
 800c5d4:	d158      	bne.n	800c688 <_dtoa_r+0x4f8>
 800c5d6:	4b82      	ldr	r3, [pc, #520]	; (800c7e0 <_dtoa_r+0x650>)
 800c5d8:	2200      	movs	r2, #0
 800c5da:	4640      	mov	r0, r8
 800c5dc:	4649      	mov	r1, r9
 800c5de:	f7f3 fe53 	bl	8000288 <__aeabi_dsub>
 800c5e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5e6:	4680      	mov	r8, r0
 800c5e8:	4689      	mov	r9, r1
 800c5ea:	f7f4 fa95 	bl	8000b18 <__aeabi_dcmpgt>
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	f040 8296 	bne.w	800cb20 <_dtoa_r+0x990>
 800c5f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c5f8:	4640      	mov	r0, r8
 800c5fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5fe:	4649      	mov	r1, r9
 800c600:	f7f4 fa6c 	bl	8000adc <__aeabi_dcmplt>
 800c604:	2800      	cmp	r0, #0
 800c606:	f040 8289 	bne.w	800cb1c <_dtoa_r+0x98c>
 800c60a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c60e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c610:	2b00      	cmp	r3, #0
 800c612:	f2c0 814e 	blt.w	800c8b2 <_dtoa_r+0x722>
 800c616:	f1bb 0f0e 	cmp.w	fp, #14
 800c61a:	f300 814a 	bgt.w	800c8b2 <_dtoa_r+0x722>
 800c61e:	4b6b      	ldr	r3, [pc, #428]	; (800c7cc <_dtoa_r+0x63c>)
 800c620:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c624:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f280 80dc 	bge.w	800c7e8 <_dtoa_r+0x658>
 800c630:	9b04      	ldr	r3, [sp, #16]
 800c632:	2b00      	cmp	r3, #0
 800c634:	f300 80d8 	bgt.w	800c7e8 <_dtoa_r+0x658>
 800c638:	f040 826f 	bne.w	800cb1a <_dtoa_r+0x98a>
 800c63c:	4b68      	ldr	r3, [pc, #416]	; (800c7e0 <_dtoa_r+0x650>)
 800c63e:	2200      	movs	r2, #0
 800c640:	4640      	mov	r0, r8
 800c642:	4649      	mov	r1, r9
 800c644:	f7f3 ffd8 	bl	80005f8 <__aeabi_dmul>
 800c648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c64c:	f7f4 fa5a 	bl	8000b04 <__aeabi_dcmpge>
 800c650:	9e04      	ldr	r6, [sp, #16]
 800c652:	4637      	mov	r7, r6
 800c654:	2800      	cmp	r0, #0
 800c656:	f040 8245 	bne.w	800cae4 <_dtoa_r+0x954>
 800c65a:	9d00      	ldr	r5, [sp, #0]
 800c65c:	2331      	movs	r3, #49	; 0x31
 800c65e:	f805 3b01 	strb.w	r3, [r5], #1
 800c662:	f10b 0b01 	add.w	fp, fp, #1
 800c666:	e241      	b.n	800caec <_dtoa_r+0x95c>
 800c668:	07f2      	lsls	r2, r6, #31
 800c66a:	d505      	bpl.n	800c678 <_dtoa_r+0x4e8>
 800c66c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c670:	f7f3 ffc2 	bl	80005f8 <__aeabi_dmul>
 800c674:	3501      	adds	r5, #1
 800c676:	2301      	movs	r3, #1
 800c678:	1076      	asrs	r6, r6, #1
 800c67a:	3708      	adds	r7, #8
 800c67c:	e773      	b.n	800c566 <_dtoa_r+0x3d6>
 800c67e:	2502      	movs	r5, #2
 800c680:	e775      	b.n	800c56e <_dtoa_r+0x3de>
 800c682:	9e04      	ldr	r6, [sp, #16]
 800c684:	465f      	mov	r7, fp
 800c686:	e792      	b.n	800c5ae <_dtoa_r+0x41e>
 800c688:	9900      	ldr	r1, [sp, #0]
 800c68a:	4b50      	ldr	r3, [pc, #320]	; (800c7cc <_dtoa_r+0x63c>)
 800c68c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c690:	4431      	add	r1, r6
 800c692:	9102      	str	r1, [sp, #8]
 800c694:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c696:	eeb0 9a47 	vmov.f32	s18, s14
 800c69a:	eef0 9a67 	vmov.f32	s19, s15
 800c69e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c6a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c6a6:	2900      	cmp	r1, #0
 800c6a8:	d044      	beq.n	800c734 <_dtoa_r+0x5a4>
 800c6aa:	494e      	ldr	r1, [pc, #312]	; (800c7e4 <_dtoa_r+0x654>)
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	f7f4 f8cd 	bl	800084c <__aeabi_ddiv>
 800c6b2:	ec53 2b19 	vmov	r2, r3, d9
 800c6b6:	f7f3 fde7 	bl	8000288 <__aeabi_dsub>
 800c6ba:	9d00      	ldr	r5, [sp, #0]
 800c6bc:	ec41 0b19 	vmov	d9, r0, r1
 800c6c0:	4649      	mov	r1, r9
 800c6c2:	4640      	mov	r0, r8
 800c6c4:	f7f4 fa48 	bl	8000b58 <__aeabi_d2iz>
 800c6c8:	4606      	mov	r6, r0
 800c6ca:	f7f3 ff2b 	bl	8000524 <__aeabi_i2d>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	4640      	mov	r0, r8
 800c6d4:	4649      	mov	r1, r9
 800c6d6:	f7f3 fdd7 	bl	8000288 <__aeabi_dsub>
 800c6da:	3630      	adds	r6, #48	; 0x30
 800c6dc:	f805 6b01 	strb.w	r6, [r5], #1
 800c6e0:	ec53 2b19 	vmov	r2, r3, d9
 800c6e4:	4680      	mov	r8, r0
 800c6e6:	4689      	mov	r9, r1
 800c6e8:	f7f4 f9f8 	bl	8000adc <__aeabi_dcmplt>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	d164      	bne.n	800c7ba <_dtoa_r+0x62a>
 800c6f0:	4642      	mov	r2, r8
 800c6f2:	464b      	mov	r3, r9
 800c6f4:	4937      	ldr	r1, [pc, #220]	; (800c7d4 <_dtoa_r+0x644>)
 800c6f6:	2000      	movs	r0, #0
 800c6f8:	f7f3 fdc6 	bl	8000288 <__aeabi_dsub>
 800c6fc:	ec53 2b19 	vmov	r2, r3, d9
 800c700:	f7f4 f9ec 	bl	8000adc <__aeabi_dcmplt>
 800c704:	2800      	cmp	r0, #0
 800c706:	f040 80b6 	bne.w	800c876 <_dtoa_r+0x6e6>
 800c70a:	9b02      	ldr	r3, [sp, #8]
 800c70c:	429d      	cmp	r5, r3
 800c70e:	f43f af7c 	beq.w	800c60a <_dtoa_r+0x47a>
 800c712:	4b31      	ldr	r3, [pc, #196]	; (800c7d8 <_dtoa_r+0x648>)
 800c714:	ec51 0b19 	vmov	r0, r1, d9
 800c718:	2200      	movs	r2, #0
 800c71a:	f7f3 ff6d 	bl	80005f8 <__aeabi_dmul>
 800c71e:	4b2e      	ldr	r3, [pc, #184]	; (800c7d8 <_dtoa_r+0x648>)
 800c720:	ec41 0b19 	vmov	d9, r0, r1
 800c724:	2200      	movs	r2, #0
 800c726:	4640      	mov	r0, r8
 800c728:	4649      	mov	r1, r9
 800c72a:	f7f3 ff65 	bl	80005f8 <__aeabi_dmul>
 800c72e:	4680      	mov	r8, r0
 800c730:	4689      	mov	r9, r1
 800c732:	e7c5      	b.n	800c6c0 <_dtoa_r+0x530>
 800c734:	ec51 0b17 	vmov	r0, r1, d7
 800c738:	f7f3 ff5e 	bl	80005f8 <__aeabi_dmul>
 800c73c:	9b02      	ldr	r3, [sp, #8]
 800c73e:	9d00      	ldr	r5, [sp, #0]
 800c740:	930f      	str	r3, [sp, #60]	; 0x3c
 800c742:	ec41 0b19 	vmov	d9, r0, r1
 800c746:	4649      	mov	r1, r9
 800c748:	4640      	mov	r0, r8
 800c74a:	f7f4 fa05 	bl	8000b58 <__aeabi_d2iz>
 800c74e:	4606      	mov	r6, r0
 800c750:	f7f3 fee8 	bl	8000524 <__aeabi_i2d>
 800c754:	3630      	adds	r6, #48	; 0x30
 800c756:	4602      	mov	r2, r0
 800c758:	460b      	mov	r3, r1
 800c75a:	4640      	mov	r0, r8
 800c75c:	4649      	mov	r1, r9
 800c75e:	f7f3 fd93 	bl	8000288 <__aeabi_dsub>
 800c762:	f805 6b01 	strb.w	r6, [r5], #1
 800c766:	9b02      	ldr	r3, [sp, #8]
 800c768:	429d      	cmp	r5, r3
 800c76a:	4680      	mov	r8, r0
 800c76c:	4689      	mov	r9, r1
 800c76e:	f04f 0200 	mov.w	r2, #0
 800c772:	d124      	bne.n	800c7be <_dtoa_r+0x62e>
 800c774:	4b1b      	ldr	r3, [pc, #108]	; (800c7e4 <_dtoa_r+0x654>)
 800c776:	ec51 0b19 	vmov	r0, r1, d9
 800c77a:	f7f3 fd87 	bl	800028c <__adddf3>
 800c77e:	4602      	mov	r2, r0
 800c780:	460b      	mov	r3, r1
 800c782:	4640      	mov	r0, r8
 800c784:	4649      	mov	r1, r9
 800c786:	f7f4 f9c7 	bl	8000b18 <__aeabi_dcmpgt>
 800c78a:	2800      	cmp	r0, #0
 800c78c:	d173      	bne.n	800c876 <_dtoa_r+0x6e6>
 800c78e:	ec53 2b19 	vmov	r2, r3, d9
 800c792:	4914      	ldr	r1, [pc, #80]	; (800c7e4 <_dtoa_r+0x654>)
 800c794:	2000      	movs	r0, #0
 800c796:	f7f3 fd77 	bl	8000288 <__aeabi_dsub>
 800c79a:	4602      	mov	r2, r0
 800c79c:	460b      	mov	r3, r1
 800c79e:	4640      	mov	r0, r8
 800c7a0:	4649      	mov	r1, r9
 800c7a2:	f7f4 f99b 	bl	8000adc <__aeabi_dcmplt>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	f43f af2f 	beq.w	800c60a <_dtoa_r+0x47a>
 800c7ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c7ae:	1e6b      	subs	r3, r5, #1
 800c7b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c7b6:	2b30      	cmp	r3, #48	; 0x30
 800c7b8:	d0f8      	beq.n	800c7ac <_dtoa_r+0x61c>
 800c7ba:	46bb      	mov	fp, r7
 800c7bc:	e04a      	b.n	800c854 <_dtoa_r+0x6c4>
 800c7be:	4b06      	ldr	r3, [pc, #24]	; (800c7d8 <_dtoa_r+0x648>)
 800c7c0:	f7f3 ff1a 	bl	80005f8 <__aeabi_dmul>
 800c7c4:	4680      	mov	r8, r0
 800c7c6:	4689      	mov	r9, r1
 800c7c8:	e7bd      	b.n	800c746 <_dtoa_r+0x5b6>
 800c7ca:	bf00      	nop
 800c7cc:	08010080 	.word	0x08010080
 800c7d0:	08010058 	.word	0x08010058
 800c7d4:	3ff00000 	.word	0x3ff00000
 800c7d8:	40240000 	.word	0x40240000
 800c7dc:	401c0000 	.word	0x401c0000
 800c7e0:	40140000 	.word	0x40140000
 800c7e4:	3fe00000 	.word	0x3fe00000
 800c7e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c7ec:	9d00      	ldr	r5, [sp, #0]
 800c7ee:	4642      	mov	r2, r8
 800c7f0:	464b      	mov	r3, r9
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	4639      	mov	r1, r7
 800c7f6:	f7f4 f829 	bl	800084c <__aeabi_ddiv>
 800c7fa:	f7f4 f9ad 	bl	8000b58 <__aeabi_d2iz>
 800c7fe:	9001      	str	r0, [sp, #4]
 800c800:	f7f3 fe90 	bl	8000524 <__aeabi_i2d>
 800c804:	4642      	mov	r2, r8
 800c806:	464b      	mov	r3, r9
 800c808:	f7f3 fef6 	bl	80005f8 <__aeabi_dmul>
 800c80c:	4602      	mov	r2, r0
 800c80e:	460b      	mov	r3, r1
 800c810:	4630      	mov	r0, r6
 800c812:	4639      	mov	r1, r7
 800c814:	f7f3 fd38 	bl	8000288 <__aeabi_dsub>
 800c818:	9e01      	ldr	r6, [sp, #4]
 800c81a:	9f04      	ldr	r7, [sp, #16]
 800c81c:	3630      	adds	r6, #48	; 0x30
 800c81e:	f805 6b01 	strb.w	r6, [r5], #1
 800c822:	9e00      	ldr	r6, [sp, #0]
 800c824:	1bae      	subs	r6, r5, r6
 800c826:	42b7      	cmp	r7, r6
 800c828:	4602      	mov	r2, r0
 800c82a:	460b      	mov	r3, r1
 800c82c:	d134      	bne.n	800c898 <_dtoa_r+0x708>
 800c82e:	f7f3 fd2d 	bl	800028c <__adddf3>
 800c832:	4642      	mov	r2, r8
 800c834:	464b      	mov	r3, r9
 800c836:	4606      	mov	r6, r0
 800c838:	460f      	mov	r7, r1
 800c83a:	f7f4 f96d 	bl	8000b18 <__aeabi_dcmpgt>
 800c83e:	b9c8      	cbnz	r0, 800c874 <_dtoa_r+0x6e4>
 800c840:	4642      	mov	r2, r8
 800c842:	464b      	mov	r3, r9
 800c844:	4630      	mov	r0, r6
 800c846:	4639      	mov	r1, r7
 800c848:	f7f4 f93e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c84c:	b110      	cbz	r0, 800c854 <_dtoa_r+0x6c4>
 800c84e:	9b01      	ldr	r3, [sp, #4]
 800c850:	07db      	lsls	r3, r3, #31
 800c852:	d40f      	bmi.n	800c874 <_dtoa_r+0x6e4>
 800c854:	4651      	mov	r1, sl
 800c856:	4620      	mov	r0, r4
 800c858:	f000 fd86 	bl	800d368 <_Bfree>
 800c85c:	2300      	movs	r3, #0
 800c85e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c860:	702b      	strb	r3, [r5, #0]
 800c862:	f10b 0301 	add.w	r3, fp, #1
 800c866:	6013      	str	r3, [r2, #0]
 800c868:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f43f ace2 	beq.w	800c234 <_dtoa_r+0xa4>
 800c870:	601d      	str	r5, [r3, #0]
 800c872:	e4df      	b.n	800c234 <_dtoa_r+0xa4>
 800c874:	465f      	mov	r7, fp
 800c876:	462b      	mov	r3, r5
 800c878:	461d      	mov	r5, r3
 800c87a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c87e:	2a39      	cmp	r2, #57	; 0x39
 800c880:	d106      	bne.n	800c890 <_dtoa_r+0x700>
 800c882:	9a00      	ldr	r2, [sp, #0]
 800c884:	429a      	cmp	r2, r3
 800c886:	d1f7      	bne.n	800c878 <_dtoa_r+0x6e8>
 800c888:	9900      	ldr	r1, [sp, #0]
 800c88a:	2230      	movs	r2, #48	; 0x30
 800c88c:	3701      	adds	r7, #1
 800c88e:	700a      	strb	r2, [r1, #0]
 800c890:	781a      	ldrb	r2, [r3, #0]
 800c892:	3201      	adds	r2, #1
 800c894:	701a      	strb	r2, [r3, #0]
 800c896:	e790      	b.n	800c7ba <_dtoa_r+0x62a>
 800c898:	4ba3      	ldr	r3, [pc, #652]	; (800cb28 <_dtoa_r+0x998>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	f7f3 feac 	bl	80005f8 <__aeabi_dmul>
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	4606      	mov	r6, r0
 800c8a6:	460f      	mov	r7, r1
 800c8a8:	f7f4 f90e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d09e      	beq.n	800c7ee <_dtoa_r+0x65e>
 800c8b0:	e7d0      	b.n	800c854 <_dtoa_r+0x6c4>
 800c8b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8b4:	2a00      	cmp	r2, #0
 800c8b6:	f000 80ca 	beq.w	800ca4e <_dtoa_r+0x8be>
 800c8ba:	9a07      	ldr	r2, [sp, #28]
 800c8bc:	2a01      	cmp	r2, #1
 800c8be:	f300 80ad 	bgt.w	800ca1c <_dtoa_r+0x88c>
 800c8c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8c4:	2a00      	cmp	r2, #0
 800c8c6:	f000 80a5 	beq.w	800ca14 <_dtoa_r+0x884>
 800c8ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c8ce:	9e08      	ldr	r6, [sp, #32]
 800c8d0:	9d05      	ldr	r5, [sp, #20]
 800c8d2:	9a05      	ldr	r2, [sp, #20]
 800c8d4:	441a      	add	r2, r3
 800c8d6:	9205      	str	r2, [sp, #20]
 800c8d8:	9a06      	ldr	r2, [sp, #24]
 800c8da:	2101      	movs	r1, #1
 800c8dc:	441a      	add	r2, r3
 800c8de:	4620      	mov	r0, r4
 800c8e0:	9206      	str	r2, [sp, #24]
 800c8e2:	f000 fdf7 	bl	800d4d4 <__i2b>
 800c8e6:	4607      	mov	r7, r0
 800c8e8:	b165      	cbz	r5, 800c904 <_dtoa_r+0x774>
 800c8ea:	9b06      	ldr	r3, [sp, #24]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	dd09      	ble.n	800c904 <_dtoa_r+0x774>
 800c8f0:	42ab      	cmp	r3, r5
 800c8f2:	9a05      	ldr	r2, [sp, #20]
 800c8f4:	bfa8      	it	ge
 800c8f6:	462b      	movge	r3, r5
 800c8f8:	1ad2      	subs	r2, r2, r3
 800c8fa:	9205      	str	r2, [sp, #20]
 800c8fc:	9a06      	ldr	r2, [sp, #24]
 800c8fe:	1aed      	subs	r5, r5, r3
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	9306      	str	r3, [sp, #24]
 800c904:	9b08      	ldr	r3, [sp, #32]
 800c906:	b1f3      	cbz	r3, 800c946 <_dtoa_r+0x7b6>
 800c908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f000 80a3 	beq.w	800ca56 <_dtoa_r+0x8c6>
 800c910:	2e00      	cmp	r6, #0
 800c912:	dd10      	ble.n	800c936 <_dtoa_r+0x7a6>
 800c914:	4639      	mov	r1, r7
 800c916:	4632      	mov	r2, r6
 800c918:	4620      	mov	r0, r4
 800c91a:	f000 fe9b 	bl	800d654 <__pow5mult>
 800c91e:	4652      	mov	r2, sl
 800c920:	4601      	mov	r1, r0
 800c922:	4607      	mov	r7, r0
 800c924:	4620      	mov	r0, r4
 800c926:	f000 fdeb 	bl	800d500 <__multiply>
 800c92a:	4651      	mov	r1, sl
 800c92c:	4680      	mov	r8, r0
 800c92e:	4620      	mov	r0, r4
 800c930:	f000 fd1a 	bl	800d368 <_Bfree>
 800c934:	46c2      	mov	sl, r8
 800c936:	9b08      	ldr	r3, [sp, #32]
 800c938:	1b9a      	subs	r2, r3, r6
 800c93a:	d004      	beq.n	800c946 <_dtoa_r+0x7b6>
 800c93c:	4651      	mov	r1, sl
 800c93e:	4620      	mov	r0, r4
 800c940:	f000 fe88 	bl	800d654 <__pow5mult>
 800c944:	4682      	mov	sl, r0
 800c946:	2101      	movs	r1, #1
 800c948:	4620      	mov	r0, r4
 800c94a:	f000 fdc3 	bl	800d4d4 <__i2b>
 800c94e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c950:	2b00      	cmp	r3, #0
 800c952:	4606      	mov	r6, r0
 800c954:	f340 8081 	ble.w	800ca5a <_dtoa_r+0x8ca>
 800c958:	461a      	mov	r2, r3
 800c95a:	4601      	mov	r1, r0
 800c95c:	4620      	mov	r0, r4
 800c95e:	f000 fe79 	bl	800d654 <__pow5mult>
 800c962:	9b07      	ldr	r3, [sp, #28]
 800c964:	2b01      	cmp	r3, #1
 800c966:	4606      	mov	r6, r0
 800c968:	dd7a      	ble.n	800ca60 <_dtoa_r+0x8d0>
 800c96a:	f04f 0800 	mov.w	r8, #0
 800c96e:	6933      	ldr	r3, [r6, #16]
 800c970:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c974:	6918      	ldr	r0, [r3, #16]
 800c976:	f000 fd5f 	bl	800d438 <__hi0bits>
 800c97a:	f1c0 0020 	rsb	r0, r0, #32
 800c97e:	9b06      	ldr	r3, [sp, #24]
 800c980:	4418      	add	r0, r3
 800c982:	f010 001f 	ands.w	r0, r0, #31
 800c986:	f000 8094 	beq.w	800cab2 <_dtoa_r+0x922>
 800c98a:	f1c0 0320 	rsb	r3, r0, #32
 800c98e:	2b04      	cmp	r3, #4
 800c990:	f340 8085 	ble.w	800ca9e <_dtoa_r+0x90e>
 800c994:	9b05      	ldr	r3, [sp, #20]
 800c996:	f1c0 001c 	rsb	r0, r0, #28
 800c99a:	4403      	add	r3, r0
 800c99c:	9305      	str	r3, [sp, #20]
 800c99e:	9b06      	ldr	r3, [sp, #24]
 800c9a0:	4403      	add	r3, r0
 800c9a2:	4405      	add	r5, r0
 800c9a4:	9306      	str	r3, [sp, #24]
 800c9a6:	9b05      	ldr	r3, [sp, #20]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	dd05      	ble.n	800c9b8 <_dtoa_r+0x828>
 800c9ac:	4651      	mov	r1, sl
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f000 fea9 	bl	800d708 <__lshift>
 800c9b6:	4682      	mov	sl, r0
 800c9b8:	9b06      	ldr	r3, [sp, #24]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	dd05      	ble.n	800c9ca <_dtoa_r+0x83a>
 800c9be:	4631      	mov	r1, r6
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f000 fea0 	bl	800d708 <__lshift>
 800c9c8:	4606      	mov	r6, r0
 800c9ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d072      	beq.n	800cab6 <_dtoa_r+0x926>
 800c9d0:	4631      	mov	r1, r6
 800c9d2:	4650      	mov	r0, sl
 800c9d4:	f000 ff04 	bl	800d7e0 <__mcmp>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	da6c      	bge.n	800cab6 <_dtoa_r+0x926>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	4651      	mov	r1, sl
 800c9e0:	220a      	movs	r2, #10
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	f000 fce2 	bl	800d3ac <__multadd>
 800c9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c9ee:	4682      	mov	sl, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f000 81b0 	beq.w	800cd56 <_dtoa_r+0xbc6>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	4639      	mov	r1, r7
 800c9fa:	220a      	movs	r2, #10
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f000 fcd5 	bl	800d3ac <__multadd>
 800ca02:	9b01      	ldr	r3, [sp, #4]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	4607      	mov	r7, r0
 800ca08:	f300 8096 	bgt.w	800cb38 <_dtoa_r+0x9a8>
 800ca0c:	9b07      	ldr	r3, [sp, #28]
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	dc59      	bgt.n	800cac6 <_dtoa_r+0x936>
 800ca12:	e091      	b.n	800cb38 <_dtoa_r+0x9a8>
 800ca14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ca1a:	e758      	b.n	800c8ce <_dtoa_r+0x73e>
 800ca1c:	9b04      	ldr	r3, [sp, #16]
 800ca1e:	1e5e      	subs	r6, r3, #1
 800ca20:	9b08      	ldr	r3, [sp, #32]
 800ca22:	42b3      	cmp	r3, r6
 800ca24:	bfbf      	itttt	lt
 800ca26:	9b08      	ldrlt	r3, [sp, #32]
 800ca28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ca2a:	9608      	strlt	r6, [sp, #32]
 800ca2c:	1af3      	sublt	r3, r6, r3
 800ca2e:	bfb4      	ite	lt
 800ca30:	18d2      	addlt	r2, r2, r3
 800ca32:	1b9e      	subge	r6, r3, r6
 800ca34:	9b04      	ldr	r3, [sp, #16]
 800ca36:	bfbc      	itt	lt
 800ca38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ca3a:	2600      	movlt	r6, #0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	bfb7      	itett	lt
 800ca40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ca44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ca48:	1a9d      	sublt	r5, r3, r2
 800ca4a:	2300      	movlt	r3, #0
 800ca4c:	e741      	b.n	800c8d2 <_dtoa_r+0x742>
 800ca4e:	9e08      	ldr	r6, [sp, #32]
 800ca50:	9d05      	ldr	r5, [sp, #20]
 800ca52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ca54:	e748      	b.n	800c8e8 <_dtoa_r+0x758>
 800ca56:	9a08      	ldr	r2, [sp, #32]
 800ca58:	e770      	b.n	800c93c <_dtoa_r+0x7ac>
 800ca5a:	9b07      	ldr	r3, [sp, #28]
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	dc19      	bgt.n	800ca94 <_dtoa_r+0x904>
 800ca60:	9b02      	ldr	r3, [sp, #8]
 800ca62:	b9bb      	cbnz	r3, 800ca94 <_dtoa_r+0x904>
 800ca64:	9b03      	ldr	r3, [sp, #12]
 800ca66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca6a:	b99b      	cbnz	r3, 800ca94 <_dtoa_r+0x904>
 800ca6c:	9b03      	ldr	r3, [sp, #12]
 800ca6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca72:	0d1b      	lsrs	r3, r3, #20
 800ca74:	051b      	lsls	r3, r3, #20
 800ca76:	b183      	cbz	r3, 800ca9a <_dtoa_r+0x90a>
 800ca78:	9b05      	ldr	r3, [sp, #20]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	9305      	str	r3, [sp, #20]
 800ca7e:	9b06      	ldr	r3, [sp, #24]
 800ca80:	3301      	adds	r3, #1
 800ca82:	9306      	str	r3, [sp, #24]
 800ca84:	f04f 0801 	mov.w	r8, #1
 800ca88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f47f af6f 	bne.w	800c96e <_dtoa_r+0x7de>
 800ca90:	2001      	movs	r0, #1
 800ca92:	e774      	b.n	800c97e <_dtoa_r+0x7ee>
 800ca94:	f04f 0800 	mov.w	r8, #0
 800ca98:	e7f6      	b.n	800ca88 <_dtoa_r+0x8f8>
 800ca9a:	4698      	mov	r8, r3
 800ca9c:	e7f4      	b.n	800ca88 <_dtoa_r+0x8f8>
 800ca9e:	d082      	beq.n	800c9a6 <_dtoa_r+0x816>
 800caa0:	9a05      	ldr	r2, [sp, #20]
 800caa2:	331c      	adds	r3, #28
 800caa4:	441a      	add	r2, r3
 800caa6:	9205      	str	r2, [sp, #20]
 800caa8:	9a06      	ldr	r2, [sp, #24]
 800caaa:	441a      	add	r2, r3
 800caac:	441d      	add	r5, r3
 800caae:	9206      	str	r2, [sp, #24]
 800cab0:	e779      	b.n	800c9a6 <_dtoa_r+0x816>
 800cab2:	4603      	mov	r3, r0
 800cab4:	e7f4      	b.n	800caa0 <_dtoa_r+0x910>
 800cab6:	9b04      	ldr	r3, [sp, #16]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	dc37      	bgt.n	800cb2c <_dtoa_r+0x99c>
 800cabc:	9b07      	ldr	r3, [sp, #28]
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	dd34      	ble.n	800cb2c <_dtoa_r+0x99c>
 800cac2:	9b04      	ldr	r3, [sp, #16]
 800cac4:	9301      	str	r3, [sp, #4]
 800cac6:	9b01      	ldr	r3, [sp, #4]
 800cac8:	b963      	cbnz	r3, 800cae4 <_dtoa_r+0x954>
 800caca:	4631      	mov	r1, r6
 800cacc:	2205      	movs	r2, #5
 800cace:	4620      	mov	r0, r4
 800cad0:	f000 fc6c 	bl	800d3ac <__multadd>
 800cad4:	4601      	mov	r1, r0
 800cad6:	4606      	mov	r6, r0
 800cad8:	4650      	mov	r0, sl
 800cada:	f000 fe81 	bl	800d7e0 <__mcmp>
 800cade:	2800      	cmp	r0, #0
 800cae0:	f73f adbb 	bgt.w	800c65a <_dtoa_r+0x4ca>
 800cae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cae6:	9d00      	ldr	r5, [sp, #0]
 800cae8:	ea6f 0b03 	mvn.w	fp, r3
 800caec:	f04f 0800 	mov.w	r8, #0
 800caf0:	4631      	mov	r1, r6
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 fc38 	bl	800d368 <_Bfree>
 800caf8:	2f00      	cmp	r7, #0
 800cafa:	f43f aeab 	beq.w	800c854 <_dtoa_r+0x6c4>
 800cafe:	f1b8 0f00 	cmp.w	r8, #0
 800cb02:	d005      	beq.n	800cb10 <_dtoa_r+0x980>
 800cb04:	45b8      	cmp	r8, r7
 800cb06:	d003      	beq.n	800cb10 <_dtoa_r+0x980>
 800cb08:	4641      	mov	r1, r8
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f000 fc2c 	bl	800d368 <_Bfree>
 800cb10:	4639      	mov	r1, r7
 800cb12:	4620      	mov	r0, r4
 800cb14:	f000 fc28 	bl	800d368 <_Bfree>
 800cb18:	e69c      	b.n	800c854 <_dtoa_r+0x6c4>
 800cb1a:	2600      	movs	r6, #0
 800cb1c:	4637      	mov	r7, r6
 800cb1e:	e7e1      	b.n	800cae4 <_dtoa_r+0x954>
 800cb20:	46bb      	mov	fp, r7
 800cb22:	4637      	mov	r7, r6
 800cb24:	e599      	b.n	800c65a <_dtoa_r+0x4ca>
 800cb26:	bf00      	nop
 800cb28:	40240000 	.word	0x40240000
 800cb2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	f000 80c8 	beq.w	800ccc4 <_dtoa_r+0xb34>
 800cb34:	9b04      	ldr	r3, [sp, #16]
 800cb36:	9301      	str	r3, [sp, #4]
 800cb38:	2d00      	cmp	r5, #0
 800cb3a:	dd05      	ble.n	800cb48 <_dtoa_r+0x9b8>
 800cb3c:	4639      	mov	r1, r7
 800cb3e:	462a      	mov	r2, r5
 800cb40:	4620      	mov	r0, r4
 800cb42:	f000 fde1 	bl	800d708 <__lshift>
 800cb46:	4607      	mov	r7, r0
 800cb48:	f1b8 0f00 	cmp.w	r8, #0
 800cb4c:	d05b      	beq.n	800cc06 <_dtoa_r+0xa76>
 800cb4e:	6879      	ldr	r1, [r7, #4]
 800cb50:	4620      	mov	r0, r4
 800cb52:	f000 fbc9 	bl	800d2e8 <_Balloc>
 800cb56:	4605      	mov	r5, r0
 800cb58:	b928      	cbnz	r0, 800cb66 <_dtoa_r+0x9d6>
 800cb5a:	4b83      	ldr	r3, [pc, #524]	; (800cd68 <_dtoa_r+0xbd8>)
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cb62:	f7ff bb2e 	b.w	800c1c2 <_dtoa_r+0x32>
 800cb66:	693a      	ldr	r2, [r7, #16]
 800cb68:	3202      	adds	r2, #2
 800cb6a:	0092      	lsls	r2, r2, #2
 800cb6c:	f107 010c 	add.w	r1, r7, #12
 800cb70:	300c      	adds	r0, #12
 800cb72:	f7ff fa74 	bl	800c05e <memcpy>
 800cb76:	2201      	movs	r2, #1
 800cb78:	4629      	mov	r1, r5
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f000 fdc4 	bl	800d708 <__lshift>
 800cb80:	9b00      	ldr	r3, [sp, #0]
 800cb82:	3301      	adds	r3, #1
 800cb84:	9304      	str	r3, [sp, #16]
 800cb86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb8a:	4413      	add	r3, r2
 800cb8c:	9308      	str	r3, [sp, #32]
 800cb8e:	9b02      	ldr	r3, [sp, #8]
 800cb90:	f003 0301 	and.w	r3, r3, #1
 800cb94:	46b8      	mov	r8, r7
 800cb96:	9306      	str	r3, [sp, #24]
 800cb98:	4607      	mov	r7, r0
 800cb9a:	9b04      	ldr	r3, [sp, #16]
 800cb9c:	4631      	mov	r1, r6
 800cb9e:	3b01      	subs	r3, #1
 800cba0:	4650      	mov	r0, sl
 800cba2:	9301      	str	r3, [sp, #4]
 800cba4:	f7ff fa69 	bl	800c07a <quorem>
 800cba8:	4641      	mov	r1, r8
 800cbaa:	9002      	str	r0, [sp, #8]
 800cbac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cbb0:	4650      	mov	r0, sl
 800cbb2:	f000 fe15 	bl	800d7e0 <__mcmp>
 800cbb6:	463a      	mov	r2, r7
 800cbb8:	9005      	str	r0, [sp, #20]
 800cbba:	4631      	mov	r1, r6
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	f000 fe2b 	bl	800d818 <__mdiff>
 800cbc2:	68c2      	ldr	r2, [r0, #12]
 800cbc4:	4605      	mov	r5, r0
 800cbc6:	bb02      	cbnz	r2, 800cc0a <_dtoa_r+0xa7a>
 800cbc8:	4601      	mov	r1, r0
 800cbca:	4650      	mov	r0, sl
 800cbcc:	f000 fe08 	bl	800d7e0 <__mcmp>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	9209      	str	r2, [sp, #36]	; 0x24
 800cbd8:	f000 fbc6 	bl	800d368 <_Bfree>
 800cbdc:	9b07      	ldr	r3, [sp, #28]
 800cbde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbe0:	9d04      	ldr	r5, [sp, #16]
 800cbe2:	ea43 0102 	orr.w	r1, r3, r2
 800cbe6:	9b06      	ldr	r3, [sp, #24]
 800cbe8:	4319      	orrs	r1, r3
 800cbea:	d110      	bne.n	800cc0e <_dtoa_r+0xa7e>
 800cbec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cbf0:	d029      	beq.n	800cc46 <_dtoa_r+0xab6>
 800cbf2:	9b05      	ldr	r3, [sp, #20]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	dd02      	ble.n	800cbfe <_dtoa_r+0xa6e>
 800cbf8:	9b02      	ldr	r3, [sp, #8]
 800cbfa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cbfe:	9b01      	ldr	r3, [sp, #4]
 800cc00:	f883 9000 	strb.w	r9, [r3]
 800cc04:	e774      	b.n	800caf0 <_dtoa_r+0x960>
 800cc06:	4638      	mov	r0, r7
 800cc08:	e7ba      	b.n	800cb80 <_dtoa_r+0x9f0>
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	e7e1      	b.n	800cbd2 <_dtoa_r+0xa42>
 800cc0e:	9b05      	ldr	r3, [sp, #20]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	db04      	blt.n	800cc1e <_dtoa_r+0xa8e>
 800cc14:	9907      	ldr	r1, [sp, #28]
 800cc16:	430b      	orrs	r3, r1
 800cc18:	9906      	ldr	r1, [sp, #24]
 800cc1a:	430b      	orrs	r3, r1
 800cc1c:	d120      	bne.n	800cc60 <_dtoa_r+0xad0>
 800cc1e:	2a00      	cmp	r2, #0
 800cc20:	dded      	ble.n	800cbfe <_dtoa_r+0xa6e>
 800cc22:	4651      	mov	r1, sl
 800cc24:	2201      	movs	r2, #1
 800cc26:	4620      	mov	r0, r4
 800cc28:	f000 fd6e 	bl	800d708 <__lshift>
 800cc2c:	4631      	mov	r1, r6
 800cc2e:	4682      	mov	sl, r0
 800cc30:	f000 fdd6 	bl	800d7e0 <__mcmp>
 800cc34:	2800      	cmp	r0, #0
 800cc36:	dc03      	bgt.n	800cc40 <_dtoa_r+0xab0>
 800cc38:	d1e1      	bne.n	800cbfe <_dtoa_r+0xa6e>
 800cc3a:	f019 0f01 	tst.w	r9, #1
 800cc3e:	d0de      	beq.n	800cbfe <_dtoa_r+0xa6e>
 800cc40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cc44:	d1d8      	bne.n	800cbf8 <_dtoa_r+0xa68>
 800cc46:	9a01      	ldr	r2, [sp, #4]
 800cc48:	2339      	movs	r3, #57	; 0x39
 800cc4a:	7013      	strb	r3, [r2, #0]
 800cc4c:	462b      	mov	r3, r5
 800cc4e:	461d      	mov	r5, r3
 800cc50:	3b01      	subs	r3, #1
 800cc52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cc56:	2a39      	cmp	r2, #57	; 0x39
 800cc58:	d06c      	beq.n	800cd34 <_dtoa_r+0xba4>
 800cc5a:	3201      	adds	r2, #1
 800cc5c:	701a      	strb	r2, [r3, #0]
 800cc5e:	e747      	b.n	800caf0 <_dtoa_r+0x960>
 800cc60:	2a00      	cmp	r2, #0
 800cc62:	dd07      	ble.n	800cc74 <_dtoa_r+0xae4>
 800cc64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cc68:	d0ed      	beq.n	800cc46 <_dtoa_r+0xab6>
 800cc6a:	9a01      	ldr	r2, [sp, #4]
 800cc6c:	f109 0301 	add.w	r3, r9, #1
 800cc70:	7013      	strb	r3, [r2, #0]
 800cc72:	e73d      	b.n	800caf0 <_dtoa_r+0x960>
 800cc74:	9b04      	ldr	r3, [sp, #16]
 800cc76:	9a08      	ldr	r2, [sp, #32]
 800cc78:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d043      	beq.n	800cd08 <_dtoa_r+0xb78>
 800cc80:	4651      	mov	r1, sl
 800cc82:	2300      	movs	r3, #0
 800cc84:	220a      	movs	r2, #10
 800cc86:	4620      	mov	r0, r4
 800cc88:	f000 fb90 	bl	800d3ac <__multadd>
 800cc8c:	45b8      	cmp	r8, r7
 800cc8e:	4682      	mov	sl, r0
 800cc90:	f04f 0300 	mov.w	r3, #0
 800cc94:	f04f 020a 	mov.w	r2, #10
 800cc98:	4641      	mov	r1, r8
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	d107      	bne.n	800ccae <_dtoa_r+0xb1e>
 800cc9e:	f000 fb85 	bl	800d3ac <__multadd>
 800cca2:	4680      	mov	r8, r0
 800cca4:	4607      	mov	r7, r0
 800cca6:	9b04      	ldr	r3, [sp, #16]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	9304      	str	r3, [sp, #16]
 800ccac:	e775      	b.n	800cb9a <_dtoa_r+0xa0a>
 800ccae:	f000 fb7d 	bl	800d3ac <__multadd>
 800ccb2:	4639      	mov	r1, r7
 800ccb4:	4680      	mov	r8, r0
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	220a      	movs	r2, #10
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f000 fb76 	bl	800d3ac <__multadd>
 800ccc0:	4607      	mov	r7, r0
 800ccc2:	e7f0      	b.n	800cca6 <_dtoa_r+0xb16>
 800ccc4:	9b04      	ldr	r3, [sp, #16]
 800ccc6:	9301      	str	r3, [sp, #4]
 800ccc8:	9d00      	ldr	r5, [sp, #0]
 800ccca:	4631      	mov	r1, r6
 800cccc:	4650      	mov	r0, sl
 800ccce:	f7ff f9d4 	bl	800c07a <quorem>
 800ccd2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ccd6:	9b00      	ldr	r3, [sp, #0]
 800ccd8:	f805 9b01 	strb.w	r9, [r5], #1
 800ccdc:	1aea      	subs	r2, r5, r3
 800ccde:	9b01      	ldr	r3, [sp, #4]
 800cce0:	4293      	cmp	r3, r2
 800cce2:	dd07      	ble.n	800ccf4 <_dtoa_r+0xb64>
 800cce4:	4651      	mov	r1, sl
 800cce6:	2300      	movs	r3, #0
 800cce8:	220a      	movs	r2, #10
 800ccea:	4620      	mov	r0, r4
 800ccec:	f000 fb5e 	bl	800d3ac <__multadd>
 800ccf0:	4682      	mov	sl, r0
 800ccf2:	e7ea      	b.n	800ccca <_dtoa_r+0xb3a>
 800ccf4:	9b01      	ldr	r3, [sp, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	bfc8      	it	gt
 800ccfa:	461d      	movgt	r5, r3
 800ccfc:	9b00      	ldr	r3, [sp, #0]
 800ccfe:	bfd8      	it	le
 800cd00:	2501      	movle	r5, #1
 800cd02:	441d      	add	r5, r3
 800cd04:	f04f 0800 	mov.w	r8, #0
 800cd08:	4651      	mov	r1, sl
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f000 fcfb 	bl	800d708 <__lshift>
 800cd12:	4631      	mov	r1, r6
 800cd14:	4682      	mov	sl, r0
 800cd16:	f000 fd63 	bl	800d7e0 <__mcmp>
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	dc96      	bgt.n	800cc4c <_dtoa_r+0xabc>
 800cd1e:	d102      	bne.n	800cd26 <_dtoa_r+0xb96>
 800cd20:	f019 0f01 	tst.w	r9, #1
 800cd24:	d192      	bne.n	800cc4c <_dtoa_r+0xabc>
 800cd26:	462b      	mov	r3, r5
 800cd28:	461d      	mov	r5, r3
 800cd2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd2e:	2a30      	cmp	r2, #48	; 0x30
 800cd30:	d0fa      	beq.n	800cd28 <_dtoa_r+0xb98>
 800cd32:	e6dd      	b.n	800caf0 <_dtoa_r+0x960>
 800cd34:	9a00      	ldr	r2, [sp, #0]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d189      	bne.n	800cc4e <_dtoa_r+0xabe>
 800cd3a:	f10b 0b01 	add.w	fp, fp, #1
 800cd3e:	2331      	movs	r3, #49	; 0x31
 800cd40:	e796      	b.n	800cc70 <_dtoa_r+0xae0>
 800cd42:	4b0a      	ldr	r3, [pc, #40]	; (800cd6c <_dtoa_r+0xbdc>)
 800cd44:	f7ff ba99 	b.w	800c27a <_dtoa_r+0xea>
 800cd48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f47f aa6d 	bne.w	800c22a <_dtoa_r+0x9a>
 800cd50:	4b07      	ldr	r3, [pc, #28]	; (800cd70 <_dtoa_r+0xbe0>)
 800cd52:	f7ff ba92 	b.w	800c27a <_dtoa_r+0xea>
 800cd56:	9b01      	ldr	r3, [sp, #4]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	dcb5      	bgt.n	800ccc8 <_dtoa_r+0xb38>
 800cd5c:	9b07      	ldr	r3, [sp, #28]
 800cd5e:	2b02      	cmp	r3, #2
 800cd60:	f73f aeb1 	bgt.w	800cac6 <_dtoa_r+0x936>
 800cd64:	e7b0      	b.n	800ccc8 <_dtoa_r+0xb38>
 800cd66:	bf00      	nop
 800cd68:	0800ffdc 	.word	0x0800ffdc
 800cd6c:	0800ff3c 	.word	0x0800ff3c
 800cd70:	0800ff60 	.word	0x0800ff60

0800cd74 <__ssputs_r>:
 800cd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd78:	688e      	ldr	r6, [r1, #8]
 800cd7a:	461f      	mov	r7, r3
 800cd7c:	42be      	cmp	r6, r7
 800cd7e:	680b      	ldr	r3, [r1, #0]
 800cd80:	4682      	mov	sl, r0
 800cd82:	460c      	mov	r4, r1
 800cd84:	4690      	mov	r8, r2
 800cd86:	d82c      	bhi.n	800cde2 <__ssputs_r+0x6e>
 800cd88:	898a      	ldrh	r2, [r1, #12]
 800cd8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd8e:	d026      	beq.n	800cdde <__ssputs_r+0x6a>
 800cd90:	6965      	ldr	r5, [r4, #20]
 800cd92:	6909      	ldr	r1, [r1, #16]
 800cd94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd98:	eba3 0901 	sub.w	r9, r3, r1
 800cd9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cda0:	1c7b      	adds	r3, r7, #1
 800cda2:	444b      	add	r3, r9
 800cda4:	106d      	asrs	r5, r5, #1
 800cda6:	429d      	cmp	r5, r3
 800cda8:	bf38      	it	cc
 800cdaa:	461d      	movcc	r5, r3
 800cdac:	0553      	lsls	r3, r2, #21
 800cdae:	d527      	bpl.n	800ce00 <__ssputs_r+0x8c>
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	f000 f95f 	bl	800d074 <_malloc_r>
 800cdb6:	4606      	mov	r6, r0
 800cdb8:	b360      	cbz	r0, 800ce14 <__ssputs_r+0xa0>
 800cdba:	6921      	ldr	r1, [r4, #16]
 800cdbc:	464a      	mov	r2, r9
 800cdbe:	f7ff f94e 	bl	800c05e <memcpy>
 800cdc2:	89a3      	ldrh	r3, [r4, #12]
 800cdc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdcc:	81a3      	strh	r3, [r4, #12]
 800cdce:	6126      	str	r6, [r4, #16]
 800cdd0:	6165      	str	r5, [r4, #20]
 800cdd2:	444e      	add	r6, r9
 800cdd4:	eba5 0509 	sub.w	r5, r5, r9
 800cdd8:	6026      	str	r6, [r4, #0]
 800cdda:	60a5      	str	r5, [r4, #8]
 800cddc:	463e      	mov	r6, r7
 800cdde:	42be      	cmp	r6, r7
 800cde0:	d900      	bls.n	800cde4 <__ssputs_r+0x70>
 800cde2:	463e      	mov	r6, r7
 800cde4:	6820      	ldr	r0, [r4, #0]
 800cde6:	4632      	mov	r2, r6
 800cde8:	4641      	mov	r1, r8
 800cdea:	f000 fe6b 	bl	800dac4 <memmove>
 800cdee:	68a3      	ldr	r3, [r4, #8]
 800cdf0:	1b9b      	subs	r3, r3, r6
 800cdf2:	60a3      	str	r3, [r4, #8]
 800cdf4:	6823      	ldr	r3, [r4, #0]
 800cdf6:	4433      	add	r3, r6
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce00:	462a      	mov	r2, r5
 800ce02:	f000 fe30 	bl	800da66 <_realloc_r>
 800ce06:	4606      	mov	r6, r0
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d1e0      	bne.n	800cdce <__ssputs_r+0x5a>
 800ce0c:	6921      	ldr	r1, [r4, #16]
 800ce0e:	4650      	mov	r0, sl
 800ce10:	f000 fefc 	bl	800dc0c <_free_r>
 800ce14:	230c      	movs	r3, #12
 800ce16:	f8ca 3000 	str.w	r3, [sl]
 800ce1a:	89a3      	ldrh	r3, [r4, #12]
 800ce1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce20:	81a3      	strh	r3, [r4, #12]
 800ce22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce26:	e7e9      	b.n	800cdfc <__ssputs_r+0x88>

0800ce28 <_svfiprintf_r>:
 800ce28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce2c:	4698      	mov	r8, r3
 800ce2e:	898b      	ldrh	r3, [r1, #12]
 800ce30:	061b      	lsls	r3, r3, #24
 800ce32:	b09d      	sub	sp, #116	; 0x74
 800ce34:	4607      	mov	r7, r0
 800ce36:	460d      	mov	r5, r1
 800ce38:	4614      	mov	r4, r2
 800ce3a:	d50e      	bpl.n	800ce5a <_svfiprintf_r+0x32>
 800ce3c:	690b      	ldr	r3, [r1, #16]
 800ce3e:	b963      	cbnz	r3, 800ce5a <_svfiprintf_r+0x32>
 800ce40:	2140      	movs	r1, #64	; 0x40
 800ce42:	f000 f917 	bl	800d074 <_malloc_r>
 800ce46:	6028      	str	r0, [r5, #0]
 800ce48:	6128      	str	r0, [r5, #16]
 800ce4a:	b920      	cbnz	r0, 800ce56 <_svfiprintf_r+0x2e>
 800ce4c:	230c      	movs	r3, #12
 800ce4e:	603b      	str	r3, [r7, #0]
 800ce50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce54:	e0d0      	b.n	800cff8 <_svfiprintf_r+0x1d0>
 800ce56:	2340      	movs	r3, #64	; 0x40
 800ce58:	616b      	str	r3, [r5, #20]
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce5e:	2320      	movs	r3, #32
 800ce60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce68:	2330      	movs	r3, #48	; 0x30
 800ce6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d010 <_svfiprintf_r+0x1e8>
 800ce6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce72:	f04f 0901 	mov.w	r9, #1
 800ce76:	4623      	mov	r3, r4
 800ce78:	469a      	mov	sl, r3
 800ce7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce7e:	b10a      	cbz	r2, 800ce84 <_svfiprintf_r+0x5c>
 800ce80:	2a25      	cmp	r2, #37	; 0x25
 800ce82:	d1f9      	bne.n	800ce78 <_svfiprintf_r+0x50>
 800ce84:	ebba 0b04 	subs.w	fp, sl, r4
 800ce88:	d00b      	beq.n	800cea2 <_svfiprintf_r+0x7a>
 800ce8a:	465b      	mov	r3, fp
 800ce8c:	4622      	mov	r2, r4
 800ce8e:	4629      	mov	r1, r5
 800ce90:	4638      	mov	r0, r7
 800ce92:	f7ff ff6f 	bl	800cd74 <__ssputs_r>
 800ce96:	3001      	adds	r0, #1
 800ce98:	f000 80a9 	beq.w	800cfee <_svfiprintf_r+0x1c6>
 800ce9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce9e:	445a      	add	r2, fp
 800cea0:	9209      	str	r2, [sp, #36]	; 0x24
 800cea2:	f89a 3000 	ldrb.w	r3, [sl]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	f000 80a1 	beq.w	800cfee <_svfiprintf_r+0x1c6>
 800ceac:	2300      	movs	r3, #0
 800ceae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ceb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceb6:	f10a 0a01 	add.w	sl, sl, #1
 800ceba:	9304      	str	r3, [sp, #16]
 800cebc:	9307      	str	r3, [sp, #28]
 800cebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cec2:	931a      	str	r3, [sp, #104]	; 0x68
 800cec4:	4654      	mov	r4, sl
 800cec6:	2205      	movs	r2, #5
 800cec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cecc:	4850      	ldr	r0, [pc, #320]	; (800d010 <_svfiprintf_r+0x1e8>)
 800cece:	f7f3 f97f 	bl	80001d0 <memchr>
 800ced2:	9a04      	ldr	r2, [sp, #16]
 800ced4:	b9d8      	cbnz	r0, 800cf0e <_svfiprintf_r+0xe6>
 800ced6:	06d0      	lsls	r0, r2, #27
 800ced8:	bf44      	itt	mi
 800ceda:	2320      	movmi	r3, #32
 800cedc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cee0:	0711      	lsls	r1, r2, #28
 800cee2:	bf44      	itt	mi
 800cee4:	232b      	movmi	r3, #43	; 0x2b
 800cee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceea:	f89a 3000 	ldrb.w	r3, [sl]
 800ceee:	2b2a      	cmp	r3, #42	; 0x2a
 800cef0:	d015      	beq.n	800cf1e <_svfiprintf_r+0xf6>
 800cef2:	9a07      	ldr	r2, [sp, #28]
 800cef4:	4654      	mov	r4, sl
 800cef6:	2000      	movs	r0, #0
 800cef8:	f04f 0c0a 	mov.w	ip, #10
 800cefc:	4621      	mov	r1, r4
 800cefe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf02:	3b30      	subs	r3, #48	; 0x30
 800cf04:	2b09      	cmp	r3, #9
 800cf06:	d94d      	bls.n	800cfa4 <_svfiprintf_r+0x17c>
 800cf08:	b1b0      	cbz	r0, 800cf38 <_svfiprintf_r+0x110>
 800cf0a:	9207      	str	r2, [sp, #28]
 800cf0c:	e014      	b.n	800cf38 <_svfiprintf_r+0x110>
 800cf0e:	eba0 0308 	sub.w	r3, r0, r8
 800cf12:	fa09 f303 	lsl.w	r3, r9, r3
 800cf16:	4313      	orrs	r3, r2
 800cf18:	9304      	str	r3, [sp, #16]
 800cf1a:	46a2      	mov	sl, r4
 800cf1c:	e7d2      	b.n	800cec4 <_svfiprintf_r+0x9c>
 800cf1e:	9b03      	ldr	r3, [sp, #12]
 800cf20:	1d19      	adds	r1, r3, #4
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	9103      	str	r1, [sp, #12]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	bfbb      	ittet	lt
 800cf2a:	425b      	neglt	r3, r3
 800cf2c:	f042 0202 	orrlt.w	r2, r2, #2
 800cf30:	9307      	strge	r3, [sp, #28]
 800cf32:	9307      	strlt	r3, [sp, #28]
 800cf34:	bfb8      	it	lt
 800cf36:	9204      	strlt	r2, [sp, #16]
 800cf38:	7823      	ldrb	r3, [r4, #0]
 800cf3a:	2b2e      	cmp	r3, #46	; 0x2e
 800cf3c:	d10c      	bne.n	800cf58 <_svfiprintf_r+0x130>
 800cf3e:	7863      	ldrb	r3, [r4, #1]
 800cf40:	2b2a      	cmp	r3, #42	; 0x2a
 800cf42:	d134      	bne.n	800cfae <_svfiprintf_r+0x186>
 800cf44:	9b03      	ldr	r3, [sp, #12]
 800cf46:	1d1a      	adds	r2, r3, #4
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	9203      	str	r2, [sp, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	bfb8      	it	lt
 800cf50:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf54:	3402      	adds	r4, #2
 800cf56:	9305      	str	r3, [sp, #20]
 800cf58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d020 <_svfiprintf_r+0x1f8>
 800cf5c:	7821      	ldrb	r1, [r4, #0]
 800cf5e:	2203      	movs	r2, #3
 800cf60:	4650      	mov	r0, sl
 800cf62:	f7f3 f935 	bl	80001d0 <memchr>
 800cf66:	b138      	cbz	r0, 800cf78 <_svfiprintf_r+0x150>
 800cf68:	9b04      	ldr	r3, [sp, #16]
 800cf6a:	eba0 000a 	sub.w	r0, r0, sl
 800cf6e:	2240      	movs	r2, #64	; 0x40
 800cf70:	4082      	lsls	r2, r0
 800cf72:	4313      	orrs	r3, r2
 800cf74:	3401      	adds	r4, #1
 800cf76:	9304      	str	r3, [sp, #16]
 800cf78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf7c:	4825      	ldr	r0, [pc, #148]	; (800d014 <_svfiprintf_r+0x1ec>)
 800cf7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf82:	2206      	movs	r2, #6
 800cf84:	f7f3 f924 	bl	80001d0 <memchr>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d038      	beq.n	800cffe <_svfiprintf_r+0x1d6>
 800cf8c:	4b22      	ldr	r3, [pc, #136]	; (800d018 <_svfiprintf_r+0x1f0>)
 800cf8e:	bb1b      	cbnz	r3, 800cfd8 <_svfiprintf_r+0x1b0>
 800cf90:	9b03      	ldr	r3, [sp, #12]
 800cf92:	3307      	adds	r3, #7
 800cf94:	f023 0307 	bic.w	r3, r3, #7
 800cf98:	3308      	adds	r3, #8
 800cf9a:	9303      	str	r3, [sp, #12]
 800cf9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf9e:	4433      	add	r3, r6
 800cfa0:	9309      	str	r3, [sp, #36]	; 0x24
 800cfa2:	e768      	b.n	800ce76 <_svfiprintf_r+0x4e>
 800cfa4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfa8:	460c      	mov	r4, r1
 800cfaa:	2001      	movs	r0, #1
 800cfac:	e7a6      	b.n	800cefc <_svfiprintf_r+0xd4>
 800cfae:	2300      	movs	r3, #0
 800cfb0:	3401      	adds	r4, #1
 800cfb2:	9305      	str	r3, [sp, #20]
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	f04f 0c0a 	mov.w	ip, #10
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfc0:	3a30      	subs	r2, #48	; 0x30
 800cfc2:	2a09      	cmp	r2, #9
 800cfc4:	d903      	bls.n	800cfce <_svfiprintf_r+0x1a6>
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d0c6      	beq.n	800cf58 <_svfiprintf_r+0x130>
 800cfca:	9105      	str	r1, [sp, #20]
 800cfcc:	e7c4      	b.n	800cf58 <_svfiprintf_r+0x130>
 800cfce:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	e7f0      	b.n	800cfba <_svfiprintf_r+0x192>
 800cfd8:	ab03      	add	r3, sp, #12
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	462a      	mov	r2, r5
 800cfde:	4b0f      	ldr	r3, [pc, #60]	; (800d01c <_svfiprintf_r+0x1f4>)
 800cfe0:	a904      	add	r1, sp, #16
 800cfe2:	4638      	mov	r0, r7
 800cfe4:	f7fe fb5a 	bl	800b69c <_printf_float>
 800cfe8:	1c42      	adds	r2, r0, #1
 800cfea:	4606      	mov	r6, r0
 800cfec:	d1d6      	bne.n	800cf9c <_svfiprintf_r+0x174>
 800cfee:	89ab      	ldrh	r3, [r5, #12]
 800cff0:	065b      	lsls	r3, r3, #25
 800cff2:	f53f af2d 	bmi.w	800ce50 <_svfiprintf_r+0x28>
 800cff6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cff8:	b01d      	add	sp, #116	; 0x74
 800cffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cffe:	ab03      	add	r3, sp, #12
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	462a      	mov	r2, r5
 800d004:	4b05      	ldr	r3, [pc, #20]	; (800d01c <_svfiprintf_r+0x1f4>)
 800d006:	a904      	add	r1, sp, #16
 800d008:	4638      	mov	r0, r7
 800d00a:	f7fe fdeb 	bl	800bbe4 <_printf_i>
 800d00e:	e7eb      	b.n	800cfe8 <_svfiprintf_r+0x1c0>
 800d010:	0800ffed 	.word	0x0800ffed
 800d014:	0800fff7 	.word	0x0800fff7
 800d018:	0800b69d 	.word	0x0800b69d
 800d01c:	0800cd75 	.word	0x0800cd75
 800d020:	0800fff3 	.word	0x0800fff3

0800d024 <malloc>:
 800d024:	4b02      	ldr	r3, [pc, #8]	; (800d030 <malloc+0xc>)
 800d026:	4601      	mov	r1, r0
 800d028:	6818      	ldr	r0, [r3, #0]
 800d02a:	f000 b823 	b.w	800d074 <_malloc_r>
 800d02e:	bf00      	nop
 800d030:	2000006c 	.word	0x2000006c

0800d034 <sbrk_aligned>:
 800d034:	b570      	push	{r4, r5, r6, lr}
 800d036:	4e0e      	ldr	r6, [pc, #56]	; (800d070 <sbrk_aligned+0x3c>)
 800d038:	460c      	mov	r4, r1
 800d03a:	6831      	ldr	r1, [r6, #0]
 800d03c:	4605      	mov	r5, r0
 800d03e:	b911      	cbnz	r1, 800d046 <sbrk_aligned+0x12>
 800d040:	f000 fd8e 	bl	800db60 <_sbrk_r>
 800d044:	6030      	str	r0, [r6, #0]
 800d046:	4621      	mov	r1, r4
 800d048:	4628      	mov	r0, r5
 800d04a:	f000 fd89 	bl	800db60 <_sbrk_r>
 800d04e:	1c43      	adds	r3, r0, #1
 800d050:	d00a      	beq.n	800d068 <sbrk_aligned+0x34>
 800d052:	1cc4      	adds	r4, r0, #3
 800d054:	f024 0403 	bic.w	r4, r4, #3
 800d058:	42a0      	cmp	r0, r4
 800d05a:	d007      	beq.n	800d06c <sbrk_aligned+0x38>
 800d05c:	1a21      	subs	r1, r4, r0
 800d05e:	4628      	mov	r0, r5
 800d060:	f000 fd7e 	bl	800db60 <_sbrk_r>
 800d064:	3001      	adds	r0, #1
 800d066:	d101      	bne.n	800d06c <sbrk_aligned+0x38>
 800d068:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d06c:	4620      	mov	r0, r4
 800d06e:	bd70      	pop	{r4, r5, r6, pc}
 800d070:	200053e8 	.word	0x200053e8

0800d074 <_malloc_r>:
 800d074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d078:	1ccd      	adds	r5, r1, #3
 800d07a:	f025 0503 	bic.w	r5, r5, #3
 800d07e:	3508      	adds	r5, #8
 800d080:	2d0c      	cmp	r5, #12
 800d082:	bf38      	it	cc
 800d084:	250c      	movcc	r5, #12
 800d086:	2d00      	cmp	r5, #0
 800d088:	4607      	mov	r7, r0
 800d08a:	db01      	blt.n	800d090 <_malloc_r+0x1c>
 800d08c:	42a9      	cmp	r1, r5
 800d08e:	d905      	bls.n	800d09c <_malloc_r+0x28>
 800d090:	230c      	movs	r3, #12
 800d092:	603b      	str	r3, [r7, #0]
 800d094:	2600      	movs	r6, #0
 800d096:	4630      	mov	r0, r6
 800d098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d09c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d170 <_malloc_r+0xfc>
 800d0a0:	f000 f916 	bl	800d2d0 <__malloc_lock>
 800d0a4:	f8d8 3000 	ldr.w	r3, [r8]
 800d0a8:	461c      	mov	r4, r3
 800d0aa:	bb5c      	cbnz	r4, 800d104 <_malloc_r+0x90>
 800d0ac:	4629      	mov	r1, r5
 800d0ae:	4638      	mov	r0, r7
 800d0b0:	f7ff ffc0 	bl	800d034 <sbrk_aligned>
 800d0b4:	1c43      	adds	r3, r0, #1
 800d0b6:	4604      	mov	r4, r0
 800d0b8:	d155      	bne.n	800d166 <_malloc_r+0xf2>
 800d0ba:	f8d8 4000 	ldr.w	r4, [r8]
 800d0be:	4626      	mov	r6, r4
 800d0c0:	2e00      	cmp	r6, #0
 800d0c2:	d145      	bne.n	800d150 <_malloc_r+0xdc>
 800d0c4:	2c00      	cmp	r4, #0
 800d0c6:	d048      	beq.n	800d15a <_malloc_r+0xe6>
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	4631      	mov	r1, r6
 800d0cc:	4638      	mov	r0, r7
 800d0ce:	eb04 0903 	add.w	r9, r4, r3
 800d0d2:	f000 fd45 	bl	800db60 <_sbrk_r>
 800d0d6:	4581      	cmp	r9, r0
 800d0d8:	d13f      	bne.n	800d15a <_malloc_r+0xe6>
 800d0da:	6821      	ldr	r1, [r4, #0]
 800d0dc:	1a6d      	subs	r5, r5, r1
 800d0de:	4629      	mov	r1, r5
 800d0e0:	4638      	mov	r0, r7
 800d0e2:	f7ff ffa7 	bl	800d034 <sbrk_aligned>
 800d0e6:	3001      	adds	r0, #1
 800d0e8:	d037      	beq.n	800d15a <_malloc_r+0xe6>
 800d0ea:	6823      	ldr	r3, [r4, #0]
 800d0ec:	442b      	add	r3, r5
 800d0ee:	6023      	str	r3, [r4, #0]
 800d0f0:	f8d8 3000 	ldr.w	r3, [r8]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d038      	beq.n	800d16a <_malloc_r+0xf6>
 800d0f8:	685a      	ldr	r2, [r3, #4]
 800d0fa:	42a2      	cmp	r2, r4
 800d0fc:	d12b      	bne.n	800d156 <_malloc_r+0xe2>
 800d0fe:	2200      	movs	r2, #0
 800d100:	605a      	str	r2, [r3, #4]
 800d102:	e00f      	b.n	800d124 <_malloc_r+0xb0>
 800d104:	6822      	ldr	r2, [r4, #0]
 800d106:	1b52      	subs	r2, r2, r5
 800d108:	d41f      	bmi.n	800d14a <_malloc_r+0xd6>
 800d10a:	2a0b      	cmp	r2, #11
 800d10c:	d917      	bls.n	800d13e <_malloc_r+0xca>
 800d10e:	1961      	adds	r1, r4, r5
 800d110:	42a3      	cmp	r3, r4
 800d112:	6025      	str	r5, [r4, #0]
 800d114:	bf18      	it	ne
 800d116:	6059      	strne	r1, [r3, #4]
 800d118:	6863      	ldr	r3, [r4, #4]
 800d11a:	bf08      	it	eq
 800d11c:	f8c8 1000 	streq.w	r1, [r8]
 800d120:	5162      	str	r2, [r4, r5]
 800d122:	604b      	str	r3, [r1, #4]
 800d124:	4638      	mov	r0, r7
 800d126:	f104 060b 	add.w	r6, r4, #11
 800d12a:	f000 f8d7 	bl	800d2dc <__malloc_unlock>
 800d12e:	f026 0607 	bic.w	r6, r6, #7
 800d132:	1d23      	adds	r3, r4, #4
 800d134:	1af2      	subs	r2, r6, r3
 800d136:	d0ae      	beq.n	800d096 <_malloc_r+0x22>
 800d138:	1b9b      	subs	r3, r3, r6
 800d13a:	50a3      	str	r3, [r4, r2]
 800d13c:	e7ab      	b.n	800d096 <_malloc_r+0x22>
 800d13e:	42a3      	cmp	r3, r4
 800d140:	6862      	ldr	r2, [r4, #4]
 800d142:	d1dd      	bne.n	800d100 <_malloc_r+0x8c>
 800d144:	f8c8 2000 	str.w	r2, [r8]
 800d148:	e7ec      	b.n	800d124 <_malloc_r+0xb0>
 800d14a:	4623      	mov	r3, r4
 800d14c:	6864      	ldr	r4, [r4, #4]
 800d14e:	e7ac      	b.n	800d0aa <_malloc_r+0x36>
 800d150:	4634      	mov	r4, r6
 800d152:	6876      	ldr	r6, [r6, #4]
 800d154:	e7b4      	b.n	800d0c0 <_malloc_r+0x4c>
 800d156:	4613      	mov	r3, r2
 800d158:	e7cc      	b.n	800d0f4 <_malloc_r+0x80>
 800d15a:	230c      	movs	r3, #12
 800d15c:	603b      	str	r3, [r7, #0]
 800d15e:	4638      	mov	r0, r7
 800d160:	f000 f8bc 	bl	800d2dc <__malloc_unlock>
 800d164:	e797      	b.n	800d096 <_malloc_r+0x22>
 800d166:	6025      	str	r5, [r4, #0]
 800d168:	e7dc      	b.n	800d124 <_malloc_r+0xb0>
 800d16a:	605b      	str	r3, [r3, #4]
 800d16c:	deff      	udf	#255	; 0xff
 800d16e:	bf00      	nop
 800d170:	200053e4 	.word	0x200053e4

0800d174 <__sflush_r>:
 800d174:	898a      	ldrh	r2, [r1, #12]
 800d176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d17a:	4605      	mov	r5, r0
 800d17c:	0710      	lsls	r0, r2, #28
 800d17e:	460c      	mov	r4, r1
 800d180:	d458      	bmi.n	800d234 <__sflush_r+0xc0>
 800d182:	684b      	ldr	r3, [r1, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	dc05      	bgt.n	800d194 <__sflush_r+0x20>
 800d188:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	dc02      	bgt.n	800d194 <__sflush_r+0x20>
 800d18e:	2000      	movs	r0, #0
 800d190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d196:	2e00      	cmp	r6, #0
 800d198:	d0f9      	beq.n	800d18e <__sflush_r+0x1a>
 800d19a:	2300      	movs	r3, #0
 800d19c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d1a0:	682f      	ldr	r7, [r5, #0]
 800d1a2:	6a21      	ldr	r1, [r4, #32]
 800d1a4:	602b      	str	r3, [r5, #0]
 800d1a6:	d032      	beq.n	800d20e <__sflush_r+0x9a>
 800d1a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d1aa:	89a3      	ldrh	r3, [r4, #12]
 800d1ac:	075a      	lsls	r2, r3, #29
 800d1ae:	d505      	bpl.n	800d1bc <__sflush_r+0x48>
 800d1b0:	6863      	ldr	r3, [r4, #4]
 800d1b2:	1ac0      	subs	r0, r0, r3
 800d1b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1b6:	b10b      	cbz	r3, 800d1bc <__sflush_r+0x48>
 800d1b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1ba:	1ac0      	subs	r0, r0, r3
 800d1bc:	2300      	movs	r3, #0
 800d1be:	4602      	mov	r2, r0
 800d1c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1c2:	6a21      	ldr	r1, [r4, #32]
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	47b0      	blx	r6
 800d1c8:	1c43      	adds	r3, r0, #1
 800d1ca:	89a3      	ldrh	r3, [r4, #12]
 800d1cc:	d106      	bne.n	800d1dc <__sflush_r+0x68>
 800d1ce:	6829      	ldr	r1, [r5, #0]
 800d1d0:	291d      	cmp	r1, #29
 800d1d2:	d82b      	bhi.n	800d22c <__sflush_r+0xb8>
 800d1d4:	4a29      	ldr	r2, [pc, #164]	; (800d27c <__sflush_r+0x108>)
 800d1d6:	410a      	asrs	r2, r1
 800d1d8:	07d6      	lsls	r6, r2, #31
 800d1da:	d427      	bmi.n	800d22c <__sflush_r+0xb8>
 800d1dc:	2200      	movs	r2, #0
 800d1de:	6062      	str	r2, [r4, #4]
 800d1e0:	04d9      	lsls	r1, r3, #19
 800d1e2:	6922      	ldr	r2, [r4, #16]
 800d1e4:	6022      	str	r2, [r4, #0]
 800d1e6:	d504      	bpl.n	800d1f2 <__sflush_r+0x7e>
 800d1e8:	1c42      	adds	r2, r0, #1
 800d1ea:	d101      	bne.n	800d1f0 <__sflush_r+0x7c>
 800d1ec:	682b      	ldr	r3, [r5, #0]
 800d1ee:	b903      	cbnz	r3, 800d1f2 <__sflush_r+0x7e>
 800d1f0:	6560      	str	r0, [r4, #84]	; 0x54
 800d1f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1f4:	602f      	str	r7, [r5, #0]
 800d1f6:	2900      	cmp	r1, #0
 800d1f8:	d0c9      	beq.n	800d18e <__sflush_r+0x1a>
 800d1fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1fe:	4299      	cmp	r1, r3
 800d200:	d002      	beq.n	800d208 <__sflush_r+0x94>
 800d202:	4628      	mov	r0, r5
 800d204:	f000 fd02 	bl	800dc0c <_free_r>
 800d208:	2000      	movs	r0, #0
 800d20a:	6360      	str	r0, [r4, #52]	; 0x34
 800d20c:	e7c0      	b.n	800d190 <__sflush_r+0x1c>
 800d20e:	2301      	movs	r3, #1
 800d210:	4628      	mov	r0, r5
 800d212:	47b0      	blx	r6
 800d214:	1c41      	adds	r1, r0, #1
 800d216:	d1c8      	bne.n	800d1aa <__sflush_r+0x36>
 800d218:	682b      	ldr	r3, [r5, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d0c5      	beq.n	800d1aa <__sflush_r+0x36>
 800d21e:	2b1d      	cmp	r3, #29
 800d220:	d001      	beq.n	800d226 <__sflush_r+0xb2>
 800d222:	2b16      	cmp	r3, #22
 800d224:	d101      	bne.n	800d22a <__sflush_r+0xb6>
 800d226:	602f      	str	r7, [r5, #0]
 800d228:	e7b1      	b.n	800d18e <__sflush_r+0x1a>
 800d22a:	89a3      	ldrh	r3, [r4, #12]
 800d22c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d230:	81a3      	strh	r3, [r4, #12]
 800d232:	e7ad      	b.n	800d190 <__sflush_r+0x1c>
 800d234:	690f      	ldr	r7, [r1, #16]
 800d236:	2f00      	cmp	r7, #0
 800d238:	d0a9      	beq.n	800d18e <__sflush_r+0x1a>
 800d23a:	0793      	lsls	r3, r2, #30
 800d23c:	680e      	ldr	r6, [r1, #0]
 800d23e:	bf08      	it	eq
 800d240:	694b      	ldreq	r3, [r1, #20]
 800d242:	600f      	str	r7, [r1, #0]
 800d244:	bf18      	it	ne
 800d246:	2300      	movne	r3, #0
 800d248:	eba6 0807 	sub.w	r8, r6, r7
 800d24c:	608b      	str	r3, [r1, #8]
 800d24e:	f1b8 0f00 	cmp.w	r8, #0
 800d252:	dd9c      	ble.n	800d18e <__sflush_r+0x1a>
 800d254:	6a21      	ldr	r1, [r4, #32]
 800d256:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d258:	4643      	mov	r3, r8
 800d25a:	463a      	mov	r2, r7
 800d25c:	4628      	mov	r0, r5
 800d25e:	47b0      	blx	r6
 800d260:	2800      	cmp	r0, #0
 800d262:	dc06      	bgt.n	800d272 <__sflush_r+0xfe>
 800d264:	89a3      	ldrh	r3, [r4, #12]
 800d266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d26a:	81a3      	strh	r3, [r4, #12]
 800d26c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d270:	e78e      	b.n	800d190 <__sflush_r+0x1c>
 800d272:	4407      	add	r7, r0
 800d274:	eba8 0800 	sub.w	r8, r8, r0
 800d278:	e7e9      	b.n	800d24e <__sflush_r+0xda>
 800d27a:	bf00      	nop
 800d27c:	dfbffffe 	.word	0xdfbffffe

0800d280 <_fflush_r>:
 800d280:	b538      	push	{r3, r4, r5, lr}
 800d282:	690b      	ldr	r3, [r1, #16]
 800d284:	4605      	mov	r5, r0
 800d286:	460c      	mov	r4, r1
 800d288:	b913      	cbnz	r3, 800d290 <_fflush_r+0x10>
 800d28a:	2500      	movs	r5, #0
 800d28c:	4628      	mov	r0, r5
 800d28e:	bd38      	pop	{r3, r4, r5, pc}
 800d290:	b118      	cbz	r0, 800d29a <_fflush_r+0x1a>
 800d292:	6a03      	ldr	r3, [r0, #32]
 800d294:	b90b      	cbnz	r3, 800d29a <_fflush_r+0x1a>
 800d296:	f7fe fe73 	bl	800bf80 <__sinit>
 800d29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d0f3      	beq.n	800d28a <_fflush_r+0xa>
 800d2a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d2a4:	07d0      	lsls	r0, r2, #31
 800d2a6:	d404      	bmi.n	800d2b2 <_fflush_r+0x32>
 800d2a8:	0599      	lsls	r1, r3, #22
 800d2aa:	d402      	bmi.n	800d2b2 <_fflush_r+0x32>
 800d2ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2ae:	f7fe fed4 	bl	800c05a <__retarget_lock_acquire_recursive>
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	f7ff ff5d 	bl	800d174 <__sflush_r>
 800d2ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2bc:	07da      	lsls	r2, r3, #31
 800d2be:	4605      	mov	r5, r0
 800d2c0:	d4e4      	bmi.n	800d28c <_fflush_r+0xc>
 800d2c2:	89a3      	ldrh	r3, [r4, #12]
 800d2c4:	059b      	lsls	r3, r3, #22
 800d2c6:	d4e1      	bmi.n	800d28c <_fflush_r+0xc>
 800d2c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2ca:	f7fe fec7 	bl	800c05c <__retarget_lock_release_recursive>
 800d2ce:	e7dd      	b.n	800d28c <_fflush_r+0xc>

0800d2d0 <__malloc_lock>:
 800d2d0:	4801      	ldr	r0, [pc, #4]	; (800d2d8 <__malloc_lock+0x8>)
 800d2d2:	f7fe bec2 	b.w	800c05a <__retarget_lock_acquire_recursive>
 800d2d6:	bf00      	nop
 800d2d8:	200053e0 	.word	0x200053e0

0800d2dc <__malloc_unlock>:
 800d2dc:	4801      	ldr	r0, [pc, #4]	; (800d2e4 <__malloc_unlock+0x8>)
 800d2de:	f7fe bebd 	b.w	800c05c <__retarget_lock_release_recursive>
 800d2e2:	bf00      	nop
 800d2e4:	200053e0 	.word	0x200053e0

0800d2e8 <_Balloc>:
 800d2e8:	b570      	push	{r4, r5, r6, lr}
 800d2ea:	69c6      	ldr	r6, [r0, #28]
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	460d      	mov	r5, r1
 800d2f0:	b976      	cbnz	r6, 800d310 <_Balloc+0x28>
 800d2f2:	2010      	movs	r0, #16
 800d2f4:	f7ff fe96 	bl	800d024 <malloc>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	61e0      	str	r0, [r4, #28]
 800d2fc:	b920      	cbnz	r0, 800d308 <_Balloc+0x20>
 800d2fe:	4b18      	ldr	r3, [pc, #96]	; (800d360 <_Balloc+0x78>)
 800d300:	4818      	ldr	r0, [pc, #96]	; (800d364 <_Balloc+0x7c>)
 800d302:	216b      	movs	r1, #107	; 0x6b
 800d304:	f000 fc4e 	bl	800dba4 <__assert_func>
 800d308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d30c:	6006      	str	r6, [r0, #0]
 800d30e:	60c6      	str	r6, [r0, #12]
 800d310:	69e6      	ldr	r6, [r4, #28]
 800d312:	68f3      	ldr	r3, [r6, #12]
 800d314:	b183      	cbz	r3, 800d338 <_Balloc+0x50>
 800d316:	69e3      	ldr	r3, [r4, #28]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d31e:	b9b8      	cbnz	r0, 800d350 <_Balloc+0x68>
 800d320:	2101      	movs	r1, #1
 800d322:	fa01 f605 	lsl.w	r6, r1, r5
 800d326:	1d72      	adds	r2, r6, #5
 800d328:	0092      	lsls	r2, r2, #2
 800d32a:	4620      	mov	r0, r4
 800d32c:	f000 fc58 	bl	800dbe0 <_calloc_r>
 800d330:	b160      	cbz	r0, 800d34c <_Balloc+0x64>
 800d332:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d336:	e00e      	b.n	800d356 <_Balloc+0x6e>
 800d338:	2221      	movs	r2, #33	; 0x21
 800d33a:	2104      	movs	r1, #4
 800d33c:	4620      	mov	r0, r4
 800d33e:	f000 fc4f 	bl	800dbe0 <_calloc_r>
 800d342:	69e3      	ldr	r3, [r4, #28]
 800d344:	60f0      	str	r0, [r6, #12]
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d1e4      	bne.n	800d316 <_Balloc+0x2e>
 800d34c:	2000      	movs	r0, #0
 800d34e:	bd70      	pop	{r4, r5, r6, pc}
 800d350:	6802      	ldr	r2, [r0, #0]
 800d352:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d356:	2300      	movs	r3, #0
 800d358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d35c:	e7f7      	b.n	800d34e <_Balloc+0x66>
 800d35e:	bf00      	nop
 800d360:	0800ff6d 	.word	0x0800ff6d
 800d364:	0800fffe 	.word	0x0800fffe

0800d368 <_Bfree>:
 800d368:	b570      	push	{r4, r5, r6, lr}
 800d36a:	69c6      	ldr	r6, [r0, #28]
 800d36c:	4605      	mov	r5, r0
 800d36e:	460c      	mov	r4, r1
 800d370:	b976      	cbnz	r6, 800d390 <_Bfree+0x28>
 800d372:	2010      	movs	r0, #16
 800d374:	f7ff fe56 	bl	800d024 <malloc>
 800d378:	4602      	mov	r2, r0
 800d37a:	61e8      	str	r0, [r5, #28]
 800d37c:	b920      	cbnz	r0, 800d388 <_Bfree+0x20>
 800d37e:	4b09      	ldr	r3, [pc, #36]	; (800d3a4 <_Bfree+0x3c>)
 800d380:	4809      	ldr	r0, [pc, #36]	; (800d3a8 <_Bfree+0x40>)
 800d382:	218f      	movs	r1, #143	; 0x8f
 800d384:	f000 fc0e 	bl	800dba4 <__assert_func>
 800d388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d38c:	6006      	str	r6, [r0, #0]
 800d38e:	60c6      	str	r6, [r0, #12]
 800d390:	b13c      	cbz	r4, 800d3a2 <_Bfree+0x3a>
 800d392:	69eb      	ldr	r3, [r5, #28]
 800d394:	6862      	ldr	r2, [r4, #4]
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d39c:	6021      	str	r1, [r4, #0]
 800d39e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3a2:	bd70      	pop	{r4, r5, r6, pc}
 800d3a4:	0800ff6d 	.word	0x0800ff6d
 800d3a8:	0800fffe 	.word	0x0800fffe

0800d3ac <__multadd>:
 800d3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3b0:	690d      	ldr	r5, [r1, #16]
 800d3b2:	4607      	mov	r7, r0
 800d3b4:	460c      	mov	r4, r1
 800d3b6:	461e      	mov	r6, r3
 800d3b8:	f101 0c14 	add.w	ip, r1, #20
 800d3bc:	2000      	movs	r0, #0
 800d3be:	f8dc 3000 	ldr.w	r3, [ip]
 800d3c2:	b299      	uxth	r1, r3
 800d3c4:	fb02 6101 	mla	r1, r2, r1, r6
 800d3c8:	0c1e      	lsrs	r6, r3, #16
 800d3ca:	0c0b      	lsrs	r3, r1, #16
 800d3cc:	fb02 3306 	mla	r3, r2, r6, r3
 800d3d0:	b289      	uxth	r1, r1
 800d3d2:	3001      	adds	r0, #1
 800d3d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d3d8:	4285      	cmp	r5, r0
 800d3da:	f84c 1b04 	str.w	r1, [ip], #4
 800d3de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d3e2:	dcec      	bgt.n	800d3be <__multadd+0x12>
 800d3e4:	b30e      	cbz	r6, 800d42a <__multadd+0x7e>
 800d3e6:	68a3      	ldr	r3, [r4, #8]
 800d3e8:	42ab      	cmp	r3, r5
 800d3ea:	dc19      	bgt.n	800d420 <__multadd+0x74>
 800d3ec:	6861      	ldr	r1, [r4, #4]
 800d3ee:	4638      	mov	r0, r7
 800d3f0:	3101      	adds	r1, #1
 800d3f2:	f7ff ff79 	bl	800d2e8 <_Balloc>
 800d3f6:	4680      	mov	r8, r0
 800d3f8:	b928      	cbnz	r0, 800d406 <__multadd+0x5a>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	4b0c      	ldr	r3, [pc, #48]	; (800d430 <__multadd+0x84>)
 800d3fe:	480d      	ldr	r0, [pc, #52]	; (800d434 <__multadd+0x88>)
 800d400:	21ba      	movs	r1, #186	; 0xba
 800d402:	f000 fbcf 	bl	800dba4 <__assert_func>
 800d406:	6922      	ldr	r2, [r4, #16]
 800d408:	3202      	adds	r2, #2
 800d40a:	f104 010c 	add.w	r1, r4, #12
 800d40e:	0092      	lsls	r2, r2, #2
 800d410:	300c      	adds	r0, #12
 800d412:	f7fe fe24 	bl	800c05e <memcpy>
 800d416:	4621      	mov	r1, r4
 800d418:	4638      	mov	r0, r7
 800d41a:	f7ff ffa5 	bl	800d368 <_Bfree>
 800d41e:	4644      	mov	r4, r8
 800d420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d424:	3501      	adds	r5, #1
 800d426:	615e      	str	r6, [r3, #20]
 800d428:	6125      	str	r5, [r4, #16]
 800d42a:	4620      	mov	r0, r4
 800d42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d430:	0800ffdc 	.word	0x0800ffdc
 800d434:	0800fffe 	.word	0x0800fffe

0800d438 <__hi0bits>:
 800d438:	0c03      	lsrs	r3, r0, #16
 800d43a:	041b      	lsls	r3, r3, #16
 800d43c:	b9d3      	cbnz	r3, 800d474 <__hi0bits+0x3c>
 800d43e:	0400      	lsls	r0, r0, #16
 800d440:	2310      	movs	r3, #16
 800d442:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d446:	bf04      	itt	eq
 800d448:	0200      	lsleq	r0, r0, #8
 800d44a:	3308      	addeq	r3, #8
 800d44c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d450:	bf04      	itt	eq
 800d452:	0100      	lsleq	r0, r0, #4
 800d454:	3304      	addeq	r3, #4
 800d456:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d45a:	bf04      	itt	eq
 800d45c:	0080      	lsleq	r0, r0, #2
 800d45e:	3302      	addeq	r3, #2
 800d460:	2800      	cmp	r0, #0
 800d462:	db05      	blt.n	800d470 <__hi0bits+0x38>
 800d464:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d468:	f103 0301 	add.w	r3, r3, #1
 800d46c:	bf08      	it	eq
 800d46e:	2320      	moveq	r3, #32
 800d470:	4618      	mov	r0, r3
 800d472:	4770      	bx	lr
 800d474:	2300      	movs	r3, #0
 800d476:	e7e4      	b.n	800d442 <__hi0bits+0xa>

0800d478 <__lo0bits>:
 800d478:	6803      	ldr	r3, [r0, #0]
 800d47a:	f013 0207 	ands.w	r2, r3, #7
 800d47e:	d00c      	beq.n	800d49a <__lo0bits+0x22>
 800d480:	07d9      	lsls	r1, r3, #31
 800d482:	d422      	bmi.n	800d4ca <__lo0bits+0x52>
 800d484:	079a      	lsls	r2, r3, #30
 800d486:	bf49      	itett	mi
 800d488:	085b      	lsrmi	r3, r3, #1
 800d48a:	089b      	lsrpl	r3, r3, #2
 800d48c:	6003      	strmi	r3, [r0, #0]
 800d48e:	2201      	movmi	r2, #1
 800d490:	bf5c      	itt	pl
 800d492:	6003      	strpl	r3, [r0, #0]
 800d494:	2202      	movpl	r2, #2
 800d496:	4610      	mov	r0, r2
 800d498:	4770      	bx	lr
 800d49a:	b299      	uxth	r1, r3
 800d49c:	b909      	cbnz	r1, 800d4a2 <__lo0bits+0x2a>
 800d49e:	0c1b      	lsrs	r3, r3, #16
 800d4a0:	2210      	movs	r2, #16
 800d4a2:	b2d9      	uxtb	r1, r3
 800d4a4:	b909      	cbnz	r1, 800d4aa <__lo0bits+0x32>
 800d4a6:	3208      	adds	r2, #8
 800d4a8:	0a1b      	lsrs	r3, r3, #8
 800d4aa:	0719      	lsls	r1, r3, #28
 800d4ac:	bf04      	itt	eq
 800d4ae:	091b      	lsreq	r3, r3, #4
 800d4b0:	3204      	addeq	r2, #4
 800d4b2:	0799      	lsls	r1, r3, #30
 800d4b4:	bf04      	itt	eq
 800d4b6:	089b      	lsreq	r3, r3, #2
 800d4b8:	3202      	addeq	r2, #2
 800d4ba:	07d9      	lsls	r1, r3, #31
 800d4bc:	d403      	bmi.n	800d4c6 <__lo0bits+0x4e>
 800d4be:	085b      	lsrs	r3, r3, #1
 800d4c0:	f102 0201 	add.w	r2, r2, #1
 800d4c4:	d003      	beq.n	800d4ce <__lo0bits+0x56>
 800d4c6:	6003      	str	r3, [r0, #0]
 800d4c8:	e7e5      	b.n	800d496 <__lo0bits+0x1e>
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	e7e3      	b.n	800d496 <__lo0bits+0x1e>
 800d4ce:	2220      	movs	r2, #32
 800d4d0:	e7e1      	b.n	800d496 <__lo0bits+0x1e>
	...

0800d4d4 <__i2b>:
 800d4d4:	b510      	push	{r4, lr}
 800d4d6:	460c      	mov	r4, r1
 800d4d8:	2101      	movs	r1, #1
 800d4da:	f7ff ff05 	bl	800d2e8 <_Balloc>
 800d4de:	4602      	mov	r2, r0
 800d4e0:	b928      	cbnz	r0, 800d4ee <__i2b+0x1a>
 800d4e2:	4b05      	ldr	r3, [pc, #20]	; (800d4f8 <__i2b+0x24>)
 800d4e4:	4805      	ldr	r0, [pc, #20]	; (800d4fc <__i2b+0x28>)
 800d4e6:	f240 1145 	movw	r1, #325	; 0x145
 800d4ea:	f000 fb5b 	bl	800dba4 <__assert_func>
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	6144      	str	r4, [r0, #20]
 800d4f2:	6103      	str	r3, [r0, #16]
 800d4f4:	bd10      	pop	{r4, pc}
 800d4f6:	bf00      	nop
 800d4f8:	0800ffdc 	.word	0x0800ffdc
 800d4fc:	0800fffe 	.word	0x0800fffe

0800d500 <__multiply>:
 800d500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d504:	4691      	mov	r9, r2
 800d506:	690a      	ldr	r2, [r1, #16]
 800d508:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	bfb8      	it	lt
 800d510:	460b      	movlt	r3, r1
 800d512:	460c      	mov	r4, r1
 800d514:	bfbc      	itt	lt
 800d516:	464c      	movlt	r4, r9
 800d518:	4699      	movlt	r9, r3
 800d51a:	6927      	ldr	r7, [r4, #16]
 800d51c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d520:	68a3      	ldr	r3, [r4, #8]
 800d522:	6861      	ldr	r1, [r4, #4]
 800d524:	eb07 060a 	add.w	r6, r7, sl
 800d528:	42b3      	cmp	r3, r6
 800d52a:	b085      	sub	sp, #20
 800d52c:	bfb8      	it	lt
 800d52e:	3101      	addlt	r1, #1
 800d530:	f7ff feda 	bl	800d2e8 <_Balloc>
 800d534:	b930      	cbnz	r0, 800d544 <__multiply+0x44>
 800d536:	4602      	mov	r2, r0
 800d538:	4b44      	ldr	r3, [pc, #272]	; (800d64c <__multiply+0x14c>)
 800d53a:	4845      	ldr	r0, [pc, #276]	; (800d650 <__multiply+0x150>)
 800d53c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d540:	f000 fb30 	bl	800dba4 <__assert_func>
 800d544:	f100 0514 	add.w	r5, r0, #20
 800d548:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d54c:	462b      	mov	r3, r5
 800d54e:	2200      	movs	r2, #0
 800d550:	4543      	cmp	r3, r8
 800d552:	d321      	bcc.n	800d598 <__multiply+0x98>
 800d554:	f104 0314 	add.w	r3, r4, #20
 800d558:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d55c:	f109 0314 	add.w	r3, r9, #20
 800d560:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d564:	9202      	str	r2, [sp, #8]
 800d566:	1b3a      	subs	r2, r7, r4
 800d568:	3a15      	subs	r2, #21
 800d56a:	f022 0203 	bic.w	r2, r2, #3
 800d56e:	3204      	adds	r2, #4
 800d570:	f104 0115 	add.w	r1, r4, #21
 800d574:	428f      	cmp	r7, r1
 800d576:	bf38      	it	cc
 800d578:	2204      	movcc	r2, #4
 800d57a:	9201      	str	r2, [sp, #4]
 800d57c:	9a02      	ldr	r2, [sp, #8]
 800d57e:	9303      	str	r3, [sp, #12]
 800d580:	429a      	cmp	r2, r3
 800d582:	d80c      	bhi.n	800d59e <__multiply+0x9e>
 800d584:	2e00      	cmp	r6, #0
 800d586:	dd03      	ble.n	800d590 <__multiply+0x90>
 800d588:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d05b      	beq.n	800d648 <__multiply+0x148>
 800d590:	6106      	str	r6, [r0, #16]
 800d592:	b005      	add	sp, #20
 800d594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d598:	f843 2b04 	str.w	r2, [r3], #4
 800d59c:	e7d8      	b.n	800d550 <__multiply+0x50>
 800d59e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d5a2:	f1ba 0f00 	cmp.w	sl, #0
 800d5a6:	d024      	beq.n	800d5f2 <__multiply+0xf2>
 800d5a8:	f104 0e14 	add.w	lr, r4, #20
 800d5ac:	46a9      	mov	r9, r5
 800d5ae:	f04f 0c00 	mov.w	ip, #0
 800d5b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d5b6:	f8d9 1000 	ldr.w	r1, [r9]
 800d5ba:	fa1f fb82 	uxth.w	fp, r2
 800d5be:	b289      	uxth	r1, r1
 800d5c0:	fb0a 110b 	mla	r1, sl, fp, r1
 800d5c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d5c8:	f8d9 2000 	ldr.w	r2, [r9]
 800d5cc:	4461      	add	r1, ip
 800d5ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5d2:	fb0a c20b 	mla	r2, sl, fp, ip
 800d5d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d5da:	b289      	uxth	r1, r1
 800d5dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d5e0:	4577      	cmp	r7, lr
 800d5e2:	f849 1b04 	str.w	r1, [r9], #4
 800d5e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5ea:	d8e2      	bhi.n	800d5b2 <__multiply+0xb2>
 800d5ec:	9a01      	ldr	r2, [sp, #4]
 800d5ee:	f845 c002 	str.w	ip, [r5, r2]
 800d5f2:	9a03      	ldr	r2, [sp, #12]
 800d5f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	f1b9 0f00 	cmp.w	r9, #0
 800d5fe:	d021      	beq.n	800d644 <__multiply+0x144>
 800d600:	6829      	ldr	r1, [r5, #0]
 800d602:	f104 0c14 	add.w	ip, r4, #20
 800d606:	46ae      	mov	lr, r5
 800d608:	f04f 0a00 	mov.w	sl, #0
 800d60c:	f8bc b000 	ldrh.w	fp, [ip]
 800d610:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d614:	fb09 220b 	mla	r2, r9, fp, r2
 800d618:	4452      	add	r2, sl
 800d61a:	b289      	uxth	r1, r1
 800d61c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d620:	f84e 1b04 	str.w	r1, [lr], #4
 800d624:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d628:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d62c:	f8be 1000 	ldrh.w	r1, [lr]
 800d630:	fb09 110a 	mla	r1, r9, sl, r1
 800d634:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d638:	4567      	cmp	r7, ip
 800d63a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d63e:	d8e5      	bhi.n	800d60c <__multiply+0x10c>
 800d640:	9a01      	ldr	r2, [sp, #4]
 800d642:	50a9      	str	r1, [r5, r2]
 800d644:	3504      	adds	r5, #4
 800d646:	e799      	b.n	800d57c <__multiply+0x7c>
 800d648:	3e01      	subs	r6, #1
 800d64a:	e79b      	b.n	800d584 <__multiply+0x84>
 800d64c:	0800ffdc 	.word	0x0800ffdc
 800d650:	0800fffe 	.word	0x0800fffe

0800d654 <__pow5mult>:
 800d654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d658:	4615      	mov	r5, r2
 800d65a:	f012 0203 	ands.w	r2, r2, #3
 800d65e:	4606      	mov	r6, r0
 800d660:	460f      	mov	r7, r1
 800d662:	d007      	beq.n	800d674 <__pow5mult+0x20>
 800d664:	4c25      	ldr	r4, [pc, #148]	; (800d6fc <__pow5mult+0xa8>)
 800d666:	3a01      	subs	r2, #1
 800d668:	2300      	movs	r3, #0
 800d66a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d66e:	f7ff fe9d 	bl	800d3ac <__multadd>
 800d672:	4607      	mov	r7, r0
 800d674:	10ad      	asrs	r5, r5, #2
 800d676:	d03d      	beq.n	800d6f4 <__pow5mult+0xa0>
 800d678:	69f4      	ldr	r4, [r6, #28]
 800d67a:	b97c      	cbnz	r4, 800d69c <__pow5mult+0x48>
 800d67c:	2010      	movs	r0, #16
 800d67e:	f7ff fcd1 	bl	800d024 <malloc>
 800d682:	4602      	mov	r2, r0
 800d684:	61f0      	str	r0, [r6, #28]
 800d686:	b928      	cbnz	r0, 800d694 <__pow5mult+0x40>
 800d688:	4b1d      	ldr	r3, [pc, #116]	; (800d700 <__pow5mult+0xac>)
 800d68a:	481e      	ldr	r0, [pc, #120]	; (800d704 <__pow5mult+0xb0>)
 800d68c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d690:	f000 fa88 	bl	800dba4 <__assert_func>
 800d694:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d698:	6004      	str	r4, [r0, #0]
 800d69a:	60c4      	str	r4, [r0, #12]
 800d69c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d6a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6a4:	b94c      	cbnz	r4, 800d6ba <__pow5mult+0x66>
 800d6a6:	f240 2171 	movw	r1, #625	; 0x271
 800d6aa:	4630      	mov	r0, r6
 800d6ac:	f7ff ff12 	bl	800d4d4 <__i2b>
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	6003      	str	r3, [r0, #0]
 800d6ba:	f04f 0900 	mov.w	r9, #0
 800d6be:	07eb      	lsls	r3, r5, #31
 800d6c0:	d50a      	bpl.n	800d6d8 <__pow5mult+0x84>
 800d6c2:	4639      	mov	r1, r7
 800d6c4:	4622      	mov	r2, r4
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	f7ff ff1a 	bl	800d500 <__multiply>
 800d6cc:	4639      	mov	r1, r7
 800d6ce:	4680      	mov	r8, r0
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	f7ff fe49 	bl	800d368 <_Bfree>
 800d6d6:	4647      	mov	r7, r8
 800d6d8:	106d      	asrs	r5, r5, #1
 800d6da:	d00b      	beq.n	800d6f4 <__pow5mult+0xa0>
 800d6dc:	6820      	ldr	r0, [r4, #0]
 800d6de:	b938      	cbnz	r0, 800d6f0 <__pow5mult+0x9c>
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	f7ff ff0b 	bl	800d500 <__multiply>
 800d6ea:	6020      	str	r0, [r4, #0]
 800d6ec:	f8c0 9000 	str.w	r9, [r0]
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	e7e4      	b.n	800d6be <__pow5mult+0x6a>
 800d6f4:	4638      	mov	r0, r7
 800d6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6fa:	bf00      	nop
 800d6fc:	08010148 	.word	0x08010148
 800d700:	0800ff6d 	.word	0x0800ff6d
 800d704:	0800fffe 	.word	0x0800fffe

0800d708 <__lshift>:
 800d708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d70c:	460c      	mov	r4, r1
 800d70e:	6849      	ldr	r1, [r1, #4]
 800d710:	6923      	ldr	r3, [r4, #16]
 800d712:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d716:	68a3      	ldr	r3, [r4, #8]
 800d718:	4607      	mov	r7, r0
 800d71a:	4691      	mov	r9, r2
 800d71c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d720:	f108 0601 	add.w	r6, r8, #1
 800d724:	42b3      	cmp	r3, r6
 800d726:	db0b      	blt.n	800d740 <__lshift+0x38>
 800d728:	4638      	mov	r0, r7
 800d72a:	f7ff fddd 	bl	800d2e8 <_Balloc>
 800d72e:	4605      	mov	r5, r0
 800d730:	b948      	cbnz	r0, 800d746 <__lshift+0x3e>
 800d732:	4602      	mov	r2, r0
 800d734:	4b28      	ldr	r3, [pc, #160]	; (800d7d8 <__lshift+0xd0>)
 800d736:	4829      	ldr	r0, [pc, #164]	; (800d7dc <__lshift+0xd4>)
 800d738:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d73c:	f000 fa32 	bl	800dba4 <__assert_func>
 800d740:	3101      	adds	r1, #1
 800d742:	005b      	lsls	r3, r3, #1
 800d744:	e7ee      	b.n	800d724 <__lshift+0x1c>
 800d746:	2300      	movs	r3, #0
 800d748:	f100 0114 	add.w	r1, r0, #20
 800d74c:	f100 0210 	add.w	r2, r0, #16
 800d750:	4618      	mov	r0, r3
 800d752:	4553      	cmp	r3, sl
 800d754:	db33      	blt.n	800d7be <__lshift+0xb6>
 800d756:	6920      	ldr	r0, [r4, #16]
 800d758:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d75c:	f104 0314 	add.w	r3, r4, #20
 800d760:	f019 091f 	ands.w	r9, r9, #31
 800d764:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d768:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d76c:	d02b      	beq.n	800d7c6 <__lshift+0xbe>
 800d76e:	f1c9 0e20 	rsb	lr, r9, #32
 800d772:	468a      	mov	sl, r1
 800d774:	2200      	movs	r2, #0
 800d776:	6818      	ldr	r0, [r3, #0]
 800d778:	fa00 f009 	lsl.w	r0, r0, r9
 800d77c:	4310      	orrs	r0, r2
 800d77e:	f84a 0b04 	str.w	r0, [sl], #4
 800d782:	f853 2b04 	ldr.w	r2, [r3], #4
 800d786:	459c      	cmp	ip, r3
 800d788:	fa22 f20e 	lsr.w	r2, r2, lr
 800d78c:	d8f3      	bhi.n	800d776 <__lshift+0x6e>
 800d78e:	ebac 0304 	sub.w	r3, ip, r4
 800d792:	3b15      	subs	r3, #21
 800d794:	f023 0303 	bic.w	r3, r3, #3
 800d798:	3304      	adds	r3, #4
 800d79a:	f104 0015 	add.w	r0, r4, #21
 800d79e:	4584      	cmp	ip, r0
 800d7a0:	bf38      	it	cc
 800d7a2:	2304      	movcc	r3, #4
 800d7a4:	50ca      	str	r2, [r1, r3]
 800d7a6:	b10a      	cbz	r2, 800d7ac <__lshift+0xa4>
 800d7a8:	f108 0602 	add.w	r6, r8, #2
 800d7ac:	3e01      	subs	r6, #1
 800d7ae:	4638      	mov	r0, r7
 800d7b0:	612e      	str	r6, [r5, #16]
 800d7b2:	4621      	mov	r1, r4
 800d7b4:	f7ff fdd8 	bl	800d368 <_Bfree>
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7be:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	e7c5      	b.n	800d752 <__lshift+0x4a>
 800d7c6:	3904      	subs	r1, #4
 800d7c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7d0:	459c      	cmp	ip, r3
 800d7d2:	d8f9      	bhi.n	800d7c8 <__lshift+0xc0>
 800d7d4:	e7ea      	b.n	800d7ac <__lshift+0xa4>
 800d7d6:	bf00      	nop
 800d7d8:	0800ffdc 	.word	0x0800ffdc
 800d7dc:	0800fffe 	.word	0x0800fffe

0800d7e0 <__mcmp>:
 800d7e0:	b530      	push	{r4, r5, lr}
 800d7e2:	6902      	ldr	r2, [r0, #16]
 800d7e4:	690c      	ldr	r4, [r1, #16]
 800d7e6:	1b12      	subs	r2, r2, r4
 800d7e8:	d10e      	bne.n	800d808 <__mcmp+0x28>
 800d7ea:	f100 0314 	add.w	r3, r0, #20
 800d7ee:	3114      	adds	r1, #20
 800d7f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d7f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d7f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d7fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d800:	42a5      	cmp	r5, r4
 800d802:	d003      	beq.n	800d80c <__mcmp+0x2c>
 800d804:	d305      	bcc.n	800d812 <__mcmp+0x32>
 800d806:	2201      	movs	r2, #1
 800d808:	4610      	mov	r0, r2
 800d80a:	bd30      	pop	{r4, r5, pc}
 800d80c:	4283      	cmp	r3, r0
 800d80e:	d3f3      	bcc.n	800d7f8 <__mcmp+0x18>
 800d810:	e7fa      	b.n	800d808 <__mcmp+0x28>
 800d812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d816:	e7f7      	b.n	800d808 <__mcmp+0x28>

0800d818 <__mdiff>:
 800d818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d81c:	460c      	mov	r4, r1
 800d81e:	4606      	mov	r6, r0
 800d820:	4611      	mov	r1, r2
 800d822:	4620      	mov	r0, r4
 800d824:	4690      	mov	r8, r2
 800d826:	f7ff ffdb 	bl	800d7e0 <__mcmp>
 800d82a:	1e05      	subs	r5, r0, #0
 800d82c:	d110      	bne.n	800d850 <__mdiff+0x38>
 800d82e:	4629      	mov	r1, r5
 800d830:	4630      	mov	r0, r6
 800d832:	f7ff fd59 	bl	800d2e8 <_Balloc>
 800d836:	b930      	cbnz	r0, 800d846 <__mdiff+0x2e>
 800d838:	4b3a      	ldr	r3, [pc, #232]	; (800d924 <__mdiff+0x10c>)
 800d83a:	4602      	mov	r2, r0
 800d83c:	f240 2137 	movw	r1, #567	; 0x237
 800d840:	4839      	ldr	r0, [pc, #228]	; (800d928 <__mdiff+0x110>)
 800d842:	f000 f9af 	bl	800dba4 <__assert_func>
 800d846:	2301      	movs	r3, #1
 800d848:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d84c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d850:	bfa4      	itt	ge
 800d852:	4643      	movge	r3, r8
 800d854:	46a0      	movge	r8, r4
 800d856:	4630      	mov	r0, r6
 800d858:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d85c:	bfa6      	itte	ge
 800d85e:	461c      	movge	r4, r3
 800d860:	2500      	movge	r5, #0
 800d862:	2501      	movlt	r5, #1
 800d864:	f7ff fd40 	bl	800d2e8 <_Balloc>
 800d868:	b920      	cbnz	r0, 800d874 <__mdiff+0x5c>
 800d86a:	4b2e      	ldr	r3, [pc, #184]	; (800d924 <__mdiff+0x10c>)
 800d86c:	4602      	mov	r2, r0
 800d86e:	f240 2145 	movw	r1, #581	; 0x245
 800d872:	e7e5      	b.n	800d840 <__mdiff+0x28>
 800d874:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d878:	6926      	ldr	r6, [r4, #16]
 800d87a:	60c5      	str	r5, [r0, #12]
 800d87c:	f104 0914 	add.w	r9, r4, #20
 800d880:	f108 0514 	add.w	r5, r8, #20
 800d884:	f100 0e14 	add.w	lr, r0, #20
 800d888:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d88c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d890:	f108 0210 	add.w	r2, r8, #16
 800d894:	46f2      	mov	sl, lr
 800d896:	2100      	movs	r1, #0
 800d898:	f859 3b04 	ldr.w	r3, [r9], #4
 800d89c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d8a0:	fa11 f88b 	uxtah	r8, r1, fp
 800d8a4:	b299      	uxth	r1, r3
 800d8a6:	0c1b      	lsrs	r3, r3, #16
 800d8a8:	eba8 0801 	sub.w	r8, r8, r1
 800d8ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d8b0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d8b4:	fa1f f888 	uxth.w	r8, r8
 800d8b8:	1419      	asrs	r1, r3, #16
 800d8ba:	454e      	cmp	r6, r9
 800d8bc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d8c0:	f84a 3b04 	str.w	r3, [sl], #4
 800d8c4:	d8e8      	bhi.n	800d898 <__mdiff+0x80>
 800d8c6:	1b33      	subs	r3, r6, r4
 800d8c8:	3b15      	subs	r3, #21
 800d8ca:	f023 0303 	bic.w	r3, r3, #3
 800d8ce:	3304      	adds	r3, #4
 800d8d0:	3415      	adds	r4, #21
 800d8d2:	42a6      	cmp	r6, r4
 800d8d4:	bf38      	it	cc
 800d8d6:	2304      	movcc	r3, #4
 800d8d8:	441d      	add	r5, r3
 800d8da:	4473      	add	r3, lr
 800d8dc:	469e      	mov	lr, r3
 800d8de:	462e      	mov	r6, r5
 800d8e0:	4566      	cmp	r6, ip
 800d8e2:	d30e      	bcc.n	800d902 <__mdiff+0xea>
 800d8e4:	f10c 0203 	add.w	r2, ip, #3
 800d8e8:	1b52      	subs	r2, r2, r5
 800d8ea:	f022 0203 	bic.w	r2, r2, #3
 800d8ee:	3d03      	subs	r5, #3
 800d8f0:	45ac      	cmp	ip, r5
 800d8f2:	bf38      	it	cc
 800d8f4:	2200      	movcc	r2, #0
 800d8f6:	4413      	add	r3, r2
 800d8f8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d8fc:	b17a      	cbz	r2, 800d91e <__mdiff+0x106>
 800d8fe:	6107      	str	r7, [r0, #16]
 800d900:	e7a4      	b.n	800d84c <__mdiff+0x34>
 800d902:	f856 8b04 	ldr.w	r8, [r6], #4
 800d906:	fa11 f288 	uxtah	r2, r1, r8
 800d90a:	1414      	asrs	r4, r2, #16
 800d90c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d910:	b292      	uxth	r2, r2
 800d912:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d916:	f84e 2b04 	str.w	r2, [lr], #4
 800d91a:	1421      	asrs	r1, r4, #16
 800d91c:	e7e0      	b.n	800d8e0 <__mdiff+0xc8>
 800d91e:	3f01      	subs	r7, #1
 800d920:	e7ea      	b.n	800d8f8 <__mdiff+0xe0>
 800d922:	bf00      	nop
 800d924:	0800ffdc 	.word	0x0800ffdc
 800d928:	0800fffe 	.word	0x0800fffe

0800d92c <__d2b>:
 800d92c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d930:	460f      	mov	r7, r1
 800d932:	2101      	movs	r1, #1
 800d934:	ec59 8b10 	vmov	r8, r9, d0
 800d938:	4616      	mov	r6, r2
 800d93a:	f7ff fcd5 	bl	800d2e8 <_Balloc>
 800d93e:	4604      	mov	r4, r0
 800d940:	b930      	cbnz	r0, 800d950 <__d2b+0x24>
 800d942:	4602      	mov	r2, r0
 800d944:	4b24      	ldr	r3, [pc, #144]	; (800d9d8 <__d2b+0xac>)
 800d946:	4825      	ldr	r0, [pc, #148]	; (800d9dc <__d2b+0xb0>)
 800d948:	f240 310f 	movw	r1, #783	; 0x30f
 800d94c:	f000 f92a 	bl	800dba4 <__assert_func>
 800d950:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d954:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d958:	bb2d      	cbnz	r5, 800d9a6 <__d2b+0x7a>
 800d95a:	9301      	str	r3, [sp, #4]
 800d95c:	f1b8 0300 	subs.w	r3, r8, #0
 800d960:	d026      	beq.n	800d9b0 <__d2b+0x84>
 800d962:	4668      	mov	r0, sp
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	f7ff fd87 	bl	800d478 <__lo0bits>
 800d96a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d96e:	b1e8      	cbz	r0, 800d9ac <__d2b+0x80>
 800d970:	f1c0 0320 	rsb	r3, r0, #32
 800d974:	fa02 f303 	lsl.w	r3, r2, r3
 800d978:	430b      	orrs	r3, r1
 800d97a:	40c2      	lsrs	r2, r0
 800d97c:	6163      	str	r3, [r4, #20]
 800d97e:	9201      	str	r2, [sp, #4]
 800d980:	9b01      	ldr	r3, [sp, #4]
 800d982:	61a3      	str	r3, [r4, #24]
 800d984:	2b00      	cmp	r3, #0
 800d986:	bf14      	ite	ne
 800d988:	2202      	movne	r2, #2
 800d98a:	2201      	moveq	r2, #1
 800d98c:	6122      	str	r2, [r4, #16]
 800d98e:	b1bd      	cbz	r5, 800d9c0 <__d2b+0x94>
 800d990:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d994:	4405      	add	r5, r0
 800d996:	603d      	str	r5, [r7, #0]
 800d998:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d99c:	6030      	str	r0, [r6, #0]
 800d99e:	4620      	mov	r0, r4
 800d9a0:	b003      	add	sp, #12
 800d9a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9aa:	e7d6      	b.n	800d95a <__d2b+0x2e>
 800d9ac:	6161      	str	r1, [r4, #20]
 800d9ae:	e7e7      	b.n	800d980 <__d2b+0x54>
 800d9b0:	a801      	add	r0, sp, #4
 800d9b2:	f7ff fd61 	bl	800d478 <__lo0bits>
 800d9b6:	9b01      	ldr	r3, [sp, #4]
 800d9b8:	6163      	str	r3, [r4, #20]
 800d9ba:	3020      	adds	r0, #32
 800d9bc:	2201      	movs	r2, #1
 800d9be:	e7e5      	b.n	800d98c <__d2b+0x60>
 800d9c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d9c8:	6038      	str	r0, [r7, #0]
 800d9ca:	6918      	ldr	r0, [r3, #16]
 800d9cc:	f7ff fd34 	bl	800d438 <__hi0bits>
 800d9d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9d4:	e7e2      	b.n	800d99c <__d2b+0x70>
 800d9d6:	bf00      	nop
 800d9d8:	0800ffdc 	.word	0x0800ffdc
 800d9dc:	0800fffe 	.word	0x0800fffe

0800d9e0 <__sread>:
 800d9e0:	b510      	push	{r4, lr}
 800d9e2:	460c      	mov	r4, r1
 800d9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9e8:	f000 f8a8 	bl	800db3c <_read_r>
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	bfab      	itete	ge
 800d9f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9f2:	89a3      	ldrhlt	r3, [r4, #12]
 800d9f4:	181b      	addge	r3, r3, r0
 800d9f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9fa:	bfac      	ite	ge
 800d9fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9fe:	81a3      	strhlt	r3, [r4, #12]
 800da00:	bd10      	pop	{r4, pc}

0800da02 <__swrite>:
 800da02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da06:	461f      	mov	r7, r3
 800da08:	898b      	ldrh	r3, [r1, #12]
 800da0a:	05db      	lsls	r3, r3, #23
 800da0c:	4605      	mov	r5, r0
 800da0e:	460c      	mov	r4, r1
 800da10:	4616      	mov	r6, r2
 800da12:	d505      	bpl.n	800da20 <__swrite+0x1e>
 800da14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da18:	2302      	movs	r3, #2
 800da1a:	2200      	movs	r2, #0
 800da1c:	f000 f87c 	bl	800db18 <_lseek_r>
 800da20:	89a3      	ldrh	r3, [r4, #12]
 800da22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da2a:	81a3      	strh	r3, [r4, #12]
 800da2c:	4632      	mov	r2, r6
 800da2e:	463b      	mov	r3, r7
 800da30:	4628      	mov	r0, r5
 800da32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da36:	f000 b8a3 	b.w	800db80 <_write_r>

0800da3a <__sseek>:
 800da3a:	b510      	push	{r4, lr}
 800da3c:	460c      	mov	r4, r1
 800da3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da42:	f000 f869 	bl	800db18 <_lseek_r>
 800da46:	1c43      	adds	r3, r0, #1
 800da48:	89a3      	ldrh	r3, [r4, #12]
 800da4a:	bf15      	itete	ne
 800da4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800da4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da56:	81a3      	strheq	r3, [r4, #12]
 800da58:	bf18      	it	ne
 800da5a:	81a3      	strhne	r3, [r4, #12]
 800da5c:	bd10      	pop	{r4, pc}

0800da5e <__sclose>:
 800da5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da62:	f000 b849 	b.w	800daf8 <_close_r>

0800da66 <_realloc_r>:
 800da66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da6a:	4680      	mov	r8, r0
 800da6c:	4614      	mov	r4, r2
 800da6e:	460e      	mov	r6, r1
 800da70:	b921      	cbnz	r1, 800da7c <_realloc_r+0x16>
 800da72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da76:	4611      	mov	r1, r2
 800da78:	f7ff bafc 	b.w	800d074 <_malloc_r>
 800da7c:	b92a      	cbnz	r2, 800da8a <_realloc_r+0x24>
 800da7e:	f000 f8c5 	bl	800dc0c <_free_r>
 800da82:	4625      	mov	r5, r4
 800da84:	4628      	mov	r0, r5
 800da86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da8a:	f000 f91d 	bl	800dcc8 <_malloc_usable_size_r>
 800da8e:	4284      	cmp	r4, r0
 800da90:	4607      	mov	r7, r0
 800da92:	d802      	bhi.n	800da9a <_realloc_r+0x34>
 800da94:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da98:	d812      	bhi.n	800dac0 <_realloc_r+0x5a>
 800da9a:	4621      	mov	r1, r4
 800da9c:	4640      	mov	r0, r8
 800da9e:	f7ff fae9 	bl	800d074 <_malloc_r>
 800daa2:	4605      	mov	r5, r0
 800daa4:	2800      	cmp	r0, #0
 800daa6:	d0ed      	beq.n	800da84 <_realloc_r+0x1e>
 800daa8:	42bc      	cmp	r4, r7
 800daaa:	4622      	mov	r2, r4
 800daac:	4631      	mov	r1, r6
 800daae:	bf28      	it	cs
 800dab0:	463a      	movcs	r2, r7
 800dab2:	f7fe fad4 	bl	800c05e <memcpy>
 800dab6:	4631      	mov	r1, r6
 800dab8:	4640      	mov	r0, r8
 800daba:	f000 f8a7 	bl	800dc0c <_free_r>
 800dabe:	e7e1      	b.n	800da84 <_realloc_r+0x1e>
 800dac0:	4635      	mov	r5, r6
 800dac2:	e7df      	b.n	800da84 <_realloc_r+0x1e>

0800dac4 <memmove>:
 800dac4:	4288      	cmp	r0, r1
 800dac6:	b510      	push	{r4, lr}
 800dac8:	eb01 0402 	add.w	r4, r1, r2
 800dacc:	d902      	bls.n	800dad4 <memmove+0x10>
 800dace:	4284      	cmp	r4, r0
 800dad0:	4623      	mov	r3, r4
 800dad2:	d807      	bhi.n	800dae4 <memmove+0x20>
 800dad4:	1e43      	subs	r3, r0, #1
 800dad6:	42a1      	cmp	r1, r4
 800dad8:	d008      	beq.n	800daec <memmove+0x28>
 800dada:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dade:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dae2:	e7f8      	b.n	800dad6 <memmove+0x12>
 800dae4:	4402      	add	r2, r0
 800dae6:	4601      	mov	r1, r0
 800dae8:	428a      	cmp	r2, r1
 800daea:	d100      	bne.n	800daee <memmove+0x2a>
 800daec:	bd10      	pop	{r4, pc}
 800daee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800daf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800daf6:	e7f7      	b.n	800dae8 <memmove+0x24>

0800daf8 <_close_r>:
 800daf8:	b538      	push	{r3, r4, r5, lr}
 800dafa:	4d06      	ldr	r5, [pc, #24]	; (800db14 <_close_r+0x1c>)
 800dafc:	2300      	movs	r3, #0
 800dafe:	4604      	mov	r4, r0
 800db00:	4608      	mov	r0, r1
 800db02:	602b      	str	r3, [r5, #0]
 800db04:	f7f6 f975 	bl	8003df2 <_close>
 800db08:	1c43      	adds	r3, r0, #1
 800db0a:	d102      	bne.n	800db12 <_close_r+0x1a>
 800db0c:	682b      	ldr	r3, [r5, #0]
 800db0e:	b103      	cbz	r3, 800db12 <_close_r+0x1a>
 800db10:	6023      	str	r3, [r4, #0]
 800db12:	bd38      	pop	{r3, r4, r5, pc}
 800db14:	200053ec 	.word	0x200053ec

0800db18 <_lseek_r>:
 800db18:	b538      	push	{r3, r4, r5, lr}
 800db1a:	4d07      	ldr	r5, [pc, #28]	; (800db38 <_lseek_r+0x20>)
 800db1c:	4604      	mov	r4, r0
 800db1e:	4608      	mov	r0, r1
 800db20:	4611      	mov	r1, r2
 800db22:	2200      	movs	r2, #0
 800db24:	602a      	str	r2, [r5, #0]
 800db26:	461a      	mov	r2, r3
 800db28:	f7f6 f98a 	bl	8003e40 <_lseek>
 800db2c:	1c43      	adds	r3, r0, #1
 800db2e:	d102      	bne.n	800db36 <_lseek_r+0x1e>
 800db30:	682b      	ldr	r3, [r5, #0]
 800db32:	b103      	cbz	r3, 800db36 <_lseek_r+0x1e>
 800db34:	6023      	str	r3, [r4, #0]
 800db36:	bd38      	pop	{r3, r4, r5, pc}
 800db38:	200053ec 	.word	0x200053ec

0800db3c <_read_r>:
 800db3c:	b538      	push	{r3, r4, r5, lr}
 800db3e:	4d07      	ldr	r5, [pc, #28]	; (800db5c <_read_r+0x20>)
 800db40:	4604      	mov	r4, r0
 800db42:	4608      	mov	r0, r1
 800db44:	4611      	mov	r1, r2
 800db46:	2200      	movs	r2, #0
 800db48:	602a      	str	r2, [r5, #0]
 800db4a:	461a      	mov	r2, r3
 800db4c:	f7f6 f918 	bl	8003d80 <_read>
 800db50:	1c43      	adds	r3, r0, #1
 800db52:	d102      	bne.n	800db5a <_read_r+0x1e>
 800db54:	682b      	ldr	r3, [r5, #0]
 800db56:	b103      	cbz	r3, 800db5a <_read_r+0x1e>
 800db58:	6023      	str	r3, [r4, #0]
 800db5a:	bd38      	pop	{r3, r4, r5, pc}
 800db5c:	200053ec 	.word	0x200053ec

0800db60 <_sbrk_r>:
 800db60:	b538      	push	{r3, r4, r5, lr}
 800db62:	4d06      	ldr	r5, [pc, #24]	; (800db7c <_sbrk_r+0x1c>)
 800db64:	2300      	movs	r3, #0
 800db66:	4604      	mov	r4, r0
 800db68:	4608      	mov	r0, r1
 800db6a:	602b      	str	r3, [r5, #0]
 800db6c:	f7f6 f976 	bl	8003e5c <_sbrk>
 800db70:	1c43      	adds	r3, r0, #1
 800db72:	d102      	bne.n	800db7a <_sbrk_r+0x1a>
 800db74:	682b      	ldr	r3, [r5, #0]
 800db76:	b103      	cbz	r3, 800db7a <_sbrk_r+0x1a>
 800db78:	6023      	str	r3, [r4, #0]
 800db7a:	bd38      	pop	{r3, r4, r5, pc}
 800db7c:	200053ec 	.word	0x200053ec

0800db80 <_write_r>:
 800db80:	b538      	push	{r3, r4, r5, lr}
 800db82:	4d07      	ldr	r5, [pc, #28]	; (800dba0 <_write_r+0x20>)
 800db84:	4604      	mov	r4, r0
 800db86:	4608      	mov	r0, r1
 800db88:	4611      	mov	r1, r2
 800db8a:	2200      	movs	r2, #0
 800db8c:	602a      	str	r2, [r5, #0]
 800db8e:	461a      	mov	r2, r3
 800db90:	f7f6 f913 	bl	8003dba <_write>
 800db94:	1c43      	adds	r3, r0, #1
 800db96:	d102      	bne.n	800db9e <_write_r+0x1e>
 800db98:	682b      	ldr	r3, [r5, #0]
 800db9a:	b103      	cbz	r3, 800db9e <_write_r+0x1e>
 800db9c:	6023      	str	r3, [r4, #0]
 800db9e:	bd38      	pop	{r3, r4, r5, pc}
 800dba0:	200053ec 	.word	0x200053ec

0800dba4 <__assert_func>:
 800dba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dba6:	4614      	mov	r4, r2
 800dba8:	461a      	mov	r2, r3
 800dbaa:	4b09      	ldr	r3, [pc, #36]	; (800dbd0 <__assert_func+0x2c>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4605      	mov	r5, r0
 800dbb0:	68d8      	ldr	r0, [r3, #12]
 800dbb2:	b14c      	cbz	r4, 800dbc8 <__assert_func+0x24>
 800dbb4:	4b07      	ldr	r3, [pc, #28]	; (800dbd4 <__assert_func+0x30>)
 800dbb6:	9100      	str	r1, [sp, #0]
 800dbb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbbc:	4906      	ldr	r1, [pc, #24]	; (800dbd8 <__assert_func+0x34>)
 800dbbe:	462b      	mov	r3, r5
 800dbc0:	f000 f88a 	bl	800dcd8 <fiprintf>
 800dbc4:	f000 f8a7 	bl	800dd16 <abort>
 800dbc8:	4b04      	ldr	r3, [pc, #16]	; (800dbdc <__assert_func+0x38>)
 800dbca:	461c      	mov	r4, r3
 800dbcc:	e7f3      	b.n	800dbb6 <__assert_func+0x12>
 800dbce:	bf00      	nop
 800dbd0:	2000006c 	.word	0x2000006c
 800dbd4:	0801025f 	.word	0x0801025f
 800dbd8:	0801026c 	.word	0x0801026c
 800dbdc:	0801029a 	.word	0x0801029a

0800dbe0 <_calloc_r>:
 800dbe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbe2:	fba1 2402 	umull	r2, r4, r1, r2
 800dbe6:	b94c      	cbnz	r4, 800dbfc <_calloc_r+0x1c>
 800dbe8:	4611      	mov	r1, r2
 800dbea:	9201      	str	r2, [sp, #4]
 800dbec:	f7ff fa42 	bl	800d074 <_malloc_r>
 800dbf0:	9a01      	ldr	r2, [sp, #4]
 800dbf2:	4605      	mov	r5, r0
 800dbf4:	b930      	cbnz	r0, 800dc04 <_calloc_r+0x24>
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	b003      	add	sp, #12
 800dbfa:	bd30      	pop	{r4, r5, pc}
 800dbfc:	220c      	movs	r2, #12
 800dbfe:	6002      	str	r2, [r0, #0]
 800dc00:	2500      	movs	r5, #0
 800dc02:	e7f8      	b.n	800dbf6 <_calloc_r+0x16>
 800dc04:	4621      	mov	r1, r4
 800dc06:	f7fe f9f1 	bl	800bfec <memset>
 800dc0a:	e7f4      	b.n	800dbf6 <_calloc_r+0x16>

0800dc0c <_free_r>:
 800dc0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc0e:	2900      	cmp	r1, #0
 800dc10:	d044      	beq.n	800dc9c <_free_r+0x90>
 800dc12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc16:	9001      	str	r0, [sp, #4]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f1a1 0404 	sub.w	r4, r1, #4
 800dc1e:	bfb8      	it	lt
 800dc20:	18e4      	addlt	r4, r4, r3
 800dc22:	f7ff fb55 	bl	800d2d0 <__malloc_lock>
 800dc26:	4a1e      	ldr	r2, [pc, #120]	; (800dca0 <_free_r+0x94>)
 800dc28:	9801      	ldr	r0, [sp, #4]
 800dc2a:	6813      	ldr	r3, [r2, #0]
 800dc2c:	b933      	cbnz	r3, 800dc3c <_free_r+0x30>
 800dc2e:	6063      	str	r3, [r4, #4]
 800dc30:	6014      	str	r4, [r2, #0]
 800dc32:	b003      	add	sp, #12
 800dc34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc38:	f7ff bb50 	b.w	800d2dc <__malloc_unlock>
 800dc3c:	42a3      	cmp	r3, r4
 800dc3e:	d908      	bls.n	800dc52 <_free_r+0x46>
 800dc40:	6825      	ldr	r5, [r4, #0]
 800dc42:	1961      	adds	r1, r4, r5
 800dc44:	428b      	cmp	r3, r1
 800dc46:	bf01      	itttt	eq
 800dc48:	6819      	ldreq	r1, [r3, #0]
 800dc4a:	685b      	ldreq	r3, [r3, #4]
 800dc4c:	1949      	addeq	r1, r1, r5
 800dc4e:	6021      	streq	r1, [r4, #0]
 800dc50:	e7ed      	b.n	800dc2e <_free_r+0x22>
 800dc52:	461a      	mov	r2, r3
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	b10b      	cbz	r3, 800dc5c <_free_r+0x50>
 800dc58:	42a3      	cmp	r3, r4
 800dc5a:	d9fa      	bls.n	800dc52 <_free_r+0x46>
 800dc5c:	6811      	ldr	r1, [r2, #0]
 800dc5e:	1855      	adds	r5, r2, r1
 800dc60:	42a5      	cmp	r5, r4
 800dc62:	d10b      	bne.n	800dc7c <_free_r+0x70>
 800dc64:	6824      	ldr	r4, [r4, #0]
 800dc66:	4421      	add	r1, r4
 800dc68:	1854      	adds	r4, r2, r1
 800dc6a:	42a3      	cmp	r3, r4
 800dc6c:	6011      	str	r1, [r2, #0]
 800dc6e:	d1e0      	bne.n	800dc32 <_free_r+0x26>
 800dc70:	681c      	ldr	r4, [r3, #0]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	6053      	str	r3, [r2, #4]
 800dc76:	440c      	add	r4, r1
 800dc78:	6014      	str	r4, [r2, #0]
 800dc7a:	e7da      	b.n	800dc32 <_free_r+0x26>
 800dc7c:	d902      	bls.n	800dc84 <_free_r+0x78>
 800dc7e:	230c      	movs	r3, #12
 800dc80:	6003      	str	r3, [r0, #0]
 800dc82:	e7d6      	b.n	800dc32 <_free_r+0x26>
 800dc84:	6825      	ldr	r5, [r4, #0]
 800dc86:	1961      	adds	r1, r4, r5
 800dc88:	428b      	cmp	r3, r1
 800dc8a:	bf04      	itt	eq
 800dc8c:	6819      	ldreq	r1, [r3, #0]
 800dc8e:	685b      	ldreq	r3, [r3, #4]
 800dc90:	6063      	str	r3, [r4, #4]
 800dc92:	bf04      	itt	eq
 800dc94:	1949      	addeq	r1, r1, r5
 800dc96:	6021      	streq	r1, [r4, #0]
 800dc98:	6054      	str	r4, [r2, #4]
 800dc9a:	e7ca      	b.n	800dc32 <_free_r+0x26>
 800dc9c:	b003      	add	sp, #12
 800dc9e:	bd30      	pop	{r4, r5, pc}
 800dca0:	200053e4 	.word	0x200053e4

0800dca4 <__ascii_mbtowc>:
 800dca4:	b082      	sub	sp, #8
 800dca6:	b901      	cbnz	r1, 800dcaa <__ascii_mbtowc+0x6>
 800dca8:	a901      	add	r1, sp, #4
 800dcaa:	b142      	cbz	r2, 800dcbe <__ascii_mbtowc+0x1a>
 800dcac:	b14b      	cbz	r3, 800dcc2 <__ascii_mbtowc+0x1e>
 800dcae:	7813      	ldrb	r3, [r2, #0]
 800dcb0:	600b      	str	r3, [r1, #0]
 800dcb2:	7812      	ldrb	r2, [r2, #0]
 800dcb4:	1e10      	subs	r0, r2, #0
 800dcb6:	bf18      	it	ne
 800dcb8:	2001      	movne	r0, #1
 800dcba:	b002      	add	sp, #8
 800dcbc:	4770      	bx	lr
 800dcbe:	4610      	mov	r0, r2
 800dcc0:	e7fb      	b.n	800dcba <__ascii_mbtowc+0x16>
 800dcc2:	f06f 0001 	mvn.w	r0, #1
 800dcc6:	e7f8      	b.n	800dcba <__ascii_mbtowc+0x16>

0800dcc8 <_malloc_usable_size_r>:
 800dcc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dccc:	1f18      	subs	r0, r3, #4
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	bfbc      	itt	lt
 800dcd2:	580b      	ldrlt	r3, [r1, r0]
 800dcd4:	18c0      	addlt	r0, r0, r3
 800dcd6:	4770      	bx	lr

0800dcd8 <fiprintf>:
 800dcd8:	b40e      	push	{r1, r2, r3}
 800dcda:	b503      	push	{r0, r1, lr}
 800dcdc:	4601      	mov	r1, r0
 800dcde:	ab03      	add	r3, sp, #12
 800dce0:	4805      	ldr	r0, [pc, #20]	; (800dcf8 <fiprintf+0x20>)
 800dce2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dce6:	6800      	ldr	r0, [r0, #0]
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	f000 f845 	bl	800dd78 <_vfiprintf_r>
 800dcee:	b002      	add	sp, #8
 800dcf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcf4:	b003      	add	sp, #12
 800dcf6:	4770      	bx	lr
 800dcf8:	2000006c 	.word	0x2000006c

0800dcfc <__ascii_wctomb>:
 800dcfc:	b149      	cbz	r1, 800dd12 <__ascii_wctomb+0x16>
 800dcfe:	2aff      	cmp	r2, #255	; 0xff
 800dd00:	bf85      	ittet	hi
 800dd02:	238a      	movhi	r3, #138	; 0x8a
 800dd04:	6003      	strhi	r3, [r0, #0]
 800dd06:	700a      	strbls	r2, [r1, #0]
 800dd08:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800dd0c:	bf98      	it	ls
 800dd0e:	2001      	movls	r0, #1
 800dd10:	4770      	bx	lr
 800dd12:	4608      	mov	r0, r1
 800dd14:	4770      	bx	lr

0800dd16 <abort>:
 800dd16:	b508      	push	{r3, lr}
 800dd18:	2006      	movs	r0, #6
 800dd1a:	f000 fa89 	bl	800e230 <raise>
 800dd1e:	2001      	movs	r0, #1
 800dd20:	f7f6 f824 	bl	8003d6c <_exit>

0800dd24 <__sfputc_r>:
 800dd24:	6893      	ldr	r3, [r2, #8]
 800dd26:	3b01      	subs	r3, #1
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	b410      	push	{r4}
 800dd2c:	6093      	str	r3, [r2, #8]
 800dd2e:	da08      	bge.n	800dd42 <__sfputc_r+0x1e>
 800dd30:	6994      	ldr	r4, [r2, #24]
 800dd32:	42a3      	cmp	r3, r4
 800dd34:	db01      	blt.n	800dd3a <__sfputc_r+0x16>
 800dd36:	290a      	cmp	r1, #10
 800dd38:	d103      	bne.n	800dd42 <__sfputc_r+0x1e>
 800dd3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd3e:	f000 b935 	b.w	800dfac <__swbuf_r>
 800dd42:	6813      	ldr	r3, [r2, #0]
 800dd44:	1c58      	adds	r0, r3, #1
 800dd46:	6010      	str	r0, [r2, #0]
 800dd48:	7019      	strb	r1, [r3, #0]
 800dd4a:	4608      	mov	r0, r1
 800dd4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd50:	4770      	bx	lr

0800dd52 <__sfputs_r>:
 800dd52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd54:	4606      	mov	r6, r0
 800dd56:	460f      	mov	r7, r1
 800dd58:	4614      	mov	r4, r2
 800dd5a:	18d5      	adds	r5, r2, r3
 800dd5c:	42ac      	cmp	r4, r5
 800dd5e:	d101      	bne.n	800dd64 <__sfputs_r+0x12>
 800dd60:	2000      	movs	r0, #0
 800dd62:	e007      	b.n	800dd74 <__sfputs_r+0x22>
 800dd64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd68:	463a      	mov	r2, r7
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	f7ff ffda 	bl	800dd24 <__sfputc_r>
 800dd70:	1c43      	adds	r3, r0, #1
 800dd72:	d1f3      	bne.n	800dd5c <__sfputs_r+0xa>
 800dd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd78 <_vfiprintf_r>:
 800dd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd7c:	460d      	mov	r5, r1
 800dd7e:	b09d      	sub	sp, #116	; 0x74
 800dd80:	4614      	mov	r4, r2
 800dd82:	4698      	mov	r8, r3
 800dd84:	4606      	mov	r6, r0
 800dd86:	b118      	cbz	r0, 800dd90 <_vfiprintf_r+0x18>
 800dd88:	6a03      	ldr	r3, [r0, #32]
 800dd8a:	b90b      	cbnz	r3, 800dd90 <_vfiprintf_r+0x18>
 800dd8c:	f7fe f8f8 	bl	800bf80 <__sinit>
 800dd90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd92:	07d9      	lsls	r1, r3, #31
 800dd94:	d405      	bmi.n	800dda2 <_vfiprintf_r+0x2a>
 800dd96:	89ab      	ldrh	r3, [r5, #12]
 800dd98:	059a      	lsls	r2, r3, #22
 800dd9a:	d402      	bmi.n	800dda2 <_vfiprintf_r+0x2a>
 800dd9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd9e:	f7fe f95c 	bl	800c05a <__retarget_lock_acquire_recursive>
 800dda2:	89ab      	ldrh	r3, [r5, #12]
 800dda4:	071b      	lsls	r3, r3, #28
 800dda6:	d501      	bpl.n	800ddac <_vfiprintf_r+0x34>
 800dda8:	692b      	ldr	r3, [r5, #16]
 800ddaa:	b99b      	cbnz	r3, 800ddd4 <_vfiprintf_r+0x5c>
 800ddac:	4629      	mov	r1, r5
 800ddae:	4630      	mov	r0, r6
 800ddb0:	f000 f93a 	bl	800e028 <__swsetup_r>
 800ddb4:	b170      	cbz	r0, 800ddd4 <_vfiprintf_r+0x5c>
 800ddb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddb8:	07dc      	lsls	r4, r3, #31
 800ddba:	d504      	bpl.n	800ddc6 <_vfiprintf_r+0x4e>
 800ddbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddc0:	b01d      	add	sp, #116	; 0x74
 800ddc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc6:	89ab      	ldrh	r3, [r5, #12]
 800ddc8:	0598      	lsls	r0, r3, #22
 800ddca:	d4f7      	bmi.n	800ddbc <_vfiprintf_r+0x44>
 800ddcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddce:	f7fe f945 	bl	800c05c <__retarget_lock_release_recursive>
 800ddd2:	e7f3      	b.n	800ddbc <_vfiprintf_r+0x44>
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	9309      	str	r3, [sp, #36]	; 0x24
 800ddd8:	2320      	movs	r3, #32
 800ddda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddde:	f8cd 800c 	str.w	r8, [sp, #12]
 800dde2:	2330      	movs	r3, #48	; 0x30
 800dde4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800df98 <_vfiprintf_r+0x220>
 800dde8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddec:	f04f 0901 	mov.w	r9, #1
 800ddf0:	4623      	mov	r3, r4
 800ddf2:	469a      	mov	sl, r3
 800ddf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddf8:	b10a      	cbz	r2, 800ddfe <_vfiprintf_r+0x86>
 800ddfa:	2a25      	cmp	r2, #37	; 0x25
 800ddfc:	d1f9      	bne.n	800ddf2 <_vfiprintf_r+0x7a>
 800ddfe:	ebba 0b04 	subs.w	fp, sl, r4
 800de02:	d00b      	beq.n	800de1c <_vfiprintf_r+0xa4>
 800de04:	465b      	mov	r3, fp
 800de06:	4622      	mov	r2, r4
 800de08:	4629      	mov	r1, r5
 800de0a:	4630      	mov	r0, r6
 800de0c:	f7ff ffa1 	bl	800dd52 <__sfputs_r>
 800de10:	3001      	adds	r0, #1
 800de12:	f000 80a9 	beq.w	800df68 <_vfiprintf_r+0x1f0>
 800de16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de18:	445a      	add	r2, fp
 800de1a:	9209      	str	r2, [sp, #36]	; 0x24
 800de1c:	f89a 3000 	ldrb.w	r3, [sl]
 800de20:	2b00      	cmp	r3, #0
 800de22:	f000 80a1 	beq.w	800df68 <_vfiprintf_r+0x1f0>
 800de26:	2300      	movs	r3, #0
 800de28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de30:	f10a 0a01 	add.w	sl, sl, #1
 800de34:	9304      	str	r3, [sp, #16]
 800de36:	9307      	str	r3, [sp, #28]
 800de38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de3c:	931a      	str	r3, [sp, #104]	; 0x68
 800de3e:	4654      	mov	r4, sl
 800de40:	2205      	movs	r2, #5
 800de42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de46:	4854      	ldr	r0, [pc, #336]	; (800df98 <_vfiprintf_r+0x220>)
 800de48:	f7f2 f9c2 	bl	80001d0 <memchr>
 800de4c:	9a04      	ldr	r2, [sp, #16]
 800de4e:	b9d8      	cbnz	r0, 800de88 <_vfiprintf_r+0x110>
 800de50:	06d1      	lsls	r1, r2, #27
 800de52:	bf44      	itt	mi
 800de54:	2320      	movmi	r3, #32
 800de56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de5a:	0713      	lsls	r3, r2, #28
 800de5c:	bf44      	itt	mi
 800de5e:	232b      	movmi	r3, #43	; 0x2b
 800de60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de64:	f89a 3000 	ldrb.w	r3, [sl]
 800de68:	2b2a      	cmp	r3, #42	; 0x2a
 800de6a:	d015      	beq.n	800de98 <_vfiprintf_r+0x120>
 800de6c:	9a07      	ldr	r2, [sp, #28]
 800de6e:	4654      	mov	r4, sl
 800de70:	2000      	movs	r0, #0
 800de72:	f04f 0c0a 	mov.w	ip, #10
 800de76:	4621      	mov	r1, r4
 800de78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de7c:	3b30      	subs	r3, #48	; 0x30
 800de7e:	2b09      	cmp	r3, #9
 800de80:	d94d      	bls.n	800df1e <_vfiprintf_r+0x1a6>
 800de82:	b1b0      	cbz	r0, 800deb2 <_vfiprintf_r+0x13a>
 800de84:	9207      	str	r2, [sp, #28]
 800de86:	e014      	b.n	800deb2 <_vfiprintf_r+0x13a>
 800de88:	eba0 0308 	sub.w	r3, r0, r8
 800de8c:	fa09 f303 	lsl.w	r3, r9, r3
 800de90:	4313      	orrs	r3, r2
 800de92:	9304      	str	r3, [sp, #16]
 800de94:	46a2      	mov	sl, r4
 800de96:	e7d2      	b.n	800de3e <_vfiprintf_r+0xc6>
 800de98:	9b03      	ldr	r3, [sp, #12]
 800de9a:	1d19      	adds	r1, r3, #4
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	9103      	str	r1, [sp, #12]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	bfbb      	ittet	lt
 800dea4:	425b      	neglt	r3, r3
 800dea6:	f042 0202 	orrlt.w	r2, r2, #2
 800deaa:	9307      	strge	r3, [sp, #28]
 800deac:	9307      	strlt	r3, [sp, #28]
 800deae:	bfb8      	it	lt
 800deb0:	9204      	strlt	r2, [sp, #16]
 800deb2:	7823      	ldrb	r3, [r4, #0]
 800deb4:	2b2e      	cmp	r3, #46	; 0x2e
 800deb6:	d10c      	bne.n	800ded2 <_vfiprintf_r+0x15a>
 800deb8:	7863      	ldrb	r3, [r4, #1]
 800deba:	2b2a      	cmp	r3, #42	; 0x2a
 800debc:	d134      	bne.n	800df28 <_vfiprintf_r+0x1b0>
 800debe:	9b03      	ldr	r3, [sp, #12]
 800dec0:	1d1a      	adds	r2, r3, #4
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	9203      	str	r2, [sp, #12]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	bfb8      	it	lt
 800deca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dece:	3402      	adds	r4, #2
 800ded0:	9305      	str	r3, [sp, #20]
 800ded2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dfa8 <_vfiprintf_r+0x230>
 800ded6:	7821      	ldrb	r1, [r4, #0]
 800ded8:	2203      	movs	r2, #3
 800deda:	4650      	mov	r0, sl
 800dedc:	f7f2 f978 	bl	80001d0 <memchr>
 800dee0:	b138      	cbz	r0, 800def2 <_vfiprintf_r+0x17a>
 800dee2:	9b04      	ldr	r3, [sp, #16]
 800dee4:	eba0 000a 	sub.w	r0, r0, sl
 800dee8:	2240      	movs	r2, #64	; 0x40
 800deea:	4082      	lsls	r2, r0
 800deec:	4313      	orrs	r3, r2
 800deee:	3401      	adds	r4, #1
 800def0:	9304      	str	r3, [sp, #16]
 800def2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800def6:	4829      	ldr	r0, [pc, #164]	; (800df9c <_vfiprintf_r+0x224>)
 800def8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800defc:	2206      	movs	r2, #6
 800defe:	f7f2 f967 	bl	80001d0 <memchr>
 800df02:	2800      	cmp	r0, #0
 800df04:	d03f      	beq.n	800df86 <_vfiprintf_r+0x20e>
 800df06:	4b26      	ldr	r3, [pc, #152]	; (800dfa0 <_vfiprintf_r+0x228>)
 800df08:	bb1b      	cbnz	r3, 800df52 <_vfiprintf_r+0x1da>
 800df0a:	9b03      	ldr	r3, [sp, #12]
 800df0c:	3307      	adds	r3, #7
 800df0e:	f023 0307 	bic.w	r3, r3, #7
 800df12:	3308      	adds	r3, #8
 800df14:	9303      	str	r3, [sp, #12]
 800df16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df18:	443b      	add	r3, r7
 800df1a:	9309      	str	r3, [sp, #36]	; 0x24
 800df1c:	e768      	b.n	800ddf0 <_vfiprintf_r+0x78>
 800df1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800df22:	460c      	mov	r4, r1
 800df24:	2001      	movs	r0, #1
 800df26:	e7a6      	b.n	800de76 <_vfiprintf_r+0xfe>
 800df28:	2300      	movs	r3, #0
 800df2a:	3401      	adds	r4, #1
 800df2c:	9305      	str	r3, [sp, #20]
 800df2e:	4619      	mov	r1, r3
 800df30:	f04f 0c0a 	mov.w	ip, #10
 800df34:	4620      	mov	r0, r4
 800df36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df3a:	3a30      	subs	r2, #48	; 0x30
 800df3c:	2a09      	cmp	r2, #9
 800df3e:	d903      	bls.n	800df48 <_vfiprintf_r+0x1d0>
 800df40:	2b00      	cmp	r3, #0
 800df42:	d0c6      	beq.n	800ded2 <_vfiprintf_r+0x15a>
 800df44:	9105      	str	r1, [sp, #20]
 800df46:	e7c4      	b.n	800ded2 <_vfiprintf_r+0x15a>
 800df48:	fb0c 2101 	mla	r1, ip, r1, r2
 800df4c:	4604      	mov	r4, r0
 800df4e:	2301      	movs	r3, #1
 800df50:	e7f0      	b.n	800df34 <_vfiprintf_r+0x1bc>
 800df52:	ab03      	add	r3, sp, #12
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	462a      	mov	r2, r5
 800df58:	4b12      	ldr	r3, [pc, #72]	; (800dfa4 <_vfiprintf_r+0x22c>)
 800df5a:	a904      	add	r1, sp, #16
 800df5c:	4630      	mov	r0, r6
 800df5e:	f7fd fb9d 	bl	800b69c <_printf_float>
 800df62:	4607      	mov	r7, r0
 800df64:	1c78      	adds	r0, r7, #1
 800df66:	d1d6      	bne.n	800df16 <_vfiprintf_r+0x19e>
 800df68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df6a:	07d9      	lsls	r1, r3, #31
 800df6c:	d405      	bmi.n	800df7a <_vfiprintf_r+0x202>
 800df6e:	89ab      	ldrh	r3, [r5, #12]
 800df70:	059a      	lsls	r2, r3, #22
 800df72:	d402      	bmi.n	800df7a <_vfiprintf_r+0x202>
 800df74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df76:	f7fe f871 	bl	800c05c <__retarget_lock_release_recursive>
 800df7a:	89ab      	ldrh	r3, [r5, #12]
 800df7c:	065b      	lsls	r3, r3, #25
 800df7e:	f53f af1d 	bmi.w	800ddbc <_vfiprintf_r+0x44>
 800df82:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df84:	e71c      	b.n	800ddc0 <_vfiprintf_r+0x48>
 800df86:	ab03      	add	r3, sp, #12
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	462a      	mov	r2, r5
 800df8c:	4b05      	ldr	r3, [pc, #20]	; (800dfa4 <_vfiprintf_r+0x22c>)
 800df8e:	a904      	add	r1, sp, #16
 800df90:	4630      	mov	r0, r6
 800df92:	f7fd fe27 	bl	800bbe4 <_printf_i>
 800df96:	e7e4      	b.n	800df62 <_vfiprintf_r+0x1ea>
 800df98:	0800ffed 	.word	0x0800ffed
 800df9c:	0800fff7 	.word	0x0800fff7
 800dfa0:	0800b69d 	.word	0x0800b69d
 800dfa4:	0800dd53 	.word	0x0800dd53
 800dfa8:	0800fff3 	.word	0x0800fff3

0800dfac <__swbuf_r>:
 800dfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfae:	460e      	mov	r6, r1
 800dfb0:	4614      	mov	r4, r2
 800dfb2:	4605      	mov	r5, r0
 800dfb4:	b118      	cbz	r0, 800dfbe <__swbuf_r+0x12>
 800dfb6:	6a03      	ldr	r3, [r0, #32]
 800dfb8:	b90b      	cbnz	r3, 800dfbe <__swbuf_r+0x12>
 800dfba:	f7fd ffe1 	bl	800bf80 <__sinit>
 800dfbe:	69a3      	ldr	r3, [r4, #24]
 800dfc0:	60a3      	str	r3, [r4, #8]
 800dfc2:	89a3      	ldrh	r3, [r4, #12]
 800dfc4:	071a      	lsls	r2, r3, #28
 800dfc6:	d525      	bpl.n	800e014 <__swbuf_r+0x68>
 800dfc8:	6923      	ldr	r3, [r4, #16]
 800dfca:	b31b      	cbz	r3, 800e014 <__swbuf_r+0x68>
 800dfcc:	6823      	ldr	r3, [r4, #0]
 800dfce:	6922      	ldr	r2, [r4, #16]
 800dfd0:	1a98      	subs	r0, r3, r2
 800dfd2:	6963      	ldr	r3, [r4, #20]
 800dfd4:	b2f6      	uxtb	r6, r6
 800dfd6:	4283      	cmp	r3, r0
 800dfd8:	4637      	mov	r7, r6
 800dfda:	dc04      	bgt.n	800dfe6 <__swbuf_r+0x3a>
 800dfdc:	4621      	mov	r1, r4
 800dfde:	4628      	mov	r0, r5
 800dfe0:	f7ff f94e 	bl	800d280 <_fflush_r>
 800dfe4:	b9e0      	cbnz	r0, 800e020 <__swbuf_r+0x74>
 800dfe6:	68a3      	ldr	r3, [r4, #8]
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	60a3      	str	r3, [r4, #8]
 800dfec:	6823      	ldr	r3, [r4, #0]
 800dfee:	1c5a      	adds	r2, r3, #1
 800dff0:	6022      	str	r2, [r4, #0]
 800dff2:	701e      	strb	r6, [r3, #0]
 800dff4:	6962      	ldr	r2, [r4, #20]
 800dff6:	1c43      	adds	r3, r0, #1
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d004      	beq.n	800e006 <__swbuf_r+0x5a>
 800dffc:	89a3      	ldrh	r3, [r4, #12]
 800dffe:	07db      	lsls	r3, r3, #31
 800e000:	d506      	bpl.n	800e010 <__swbuf_r+0x64>
 800e002:	2e0a      	cmp	r6, #10
 800e004:	d104      	bne.n	800e010 <__swbuf_r+0x64>
 800e006:	4621      	mov	r1, r4
 800e008:	4628      	mov	r0, r5
 800e00a:	f7ff f939 	bl	800d280 <_fflush_r>
 800e00e:	b938      	cbnz	r0, 800e020 <__swbuf_r+0x74>
 800e010:	4638      	mov	r0, r7
 800e012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e014:	4621      	mov	r1, r4
 800e016:	4628      	mov	r0, r5
 800e018:	f000 f806 	bl	800e028 <__swsetup_r>
 800e01c:	2800      	cmp	r0, #0
 800e01e:	d0d5      	beq.n	800dfcc <__swbuf_r+0x20>
 800e020:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e024:	e7f4      	b.n	800e010 <__swbuf_r+0x64>
	...

0800e028 <__swsetup_r>:
 800e028:	b538      	push	{r3, r4, r5, lr}
 800e02a:	4b2a      	ldr	r3, [pc, #168]	; (800e0d4 <__swsetup_r+0xac>)
 800e02c:	4605      	mov	r5, r0
 800e02e:	6818      	ldr	r0, [r3, #0]
 800e030:	460c      	mov	r4, r1
 800e032:	b118      	cbz	r0, 800e03c <__swsetup_r+0x14>
 800e034:	6a03      	ldr	r3, [r0, #32]
 800e036:	b90b      	cbnz	r3, 800e03c <__swsetup_r+0x14>
 800e038:	f7fd ffa2 	bl	800bf80 <__sinit>
 800e03c:	89a3      	ldrh	r3, [r4, #12]
 800e03e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e042:	0718      	lsls	r0, r3, #28
 800e044:	d422      	bmi.n	800e08c <__swsetup_r+0x64>
 800e046:	06d9      	lsls	r1, r3, #27
 800e048:	d407      	bmi.n	800e05a <__swsetup_r+0x32>
 800e04a:	2309      	movs	r3, #9
 800e04c:	602b      	str	r3, [r5, #0]
 800e04e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e052:	81a3      	strh	r3, [r4, #12]
 800e054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e058:	e034      	b.n	800e0c4 <__swsetup_r+0x9c>
 800e05a:	0758      	lsls	r0, r3, #29
 800e05c:	d512      	bpl.n	800e084 <__swsetup_r+0x5c>
 800e05e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e060:	b141      	cbz	r1, 800e074 <__swsetup_r+0x4c>
 800e062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e066:	4299      	cmp	r1, r3
 800e068:	d002      	beq.n	800e070 <__swsetup_r+0x48>
 800e06a:	4628      	mov	r0, r5
 800e06c:	f7ff fdce 	bl	800dc0c <_free_r>
 800e070:	2300      	movs	r3, #0
 800e072:	6363      	str	r3, [r4, #52]	; 0x34
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e07a:	81a3      	strh	r3, [r4, #12]
 800e07c:	2300      	movs	r3, #0
 800e07e:	6063      	str	r3, [r4, #4]
 800e080:	6923      	ldr	r3, [r4, #16]
 800e082:	6023      	str	r3, [r4, #0]
 800e084:	89a3      	ldrh	r3, [r4, #12]
 800e086:	f043 0308 	orr.w	r3, r3, #8
 800e08a:	81a3      	strh	r3, [r4, #12]
 800e08c:	6923      	ldr	r3, [r4, #16]
 800e08e:	b94b      	cbnz	r3, 800e0a4 <__swsetup_r+0x7c>
 800e090:	89a3      	ldrh	r3, [r4, #12]
 800e092:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e09a:	d003      	beq.n	800e0a4 <__swsetup_r+0x7c>
 800e09c:	4621      	mov	r1, r4
 800e09e:	4628      	mov	r0, r5
 800e0a0:	f000 f840 	bl	800e124 <__smakebuf_r>
 800e0a4:	89a0      	ldrh	r0, [r4, #12]
 800e0a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0aa:	f010 0301 	ands.w	r3, r0, #1
 800e0ae:	d00a      	beq.n	800e0c6 <__swsetup_r+0x9e>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	60a3      	str	r3, [r4, #8]
 800e0b4:	6963      	ldr	r3, [r4, #20]
 800e0b6:	425b      	negs	r3, r3
 800e0b8:	61a3      	str	r3, [r4, #24]
 800e0ba:	6923      	ldr	r3, [r4, #16]
 800e0bc:	b943      	cbnz	r3, 800e0d0 <__swsetup_r+0xa8>
 800e0be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e0c2:	d1c4      	bne.n	800e04e <__swsetup_r+0x26>
 800e0c4:	bd38      	pop	{r3, r4, r5, pc}
 800e0c6:	0781      	lsls	r1, r0, #30
 800e0c8:	bf58      	it	pl
 800e0ca:	6963      	ldrpl	r3, [r4, #20]
 800e0cc:	60a3      	str	r3, [r4, #8]
 800e0ce:	e7f4      	b.n	800e0ba <__swsetup_r+0x92>
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	e7f7      	b.n	800e0c4 <__swsetup_r+0x9c>
 800e0d4:	2000006c 	.word	0x2000006c

0800e0d8 <__swhatbuf_r>:
 800e0d8:	b570      	push	{r4, r5, r6, lr}
 800e0da:	460c      	mov	r4, r1
 800e0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e0:	2900      	cmp	r1, #0
 800e0e2:	b096      	sub	sp, #88	; 0x58
 800e0e4:	4615      	mov	r5, r2
 800e0e6:	461e      	mov	r6, r3
 800e0e8:	da0d      	bge.n	800e106 <__swhatbuf_r+0x2e>
 800e0ea:	89a3      	ldrh	r3, [r4, #12]
 800e0ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e0f0:	f04f 0100 	mov.w	r1, #0
 800e0f4:	bf0c      	ite	eq
 800e0f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e0fa:	2340      	movne	r3, #64	; 0x40
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	6031      	str	r1, [r6, #0]
 800e100:	602b      	str	r3, [r5, #0]
 800e102:	b016      	add	sp, #88	; 0x58
 800e104:	bd70      	pop	{r4, r5, r6, pc}
 800e106:	466a      	mov	r2, sp
 800e108:	f000 f848 	bl	800e19c <_fstat_r>
 800e10c:	2800      	cmp	r0, #0
 800e10e:	dbec      	blt.n	800e0ea <__swhatbuf_r+0x12>
 800e110:	9901      	ldr	r1, [sp, #4]
 800e112:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e116:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e11a:	4259      	negs	r1, r3
 800e11c:	4159      	adcs	r1, r3
 800e11e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e122:	e7eb      	b.n	800e0fc <__swhatbuf_r+0x24>

0800e124 <__smakebuf_r>:
 800e124:	898b      	ldrh	r3, [r1, #12]
 800e126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e128:	079d      	lsls	r5, r3, #30
 800e12a:	4606      	mov	r6, r0
 800e12c:	460c      	mov	r4, r1
 800e12e:	d507      	bpl.n	800e140 <__smakebuf_r+0x1c>
 800e130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e134:	6023      	str	r3, [r4, #0]
 800e136:	6123      	str	r3, [r4, #16]
 800e138:	2301      	movs	r3, #1
 800e13a:	6163      	str	r3, [r4, #20]
 800e13c:	b002      	add	sp, #8
 800e13e:	bd70      	pop	{r4, r5, r6, pc}
 800e140:	ab01      	add	r3, sp, #4
 800e142:	466a      	mov	r2, sp
 800e144:	f7ff ffc8 	bl	800e0d8 <__swhatbuf_r>
 800e148:	9900      	ldr	r1, [sp, #0]
 800e14a:	4605      	mov	r5, r0
 800e14c:	4630      	mov	r0, r6
 800e14e:	f7fe ff91 	bl	800d074 <_malloc_r>
 800e152:	b948      	cbnz	r0, 800e168 <__smakebuf_r+0x44>
 800e154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e158:	059a      	lsls	r2, r3, #22
 800e15a:	d4ef      	bmi.n	800e13c <__smakebuf_r+0x18>
 800e15c:	f023 0303 	bic.w	r3, r3, #3
 800e160:	f043 0302 	orr.w	r3, r3, #2
 800e164:	81a3      	strh	r3, [r4, #12]
 800e166:	e7e3      	b.n	800e130 <__smakebuf_r+0xc>
 800e168:	89a3      	ldrh	r3, [r4, #12]
 800e16a:	6020      	str	r0, [r4, #0]
 800e16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e170:	81a3      	strh	r3, [r4, #12]
 800e172:	9b00      	ldr	r3, [sp, #0]
 800e174:	6163      	str	r3, [r4, #20]
 800e176:	9b01      	ldr	r3, [sp, #4]
 800e178:	6120      	str	r0, [r4, #16]
 800e17a:	b15b      	cbz	r3, 800e194 <__smakebuf_r+0x70>
 800e17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e180:	4630      	mov	r0, r6
 800e182:	f000 f81d 	bl	800e1c0 <_isatty_r>
 800e186:	b128      	cbz	r0, 800e194 <__smakebuf_r+0x70>
 800e188:	89a3      	ldrh	r3, [r4, #12]
 800e18a:	f023 0303 	bic.w	r3, r3, #3
 800e18e:	f043 0301 	orr.w	r3, r3, #1
 800e192:	81a3      	strh	r3, [r4, #12]
 800e194:	89a3      	ldrh	r3, [r4, #12]
 800e196:	431d      	orrs	r5, r3
 800e198:	81a5      	strh	r5, [r4, #12]
 800e19a:	e7cf      	b.n	800e13c <__smakebuf_r+0x18>

0800e19c <_fstat_r>:
 800e19c:	b538      	push	{r3, r4, r5, lr}
 800e19e:	4d07      	ldr	r5, [pc, #28]	; (800e1bc <_fstat_r+0x20>)
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	4608      	mov	r0, r1
 800e1a6:	4611      	mov	r1, r2
 800e1a8:	602b      	str	r3, [r5, #0]
 800e1aa:	f7f5 fe2e 	bl	8003e0a <_fstat>
 800e1ae:	1c43      	adds	r3, r0, #1
 800e1b0:	d102      	bne.n	800e1b8 <_fstat_r+0x1c>
 800e1b2:	682b      	ldr	r3, [r5, #0]
 800e1b4:	b103      	cbz	r3, 800e1b8 <_fstat_r+0x1c>
 800e1b6:	6023      	str	r3, [r4, #0]
 800e1b8:	bd38      	pop	{r3, r4, r5, pc}
 800e1ba:	bf00      	nop
 800e1bc:	200053ec 	.word	0x200053ec

0800e1c0 <_isatty_r>:
 800e1c0:	b538      	push	{r3, r4, r5, lr}
 800e1c2:	4d06      	ldr	r5, [pc, #24]	; (800e1dc <_isatty_r+0x1c>)
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	4608      	mov	r0, r1
 800e1ca:	602b      	str	r3, [r5, #0]
 800e1cc:	f7f5 fe2d 	bl	8003e2a <_isatty>
 800e1d0:	1c43      	adds	r3, r0, #1
 800e1d2:	d102      	bne.n	800e1da <_isatty_r+0x1a>
 800e1d4:	682b      	ldr	r3, [r5, #0]
 800e1d6:	b103      	cbz	r3, 800e1da <_isatty_r+0x1a>
 800e1d8:	6023      	str	r3, [r4, #0]
 800e1da:	bd38      	pop	{r3, r4, r5, pc}
 800e1dc:	200053ec 	.word	0x200053ec

0800e1e0 <_raise_r>:
 800e1e0:	291f      	cmp	r1, #31
 800e1e2:	b538      	push	{r3, r4, r5, lr}
 800e1e4:	4604      	mov	r4, r0
 800e1e6:	460d      	mov	r5, r1
 800e1e8:	d904      	bls.n	800e1f4 <_raise_r+0x14>
 800e1ea:	2316      	movs	r3, #22
 800e1ec:	6003      	str	r3, [r0, #0]
 800e1ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1f2:	bd38      	pop	{r3, r4, r5, pc}
 800e1f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e1f6:	b112      	cbz	r2, 800e1fe <_raise_r+0x1e>
 800e1f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1fc:	b94b      	cbnz	r3, 800e212 <_raise_r+0x32>
 800e1fe:	4620      	mov	r0, r4
 800e200:	f000 f830 	bl	800e264 <_getpid_r>
 800e204:	462a      	mov	r2, r5
 800e206:	4601      	mov	r1, r0
 800e208:	4620      	mov	r0, r4
 800e20a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e20e:	f000 b817 	b.w	800e240 <_kill_r>
 800e212:	2b01      	cmp	r3, #1
 800e214:	d00a      	beq.n	800e22c <_raise_r+0x4c>
 800e216:	1c59      	adds	r1, r3, #1
 800e218:	d103      	bne.n	800e222 <_raise_r+0x42>
 800e21a:	2316      	movs	r3, #22
 800e21c:	6003      	str	r3, [r0, #0]
 800e21e:	2001      	movs	r0, #1
 800e220:	e7e7      	b.n	800e1f2 <_raise_r+0x12>
 800e222:	2400      	movs	r4, #0
 800e224:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e228:	4628      	mov	r0, r5
 800e22a:	4798      	blx	r3
 800e22c:	2000      	movs	r0, #0
 800e22e:	e7e0      	b.n	800e1f2 <_raise_r+0x12>

0800e230 <raise>:
 800e230:	4b02      	ldr	r3, [pc, #8]	; (800e23c <raise+0xc>)
 800e232:	4601      	mov	r1, r0
 800e234:	6818      	ldr	r0, [r3, #0]
 800e236:	f7ff bfd3 	b.w	800e1e0 <_raise_r>
 800e23a:	bf00      	nop
 800e23c:	2000006c 	.word	0x2000006c

0800e240 <_kill_r>:
 800e240:	b538      	push	{r3, r4, r5, lr}
 800e242:	4d07      	ldr	r5, [pc, #28]	; (800e260 <_kill_r+0x20>)
 800e244:	2300      	movs	r3, #0
 800e246:	4604      	mov	r4, r0
 800e248:	4608      	mov	r0, r1
 800e24a:	4611      	mov	r1, r2
 800e24c:	602b      	str	r3, [r5, #0]
 800e24e:	f7f5 fd7d 	bl	8003d4c <_kill>
 800e252:	1c43      	adds	r3, r0, #1
 800e254:	d102      	bne.n	800e25c <_kill_r+0x1c>
 800e256:	682b      	ldr	r3, [r5, #0]
 800e258:	b103      	cbz	r3, 800e25c <_kill_r+0x1c>
 800e25a:	6023      	str	r3, [r4, #0]
 800e25c:	bd38      	pop	{r3, r4, r5, pc}
 800e25e:	bf00      	nop
 800e260:	200053ec 	.word	0x200053ec

0800e264 <_getpid_r>:
 800e264:	f7f5 bd6a 	b.w	8003d3c <_getpid>

0800e268 <cos>:
 800e268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e26a:	ec53 2b10 	vmov	r2, r3, d0
 800e26e:	4826      	ldr	r0, [pc, #152]	; (800e308 <cos+0xa0>)
 800e270:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e274:	4281      	cmp	r1, r0
 800e276:	dc06      	bgt.n	800e286 <cos+0x1e>
 800e278:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800e300 <cos+0x98>
 800e27c:	b005      	add	sp, #20
 800e27e:	f85d eb04 	ldr.w	lr, [sp], #4
 800e282:	f000 bdf5 	b.w	800ee70 <__kernel_cos>
 800e286:	4821      	ldr	r0, [pc, #132]	; (800e30c <cos+0xa4>)
 800e288:	4281      	cmp	r1, r0
 800e28a:	dd09      	ble.n	800e2a0 <cos+0x38>
 800e28c:	ee10 0a10 	vmov	r0, s0
 800e290:	4619      	mov	r1, r3
 800e292:	f7f1 fff9 	bl	8000288 <__aeabi_dsub>
 800e296:	ec41 0b10 	vmov	d0, r0, r1
 800e29a:	b005      	add	sp, #20
 800e29c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e2a0:	4668      	mov	r0, sp
 800e2a2:	f000 f88d 	bl	800e3c0 <__ieee754_rem_pio2>
 800e2a6:	f000 0003 	and.w	r0, r0, #3
 800e2aa:	2801      	cmp	r0, #1
 800e2ac:	d00b      	beq.n	800e2c6 <cos+0x5e>
 800e2ae:	2802      	cmp	r0, #2
 800e2b0:	d016      	beq.n	800e2e0 <cos+0x78>
 800e2b2:	b9e0      	cbnz	r0, 800e2ee <cos+0x86>
 800e2b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2b8:	ed9d 0b00 	vldr	d0, [sp]
 800e2bc:	f000 fdd8 	bl	800ee70 <__kernel_cos>
 800e2c0:	ec51 0b10 	vmov	r0, r1, d0
 800e2c4:	e7e7      	b.n	800e296 <cos+0x2e>
 800e2c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2ca:	ed9d 0b00 	vldr	d0, [sp]
 800e2ce:	f000 fe97 	bl	800f000 <__kernel_sin>
 800e2d2:	ec53 2b10 	vmov	r2, r3, d0
 800e2d6:	ee10 0a10 	vmov	r0, s0
 800e2da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e2de:	e7da      	b.n	800e296 <cos+0x2e>
 800e2e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2e4:	ed9d 0b00 	vldr	d0, [sp]
 800e2e8:	f000 fdc2 	bl	800ee70 <__kernel_cos>
 800e2ec:	e7f1      	b.n	800e2d2 <cos+0x6a>
 800e2ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2f2:	ed9d 0b00 	vldr	d0, [sp]
 800e2f6:	2001      	movs	r0, #1
 800e2f8:	f000 fe82 	bl	800f000 <__kernel_sin>
 800e2fc:	e7e0      	b.n	800e2c0 <cos+0x58>
 800e2fe:	bf00      	nop
	...
 800e308:	3fe921fb 	.word	0x3fe921fb
 800e30c:	7fefffff 	.word	0x7fefffff

0800e310 <sin>:
 800e310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e312:	ec53 2b10 	vmov	r2, r3, d0
 800e316:	4828      	ldr	r0, [pc, #160]	; (800e3b8 <sin+0xa8>)
 800e318:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e31c:	4281      	cmp	r1, r0
 800e31e:	dc07      	bgt.n	800e330 <sin+0x20>
 800e320:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e3b0 <sin+0xa0>
 800e324:	2000      	movs	r0, #0
 800e326:	b005      	add	sp, #20
 800e328:	f85d eb04 	ldr.w	lr, [sp], #4
 800e32c:	f000 be68 	b.w	800f000 <__kernel_sin>
 800e330:	4822      	ldr	r0, [pc, #136]	; (800e3bc <sin+0xac>)
 800e332:	4281      	cmp	r1, r0
 800e334:	dd09      	ble.n	800e34a <sin+0x3a>
 800e336:	ee10 0a10 	vmov	r0, s0
 800e33a:	4619      	mov	r1, r3
 800e33c:	f7f1 ffa4 	bl	8000288 <__aeabi_dsub>
 800e340:	ec41 0b10 	vmov	d0, r0, r1
 800e344:	b005      	add	sp, #20
 800e346:	f85d fb04 	ldr.w	pc, [sp], #4
 800e34a:	4668      	mov	r0, sp
 800e34c:	f000 f838 	bl	800e3c0 <__ieee754_rem_pio2>
 800e350:	f000 0003 	and.w	r0, r0, #3
 800e354:	2801      	cmp	r0, #1
 800e356:	d00c      	beq.n	800e372 <sin+0x62>
 800e358:	2802      	cmp	r0, #2
 800e35a:	d011      	beq.n	800e380 <sin+0x70>
 800e35c:	b9f0      	cbnz	r0, 800e39c <sin+0x8c>
 800e35e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e362:	ed9d 0b00 	vldr	d0, [sp]
 800e366:	2001      	movs	r0, #1
 800e368:	f000 fe4a 	bl	800f000 <__kernel_sin>
 800e36c:	ec51 0b10 	vmov	r0, r1, d0
 800e370:	e7e6      	b.n	800e340 <sin+0x30>
 800e372:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e376:	ed9d 0b00 	vldr	d0, [sp]
 800e37a:	f000 fd79 	bl	800ee70 <__kernel_cos>
 800e37e:	e7f5      	b.n	800e36c <sin+0x5c>
 800e380:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e384:	ed9d 0b00 	vldr	d0, [sp]
 800e388:	2001      	movs	r0, #1
 800e38a:	f000 fe39 	bl	800f000 <__kernel_sin>
 800e38e:	ec53 2b10 	vmov	r2, r3, d0
 800e392:	ee10 0a10 	vmov	r0, s0
 800e396:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e39a:	e7d1      	b.n	800e340 <sin+0x30>
 800e39c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e3a0:	ed9d 0b00 	vldr	d0, [sp]
 800e3a4:	f000 fd64 	bl	800ee70 <__kernel_cos>
 800e3a8:	e7f1      	b.n	800e38e <sin+0x7e>
 800e3aa:	bf00      	nop
 800e3ac:	f3af 8000 	nop.w
	...
 800e3b8:	3fe921fb 	.word	0x3fe921fb
 800e3bc:	7fefffff 	.word	0x7fefffff

0800e3c0 <__ieee754_rem_pio2>:
 800e3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c4:	ed2d 8b02 	vpush	{d8}
 800e3c8:	ec55 4b10 	vmov	r4, r5, d0
 800e3cc:	4bca      	ldr	r3, [pc, #808]	; (800e6f8 <__ieee754_rem_pio2+0x338>)
 800e3ce:	b08b      	sub	sp, #44	; 0x2c
 800e3d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e3d4:	4598      	cmp	r8, r3
 800e3d6:	4682      	mov	sl, r0
 800e3d8:	9502      	str	r5, [sp, #8]
 800e3da:	dc08      	bgt.n	800e3ee <__ieee754_rem_pio2+0x2e>
 800e3dc:	2200      	movs	r2, #0
 800e3de:	2300      	movs	r3, #0
 800e3e0:	ed80 0b00 	vstr	d0, [r0]
 800e3e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e3e8:	f04f 0b00 	mov.w	fp, #0
 800e3ec:	e028      	b.n	800e440 <__ieee754_rem_pio2+0x80>
 800e3ee:	4bc3      	ldr	r3, [pc, #780]	; (800e6fc <__ieee754_rem_pio2+0x33c>)
 800e3f0:	4598      	cmp	r8, r3
 800e3f2:	dc78      	bgt.n	800e4e6 <__ieee754_rem_pio2+0x126>
 800e3f4:	9b02      	ldr	r3, [sp, #8]
 800e3f6:	4ec2      	ldr	r6, [pc, #776]	; (800e700 <__ieee754_rem_pio2+0x340>)
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	ee10 0a10 	vmov	r0, s0
 800e3fe:	a3b0      	add	r3, pc, #704	; (adr r3, 800e6c0 <__ieee754_rem_pio2+0x300>)
 800e400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e404:	4629      	mov	r1, r5
 800e406:	dd39      	ble.n	800e47c <__ieee754_rem_pio2+0xbc>
 800e408:	f7f1 ff3e 	bl	8000288 <__aeabi_dsub>
 800e40c:	45b0      	cmp	r8, r6
 800e40e:	4604      	mov	r4, r0
 800e410:	460d      	mov	r5, r1
 800e412:	d01b      	beq.n	800e44c <__ieee754_rem_pio2+0x8c>
 800e414:	a3ac      	add	r3, pc, #688	; (adr r3, 800e6c8 <__ieee754_rem_pio2+0x308>)
 800e416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41a:	f7f1 ff35 	bl	8000288 <__aeabi_dsub>
 800e41e:	4602      	mov	r2, r0
 800e420:	460b      	mov	r3, r1
 800e422:	e9ca 2300 	strd	r2, r3, [sl]
 800e426:	4620      	mov	r0, r4
 800e428:	4629      	mov	r1, r5
 800e42a:	f7f1 ff2d 	bl	8000288 <__aeabi_dsub>
 800e42e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e6c8 <__ieee754_rem_pio2+0x308>)
 800e430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e434:	f7f1 ff28 	bl	8000288 <__aeabi_dsub>
 800e438:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e43c:	f04f 0b01 	mov.w	fp, #1
 800e440:	4658      	mov	r0, fp
 800e442:	b00b      	add	sp, #44	; 0x2c
 800e444:	ecbd 8b02 	vpop	{d8}
 800e448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e44c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e6d0 <__ieee754_rem_pio2+0x310>)
 800e44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e452:	f7f1 ff19 	bl	8000288 <__aeabi_dsub>
 800e456:	a3a0      	add	r3, pc, #640	; (adr r3, 800e6d8 <__ieee754_rem_pio2+0x318>)
 800e458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45c:	4604      	mov	r4, r0
 800e45e:	460d      	mov	r5, r1
 800e460:	f7f1 ff12 	bl	8000288 <__aeabi_dsub>
 800e464:	4602      	mov	r2, r0
 800e466:	460b      	mov	r3, r1
 800e468:	e9ca 2300 	strd	r2, r3, [sl]
 800e46c:	4620      	mov	r0, r4
 800e46e:	4629      	mov	r1, r5
 800e470:	f7f1 ff0a 	bl	8000288 <__aeabi_dsub>
 800e474:	a398      	add	r3, pc, #608	; (adr r3, 800e6d8 <__ieee754_rem_pio2+0x318>)
 800e476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47a:	e7db      	b.n	800e434 <__ieee754_rem_pio2+0x74>
 800e47c:	f7f1 ff06 	bl	800028c <__adddf3>
 800e480:	45b0      	cmp	r8, r6
 800e482:	4604      	mov	r4, r0
 800e484:	460d      	mov	r5, r1
 800e486:	d016      	beq.n	800e4b6 <__ieee754_rem_pio2+0xf6>
 800e488:	a38f      	add	r3, pc, #572	; (adr r3, 800e6c8 <__ieee754_rem_pio2+0x308>)
 800e48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48e:	f7f1 fefd 	bl	800028c <__adddf3>
 800e492:	4602      	mov	r2, r0
 800e494:	460b      	mov	r3, r1
 800e496:	e9ca 2300 	strd	r2, r3, [sl]
 800e49a:	4620      	mov	r0, r4
 800e49c:	4629      	mov	r1, r5
 800e49e:	f7f1 fef3 	bl	8000288 <__aeabi_dsub>
 800e4a2:	a389      	add	r3, pc, #548	; (adr r3, 800e6c8 <__ieee754_rem_pio2+0x308>)
 800e4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a8:	f7f1 fef0 	bl	800028c <__adddf3>
 800e4ac:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e4b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e4b4:	e7c4      	b.n	800e440 <__ieee754_rem_pio2+0x80>
 800e4b6:	a386      	add	r3, pc, #536	; (adr r3, 800e6d0 <__ieee754_rem_pio2+0x310>)
 800e4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4bc:	f7f1 fee6 	bl	800028c <__adddf3>
 800e4c0:	a385      	add	r3, pc, #532	; (adr r3, 800e6d8 <__ieee754_rem_pio2+0x318>)
 800e4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	460d      	mov	r5, r1
 800e4ca:	f7f1 fedf 	bl	800028c <__adddf3>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	e9ca 2300 	strd	r2, r3, [sl]
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	4629      	mov	r1, r5
 800e4da:	f7f1 fed5 	bl	8000288 <__aeabi_dsub>
 800e4de:	a37e      	add	r3, pc, #504	; (adr r3, 800e6d8 <__ieee754_rem_pio2+0x318>)
 800e4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e4:	e7e0      	b.n	800e4a8 <__ieee754_rem_pio2+0xe8>
 800e4e6:	4b87      	ldr	r3, [pc, #540]	; (800e704 <__ieee754_rem_pio2+0x344>)
 800e4e8:	4598      	cmp	r8, r3
 800e4ea:	f300 80d8 	bgt.w	800e69e <__ieee754_rem_pio2+0x2de>
 800e4ee:	f000 fe45 	bl	800f17c <fabs>
 800e4f2:	ec55 4b10 	vmov	r4, r5, d0
 800e4f6:	ee10 0a10 	vmov	r0, s0
 800e4fa:	a379      	add	r3, pc, #484	; (adr r3, 800e6e0 <__ieee754_rem_pio2+0x320>)
 800e4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e500:	4629      	mov	r1, r5
 800e502:	f7f2 f879 	bl	80005f8 <__aeabi_dmul>
 800e506:	4b80      	ldr	r3, [pc, #512]	; (800e708 <__ieee754_rem_pio2+0x348>)
 800e508:	2200      	movs	r2, #0
 800e50a:	f7f1 febf 	bl	800028c <__adddf3>
 800e50e:	f7f2 fb23 	bl	8000b58 <__aeabi_d2iz>
 800e512:	4683      	mov	fp, r0
 800e514:	f7f2 f806 	bl	8000524 <__aeabi_i2d>
 800e518:	4602      	mov	r2, r0
 800e51a:	460b      	mov	r3, r1
 800e51c:	ec43 2b18 	vmov	d8, r2, r3
 800e520:	a367      	add	r3, pc, #412	; (adr r3, 800e6c0 <__ieee754_rem_pio2+0x300>)
 800e522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e526:	f7f2 f867 	bl	80005f8 <__aeabi_dmul>
 800e52a:	4602      	mov	r2, r0
 800e52c:	460b      	mov	r3, r1
 800e52e:	4620      	mov	r0, r4
 800e530:	4629      	mov	r1, r5
 800e532:	f7f1 fea9 	bl	8000288 <__aeabi_dsub>
 800e536:	a364      	add	r3, pc, #400	; (adr r3, 800e6c8 <__ieee754_rem_pio2+0x308>)
 800e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53c:	4606      	mov	r6, r0
 800e53e:	460f      	mov	r7, r1
 800e540:	ec51 0b18 	vmov	r0, r1, d8
 800e544:	f7f2 f858 	bl	80005f8 <__aeabi_dmul>
 800e548:	f1bb 0f1f 	cmp.w	fp, #31
 800e54c:	4604      	mov	r4, r0
 800e54e:	460d      	mov	r5, r1
 800e550:	dc0d      	bgt.n	800e56e <__ieee754_rem_pio2+0x1ae>
 800e552:	4b6e      	ldr	r3, [pc, #440]	; (800e70c <__ieee754_rem_pio2+0x34c>)
 800e554:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800e558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e55c:	4543      	cmp	r3, r8
 800e55e:	d006      	beq.n	800e56e <__ieee754_rem_pio2+0x1ae>
 800e560:	4622      	mov	r2, r4
 800e562:	462b      	mov	r3, r5
 800e564:	4630      	mov	r0, r6
 800e566:	4639      	mov	r1, r7
 800e568:	f7f1 fe8e 	bl	8000288 <__aeabi_dsub>
 800e56c:	e00e      	b.n	800e58c <__ieee754_rem_pio2+0x1cc>
 800e56e:	462b      	mov	r3, r5
 800e570:	4622      	mov	r2, r4
 800e572:	4630      	mov	r0, r6
 800e574:	4639      	mov	r1, r7
 800e576:	f7f1 fe87 	bl	8000288 <__aeabi_dsub>
 800e57a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e57e:	9303      	str	r3, [sp, #12]
 800e580:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e584:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e588:	2b10      	cmp	r3, #16
 800e58a:	dc02      	bgt.n	800e592 <__ieee754_rem_pio2+0x1d2>
 800e58c:	e9ca 0100 	strd	r0, r1, [sl]
 800e590:	e039      	b.n	800e606 <__ieee754_rem_pio2+0x246>
 800e592:	a34f      	add	r3, pc, #316	; (adr r3, 800e6d0 <__ieee754_rem_pio2+0x310>)
 800e594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e598:	ec51 0b18 	vmov	r0, r1, d8
 800e59c:	f7f2 f82c 	bl	80005f8 <__aeabi_dmul>
 800e5a0:	4604      	mov	r4, r0
 800e5a2:	460d      	mov	r5, r1
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	4630      	mov	r0, r6
 800e5aa:	4639      	mov	r1, r7
 800e5ac:	f7f1 fe6c 	bl	8000288 <__aeabi_dsub>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	4680      	mov	r8, r0
 800e5b6:	4689      	mov	r9, r1
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	4639      	mov	r1, r7
 800e5bc:	f7f1 fe64 	bl	8000288 <__aeabi_dsub>
 800e5c0:	4622      	mov	r2, r4
 800e5c2:	462b      	mov	r3, r5
 800e5c4:	f7f1 fe60 	bl	8000288 <__aeabi_dsub>
 800e5c8:	a343      	add	r3, pc, #268	; (adr r3, 800e6d8 <__ieee754_rem_pio2+0x318>)
 800e5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ce:	4604      	mov	r4, r0
 800e5d0:	460d      	mov	r5, r1
 800e5d2:	ec51 0b18 	vmov	r0, r1, d8
 800e5d6:	f7f2 f80f 	bl	80005f8 <__aeabi_dmul>
 800e5da:	4622      	mov	r2, r4
 800e5dc:	462b      	mov	r3, r5
 800e5de:	f7f1 fe53 	bl	8000288 <__aeabi_dsub>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	460d      	mov	r5, r1
 800e5ea:	4640      	mov	r0, r8
 800e5ec:	4649      	mov	r1, r9
 800e5ee:	f7f1 fe4b 	bl	8000288 <__aeabi_dsub>
 800e5f2:	9a03      	ldr	r2, [sp, #12]
 800e5f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	2b31      	cmp	r3, #49	; 0x31
 800e5fc:	dc24      	bgt.n	800e648 <__ieee754_rem_pio2+0x288>
 800e5fe:	e9ca 0100 	strd	r0, r1, [sl]
 800e602:	4646      	mov	r6, r8
 800e604:	464f      	mov	r7, r9
 800e606:	e9da 8900 	ldrd	r8, r9, [sl]
 800e60a:	4630      	mov	r0, r6
 800e60c:	4642      	mov	r2, r8
 800e60e:	464b      	mov	r3, r9
 800e610:	4639      	mov	r1, r7
 800e612:	f7f1 fe39 	bl	8000288 <__aeabi_dsub>
 800e616:	462b      	mov	r3, r5
 800e618:	4622      	mov	r2, r4
 800e61a:	f7f1 fe35 	bl	8000288 <__aeabi_dsub>
 800e61e:	9b02      	ldr	r3, [sp, #8]
 800e620:	2b00      	cmp	r3, #0
 800e622:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e626:	f6bf af0b 	bge.w	800e440 <__ieee754_rem_pio2+0x80>
 800e62a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e62e:	f8ca 3004 	str.w	r3, [sl, #4]
 800e632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e636:	f8ca 8000 	str.w	r8, [sl]
 800e63a:	f8ca 0008 	str.w	r0, [sl, #8]
 800e63e:	f8ca 300c 	str.w	r3, [sl, #12]
 800e642:	f1cb 0b00 	rsb	fp, fp, #0
 800e646:	e6fb      	b.n	800e440 <__ieee754_rem_pio2+0x80>
 800e648:	a327      	add	r3, pc, #156	; (adr r3, 800e6e8 <__ieee754_rem_pio2+0x328>)
 800e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64e:	ec51 0b18 	vmov	r0, r1, d8
 800e652:	f7f1 ffd1 	bl	80005f8 <__aeabi_dmul>
 800e656:	4604      	mov	r4, r0
 800e658:	460d      	mov	r5, r1
 800e65a:	4602      	mov	r2, r0
 800e65c:	460b      	mov	r3, r1
 800e65e:	4640      	mov	r0, r8
 800e660:	4649      	mov	r1, r9
 800e662:	f7f1 fe11 	bl	8000288 <__aeabi_dsub>
 800e666:	4602      	mov	r2, r0
 800e668:	460b      	mov	r3, r1
 800e66a:	4606      	mov	r6, r0
 800e66c:	460f      	mov	r7, r1
 800e66e:	4640      	mov	r0, r8
 800e670:	4649      	mov	r1, r9
 800e672:	f7f1 fe09 	bl	8000288 <__aeabi_dsub>
 800e676:	4622      	mov	r2, r4
 800e678:	462b      	mov	r3, r5
 800e67a:	f7f1 fe05 	bl	8000288 <__aeabi_dsub>
 800e67e:	a31c      	add	r3, pc, #112	; (adr r3, 800e6f0 <__ieee754_rem_pio2+0x330>)
 800e680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e684:	4604      	mov	r4, r0
 800e686:	460d      	mov	r5, r1
 800e688:	ec51 0b18 	vmov	r0, r1, d8
 800e68c:	f7f1 ffb4 	bl	80005f8 <__aeabi_dmul>
 800e690:	4622      	mov	r2, r4
 800e692:	462b      	mov	r3, r5
 800e694:	f7f1 fdf8 	bl	8000288 <__aeabi_dsub>
 800e698:	4604      	mov	r4, r0
 800e69a:	460d      	mov	r5, r1
 800e69c:	e760      	b.n	800e560 <__ieee754_rem_pio2+0x1a0>
 800e69e:	4b1c      	ldr	r3, [pc, #112]	; (800e710 <__ieee754_rem_pio2+0x350>)
 800e6a0:	4598      	cmp	r8, r3
 800e6a2:	dd37      	ble.n	800e714 <__ieee754_rem_pio2+0x354>
 800e6a4:	ee10 2a10 	vmov	r2, s0
 800e6a8:	462b      	mov	r3, r5
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	f7f1 fdeb 	bl	8000288 <__aeabi_dsub>
 800e6b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e6b6:	e9ca 0100 	strd	r0, r1, [sl]
 800e6ba:	e695      	b.n	800e3e8 <__ieee754_rem_pio2+0x28>
 800e6bc:	f3af 8000 	nop.w
 800e6c0:	54400000 	.word	0x54400000
 800e6c4:	3ff921fb 	.word	0x3ff921fb
 800e6c8:	1a626331 	.word	0x1a626331
 800e6cc:	3dd0b461 	.word	0x3dd0b461
 800e6d0:	1a600000 	.word	0x1a600000
 800e6d4:	3dd0b461 	.word	0x3dd0b461
 800e6d8:	2e037073 	.word	0x2e037073
 800e6dc:	3ba3198a 	.word	0x3ba3198a
 800e6e0:	6dc9c883 	.word	0x6dc9c883
 800e6e4:	3fe45f30 	.word	0x3fe45f30
 800e6e8:	2e000000 	.word	0x2e000000
 800e6ec:	3ba3198a 	.word	0x3ba3198a
 800e6f0:	252049c1 	.word	0x252049c1
 800e6f4:	397b839a 	.word	0x397b839a
 800e6f8:	3fe921fb 	.word	0x3fe921fb
 800e6fc:	4002d97b 	.word	0x4002d97b
 800e700:	3ff921fb 	.word	0x3ff921fb
 800e704:	413921fb 	.word	0x413921fb
 800e708:	3fe00000 	.word	0x3fe00000
 800e70c:	0801029c 	.word	0x0801029c
 800e710:	7fefffff 	.word	0x7fefffff
 800e714:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e718:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e71c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e720:	4620      	mov	r0, r4
 800e722:	460d      	mov	r5, r1
 800e724:	f7f2 fa18 	bl	8000b58 <__aeabi_d2iz>
 800e728:	f7f1 fefc 	bl	8000524 <__aeabi_i2d>
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	4620      	mov	r0, r4
 800e732:	4629      	mov	r1, r5
 800e734:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e738:	f7f1 fda6 	bl	8000288 <__aeabi_dsub>
 800e73c:	4b21      	ldr	r3, [pc, #132]	; (800e7c4 <__ieee754_rem_pio2+0x404>)
 800e73e:	2200      	movs	r2, #0
 800e740:	f7f1 ff5a 	bl	80005f8 <__aeabi_dmul>
 800e744:	460d      	mov	r5, r1
 800e746:	4604      	mov	r4, r0
 800e748:	f7f2 fa06 	bl	8000b58 <__aeabi_d2iz>
 800e74c:	f7f1 feea 	bl	8000524 <__aeabi_i2d>
 800e750:	4602      	mov	r2, r0
 800e752:	460b      	mov	r3, r1
 800e754:	4620      	mov	r0, r4
 800e756:	4629      	mov	r1, r5
 800e758:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e75c:	f7f1 fd94 	bl	8000288 <__aeabi_dsub>
 800e760:	4b18      	ldr	r3, [pc, #96]	; (800e7c4 <__ieee754_rem_pio2+0x404>)
 800e762:	2200      	movs	r2, #0
 800e764:	f7f1 ff48 	bl	80005f8 <__aeabi_dmul>
 800e768:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e76c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e770:	2703      	movs	r7, #3
 800e772:	2400      	movs	r4, #0
 800e774:	2500      	movs	r5, #0
 800e776:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e77a:	4622      	mov	r2, r4
 800e77c:	462b      	mov	r3, r5
 800e77e:	46b9      	mov	r9, r7
 800e780:	3f01      	subs	r7, #1
 800e782:	f7f2 f9a1 	bl	8000ac8 <__aeabi_dcmpeq>
 800e786:	2800      	cmp	r0, #0
 800e788:	d1f5      	bne.n	800e776 <__ieee754_rem_pio2+0x3b6>
 800e78a:	4b0f      	ldr	r3, [pc, #60]	; (800e7c8 <__ieee754_rem_pio2+0x408>)
 800e78c:	9301      	str	r3, [sp, #4]
 800e78e:	2302      	movs	r3, #2
 800e790:	9300      	str	r3, [sp, #0]
 800e792:	4632      	mov	r2, r6
 800e794:	464b      	mov	r3, r9
 800e796:	4651      	mov	r1, sl
 800e798:	a804      	add	r0, sp, #16
 800e79a:	f000 f819 	bl	800e7d0 <__kernel_rem_pio2>
 800e79e:	9b02      	ldr	r3, [sp, #8]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	4683      	mov	fp, r0
 800e7a4:	f6bf ae4c 	bge.w	800e440 <__ieee754_rem_pio2+0x80>
 800e7a8:	e9da 2100 	ldrd	r2, r1, [sl]
 800e7ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7b0:	e9ca 2300 	strd	r2, r3, [sl]
 800e7b4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e7b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7bc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e7c0:	e73f      	b.n	800e642 <__ieee754_rem_pio2+0x282>
 800e7c2:	bf00      	nop
 800e7c4:	41700000 	.word	0x41700000
 800e7c8:	0801031c 	.word	0x0801031c
 800e7cc:	00000000 	.word	0x00000000

0800e7d0 <__kernel_rem_pio2>:
 800e7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d4:	ed2d 8b02 	vpush	{d8}
 800e7d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e7dc:	f112 0f14 	cmn.w	r2, #20
 800e7e0:	9306      	str	r3, [sp, #24]
 800e7e2:	9104      	str	r1, [sp, #16]
 800e7e4:	4bc2      	ldr	r3, [pc, #776]	; (800eaf0 <__kernel_rem_pio2+0x320>)
 800e7e6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e7e8:	9009      	str	r0, [sp, #36]	; 0x24
 800e7ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e7ee:	9300      	str	r3, [sp, #0]
 800e7f0:	9b06      	ldr	r3, [sp, #24]
 800e7f2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e7f6:	bfa8      	it	ge
 800e7f8:	1ed4      	subge	r4, r2, #3
 800e7fa:	9305      	str	r3, [sp, #20]
 800e7fc:	bfb2      	itee	lt
 800e7fe:	2400      	movlt	r4, #0
 800e800:	2318      	movge	r3, #24
 800e802:	fb94 f4f3 	sdivge	r4, r4, r3
 800e806:	f06f 0317 	mvn.w	r3, #23
 800e80a:	fb04 3303 	mla	r3, r4, r3, r3
 800e80e:	eb03 0a02 	add.w	sl, r3, r2
 800e812:	9b00      	ldr	r3, [sp, #0]
 800e814:	9a05      	ldr	r2, [sp, #20]
 800e816:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800eae0 <__kernel_rem_pio2+0x310>
 800e81a:	eb03 0802 	add.w	r8, r3, r2
 800e81e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e820:	1aa7      	subs	r7, r4, r2
 800e822:	ae20      	add	r6, sp, #128	; 0x80
 800e824:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e828:	2500      	movs	r5, #0
 800e82a:	4545      	cmp	r5, r8
 800e82c:	dd13      	ble.n	800e856 <__kernel_rem_pio2+0x86>
 800e82e:	9b06      	ldr	r3, [sp, #24]
 800e830:	aa20      	add	r2, sp, #128	; 0x80
 800e832:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e836:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e83a:	f04f 0800 	mov.w	r8, #0
 800e83e:	9b00      	ldr	r3, [sp, #0]
 800e840:	4598      	cmp	r8, r3
 800e842:	dc31      	bgt.n	800e8a8 <__kernel_rem_pio2+0xd8>
 800e844:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800eae0 <__kernel_rem_pio2+0x310>
 800e848:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e84c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e850:	462f      	mov	r7, r5
 800e852:	2600      	movs	r6, #0
 800e854:	e01b      	b.n	800e88e <__kernel_rem_pio2+0xbe>
 800e856:	42ef      	cmn	r7, r5
 800e858:	d407      	bmi.n	800e86a <__kernel_rem_pio2+0x9a>
 800e85a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e85e:	f7f1 fe61 	bl	8000524 <__aeabi_i2d>
 800e862:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e866:	3501      	adds	r5, #1
 800e868:	e7df      	b.n	800e82a <__kernel_rem_pio2+0x5a>
 800e86a:	ec51 0b18 	vmov	r0, r1, d8
 800e86e:	e7f8      	b.n	800e862 <__kernel_rem_pio2+0x92>
 800e870:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e874:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e878:	f7f1 febe 	bl	80005f8 <__aeabi_dmul>
 800e87c:	4602      	mov	r2, r0
 800e87e:	460b      	mov	r3, r1
 800e880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e884:	f7f1 fd02 	bl	800028c <__adddf3>
 800e888:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e88c:	3601      	adds	r6, #1
 800e88e:	9b05      	ldr	r3, [sp, #20]
 800e890:	429e      	cmp	r6, r3
 800e892:	f1a7 0708 	sub.w	r7, r7, #8
 800e896:	ddeb      	ble.n	800e870 <__kernel_rem_pio2+0xa0>
 800e898:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e89c:	f108 0801 	add.w	r8, r8, #1
 800e8a0:	ecab 7b02 	vstmia	fp!, {d7}
 800e8a4:	3508      	adds	r5, #8
 800e8a6:	e7ca      	b.n	800e83e <__kernel_rem_pio2+0x6e>
 800e8a8:	9b00      	ldr	r3, [sp, #0]
 800e8aa:	aa0c      	add	r2, sp, #48	; 0x30
 800e8ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e8b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8b2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e8b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e8b8:	9c00      	ldr	r4, [sp, #0]
 800e8ba:	930a      	str	r3, [sp, #40]	; 0x28
 800e8bc:	00e3      	lsls	r3, r4, #3
 800e8be:	9308      	str	r3, [sp, #32]
 800e8c0:	ab98      	add	r3, sp, #608	; 0x260
 800e8c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e8c6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e8ca:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e8ce:	ab70      	add	r3, sp, #448	; 0x1c0
 800e8d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e8d4:	46c3      	mov	fp, r8
 800e8d6:	46a1      	mov	r9, r4
 800e8d8:	f1b9 0f00 	cmp.w	r9, #0
 800e8dc:	f1a5 0508 	sub.w	r5, r5, #8
 800e8e0:	dc77      	bgt.n	800e9d2 <__kernel_rem_pio2+0x202>
 800e8e2:	ec47 6b10 	vmov	d0, r6, r7
 800e8e6:	4650      	mov	r0, sl
 800e8e8:	f000 fc52 	bl	800f190 <scalbn>
 800e8ec:	ec57 6b10 	vmov	r6, r7, d0
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e8f6:	ee10 0a10 	vmov	r0, s0
 800e8fa:	4639      	mov	r1, r7
 800e8fc:	f7f1 fe7c 	bl	80005f8 <__aeabi_dmul>
 800e900:	ec41 0b10 	vmov	d0, r0, r1
 800e904:	f000 fcc4 	bl	800f290 <floor>
 800e908:	4b7a      	ldr	r3, [pc, #488]	; (800eaf4 <__kernel_rem_pio2+0x324>)
 800e90a:	ec51 0b10 	vmov	r0, r1, d0
 800e90e:	2200      	movs	r2, #0
 800e910:	f7f1 fe72 	bl	80005f8 <__aeabi_dmul>
 800e914:	4602      	mov	r2, r0
 800e916:	460b      	mov	r3, r1
 800e918:	4630      	mov	r0, r6
 800e91a:	4639      	mov	r1, r7
 800e91c:	f7f1 fcb4 	bl	8000288 <__aeabi_dsub>
 800e920:	460f      	mov	r7, r1
 800e922:	4606      	mov	r6, r0
 800e924:	f7f2 f918 	bl	8000b58 <__aeabi_d2iz>
 800e928:	9002      	str	r0, [sp, #8]
 800e92a:	f7f1 fdfb 	bl	8000524 <__aeabi_i2d>
 800e92e:	4602      	mov	r2, r0
 800e930:	460b      	mov	r3, r1
 800e932:	4630      	mov	r0, r6
 800e934:	4639      	mov	r1, r7
 800e936:	f7f1 fca7 	bl	8000288 <__aeabi_dsub>
 800e93a:	f1ba 0f00 	cmp.w	sl, #0
 800e93e:	4606      	mov	r6, r0
 800e940:	460f      	mov	r7, r1
 800e942:	dd6d      	ble.n	800ea20 <__kernel_rem_pio2+0x250>
 800e944:	1e61      	subs	r1, r4, #1
 800e946:	ab0c      	add	r3, sp, #48	; 0x30
 800e948:	9d02      	ldr	r5, [sp, #8]
 800e94a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e94e:	f1ca 0018 	rsb	r0, sl, #24
 800e952:	fa43 f200 	asr.w	r2, r3, r0
 800e956:	4415      	add	r5, r2
 800e958:	4082      	lsls	r2, r0
 800e95a:	1a9b      	subs	r3, r3, r2
 800e95c:	aa0c      	add	r2, sp, #48	; 0x30
 800e95e:	9502      	str	r5, [sp, #8]
 800e960:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e964:	f1ca 0217 	rsb	r2, sl, #23
 800e968:	fa43 fb02 	asr.w	fp, r3, r2
 800e96c:	f1bb 0f00 	cmp.w	fp, #0
 800e970:	dd65      	ble.n	800ea3e <__kernel_rem_pio2+0x26e>
 800e972:	9b02      	ldr	r3, [sp, #8]
 800e974:	2200      	movs	r2, #0
 800e976:	3301      	adds	r3, #1
 800e978:	9302      	str	r3, [sp, #8]
 800e97a:	4615      	mov	r5, r2
 800e97c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e980:	4294      	cmp	r4, r2
 800e982:	f300 809f 	bgt.w	800eac4 <__kernel_rem_pio2+0x2f4>
 800e986:	f1ba 0f00 	cmp.w	sl, #0
 800e98a:	dd07      	ble.n	800e99c <__kernel_rem_pio2+0x1cc>
 800e98c:	f1ba 0f01 	cmp.w	sl, #1
 800e990:	f000 80c1 	beq.w	800eb16 <__kernel_rem_pio2+0x346>
 800e994:	f1ba 0f02 	cmp.w	sl, #2
 800e998:	f000 80c7 	beq.w	800eb2a <__kernel_rem_pio2+0x35a>
 800e99c:	f1bb 0f02 	cmp.w	fp, #2
 800e9a0:	d14d      	bne.n	800ea3e <__kernel_rem_pio2+0x26e>
 800e9a2:	4632      	mov	r2, r6
 800e9a4:	463b      	mov	r3, r7
 800e9a6:	4954      	ldr	r1, [pc, #336]	; (800eaf8 <__kernel_rem_pio2+0x328>)
 800e9a8:	2000      	movs	r0, #0
 800e9aa:	f7f1 fc6d 	bl	8000288 <__aeabi_dsub>
 800e9ae:	4606      	mov	r6, r0
 800e9b0:	460f      	mov	r7, r1
 800e9b2:	2d00      	cmp	r5, #0
 800e9b4:	d043      	beq.n	800ea3e <__kernel_rem_pio2+0x26e>
 800e9b6:	4650      	mov	r0, sl
 800e9b8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800eae8 <__kernel_rem_pio2+0x318>
 800e9bc:	f000 fbe8 	bl	800f190 <scalbn>
 800e9c0:	4630      	mov	r0, r6
 800e9c2:	4639      	mov	r1, r7
 800e9c4:	ec53 2b10 	vmov	r2, r3, d0
 800e9c8:	f7f1 fc5e 	bl	8000288 <__aeabi_dsub>
 800e9cc:	4606      	mov	r6, r0
 800e9ce:	460f      	mov	r7, r1
 800e9d0:	e035      	b.n	800ea3e <__kernel_rem_pio2+0x26e>
 800e9d2:	4b4a      	ldr	r3, [pc, #296]	; (800eafc <__kernel_rem_pio2+0x32c>)
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	4630      	mov	r0, r6
 800e9d8:	4639      	mov	r1, r7
 800e9da:	f7f1 fe0d 	bl	80005f8 <__aeabi_dmul>
 800e9de:	f7f2 f8bb 	bl	8000b58 <__aeabi_d2iz>
 800e9e2:	f7f1 fd9f 	bl	8000524 <__aeabi_i2d>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	ec43 2b18 	vmov	d8, r2, r3
 800e9ee:	4b44      	ldr	r3, [pc, #272]	; (800eb00 <__kernel_rem_pio2+0x330>)
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f7f1 fe01 	bl	80005f8 <__aeabi_dmul>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	4639      	mov	r1, r7
 800e9fe:	f7f1 fc43 	bl	8000288 <__aeabi_dsub>
 800ea02:	f7f2 f8a9 	bl	8000b58 <__aeabi_d2iz>
 800ea06:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea0a:	f84b 0b04 	str.w	r0, [fp], #4
 800ea0e:	ec51 0b18 	vmov	r0, r1, d8
 800ea12:	f7f1 fc3b 	bl	800028c <__adddf3>
 800ea16:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ea1a:	4606      	mov	r6, r0
 800ea1c:	460f      	mov	r7, r1
 800ea1e:	e75b      	b.n	800e8d8 <__kernel_rem_pio2+0x108>
 800ea20:	d106      	bne.n	800ea30 <__kernel_rem_pio2+0x260>
 800ea22:	1e63      	subs	r3, r4, #1
 800ea24:	aa0c      	add	r2, sp, #48	; 0x30
 800ea26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea2a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800ea2e:	e79d      	b.n	800e96c <__kernel_rem_pio2+0x19c>
 800ea30:	4b34      	ldr	r3, [pc, #208]	; (800eb04 <__kernel_rem_pio2+0x334>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	f7f2 f866 	bl	8000b04 <__aeabi_dcmpge>
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	d140      	bne.n	800eabe <__kernel_rem_pio2+0x2ee>
 800ea3c:	4683      	mov	fp, r0
 800ea3e:	2200      	movs	r2, #0
 800ea40:	2300      	movs	r3, #0
 800ea42:	4630      	mov	r0, r6
 800ea44:	4639      	mov	r1, r7
 800ea46:	f7f2 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	f000 80c1 	beq.w	800ebd2 <__kernel_rem_pio2+0x402>
 800ea50:	1e65      	subs	r5, r4, #1
 800ea52:	462b      	mov	r3, r5
 800ea54:	2200      	movs	r2, #0
 800ea56:	9900      	ldr	r1, [sp, #0]
 800ea58:	428b      	cmp	r3, r1
 800ea5a:	da6d      	bge.n	800eb38 <__kernel_rem_pio2+0x368>
 800ea5c:	2a00      	cmp	r2, #0
 800ea5e:	f000 808a 	beq.w	800eb76 <__kernel_rem_pio2+0x3a6>
 800ea62:	ab0c      	add	r3, sp, #48	; 0x30
 800ea64:	f1aa 0a18 	sub.w	sl, sl, #24
 800ea68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	f000 80ae 	beq.w	800ebce <__kernel_rem_pio2+0x3fe>
 800ea72:	4650      	mov	r0, sl
 800ea74:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800eae8 <__kernel_rem_pio2+0x318>
 800ea78:	f000 fb8a 	bl	800f190 <scalbn>
 800ea7c:	1c6b      	adds	r3, r5, #1
 800ea7e:	00da      	lsls	r2, r3, #3
 800ea80:	9205      	str	r2, [sp, #20]
 800ea82:	ec57 6b10 	vmov	r6, r7, d0
 800ea86:	aa70      	add	r2, sp, #448	; 0x1c0
 800ea88:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800eafc <__kernel_rem_pio2+0x32c>
 800ea8c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800ea90:	462c      	mov	r4, r5
 800ea92:	f04f 0800 	mov.w	r8, #0
 800ea96:	2c00      	cmp	r4, #0
 800ea98:	f280 80d4 	bge.w	800ec44 <__kernel_rem_pio2+0x474>
 800ea9c:	462c      	mov	r4, r5
 800ea9e:	2c00      	cmp	r4, #0
 800eaa0:	f2c0 8102 	blt.w	800eca8 <__kernel_rem_pio2+0x4d8>
 800eaa4:	4b18      	ldr	r3, [pc, #96]	; (800eb08 <__kernel_rem_pio2+0x338>)
 800eaa6:	461e      	mov	r6, r3
 800eaa8:	ab70      	add	r3, sp, #448	; 0x1c0
 800eaaa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800eaae:	1b2b      	subs	r3, r5, r4
 800eab0:	f04f 0900 	mov.w	r9, #0
 800eab4:	f04f 0a00 	mov.w	sl, #0
 800eab8:	2700      	movs	r7, #0
 800eaba:	9306      	str	r3, [sp, #24]
 800eabc:	e0e6      	b.n	800ec8c <__kernel_rem_pio2+0x4bc>
 800eabe:	f04f 0b02 	mov.w	fp, #2
 800eac2:	e756      	b.n	800e972 <__kernel_rem_pio2+0x1a2>
 800eac4:	f8d8 3000 	ldr.w	r3, [r8]
 800eac8:	bb05      	cbnz	r5, 800eb0c <__kernel_rem_pio2+0x33c>
 800eaca:	b123      	cbz	r3, 800ead6 <__kernel_rem_pio2+0x306>
 800eacc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ead0:	f8c8 3000 	str.w	r3, [r8]
 800ead4:	2301      	movs	r3, #1
 800ead6:	3201      	adds	r2, #1
 800ead8:	f108 0804 	add.w	r8, r8, #4
 800eadc:	461d      	mov	r5, r3
 800eade:	e74f      	b.n	800e980 <__kernel_rem_pio2+0x1b0>
	...
 800eaec:	3ff00000 	.word	0x3ff00000
 800eaf0:	08010468 	.word	0x08010468
 800eaf4:	40200000 	.word	0x40200000
 800eaf8:	3ff00000 	.word	0x3ff00000
 800eafc:	3e700000 	.word	0x3e700000
 800eb00:	41700000 	.word	0x41700000
 800eb04:	3fe00000 	.word	0x3fe00000
 800eb08:	08010428 	.word	0x08010428
 800eb0c:	1acb      	subs	r3, r1, r3
 800eb0e:	f8c8 3000 	str.w	r3, [r8]
 800eb12:	462b      	mov	r3, r5
 800eb14:	e7df      	b.n	800ead6 <__kernel_rem_pio2+0x306>
 800eb16:	1e62      	subs	r2, r4, #1
 800eb18:	ab0c      	add	r3, sp, #48	; 0x30
 800eb1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb1e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800eb22:	a90c      	add	r1, sp, #48	; 0x30
 800eb24:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eb28:	e738      	b.n	800e99c <__kernel_rem_pio2+0x1cc>
 800eb2a:	1e62      	subs	r2, r4, #1
 800eb2c:	ab0c      	add	r3, sp, #48	; 0x30
 800eb2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb32:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eb36:	e7f4      	b.n	800eb22 <__kernel_rem_pio2+0x352>
 800eb38:	a90c      	add	r1, sp, #48	; 0x30
 800eb3a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	430a      	orrs	r2, r1
 800eb42:	e788      	b.n	800ea56 <__kernel_rem_pio2+0x286>
 800eb44:	3301      	adds	r3, #1
 800eb46:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800eb4a:	2900      	cmp	r1, #0
 800eb4c:	d0fa      	beq.n	800eb44 <__kernel_rem_pio2+0x374>
 800eb4e:	9a08      	ldr	r2, [sp, #32]
 800eb50:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800eb54:	446a      	add	r2, sp
 800eb56:	3a98      	subs	r2, #152	; 0x98
 800eb58:	9208      	str	r2, [sp, #32]
 800eb5a:	9a06      	ldr	r2, [sp, #24]
 800eb5c:	a920      	add	r1, sp, #128	; 0x80
 800eb5e:	18a2      	adds	r2, r4, r2
 800eb60:	18e3      	adds	r3, r4, r3
 800eb62:	f104 0801 	add.w	r8, r4, #1
 800eb66:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800eb6a:	9302      	str	r3, [sp, #8]
 800eb6c:	9b02      	ldr	r3, [sp, #8]
 800eb6e:	4543      	cmp	r3, r8
 800eb70:	da04      	bge.n	800eb7c <__kernel_rem_pio2+0x3ac>
 800eb72:	461c      	mov	r4, r3
 800eb74:	e6a2      	b.n	800e8bc <__kernel_rem_pio2+0xec>
 800eb76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e7e4      	b.n	800eb46 <__kernel_rem_pio2+0x376>
 800eb7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb7e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800eb82:	f7f1 fccf 	bl	8000524 <__aeabi_i2d>
 800eb86:	e8e5 0102 	strd	r0, r1, [r5], #8
 800eb8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb8c:	46ab      	mov	fp, r5
 800eb8e:	461c      	mov	r4, r3
 800eb90:	f04f 0900 	mov.w	r9, #0
 800eb94:	2600      	movs	r6, #0
 800eb96:	2700      	movs	r7, #0
 800eb98:	9b05      	ldr	r3, [sp, #20]
 800eb9a:	4599      	cmp	r9, r3
 800eb9c:	dd06      	ble.n	800ebac <__kernel_rem_pio2+0x3dc>
 800eb9e:	9b08      	ldr	r3, [sp, #32]
 800eba0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800eba4:	f108 0801 	add.w	r8, r8, #1
 800eba8:	9308      	str	r3, [sp, #32]
 800ebaa:	e7df      	b.n	800eb6c <__kernel_rem_pio2+0x39c>
 800ebac:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ebb0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ebb4:	f7f1 fd20 	bl	80005f8 <__aeabi_dmul>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	460b      	mov	r3, r1
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	4639      	mov	r1, r7
 800ebc0:	f7f1 fb64 	bl	800028c <__adddf3>
 800ebc4:	f109 0901 	add.w	r9, r9, #1
 800ebc8:	4606      	mov	r6, r0
 800ebca:	460f      	mov	r7, r1
 800ebcc:	e7e4      	b.n	800eb98 <__kernel_rem_pio2+0x3c8>
 800ebce:	3d01      	subs	r5, #1
 800ebd0:	e747      	b.n	800ea62 <__kernel_rem_pio2+0x292>
 800ebd2:	ec47 6b10 	vmov	d0, r6, r7
 800ebd6:	f1ca 0000 	rsb	r0, sl, #0
 800ebda:	f000 fad9 	bl	800f190 <scalbn>
 800ebde:	ec57 6b10 	vmov	r6, r7, d0
 800ebe2:	4ba0      	ldr	r3, [pc, #640]	; (800ee64 <__kernel_rem_pio2+0x694>)
 800ebe4:	ee10 0a10 	vmov	r0, s0
 800ebe8:	2200      	movs	r2, #0
 800ebea:	4639      	mov	r1, r7
 800ebec:	f7f1 ff8a 	bl	8000b04 <__aeabi_dcmpge>
 800ebf0:	b1f8      	cbz	r0, 800ec32 <__kernel_rem_pio2+0x462>
 800ebf2:	4b9d      	ldr	r3, [pc, #628]	; (800ee68 <__kernel_rem_pio2+0x698>)
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	4630      	mov	r0, r6
 800ebf8:	4639      	mov	r1, r7
 800ebfa:	f7f1 fcfd 	bl	80005f8 <__aeabi_dmul>
 800ebfe:	f7f1 ffab 	bl	8000b58 <__aeabi_d2iz>
 800ec02:	4680      	mov	r8, r0
 800ec04:	f7f1 fc8e 	bl	8000524 <__aeabi_i2d>
 800ec08:	4b96      	ldr	r3, [pc, #600]	; (800ee64 <__kernel_rem_pio2+0x694>)
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	f7f1 fcf4 	bl	80005f8 <__aeabi_dmul>
 800ec10:	460b      	mov	r3, r1
 800ec12:	4602      	mov	r2, r0
 800ec14:	4639      	mov	r1, r7
 800ec16:	4630      	mov	r0, r6
 800ec18:	f7f1 fb36 	bl	8000288 <__aeabi_dsub>
 800ec1c:	f7f1 ff9c 	bl	8000b58 <__aeabi_d2iz>
 800ec20:	1c65      	adds	r5, r4, #1
 800ec22:	ab0c      	add	r3, sp, #48	; 0x30
 800ec24:	f10a 0a18 	add.w	sl, sl, #24
 800ec28:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ec2c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ec30:	e71f      	b.n	800ea72 <__kernel_rem_pio2+0x2a2>
 800ec32:	4630      	mov	r0, r6
 800ec34:	4639      	mov	r1, r7
 800ec36:	f7f1 ff8f 	bl	8000b58 <__aeabi_d2iz>
 800ec3a:	ab0c      	add	r3, sp, #48	; 0x30
 800ec3c:	4625      	mov	r5, r4
 800ec3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ec42:	e716      	b.n	800ea72 <__kernel_rem_pio2+0x2a2>
 800ec44:	ab0c      	add	r3, sp, #48	; 0x30
 800ec46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ec4a:	f7f1 fc6b 	bl	8000524 <__aeabi_i2d>
 800ec4e:	4632      	mov	r2, r6
 800ec50:	463b      	mov	r3, r7
 800ec52:	f7f1 fcd1 	bl	80005f8 <__aeabi_dmul>
 800ec56:	4642      	mov	r2, r8
 800ec58:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ec5c:	464b      	mov	r3, r9
 800ec5e:	4630      	mov	r0, r6
 800ec60:	4639      	mov	r1, r7
 800ec62:	f7f1 fcc9 	bl	80005f8 <__aeabi_dmul>
 800ec66:	3c01      	subs	r4, #1
 800ec68:	4606      	mov	r6, r0
 800ec6a:	460f      	mov	r7, r1
 800ec6c:	e713      	b.n	800ea96 <__kernel_rem_pio2+0x2c6>
 800ec6e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800ec72:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800ec76:	f7f1 fcbf 	bl	80005f8 <__aeabi_dmul>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	4648      	mov	r0, r9
 800ec80:	4651      	mov	r1, sl
 800ec82:	f7f1 fb03 	bl	800028c <__adddf3>
 800ec86:	3701      	adds	r7, #1
 800ec88:	4681      	mov	r9, r0
 800ec8a:	468a      	mov	sl, r1
 800ec8c:	9b00      	ldr	r3, [sp, #0]
 800ec8e:	429f      	cmp	r7, r3
 800ec90:	dc02      	bgt.n	800ec98 <__kernel_rem_pio2+0x4c8>
 800ec92:	9b06      	ldr	r3, [sp, #24]
 800ec94:	429f      	cmp	r7, r3
 800ec96:	ddea      	ble.n	800ec6e <__kernel_rem_pio2+0x49e>
 800ec98:	9a06      	ldr	r2, [sp, #24]
 800ec9a:	ab48      	add	r3, sp, #288	; 0x120
 800ec9c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800eca0:	e9c6 9a00 	strd	r9, sl, [r6]
 800eca4:	3c01      	subs	r4, #1
 800eca6:	e6fa      	b.n	800ea9e <__kernel_rem_pio2+0x2ce>
 800eca8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ecaa:	2b02      	cmp	r3, #2
 800ecac:	dc0b      	bgt.n	800ecc6 <__kernel_rem_pio2+0x4f6>
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	dc39      	bgt.n	800ed26 <__kernel_rem_pio2+0x556>
 800ecb2:	d05d      	beq.n	800ed70 <__kernel_rem_pio2+0x5a0>
 800ecb4:	9b02      	ldr	r3, [sp, #8]
 800ecb6:	f003 0007 	and.w	r0, r3, #7
 800ecba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ecbe:	ecbd 8b02 	vpop	{d8}
 800ecc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ecc8:	2b03      	cmp	r3, #3
 800ecca:	d1f3      	bne.n	800ecb4 <__kernel_rem_pio2+0x4e4>
 800eccc:	9b05      	ldr	r3, [sp, #20]
 800ecce:	9500      	str	r5, [sp, #0]
 800ecd0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ecd4:	eb0d 0403 	add.w	r4, sp, r3
 800ecd8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800ecdc:	46a2      	mov	sl, r4
 800ecde:	9b00      	ldr	r3, [sp, #0]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	f1aa 0a08 	sub.w	sl, sl, #8
 800ece6:	dc69      	bgt.n	800edbc <__kernel_rem_pio2+0x5ec>
 800ece8:	46aa      	mov	sl, r5
 800ecea:	f1ba 0f01 	cmp.w	sl, #1
 800ecee:	f1a4 0408 	sub.w	r4, r4, #8
 800ecf2:	f300 8083 	bgt.w	800edfc <__kernel_rem_pio2+0x62c>
 800ecf6:	9c05      	ldr	r4, [sp, #20]
 800ecf8:	ab48      	add	r3, sp, #288	; 0x120
 800ecfa:	441c      	add	r4, r3
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	2100      	movs	r1, #0
 800ed00:	2d01      	cmp	r5, #1
 800ed02:	f300 809a 	bgt.w	800ee3a <__kernel_rem_pio2+0x66a>
 800ed06:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800ed0a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ed0e:	f1bb 0f00 	cmp.w	fp, #0
 800ed12:	f040 8098 	bne.w	800ee46 <__kernel_rem_pio2+0x676>
 800ed16:	9b04      	ldr	r3, [sp, #16]
 800ed18:	e9c3 7800 	strd	r7, r8, [r3]
 800ed1c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ed20:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ed24:	e7c6      	b.n	800ecb4 <__kernel_rem_pio2+0x4e4>
 800ed26:	9e05      	ldr	r6, [sp, #20]
 800ed28:	ab48      	add	r3, sp, #288	; 0x120
 800ed2a:	441e      	add	r6, r3
 800ed2c:	462c      	mov	r4, r5
 800ed2e:	2000      	movs	r0, #0
 800ed30:	2100      	movs	r1, #0
 800ed32:	2c00      	cmp	r4, #0
 800ed34:	da33      	bge.n	800ed9e <__kernel_rem_pio2+0x5ce>
 800ed36:	f1bb 0f00 	cmp.w	fp, #0
 800ed3a:	d036      	beq.n	800edaa <__kernel_rem_pio2+0x5da>
 800ed3c:	4602      	mov	r2, r0
 800ed3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed42:	9c04      	ldr	r4, [sp, #16]
 800ed44:	e9c4 2300 	strd	r2, r3, [r4]
 800ed48:	4602      	mov	r2, r0
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ed50:	f7f1 fa9a 	bl	8000288 <__aeabi_dsub>
 800ed54:	ae4a      	add	r6, sp, #296	; 0x128
 800ed56:	2401      	movs	r4, #1
 800ed58:	42a5      	cmp	r5, r4
 800ed5a:	da29      	bge.n	800edb0 <__kernel_rem_pio2+0x5e0>
 800ed5c:	f1bb 0f00 	cmp.w	fp, #0
 800ed60:	d002      	beq.n	800ed68 <__kernel_rem_pio2+0x598>
 800ed62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed66:	4619      	mov	r1, r3
 800ed68:	9b04      	ldr	r3, [sp, #16]
 800ed6a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ed6e:	e7a1      	b.n	800ecb4 <__kernel_rem_pio2+0x4e4>
 800ed70:	9c05      	ldr	r4, [sp, #20]
 800ed72:	ab48      	add	r3, sp, #288	; 0x120
 800ed74:	441c      	add	r4, r3
 800ed76:	2000      	movs	r0, #0
 800ed78:	2100      	movs	r1, #0
 800ed7a:	2d00      	cmp	r5, #0
 800ed7c:	da09      	bge.n	800ed92 <__kernel_rem_pio2+0x5c2>
 800ed7e:	f1bb 0f00 	cmp.w	fp, #0
 800ed82:	d002      	beq.n	800ed8a <__kernel_rem_pio2+0x5ba>
 800ed84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed88:	4619      	mov	r1, r3
 800ed8a:	9b04      	ldr	r3, [sp, #16]
 800ed8c:	e9c3 0100 	strd	r0, r1, [r3]
 800ed90:	e790      	b.n	800ecb4 <__kernel_rem_pio2+0x4e4>
 800ed92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ed96:	f7f1 fa79 	bl	800028c <__adddf3>
 800ed9a:	3d01      	subs	r5, #1
 800ed9c:	e7ed      	b.n	800ed7a <__kernel_rem_pio2+0x5aa>
 800ed9e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800eda2:	f7f1 fa73 	bl	800028c <__adddf3>
 800eda6:	3c01      	subs	r4, #1
 800eda8:	e7c3      	b.n	800ed32 <__kernel_rem_pio2+0x562>
 800edaa:	4602      	mov	r2, r0
 800edac:	460b      	mov	r3, r1
 800edae:	e7c8      	b.n	800ed42 <__kernel_rem_pio2+0x572>
 800edb0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800edb4:	f7f1 fa6a 	bl	800028c <__adddf3>
 800edb8:	3401      	adds	r4, #1
 800edba:	e7cd      	b.n	800ed58 <__kernel_rem_pio2+0x588>
 800edbc:	e9da 8900 	ldrd	r8, r9, [sl]
 800edc0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800edc4:	9b00      	ldr	r3, [sp, #0]
 800edc6:	3b01      	subs	r3, #1
 800edc8:	9300      	str	r3, [sp, #0]
 800edca:	4632      	mov	r2, r6
 800edcc:	463b      	mov	r3, r7
 800edce:	4640      	mov	r0, r8
 800edd0:	4649      	mov	r1, r9
 800edd2:	f7f1 fa5b 	bl	800028c <__adddf3>
 800edd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800edda:	4602      	mov	r2, r0
 800eddc:	460b      	mov	r3, r1
 800edde:	4640      	mov	r0, r8
 800ede0:	4649      	mov	r1, r9
 800ede2:	f7f1 fa51 	bl	8000288 <__aeabi_dsub>
 800ede6:	4632      	mov	r2, r6
 800ede8:	463b      	mov	r3, r7
 800edea:	f7f1 fa4f 	bl	800028c <__adddf3>
 800edee:	ed9d 7b06 	vldr	d7, [sp, #24]
 800edf2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800edf6:	ed8a 7b00 	vstr	d7, [sl]
 800edfa:	e770      	b.n	800ecde <__kernel_rem_pio2+0x50e>
 800edfc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ee00:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ee04:	4640      	mov	r0, r8
 800ee06:	4632      	mov	r2, r6
 800ee08:	463b      	mov	r3, r7
 800ee0a:	4649      	mov	r1, r9
 800ee0c:	f7f1 fa3e 	bl	800028c <__adddf3>
 800ee10:	e9cd 0100 	strd	r0, r1, [sp]
 800ee14:	4602      	mov	r2, r0
 800ee16:	460b      	mov	r3, r1
 800ee18:	4640      	mov	r0, r8
 800ee1a:	4649      	mov	r1, r9
 800ee1c:	f7f1 fa34 	bl	8000288 <__aeabi_dsub>
 800ee20:	4632      	mov	r2, r6
 800ee22:	463b      	mov	r3, r7
 800ee24:	f7f1 fa32 	bl	800028c <__adddf3>
 800ee28:	ed9d 7b00 	vldr	d7, [sp]
 800ee2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ee30:	ed84 7b00 	vstr	d7, [r4]
 800ee34:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ee38:	e757      	b.n	800ecea <__kernel_rem_pio2+0x51a>
 800ee3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ee3e:	f7f1 fa25 	bl	800028c <__adddf3>
 800ee42:	3d01      	subs	r5, #1
 800ee44:	e75c      	b.n	800ed00 <__kernel_rem_pio2+0x530>
 800ee46:	9b04      	ldr	r3, [sp, #16]
 800ee48:	9a04      	ldr	r2, [sp, #16]
 800ee4a:	601f      	str	r7, [r3, #0]
 800ee4c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ee50:	605c      	str	r4, [r3, #4]
 800ee52:	609d      	str	r5, [r3, #8]
 800ee54:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ee58:	60d3      	str	r3, [r2, #12]
 800ee5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee5e:	6110      	str	r0, [r2, #16]
 800ee60:	6153      	str	r3, [r2, #20]
 800ee62:	e727      	b.n	800ecb4 <__kernel_rem_pio2+0x4e4>
 800ee64:	41700000 	.word	0x41700000
 800ee68:	3e700000 	.word	0x3e700000
 800ee6c:	00000000 	.word	0x00000000

0800ee70 <__kernel_cos>:
 800ee70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee74:	ec57 6b10 	vmov	r6, r7, d0
 800ee78:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ee7c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ee80:	ed8d 1b00 	vstr	d1, [sp]
 800ee84:	da07      	bge.n	800ee96 <__kernel_cos+0x26>
 800ee86:	ee10 0a10 	vmov	r0, s0
 800ee8a:	4639      	mov	r1, r7
 800ee8c:	f7f1 fe64 	bl	8000b58 <__aeabi_d2iz>
 800ee90:	2800      	cmp	r0, #0
 800ee92:	f000 8088 	beq.w	800efa6 <__kernel_cos+0x136>
 800ee96:	4632      	mov	r2, r6
 800ee98:	463b      	mov	r3, r7
 800ee9a:	4630      	mov	r0, r6
 800ee9c:	4639      	mov	r1, r7
 800ee9e:	f7f1 fbab 	bl	80005f8 <__aeabi_dmul>
 800eea2:	4b51      	ldr	r3, [pc, #324]	; (800efe8 <__kernel_cos+0x178>)
 800eea4:	2200      	movs	r2, #0
 800eea6:	4604      	mov	r4, r0
 800eea8:	460d      	mov	r5, r1
 800eeaa:	f7f1 fba5 	bl	80005f8 <__aeabi_dmul>
 800eeae:	a340      	add	r3, pc, #256	; (adr r3, 800efb0 <__kernel_cos+0x140>)
 800eeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb4:	4682      	mov	sl, r0
 800eeb6:	468b      	mov	fp, r1
 800eeb8:	4620      	mov	r0, r4
 800eeba:	4629      	mov	r1, r5
 800eebc:	f7f1 fb9c 	bl	80005f8 <__aeabi_dmul>
 800eec0:	a33d      	add	r3, pc, #244	; (adr r3, 800efb8 <__kernel_cos+0x148>)
 800eec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec6:	f7f1 f9e1 	bl	800028c <__adddf3>
 800eeca:	4622      	mov	r2, r4
 800eecc:	462b      	mov	r3, r5
 800eece:	f7f1 fb93 	bl	80005f8 <__aeabi_dmul>
 800eed2:	a33b      	add	r3, pc, #236	; (adr r3, 800efc0 <__kernel_cos+0x150>)
 800eed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed8:	f7f1 f9d6 	bl	8000288 <__aeabi_dsub>
 800eedc:	4622      	mov	r2, r4
 800eede:	462b      	mov	r3, r5
 800eee0:	f7f1 fb8a 	bl	80005f8 <__aeabi_dmul>
 800eee4:	a338      	add	r3, pc, #224	; (adr r3, 800efc8 <__kernel_cos+0x158>)
 800eee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeea:	f7f1 f9cf 	bl	800028c <__adddf3>
 800eeee:	4622      	mov	r2, r4
 800eef0:	462b      	mov	r3, r5
 800eef2:	f7f1 fb81 	bl	80005f8 <__aeabi_dmul>
 800eef6:	a336      	add	r3, pc, #216	; (adr r3, 800efd0 <__kernel_cos+0x160>)
 800eef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefc:	f7f1 f9c4 	bl	8000288 <__aeabi_dsub>
 800ef00:	4622      	mov	r2, r4
 800ef02:	462b      	mov	r3, r5
 800ef04:	f7f1 fb78 	bl	80005f8 <__aeabi_dmul>
 800ef08:	a333      	add	r3, pc, #204	; (adr r3, 800efd8 <__kernel_cos+0x168>)
 800ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0e:	f7f1 f9bd 	bl	800028c <__adddf3>
 800ef12:	4622      	mov	r2, r4
 800ef14:	462b      	mov	r3, r5
 800ef16:	f7f1 fb6f 	bl	80005f8 <__aeabi_dmul>
 800ef1a:	4622      	mov	r2, r4
 800ef1c:	462b      	mov	r3, r5
 800ef1e:	f7f1 fb6b 	bl	80005f8 <__aeabi_dmul>
 800ef22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef26:	4604      	mov	r4, r0
 800ef28:	460d      	mov	r5, r1
 800ef2a:	4630      	mov	r0, r6
 800ef2c:	4639      	mov	r1, r7
 800ef2e:	f7f1 fb63 	bl	80005f8 <__aeabi_dmul>
 800ef32:	460b      	mov	r3, r1
 800ef34:	4602      	mov	r2, r0
 800ef36:	4629      	mov	r1, r5
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f7f1 f9a5 	bl	8000288 <__aeabi_dsub>
 800ef3e:	4b2b      	ldr	r3, [pc, #172]	; (800efec <__kernel_cos+0x17c>)
 800ef40:	4598      	cmp	r8, r3
 800ef42:	4606      	mov	r6, r0
 800ef44:	460f      	mov	r7, r1
 800ef46:	dc10      	bgt.n	800ef6a <__kernel_cos+0xfa>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	4650      	mov	r0, sl
 800ef4e:	4659      	mov	r1, fp
 800ef50:	f7f1 f99a 	bl	8000288 <__aeabi_dsub>
 800ef54:	460b      	mov	r3, r1
 800ef56:	4926      	ldr	r1, [pc, #152]	; (800eff0 <__kernel_cos+0x180>)
 800ef58:	4602      	mov	r2, r0
 800ef5a:	2000      	movs	r0, #0
 800ef5c:	f7f1 f994 	bl	8000288 <__aeabi_dsub>
 800ef60:	ec41 0b10 	vmov	d0, r0, r1
 800ef64:	b003      	add	sp, #12
 800ef66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6a:	4b22      	ldr	r3, [pc, #136]	; (800eff4 <__kernel_cos+0x184>)
 800ef6c:	4920      	ldr	r1, [pc, #128]	; (800eff0 <__kernel_cos+0x180>)
 800ef6e:	4598      	cmp	r8, r3
 800ef70:	bfcc      	ite	gt
 800ef72:	4d21      	ldrgt	r5, [pc, #132]	; (800eff8 <__kernel_cos+0x188>)
 800ef74:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ef78:	2400      	movs	r4, #0
 800ef7a:	4622      	mov	r2, r4
 800ef7c:	462b      	mov	r3, r5
 800ef7e:	2000      	movs	r0, #0
 800ef80:	f7f1 f982 	bl	8000288 <__aeabi_dsub>
 800ef84:	4622      	mov	r2, r4
 800ef86:	4680      	mov	r8, r0
 800ef88:	4689      	mov	r9, r1
 800ef8a:	462b      	mov	r3, r5
 800ef8c:	4650      	mov	r0, sl
 800ef8e:	4659      	mov	r1, fp
 800ef90:	f7f1 f97a 	bl	8000288 <__aeabi_dsub>
 800ef94:	4632      	mov	r2, r6
 800ef96:	463b      	mov	r3, r7
 800ef98:	f7f1 f976 	bl	8000288 <__aeabi_dsub>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	460b      	mov	r3, r1
 800efa0:	4640      	mov	r0, r8
 800efa2:	4649      	mov	r1, r9
 800efa4:	e7da      	b.n	800ef5c <__kernel_cos+0xec>
 800efa6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800efe0 <__kernel_cos+0x170>
 800efaa:	e7db      	b.n	800ef64 <__kernel_cos+0xf4>
 800efac:	f3af 8000 	nop.w
 800efb0:	be8838d4 	.word	0xbe8838d4
 800efb4:	bda8fae9 	.word	0xbda8fae9
 800efb8:	bdb4b1c4 	.word	0xbdb4b1c4
 800efbc:	3e21ee9e 	.word	0x3e21ee9e
 800efc0:	809c52ad 	.word	0x809c52ad
 800efc4:	3e927e4f 	.word	0x3e927e4f
 800efc8:	19cb1590 	.word	0x19cb1590
 800efcc:	3efa01a0 	.word	0x3efa01a0
 800efd0:	16c15177 	.word	0x16c15177
 800efd4:	3f56c16c 	.word	0x3f56c16c
 800efd8:	5555554c 	.word	0x5555554c
 800efdc:	3fa55555 	.word	0x3fa55555
 800efe0:	00000000 	.word	0x00000000
 800efe4:	3ff00000 	.word	0x3ff00000
 800efe8:	3fe00000 	.word	0x3fe00000
 800efec:	3fd33332 	.word	0x3fd33332
 800eff0:	3ff00000 	.word	0x3ff00000
 800eff4:	3fe90000 	.word	0x3fe90000
 800eff8:	3fd20000 	.word	0x3fd20000
 800effc:	00000000 	.word	0x00000000

0800f000 <__kernel_sin>:
 800f000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f004:	ed2d 8b04 	vpush	{d8-d9}
 800f008:	eeb0 8a41 	vmov.f32	s16, s2
 800f00c:	eef0 8a61 	vmov.f32	s17, s3
 800f010:	ec55 4b10 	vmov	r4, r5, d0
 800f014:	b083      	sub	sp, #12
 800f016:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f01a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f01e:	9001      	str	r0, [sp, #4]
 800f020:	da06      	bge.n	800f030 <__kernel_sin+0x30>
 800f022:	ee10 0a10 	vmov	r0, s0
 800f026:	4629      	mov	r1, r5
 800f028:	f7f1 fd96 	bl	8000b58 <__aeabi_d2iz>
 800f02c:	2800      	cmp	r0, #0
 800f02e:	d051      	beq.n	800f0d4 <__kernel_sin+0xd4>
 800f030:	4622      	mov	r2, r4
 800f032:	462b      	mov	r3, r5
 800f034:	4620      	mov	r0, r4
 800f036:	4629      	mov	r1, r5
 800f038:	f7f1 fade 	bl	80005f8 <__aeabi_dmul>
 800f03c:	4682      	mov	sl, r0
 800f03e:	468b      	mov	fp, r1
 800f040:	4602      	mov	r2, r0
 800f042:	460b      	mov	r3, r1
 800f044:	4620      	mov	r0, r4
 800f046:	4629      	mov	r1, r5
 800f048:	f7f1 fad6 	bl	80005f8 <__aeabi_dmul>
 800f04c:	a341      	add	r3, pc, #260	; (adr r3, 800f154 <__kernel_sin+0x154>)
 800f04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f052:	4680      	mov	r8, r0
 800f054:	4689      	mov	r9, r1
 800f056:	4650      	mov	r0, sl
 800f058:	4659      	mov	r1, fp
 800f05a:	f7f1 facd 	bl	80005f8 <__aeabi_dmul>
 800f05e:	a33f      	add	r3, pc, #252	; (adr r3, 800f15c <__kernel_sin+0x15c>)
 800f060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f064:	f7f1 f910 	bl	8000288 <__aeabi_dsub>
 800f068:	4652      	mov	r2, sl
 800f06a:	465b      	mov	r3, fp
 800f06c:	f7f1 fac4 	bl	80005f8 <__aeabi_dmul>
 800f070:	a33c      	add	r3, pc, #240	; (adr r3, 800f164 <__kernel_sin+0x164>)
 800f072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f076:	f7f1 f909 	bl	800028c <__adddf3>
 800f07a:	4652      	mov	r2, sl
 800f07c:	465b      	mov	r3, fp
 800f07e:	f7f1 fabb 	bl	80005f8 <__aeabi_dmul>
 800f082:	a33a      	add	r3, pc, #232	; (adr r3, 800f16c <__kernel_sin+0x16c>)
 800f084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f088:	f7f1 f8fe 	bl	8000288 <__aeabi_dsub>
 800f08c:	4652      	mov	r2, sl
 800f08e:	465b      	mov	r3, fp
 800f090:	f7f1 fab2 	bl	80005f8 <__aeabi_dmul>
 800f094:	a337      	add	r3, pc, #220	; (adr r3, 800f174 <__kernel_sin+0x174>)
 800f096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09a:	f7f1 f8f7 	bl	800028c <__adddf3>
 800f09e:	9b01      	ldr	r3, [sp, #4]
 800f0a0:	4606      	mov	r6, r0
 800f0a2:	460f      	mov	r7, r1
 800f0a4:	b9eb      	cbnz	r3, 800f0e2 <__kernel_sin+0xe2>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	4650      	mov	r0, sl
 800f0ac:	4659      	mov	r1, fp
 800f0ae:	f7f1 faa3 	bl	80005f8 <__aeabi_dmul>
 800f0b2:	a325      	add	r3, pc, #148	; (adr r3, 800f148 <__kernel_sin+0x148>)
 800f0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b8:	f7f1 f8e6 	bl	8000288 <__aeabi_dsub>
 800f0bc:	4642      	mov	r2, r8
 800f0be:	464b      	mov	r3, r9
 800f0c0:	f7f1 fa9a 	bl	80005f8 <__aeabi_dmul>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	4629      	mov	r1, r5
 800f0cc:	f7f1 f8de 	bl	800028c <__adddf3>
 800f0d0:	4604      	mov	r4, r0
 800f0d2:	460d      	mov	r5, r1
 800f0d4:	ec45 4b10 	vmov	d0, r4, r5
 800f0d8:	b003      	add	sp, #12
 800f0da:	ecbd 8b04 	vpop	{d8-d9}
 800f0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e2:	4b1b      	ldr	r3, [pc, #108]	; (800f150 <__kernel_sin+0x150>)
 800f0e4:	ec51 0b18 	vmov	r0, r1, d8
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	f7f1 fa85 	bl	80005f8 <__aeabi_dmul>
 800f0ee:	4632      	mov	r2, r6
 800f0f0:	ec41 0b19 	vmov	d9, r0, r1
 800f0f4:	463b      	mov	r3, r7
 800f0f6:	4640      	mov	r0, r8
 800f0f8:	4649      	mov	r1, r9
 800f0fa:	f7f1 fa7d 	bl	80005f8 <__aeabi_dmul>
 800f0fe:	4602      	mov	r2, r0
 800f100:	460b      	mov	r3, r1
 800f102:	ec51 0b19 	vmov	r0, r1, d9
 800f106:	f7f1 f8bf 	bl	8000288 <__aeabi_dsub>
 800f10a:	4652      	mov	r2, sl
 800f10c:	465b      	mov	r3, fp
 800f10e:	f7f1 fa73 	bl	80005f8 <__aeabi_dmul>
 800f112:	ec53 2b18 	vmov	r2, r3, d8
 800f116:	f7f1 f8b7 	bl	8000288 <__aeabi_dsub>
 800f11a:	a30b      	add	r3, pc, #44	; (adr r3, 800f148 <__kernel_sin+0x148>)
 800f11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f120:	4606      	mov	r6, r0
 800f122:	460f      	mov	r7, r1
 800f124:	4640      	mov	r0, r8
 800f126:	4649      	mov	r1, r9
 800f128:	f7f1 fa66 	bl	80005f8 <__aeabi_dmul>
 800f12c:	4602      	mov	r2, r0
 800f12e:	460b      	mov	r3, r1
 800f130:	4630      	mov	r0, r6
 800f132:	4639      	mov	r1, r7
 800f134:	f7f1 f8aa 	bl	800028c <__adddf3>
 800f138:	4602      	mov	r2, r0
 800f13a:	460b      	mov	r3, r1
 800f13c:	4620      	mov	r0, r4
 800f13e:	4629      	mov	r1, r5
 800f140:	f7f1 f8a2 	bl	8000288 <__aeabi_dsub>
 800f144:	e7c4      	b.n	800f0d0 <__kernel_sin+0xd0>
 800f146:	bf00      	nop
 800f148:	55555549 	.word	0x55555549
 800f14c:	3fc55555 	.word	0x3fc55555
 800f150:	3fe00000 	.word	0x3fe00000
 800f154:	5acfd57c 	.word	0x5acfd57c
 800f158:	3de5d93a 	.word	0x3de5d93a
 800f15c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f160:	3e5ae5e6 	.word	0x3e5ae5e6
 800f164:	57b1fe7d 	.word	0x57b1fe7d
 800f168:	3ec71de3 	.word	0x3ec71de3
 800f16c:	19c161d5 	.word	0x19c161d5
 800f170:	3f2a01a0 	.word	0x3f2a01a0
 800f174:	1110f8a6 	.word	0x1110f8a6
 800f178:	3f811111 	.word	0x3f811111

0800f17c <fabs>:
 800f17c:	ec51 0b10 	vmov	r0, r1, d0
 800f180:	ee10 2a10 	vmov	r2, s0
 800f184:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f188:	ec43 2b10 	vmov	d0, r2, r3
 800f18c:	4770      	bx	lr
	...

0800f190 <scalbn>:
 800f190:	b570      	push	{r4, r5, r6, lr}
 800f192:	ec55 4b10 	vmov	r4, r5, d0
 800f196:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f19a:	4606      	mov	r6, r0
 800f19c:	462b      	mov	r3, r5
 800f19e:	b999      	cbnz	r1, 800f1c8 <scalbn+0x38>
 800f1a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f1a4:	4323      	orrs	r3, r4
 800f1a6:	d03f      	beq.n	800f228 <scalbn+0x98>
 800f1a8:	4b35      	ldr	r3, [pc, #212]	; (800f280 <scalbn+0xf0>)
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	ee10 0a10 	vmov	r0, s0
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	f7f1 fa21 	bl	80005f8 <__aeabi_dmul>
 800f1b6:	4b33      	ldr	r3, [pc, #204]	; (800f284 <scalbn+0xf4>)
 800f1b8:	429e      	cmp	r6, r3
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	460d      	mov	r5, r1
 800f1be:	da10      	bge.n	800f1e2 <scalbn+0x52>
 800f1c0:	a327      	add	r3, pc, #156	; (adr r3, 800f260 <scalbn+0xd0>)
 800f1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c6:	e01f      	b.n	800f208 <scalbn+0x78>
 800f1c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f1cc:	4291      	cmp	r1, r2
 800f1ce:	d10c      	bne.n	800f1ea <scalbn+0x5a>
 800f1d0:	ee10 2a10 	vmov	r2, s0
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	4629      	mov	r1, r5
 800f1d8:	f7f1 f858 	bl	800028c <__adddf3>
 800f1dc:	4604      	mov	r4, r0
 800f1de:	460d      	mov	r5, r1
 800f1e0:	e022      	b.n	800f228 <scalbn+0x98>
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f1e8:	3936      	subs	r1, #54	; 0x36
 800f1ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f1ee:	4296      	cmp	r6, r2
 800f1f0:	dd0d      	ble.n	800f20e <scalbn+0x7e>
 800f1f2:	2d00      	cmp	r5, #0
 800f1f4:	a11c      	add	r1, pc, #112	; (adr r1, 800f268 <scalbn+0xd8>)
 800f1f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1fa:	da02      	bge.n	800f202 <scalbn+0x72>
 800f1fc:	a11c      	add	r1, pc, #112	; (adr r1, 800f270 <scalbn+0xe0>)
 800f1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f202:	a319      	add	r3, pc, #100	; (adr r3, 800f268 <scalbn+0xd8>)
 800f204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f208:	f7f1 f9f6 	bl	80005f8 <__aeabi_dmul>
 800f20c:	e7e6      	b.n	800f1dc <scalbn+0x4c>
 800f20e:	1872      	adds	r2, r6, r1
 800f210:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f214:	428a      	cmp	r2, r1
 800f216:	dcec      	bgt.n	800f1f2 <scalbn+0x62>
 800f218:	2a00      	cmp	r2, #0
 800f21a:	dd08      	ble.n	800f22e <scalbn+0x9e>
 800f21c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f220:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f224:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f228:	ec45 4b10 	vmov	d0, r4, r5
 800f22c:	bd70      	pop	{r4, r5, r6, pc}
 800f22e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f232:	da08      	bge.n	800f246 <scalbn+0xb6>
 800f234:	2d00      	cmp	r5, #0
 800f236:	a10a      	add	r1, pc, #40	; (adr r1, 800f260 <scalbn+0xd0>)
 800f238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f23c:	dac0      	bge.n	800f1c0 <scalbn+0x30>
 800f23e:	a10e      	add	r1, pc, #56	; (adr r1, 800f278 <scalbn+0xe8>)
 800f240:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f244:	e7bc      	b.n	800f1c0 <scalbn+0x30>
 800f246:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f24a:	3236      	adds	r2, #54	; 0x36
 800f24c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f250:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f254:	4620      	mov	r0, r4
 800f256:	4b0c      	ldr	r3, [pc, #48]	; (800f288 <scalbn+0xf8>)
 800f258:	2200      	movs	r2, #0
 800f25a:	e7d5      	b.n	800f208 <scalbn+0x78>
 800f25c:	f3af 8000 	nop.w
 800f260:	c2f8f359 	.word	0xc2f8f359
 800f264:	01a56e1f 	.word	0x01a56e1f
 800f268:	8800759c 	.word	0x8800759c
 800f26c:	7e37e43c 	.word	0x7e37e43c
 800f270:	8800759c 	.word	0x8800759c
 800f274:	fe37e43c 	.word	0xfe37e43c
 800f278:	c2f8f359 	.word	0xc2f8f359
 800f27c:	81a56e1f 	.word	0x81a56e1f
 800f280:	43500000 	.word	0x43500000
 800f284:	ffff3cb0 	.word	0xffff3cb0
 800f288:	3c900000 	.word	0x3c900000
 800f28c:	00000000 	.word	0x00000000

0800f290 <floor>:
 800f290:	ec51 0b10 	vmov	r0, r1, d0
 800f294:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f29c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f2a0:	2e13      	cmp	r6, #19
 800f2a2:	ee10 5a10 	vmov	r5, s0
 800f2a6:	ee10 8a10 	vmov	r8, s0
 800f2aa:	460c      	mov	r4, r1
 800f2ac:	dc31      	bgt.n	800f312 <floor+0x82>
 800f2ae:	2e00      	cmp	r6, #0
 800f2b0:	da14      	bge.n	800f2dc <floor+0x4c>
 800f2b2:	a333      	add	r3, pc, #204	; (adr r3, 800f380 <floor+0xf0>)
 800f2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b8:	f7f0 ffe8 	bl	800028c <__adddf3>
 800f2bc:	2200      	movs	r2, #0
 800f2be:	2300      	movs	r3, #0
 800f2c0:	f7f1 fc2a 	bl	8000b18 <__aeabi_dcmpgt>
 800f2c4:	b138      	cbz	r0, 800f2d6 <floor+0x46>
 800f2c6:	2c00      	cmp	r4, #0
 800f2c8:	da53      	bge.n	800f372 <floor+0xe2>
 800f2ca:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f2ce:	4325      	orrs	r5, r4
 800f2d0:	d052      	beq.n	800f378 <floor+0xe8>
 800f2d2:	4c2d      	ldr	r4, [pc, #180]	; (800f388 <floor+0xf8>)
 800f2d4:	2500      	movs	r5, #0
 800f2d6:	4621      	mov	r1, r4
 800f2d8:	4628      	mov	r0, r5
 800f2da:	e024      	b.n	800f326 <floor+0x96>
 800f2dc:	4f2b      	ldr	r7, [pc, #172]	; (800f38c <floor+0xfc>)
 800f2de:	4137      	asrs	r7, r6
 800f2e0:	ea01 0307 	and.w	r3, r1, r7
 800f2e4:	4303      	orrs	r3, r0
 800f2e6:	d01e      	beq.n	800f326 <floor+0x96>
 800f2e8:	a325      	add	r3, pc, #148	; (adr r3, 800f380 <floor+0xf0>)
 800f2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ee:	f7f0 ffcd 	bl	800028c <__adddf3>
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	f7f1 fc0f 	bl	8000b18 <__aeabi_dcmpgt>
 800f2fa:	2800      	cmp	r0, #0
 800f2fc:	d0eb      	beq.n	800f2d6 <floor+0x46>
 800f2fe:	2c00      	cmp	r4, #0
 800f300:	bfbe      	ittt	lt
 800f302:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f306:	4133      	asrlt	r3, r6
 800f308:	18e4      	addlt	r4, r4, r3
 800f30a:	ea24 0407 	bic.w	r4, r4, r7
 800f30e:	2500      	movs	r5, #0
 800f310:	e7e1      	b.n	800f2d6 <floor+0x46>
 800f312:	2e33      	cmp	r6, #51	; 0x33
 800f314:	dd0b      	ble.n	800f32e <floor+0x9e>
 800f316:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f31a:	d104      	bne.n	800f326 <floor+0x96>
 800f31c:	ee10 2a10 	vmov	r2, s0
 800f320:	460b      	mov	r3, r1
 800f322:	f7f0 ffb3 	bl	800028c <__adddf3>
 800f326:	ec41 0b10 	vmov	d0, r0, r1
 800f32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f32e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f332:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f336:	40df      	lsrs	r7, r3
 800f338:	4238      	tst	r0, r7
 800f33a:	d0f4      	beq.n	800f326 <floor+0x96>
 800f33c:	a310      	add	r3, pc, #64	; (adr r3, 800f380 <floor+0xf0>)
 800f33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f342:	f7f0 ffa3 	bl	800028c <__adddf3>
 800f346:	2200      	movs	r2, #0
 800f348:	2300      	movs	r3, #0
 800f34a:	f7f1 fbe5 	bl	8000b18 <__aeabi_dcmpgt>
 800f34e:	2800      	cmp	r0, #0
 800f350:	d0c1      	beq.n	800f2d6 <floor+0x46>
 800f352:	2c00      	cmp	r4, #0
 800f354:	da0a      	bge.n	800f36c <floor+0xdc>
 800f356:	2e14      	cmp	r6, #20
 800f358:	d101      	bne.n	800f35e <floor+0xce>
 800f35a:	3401      	adds	r4, #1
 800f35c:	e006      	b.n	800f36c <floor+0xdc>
 800f35e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f362:	2301      	movs	r3, #1
 800f364:	40b3      	lsls	r3, r6
 800f366:	441d      	add	r5, r3
 800f368:	45a8      	cmp	r8, r5
 800f36a:	d8f6      	bhi.n	800f35a <floor+0xca>
 800f36c:	ea25 0507 	bic.w	r5, r5, r7
 800f370:	e7b1      	b.n	800f2d6 <floor+0x46>
 800f372:	2500      	movs	r5, #0
 800f374:	462c      	mov	r4, r5
 800f376:	e7ae      	b.n	800f2d6 <floor+0x46>
 800f378:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f37c:	e7ab      	b.n	800f2d6 <floor+0x46>
 800f37e:	bf00      	nop
 800f380:	8800759c 	.word	0x8800759c
 800f384:	7e37e43c 	.word	0x7e37e43c
 800f388:	bff00000 	.word	0xbff00000
 800f38c:	000fffff 	.word	0x000fffff

0800f390 <_init>:
 800f390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f392:	bf00      	nop
 800f394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f396:	bc08      	pop	{r3}
 800f398:	469e      	mov	lr, r3
 800f39a:	4770      	bx	lr

0800f39c <_fini>:
 800f39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39e:	bf00      	nop
 800f3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3a2:	bc08      	pop	{r3}
 800f3a4:	469e      	mov	lr, r3
 800f3a6:	4770      	bx	lr
